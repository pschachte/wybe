type gen_state_counter {
	pub gen_state_counter(alternative: int, start: int) 
}

def gen_init_state_counter(?generator: gen_state_counter, start: int) {
	?generator = gen_state_counter(0, start)
}

def {test} gen_next_state_counter(!generator: gen_state_counter, ?value: int) {
	?alt = alternative(generator)
    ?start = start(generator)
	
	?generator = gen_state_counter(alt + 1, start)
	
	if {
		  alt = 0 :: ?value = start
          | alt = 1 ::
              gen_init_state_counter(?generator, start + 1)
              gen_next_state_counter(!generator, ?value)
          | otherwise :: fail
	}
}

def {test} loop() use !io {
	gen_init_state_counter(?generator, 0)

	do {
		while gen_next_state_counter(!generator, ?value)
		!println(value)
	}
}

if {
	!loop :: !println("Done!")
	| otherwise :: !println("Failed...")
}

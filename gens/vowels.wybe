type gen_state_vowels {
      pub vowels_alt_0
    | vowels_alt_1
    | vowels_alt_2
    | vowels_alt_3
    | vowels_alt_4
    | finished
}

def gen_init_state_vowels(?generator: gen_state_vowels) {
    ?generator = vowels_alt_0
}

def {test} gen_vowels_alt_0(!generator: gen_state_vowels, ?vowel: char) {
    ?vowel = 'a'
    
    ?generator = vowels_alt_1
}

def {test} gen_vowels_alt_1(!generator: gen_state_vowels, ?vowel: char) {
    ?vowel = 'e'
    
    ?generator = vowels_alt_2
}


def {test} gen_vowels_alt_2(!generator: gen_state_vowels, ?vowel: char) {
    ?vowel = 'i'
    
    ?generator = vowels_alt_3
}


def {test} gen_vowels_alt_3(!generator: gen_state_vowels, ?vowel: char) {
    ?vowel = 'o'
    
    ?generator = vowels_alt_4
}

def {test} gen_vowels_alt_4(!generator: gen_state_vowels, ?vowel: char) {
    ?vowel = 'u'
    
    ?generator = finished
}

def {test} gen_next_state_vowels(!generator: gen_state_vowels, ?vowel: char) {
    #?vowel = '\0'
    if {
          generator = vowels_alt_0 :: gen_vowels_alt_0(!generator, ?vowel)
        | generator = vowels_alt_1 :: gen_vowels_alt_1(!generator, ?vowel)
        | generator = vowels_alt_2 :: gen_vowels_alt_2(!generator, ?vowel)
        | generator = vowels_alt_3 :: gen_vowels_alt_3(!generator, ?vowel)
        | generator = vowels_alt_4 :: gen_vowels_alt_4(!generator, ?vowel)
        | (generator = finished) || otherwise :: fail
    }
}

def {test} loop() use !io {
    gen_init_state_vowels(?generator)

    do {
        while gen_next_state_vowels(!generator, ?vowel)
        !println(vowel)
    }
}

if {
    !loop :: !println("Done!")
    | otherwise :: !println("Failed...")
}

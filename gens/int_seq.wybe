type gen_state_seq {
	pub gen_state_seq(alternative: int, start: int, end: int) 
}

def gen_init_state_seq(?generator: gen_state_seq, start: int, end: int) {
	?generator = gen_state_seq(0, start, end)
}

def {test} gen_next_state_seq(!generator: gen_state_seq, ?value: int) {
	?alt = alternative(generator)
    ?start = start(generator)
    ?end = end(generator)
    ?value = 0
	
	?generator = gen_state_seq(alt + 1, start, end)

    (start < end)
	
	if {
		  alt = 0 :: ?value = start
          | alt = 1 :: gen_init_state_seq(?generator, start + 1, end)
                       gen_next_state_seq(!generator, ?value)
          | true :: fail
	}
}

def {test} loop() use !io {
	gen_init_state_seq(?generator, 0, 4)

	do {
		while gen_next_state_seq(!generator, ?value)
		!println(value)
	}
}

if {
	!loop :: !println("Done!")
	| otherwise :: !println("Failed...")
}

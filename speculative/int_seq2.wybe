# For the generator:
# def {generator} int_seq(start: int, end: int, ?val: int) {
#    (start < end)
#
#    generate {
#        ?val = start
#    ||
#        ?val = start + 1
#    ||
#        int_seq(start + 2, end, ?val)
#    }
#
#    generate {
#        ?parity = 0
#    ||
#        ?parity = 1
#   }
#
#    ?val = val + parity + 1
#
# }

# Transformation to Det/SemiDet Wybe code:

# ################################################################
# # First translation:  init proc produces first solution
# ################################################################


# # Translating the second generator. First proc generates the first solution,
# # plus a choicepoint.

# def gen2_first(?parity:int, ?cp:gen2cp) {
#     ?parity = 0
#     ?cp = gen2_choice2 # no arguments needed for this
# }

# # Second proc takes in choicepoint and generates all other solutions, with
# # new choicepoint.

# def {test} gen2_rest(?parity:int, !cp:gen2cp) {
#     if {cp = gen2_choice2::
#             ?parity = 1
#             ?cp = gen2_nomore
#        |otherwise:: fail
#     }
# }

# pub type gen2cp { pub gen2_choice2 | gen2_nomore }



# # Translating the first generator. First proc generates the first solution,
# # plus a choicepoint.

# def gen1first(start:int, end:int, ?val:int, ?cp:gen1cp) {
#     ?val = start
#     ?cp = gen1_choice2(start, end)
# }

# # Second proc takes in choicepoint and generates all other solutions, with
# # new choicepoint.

# def {test} gen1_rest(?val:int, !cp:gen1cp) {
#     if {cp = gen1_choice2(?start, ?end)::
#             ?val = start + 1
#             ?cp = gen1_choice3(start, end)
#     |   cp = gen1_choice3(?start, ?end)::
#             if {int_seq_first(start + 2, end, ?val, ?innercp)::
#                     ?cp = gen1_choice3_rest(innercp)
#                |otherwise::
#                    fail
#                }
#     |   cp = gen1_choice3_rest(?innercp)::
#             if {int_seq_rest(?val, !innercp)::
#                     ?cp = gen1_choice3_rest(innercp)
#                |otherwise::
#                     fail
#                }
#     |   otherwise:: fail
#     }
# }

# pub type gen1cp { pub
#               gen1_choice2(start:int, end:int)
#             | gen1_choice3(start:int, end:int)
#             | gen1_choice3_rest(innercp:int_seq_cp)
#             | gen1_nomore
#             }


# def {test} int_seq_first(start:int,
#                          end:int,
#                          ?val:int,
#                          ?cp:int_seq_cp) {
#     (start < end)
#     gen1first(start, end, ?val, ?gen1_cp)
#     int_seq_cont1(start, end, val, gen1_cp, ?val, ?cp)
# }

# def {test} int_seq_cont1(start:int, end:int, val:int, gen1_cp:gen1cp, ?val:int, ?cp:int_seq_cp) {
#     gen2_first(?parity, ?gen2_cp)
#     int_seq_cont2(start, end, val, parity, ?val, gen1_cp, gen2_cp, ?cp)
# }

# def int_seq_cont2(start:int, end:int, val0:int, parity:int, ?val:int, gen1_cp:gen1cp, gen2_cp:gen2cp, ?cp:int_seq_cp) {
#     ?val = val0 + parity + 1
#     ?cp = int_seq_cp(start, end, val0, gen1_cp, gen2_cp)
# }


# def {test} int_seq_rest(?val:int,
#                         !cp:int_seq_cp) {
#     (cp = int_seq_cp(?start, ?end, ?val, ?gen1_cp, ?gen2_cp))
#     if {gen2_rest(?parity, !gen2_cp)::
#             int_seq_cont2(start, end, val, parity, ?val, gen1_cp, gen2_cp, ?cp)
#        |gen1_rest(?val, !gen1_cp)::
#             int_seq_cont1(start, end, val, gen1_cp, ?val, ?cp)
#        |otherwise::
#             fail
#        }
# }

# pub type int_seq_cp { pub
#     int_seq_cp(start:int, end:int, val:int, gen1_cp:gen1cp, gen2_cp:gen2cp)
# }


# # testing it:

# if {int_seq_first(1, 10, ?val, ?cp)::
#     !println(val)
#     do {while int_seq_rest(?val, !cp)
#         !println(val)
#     }
# }



# ################################################################
# # Second translation:  no init proc needed
# ################################################################


# # Translating the second generator. First proc just generates choicepoint.

# # Second proc takes in choicepoint and generates all other solutions, with
# # new choicepoint.

# def {test} gen2_next(?parity:int, !cp:gen2cp) {
#     if {cp = gen2_choice1::
#         ?parity = 0
#         ?cp = gen2_choice2
#     |   cp = gen2_choice2::
#         ?parity = 1
#         ?cp = gen2_nomore
#     |   otherwise:: fail
#     }
# }

# pub type gen2cp { pub gen2_choice1 | gen2_choice2 | gen2_nomore }


# # Translating the first generator. First proc generates the first solution,
# # plus a choicepoint.

# # Second proc takes in choicepoint and generates all other solutions, with
# # new choicepoint.

# def {test} gen1_next(start:int, end:int, ?val:int, !cp:gen1cp) {
#     if {cp = gen1_choice1::
#         ?val = start
#         ?cp = gen1_choice2
#     |   cp = gen1_choice2::
#         ?val = start + 1
#         ?cp = gen1_choice3(int_seq_entry)
#     |   cp = gen1_choice3(?innercp)::
#         if {int_seq(start + 2, end, ?val, !innercp)::
#             ?cp = gen1_choice3(innercp)
#         |   otherwise:: fail
#         }
#     |   otherwise:: fail
#     }
# }

# pub type gen1cp { pub
#               gen1_choice1
#             | gen1_choice2
#             | gen1_choice3(innercp:int_seq_cp)
#             | gen1_nomore
#             }


# def {test} int_seq(start:int, end:int, ?val:int, !cp:int_seq_cp) {
#     if {cp = int_seq_entry::
#         (start < end)
#         int_seq_cont1(start, end, ?val, gen1_choice1, !cp)
#     |   cp = int_seq_retry(?cp1, ?cp2, ?val)::
#         int_seq_cont2(start, end, val, ?val, cp1, cp2, !cp)
#     |   otherwise:: fail
#     }
# }

# def {test} int_seq_cont1(start:int, end:int, ?val:int,
#                        cp1:gen1cp, !cp:int_seq_cp) {
#     gen1_next(start, end, ?val0, !cp1)
#     int_seq_cont2(start:int, end:int, val0:int,
#                        ?val:int, cp1, gen2_choice1, !cp)
# }


# def {test} int_seq_cont2(start:int, end:int, val0:int, ?val:int,
#                   cp1:gen1cp, cp2:gen2cp, !cp:int_seq_cp) {
#     if {gen2_next(?parity, !cp2)::
#         ?val = val0 + parity + 1
#         ?cp = int_seq_retry(cp1, cp2, val0)
#     |   otherwise::
#         int_seq_cont1(start, end, ?val, cp1, !cp)
#     }
# }


# pub type int_seq_cp { pub
#     int_seq_entry
#   | int_seq_retry(cp1:gen1cp, cp2:gen2cp, val:int)
# }


# # testing it:


# ?cp = int_seq_entry
# do {while int_seq(1, 10, ?val, !cp)
#     !println(val)
# }


################################################################
# Third translation:  like the second, but without special types
################################################################


# Translating the second generator. First proc just generates choicepoint.

# Second proc takes in choicepoint and generates all other solutions, with
# new choicepoint.

def {test} gen2_next(?parity:int, !cp:int) {
    if {cp = 0::
        ?parity = 0
        ?cp = 1
    |   cp = 1::
        ?parity = 1
        ?cp = 2
    |   otherwise:: fail
    }
}


# Translating the first generator. First proc generates the first solution,
# plus a choicepoint.

# Second proc takes in choicepoint and generates all other solutions, with
# new choicepoint.

def {test} gen1_next(start:int, end:int, ?val:int, !cp:machine_word) {
    if {foreign llvm icmp_eq(cp, 0:!machine_word, ?result:bool) && result::
        ?val = start
        foreign llvm move(1:!machine_word, ?cp)
    |   foreign llvm icmp_eq(cp, 1:!machine_word, ?result:bool) && result::
        ?val = start + 1
        foreign lpvm alloc(8, ?cp)
        foreign lpvm mutate(cp, ?cp, 0, 1, 8, 0, 0:machine_word)
    |   foreign llvm icmp_ugt(cp, 1:!machine_word, ?result:bool) && result::
        foreign lpvm access(cp, 0, 8, 0, ?innercp)
        if {int_seq(start + 2, end, ?val, !innercp)::
            foreign lpvm mutate(cp, ?cp, 0, 1, 8, 0, innercp)
        |   otherwise:: fail
        }
    |   otherwise:: fail
    }
}

def {test} int_seq(start:int, end:int, ?val:int, !cp:machine_word) {
    if {foreign llvm icmp_eq(cp, 0:machine_word, ?result:bool) && result::
        (start < end)
        int_seq_cont1(start, end, ?val, 0:machine_word, !cp)
    |   foreign llvm icmp_ne(cp, 0:machine_word, ?result:bool) && result::
        foreign lpvm access(cp,  0, 8, 0, ?cp1)
        foreign lpvm access(cp,  8, 8, 0, ?cp2)
        foreign lpvm access(cp, 16, 8, 0, ?val)
        int_seq_cont2(start, end, val, ?val, cp1, cp2, !cp)
    |   otherwise:: fail
    }
}

def {test} int_seq_cont1(start:int, end:int, ?val:int,
                       cp1:machine_word, !cp:machine_word) {
    gen1_next(start, end, ?val0, !cp1)
    int_seq_cont2(start:int, end:int, val0:int,
                       ?val:int, cp1, 0, !cp)
}


def {test} int_seq_cont2(start:int, end:int, val0:int, ?val:int,
                  cp1:machine_word, cp2:int, !cp:machine_word) {
    if {gen2_next(?parity, !cp2)::
        ?val = val0 + parity + 1
        foreign lpvm alloc(24, ?cp)
        foreign lpvm mutate(cp, ?cp,  0, 1, 8, 0, cp1)
        foreign lpvm mutate(cp, ?cp,  8, 1, 8, 0, cp2)
        foreign lpvm mutate(cp, ?cp, 16, 1, 8, 0, val0)
    |   otherwise::
        int_seq_cont1(start, end, ?val, cp1, !cp)
    }
}


# pub type int_seq_cp { pub
#     int_seq_entry
#   | int_seq_retry(cp1:machine_word, cp2:int, val:int)
# }


# testing it:


?cp = 0:machine_word
do {while int_seq(1, 10, ?val, !cp)
    !println(val)
}

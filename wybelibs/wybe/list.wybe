# purpose: Standard List type
# since  : 0.1

pragma no_standard_library  # Standard library can't depend on itself!

use wybe.bool, wybe.int, wybe.char
use wybe.io

pub constructors (T) [] | [head:T | tail:_(T)]

# Is the list empty?
pub def {test} empty(xs:_(T)) {
    if { [_ | _] = xs :: fail }
}

# List concatenation
pub def (x:_(T) ,, y:_(T)):_(T) =
    if { x = [?h | ?t] :: [h | t ,, y] | else :: y }

# List length
pub def length(x:_(T)):int = length1(x, 0)

# Helper for length
def length1(x:_(T), acc:int):int =
    if { x = [?h | ?t] :: length1(t, acc + 1) | else :: acc }

# List reversal
pub def reverse(x:_(T)):_(T) = reverse1(x, [])

# Helper for reverse
def reverse1(x:_(T), tail:_(T)):_(T) =
    if { x = [?h | ?t] :: reverse1(t, [h | tail]) | else :: tail }

# List index
# Fails if the index is out of the "bounds" of the list
pub def {test} `[]`(xs:_(T), idx:int):T = x where {
    idx >= 0 # we don't want to check this every time
    ?x = index1(xs, idx)
}

# Helper for `[]`
def {test} index1(xs:_(T), idx:int):T = x where {
    [?x | ?xs] = xs
    (idx = 0 | index1(xs, idx - 1, ?x))
}

# List map
# Apply a resourceful procedure over all elements in a list
pub def map(f:{resource}(T), xs:_(T)) {
    for ?x in xs {
        !f(x)
    }
}

# List map
# Map a procedure over all elements in a list, producing a list of the results
pub def map(f:(A, ?B), as:_(A)):_(B) =
    if { [?a | ?as] = as :: [ f(a) | map(f, as) ] | else :: [] }

# List map
# Map a procedure over two lists, producing a list of the results.
# The tailing elements of the longer list are ignored
pub def map(f:(A, B, ?C), as:_(A), bs:_(B)):_(C) =
    if { [?a | ?as] = as & [?b | ?bs] = bs :: [ f(a, b) | map(f, as, bs) ]
       | else                              :: [] }

# All
# Apply a test to all elements of a list. Succeed if all tests succeed
pub def {test} all(p:{test}(T), xs:_(T)) {
    for ?x in xs {
        p(x)
    }
}

# Any
# Apply a test to all elements of a list. Succeed if at least one test succeeds
pub def {test} any(p:{test}(T), xs:_(T)) {
    [?x | ?xs] = xs
    (p(x) | any(p, xs))
}

# Foldl
# Fold elements in a list into an accumulator, in a left-to-right order
# foldl(f, [a1, a2, ..., aN], !b) ~ f(a1, !b); f(a2, !b); ...; f(aN, !b)
pub def foldl(f:(A, !B), as:_(A), !b:B) {
    for ?a in as {
        f(a, !b)
    }
}

# Foldr
# Fold elements in a list into an accumulator, in a right-to-left order
# foldl(f, [a1, a2, ..., aN], !b) ~ f(aN, !b); ...; f(a2, !b); f(a1, !b)
pub def foldr(f:(A, !B), as:_(A), !b:B) {
    if { [?a | ?as] = as ::
        foldr(f, as, !b)
        f(a, !b)
    }
}

# Filter
# Filter elements from a list where the test succeeds
pub def filter(p:{test}(T), !xs:_(T)) {
    ?out = []
    for ?x in xs {
        if { p(x) :: ?out = [x | out] }
    }
    ?as = reverse(out)
}


## I/O

# Print a list, using `printer` to print each element
# XXX: refactor when we have typeclasses
pub def print(printer:{resource}(T), xs:_(T)) use !io {
    !print('[')
    if { [?x | ?xs] = xs :: 
        !printer(x)
        !print1(printer, xs)
    }
    !print(']')
}

# Print a list followed by a newline, using `printer` to print each element
# XXX: refactor when we have typeclasses
pub def println(printer:{resource}(T), xs:_(T)) use !io { 
    !print(printer, xs)
    !nl
}

# Helper for print
def print1(printer:{resource}(T), xs:_(T)) use !io {
    if { [?x | ?xs] = xs ::
        !print(',')
        !printer(x)
        !print1(printer, xs)
    }
}

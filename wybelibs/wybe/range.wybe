pub constructor range(start:int, stride:int, end:int)

pub def {test} `[|]`(?value:int, ?rest:_, current:_) {
    current = range(?value, ?stride, ?end)
    (value ~= end)
    ?rest = range(value + stride, stride, end)
}

pub def {test} [](r:_, idx:int, ?value:int) {
    (0 <= idx)
    r = range(?size, ?stride, ?end)
    ?value = size + stride * idx
    if { 0 <= stride :: (value < end) | else :: (end < value) }
}

pub def xrange(start:int, stride:int, end:int):_ =
    construct(start, stride, end)

pub def irange(start:int, stride:int, end:int):_ =
    construct(start, stride, end + if { stride < 0 :: -1 | else :: 1 })

# Good ol' Edsgar
# https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html
pub def (start:int .. end:int):_ = 
    construct(start, if { start <= end :: 1 | else :: -1 }, end)

pub def size(r:_):int = sz where {
    r = range(?start, ?stride, ?end)
    ?sz = if { signum(stride) ~= signum(end - start) :: 0
             | 0 <= stride :: (end - start - 1) / stride + 1 
             | else :: (start - end - 1) / -stride + 1 }
}

def construct(start:int, stride:int, end:int):_ = r where {
    ?diff = (end - start) % stride
    ?final = if { 0 <= stride :: 
                    if { diff = 0 :: max(start, end)
                       | else :: max(start, end + stride - diff) }
                | else :: 
                    if { diff = 0 :: min(start, end)
                       | else :: min(start, end + diff) } 
                }
    ?r = range(start, stride, final)
}

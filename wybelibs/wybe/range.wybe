
constructor range(s:int, st:int, e:int)

pub def {test} `[|]`(?value:int, ?rest:_, current:_) {
    current = range(?s, ?st, ?e)
    if { 0 <= st :: (s < e) | else :: (e < s) }
    ?value = s
    ?rest = range(s + st, st, e)
}

pub def {test} [](r:_, idx:int, ?value:int) {
    (0 <= idx)
    r = range(?s, ?st, ?e)
    ?value = s + st * idx
    if { 0 <= st :: (value < e) | else :: (e < value) }
}

pub def xrange(start:int, stride:int, end:int):_ =
    range(start, stride, end)

pub def irange(start:int, stride:int, end:int):_ =
    range(start, stride, end + if { stride < 0 :: -1 | else :: 1 })

# Good ol' Edsgar
# https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html
pub def (start:int .. end:int):_ = 
    xrange(start, if { start <= end :: 1 | else :: -1 }, end)


pub def start(r:_):int = r^s
pub def stride(r:_):int = r^st
pub def end(r:_):int = r^e

pub def size(r:_):int = sz where {
    r = range(?s, ?st, ?e)
    ?sz = if { signum(st) ~= signum(e - s) :: 0
             | 0 <= st :: (e - s - 1) / st + 1 
             | else :: (s - e - 1) / -st + 1 }
}


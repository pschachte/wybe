# purpose: Standard Floating Point Library
# since  : 0.1

pragma no_standard_library  # Standard library can't depend on itself!

use wybe.bool, wybe.int, wybe.comparison, wybe.io

representation is 64 bit float

## Constants

# The ratio of a circle's circumference to its diameter.
pub def pi:_ = 3.14159265358979323846264338327950288

# The base of natural logarithms.  e = exp(1.0).
pub def e:_ = 2.71828182845904523536028747135266250


## Common floating point operations

# Addition.  This operation is reversible:  you can compute either argument from
# the other argument and the value.
pub def (x:_  + y:_):_  = foreign llvm fadd(x,y)
pub def (?x:_ + y:_):_  = ?z where { ?x = foreign llvm fsub(z,y) }
pub def (x:_  + ?y:_):_ = ?z where { ?y = foreign llvm fsub(z,x) }

# Addition assignment.
pub def (!x:_ += y:_) { ?x = x + y }

# Subtraction.  This operation is reversible:  you can compute either argument
# from the other argument and the value.
pub def (x:_  - y:_):_  = foreign llvm fsub(x,y)
pub def (?x:_ - y:_):_  = ?z where { ?x = foreign llvm fadd(z,y) }
pub def (x:_  - ?y:_):_ = ?z where { ?y = foreign llvm fsub(z,x) }

# Unary negation.  This operation is reversible:  you can compute the argument 
# from the value.
pub def -(x:_):_  = foreign llvm fsub(0.0,x)
pub def -(?x:_):_ = ?y where { ?x = foreign llvm fsub(0.0,y) }

# Subtraction assignment.
pub def (!x:_ -= y:_) { ?x = x - y }

# Multiplication.
pub def (x:_ * y:_):_ = foreign llvm fmul(x,y)

# Multiplication assignment.
pub def (!x:_ *= y:_) { ?x = x * y }

# Division.
pub def (x:_ / y:_):_ = foreign llvm fdiv(x,y)

# Division assignment.
pub def (!x:_ /= y:_) { ?x = x / y }

# Raise to the second power.
pub def square(x:_):_ = foreign llvm fmul(x,x)

# Absolute value.
pub def abs(x:_):_ = foreign c `llvm.fabs.f64`(x)


## Comparisons

# Equality and disequality.
pub def {test} (x:_ =  y:_) { foreign llvm {test} fcmp_eq(x,y) }
pub def {test} (x:_ ~= y:_) { foreign llvm {test} fcmp_ne(x,y) }

# Inequalities.
pub def {test} (x:_ <  y:_) { foreign llvm {test} fcmp_slt(x,y) }
pub def {test} (x:_ <= y:_) { foreign llvm {test} fcmp_sle(x,y) }
pub def {test} (x:_ >  y:_) { foreign llvm {test} fcmp_sgt(x,y) }
pub def {test} (x:_ >= y:_) { foreign llvm {test} fcmp_sge(x,y) }

# Three-way comparison.
pub def (x:_ <=> y:_):comparison = 
    if { x < y :: lesser | x = y :: equal | else :: greater }

# Minimum and maximum of two floats.
pub def min(x:_, y:_):_ = foreign c `llvm.minnum.f64`(x,y)
pub def max(x:_, y:_):_ = foreign c `llvm.maxnum.f64`(x,y)


## Conversion procedures

# The smallest whole number greater than or equal to the input, as a float.
pub def ceil(x:_):_ = foreign c `llvm.ceil.f64`(x)

# The largest whole number less than or equal to the input, as a float.
pub def floor(x:_):_ = foreign c `llvm.floor.f64`(x)

# The whole number closest to the input, as a float.
pub def round(x:_):_ = foreign c `llvm.round.f64`(x)

# The closest whole number to the input, as an int.
pub def iround(x:_):int = foreign llvm fptosi(round(x))

# The smallest whole number greater than or equal to the input, as an int.
pub def iceil(x:_):int = foreign llvm fptosi(ceil(x))

# The largest whole number less than or equal to the input, as an int.
pub def ifloor(x:_):int = foreign llvm fptosi(floor(x))


## Transcendental functions

# Square root.
pub def sqrt(x:_):_ = foreign c `llvm.sqrt.f64`(x)

# Raise `x` to the `n` power.  These two functions 
pub def power(x:_,n:_):_ = foreign c `llvm.pow.f64`(x,n)
pub def (x:_ ** n:_):_ = foreign c `llvm.pow.f64`(x,n)

# Trigonometric functions.
pub def sin(x:_):_ = foreign c `llvm.sin.f64`(x)
pub def cos(x:_):_ = foreign c `llvm.cos.f64`(x)
pub def tan(x:_):_ = foreign c `llvm.sin.f64`(x) / foreign c `llvm.cos.f64`(x)

# Exponential:  `e` to the `x` power.
pub def exp(x:_):_ = foreign c `llvm.exp.f64`(x)

# Natural (base `e`) logarithm
pub def log(x:_):_ = foreign c `llvm.log.f64`(x)

# Common (base 10) logarithm
pub def log10(x:_):_ = foreign c `llvm.log10.f64`(x)

# Base 2 logarithm.
pub def log2(x:_):_ = foreign c `llvm.log2.f64`(x)

## I/O

pub def print(x:_) use !io { foreign c print_float(x, !io) }

pub def println(x:_) use !io { !print(x); !nl }

pub def read(?x:_) use !io { foreign c read_float(?x, !io) }

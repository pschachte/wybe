# purpose: Standard Char type
# since  : 0.1

pragma no_standard_library  # Standard library can't depend on itself!

use wybe.bool, wybe.int, wybe.comparison, wybe.string, wybe.io

representation is 8 bit unsigned

## Comparisons

# Equality and disequality.
pub def {test} (x:_ =  y:_) { foreign llvm {test} icmp_eq(x, y) }
pub def {test} (x:_ ~= y:_) { foreign llvm {test} icmp_ne(x, y) }

# Inequalities.
pub def {test} (x:_ <  y:_) { foreign llvm {test} icmp_ult(x, y) }
pub def {test} (x:_ <= y:_) { foreign llvm {test} icmp_ule(x, y) }
pub def {test} (x:_ >  y:_) { foreign llvm {test} icmp_ugt(x, y) }
pub def {test} (x:_ >= y:_) { foreign llvm {test} icmp_uge(x, y) }

# Three-way comparison.
pub def (x:_ <=> y:_):comparison = 
    if { x < y :: lesser | x = y :: equal | else :: greater }


## Conversion procedures

# Int ordinal of a char
pub def ord(c:_):int = foreign lpvm cast(c)

# Char of an integer character code
pub def {test} chr(i:int):_ = foreign lpvm cast(i) where { 0 <= i ; i <= 255 }

## Formatting
pub def fmt(x:_):string = string(x)


## I/O

pub def print(x:_) use !io { foreign c putchar(x, !io) }

pub def println(x:_) use !io { !print(x); !nl }

pub def read(?x:_) use !io { foreign c read_char(?x, !io) }

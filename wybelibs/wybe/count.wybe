# purpose: Standard Count L/ibrary, an unsigned integer
# since  : 0.1

pragma no_standard_library  # Standard library can't depend on itself!

use wybe.bool, wybe.comparison, wybe.int, wybe.io, wybe.string, wybe.char
use wybe.control, wybe.c_string

representation is unsigned

## Common count operations

# Addition.  This operation is reversible:  you can compute either argument from
# the other argument and the value. However, as a count cannot be negative, some
# values may fail.
pub def (x:_ + y:_):_ = foreign llvm add(x,y)
pub def {partial} (?x:_ + y:_):_ = ?z where {
    z >= y
    ?x = foreign llvm sub(z,y)
}
pub def {partial} (x:_ + ?y:_):_ = ?z where {
    z >= x
    ?y = foreign llvm sub(z,x)
}

# Addition assignment.
pub def (!x:_ += y:_) { ?x = x + y }

# Subtraction.  This operation is reversible:  you can compute either argument
# from the other argument and the value. However, as a count cannot be negative, 
# some values may fail.
pub def {partial} (x:_ - y:_):_ = foreign llvm sub(x,y) where { y >= x }
pub def (?x:_ - y:_):_ = ?z where { ?x = foreign llvm add(z,y) }
pub def (x:_ - ?y:_):_ = ?z where { ?y = foreign llvm sub(z,x) }

# Subtraction assignment.
pub def {partial} (!x:_ -= y:_) { ?x = x - y }

# Multiplication.
pub def (x:_ * y:_):_ = foreign llvm mul(x,y)

# Multiplication assignment.
pub def (!x:_ *= y:_) { ?x = x * y }

# Division.
pub def (x:_ / y:_):_ = foreign llvm udiv(x,y)

# Division assignment.
pub def (!x:_ /= y:_) { ?x = x / y }

# Modulus.
pub def (x:_ % y:_):_ = foreign llvm urem(x,y)

# Modulus assignment.
pub def (!x:_ %= y:_) { ?x = x % y }


## Comparisons

# Equality and disequality.
pub def (x:_ =  y:_):bool = foreign llvm icmp_eq(x,y)
pub def (x:_ ~= y:_):bool = foreign llvm icmp_ne(x,y)

# Inequalities.
pub def (x:_ <  y:_):bool = foreign llvm icmp_ult(x,y)
pub def (x:_ <= y:_):bool = foreign llvm icmp_ule(x,y)
pub def (x:_ >  y:_):bool = foreign llvm icmp_ugt(x,y)
pub def (x:_ >= y:_):bool = foreign llvm icmp_uge(x,y)

# Three-way comparison.
pub def (x:_ <=> y:_):comparison = 
    if { x < y :: lesser | x = y :: equal | else :: greater }

# Minimum and maximum of two counts.
pub def min(x:_, y:_):_ = if {x<=y:: x | else:: y}
pub def max(x:_, y:_):_ = if {x>=y:: x | else:: y}

# Conversion (this is lossy:  it can produce negative numbers!)
def int(x:_):int = foreign lpvm cast(x)


## Other

# Increment.
pub def incr(!x:_) { ?x = x + 1:_ }

# Decrement.
pub def {partial} decr(!x:_) { ?x = x - 1:_ }

## Formatting
pub def fmt(x:_):string = s where
    { ?s = (if {x >= 10:_ :: fmt(x/10:_) | else :: ""})
         ,, chr(ord('0')+int(x%10:_))
    | !error("can't happen!")
    }


## I/O

pub def print(x:_) use !io { foreign c print_count(x, !io) }

pub def println(x:_) use !io { !print(x); !nl }

pub def read(?x:_) use !io { foreign c read_count(?x, !io) }

pragma no_standard_library  # Standard library can't depend on itself!

use wybe.bool

representation is unsigned

pub def (x:_ + y:_):_ = foreign llvm add(x,y)
pub def {partial} (?x:_ + y:_):_ = ?z where {
    z >= y
    ?x = foreign llvm sub(z,y)
}
pub def {partial} (x:_ + ?y:_):_ = ?z where {
    z >= x
    ?y = foreign llvm sub(z,x)
}
pub def {partial} (x:_ - y:_):_ = foreign llvm sub(x,y)
    where { y >= x }
pub def (?x:_ - y:_):_ = ?z where { ?x = foreign llvm add(z,y) }
pub def (x:_ - ?y:_):_ = ?z where { ?y = foreign llvm sub(z,x) }
pub def (x:_ * y:_):_ = foreign llvm mul(x,y)
pub def (x:_ / y:_):_ = foreign llvm udiv(x,y)
pub def (x:_ % y:_):_ = foreign llvm urem(x,y)
pub def (x:_ ~= y:_):bool = foreign llvm icmp_ne(x,y)
pub def (x:_ < y:_):bool = foreign llvm icmp_ult(x,y)
pub def (x:_ <= y:_):bool = foreign llvm icmp_ule(x,y)
pub def (x:_ > y:_):bool = foreign llvm icmp_ugt(x,y)
pub def (x:_ >= y:_):bool = foreign llvm icmp_uge(x,y)
pub def (x:_ = y:_):bool = foreign llvm icmp_eq(x,y)
pub def incr(!x:_) { ?x = x + 1:_ }
pub def {partial} decr(!x:_) { ?x = x - 1:_ }
pub def min(x:_, y:_):_ = if {x<=y:: x | else:: y}
pub def max(x:_, y:_):_ = if {x>=y:: x | else:: y}

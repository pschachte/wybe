# purpose: Standard Boolean Library
# since  : 0.1

pragma no_standard_library  # Standard library can't depend on itself!

use wybe.c_string, wybe.string, wybe.char, wybe.int, wybe.io

pub constructors false | true

## Constants

def bound_minimum:_ = false
def bound_maximum:_ = true

# Overloaded versions based on an argument
def bound_minimum(x:_):_ = bound_minimum
def bound_maximum(x:_):_ = bound_maximum

## Common Boolean operations

# Logical and
pub def (p:_ && q:_):_ = foreign llvm and(p, q)

# Logical and assigment
pub def (!p:_ &= q:_) { ?p = (p && q) }

# Logical or
pub def (p:_ || q:_):_ = foreign llvm or(p, q)

# Logical or assigment
pub def (!p:_ |= q:_) { ?p = (p || q) }  

# Logical xor
pub def (p:_ ^^ q:_):_ = foreign llvm xor(p, q) 

# Logical xor assigment
pub def (!p:_ ^= q:_) { ?p = q ^^ p }  

# Logical not
pub def ~(p:_):_ = foreign llvm xor(p, true)


## Comparisons

# Equality and disequality.
pub def (x:_ =  y:_):_ = foreign llvm icmp_eq(x, y)
pub def (x:_ ~= y:_):_ = foreign llvm icmp_ne(x, y)


## Other

pub def succeed { pass } # always succeed

## Formatting
pub def fmt(x:_):string = if { x :: "true" | else :: "false" }

pub def fmt(x:_, minlength:int):string = fmt(x, minlength, ' ')

pub def fmt(x:_, minlength:int, fill:char):string = fmt(fmt(x), minlength, fill)


## I/O
pub def print(x:_) use !io { !print(if {x:: c"true" | else:: c"false"}) }

pub def println(x:_) use !io { !print(x); !nl }

pragma no_standard_library  # Standard library can't depend on itself!

use foreign library m
use wybe.bool

representation is signed

pub def +(x:int,y:int):int = foreign llvm add(x,y)
pub def +(?x:int,y:int,z:int) { ?x = foreign llvm sub(z,y) }
pub def +(x:int,?y:int,z:int) { ?y = foreign llvm sub(z,x) }
pub def -(x:int,y:int):int = foreign llvm sub(x,y)
pub def -(?x:int,y:int,z:int) { ?x = foreign llvm add(z,y) }
pub def -(x:int,?y:int,z:int) { ?y = foreign llvm sub(z,x) }
pub def -(x:int):int = foreign llvm sub(0,x)
pub def -(?x:int,y:int) { ?x = foreign llvm sub(0,y) }
pub def *(x:int,y:int):int = foreign llvm mul(x,y)
pub def /(x:int,y:int):int = foreign llvm sdiv(x,y)
pub def %(x:int,y:int):int = foreign llvm srem(x,y)
pub def /=(x:int,y:int):bool = foreign llvm icmp_ne(x,y)
pub def <(x:int,y:int):bool = foreign llvm icmp_slt(x,y)
pub def <=(x:int,y:int):bool = foreign llvm icmp_sle(x,y)
pub def >(x:int,y:int):bool = foreign llvm icmp_sgt(x,y)
pub def >=(x:int,y:int):bool = foreign llvm icmp_sge(x,y)
pub def =(x:int, y:int):bool = foreign llvm icmp_eq(x,y)
pub def sqrt(x:int):int = foreign c isqrt(x)
pub def power(x:int,y:int):int = foreign c ipow(x,y)
pub def incr(!x:int) { ?x = x + 1 }
pub def decr(!x:int) { ?x = x - 1 }

pragma no_standard_library  # Standard library can't depend on itself!

use foreign library m
use wybe.bool

representation is signed

pub def +(x:_,y:_):_ = foreign llvm add(x,y)
pub def +(?x:_,y:_,z:_) { ?x = foreign llvm sub(z,y) }
pub def +(x:_,?y:_,z:_) { ?y = foreign llvm sub(z,x) }
pub def -(x:_,y:_):_ = foreign llvm sub(x,y)
pub def -(?x:_,y:_,z:_) { ?x = foreign llvm add(z,y) }
pub def -(x:_,?y:_,z:_) { ?y = foreign llvm sub(z,x) }
pub def -(x:_):_ = foreign llvm sub(0,x)
pub def -(?x:_,y:_) { ?x = foreign llvm sub(0,y) }
pub def *(x:_,y:_):_ = foreign llvm mul(x,y)
pub def /(x:_,y:_):_ = foreign llvm sdiv(x,y)
pub def %(x:_,y:_):_ = foreign llvm srem(x,y)
pub def /=(x:_,y:_):bool = foreign llvm icmp_ne(x,y)
pub def <(x:_,y:_):bool = foreign llvm icmp_slt(x,y)
pub def <=(x:_,y:_):bool = foreign llvm icmp_sle(x,y)
pub def >(x:_,y:_):bool = foreign llvm icmp_sgt(x,y)
pub def >=(x:_,y:_):bool = foreign llvm icmp_sge(x,y)
pub def =(x:_, y:_):bool = foreign llvm icmp_eq(x,y)
pub def sqrt(x:_):_ = foreign c isqrt(x)
pub def power(x:_,y:_):_ = foreign c ipow(x,y)
pub def incr(!x:_) { ?x = x + 1 }
pub def decr(!x:_) { ?x = x - 1 }

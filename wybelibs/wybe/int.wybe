# purpose: Standard Integer Library
# since  : 0.1

pragma no_standard_library  # Standard library can't depend on itself!

use foreign library m
use wybe.bool, wybe.comparison, wybe.io

representation is signed


## Common integer operations

# Addition.  This operation is reversible:  you can compute either argument from
# the other argument and the value.
pub def (x:_  + y:_):_  = foreign llvm add(x,y)
pub def (?x:_ + y:_):_  = ?z where { ?x = foreign llvm sub(z,y) }
pub def (x:_  + ?y:_):_ = ?z where { ?y = foreign llvm sub(z,x) }

# Addition assignment.
pub def (!x:_ += y:_) { ?x = x + y }

# Subtraction.  This operation is reversible:  you can compute either argument
# from the other argument and the value.
pub def (x:_  - y:_):_  = foreign llvm sub(x,y)
pub def (?x:_ - y:_):_  = ?z where { ?x = foreign llvm add(z,y) }
pub def (x:_  - ?y:_):_ = ?z where { ?y = foreign llvm sub(z,x) }

# Unary negation.  This operation is reversible:  you can compute the argument 
# from the value.
pub def -(x:_):_  = foreign llvm sub(0,x)
pub def -(?x:_):_ = ?y where { ?x = foreign llvm sub(0,y) }

# Subtraction assignment.
pub def (!x:_ -= y:_) { ?x = x - y }

# Multiplication.
pub def (x:_ * y:_):_ = foreign llvm mul(x,y)

# Multiplication assignment.
pub def (!x:_ *= y:_) { ?x = x * y }

# Integer division.
pub def (x:_ / y:_):_ = foreign llvm sdiv(x,y)

# Integer division assignment.
pub def (!x:_ /= y:_) { ?x = x / y }

# Modulus.
pub def (x:_ % y:_):_ = foreign llvm srem(x,y)

# Modulus assignment.
pub def (!x:_ %= y:_) { ?x = x % y }

# Bit-shift left.
pub def (x:_ << s:_):_ = foreign llvm shl(x, s)

# Bit-shift left assignment.
pub def (!x:_ <<= s:_) { ?x = x << s }

# Arithmetic bit-shift right (pad with sign-bit).
# e.g.  3 >> 1 =  1 (00...011 >> 1 = 00...001)
#      -3 >> 1 = -2 (11...101 >> 1 = 11...110)
# on a 64-bit machine
pub def (x:_ >> s:_):_ = foreign llvm ashr(x, s)

# Arithmetic bit-shift right (pad with sign-bit) assignment.
pub def (!x:_ >>= s:_) { ?x = x >> s }

# Logical bit-shift right (pad with zeroes).
# e.g.  3 >> 1 = 1                   (00...011 >> 1 = 00...001)
#      -3 >> 1 = 9223372036854775806 (11...101 >> 1 = 01...110)
# on a 64-bit machine
pub def logical_bitshift(x:_, s:_):_ = foreign llvm lshr(x, s)

# Logical bit-shift right (pad with zeroes) assignment.
pub def logical_bitshift(!x:_, s:_) { ?x = logical_bitshift(x, s) }


## Comparisons

# Equality and disequality.
pub def (x:_ =  y:_):bool = foreign llvm icmp_eq(x,y)
pub def (x:_ ~= y:_):bool = foreign llvm icmp_ne(x,y)

# Inequalities.
pub def (x:_ <  y:_):bool = foreign llvm icmp_slt(x,y)
pub def (x:_ <= y:_):bool = foreign llvm icmp_sle(x,y)
pub def (x:_ >  y:_):bool = foreign llvm icmp_sgt(x,y)
pub def (x:_ >= y:_):bool = foreign llvm icmp_sge(x,y)

# Three-way comparison.
pub def (x:_ <=> y:_):comparison = 
    if { x < y :: lesser | x = y :: equal | else :: greater }

# Minimum and maximum of two integers.
pub def min(x:_, y:_):_ = if {x<=y:: x | else:: y}
pub def max(x:_, y:_):_ = if {x>=y:: x | else:: y}


## Other operations

# Integer square root.
pub def sqrt(x:_):_ = foreign c isqrt(x)

# Integer exponentiation.
pub def power(x:_, y:_):_ = foreign c ipow(x,y)

# Increment and Decrement.
pub def incr(!x:_) { ?x = x + 1 }
pub def decr(!x:_) { ?x = x - 1 }

# The sign of an integer: +1, -1, or 0
pub def signum(x:_):_ = foreign c signum(x)


## I/O

pub def print(x:_) use !io { foreign c print_int(x, !io) }

pub def println(x:_) use !io { !print(x); !nl }

pub def read(?x:_) use !io { foreign c read_int(?x, !io) }

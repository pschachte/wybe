----------------------------------------------------------------------
- build & execute without multiple specialization
----------------------------------------------------------------------
(0, 0, 0) #0
(-1, -6, 3) #100
** malloc count: 201

----------------------------------------------------------------------


----------------------------------------------------------------------
- build & execute with multiple specialization
----------------------------------------------------------------------
(0, 0, 0) #0
(-1, -6, 3) #100
** malloc count: 1

----------------------------------------------------------------------


----------------------------------------------------------------------
- final dump (with multiple specialization)
----------------------------------------------------------------------
======================================================================
AFTER BUILDING MAIN:
 Module 
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    from drone use 
                    use wybe
                    from wybe.io use 
                    from wybe.memory_management use 
  resources       : 
  procs           : 

*main* > {inline} (0 calls)
0: ([argc#0:wybe.int], [argv#0:wybe.int], ?exit_code#0:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c {semipure} gc_init() @memory_management:12:1
    foreign llvm move(0:wybe.int, ?#exit_code#0:wybe.int) @command_line:18:5
    drone.<0>(0:wybe.phantom, ?#io#2:wybe.phantom) #3
    foreign c {semipure,terminal} exit(0:wybe.int)

LLVM code       : None

--------------------------------------------------
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    argv: command_line.argv
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:4:5)] @command_line:4:5
                    argv: fromList [(command_line.argv,wybe.int @command_line:12:5)] @command_line:12:5
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:18:30 @command_line:18:5)] @command_line:18:5
  procs           : 

*main* > public {inline} (0 calls)
0: (?exit_code#1:wybe.int, io#0:wybe.phantom, [?io#0:wybe.phantom]):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:wybe.int, ?exit_code#1:wybe.int) @command_line:18:5


set_exit_code > public {inline} (0 calls)
0: set_exit_code(code#0:wybe.int, [exit_code#0:wybe.int], ?exit_code#1:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(~code#0:wybe.int, ?exit_code#1:wybe.int) @command_line:24:5

  LLVM code       :

; ModuleID = 'command_line'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"command_line.<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i64 @"command_line.set_exit_code<0>"(i64  %"code#0")    {
entry:
  ret i64 %"code#0" 
}
--------------------------------------------------
 Module drone
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : drone.<0>
  imports         : use command_line
                    use drone.drone_info
                    use wybe
  resources       : 
  submodules      : drone.drone_info
  procs           : 

*main* > public (0 calls)
0: (io#0:wybe.phantom, ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(4,(drone.loop<0>,fromList [NonAliasedParamCond 0 []]))]
    drone.drone_init<0>(?tmp$0#0:drone.drone_info) #0 @drone:57:6
    foreign c read_char(?ch#0:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:28:33
    foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @io:38:20
    foreign llvm icmp_ne(ch#0:wybe.char, ~tmp$1#0:wybe.char, ?tmp$2#0:wybe.bool) @char:8:28
    case ~tmp$2#0:wybe.bool of
    0:
        foreign c {impure} malloc_count(?tmp$10#0:wybe.int) @memory_management:9:5
        foreign c print_string("** malloc count: ":wybe.string, ~io#1:wybe.phantom, ?tmp$11#0:wybe.phantom) @io:30:35
        foreign c print_int(~tmp$10#0:wybe.int, ~tmp$11#0:wybe.phantom, ?tmp$12#0:wybe.phantom) @io:13:32
        foreign c putchar('\n':wybe.char, ~tmp$12#0:wybe.phantom, ?io#3:wybe.phantom) @io:11:22

    1:
        drone.loop<0>[410bae77d3](~tmp$0#0:drone.drone_info, ~ch#0:wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #4 @drone:60:6
        foreign c {impure} malloc_count(?tmp$10#0:wybe.int) @memory_management:9:5
        foreign c print_string("** malloc count: ":wybe.string, ~io#2:wybe.phantom, ?tmp$11#0:wybe.phantom) @io:30:35
        foreign c print_int(~tmp$10#0:wybe.int, ~tmp$11#0:wybe.phantom, ?tmp$12#0:wybe.phantom) @io:13:32
        foreign c putchar('\n':wybe.char, ~tmp$12#0:wybe.phantom, ?io#3:wybe.phantom) @io:11:22



do_action > (2 calls)
0: do_action(d#0:drone.drone_info, ?d#2:drone.drone_info, action#0:wybe.char, ?success#2:wybe.bool):
 AliasPairs: [(d#0,d#2)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(5,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 []])),(10,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 []])),(15,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 []])),(20,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 []])),(25,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 []])),(30,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 []])),(33,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 [0]]))]
    foreign llvm icmp_eq(action#0:wybe.char, 'n':wybe.char, ?tmp$21#0:wybe.bool) @char:7:28
    case ~tmp$21#0:wybe.bool of
    0:
        foreign llvm icmp_eq(action#0:wybe.char, 's':wybe.char, ?tmp$20#0:wybe.bool) @char:7:28
        case ~tmp$20#0:wybe.bool of
        0:
            foreign llvm icmp_eq(action#0:wybe.char, 'w':wybe.char, ?tmp$19#0:wybe.bool) @char:7:28
            case ~tmp$19#0:wybe.bool of
            0:
                foreign llvm icmp_eq(action#0:wybe.char, 'e':wybe.char, ?tmp$18#0:wybe.bool) @char:7:28
                case ~tmp$18#0:wybe.bool of
                0:
                    foreign llvm icmp_eq(action#0:wybe.char, 'u':wybe.char, ?tmp$17#0:wybe.bool) @char:7:28
                    case ~tmp$17#0:wybe.bool of
                    0:
                        foreign llvm icmp_eq(~action#0:wybe.char, 'd':wybe.char, ?tmp$16#0:wybe.bool) @char:7:28
                        case ~tmp$16#0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?success#2:wybe.bool) @drone:33:9
                            drone.gen$2<0>(_:wybe.char, ~d#0:drone.drone_info, 0:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #33

                        1:
                            foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$12#0:wybe.int)
                            foreign llvm sub(~tmp$12#0:wybe.int, 1:wybe.int, ?tmp$11#0:wybe.int) @int:11:24
                            foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$11#0:wybe.int)
                            drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #30
                            foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


                    1:
                        foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.int)
                        foreign llvm add(~tmp$10#0:wybe.int, 1:wybe.int, ?tmp$9#0:wybe.int) @int:8:24
                        foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$9#0:wybe.int)
                        drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #25
                        foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


                1:
                    foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.int)
                    foreign llvm add(~tmp$8#0:wybe.int, 1:wybe.int, ?tmp$7#0:wybe.int) @int:8:24
                    foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$7#0:wybe.int)
                    drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #20
                    foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


            1:
                foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
                foreign llvm sub(~tmp$6#0:wybe.int, 1:wybe.int, ?tmp$5#0:wybe.int) @int:11:24
                foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$5#0:wybe.int)
                drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #15
                foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


        1:
            foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
            foreign llvm add(~tmp$4#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.int) @int:8:24
            foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$3#0:wybe.int)
            drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #10
            foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


    1:
        foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm sub(~tmp$2#0:wybe.int, 1:wybe.int, ?tmp$1#0:wybe.int) @int:11:24
        foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$1#0:wybe.int)
        drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #5
        foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)



drone_init > (3 calls)
0: drone_init(?$#0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?tmp$5#0:drone.drone_info)
    foreign lpvm mutate(~tmp$5#0:drone.drone_info, ?tmp$6#0:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:drone.drone_info, ?tmp$7#0:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$7#0:drone.drone_info, ?tmp$8#0:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$8#0:drone.drone_info, ?$#0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)


gen$1 > {inline} (2 calls)
0: gen$1([ch#0:wybe.char], [d#0:drone.drone_info], io#0:wybe.phantom, [tmp$0#0:drone.drone_info], ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c {impure} malloc_count(?mc#0:wybe.int) @memory_management:9:5
    foreign c print_string("** malloc count: ":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:30:35
    foreign c print_int(~mc#0:wybe.int, ~#io#1:wybe.phantom, ?tmp$6#0:wybe.phantom) @io:13:32
    foreign c putchar('\n':wybe.char, ~tmp$6#0:wybe.phantom, ?#io#2:wybe.phantom) @io:11:22


gen$2 > (7 calls)
0: gen$2([action#0:wybe.char], d#0:drone.drone_info, success#0:wybe.bool, [tmp$0#0:wybe.bool], ?d#1:drone.drone_info, [?success#0:wybe.bool]):
 AliasPairs: [(d#0,d#1)]
 InterestingCallProperties: [InterestingUnaliased 1]
    case success#0:wybe.bool of
    0:
        foreign llvm move(~d#0:drone.drone_info, ?d#1:drone.drone_info)

    1:
        foreign lpvm access(d#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
        foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @int:8:24
        foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)



gen$3 > (5 calls)
0: gen$3([ch#0:wybe.char], d#0:drone.drone_info, io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 1]
 MultiSpeczDepInfo: [(3,(drone.loop<0>,fromList [NonAliasedParamCond 0 [1]]))]
    foreign c read_char(?ch#1:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:28:33
    foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @io:38:20
    foreign llvm icmp_ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$2#0:wybe.bool) @char:8:28
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~io#1:wybe.phantom, ?io#2:wybe.phantom)

    1:
        drone.loop<0>(~d#0:drone.drone_info, ~ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #3 @drone:53:10



loop > (2 calls)
0: loop(d#0:drone.drone_info, ch#0:wybe.char, io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(4,(drone.gen$3<0>,fromList [NonAliasedParamCond 1 [0]])),(6,(drone.do_action<0>,fromList [NonAliasedParamCond 0 [0]])),(10,(drone.gen$3<0>,fromList [NonAliasedParamCond 1 [0]])),(11,(drone.gen$3<0>,fromList [NonAliasedParamCond 1 [0]])),(12,(drone.gen$3<0>,fromList [NonAliasedParamCond 1 [0]])),(13,(drone.gen$3<0>,fromList [NonAliasedParamCond 1 [0]]))]
    foreign llvm icmp_ne(ch#0:wybe.char, ' ':wybe.char, ?tmp$5#0:wybe.bool) @char:8:28
    case ~tmp$5#0:wybe.bool of
    0:
        drone.gen$3<0>(_:wybe.char, ~d#0:drone.drone_info, ~io#0:wybe.phantom, ?io#2:wybe.phantom) #13

    1:
        foreign llvm icmp_ne(ch#0:wybe.char, '\n':wybe.char, ?tmp$6#0:wybe.bool) @char:8:28
        case ~tmp$6#0:wybe.bool of
        0:
            drone.gen$3<0>(_:wybe.char, ~d#0:drone.drone_info, ~io#0:wybe.phantom, ?io#2:wybe.phantom) #12

        1:
            foreign llvm icmp_eq(ch#0:wybe.char, 'p':wybe.char, ?tmp$4#0:wybe.bool) @char:7:28
            case ~tmp$4#0:wybe.bool of
            0:
                drone.do_action<0>(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, ~ch#0:wybe.char, ?success#0:wybe.bool) #6 @drone:45:13
                foreign llvm icmp_eq(~success#0:wybe.bool, 0:wybe.bool, ?tmp$3#0:wybe.bool) @bool:8:28
                case ~tmp$3#0:wybe.bool of
                0:
                    drone.gen$3<0>(_:wybe.char, ~d#1:drone.drone_info, ~io#0:wybe.phantom, ?io#2:wybe.phantom) #11

                1:
                    foreign c print_string("invalid action!":wybe.string, ~#io#0:wybe.phantom, ?tmp$17#0:wybe.phantom) @io:30:35
                    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#io#1:wybe.phantom) @io:11:22
                    drone.gen$3<0>(_:wybe.char, ~d#1:drone.drone_info, ~io#1:wybe.phantom, ?io#2:wybe.phantom) #10


            1:
                foreign c print_string("(":wybe.string, ~#io#0:wybe.phantom, ?tmp$15#0:wybe.phantom) @io:30:35
                foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$16#0:wybe.int)
                foreign c print_int(~tmp$16#0:wybe.int, ~tmp$15#0:wybe.phantom, ?tmp$17#0:wybe.phantom) @io:13:32
                foreign c print_string(", ":wybe.string, ~tmp$17#0:wybe.phantom, ?tmp$18#0:wybe.phantom) @io:30:35
                foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$19#0:wybe.int)
                foreign c print_int(~tmp$19#0:wybe.int, ~tmp$18#0:wybe.phantom, ?tmp$20#0:wybe.phantom) @io:13:32
                foreign c print_string(", ":wybe.string, ~tmp$20#0:wybe.phantom, ?tmp$21#0:wybe.phantom) @io:30:35
                foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$22#0:wybe.int)
                foreign c print_int(~tmp$22#0:wybe.int, ~tmp$21#0:wybe.phantom, ?tmp$23#0:wybe.phantom) @io:13:32
                foreign c print_string(") #":wybe.string, ~tmp$23#0:wybe.phantom, ?tmp$24#0:wybe.phantom) @io:30:35
                foreign lpvm access(d#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$25#0:wybe.int)
                foreign c print_int(~tmp$25#0:wybe.int, ~tmp$24#0:wybe.phantom, ?tmp$26#0:wybe.phantom) @io:13:32
                foreign c putchar('\n':wybe.char, ~tmp$26#0:wybe.phantom, ?#io#1:wybe.phantom) @io:11:22
                drone.gen$3<0>(_:wybe.char, ~d#0:drone.drone_info, ~io#1:wybe.phantom, ?io#2:wybe.phantom) #4





print_info > {inline} (1 calls)
0: print_info(d#0:drone.drone_info, io#0:wybe.phantom, ?io#9:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:30:35
    foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @io:13:32
    foreign c print_string(", ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @io:30:35
    foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @io:13:32
    foreign c print_string(", ":wybe.string, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @io:30:35
    foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.int)
    foreign c print_int(~tmp$2#0:wybe.int, ~#io#5:wybe.phantom, ?#io#6:wybe.phantom) @io:13:32
    foreign c print_string(") #":wybe.string, ~#io#6:wybe.phantom, ?#io#7:wybe.phantom) @io:30:35
    foreign lpvm access(~d#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign c print_int(~tmp$3#0:wybe.int, ~#io#7:wybe.phantom, ?#io#8:wybe.phantom) @io:13:32
    foreign c putchar('\n':wybe.char, ~#io#8:wybe.phantom, ?#io#9:wybe.phantom) @io:11:22

LLVM code       : None

--------------------------------------------------
 Module drone.drone_info
  representation  : address
  public submods  : 
  public resources: 
  public procs    : drone.drone_info./=<0>
                    drone.drone_info.=<0>
                    drone.drone_info.count<0>
                    drone.drone_info.count<1>
                    drone.drone_info.drone_info<0>
                    drone.drone_info.drone_info<1>
                    drone.drone_info.x<0>
                    drone.drone_info.x<1>
                    drone.drone_info.y<0>
                    drone.drone_info.y<1>
                    drone.drone_info.z<0>
                    drone.drone_info.z<1>
  imports         : use drone
                    use wybe
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:drone.drone_info, $right#0:drone.drone_info, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.int)
    foreign lpvm access(~$left#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$7#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$9#0:wybe.int)
    foreign lpvm access(~$right#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.int)
    foreign llvm icmp_eq(~tmp$3#0:wybe.int, ~tmp$7#0:wybe.int, ?tmp$11#0:wybe.bool) @int:24:28
    case ~tmp$11#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
        foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp$4#0:wybe.int, ~tmp$8#0:wybe.int, ?tmp$12#0:wybe.bool) @int:24:28
        case ~tmp$12#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
            foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp$5#0:wybe.int, ~tmp$9#0:wybe.int, ?tmp$13#0:wybe.bool) @int:24:28
            case ~tmp$13#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
                foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign llvm icmp_eq(~tmp$10#0:wybe.int, ~tmp$6#0:wybe.int, ?tmp$0#0:wybe.bool) @int:24:28
                foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)





= > public {inline} (1 calls)
0: =($left#0:drone.drone_info, $right#0:drone.drone_info, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$z#0:wybe.int)
    foreign lpvm access(~$left#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$count#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$y#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$z#0:wybe.int)
    foreign lpvm access(~$right#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$count#0:wybe.int)
    foreign llvm icmp_eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$1#0:wybe.bool) @int:24:28
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp_eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?tmp$2#0:wybe.bool) @int:24:28
        case ~tmp$2#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp_eq(~$left$z#0:wybe.int, ~$right$z#0:wybe.int, ?tmp$3#0:wybe.bool) @int:24:28
            case ~tmp$3#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign llvm icmp_eq(~$left$count#0:wybe.int, ~$right$count#0:wybe.int, ?$$#0:wybe.bool) @int:24:28





count > public {inline} (0 calls)
0: count($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
count > public {inline} (0 calls)
1: count($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


drone_info > public {inline} (0 calls)
0: drone_info(x#0:wybe.int, y#0:wybe.int, z#0:wybe.int, count#0:wybe.int, ?$#0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?$rec#0:drone.drone_info)
    foreign lpvm mutate(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:drone.drone_info, ?%$rec#2:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~y#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:drone.drone_info, ?%$rec#3:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~z#0:wybe.int)
    foreign lpvm mutate(~%$rec#3:drone.drone_info, ?%$#0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~count#0:wybe.int)
drone_info > public {inline} (14 calls)
1: drone_info(?x#0:wybe.int, ?y#0:wybe.int, ?z#0:wybe.int, ?count#0:wybe.int, $#0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access($#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?y#0:wybe.int)
    foreign lpvm access($#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?z#0:wybe.int)
    foreign lpvm access(~$#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?count#0:wybe.int)


x > public {inline} (0 calls)
0: x($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
x > public {inline} (0 calls)
1: x($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public {inline} (0 calls)
0: y($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
y > public {inline} (0 calls)
1: y($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


z > public {inline} (0 calls)
0: z($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
z > public {inline} (0 calls)
1: z($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

LLVM code       : None

======================================================================
AFTER EVERYTHING:
 Module 
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    from drone use 
                    use wybe
                    from wybe.io use 
                    from wybe.memory_management use 
  resources       : 
  procs           : 

*main* > {inline} (0 calls)
0: ([argc#0:wybe.int], [argv#0:wybe.int], ?exit_code#0:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c {semipure} gc_init() @memory_management:12:1
    foreign llvm move(0:wybe.int, ?#exit_code#0:wybe.int) @command_line:18:5
    drone.<0>(0:wybe.phantom, ?#io#2:wybe.phantom) #3
    foreign c {semipure,terminal} exit(0:wybe.int)

  LLVM code       :

; ModuleID = ''


 


declare external ccc  void @exit(i64)    


declare external fastcc  void @"drone.<0>"()    


declare external ccc  void @gc_init()    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i32 @main()    {
entry:
  tail call ccc  void  @gc_init()  
  tail call fastcc  void  @"drone.<0>"()  
  tail call ccc  void  @exit(i64  0)  
  ret i64 0 
}
--------------------------------------------------
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    argv: command_line.argv
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:4:5)] @command_line:4:5
                    argv: fromList [(command_line.argv,wybe.int @command_line:12:5)] @command_line:12:5
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:18:30 @command_line:18:5)] @command_line:18:5
  procs           : 

*main* > public {inline} (0 calls)
0: (?exit_code#1:wybe.int, io#0:wybe.phantom, [?io#0:wybe.phantom]):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:wybe.int, ?exit_code#1:wybe.int) @command_line:18:5


set_exit_code > public {inline} (0 calls)
0: set_exit_code(code#0:wybe.int, [exit_code#0:wybe.int], ?exit_code#1:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(~code#0:wybe.int, ?exit_code#1:wybe.int) @command_line:24:5

  LLVM code       :

; ModuleID = 'command_line'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"command_line.<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i64 @"command_line.set_exit_code<0>"(i64  %"code#0")    {
entry:
  ret i64 %"code#0" 
}
--------------------------------------------------
 Module drone
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : drone.<0>
  imports         : use command_line
                    use drone.drone_info
                    use wybe
  resources       : 
  submodules      : drone.drone_info
  procs           : 

*main* > public (0 calls)
0: (io#0:wybe.phantom, ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(4,(drone.loop<0>,fromList [NonAliasedParamCond 0 []]))]
    drone.drone_init<0>(?tmp$0#0:drone.drone_info) #0 @drone:57:6
    foreign c read_char(?ch#0:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:28:33
    foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @io:38:20
    foreign llvm icmp_ne(ch#0:wybe.char, ~tmp$1#0:wybe.char, ?tmp$2#0:wybe.bool) @char:8:28
    case ~tmp$2#0:wybe.bool of
    0:
        foreign c {impure} malloc_count(?tmp$10#0:wybe.int) @memory_management:9:5
        foreign c print_string("** malloc count: ":wybe.string, ~io#1:wybe.phantom, ?tmp$11#0:wybe.phantom) @io:30:35
        foreign c print_int(~tmp$10#0:wybe.int, ~tmp$11#0:wybe.phantom, ?tmp$12#0:wybe.phantom) @io:13:32
        foreign c putchar('\n':wybe.char, ~tmp$12#0:wybe.phantom, ?io#3:wybe.phantom) @io:11:22

    1:
        drone.loop<0>[410bae77d3](~tmp$0#0:drone.drone_info, ~ch#0:wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #4 @drone:60:6
        foreign c {impure} malloc_count(?tmp$10#0:wybe.int) @memory_management:9:5
        foreign c print_string("** malloc count: ":wybe.string, ~io#2:wybe.phantom, ?tmp$11#0:wybe.phantom) @io:30:35
        foreign c print_int(~tmp$10#0:wybe.int, ~tmp$11#0:wybe.phantom, ?tmp$12#0:wybe.phantom) @io:13:32
        foreign c putchar('\n':wybe.char, ~tmp$12#0:wybe.phantom, ?io#3:wybe.phantom) @io:11:22



do_action > (2 calls)
0: do_action(d#0:drone.drone_info, ?d#2:drone.drone_info, action#0:wybe.char, ?success#2:wybe.bool):
 AliasPairs: [(d#0,d#2)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(5,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 []])),(10,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 []])),(15,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 []])),(20,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 []])),(25,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 []])),(30,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 []])),(33,(drone.gen$2<0>,fromList [NonAliasedParamCond 1 [0]]))]
    foreign llvm icmp_eq(action#0:wybe.char, 'n':wybe.char, ?tmp$21#0:wybe.bool) @char:7:28
    case ~tmp$21#0:wybe.bool of
    0:
        foreign llvm icmp_eq(action#0:wybe.char, 's':wybe.char, ?tmp$20#0:wybe.bool) @char:7:28
        case ~tmp$20#0:wybe.bool of
        0:
            foreign llvm icmp_eq(action#0:wybe.char, 'w':wybe.char, ?tmp$19#0:wybe.bool) @char:7:28
            case ~tmp$19#0:wybe.bool of
            0:
                foreign llvm icmp_eq(action#0:wybe.char, 'e':wybe.char, ?tmp$18#0:wybe.bool) @char:7:28
                case ~tmp$18#0:wybe.bool of
                0:
                    foreign llvm icmp_eq(action#0:wybe.char, 'u':wybe.char, ?tmp$17#0:wybe.bool) @char:7:28
                    case ~tmp$17#0:wybe.bool of
                    0:
                        foreign llvm icmp_eq(~action#0:wybe.char, 'd':wybe.char, ?tmp$16#0:wybe.bool) @char:7:28
                        case ~tmp$16#0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?success#2:wybe.bool) @drone:33:9
                            drone.gen$2<0>(_:wybe.char, ~d#0:drone.drone_info, 0:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #33

                        1:
                            foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$12#0:wybe.int)
                            foreign llvm sub(~tmp$12#0:wybe.int, 1:wybe.int, ?tmp$11#0:wybe.int) @int:11:24
                            foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$11#0:wybe.int)
                            drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #30
                            foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


                    1:
                        foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.int)
                        foreign llvm add(~tmp$10#0:wybe.int, 1:wybe.int, ?tmp$9#0:wybe.int) @int:8:24
                        foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$9#0:wybe.int)
                        drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #25
                        foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


                1:
                    foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.int)
                    foreign llvm add(~tmp$8#0:wybe.int, 1:wybe.int, ?tmp$7#0:wybe.int) @int:8:24
                    foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$7#0:wybe.int)
                    drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #20
                    foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


            1:
                foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
                foreign llvm sub(~tmp$6#0:wybe.int, 1:wybe.int, ?tmp$5#0:wybe.int) @int:11:24
                foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$5#0:wybe.int)
                drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #15
                foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


        1:
            foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
            foreign llvm add(~tmp$4#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.int) @int:8:24
            foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$3#0:wybe.int)
            drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #10
            foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


    1:
        foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm sub(~tmp$2#0:wybe.int, 1:wybe.int, ?tmp$1#0:wybe.int) @int:11:24
        foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$1#0:wybe.int)
        drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #5
        foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_eq(action#0:wybe.char, 'n':wybe.char, ?tmp$21#0:wybe.bool) @char:7:28
    case ~tmp$21#0:wybe.bool of
    0:
        foreign llvm icmp_eq(action#0:wybe.char, 's':wybe.char, ?tmp$20#0:wybe.bool) @char:7:28
        case ~tmp$20#0:wybe.bool of
        0:
            foreign llvm icmp_eq(action#0:wybe.char, 'w':wybe.char, ?tmp$19#0:wybe.bool) @char:7:28
            case ~tmp$19#0:wybe.bool of
            0:
                foreign llvm icmp_eq(action#0:wybe.char, 'e':wybe.char, ?tmp$18#0:wybe.bool) @char:7:28
                case ~tmp$18#0:wybe.bool of
                0:
                    foreign llvm icmp_eq(action#0:wybe.char, 'u':wybe.char, ?tmp$17#0:wybe.bool) @char:7:28
                    case ~tmp$17#0:wybe.bool of
                    0:
                        foreign llvm icmp_eq(~action#0:wybe.char, 'd':wybe.char, ?tmp$16#0:wybe.bool) @char:7:28
                        case ~tmp$16#0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?success#2:wybe.bool) @drone:33:9
                            drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#0:drone.drone_info, 0:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #33

                        1:
                            foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$12#0:wybe.int)
                            foreign llvm sub(~tmp$12#0:wybe.int, 1:wybe.int, ?tmp$11#0:wybe.int) @int:11:24
                            foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$11#0:wybe.int)
                            drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #30
                            foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


                    1:
                        foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.int)
                        foreign llvm add(~tmp$10#0:wybe.int, 1:wybe.int, ?tmp$9#0:wybe.int) @int:8:24
                        foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$9#0:wybe.int)
                        drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #25
                        foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


                1:
                    foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.int)
                    foreign llvm add(~tmp$8#0:wybe.int, 1:wybe.int, ?tmp$7#0:wybe.int) @int:8:24
                    foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$7#0:wybe.int)
                    drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #20
                    foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


            1:
                foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
                foreign llvm sub(~tmp$6#0:wybe.int, 1:wybe.int, ?tmp$5#0:wybe.int) @int:11:24
                foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$5#0:wybe.int)
                drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #15
                foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


        1:
            foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
            foreign llvm add(~tmp$4#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.int) @int:8:24
            foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$3#0:wybe.int)
            drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #10
            foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)


    1:
        foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm sub(~tmp$2#0:wybe.int, 1:wybe.int, ?tmp$1#0:wybe.int) @int:11:24
        foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$1#0:wybe.int)
        drone.gen$2<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d#2:drone.drone_info, ?_:wybe.bool) #5
        foreign llvm move(1:wybe.bool, ?success#2:wybe.bool)



drone_init > (3 calls)
0: drone_init(?$#0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?tmp$5#0:drone.drone_info)
    foreign lpvm mutate(~tmp$5#0:drone.drone_info, ?tmp$6#0:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:drone.drone_info, ?tmp$7#0:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$7#0:drone.drone_info, ?tmp$8#0:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$8#0:drone.drone_info, ?$#0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)


gen$1 > {inline} (2 calls)
0: gen$1([ch#0:wybe.char], [d#0:drone.drone_info], io#0:wybe.phantom, [tmp$0#0:drone.drone_info], ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c {impure} malloc_count(?mc#0:wybe.int) @memory_management:9:5
    foreign c print_string("** malloc count: ":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:30:35
    foreign c print_int(~mc#0:wybe.int, ~#io#1:wybe.phantom, ?tmp$6#0:wybe.phantom) @io:13:32
    foreign c putchar('\n':wybe.char, ~tmp$6#0:wybe.phantom, ?#io#2:wybe.phantom) @io:11:22


gen$2 > (7 calls)
0: gen$2([action#0:wybe.char], d#0:drone.drone_info, success#0:wybe.bool, [tmp$0#0:wybe.bool], ?d#1:drone.drone_info, [?success#0:wybe.bool]):
 AliasPairs: [(d#0,d#1)]
 InterestingCallProperties: [InterestingUnaliased 1]
    case success#0:wybe.bool of
    0:
        foreign llvm move(~d#0:drone.drone_info, ?d#1:drone.drone_info)

    1:
        foreign lpvm access(d#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
        foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @int:8:24
        foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)

 [6dacb8fd25] [NonAliasedParam 1] :
    case success#0:wybe.bool of
    0:
        foreign llvm move(~d#0:drone.drone_info, ?d#1:drone.drone_info)

    1:
        foreign lpvm access(d#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
        foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @int:8:24
        foreign lpvm {noalias} mutate(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)



gen$3 > (5 calls)
0: gen$3([ch#0:wybe.char], d#0:drone.drone_info, io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 1]
 MultiSpeczDepInfo: [(3,(drone.loop<0>,fromList [NonAliasedParamCond 0 [1]]))]
    foreign c read_char(?ch#1:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:28:33
    foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @io:38:20
    foreign llvm icmp_ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$2#0:wybe.bool) @char:8:28
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~io#1:wybe.phantom, ?io#2:wybe.phantom)

    1:
        drone.loop<0>(~d#0:drone.drone_info, ~ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #3 @drone:53:10

 [6dacb8fd25] [NonAliasedParam 1] :
    foreign c read_char(?ch#1:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:28:33
    foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @io:38:20
    foreign llvm icmp_ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$2#0:wybe.bool) @char:8:28
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~io#1:wybe.phantom, ?io#2:wybe.phantom)

    1:
        drone.loop<0>[410bae77d3](~d#0:drone.drone_info, ~ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #3 @drone:53:10



loop > (2 calls)
0: loop(d#0:drone.drone_info, ch#0:wybe.char, io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(4,(drone.gen$3<0>,fromList [NonAliasedParamCond 1 [0]])),(6,(drone.do_action<0>,fromList [NonAliasedParamCond 0 [0]])),(10,(drone.gen$3<0>,fromList [NonAliasedParamCond 1 [0]])),(11,(drone.gen$3<0>,fromList [NonAliasedParamCond 1 [0]])),(12,(drone.gen$3<0>,fromList [NonAliasedParamCond 1 [0]])),(13,(drone.gen$3<0>,fromList [NonAliasedParamCond 1 [0]]))]
    foreign llvm icmp_ne(ch#0:wybe.char, ' ':wybe.char, ?tmp$5#0:wybe.bool) @char:8:28
    case ~tmp$5#0:wybe.bool of
    0:
        drone.gen$3<0>(_:wybe.char, ~d#0:drone.drone_info, ~io#0:wybe.phantom, ?io#2:wybe.phantom) #13

    1:
        foreign llvm icmp_ne(ch#0:wybe.char, '\n':wybe.char, ?tmp$6#0:wybe.bool) @char:8:28
        case ~tmp$6#0:wybe.bool of
        0:
            drone.gen$3<0>(_:wybe.char, ~d#0:drone.drone_info, ~io#0:wybe.phantom, ?io#2:wybe.phantom) #12

        1:
            foreign llvm icmp_eq(ch#0:wybe.char, 'p':wybe.char, ?tmp$4#0:wybe.bool) @char:7:28
            case ~tmp$4#0:wybe.bool of
            0:
                drone.do_action<0>(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, ~ch#0:wybe.char, ?success#0:wybe.bool) #6 @drone:45:13
                foreign llvm icmp_eq(~success#0:wybe.bool, 0:wybe.bool, ?tmp$3#0:wybe.bool) @bool:8:28
                case ~tmp$3#0:wybe.bool of
                0:
                    drone.gen$3<0>(_:wybe.char, ~d#1:drone.drone_info, ~io#0:wybe.phantom, ?io#2:wybe.phantom) #11

                1:
                    foreign c print_string("invalid action!":wybe.string, ~#io#0:wybe.phantom, ?tmp$17#0:wybe.phantom) @io:30:35
                    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#io#1:wybe.phantom) @io:11:22
                    drone.gen$3<0>(_:wybe.char, ~d#1:drone.drone_info, ~io#1:wybe.phantom, ?io#2:wybe.phantom) #10


            1:
                foreign c print_string("(":wybe.string, ~#io#0:wybe.phantom, ?tmp$15#0:wybe.phantom) @io:30:35
                foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$16#0:wybe.int)
                foreign c print_int(~tmp$16#0:wybe.int, ~tmp$15#0:wybe.phantom, ?tmp$17#0:wybe.phantom) @io:13:32
                foreign c print_string(", ":wybe.string, ~tmp$17#0:wybe.phantom, ?tmp$18#0:wybe.phantom) @io:30:35
                foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$19#0:wybe.int)
                foreign c print_int(~tmp$19#0:wybe.int, ~tmp$18#0:wybe.phantom, ?tmp$20#0:wybe.phantom) @io:13:32
                foreign c print_string(", ":wybe.string, ~tmp$20#0:wybe.phantom, ?tmp$21#0:wybe.phantom) @io:30:35
                foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$22#0:wybe.int)
                foreign c print_int(~tmp$22#0:wybe.int, ~tmp$21#0:wybe.phantom, ?tmp$23#0:wybe.phantom) @io:13:32
                foreign c print_string(") #":wybe.string, ~tmp$23#0:wybe.phantom, ?tmp$24#0:wybe.phantom) @io:30:35
                foreign lpvm access(d#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$25#0:wybe.int)
                foreign c print_int(~tmp$25#0:wybe.int, ~tmp$24#0:wybe.phantom, ?tmp$26#0:wybe.phantom) @io:13:32
                foreign c putchar('\n':wybe.char, ~tmp$26#0:wybe.phantom, ?#io#1:wybe.phantom) @io:11:22
                drone.gen$3<0>(_:wybe.char, ~d#0:drone.drone_info, ~io#1:wybe.phantom, ?io#2:wybe.phantom) #4



 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(ch#0:wybe.char, ' ':wybe.char, ?tmp$5#0:wybe.bool) @char:8:28
    case ~tmp$5#0:wybe.bool of
    0:
        drone.gen$3<0>[6dacb8fd25](_:wybe.char, ~d#0:drone.drone_info, ~io#0:wybe.phantom, ?io#2:wybe.phantom) #13

    1:
        foreign llvm icmp_ne(ch#0:wybe.char, '\n':wybe.char, ?tmp$6#0:wybe.bool) @char:8:28
        case ~tmp$6#0:wybe.bool of
        0:
            drone.gen$3<0>[6dacb8fd25](_:wybe.char, ~d#0:drone.drone_info, ~io#0:wybe.phantom, ?io#2:wybe.phantom) #12

        1:
            foreign llvm icmp_eq(ch#0:wybe.char, 'p':wybe.char, ?tmp$4#0:wybe.bool) @char:7:28
            case ~tmp$4#0:wybe.bool of
            0:
                drone.do_action<0>[410bae77d3](~%d#0:drone.drone_info, ?%d#1:drone.drone_info, ~ch#0:wybe.char, ?success#0:wybe.bool) #6 @drone:45:13
                foreign llvm icmp_eq(~success#0:wybe.bool, 0:wybe.bool, ?tmp$3#0:wybe.bool) @bool:8:28
                case ~tmp$3#0:wybe.bool of
                0:
                    drone.gen$3<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, ~io#0:wybe.phantom, ?io#2:wybe.phantom) #11

                1:
                    foreign c print_string("invalid action!":wybe.string, ~#io#0:wybe.phantom, ?tmp$17#0:wybe.phantom) @io:30:35
                    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#io#1:wybe.phantom) @io:11:22
                    drone.gen$3<0>[6dacb8fd25](_:wybe.char, ~d#1:drone.drone_info, ~io#1:wybe.phantom, ?io#2:wybe.phantom) #10


            1:
                foreign c print_string("(":wybe.string, ~#io#0:wybe.phantom, ?tmp$15#0:wybe.phantom) @io:30:35
                foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$16#0:wybe.int)
                foreign c print_int(~tmp$16#0:wybe.int, ~tmp$15#0:wybe.phantom, ?tmp$17#0:wybe.phantom) @io:13:32
                foreign c print_string(", ":wybe.string, ~tmp$17#0:wybe.phantom, ?tmp$18#0:wybe.phantom) @io:30:35
                foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$19#0:wybe.int)
                foreign c print_int(~tmp$19#0:wybe.int, ~tmp$18#0:wybe.phantom, ?tmp$20#0:wybe.phantom) @io:13:32
                foreign c print_string(", ":wybe.string, ~tmp$20#0:wybe.phantom, ?tmp$21#0:wybe.phantom) @io:30:35
                foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$22#0:wybe.int)
                foreign c print_int(~tmp$22#0:wybe.int, ~tmp$21#0:wybe.phantom, ?tmp$23#0:wybe.phantom) @io:13:32
                foreign c print_string(") #":wybe.string, ~tmp$23#0:wybe.phantom, ?tmp$24#0:wybe.phantom) @io:30:35
                foreign lpvm access(d#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$25#0:wybe.int)
                foreign c print_int(~tmp$25#0:wybe.int, ~tmp$24#0:wybe.phantom, ?tmp$26#0:wybe.phantom) @io:13:32
                foreign c putchar('\n':wybe.char, ~tmp$26#0:wybe.phantom, ?#io#1:wybe.phantom) @io:11:22
                drone.gen$3<0>[6dacb8fd25](_:wybe.char, ~d#0:drone.drone_info, ~io#1:wybe.phantom, ?io#2:wybe.phantom) #4





print_info > {inline} (1 calls)
0: print_info(d#0:drone.drone_info, io#0:wybe.phantom, ?io#9:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:30:35
    foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @io:13:32
    foreign c print_string(", ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @io:30:35
    foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @io:13:32
    foreign c print_string(", ":wybe.string, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @io:30:35
    foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.int)
    foreign c print_int(~tmp$2#0:wybe.int, ~#io#5:wybe.phantom, ?#io#6:wybe.phantom) @io:13:32
    foreign c print_string(") #":wybe.string, ~#io#6:wybe.phantom, ?#io#7:wybe.phantom) @io:30:35
    foreign lpvm access(~d#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign c print_int(~tmp$3#0:wybe.int, ~#io#7:wybe.phantom, ?#io#8:wybe.phantom) @io:13:32
    foreign c putchar('\n':wybe.char, ~#io#8:wybe.phantom, ?#io#9:wybe.phantom) @io:11:22

  LLVM code       :

; ModuleID = 'drone'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_string(i64)    


declare external ccc  i64 @malloc_count()    


declare external ccc  i8 @read_char()    


@drone.6 =    constant [18 x i8] c"** malloc count: \00"


@drone.4 =    constant [18 x i8] c"** malloc count: \00"


@drone.162 =    constant [18 x i8] c"** malloc count: \00"


@drone.216 =    constant [16 x i8] c"invalid action!\00"


@drone.207 =    constant [4 x i8] c") #\00"


@drone.201 =    constant [3 x i8] c", \00"


@drone.195 =    constant [3 x i8] c", \00"


@drone.190 =    constant [2 x i8] c"(\00"


@drone.244 =    constant [16 x i8] c"invalid action!\00"


@drone.235 =    constant [4 x i8] c") #\00"


@drone.229 =    constant [3 x i8] c", \00"


@drone.223 =    constant [3 x i8] c", \00"


@drone.218 =    constant [2 x i8] c"(\00"


@drone.263 =    constant [4 x i8] c") #\00"


@drone.257 =    constant [3 x i8] c", \00"


@drone.251 =    constant [3 x i8] c", \00"


@drone.246 =    constant [2 x i8] c"(\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"drone.<0>"()    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i64  @"drone.drone_init<0>"()  
  %"1$ch#0" = tail call ccc  i8  @read_char()  
  %1 = alloca i64 
  store  i64 -1, i64* %1 
  %2 = load  i64, i64* %1 
  %3 = trunc i64 %2 to i8  
  %"1$tmp$2#0" = icmp ne i8 %"1$ch#0", %3 
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"drone.loop<0>[410bae77d3]"(i64  %"1$tmp$0#0", i8  %"1$ch#0")  
  %"2$tmp$10#0" = tail call ccc  i64  @malloc_count()  
  %5 = ptrtoint i8* getelementptr inbounds ([18 x i8], [18 x i8]* @drone.4, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %5)  
  tail call ccc  void  @print_int(i64  %"2$tmp$10#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  %"3$tmp$10#0" = tail call ccc  i64  @malloc_count()  
  %7 = ptrtoint i8* getelementptr inbounds ([18 x i8], [18 x i8]* @drone.6, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %7)  
  tail call ccc  void  @print_int(i64  %"3$tmp$10#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  {i64, i1} @"drone.do_action<0>"(i64  %"d#0", i8  %"action#0")    {
entry:
  %"1$tmp$21#0" = icmp eq i8 %"action#0", 110 
  br i1 %"1$tmp$21#0", label %if.then, label %if.else 
if.then:
  %8 = add   i64 %"d#0", 8 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %"2$tmp$1#0" = sub   i64 %11, 1 
  %12 = trunc i64 32 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i8* 
  %16 = inttoptr i64 %"d#0" to i8* 
  %17 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %15, i8*  %16, i32  %17, i32  8, i1  0)  
  %18 = add   i64 %14, 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  store  i64 %"2$tmp$1#0", i64* %20 
  %"2$d#2" = tail call fastcc  i64  @"drone.gen$2<0>[6dacb8fd25]"(i64  %14, i1  1)  
  %21 = insertvalue {i64, i1} undef, i64 %"2$d#2", 0 
  %22 = insertvalue {i64, i1} %21, i1 1, 1 
  ret {i64, i1} %22 
if.else:
  %"3$tmp$20#0" = icmp eq i8 %"action#0", 115 
  br i1 %"3$tmp$20#0", label %if.then1, label %if.else1 
if.then1:
  %23 = add   i64 %"d#0", 8 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %"4$tmp$3#0" = add   i64 %26, 1 
  %27 = trunc i64 32 to i32  
  %28 = tail call ccc  i8*  @wybe_malloc(i32  %27)  
  %29 = ptrtoint i8* %28 to i64 
  %30 = inttoptr i64 %29 to i8* 
  %31 = inttoptr i64 %"d#0" to i8* 
  %32 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %30, i8*  %31, i32  %32, i32  8, i1  0)  
  %33 = add   i64 %29, 8 
  %34 = inttoptr i64 %33 to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  store  i64 %"4$tmp$3#0", i64* %35 
  %"4$d#2" = tail call fastcc  i64  @"drone.gen$2<0>[6dacb8fd25]"(i64  %29, i1  1)  
  %36 = insertvalue {i64, i1} undef, i64 %"4$d#2", 0 
  %37 = insertvalue {i64, i1} %36, i1 1, 1 
  ret {i64, i1} %37 
if.else1:
  %"5$tmp$19#0" = icmp eq i8 %"action#0", 119 
  br i1 %"5$tmp$19#0", label %if.then2, label %if.else2 
if.then2:
  %38 = inttoptr i64 %"d#0" to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  %40 = load  i64, i64* %39 
  %"6$tmp$5#0" = sub   i64 %40, 1 
  %41 = trunc i64 32 to i32  
  %42 = tail call ccc  i8*  @wybe_malloc(i32  %41)  
  %43 = ptrtoint i8* %42 to i64 
  %44 = inttoptr i64 %43 to i8* 
  %45 = inttoptr i64 %"d#0" to i8* 
  %46 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %44, i8*  %45, i32  %46, i32  8, i1  0)  
  %47 = inttoptr i64 %43 to i64* 
  %48 = getelementptr  i64, i64* %47, i64 0 
  store  i64 %"6$tmp$5#0", i64* %48 
  %"6$d#2" = tail call fastcc  i64  @"drone.gen$2<0>[6dacb8fd25]"(i64  %43, i1  1)  
  %49 = insertvalue {i64, i1} undef, i64 %"6$d#2", 0 
  %50 = insertvalue {i64, i1} %49, i1 1, 1 
  ret {i64, i1} %50 
if.else2:
  %"7$tmp$18#0" = icmp eq i8 %"action#0", 101 
  br i1 %"7$tmp$18#0", label %if.then3, label %if.else3 
if.then3:
  %51 = inttoptr i64 %"d#0" to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  %53 = load  i64, i64* %52 
  %"8$tmp$7#0" = add   i64 %53, 1 
  %54 = trunc i64 32 to i32  
  %55 = tail call ccc  i8*  @wybe_malloc(i32  %54)  
  %56 = ptrtoint i8* %55 to i64 
  %57 = inttoptr i64 %56 to i8* 
  %58 = inttoptr i64 %"d#0" to i8* 
  %59 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %57, i8*  %58, i32  %59, i32  8, i1  0)  
  %60 = inttoptr i64 %56 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  store  i64 %"8$tmp$7#0", i64* %61 
  %"8$d#2" = tail call fastcc  i64  @"drone.gen$2<0>[6dacb8fd25]"(i64  %56, i1  1)  
  %62 = insertvalue {i64, i1} undef, i64 %"8$d#2", 0 
  %63 = insertvalue {i64, i1} %62, i1 1, 1 
  ret {i64, i1} %63 
if.else3:
  %"9$tmp$17#0" = icmp eq i8 %"action#0", 117 
  br i1 %"9$tmp$17#0", label %if.then4, label %if.else4 
if.then4:
  %64 = add   i64 %"d#0", 16 
  %65 = inttoptr i64 %64 to i64* 
  %66 = getelementptr  i64, i64* %65, i64 0 
  %67 = load  i64, i64* %66 
  %"10$tmp$9#0" = add   i64 %67, 1 
  %68 = trunc i64 32 to i32  
  %69 = tail call ccc  i8*  @wybe_malloc(i32  %68)  
  %70 = ptrtoint i8* %69 to i64 
  %71 = inttoptr i64 %70 to i8* 
  %72 = inttoptr i64 %"d#0" to i8* 
  %73 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %71, i8*  %72, i32  %73, i32  8, i1  0)  
  %74 = add   i64 %70, 16 
  %75 = inttoptr i64 %74 to i64* 
  %76 = getelementptr  i64, i64* %75, i64 0 
  store  i64 %"10$tmp$9#0", i64* %76 
  %"10$d#2" = tail call fastcc  i64  @"drone.gen$2<0>[6dacb8fd25]"(i64  %70, i1  1)  
  %77 = insertvalue {i64, i1} undef, i64 %"10$d#2", 0 
  %78 = insertvalue {i64, i1} %77, i1 1, 1 
  ret {i64, i1} %78 
if.else4:
  %"11$tmp$16#0" = icmp eq i8 %"action#0", 100 
  br i1 %"11$tmp$16#0", label %if.then5, label %if.else5 
if.then5:
  %79 = add   i64 %"d#0", 16 
  %80 = inttoptr i64 %79 to i64* 
  %81 = getelementptr  i64, i64* %80, i64 0 
  %82 = load  i64, i64* %81 
  %"12$tmp$11#0" = sub   i64 %82, 1 
  %83 = trunc i64 32 to i32  
  %84 = tail call ccc  i8*  @wybe_malloc(i32  %83)  
  %85 = ptrtoint i8* %84 to i64 
  %86 = inttoptr i64 %85 to i8* 
  %87 = inttoptr i64 %"d#0" to i8* 
  %88 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %86, i8*  %87, i32  %88, i32  8, i1  0)  
  %89 = add   i64 %85, 16 
  %90 = inttoptr i64 %89 to i64* 
  %91 = getelementptr  i64, i64* %90, i64 0 
  store  i64 %"12$tmp$11#0", i64* %91 
  %"12$d#2" = tail call fastcc  i64  @"drone.gen$2<0>[6dacb8fd25]"(i64  %85, i1  1)  
  %92 = insertvalue {i64, i1} undef, i64 %"12$d#2", 0 
  %93 = insertvalue {i64, i1} %92, i1 1, 1 
  ret {i64, i1} %93 
if.else5:
  %"13$d#2" = tail call fastcc  i64  @"drone.gen$2<0>"(i64  %"d#0", i1  0)  
  %94 = insertvalue {i64, i1} undef, i64 %"13$d#2", 0 
  %95 = insertvalue {i64, i1} %94, i1 0, 1 
  ret {i64, i1} %95 
}


define external fastcc  {i64, i1} @"drone.do_action<0>[410bae77d3]"(i64  %"d#0", i8  %"action#0")    {
entry:
  %"1$tmp$21#0" = icmp eq i8 %"action#0", 110 
  br i1 %"1$tmp$21#0", label %if.then, label %if.else 
if.then:
  %96 = add   i64 %"d#0", 8 
  %97 = inttoptr i64 %96 to i64* 
  %98 = getelementptr  i64, i64* %97, i64 0 
  %99 = load  i64, i64* %98 
  %"2$tmp$1#0" = sub   i64 %99, 1 
  %100 = add   i64 %"d#0", 8 
  %101 = inttoptr i64 %100 to i64* 
  %102 = getelementptr  i64, i64* %101, i64 0 
  store  i64 %"2$tmp$1#0", i64* %102 
  %"2$d#2" = tail call fastcc  i64  @"drone.gen$2<0>[6dacb8fd25]"(i64  %"d#0", i1  1)  
  %103 = insertvalue {i64, i1} undef, i64 %"2$d#2", 0 
  %104 = insertvalue {i64, i1} %103, i1 1, 1 
  ret {i64, i1} %104 
if.else:
  %"3$tmp$20#0" = icmp eq i8 %"action#0", 115 
  br i1 %"3$tmp$20#0", label %if.then1, label %if.else1 
if.then1:
  %105 = add   i64 %"d#0", 8 
  %106 = inttoptr i64 %105 to i64* 
  %107 = getelementptr  i64, i64* %106, i64 0 
  %108 = load  i64, i64* %107 
  %"4$tmp$3#0" = add   i64 %108, 1 
  %109 = add   i64 %"d#0", 8 
  %110 = inttoptr i64 %109 to i64* 
  %111 = getelementptr  i64, i64* %110, i64 0 
  store  i64 %"4$tmp$3#0", i64* %111 
  %"4$d#2" = tail call fastcc  i64  @"drone.gen$2<0>[6dacb8fd25]"(i64  %"d#0", i1  1)  
  %112 = insertvalue {i64, i1} undef, i64 %"4$d#2", 0 
  %113 = insertvalue {i64, i1} %112, i1 1, 1 
  ret {i64, i1} %113 
if.else1:
  %"5$tmp$19#0" = icmp eq i8 %"action#0", 119 
  br i1 %"5$tmp$19#0", label %if.then2, label %if.else2 
if.then2:
  %114 = inttoptr i64 %"d#0" to i64* 
  %115 = getelementptr  i64, i64* %114, i64 0 
  %116 = load  i64, i64* %115 
  %"6$tmp$5#0" = sub   i64 %116, 1 
  %117 = inttoptr i64 %"d#0" to i64* 
  %118 = getelementptr  i64, i64* %117, i64 0 
  store  i64 %"6$tmp$5#0", i64* %118 
  %"6$d#2" = tail call fastcc  i64  @"drone.gen$2<0>[6dacb8fd25]"(i64  %"d#0", i1  1)  
  %119 = insertvalue {i64, i1} undef, i64 %"6$d#2", 0 
  %120 = insertvalue {i64, i1} %119, i1 1, 1 
  ret {i64, i1} %120 
if.else2:
  %"7$tmp$18#0" = icmp eq i8 %"action#0", 101 
  br i1 %"7$tmp$18#0", label %if.then3, label %if.else3 
if.then3:
  %121 = inttoptr i64 %"d#0" to i64* 
  %122 = getelementptr  i64, i64* %121, i64 0 
  %123 = load  i64, i64* %122 
  %"8$tmp$7#0" = add   i64 %123, 1 
  %124 = inttoptr i64 %"d#0" to i64* 
  %125 = getelementptr  i64, i64* %124, i64 0 
  store  i64 %"8$tmp$7#0", i64* %125 
  %"8$d#2" = tail call fastcc  i64  @"drone.gen$2<0>[6dacb8fd25]"(i64  %"d#0", i1  1)  
  %126 = insertvalue {i64, i1} undef, i64 %"8$d#2", 0 
  %127 = insertvalue {i64, i1} %126, i1 1, 1 
  ret {i64, i1} %127 
if.else3:
  %"9$tmp$17#0" = icmp eq i8 %"action#0", 117 
  br i1 %"9$tmp$17#0", label %if.then4, label %if.else4 
if.then4:
  %128 = add   i64 %"d#0", 16 
  %129 = inttoptr i64 %128 to i64* 
  %130 = getelementptr  i64, i64* %129, i64 0 
  %131 = load  i64, i64* %130 
  %"10$tmp$9#0" = add   i64 %131, 1 
  %132 = add   i64 %"d#0", 16 
  %133 = inttoptr i64 %132 to i64* 
  %134 = getelementptr  i64, i64* %133, i64 0 
  store  i64 %"10$tmp$9#0", i64* %134 
  %"10$d#2" = tail call fastcc  i64  @"drone.gen$2<0>[6dacb8fd25]"(i64  %"d#0", i1  1)  
  %135 = insertvalue {i64, i1} undef, i64 %"10$d#2", 0 
  %136 = insertvalue {i64, i1} %135, i1 1, 1 
  ret {i64, i1} %136 
if.else4:
  %"11$tmp$16#0" = icmp eq i8 %"action#0", 100 
  br i1 %"11$tmp$16#0", label %if.then5, label %if.else5 
if.then5:
  %137 = add   i64 %"d#0", 16 
  %138 = inttoptr i64 %137 to i64* 
  %139 = getelementptr  i64, i64* %138, i64 0 
  %140 = load  i64, i64* %139 
  %"12$tmp$11#0" = sub   i64 %140, 1 
  %141 = add   i64 %"d#0", 16 
  %142 = inttoptr i64 %141 to i64* 
  %143 = getelementptr  i64, i64* %142, i64 0 
  store  i64 %"12$tmp$11#0", i64* %143 
  %"12$d#2" = tail call fastcc  i64  @"drone.gen$2<0>[6dacb8fd25]"(i64  %"d#0", i1  1)  
  %144 = insertvalue {i64, i1} undef, i64 %"12$d#2", 0 
  %145 = insertvalue {i64, i1} %144, i1 1, 1 
  ret {i64, i1} %145 
if.else5:
  %"13$d#2" = tail call fastcc  i64  @"drone.gen$2<0>[6dacb8fd25]"(i64  %"d#0", i1  0)  
  %146 = insertvalue {i64, i1} undef, i64 %"13$d#2", 0 
  %147 = insertvalue {i64, i1} %146, i1 0, 1 
  ret {i64, i1} %147 
}


define external fastcc  i64 @"drone.drone_init<0>"()    {
entry:
  %148 = trunc i64 32 to i32  
  %149 = tail call ccc  i8*  @wybe_malloc(i32  %148)  
  %150 = ptrtoint i8* %149 to i64 
  %151 = inttoptr i64 %150 to i64* 
  %152 = getelementptr  i64, i64* %151, i64 0 
  store  i64 0, i64* %152 
  %153 = add   i64 %150, 8 
  %154 = inttoptr i64 %153 to i64* 
  %155 = getelementptr  i64, i64* %154, i64 0 
  store  i64 0, i64* %155 
  %156 = add   i64 %150, 16 
  %157 = inttoptr i64 %156 to i64* 
  %158 = getelementptr  i64, i64* %157, i64 0 
  store  i64 0, i64* %158 
  %159 = add   i64 %150, 24 
  %160 = inttoptr i64 %159 to i64* 
  %161 = getelementptr  i64, i64* %160, i64 0 
  store  i64 0, i64* %161 
  ret i64 %150 
}


define external fastcc  void @"drone.gen$1<0>"()    {
entry:
  %"1$mc#0" = tail call ccc  i64  @malloc_count()  
  %163 = ptrtoint i8* getelementptr inbounds ([18 x i8], [18 x i8]* @drone.162, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %163)  
  tail call ccc  void  @print_int(i64  %"1$mc#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"drone.gen$2<0>"(i64  %"d#0", i1  %"success#0")    {
entry:
  br i1 %"success#0", label %if.then, label %if.else 
if.then:
  %164 = add   i64 %"d#0", 24 
  %165 = inttoptr i64 %164 to i64* 
  %166 = getelementptr  i64, i64* %165, i64 0 
  %167 = load  i64, i64* %166 
  %"2$tmp$14#0" = add   i64 %167, 1 
  %168 = trunc i64 32 to i32  
  %169 = tail call ccc  i8*  @wybe_malloc(i32  %168)  
  %170 = ptrtoint i8* %169 to i64 
  %171 = inttoptr i64 %170 to i8* 
  %172 = inttoptr i64 %"d#0" to i8* 
  %173 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %171, i8*  %172, i32  %173, i32  8, i1  0)  
  %174 = add   i64 %170, 24 
  %175 = inttoptr i64 %174 to i64* 
  %176 = getelementptr  i64, i64* %175, i64 0 
  store  i64 %"2$tmp$14#0", i64* %176 
  ret i64 %170 
if.else:
  ret i64 %"d#0" 
}


define external fastcc  i64 @"drone.gen$2<0>[6dacb8fd25]"(i64  %"d#0", i1  %"success#0")    {
entry:
  br i1 %"success#0", label %if.then, label %if.else 
if.then:
  %177 = add   i64 %"d#0", 24 
  %178 = inttoptr i64 %177 to i64* 
  %179 = getelementptr  i64, i64* %178, i64 0 
  %180 = load  i64, i64* %179 
  %"2$tmp$14#0" = add   i64 %180, 1 
  %181 = add   i64 %"d#0", 24 
  %182 = inttoptr i64 %181 to i64* 
  %183 = getelementptr  i64, i64* %182, i64 0 
  store  i64 %"2$tmp$14#0", i64* %183 
  ret i64 %"d#0" 
if.else:
  ret i64 %"d#0" 
}


define external fastcc  void @"drone.gen$3<0>"(i64  %"d#0")    {
entry:
  %"1$ch#1" = tail call ccc  i8  @read_char()  
  %184 = alloca i64 
  store  i64 -1, i64* %184 
  %185 = load  i64, i64* %184 
  %186 = trunc i64 %185 to i8  
  %"1$tmp$2#0" = icmp ne i8 %"1$ch#1", %186 
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"drone.loop<0>"(i64  %"d#0", i8  %"1$ch#1")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"drone.gen$3<0>[6dacb8fd25]"(i64  %"d#0")    {
entry:
  %"1$ch#1" = tail call ccc  i8  @read_char()  
  %187 = alloca i64 
  store  i64 -1, i64* %187 
  %188 = load  i64, i64* %187 
  %189 = trunc i64 %188 to i8  
  %"1$tmp$2#0" = icmp ne i8 %"1$ch#1", %189 
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"drone.loop<0>[410bae77d3]"(i64  %"d#0", i8  %"1$ch#1")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"drone.loop<0>"(i64  %"d#0", i8  %"ch#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i8 %"ch#0", 32 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$6#0" = icmp ne i8 %"ch#0", 10 
  br i1 %"2$tmp$6#0", label %if.then1, label %if.else1 
if.else:
  tail call fastcc  void  @"drone.gen$3<0>"(i64  %"d#0")  
  ret void 
if.then1:
  %"4$tmp$4#0" = icmp eq i8 %"ch#0", 112 
  br i1 %"4$tmp$4#0", label %if.then2, label %if.else2 
if.else1:
  tail call fastcc  void  @"drone.gen$3<0>"(i64  %"d#0")  
  ret void 
if.then2:
  %191 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @drone.190, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %191)  
  %192 = inttoptr i64 %"d#0" to i64* 
  %193 = getelementptr  i64, i64* %192, i64 0 
  %194 = load  i64, i64* %193 
  tail call ccc  void  @print_int(i64  %194)  
  %196 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @drone.195, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %196)  
  %197 = add   i64 %"d#0", 8 
  %198 = inttoptr i64 %197 to i64* 
  %199 = getelementptr  i64, i64* %198, i64 0 
  %200 = load  i64, i64* %199 
  tail call ccc  void  @print_int(i64  %200)  
  %202 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @drone.201, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %202)  
  %203 = add   i64 %"d#0", 16 
  %204 = inttoptr i64 %203 to i64* 
  %205 = getelementptr  i64, i64* %204, i64 0 
  %206 = load  i64, i64* %205 
  tail call ccc  void  @print_int(i64  %206)  
  %208 = ptrtoint i8* getelementptr inbounds ([4 x i8], [4 x i8]* @drone.207, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %208)  
  %209 = add   i64 %"d#0", 24 
  %210 = inttoptr i64 %209 to i64* 
  %211 = getelementptr  i64, i64* %210, i64 0 
  %212 = load  i64, i64* %211 
  tail call ccc  void  @print_int(i64  %212)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"drone.gen$3<0>"(i64  %"d#0")  
  ret void 
if.else2:
  %213 = tail call fastcc  {i64, i1}  @"drone.do_action<0>"(i64  %"d#0", i8  %"ch#0")  
  %214 = extractvalue {i64, i1} %213, 0 
  %215 = extractvalue {i64, i1} %213, 1 
  %"7$tmp$3#0" = icmp eq i1 %215, 0 
  br i1 %"7$tmp$3#0", label %if.then3, label %if.else3 
if.then3:
  %217 = ptrtoint i8* getelementptr inbounds ([16 x i8], [16 x i8]* @drone.216, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %217)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"drone.gen$3<0>"(i64  %214)  
  ret void 
if.else3:
  tail call fastcc  void  @"drone.gen$3<0>"(i64  %214)  
  ret void 
}


define external fastcc  void @"drone.loop<0>[410bae77d3]"(i64  %"d#0", i8  %"ch#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i8 %"ch#0", 32 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$6#0" = icmp ne i8 %"ch#0", 10 
  br i1 %"2$tmp$6#0", label %if.then1, label %if.else1 
if.else:
  tail call fastcc  void  @"drone.gen$3<0>[6dacb8fd25]"(i64  %"d#0")  
  ret void 
if.then1:
  %"4$tmp$4#0" = icmp eq i8 %"ch#0", 112 
  br i1 %"4$tmp$4#0", label %if.then2, label %if.else2 
if.else1:
  tail call fastcc  void  @"drone.gen$3<0>[6dacb8fd25]"(i64  %"d#0")  
  ret void 
if.then2:
  %219 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @drone.218, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %219)  
  %220 = inttoptr i64 %"d#0" to i64* 
  %221 = getelementptr  i64, i64* %220, i64 0 
  %222 = load  i64, i64* %221 
  tail call ccc  void  @print_int(i64  %222)  
  %224 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @drone.223, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %224)  
  %225 = add   i64 %"d#0", 8 
  %226 = inttoptr i64 %225 to i64* 
  %227 = getelementptr  i64, i64* %226, i64 0 
  %228 = load  i64, i64* %227 
  tail call ccc  void  @print_int(i64  %228)  
  %230 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @drone.229, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %230)  
  %231 = add   i64 %"d#0", 16 
  %232 = inttoptr i64 %231 to i64* 
  %233 = getelementptr  i64, i64* %232, i64 0 
  %234 = load  i64, i64* %233 
  tail call ccc  void  @print_int(i64  %234)  
  %236 = ptrtoint i8* getelementptr inbounds ([4 x i8], [4 x i8]* @drone.235, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %236)  
  %237 = add   i64 %"d#0", 24 
  %238 = inttoptr i64 %237 to i64* 
  %239 = getelementptr  i64, i64* %238, i64 0 
  %240 = load  i64, i64* %239 
  tail call ccc  void  @print_int(i64  %240)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"drone.gen$3<0>[6dacb8fd25]"(i64  %"d#0")  
  ret void 
if.else2:
  %241 = tail call fastcc  {i64, i1}  @"drone.do_action<0>[410bae77d3]"(i64  %"d#0", i8  %"ch#0")  
  %242 = extractvalue {i64, i1} %241, 0 
  %243 = extractvalue {i64, i1} %241, 1 
  %"7$tmp$3#0" = icmp eq i1 %243, 0 
  br i1 %"7$tmp$3#0", label %if.then3, label %if.else3 
if.then3:
  %245 = ptrtoint i8* getelementptr inbounds ([16 x i8], [16 x i8]* @drone.244, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %245)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"drone.gen$3<0>[6dacb8fd25]"(i64  %242)  
  ret void 
if.else3:
  tail call fastcc  void  @"drone.gen$3<0>[6dacb8fd25]"(i64  %242)  
  ret void 
}


define external fastcc  void @"drone.print_info<0>"(i64  %"d#0")    {
entry:
  %247 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @drone.246, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %247)  
  %248 = inttoptr i64 %"d#0" to i64* 
  %249 = getelementptr  i64, i64* %248, i64 0 
  %250 = load  i64, i64* %249 
  tail call ccc  void  @print_int(i64  %250)  
  %252 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @drone.251, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %252)  
  %253 = add   i64 %"d#0", 8 
  %254 = inttoptr i64 %253 to i64* 
  %255 = getelementptr  i64, i64* %254, i64 0 
  %256 = load  i64, i64* %255 
  tail call ccc  void  @print_int(i64  %256)  
  %258 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @drone.257, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %258)  
  %259 = add   i64 %"d#0", 16 
  %260 = inttoptr i64 %259 to i64* 
  %261 = getelementptr  i64, i64* %260, i64 0 
  %262 = load  i64, i64* %261 
  tail call ccc  void  @print_int(i64  %262)  
  %264 = ptrtoint i8* getelementptr inbounds ([4 x i8], [4 x i8]* @drone.263, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %264)  
  %265 = add   i64 %"d#0", 24 
  %266 = inttoptr i64 %265 to i64* 
  %267 = getelementptr  i64, i64* %266, i64 0 
  %268 = load  i64, i64* %267 
  tail call ccc  void  @print_int(i64  %268)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module drone.drone_info
  representation  : address
  public submods  : 
  public resources: 
  public procs    : drone.drone_info./=<0>
                    drone.drone_info.=<0>
                    drone.drone_info.count<0>
                    drone.drone_info.count<1>
                    drone.drone_info.drone_info<0>
                    drone.drone_info.drone_info<1>
                    drone.drone_info.x<0>
                    drone.drone_info.x<1>
                    drone.drone_info.y<0>
                    drone.drone_info.y<1>
                    drone.drone_info.z<0>
                    drone.drone_info.z<1>
  imports         : use drone
                    use wybe
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:drone.drone_info, $right#0:drone.drone_info, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.int)
    foreign lpvm access(~$left#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$7#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$9#0:wybe.int)
    foreign lpvm access(~$right#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.int)
    foreign llvm icmp_eq(~tmp$3#0:wybe.int, ~tmp$7#0:wybe.int, ?tmp$11#0:wybe.bool) @int:24:28
    case ~tmp$11#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
        foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp$4#0:wybe.int, ~tmp$8#0:wybe.int, ?tmp$12#0:wybe.bool) @int:24:28
        case ~tmp$12#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
            foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp$5#0:wybe.int, ~tmp$9#0:wybe.int, ?tmp$13#0:wybe.bool) @int:24:28
            case ~tmp$13#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
                foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign llvm icmp_eq(~tmp$10#0:wybe.int, ~tmp$6#0:wybe.int, ?tmp$0#0:wybe.bool) @int:24:28
                foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)





= > public {inline} (1 calls)
0: =($left#0:drone.drone_info, $right#0:drone.drone_info, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$z#0:wybe.int)
    foreign lpvm access(~$left#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$count#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$y#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$z#0:wybe.int)
    foreign lpvm access(~$right#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$count#0:wybe.int)
    foreign llvm icmp_eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$1#0:wybe.bool) @int:24:28
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp_eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?tmp$2#0:wybe.bool) @int:24:28
        case ~tmp$2#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp_eq(~$left$z#0:wybe.int, ~$right$z#0:wybe.int, ?tmp$3#0:wybe.bool) @int:24:28
            case ~tmp$3#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign llvm icmp_eq(~$left$count#0:wybe.int, ~$right$count#0:wybe.int, ?$$#0:wybe.bool) @int:24:28





count > public {inline} (0 calls)
0: count($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
count > public {inline} (0 calls)
1: count($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


drone_info > public {inline} (0 calls)
0: drone_info(x#0:wybe.int, y#0:wybe.int, z#0:wybe.int, count#0:wybe.int, ?$#0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?$rec#0:drone.drone_info)
    foreign lpvm mutate(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:drone.drone_info, ?%$rec#2:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~y#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:drone.drone_info, ?%$rec#3:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~z#0:wybe.int)
    foreign lpvm mutate(~%$rec#3:drone.drone_info, ?%$#0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~count#0:wybe.int)
drone_info > public {inline} (14 calls)
1: drone_info(?x#0:wybe.int, ?y#0:wybe.int, ?z#0:wybe.int, ?count#0:wybe.int, $#0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access($#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?y#0:wybe.int)
    foreign lpvm access($#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?z#0:wybe.int)
    foreign lpvm access(~$#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?count#0:wybe.int)


x > public {inline} (0 calls)
0: x($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
x > public {inline} (0 calls)
1: x($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public {inline} (0 calls)
0: y($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
y > public {inline} (0 calls)
1: y($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


z > public {inline} (0 calls)
0: z($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
z > public {inline} (0 calls)
1: z($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'drone.drone_info'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"drone.drone_info./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"$left#0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"$left#0", 24 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = inttoptr i64 %"$right#0" to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %19 = add   i64 %"$right#0", 8 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %23 = add   i64 %"$right#0", 16 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = add   i64 %"$right#0", 24 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %"1$tmp$11#0" = icmp eq i64 %3, %18 
  br i1 %"1$tmp$11#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$12#0" = icmp eq i64 %7, %22 
  br i1 %"2$tmp$12#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = xor i1 0, 1 
  ret i1 %"3$$$#0" 
if.then1:
  %"4$tmp$13#0" = icmp eq i64 %11, %26 
  br i1 %"4$tmp$13#0", label %if.then2, label %if.else2 
if.else1:
  %"5$$$#0" = xor i1 0, 1 
  ret i1 %"5$$$#0" 
if.then2:
  %"6$tmp$0#0" = icmp eq i64 %30, %15 
  %"6$$$#0" = xor i1 %"6$tmp$0#0", 1 
  ret i1 %"6$$$#0" 
if.else2:
  %"7$$$#0" = xor i1 0, 1 
  ret i1 %"7$$$#0" 
}


define external fastcc  i1 @"drone.drone_info.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %31 = inttoptr i64 %"$left#0" to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  %33 = load  i64, i64* %32 
  %34 = add   i64 %"$left#0", 8 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  %37 = load  i64, i64* %36 
  %38 = add   i64 %"$left#0", 16 
  %39 = inttoptr i64 %38 to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  %41 = load  i64, i64* %40 
  %42 = add   i64 %"$left#0", 24 
  %43 = inttoptr i64 %42 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  %45 = load  i64, i64* %44 
  %46 = inttoptr i64 %"$right#0" to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  %48 = load  i64, i64* %47 
  %49 = add   i64 %"$right#0", 8 
  %50 = inttoptr i64 %49 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  %52 = load  i64, i64* %51 
  %53 = add   i64 %"$right#0", 16 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  %56 = load  i64, i64* %55 
  %57 = add   i64 %"$right#0", 24 
  %58 = inttoptr i64 %57 to i64* 
  %59 = getelementptr  i64, i64* %58, i64 0 
  %60 = load  i64, i64* %59 
  %"1$tmp$1#0" = icmp eq i64 %33, %48 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = icmp eq i64 %37, %52 
  br i1 %"2$tmp$2#0", label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %"4$tmp$3#0" = icmp eq i64 %41, %56 
  br i1 %"4$tmp$3#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6$$$#0" = icmp eq i64 %45, %60 
  ret i1 %"6$$$#0" 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"drone.drone_info.count<0>"(i64  %"$rec#0")    {
entry:
  %61 = add   i64 %"$rec#0", 24 
  %62 = inttoptr i64 %61 to i64* 
  %63 = getelementptr  i64, i64* %62, i64 0 
  %64 = load  i64, i64* %63 
  ret i64 %64 
}


define external fastcc  i64 @"drone.drone_info.count<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %65 = trunc i64 32 to i32  
  %66 = tail call ccc  i8*  @wybe_malloc(i32  %65)  
  %67 = ptrtoint i8* %66 to i64 
  %68 = inttoptr i64 %67 to i8* 
  %69 = inttoptr i64 %"$rec#0" to i8* 
  %70 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %68, i8*  %69, i32  %70, i32  8, i1  0)  
  %71 = add   i64 %67, 24 
  %72 = inttoptr i64 %71 to i64* 
  %73 = getelementptr  i64, i64* %72, i64 0 
  store  i64 %"$field#0", i64* %73 
  ret i64 %67 
}


define external fastcc  i64 @"drone.drone_info.drone_info<0>"(i64  %"x#0", i64  %"y#0", i64  %"z#0", i64  %"count#0")    {
entry:
  %74 = trunc i64 32 to i32  
  %75 = tail call ccc  i8*  @wybe_malloc(i32  %74)  
  %76 = ptrtoint i8* %75 to i64 
  %77 = inttoptr i64 %76 to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  store  i64 %"x#0", i64* %78 
  %79 = add   i64 %76, 8 
  %80 = inttoptr i64 %79 to i64* 
  %81 = getelementptr  i64, i64* %80, i64 0 
  store  i64 %"y#0", i64* %81 
  %82 = add   i64 %76, 16 
  %83 = inttoptr i64 %82 to i64* 
  %84 = getelementptr  i64, i64* %83, i64 0 
  store  i64 %"z#0", i64* %84 
  %85 = add   i64 %76, 24 
  %86 = inttoptr i64 %85 to i64* 
  %87 = getelementptr  i64, i64* %86, i64 0 
  store  i64 %"count#0", i64* %87 
  ret i64 %76 
}


define external fastcc  {i64, i64, i64, i64} @"drone.drone_info.drone_info<1>"(i64  %"$#0")    {
entry:
  %88 = inttoptr i64 %"$#0" to i64* 
  %89 = getelementptr  i64, i64* %88, i64 0 
  %90 = load  i64, i64* %89 
  %91 = add   i64 %"$#0", 8 
  %92 = inttoptr i64 %91 to i64* 
  %93 = getelementptr  i64, i64* %92, i64 0 
  %94 = load  i64, i64* %93 
  %95 = add   i64 %"$#0", 16 
  %96 = inttoptr i64 %95 to i64* 
  %97 = getelementptr  i64, i64* %96, i64 0 
  %98 = load  i64, i64* %97 
  %99 = add   i64 %"$#0", 24 
  %100 = inttoptr i64 %99 to i64* 
  %101 = getelementptr  i64, i64* %100, i64 0 
  %102 = load  i64, i64* %101 
  %103 = insertvalue {i64, i64, i64, i64} undef, i64 %90, 0 
  %104 = insertvalue {i64, i64, i64, i64} %103, i64 %94, 1 
  %105 = insertvalue {i64, i64, i64, i64} %104, i64 %98, 2 
  %106 = insertvalue {i64, i64, i64, i64} %105, i64 %102, 3 
  ret {i64, i64, i64, i64} %106 
}


define external fastcc  i64 @"drone.drone_info.x<0>"(i64  %"$rec#0")    {
entry:
  %107 = inttoptr i64 %"$rec#0" to i64* 
  %108 = getelementptr  i64, i64* %107, i64 0 
  %109 = load  i64, i64* %108 
  ret i64 %109 
}


define external fastcc  i64 @"drone.drone_info.x<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %110 = trunc i64 32 to i32  
  %111 = tail call ccc  i8*  @wybe_malloc(i32  %110)  
  %112 = ptrtoint i8* %111 to i64 
  %113 = inttoptr i64 %112 to i8* 
  %114 = inttoptr i64 %"$rec#0" to i8* 
  %115 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %113, i8*  %114, i32  %115, i32  8, i1  0)  
  %116 = inttoptr i64 %112 to i64* 
  %117 = getelementptr  i64, i64* %116, i64 0 
  store  i64 %"$field#0", i64* %117 
  ret i64 %112 
}


define external fastcc  i64 @"drone.drone_info.y<0>"(i64  %"$rec#0")    {
entry:
  %118 = add   i64 %"$rec#0", 8 
  %119 = inttoptr i64 %118 to i64* 
  %120 = getelementptr  i64, i64* %119, i64 0 
  %121 = load  i64, i64* %120 
  ret i64 %121 
}


define external fastcc  i64 @"drone.drone_info.y<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %122 = trunc i64 32 to i32  
  %123 = tail call ccc  i8*  @wybe_malloc(i32  %122)  
  %124 = ptrtoint i8* %123 to i64 
  %125 = inttoptr i64 %124 to i8* 
  %126 = inttoptr i64 %"$rec#0" to i8* 
  %127 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %125, i8*  %126, i32  %127, i32  8, i1  0)  
  %128 = add   i64 %124, 8 
  %129 = inttoptr i64 %128 to i64* 
  %130 = getelementptr  i64, i64* %129, i64 0 
  store  i64 %"$field#0", i64* %130 
  ret i64 %124 
}


define external fastcc  i64 @"drone.drone_info.z<0>"(i64  %"$rec#0")    {
entry:
  %131 = add   i64 %"$rec#0", 16 
  %132 = inttoptr i64 %131 to i64* 
  %133 = getelementptr  i64, i64* %132, i64 0 
  %134 = load  i64, i64* %133 
  ret i64 %134 
}


define external fastcc  i64 @"drone.drone_info.z<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %135 = trunc i64 32 to i32  
  %136 = tail call ccc  i8*  @wybe_malloc(i32  %135)  
  %137 = ptrtoint i8* %136 to i64 
  %138 = inttoptr i64 %137 to i8* 
  %139 = inttoptr i64 %"$rec#0" to i8* 
  %140 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %138, i8*  %139, i32  %140, i32  8, i1  0)  
  %141 = add   i64 %137, 16 
  %142 = inttoptr i64 %141 to i64* 
  %143 = getelementptr  i64, i64* %142, i64 0 
  store  i64 %"$field#0", i64* %143 
  ret i64 %137 
}

----------------------------------------------------------------------



----------------------------------------------------------------------
- build & execute without multiple specialization
----------------------------------------------------------------------
(0, 0, 0) #0
(-1, -6, 3) #100
** malloc count: 201

----------------------------------------------------------------------


----------------------------------------------------------------------
- build & execute with multiple specialization
----------------------------------------------------------------------
(0, 0, 0) #0
(-1, -6, 3) #100
** malloc count: 1

----------------------------------------------------------------------


----------------------------------------------------------------------
- final dump (with multiple specialization)
----------------------------------------------------------------------
======================================================================
AFTER BUILDING MAIN:


--------------------------------------------------
 Module *main* module
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    use drone
                    use drone.drone_info
                    use wybe
                    use wybe.array
                    use wybe.array.raw_array
                    use wybe.bool
                    use wybe.c_string
                    use wybe.char
                    use wybe.comparison
                    use wybe.control
                    use wybe.count
                    use wybe.float
                    use wybe.int
                    use wybe.io
                    use wybe.list
                    use wybe.machine_word
                    use wybe.memory_management
                    use wybe.opaque_pointer
                    use wybe.phantom
                    use wybe.predicate
                    use wybe.range
                    use wybe.string
  resources       : 
  procs           : 

module top-level code > {terminal,inline,impure} (0 calls)
0: *main* module.<0>
(%argc##0:wybe.int, %argv##0:wybe.array.raw_array, %?exit_code##1:wybe.int)<{}; {<<command_line.exit_code>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(%argc##0:wybe.int, <<command_line.argc>>:wybe.int)
    foreign lpvm store(%argv##0:wybe.array.raw_array, <<command_line.argv>>:wybe.array.raw_array)
    foreign lpvm store(0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} gc_init @memory_management:nn:nn
    drone.<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1
    foreign lpvm alloc(16:wybe.int, ?tmp#9##0:wybe.array(T)) @command_line:nn:nn
    foreign lpvm mutate(~tmp#9##0:wybe.array(T), ?tmp#10##0:wybe.array(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~argc##0:wybe.int) @command_line:nn:nn
    foreign lpvm mutate(~tmp#10##0:wybe.array(T), ?tmp#0##0:wybe.array(wybe.c_string), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~argv##0:wybe.array.raw_array) @command_line:nn:nn
    foreign lpvm store(~tmp#0##0:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
    foreign lpvm store(c"":wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn
    foreign lpvm store(0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn
    command_line.<0><{<<command_line.arguments>>, <<command_line.command>>}; {<<command_line.arguments>>, <<command_line.command>>}; {}> #3
    foreign llvm move(0:wybe.int, ?%exit_code##1:wybe.int)
    foreign c {semipure,terminal} exit(0:wybe.int)

  LLVM code       :


--------------------------------------------------
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    arguments: command_line.arguments
                    argv: command_line.argv
                    command: command_line.command
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:nn:nn)]
                    arguments: fromList [(command_line.arguments,wybe.array(wybe.c_string) = array(argc @command_line:nn:nn, argv @command_line:nn:nn) @command_line:nn:nn @command_line:nn:nn)]
                    argv: fromList [(command_line.argv,wybe.array.raw_array @command_line:nn:nn)]
                    command: fromList [(command_line.command,wybe.c_string = c"" @command_line:nn:nn @command_line:nn:nn)]
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:nn:nn @command_line:nn:nn)]
  procs           : 

module top-level code > public {semipure} (0 calls)
0: command_line.<0>
()<{<<command_line.arguments>>, <<command_line.command>>}; {<<command_line.arguments>>, <<command_line.command>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<command_line.arguments>>:wybe.array(wybe.c_string), ?%arguments##0:wybe.array(wybe.c_string))
    wybe.array.[|]<0>(?command##1:wybe.c_string, ?arguments##2:wybe.array(wybe.c_string), ~arguments##0:wybe.array(wybe.c_string), ?tmp#8##0:wybe.bool) #0 @command_line:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        foreign c {terminal,semipure} error_exit(c"command_line:18:15":wybe.c_string, c"Erroneous program argument vector":wybe.c_string) @command_line:nn:nn

    1:
        foreign lpvm store(~%arguments##2:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
        foreign lpvm store(~%command##1:wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn



proc set_exit_code > public {inline} (0 calls)
0: command_line.set_exit_code<0>
set_exit_code(code##0:wybe.int)<{}; {<<command_line.exit_code>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(~code##0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn

  LLVM code       :


--------------------------------------------------
 Module drone
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : drone.<0>
  imports         : use command_line
                    use drone.drone_info
                    use wybe
  resources       : 
  submodules      : drone.drone_info
  procs           : 

module top-level code > public {semipure} (0 calls)
0: drone.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(4,(drone.loop<0>,fromList [NonAliasedParamCond 0 []]))]
    drone.drone_init<0>(?tmp#0##0:drone.drone_info) #0 @drone:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#3##0:wybe.phantom) @drone:nn:nn
    foreign c read_char(?ch##0:wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#4##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
    foreign llvm icmp_ne(ch##0:wybe.char, -1:wybe.char, ?tmp#2##0:wybe.bool) @drone:nn:nn
    case ~tmp#2##0:wybe.bool of
    0:
        drone.#cont#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6

    1:
        drone.loop<0>[410bae77d3](~tmp#0##0:drone.drone_info, ~ch##0:wybe.char)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @drone:nn:nn
        drone.#cont#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5



proc #cont#1 > {semipure} (2 calls)
0: drone.#cont#1<0>
#cont#1()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} malloc_count(?mc##0:wybe.int) @drone:nn:nn
    wybe.string.print<0>("** malloc count: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @drone:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#3##0:wybe.phantom) @drone:nn:nn
    foreign c print_int(~mc##0:wybe.int, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @drone:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn


proc do_action > (2 calls)
0: drone.do_action<0>
do_action(d##0:drone.drone_info, ?d##2:drone.drone_info, action##0:wybe.char, ?success##2:wybe.bool)<{}; {}; {}>:
  AliasPairs: [(d##0,d##2)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(5,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(10,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(15,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(20,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(25,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(30,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(32,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_eq(action##0:wybe.char, 'n':wybe.char, ?tmp#21##0:wybe.bool) @drone:nn:nn
    case ~tmp#21##0:wybe.bool of
    0:
        foreign llvm icmp_eq(action##0:wybe.char, 's':wybe.char, ?tmp#20##0:wybe.bool) @drone:nn:nn
        case ~tmp#20##0:wybe.bool of
        0:
            foreign llvm icmp_eq(action##0:wybe.char, 'w':wybe.char, ?tmp#19##0:wybe.bool) @drone:nn:nn
            case ~tmp#19##0:wybe.bool of
            0:
                foreign llvm icmp_eq(action##0:wybe.char, 'e':wybe.char, ?tmp#18##0:wybe.bool) @drone:nn:nn
                case ~tmp#18##0:wybe.bool of
                0:
                    foreign llvm icmp_eq(action##0:wybe.char, 'u':wybe.char, ?tmp#17##0:wybe.bool) @drone:nn:nn
                    case ~tmp#17##0:wybe.bool of
                    0:
                        foreign llvm icmp_eq(~action##0:wybe.char, 'd':wybe.char, ?tmp#16##0:wybe.bool) @drone:nn:nn
                        case ~tmp#16##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?success##2:wybe.bool) @drone:nn:nn
                            drone.do_action#cont#1<0>(~d##0:drone.drone_info, 0:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #32

                        1:
                            foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.int) @drone:nn:nn
                            foreign llvm sub(~tmp#12##0:wybe.int, 1:wybe.int, ?tmp#11##0:wybe.int) @drone:nn:nn
                            foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#11##0:wybe.int) @drone:nn:nn
                            drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #30
                            foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


                    1:
                        foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @drone:nn:nn
                        foreign llvm add(~tmp#10##0:wybe.int, 1:wybe.int, ?tmp#9##0:wybe.int) @drone:nn:nn
                        foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#9##0:wybe.int) @drone:nn:nn
                        drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #25
                        foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


                1:
                    foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @drone:nn:nn
                    foreign llvm add(~tmp#8##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int) @drone:nn:nn
                    foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#7##0:wybe.int) @drone:nn:nn
                    drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #20
                    foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


            1:
                foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @drone:nn:nn
                foreign llvm sub(~tmp#6##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @drone:nn:nn
                foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#5##0:wybe.int) @drone:nn:nn
                drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #15
                foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


        1:
            foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @drone:nn:nn
            foreign llvm add(~tmp#4##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @drone:nn:nn
            foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.int) @drone:nn:nn
            drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #10
            foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


    1:
        foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @drone:nn:nn
        foreign llvm sub(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int) @drone:nn:nn
        foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @drone:nn:nn
        drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #5
        foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)



proc do_action#cont#1 > (7 calls)
0: drone.do_action#cont#1<0>
do_action#cont#1(d##0:drone.drone_info, success##0:wybe.bool, ?d##1:drone.drone_info, [?success##0:wybe.bool])<{}; {}; {}>:
  AliasPairs: [(d##0,d##1)]
  InterestingCallProperties: [InterestingUnaliased 0]
    case success##0:wybe.bool of
    0:
        foreign llvm move(~d##0:drone.drone_info, ?d##1:drone.drone_info)

    1:
        foreign lpvm access(d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.int) @drone:nn:nn
        foreign llvm add(~tmp#15##0:wybe.int, 1:wybe.int, ?tmp#14##0:wybe.int) @drone:nn:nn
        foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#14##0:wybe.int) @drone:nn:nn



proc drone_init > (3 calls)
0: drone.drone_init<0>
drone_init(?#result##0:drone.drone_info)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?tmp#5##0:drone.drone_info) @drone:nn:nn
    foreign lpvm mutate(~tmp#5##0:drone.drone_info, ?tmp#6##0:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int) @drone:nn:nn
    foreign lpvm mutate(~tmp#6##0:drone.drone_info, ?tmp#7##0:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int) @drone:nn:nn
    foreign lpvm mutate(~tmp#7##0:drone.drone_info, ?tmp#8##0:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int) @drone:nn:nn
    foreign lpvm mutate(~tmp#8##0:drone.drone_info, ?#result##0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int) @drone:nn:nn


proc loop > (2 calls)
0: drone.loop<0>
loop(d##0:drone.drone_info, ch##0:wybe.char)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(5,(drone.loop#cont#1<0>,fromList [NonAliasedParamCond 1 [0]])),(6,(drone.do_action<0>,fromList [NonAliasedParamCond 0 [0]])),(10,(drone.loop#cont#1<0>,fromList [NonAliasedParamCond 1 [0]])),(11,(drone.loop#cont#1<0>,fromList [NonAliasedParamCond 1 [0]])),(12,(drone.loop#cont#1<0>,fromList [NonAliasedParamCond 1 [0]])),(14,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(ch##0:wybe.char, ' ':wybe.char, ?tmp#0##0:wybe.bool) @drone:nn:nn
    foreign llvm icmp_ne(ch##0:wybe.char, '\n':wybe.char, ?tmp#1##0:wybe.bool) @drone:nn:nn
    foreign llvm and(~tmp#0##0:wybe.bool, ~tmp#1##0:wybe.bool, ?tmp#7##0:wybe.bool) @drone:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        drone.loop#cont#1<0>(_:wybe.char, ~d##0:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #12

    1:
        foreign llvm icmp_eq(ch##0:wybe.char, 'p':wybe.char, ?tmp#6##0:wybe.bool) @drone:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            drone.do_action<0>(~d##0:drone.drone_info, ?d##1:drone.drone_info, ~ch##0:wybe.char, ?success##0:wybe.bool) #6 @drone:nn:nn
            foreign llvm icmp_eq(~success##0:wybe.bool, 0:wybe.bool, ?tmp#5##0:wybe.bool) @drone:nn:nn
            case ~tmp#5##0:wybe.bool of
            0:
                drone.loop#cont#1<0>(_:wybe.char, ~d##1:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #11

            1:
                wybe.string.print<0>("invalid action!":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #13 @drone:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @drone:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @drone:nn:nn
                foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
                drone.loop#cont#1<0>(_:wybe.char, ~d##1:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10


        1:
            wybe.string.print<0>[410bae77d3](1187:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #14 @drone:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#22##0:wybe.int) @drone:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#23##0:wybe.phantom) @drone:nn:nn
            foreign c print_int(~tmp#22##0:wybe.int, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @drone:nn:nn
            foreign lpvm store(~%tmp#24##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
            wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #15 @drone:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#25##0:wybe.int) @drone:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#26##0:wybe.phantom) @drone:nn:nn
            foreign c print_int(~tmp#25##0:wybe.int, ~tmp#26##0:wybe.phantom, ?tmp#27##0:wybe.phantom) @drone:nn:nn
            foreign lpvm store(~%tmp#27##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
            wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #16 @drone:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#28##0:wybe.int) @drone:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#29##0:wybe.phantom) @drone:nn:nn
            foreign c print_int(~tmp#28##0:wybe.int, ~tmp#29##0:wybe.phantom, ?tmp#30##0:wybe.phantom) @drone:nn:nn
            foreign lpvm store(~%tmp#30##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
            wybe.string.print<0>(") #":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #17 @drone:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#31##0:wybe.int) @drone:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#32##0:wybe.phantom) @drone:nn:nn
            foreign c print_int(~tmp#31##0:wybe.int, ~tmp#32##0:wybe.phantom, ?tmp#33##0:wybe.phantom) @drone:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @drone:nn:nn
            foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
            drone.loop#cont#1<0>(_:wybe.char, ~d##0:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5




proc loop#cont#1 > (4 calls)
0: drone.loop#cont#1<0>
loop#cont#1([ch##0:wybe.char], d##0:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 1]
  MultiSpeczDepInfo: [(3,(drone.loop<0>,fromList [NonAliasedParamCond 0 [1]]))]
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @drone:nn:nn
    foreign c read_char(?ch##1:wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
    foreign llvm icmp_ne(ch##1:wybe.char, -1:wybe.char, ?tmp#4##0:wybe.bool) @drone:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:

    1:
        drone.loop<0>(~d##0:drone.drone_info, ~ch##1:wybe.char)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @drone:nn:nn



proc print_info > {inline} (1 calls)
0: drone.print_info<0>
print_info(d##0:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>(1187:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @drone:nn:nn
    foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @drone:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @drone:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
    wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @drone:nn:nn
    foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @drone:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @drone:nn:nn
    foreign c print_int(~tmp#1##0:wybe.int, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
    wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @drone:nn:nn
    foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @drone:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @drone:nn:nn
    foreign c print_int(~tmp#2##0:wybe.int, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
    wybe.string.print<0>(") #":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9 @drone:nn:nn
    foreign lpvm access(~d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @drone:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#23##0:wybe.phantom) @drone:nn:nn
    foreign c print_int(~tmp#3##0:wybe.int, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @drone:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#26##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#26##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn

  LLVM code       :


--------------------------------------------------
 Module drone.drone_info
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : drone.drone_info.=<0>
                    drone.drone_info.count<0>
                    drone.drone_info.count<1>
                    drone.drone_info.drone_info<0>
                    drone.drone_info.drone_info<1>
                    drone.drone_info.x<0>
                    drone.drone_info.x<1>
                    drone.drone_info.y<0>
                    drone.drone_info.y<1>
                    drone.drone_info.z<0>
                    drone.drone_info.z<1>
                    drone.drone_info.~=<0>
  imports         : use drone
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: drone.drone_info.=<0>
=(#left##0:drone.drone_info, #right##0:drone.drone_info, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#left##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#left##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#z##0:wybe.int) @drone:nn:nn
    foreign lpvm access(~#left##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#count##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#right##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#right##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#right##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#z##0:wybe.int) @drone:nn:nn
    foreign lpvm access(~#right##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#count##0:wybe.int) @drone:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#z##0:wybe.int, ~#right#z##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#count##0:wybe.int, ~#right#count##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





proc count > public {inline} (0 calls)
0: drone.drone_info.count<0>
count(#rec##0:drone.drone_info, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @drone:nn:nn
proc count > public {inline} (0 calls)
1: drone.drone_info.count<1>
count(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @drone:nn:nn


proc drone_info > public {inline} (0 calls)
0: drone.drone_info.drone_info<0>
drone_info(x##0:wybe.int, y##0:wybe.int, z##0:wybe.int, count##0:wybe.int, ?#result##0:drone.drone_info)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?#rec##0:drone.drone_info) @drone:nn:nn
    foreign lpvm mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~x##0:wybe.int) @drone:nn:nn
    foreign lpvm mutate(~#rec##1:drone.drone_info, ?#rec##2:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~y##0:wybe.int) @drone:nn:nn
    foreign lpvm mutate(~#rec##2:drone.drone_info, ?#rec##3:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~z##0:wybe.int) @drone:nn:nn
    foreign lpvm mutate(~#rec##3:drone.drone_info, ?#result##0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~count##0:wybe.int) @drone:nn:nn
proc drone_info > public {inline} (14 calls)
1: drone.drone_info.drone_info<1>
drone_info(?x##0:wybe.int, ?y##0:wybe.int, ?z##0:wybe.int, ?count##0:wybe.int, #result##0:drone.drone_info)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?x##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#result##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?y##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#result##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?z##0:wybe.int) @drone:nn:nn
    foreign lpvm access(~#result##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?count##0:wybe.int) @drone:nn:nn


proc x > public {inline} (0 calls)
0: drone.drone_info.x<0>
x(#rec##0:drone.drone_info, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @drone:nn:nn
proc x > public {inline} (0 calls)
1: drone.drone_info.x<1>
x(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @drone:nn:nn


proc y > public {inline} (0 calls)
0: drone.drone_info.y<0>
y(#rec##0:drone.drone_info, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @drone:nn:nn
proc y > public {inline} (0 calls)
1: drone.drone_info.y<1>
y(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @drone:nn:nn


proc z > public {inline} (0 calls)
0: drone.drone_info.z<0>
z(#rec##0:drone.drone_info, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @drone:nn:nn
proc z > public {inline} (0 calls)
1: drone.drone_info.z<1>
z(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @drone:nn:nn


proc ~= > public {inline} (0 calls)
0: drone.drone_info.~=<0>
~=(#left##0:drone.drone_info, #right##0:drone.drone_info, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#left##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#left##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @drone:nn:nn
    foreign lpvm access(~#left##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#right##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#right##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#right##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int) @drone:nn:nn
    foreign lpvm access(~#right##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @drone:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#7##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
    case ~tmp#11##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#12##0:wybe.bool) @int:nn:nn
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp#5##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#13##0:wybe.bool) @int:nn:nn
            case ~tmp#13##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
                foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
                foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)




  LLVM code       :

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module *main* module
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    use drone
                    use drone.drone_info
                    use wybe
                    use wybe.array
                    use wybe.array.raw_array
                    use wybe.bool
                    use wybe.c_string
                    use wybe.char
                    use wybe.comparison
                    use wybe.control
                    use wybe.count
                    use wybe.float
                    use wybe.int
                    use wybe.io
                    use wybe.list
                    use wybe.machine_word
                    use wybe.memory_management
                    use wybe.opaque_pointer
                    use wybe.phantom
                    use wybe.predicate
                    use wybe.range
                    use wybe.string
  resources       : 
  procs           : 

module top-level code > {terminal,inline,impure} (0 calls)
0: *main* module.<0>
(%argc##0:wybe.int, %argv##0:wybe.array.raw_array, %?exit_code##1:wybe.int)<{}; {<<command_line.exit_code>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(%argc##0:wybe.int, <<command_line.argc>>:wybe.int)
    foreign lpvm store(%argv##0:wybe.array.raw_array, <<command_line.argv>>:wybe.array.raw_array)
    foreign lpvm store(0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} gc_init @memory_management:nn:nn
    drone.<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1
    foreign lpvm alloc(16:wybe.int, ?tmp#9##0:wybe.array(T)) @command_line:nn:nn
    foreign lpvm mutate(~tmp#9##0:wybe.array(T), ?tmp#10##0:wybe.array(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~argc##0:wybe.int) @command_line:nn:nn
    foreign lpvm mutate(~tmp#10##0:wybe.array(T), ?tmp#0##0:wybe.array(wybe.c_string), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~argv##0:wybe.array.raw_array) @command_line:nn:nn
    foreign lpvm store(~tmp#0##0:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
    foreign lpvm store(c"":wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn
    foreign lpvm store(0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn
    command_line.<0><{<<command_line.arguments>>, <<command_line.command>>}; {<<command_line.arguments>>, <<command_line.command>>}; {}> #3
    foreign llvm move(0:wybe.int, ?%exit_code##1:wybe.int)
    foreign c {semipure,terminal} exit(0:wybe.int)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = '*main* module'

source_filename = "/private!TMP!/drone"
target triple   = ???

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"\00", align 8

declare external fastcc void @"command_line.<0>"()
declare external fastcc void @"drone.<0>"()
@"resource#command_line.argc" = external global i64
@"resource#command_line.arguments" = external global i64
@"resource#command_line.argv" = external global i64
@"resource#command_line.command" = external global i64
@"resource#command_line.exit_code" = external global i64
declare external ccc void @exit(i64)
declare external ccc void @gc_init()
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external ccc i64 @main(i64 %"argc##0", i64 %"argv##0") {
  store i64 %"argc##0", ptr @"resource#command_line.argc"
  store i64 %"argv##0", ptr @"resource#command_line.argv"
  call ccc void @gc_init()
  tail call fastcc void @"drone.<0>"()
  %"tmp#11##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#9##0" = ptrtoint ptr %"tmp#11##0" to i64
  %"tmp#12##0" = inttoptr i64 %"tmp#9##0" to ptr
  store i64 %"argc##0", ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"tmp#9##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  store i64 %"argv##0", ptr %"tmp#14##0"
  store i64 %"tmp#9##0", ptr @"resource#command_line.arguments"
  store i64 ptrtoint( ptr @"cstring#0" to i64 ), ptr @"resource#command_line.command"
  store i64 0, ptr @"resource#command_line.exit_code"
  tail call fastcc void @"command_line.<0>"()
  call ccc void @exit(i64 0)
  ret i64 0
}

--------------------------------------------------
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    arguments: command_line.arguments
                    argv: command_line.argv
                    command: command_line.command
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:nn:nn)]
                    arguments: fromList [(command_line.arguments,wybe.array(wybe.c_string) = array(argc @command_line:nn:nn, argv @command_line:nn:nn) @command_line:nn:nn @command_line:nn:nn)]
                    argv: fromList [(command_line.argv,wybe.array.raw_array @command_line:nn:nn)]
                    command: fromList [(command_line.command,wybe.c_string = c"" @command_line:nn:nn @command_line:nn:nn)]
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:nn:nn @command_line:nn:nn)]
  procs           : 

module top-level code > public {semipure} (0 calls)
0: command_line.<0>
()<{<<command_line.arguments>>, <<command_line.command>>}; {<<command_line.arguments>>, <<command_line.command>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<command_line.arguments>>:wybe.array(wybe.c_string), ?%arguments##0:wybe.array(wybe.c_string))
    wybe.array.[|]<0>(?command##1:wybe.c_string, ?arguments##2:wybe.array(wybe.c_string), ~arguments##0:wybe.array(wybe.c_string), ?tmp#8##0:wybe.bool) #0 @command_line:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        foreign c {terminal,semipure} error_exit(c"command_line:18:15":wybe.c_string, c"Erroneous program argument vector":wybe.c_string) @command_line:nn:nn

    1:
        foreign lpvm store(~%arguments##2:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
        foreign lpvm store(~%command##1:wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn



proc set_exit_code > public {inline} (0 calls)
0: command_line.set_exit_code<0>
set_exit_code(code##0:wybe.int)<{}; {<<command_line.exit_code>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(~code##0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'command_line'

source_filename = "!ROOT!/wybelibs/command_line.o"
target triple   = ???

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"Erroneous program argument vector\00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"command_line:18:15\00", align 8

declare external fastcc {i64, i64, i1} @"wybe.array.[|]<0>"(i64)
declare external ccc void @error_exit(i64, i64)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)
@"resource#command_line.argc" = global i64 undef
@"resource#command_line.arguments" = global i64 undef
@"resource#command_line.argv" = global i64 undef
@"resource#command_line.command" = global i64 undef
@"resource#command_line.exit_code" = global i64 undef

define external fastcc void @"command_line.<0>"() {
  %"arguments##0" = load i64, ptr @"resource#command_line.arguments"
  %"tmp#11##0" = tail call fastcc {i64, i64, i1} @"wybe.array.[|]<0>"(i64 %"arguments##0")
  %"command##1" = extractvalue {i64, i64, i1}%"tmp#11##0", 0
  %"arguments##2" = extractvalue {i64, i64, i1}%"tmp#11##0", 1
  %"tmp#8##0" = extractvalue {i64, i64, i1}%"tmp#11##0", 2
  br i1 %"tmp#8##0", label %if.then.0, label %if.else.0
if.then.0:
  store i64 %"arguments##2", ptr @"resource#command_line.arguments"
  store i64 %"command##1", ptr @"resource#command_line.command"
  ret void
if.else.0:
  call ccc void @error_exit(i64 ptrtoint( ptr @"cstring#1" to i64 ), i64 ptrtoint( ptr @"cstring#0" to i64 ))
  ret void
}

define external fastcc void @"command_line.set_exit_code<0>"(i64 %"code##0") {
  store i64 %"code##0", ptr @"resource#command_line.exit_code"
  ret void
}

--------------------------------------------------
 Module drone
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : drone.<0>
  imports         : use command_line
                    use drone.drone_info
                    use wybe
  resources       : 
  submodules      : drone.drone_info
  procs           : 

module top-level code > public {semipure} (0 calls)
0: drone.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(4,(drone.loop<0>,fromList [NonAliasedParamCond 0 []]))]
    drone.drone_init<0>(?tmp#0##0:drone.drone_info) #0 @drone:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#3##0:wybe.phantom) @drone:nn:nn
    foreign c read_char(?ch##0:wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#4##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
    foreign llvm icmp_ne(ch##0:wybe.char, -1:wybe.char, ?tmp#2##0:wybe.bool) @drone:nn:nn
    case ~tmp#2##0:wybe.bool of
    0:
        drone.#cont#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6

    1:
        drone.loop<0>[410bae77d3](~tmp#0##0:drone.drone_info, ~ch##0:wybe.char)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @drone:nn:nn
        drone.#cont#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5



proc #cont#1 > {semipure} (2 calls)
0: drone.#cont#1<0>
#cont#1()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} malloc_count(?mc##0:wybe.int) @drone:nn:nn
    wybe.string.print<0>("** malloc count: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @drone:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#3##0:wybe.phantom) @drone:nn:nn
    foreign c print_int(~mc##0:wybe.int, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @drone:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn


proc do_action > (2 calls)
0: drone.do_action<0>
do_action(d##0:drone.drone_info, ?d##2:drone.drone_info, action##0:wybe.char, ?success##2:wybe.bool)<{}; {}; {}>:
  AliasPairs: [(d##0,d##2)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(5,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(10,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(15,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(20,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(25,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(30,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(32,(drone.do_action#cont#1<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_eq(action##0:wybe.char, 'n':wybe.char, ?tmp#21##0:wybe.bool) @drone:nn:nn
    case ~tmp#21##0:wybe.bool of
    0:
        foreign llvm icmp_eq(action##0:wybe.char, 's':wybe.char, ?tmp#20##0:wybe.bool) @drone:nn:nn
        case ~tmp#20##0:wybe.bool of
        0:
            foreign llvm icmp_eq(action##0:wybe.char, 'w':wybe.char, ?tmp#19##0:wybe.bool) @drone:nn:nn
            case ~tmp#19##0:wybe.bool of
            0:
                foreign llvm icmp_eq(action##0:wybe.char, 'e':wybe.char, ?tmp#18##0:wybe.bool) @drone:nn:nn
                case ~tmp#18##0:wybe.bool of
                0:
                    foreign llvm icmp_eq(action##0:wybe.char, 'u':wybe.char, ?tmp#17##0:wybe.bool) @drone:nn:nn
                    case ~tmp#17##0:wybe.bool of
                    0:
                        foreign llvm icmp_eq(~action##0:wybe.char, 'd':wybe.char, ?tmp#16##0:wybe.bool) @drone:nn:nn
                        case ~tmp#16##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?success##2:wybe.bool) @drone:nn:nn
                            drone.do_action#cont#1<0>(~d##0:drone.drone_info, 0:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #32

                        1:
                            foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.int) @drone:nn:nn
                            foreign llvm sub(~tmp#12##0:wybe.int, 1:wybe.int, ?tmp#11##0:wybe.int) @drone:nn:nn
                            foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#11##0:wybe.int) @drone:nn:nn
                            drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #30
                            foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


                    1:
                        foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @drone:nn:nn
                        foreign llvm add(~tmp#10##0:wybe.int, 1:wybe.int, ?tmp#9##0:wybe.int) @drone:nn:nn
                        foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#9##0:wybe.int) @drone:nn:nn
                        drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #25
                        foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


                1:
                    foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @drone:nn:nn
                    foreign llvm add(~tmp#8##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int) @drone:nn:nn
                    foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#7##0:wybe.int) @drone:nn:nn
                    drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #20
                    foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


            1:
                foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @drone:nn:nn
                foreign llvm sub(~tmp#6##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @drone:nn:nn
                foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#5##0:wybe.int) @drone:nn:nn
                drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #15
                foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


        1:
            foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @drone:nn:nn
            foreign llvm add(~tmp#4##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @drone:nn:nn
            foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.int) @drone:nn:nn
            drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #10
            foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


    1:
        foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @drone:nn:nn
        foreign llvm sub(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int) @drone:nn:nn
        foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @drone:nn:nn
        drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #5
        foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_eq(action##0:wybe.char, 'n':wybe.char, ?tmp#21##0:wybe.bool) @drone:nn:nn
    case ~tmp#21##0:wybe.bool of
    0:
        foreign llvm icmp_eq(action##0:wybe.char, 's':wybe.char, ?tmp#20##0:wybe.bool) @drone:nn:nn
        case ~tmp#20##0:wybe.bool of
        0:
            foreign llvm icmp_eq(action##0:wybe.char, 'w':wybe.char, ?tmp#19##0:wybe.bool) @drone:nn:nn
            case ~tmp#19##0:wybe.bool of
            0:
                foreign llvm icmp_eq(action##0:wybe.char, 'e':wybe.char, ?tmp#18##0:wybe.bool) @drone:nn:nn
                case ~tmp#18##0:wybe.bool of
                0:
                    foreign llvm icmp_eq(action##0:wybe.char, 'u':wybe.char, ?tmp#17##0:wybe.bool) @drone:nn:nn
                    case ~tmp#17##0:wybe.bool of
                    0:
                        foreign llvm icmp_eq(~action##0:wybe.char, 'd':wybe.char, ?tmp#16##0:wybe.bool) @drone:nn:nn
                        case ~tmp#16##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?success##2:wybe.bool) @drone:nn:nn
                            drone.do_action#cont#1<0>[410bae77d3](~d##0:drone.drone_info, 0:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #32

                        1:
                            foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.int) @drone:nn:nn
                            foreign llvm sub(~tmp#12##0:wybe.int, 1:wybe.int, ?tmp#11##0:wybe.int) @drone:nn:nn
                            foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#11##0:wybe.int) @drone:nn:nn
                            drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #30
                            foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


                    1:
                        foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @drone:nn:nn
                        foreign llvm add(~tmp#10##0:wybe.int, 1:wybe.int, ?tmp#9##0:wybe.int) @drone:nn:nn
                        foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#9##0:wybe.int) @drone:nn:nn
                        drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #25
                        foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


                1:
                    foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @drone:nn:nn
                    foreign llvm add(~tmp#8##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int) @drone:nn:nn
                    foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#7##0:wybe.int) @drone:nn:nn
                    drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #20
                    foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


            1:
                foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @drone:nn:nn
                foreign llvm sub(~tmp#6##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @drone:nn:nn
                foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#5##0:wybe.int) @drone:nn:nn
                drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #15
                foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


        1:
            foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @drone:nn:nn
            foreign llvm add(~tmp#4##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @drone:nn:nn
            foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.int) @drone:nn:nn
            drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #10
            foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


    1:
        foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @drone:nn:nn
        foreign llvm sub(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int) @drone:nn:nn
        foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @drone:nn:nn
        drone.do_action#cont#1<0>[410bae77d3](~d##1:drone.drone_info, 1:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #5
        foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)



proc do_action#cont#1 > (7 calls)
0: drone.do_action#cont#1<0>
do_action#cont#1(d##0:drone.drone_info, success##0:wybe.bool, ?d##1:drone.drone_info, [?success##0:wybe.bool])<{}; {}; {}>:
  AliasPairs: [(d##0,d##1)]
  InterestingCallProperties: [InterestingUnaliased 0]
    case success##0:wybe.bool of
    0:
        foreign llvm move(~d##0:drone.drone_info, ?d##1:drone.drone_info)

    1:
        foreign lpvm access(d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.int) @drone:nn:nn
        foreign llvm add(~tmp#15##0:wybe.int, 1:wybe.int, ?tmp#14##0:wybe.int) @drone:nn:nn
        foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#14##0:wybe.int) @drone:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    case success##0:wybe.bool of
    0:
        foreign llvm move(~d##0:drone.drone_info, ?d##1:drone.drone_info)

    1:
        foreign lpvm access(d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.int) @drone:nn:nn
        foreign llvm add(~tmp#15##0:wybe.int, 1:wybe.int, ?tmp#14##0:wybe.int) @drone:nn:nn
        foreign lpvm {noalias} mutate(~d##0:drone.drone_info, ?d##1:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#14##0:wybe.int) @drone:nn:nn



proc drone_init > (3 calls)
0: drone.drone_init<0>
drone_init(?#result##0:drone.drone_info)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?tmp#5##0:drone.drone_info) @drone:nn:nn
    foreign lpvm mutate(~tmp#5##0:drone.drone_info, ?tmp#6##0:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int) @drone:nn:nn
    foreign lpvm mutate(~tmp#6##0:drone.drone_info, ?tmp#7##0:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int) @drone:nn:nn
    foreign lpvm mutate(~tmp#7##0:drone.drone_info, ?tmp#8##0:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int) @drone:nn:nn
    foreign lpvm mutate(~tmp#8##0:drone.drone_info, ?#result##0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int) @drone:nn:nn


proc loop > (2 calls)
0: drone.loop<0>
loop(d##0:drone.drone_info, ch##0:wybe.char)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(5,(drone.loop#cont#1<0>,fromList [NonAliasedParamCond 1 [0]])),(6,(drone.do_action<0>,fromList [NonAliasedParamCond 0 [0]])),(10,(drone.loop#cont#1<0>,fromList [NonAliasedParamCond 1 [0]])),(11,(drone.loop#cont#1<0>,fromList [NonAliasedParamCond 1 [0]])),(12,(drone.loop#cont#1<0>,fromList [NonAliasedParamCond 1 [0]])),(14,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(ch##0:wybe.char, ' ':wybe.char, ?tmp#0##0:wybe.bool) @drone:nn:nn
    foreign llvm icmp_ne(ch##0:wybe.char, '\n':wybe.char, ?tmp#1##0:wybe.bool) @drone:nn:nn
    foreign llvm and(~tmp#0##0:wybe.bool, ~tmp#1##0:wybe.bool, ?tmp#7##0:wybe.bool) @drone:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        drone.loop#cont#1<0>(_:wybe.char, ~d##0:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #12

    1:
        foreign llvm icmp_eq(ch##0:wybe.char, 'p':wybe.char, ?tmp#6##0:wybe.bool) @drone:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            drone.do_action<0>(~d##0:drone.drone_info, ?d##1:drone.drone_info, ~ch##0:wybe.char, ?success##0:wybe.bool) #6 @drone:nn:nn
            foreign llvm icmp_eq(~success##0:wybe.bool, 0:wybe.bool, ?tmp#5##0:wybe.bool) @drone:nn:nn
            case ~tmp#5##0:wybe.bool of
            0:
                drone.loop#cont#1<0>(_:wybe.char, ~d##1:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #11

            1:
                wybe.string.print<0>("invalid action!":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #13 @drone:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @drone:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @drone:nn:nn
                foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
                drone.loop#cont#1<0>(_:wybe.char, ~d##1:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10


        1:
            wybe.string.print<0>[410bae77d3](1187:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #14 @drone:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#22##0:wybe.int) @drone:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#23##0:wybe.phantom) @drone:nn:nn
            foreign c print_int(~tmp#22##0:wybe.int, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @drone:nn:nn
            foreign lpvm store(~%tmp#24##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
            wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #15 @drone:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#25##0:wybe.int) @drone:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#26##0:wybe.phantom) @drone:nn:nn
            foreign c print_int(~tmp#25##0:wybe.int, ~tmp#26##0:wybe.phantom, ?tmp#27##0:wybe.phantom) @drone:nn:nn
            foreign lpvm store(~%tmp#27##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
            wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #16 @drone:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#28##0:wybe.int) @drone:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#29##0:wybe.phantom) @drone:nn:nn
            foreign c print_int(~tmp#28##0:wybe.int, ~tmp#29##0:wybe.phantom, ?tmp#30##0:wybe.phantom) @drone:nn:nn
            foreign lpvm store(~%tmp#30##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
            wybe.string.print<0>(") #":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #17 @drone:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#31##0:wybe.int) @drone:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#32##0:wybe.phantom) @drone:nn:nn
            foreign c print_int(~tmp#31##0:wybe.int, ~tmp#32##0:wybe.phantom, ?tmp#33##0:wybe.phantom) @drone:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @drone:nn:nn
            foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
            drone.loop#cont#1<0>(_:wybe.char, ~d##0:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(ch##0:wybe.char, ' ':wybe.char, ?tmp#0##0:wybe.bool) @drone:nn:nn
    foreign llvm icmp_ne(ch##0:wybe.char, '\n':wybe.char, ?tmp#1##0:wybe.bool) @drone:nn:nn
    foreign llvm and(~tmp#0##0:wybe.bool, ~tmp#1##0:wybe.bool, ?tmp#7##0:wybe.bool) @drone:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        drone.loop#cont#1<0>[6dacb8fd25](_:wybe.char, ~d##0:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #12

    1:
        foreign llvm icmp_eq(ch##0:wybe.char, 'p':wybe.char, ?tmp#6##0:wybe.bool) @drone:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            drone.do_action<0>[410bae77d3](~d##0:drone.drone_info, ?d##1:drone.drone_info, ~ch##0:wybe.char, ?success##0:wybe.bool) #6 @drone:nn:nn
            foreign llvm icmp_eq(~success##0:wybe.bool, 0:wybe.bool, ?tmp#5##0:wybe.bool) @drone:nn:nn
            case ~tmp#5##0:wybe.bool of
            0:
                drone.loop#cont#1<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #11

            1:
                wybe.string.print<0>("invalid action!":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #13 @drone:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @drone:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @drone:nn:nn
                foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
                drone.loop#cont#1<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10


        1:
            wybe.string.print<0>[410bae77d3](1187:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #14 @drone:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#22##0:wybe.int) @drone:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#23##0:wybe.phantom) @drone:nn:nn
            foreign c print_int(~tmp#22##0:wybe.int, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @drone:nn:nn
            foreign lpvm store(~%tmp#24##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
            wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #15 @drone:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#25##0:wybe.int) @drone:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#26##0:wybe.phantom) @drone:nn:nn
            foreign c print_int(~tmp#25##0:wybe.int, ~tmp#26##0:wybe.phantom, ?tmp#27##0:wybe.phantom) @drone:nn:nn
            foreign lpvm store(~%tmp#27##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
            wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #16 @drone:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#28##0:wybe.int) @drone:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#29##0:wybe.phantom) @drone:nn:nn
            foreign c print_int(~tmp#28##0:wybe.int, ~tmp#29##0:wybe.phantom, ?tmp#30##0:wybe.phantom) @drone:nn:nn
            foreign lpvm store(~%tmp#30##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
            wybe.string.print<0>(") #":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #17 @drone:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#31##0:wybe.int) @drone:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#32##0:wybe.phantom) @drone:nn:nn
            foreign c print_int(~tmp#31##0:wybe.int, ~tmp#32##0:wybe.phantom, ?tmp#33##0:wybe.phantom) @drone:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @drone:nn:nn
            foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
            drone.loop#cont#1<0>[6dacb8fd25](_:wybe.char, ~d##0:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5




proc loop#cont#1 > (4 calls)
0: drone.loop#cont#1<0>
loop#cont#1([ch##0:wybe.char], d##0:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 1]
  MultiSpeczDepInfo: [(3,(drone.loop<0>,fromList [NonAliasedParamCond 0 [1]]))]
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @drone:nn:nn
    foreign c read_char(?ch##1:wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
    foreign llvm icmp_ne(ch##1:wybe.char, -1:wybe.char, ?tmp#4##0:wybe.bool) @drone:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:

    1:
        drone.loop<0>(~d##0:drone.drone_info, ~ch##1:wybe.char)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @drone:nn:nn

 [6dacb8fd25] [NonAliasedParam 1] :
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @drone:nn:nn
    foreign c read_char(?ch##1:wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
    foreign llvm icmp_ne(ch##1:wybe.char, -1:wybe.char, ?tmp#4##0:wybe.bool) @drone:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:

    1:
        drone.loop<0>[410bae77d3](~d##0:drone.drone_info, ~ch##1:wybe.char)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @drone:nn:nn



proc print_info > {inline} (1 calls)
0: drone.print_info<0>
print_info(d##0:drone.drone_info)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>(1187:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @drone:nn:nn
    foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @drone:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @drone:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
    wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @drone:nn:nn
    foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @drone:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @drone:nn:nn
    foreign c print_int(~tmp#1##0:wybe.int, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
    wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @drone:nn:nn
    foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @drone:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @drone:nn:nn
    foreign c print_int(~tmp#2##0:wybe.int, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn
    wybe.string.print<0>(") #":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9 @drone:nn:nn
    foreign lpvm access(~d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @drone:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#23##0:wybe.phantom) @drone:nn:nn
    foreign c print_int(~tmp#3##0:wybe.int, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @drone:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#26##0:wybe.phantom) @drone:nn:nn
    foreign lpvm store(~%tmp#26##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @drone:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'drone'

source_filename = "/private!TMP!/drone.wybe"
target triple   = ???

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c") #\00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"** malloc count: \00", align 8
@"cstring#2" = private unnamed_addr constant [ ?? x i8 ] c", \00", align 8
@"cstring#3" = private unnamed_addr constant [ ?? x i8 ] c"invalid action!\00", align 8
@"string#4" = private unnamed_addr constant {i64, i64} { i64 3, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#5" = private unnamed_addr constant {i64, i64} { i64 17, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8
@"string#6" = private unnamed_addr constant {i64, i64} { i64 2, i64 ptrtoint( ptr @"cstring#2" to i64 ) }, align 8
@"string#7" = private unnamed_addr constant {i64, i64} { i64 15, i64 ptrtoint( ptr @"cstring#3" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external fastcc void @"wybe.string.print<0>[410bae77d3]"(i64)
declare external ccc i64 @malloc_count()
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc i8 @read_char()
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"drone.<0>"() {
  %"tmp#0##0" = tail call fastcc i64 @"drone.drone_init<0>"()
  %"ch##0" = call ccc i8 @read_char()
  %"tmp#2##0" = icmp ne i8 %"ch##0", -1
  br i1 %"tmp#2##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"drone.loop<0>[410bae77d3]"(i64 %"tmp#0##0", i8 %"ch##0")
  tail call fastcc void @"drone.#cont#1<0>"()
  ret void
if.else.0:
  tail call fastcc void @"drone.#cont#1<0>"()
  ret void
}

define external fastcc void @"drone.#cont#1<0>"() {
  %"mc##0" = call ccc i64 @malloc_count()
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#5" to i64 ))
  call ccc void @print_int(i64 %"mc##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc {i64, i1} @"drone.do_action<0>"(i64 %"d##0", i8 %"action##0") {
  %"tmp#21##0" = icmp eq i8 %"action##0", 110
  br i1 %"tmp#21##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#64##0" = add i64 %"d##0", 8
  %"tmp#65##0" = inttoptr i64 %"tmp#64##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#65##0"
  %"tmp#1##0" = sub i64 %"tmp#2##0", 1
  %"tmp#66##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#67##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#67##0", ptr %"tmp#66##0", i64 32, i1 0)
  %"tmp#68##0" = ptrtoint ptr %"tmp#67##0" to i64
  %"tmp#69##0" = add i64 %"tmp#68##0", 8
  %"tmp#70##0" = inttoptr i64 %"tmp#69##0" to ptr
  store i64 %"tmp#1##0", ptr %"tmp#70##0"
  %"tmp#71##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"tmp#68##0", i1 1)
  %"tmp#72##0" = insertvalue {i64, i1} undef, i64 %"tmp#71##0", 0
  %"tmp#73##0" = insertvalue {i64, i1} %"tmp#72##0", i1 1, 1
  ret {i64, i1} %"tmp#73##0"
if.else.0:
  %"tmp#20##0" = icmp eq i8 %"action##0", 115
  br i1 %"tmp#20##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#74##0" = add i64 %"d##0", 8
  %"tmp#75##0" = inttoptr i64 %"tmp#74##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#75##0"
  %"tmp#3##0" = add i64 %"tmp#4##0", 1
  %"tmp#76##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#77##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#77##0", ptr %"tmp#76##0", i64 32, i1 0)
  %"tmp#78##0" = ptrtoint ptr %"tmp#77##0" to i64
  %"tmp#79##0" = add i64 %"tmp#78##0", 8
  %"tmp#80##0" = inttoptr i64 %"tmp#79##0" to ptr
  store i64 %"tmp#3##0", ptr %"tmp#80##0"
  %"tmp#81##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"tmp#78##0", i1 1)
  %"tmp#82##0" = insertvalue {i64, i1} undef, i64 %"tmp#81##0", 0
  %"tmp#83##0" = insertvalue {i64, i1} %"tmp#82##0", i1 1, 1
  ret {i64, i1} %"tmp#83##0"
if.else.1:
  %"tmp#19##0" = icmp eq i8 %"action##0", 119
  br i1 %"tmp#19##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#84##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#84##0"
  %"tmp#5##0" = sub i64 %"tmp#6##0", 1
  %"tmp#85##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#86##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#86##0", ptr %"tmp#85##0", i64 32, i1 0)
  %"tmp#87##0" = ptrtoint ptr %"tmp#86##0" to i64
  %"tmp#88##0" = inttoptr i64 %"tmp#87##0" to ptr
  store i64 %"tmp#5##0", ptr %"tmp#88##0"
  %"tmp#89##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"tmp#87##0", i1 1)
  %"tmp#90##0" = insertvalue {i64, i1} undef, i64 %"tmp#89##0", 0
  %"tmp#91##0" = insertvalue {i64, i1} %"tmp#90##0", i1 1, 1
  ret {i64, i1} %"tmp#91##0"
if.else.2:
  %"tmp#18##0" = icmp eq i8 %"action##0", 101
  br i1 %"tmp#18##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#92##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#92##0"
  %"tmp#7##0" = add i64 %"tmp#8##0", 1
  %"tmp#93##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#94##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#94##0", ptr %"tmp#93##0", i64 32, i1 0)
  %"tmp#95##0" = ptrtoint ptr %"tmp#94##0" to i64
  %"tmp#96##0" = inttoptr i64 %"tmp#95##0" to ptr
  store i64 %"tmp#7##0", ptr %"tmp#96##0"
  %"tmp#97##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"tmp#95##0", i1 1)
  %"tmp#98##0" = insertvalue {i64, i1} undef, i64 %"tmp#97##0", 0
  %"tmp#99##0" = insertvalue {i64, i1} %"tmp#98##0", i1 1, 1
  ret {i64, i1} %"tmp#99##0"
if.else.3:
  %"tmp#17##0" = icmp eq i8 %"action##0", 117
  br i1 %"tmp#17##0", label %if.then.4, label %if.else.4
if.then.4:
  %"tmp#100##0" = add i64 %"d##0", 16
  %"tmp#101##0" = inttoptr i64 %"tmp#100##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#101##0"
  %"tmp#9##0" = add i64 %"tmp#10##0", 1
  %"tmp#102##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#103##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#103##0", ptr %"tmp#102##0", i64 32, i1 0)
  %"tmp#104##0" = ptrtoint ptr %"tmp#103##0" to i64
  %"tmp#105##0" = add i64 %"tmp#104##0", 16
  %"tmp#106##0" = inttoptr i64 %"tmp#105##0" to ptr
  store i64 %"tmp#9##0", ptr %"tmp#106##0"
  %"tmp#107##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"tmp#104##0", i1 1)
  %"tmp#108##0" = insertvalue {i64, i1} undef, i64 %"tmp#107##0", 0
  %"tmp#109##0" = insertvalue {i64, i1} %"tmp#108##0", i1 1, 1
  ret {i64, i1} %"tmp#109##0"
if.else.4:
  %"tmp#16##0" = icmp eq i8 %"action##0", 100
  br i1 %"tmp#16##0", label %if.then.5, label %if.else.5
if.then.5:
  %"tmp#110##0" = add i64 %"d##0", 16
  %"tmp#111##0" = inttoptr i64 %"tmp#110##0" to ptr
  %"tmp#12##0" = load i64, ptr %"tmp#111##0"
  %"tmp#11##0" = sub i64 %"tmp#12##0", 1
  %"tmp#112##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#113##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#113##0", ptr %"tmp#112##0", i64 32, i1 0)
  %"tmp#114##0" = ptrtoint ptr %"tmp#113##0" to i64
  %"tmp#115##0" = add i64 %"tmp#114##0", 16
  %"tmp#116##0" = inttoptr i64 %"tmp#115##0" to ptr
  store i64 %"tmp#11##0", ptr %"tmp#116##0"
  %"tmp#117##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"tmp#114##0", i1 1)
  %"tmp#118##0" = insertvalue {i64, i1} undef, i64 %"tmp#117##0", 0
  %"tmp#119##0" = insertvalue {i64, i1} %"tmp#118##0", i1 1, 1
  ret {i64, i1} %"tmp#119##0"
if.else.5:
  %"tmp#120##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>"(i64 %"d##0", i1 0)
  %"tmp#121##0" = insertvalue {i64, i1} undef, i64 %"tmp#120##0", 0
  %"tmp#122##0" = insertvalue {i64, i1} %"tmp#121##0", i1 0, 1
  ret {i64, i1} %"tmp#122##0"
}

define external fastcc {i64, i1} @"drone.do_action<0>[410bae77d3]"(i64 %"d##0", i8 %"action##0") {
  %"tmp#21##0" = icmp eq i8 %"action##0", 110
  br i1 %"tmp#21##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#64##0" = add i64 %"d##0", 8
  %"tmp#65##0" = inttoptr i64 %"tmp#64##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#65##0"
  %"tmp#1##0" = sub i64 %"tmp#2##0", 1
  %"tmp#66##0" = add i64 %"d##0", 8
  %"tmp#67##0" = inttoptr i64 %"tmp#66##0" to ptr
  store i64 %"tmp#1##0", ptr %"tmp#67##0"
  %"tmp#68##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"d##0", i1 1)
  %"tmp#69##0" = insertvalue {i64, i1} undef, i64 %"tmp#68##0", 0
  %"tmp#70##0" = insertvalue {i64, i1} %"tmp#69##0", i1 1, 1
  ret {i64, i1} %"tmp#70##0"
if.else.0:
  %"tmp#20##0" = icmp eq i8 %"action##0", 115
  br i1 %"tmp#20##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#71##0" = add i64 %"d##0", 8
  %"tmp#72##0" = inttoptr i64 %"tmp#71##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#72##0"
  %"tmp#3##0" = add i64 %"tmp#4##0", 1
  %"tmp#73##0" = add i64 %"d##0", 8
  %"tmp#74##0" = inttoptr i64 %"tmp#73##0" to ptr
  store i64 %"tmp#3##0", ptr %"tmp#74##0"
  %"tmp#75##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"d##0", i1 1)
  %"tmp#76##0" = insertvalue {i64, i1} undef, i64 %"tmp#75##0", 0
  %"tmp#77##0" = insertvalue {i64, i1} %"tmp#76##0", i1 1, 1
  ret {i64, i1} %"tmp#77##0"
if.else.1:
  %"tmp#19##0" = icmp eq i8 %"action##0", 119
  br i1 %"tmp#19##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#78##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#78##0"
  %"tmp#5##0" = sub i64 %"tmp#6##0", 1
  %"tmp#79##0" = inttoptr i64 %"d##0" to ptr
  store i64 %"tmp#5##0", ptr %"tmp#79##0"
  %"tmp#80##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"d##0", i1 1)
  %"tmp#81##0" = insertvalue {i64, i1} undef, i64 %"tmp#80##0", 0
  %"tmp#82##0" = insertvalue {i64, i1} %"tmp#81##0", i1 1, 1
  ret {i64, i1} %"tmp#82##0"
if.else.2:
  %"tmp#18##0" = icmp eq i8 %"action##0", 101
  br i1 %"tmp#18##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#83##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#83##0"
  %"tmp#7##0" = add i64 %"tmp#8##0", 1
  %"tmp#84##0" = inttoptr i64 %"d##0" to ptr
  store i64 %"tmp#7##0", ptr %"tmp#84##0"
  %"tmp#85##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"d##0", i1 1)
  %"tmp#86##0" = insertvalue {i64, i1} undef, i64 %"tmp#85##0", 0
  %"tmp#87##0" = insertvalue {i64, i1} %"tmp#86##0", i1 1, 1
  ret {i64, i1} %"tmp#87##0"
if.else.3:
  %"tmp#17##0" = icmp eq i8 %"action##0", 117
  br i1 %"tmp#17##0", label %if.then.4, label %if.else.4
if.then.4:
  %"tmp#88##0" = add i64 %"d##0", 16
  %"tmp#89##0" = inttoptr i64 %"tmp#88##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#89##0"
  %"tmp#9##0" = add i64 %"tmp#10##0", 1
  %"tmp#90##0" = add i64 %"d##0", 16
  %"tmp#91##0" = inttoptr i64 %"tmp#90##0" to ptr
  store i64 %"tmp#9##0", ptr %"tmp#91##0"
  %"tmp#92##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"d##0", i1 1)
  %"tmp#93##0" = insertvalue {i64, i1} undef, i64 %"tmp#92##0", 0
  %"tmp#94##0" = insertvalue {i64, i1} %"tmp#93##0", i1 1, 1
  ret {i64, i1} %"tmp#94##0"
if.else.4:
  %"tmp#16##0" = icmp eq i8 %"action##0", 100
  br i1 %"tmp#16##0", label %if.then.5, label %if.else.5
if.then.5:
  %"tmp#95##0" = add i64 %"d##0", 16
  %"tmp#96##0" = inttoptr i64 %"tmp#95##0" to ptr
  %"tmp#12##0" = load i64, ptr %"tmp#96##0"
  %"tmp#11##0" = sub i64 %"tmp#12##0", 1
  %"tmp#97##0" = add i64 %"d##0", 16
  %"tmp#98##0" = inttoptr i64 %"tmp#97##0" to ptr
  store i64 %"tmp#11##0", ptr %"tmp#98##0"
  %"tmp#99##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"d##0", i1 1)
  %"tmp#100##0" = insertvalue {i64, i1} undef, i64 %"tmp#99##0", 0
  %"tmp#101##0" = insertvalue {i64, i1} %"tmp#100##0", i1 1, 1
  ret {i64, i1} %"tmp#101##0"
if.else.5:
  %"tmp#102##0" = tail call fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"d##0", i1 0)
  %"tmp#103##0" = insertvalue {i64, i1} undef, i64 %"tmp#102##0", 0
  %"tmp#104##0" = insertvalue {i64, i1} %"tmp#103##0", i1 0, 1
  ret {i64, i1} %"tmp#104##0"
}

define external fastcc i64 @"drone.do_action#cont#1<0>"(i64 %"d##0", i1 %"success##0") {
  br i1 %"success##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#21##0" = add i64 %"d##0", 24
  %"tmp#22##0" = inttoptr i64 %"tmp#21##0" to ptr
  %"tmp#15##0" = load i64, ptr %"tmp#22##0"
  %"tmp#14##0" = add i64 %"tmp#15##0", 1
  %"tmp#23##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#24##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#24##0", ptr %"tmp#23##0", i64 32, i1 0)
  %"tmp#25##0" = ptrtoint ptr %"tmp#24##0" to i64
  %"tmp#26##0" = add i64 %"tmp#25##0", 24
  %"tmp#27##0" = inttoptr i64 %"tmp#26##0" to ptr
  store i64 %"tmp#14##0", ptr %"tmp#27##0"
  ret i64 %"tmp#25##0"
if.else.0:
  ret i64 %"d##0"
}

define external fastcc i64 @"drone.do_action#cont#1<0>[410bae77d3]"(i64 %"d##0", i1 %"success##0") {
  br i1 %"success##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#21##0" = add i64 %"d##0", 24
  %"tmp#22##0" = inttoptr i64 %"tmp#21##0" to ptr
  %"tmp#15##0" = load i64, ptr %"tmp#22##0"
  %"tmp#14##0" = add i64 %"tmp#15##0", 1
  %"tmp#23##0" = add i64 %"d##0", 24
  %"tmp#24##0" = inttoptr i64 %"tmp#23##0" to ptr
  store i64 %"tmp#14##0", ptr %"tmp#24##0"
  ret i64 %"d##0"
if.else.0:
  ret i64 %"d##0"
}

define external fastcc i64 @"drone.drone_init<0>"() {
  %"tmp#10##0" = call ccc ptr @wybe_malloc(i32 32)
  %"tmp#5##0" = ptrtoint ptr %"tmp#10##0" to i64
  %"tmp#11##0" = inttoptr i64 %"tmp#5##0" to ptr
  store i64 0, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"tmp#5##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  store i64 0, ptr %"tmp#13##0"
  %"tmp#14##0" = add i64 %"tmp#5##0", 16
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  store i64 0, ptr %"tmp#15##0"
  %"tmp#16##0" = add i64 %"tmp#5##0", 24
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  store i64 0, ptr %"tmp#17##0"
  ret i64 %"tmp#5##0"
}

define external fastcc void @"drone.loop<0>"(i64 %"d##0", i8 %"ch##0") {
  %"tmp#0##0" = icmp ne i8 %"ch##0", 32
  %"tmp#1##0" = icmp ne i8 %"ch##0", 10
  %"tmp#7##0" = and i1 %"tmp#0##0", %"tmp#1##0"
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#6##0" = icmp eq i8 %"ch##0", 112
  br i1 %"tmp#6##0", label %if.then.1, label %if.else.1
if.then.1:
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1187)
  %"tmp#35##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#22##0" = load i64, ptr %"tmp#35##0"
  call ccc void @print_int(i64 %"tmp#22##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#6" to i64 ))
  %"tmp#36##0" = add i64 %"d##0", 8
  %"tmp#37##0" = inttoptr i64 %"tmp#36##0" to ptr
  %"tmp#25##0" = load i64, ptr %"tmp#37##0"
  call ccc void @print_int(i64 %"tmp#25##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#6" to i64 ))
  %"tmp#38##0" = add i64 %"d##0", 16
  %"tmp#39##0" = inttoptr i64 %"tmp#38##0" to ptr
  %"tmp#28##0" = load i64, ptr %"tmp#39##0"
  call ccc void @print_int(i64 %"tmp#28##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#4" to i64 ))
  %"tmp#40##0" = add i64 %"d##0", 24
  %"tmp#41##0" = inttoptr i64 %"tmp#40##0" to ptr
  %"tmp#31##0" = load i64, ptr %"tmp#41##0"
  call ccc void @print_int(i64 %"tmp#31##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"drone.loop#cont#1<0>"(i64 %"d##0")
  ret void
if.else.1:
  %"tmp#42##0" = tail call fastcc {i64, i1} @"drone.do_action<0>"(i64 %"d##0", i8 %"ch##0")
  %"d##1" = extractvalue {i64, i1}%"tmp#42##0", 0
  %"success##0" = extractvalue {i64, i1}%"tmp#42##0", 1
  %"tmp#5##0" = icmp eq i1 %"success##0", 0
  br i1 %"tmp#5##0", label %if.then.2, label %if.else.2
if.then.2:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#7" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"drone.loop#cont#1<0>"(i64 %"d##1")
  ret void
if.else.2:
  tail call fastcc void @"drone.loop#cont#1<0>"(i64 %"d##1")
  ret void
if.else.0:
  tail call fastcc void @"drone.loop#cont#1<0>"(i64 %"d##0")
  ret void
}

define external fastcc void @"drone.loop<0>[410bae77d3]"(i64 %"d##0", i8 %"ch##0") {
  %"tmp#0##0" = icmp ne i8 %"ch##0", 32
  %"tmp#1##0" = icmp ne i8 %"ch##0", 10
  %"tmp#7##0" = and i1 %"tmp#0##0", %"tmp#1##0"
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#6##0" = icmp eq i8 %"ch##0", 112
  br i1 %"tmp#6##0", label %if.then.1, label %if.else.1
if.then.1:
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1187)
  %"tmp#35##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#22##0" = load i64, ptr %"tmp#35##0"
  call ccc void @print_int(i64 %"tmp#22##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#6" to i64 ))
  %"tmp#36##0" = add i64 %"d##0", 8
  %"tmp#37##0" = inttoptr i64 %"tmp#36##0" to ptr
  %"tmp#25##0" = load i64, ptr %"tmp#37##0"
  call ccc void @print_int(i64 %"tmp#25##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#6" to i64 ))
  %"tmp#38##0" = add i64 %"d##0", 16
  %"tmp#39##0" = inttoptr i64 %"tmp#38##0" to ptr
  %"tmp#28##0" = load i64, ptr %"tmp#39##0"
  call ccc void @print_int(i64 %"tmp#28##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#4" to i64 ))
  %"tmp#40##0" = add i64 %"d##0", 24
  %"tmp#41##0" = inttoptr i64 %"tmp#40##0" to ptr
  %"tmp#31##0" = load i64, ptr %"tmp#41##0"
  call ccc void @print_int(i64 %"tmp#31##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"drone.loop#cont#1<0>[6dacb8fd25]"(i64 %"d##0")
  ret void
if.else.1:
  %"tmp#42##0" = tail call fastcc {i64, i1} @"drone.do_action<0>[410bae77d3]"(i64 %"d##0", i8 %"ch##0")
  %"d##1" = extractvalue {i64, i1}%"tmp#42##0", 0
  %"success##0" = extractvalue {i64, i1}%"tmp#42##0", 1
  %"tmp#5##0" = icmp eq i1 %"success##0", 0
  br i1 %"tmp#5##0", label %if.then.2, label %if.else.2
if.then.2:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#7" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"drone.loop#cont#1<0>[6dacb8fd25]"(i64 %"d##1")
  ret void
if.else.2:
  tail call fastcc void @"drone.loop#cont#1<0>[6dacb8fd25]"(i64 %"d##1")
  ret void
if.else.0:
  tail call fastcc void @"drone.loop#cont#1<0>[6dacb8fd25]"(i64 %"d##0")
  ret void
}

define external fastcc void @"drone.loop#cont#1<0>"(i64 %"d##0") {
  %"ch##1" = call ccc i8 @read_char()
  %"tmp#4##0" = icmp ne i8 %"ch##1", -1
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"drone.loop<0>"(i64 %"d##0", i8 %"ch##1")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"drone.loop#cont#1<0>[6dacb8fd25]"(i64 %"d##0") {
  %"ch##1" = call ccc i8 @read_char()
  %"tmp#4##0" = icmp ne i8 %"ch##1", -1
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"drone.loop<0>[410bae77d3]"(i64 %"d##0", i8 %"ch##1")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"drone.print_info<0>"(i64 %"d##0") {
  tail call fastcc void @"wybe.string.print<0>"(i64 1187)
  %"tmp#27##0" = inttoptr i64 %"d##0" to ptr
  %"tmp#0##0" = load i64, ptr %"tmp#27##0"
  call ccc void @print_int(i64 %"tmp#0##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#6" to i64 ))
  %"tmp#28##0" = add i64 %"d##0", 8
  %"tmp#29##0" = inttoptr i64 %"tmp#28##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#29##0"
  call ccc void @print_int(i64 %"tmp#1##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#6" to i64 ))
  %"tmp#30##0" = add i64 %"d##0", 16
  %"tmp#31##0" = inttoptr i64 %"tmp#30##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#31##0"
  call ccc void @print_int(i64 %"tmp#2##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#4" to i64 ))
  %"tmp#32##0" = add i64 %"d##0", 24
  %"tmp#33##0" = inttoptr i64 %"tmp#32##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#33##0"
  call ccc void @print_int(i64 %"tmp#3##0")
  call ccc void @putchar(i8 10)
  ret void
}

--------------------------------------------------
 Module drone.drone_info
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : drone.drone_info.=<0>
                    drone.drone_info.count<0>
                    drone.drone_info.count<1>
                    drone.drone_info.drone_info<0>
                    drone.drone_info.drone_info<1>
                    drone.drone_info.x<0>
                    drone.drone_info.x<1>
                    drone.drone_info.y<0>
                    drone.drone_info.y<1>
                    drone.drone_info.z<0>
                    drone.drone_info.z<1>
                    drone.drone_info.~=<0>
  imports         : use drone
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: drone.drone_info.=<0>
=(#left##0:drone.drone_info, #right##0:drone.drone_info, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#left##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#left##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#z##0:wybe.int) @drone:nn:nn
    foreign lpvm access(~#left##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#count##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#right##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#right##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#right##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#z##0:wybe.int) @drone:nn:nn
    foreign lpvm access(~#right##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#count##0:wybe.int) @drone:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#z##0:wybe.int, ~#right#z##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#count##0:wybe.int, ~#right#count##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





proc count > public {inline} (0 calls)
0: drone.drone_info.count<0>
count(#rec##0:drone.drone_info, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @drone:nn:nn
proc count > public {inline} (0 calls)
1: drone.drone_info.count<1>
count(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @drone:nn:nn


proc drone_info > public {inline} (0 calls)
0: drone.drone_info.drone_info<0>
drone_info(x##0:wybe.int, y##0:wybe.int, z##0:wybe.int, count##0:wybe.int, ?#result##0:drone.drone_info)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?#rec##0:drone.drone_info) @drone:nn:nn
    foreign lpvm mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~x##0:wybe.int) @drone:nn:nn
    foreign lpvm mutate(~#rec##1:drone.drone_info, ?#rec##2:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~y##0:wybe.int) @drone:nn:nn
    foreign lpvm mutate(~#rec##2:drone.drone_info, ?#rec##3:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~z##0:wybe.int) @drone:nn:nn
    foreign lpvm mutate(~#rec##3:drone.drone_info, ?#result##0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~count##0:wybe.int) @drone:nn:nn
proc drone_info > public {inline} (14 calls)
1: drone.drone_info.drone_info<1>
drone_info(?x##0:wybe.int, ?y##0:wybe.int, ?z##0:wybe.int, ?count##0:wybe.int, #result##0:drone.drone_info)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?x##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#result##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?y##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#result##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?z##0:wybe.int) @drone:nn:nn
    foreign lpvm access(~#result##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?count##0:wybe.int) @drone:nn:nn


proc x > public {inline} (0 calls)
0: drone.drone_info.x<0>
x(#rec##0:drone.drone_info, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @drone:nn:nn
proc x > public {inline} (0 calls)
1: drone.drone_info.x<1>
x(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @drone:nn:nn


proc y > public {inline} (0 calls)
0: drone.drone_info.y<0>
y(#rec##0:drone.drone_info, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @drone:nn:nn
proc y > public {inline} (0 calls)
1: drone.drone_info.y<1>
y(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @drone:nn:nn


proc z > public {inline} (0 calls)
0: drone.drone_info.z<0>
z(#rec##0:drone.drone_info, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @drone:nn:nn
proc z > public {inline} (0 calls)
1: drone.drone_info.z<1>
z(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @drone:nn:nn


proc ~= > public {inline} (0 calls)
0: drone.drone_info.~=<0>
~=(#left##0:drone.drone_info, #right##0:drone.drone_info, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#left##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#left##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @drone:nn:nn
    foreign lpvm access(~#left##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#right##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#right##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @drone:nn:nn
    foreign lpvm access(#right##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int) @drone:nn:nn
    foreign lpvm access(~#right##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @drone:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#7##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
    case ~tmp#11##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#12##0:wybe.bool) @int:nn:nn
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp#5##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#13##0:wybe.bool) @int:nn:nn
            case ~tmp#13##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
                foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
                foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)




  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'drone.drone_info'

source_filename = "/private!TMP!/drone.wybe"
target triple   = ???


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"drone.drone_info.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#15##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#x##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = add i64 %"#left##0", 8
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  %"#left#y##0" = load i64, ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"#left##0", 16
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  %"#left#z##0" = load i64, ptr %"tmp#19##0"
  %"tmp#20##0" = add i64 %"#left##0", 24
  %"tmp#21##0" = inttoptr i64 %"tmp#20##0" to ptr
  %"#left#count##0" = load i64, ptr %"tmp#21##0"
  %"tmp#22##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#x##0" = load i64, ptr %"tmp#22##0"
  %"tmp#23##0" = add i64 %"#right##0", 8
  %"tmp#24##0" = inttoptr i64 %"tmp#23##0" to ptr
  %"#right#y##0" = load i64, ptr %"tmp#24##0"
  %"tmp#25##0" = add i64 %"#right##0", 16
  %"tmp#26##0" = inttoptr i64 %"tmp#25##0" to ptr
  %"#right#z##0" = load i64, ptr %"tmp#26##0"
  %"tmp#27##0" = add i64 %"#right##0", 24
  %"tmp#28##0" = inttoptr i64 %"tmp#27##0" to ptr
  %"#right#count##0" = load i64, ptr %"tmp#28##0"
  %"tmp#1##0" = icmp eq i64 %"#left#x##0", %"#right#x##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = icmp eq i64 %"#left#y##0", %"#right#y##0"
  br i1 %"tmp#2##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = icmp eq i64 %"#left#z##0", %"#right#z##0"
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#29##0" = icmp eq i64 %"#left#count##0", %"#right#count##0"
  ret i1 %"tmp#29##0"
if.else.2:
  ret i1 0
if.else.1:
  ret i1 0
if.else.0:
  ret i1 0
}

define external fastcc i64 @"drone.drone_info.count<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 24
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"drone.drone_info.count<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 32, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 24
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"drone.drone_info.drone_info<0>"(i64 %"x##0", i64 %"y##0", i64 %"z##0", i64 %"count##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 32)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"x##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"y##0", ptr %"tmp#3##0"
  %"tmp#4##0" = add i64 %"#rec##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"z##0", ptr %"tmp#5##0"
  %"tmp#6##0" = add i64 %"#rec##0", 24
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  store i64 %"count##0", ptr %"tmp#7##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64, i64, i64} @"drone.drone_info.drone_info<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = add i64 %"#result##0", 16
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#6##0"
  %"tmp#8##0" = add i64 %"#result##0", 24
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#9##0"
  %"tmp#11##0" = insertvalue {i64, i64, i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#12##0" = insertvalue {i64, i64, i64, i64} %"tmp#11##0", i64 %"tmp#4##0", 1
  %"tmp#13##0" = insertvalue {i64, i64, i64, i64} %"tmp#12##0", i64 %"tmp#7##0", 2
  %"tmp#14##0" = insertvalue {i64, i64, i64, i64} %"tmp#13##0", i64 %"tmp#10##0", 3
  ret {i64, i64, i64, i64} %"tmp#14##0"
}

define external fastcc i64 @"drone.drone_info.x<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"drone.drone_info.x<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 32, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"drone.drone_info.y<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"drone.drone_info.y<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 32, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"drone.drone_info.z<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 16
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"drone.drone_info.z<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 32, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 16
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i1 @"drone.drone_info.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#14##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#14##0"
  %"tmp#15##0" = add i64 %"#left##0", 8
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#16##0"
  %"tmp#17##0" = add i64 %"#left##0", 16
  %"tmp#18##0" = inttoptr i64 %"tmp#17##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#18##0"
  %"tmp#19##0" = add i64 %"#left##0", 24
  %"tmp#20##0" = inttoptr i64 %"tmp#19##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#20##0"
  %"tmp#21##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#21##0"
  %"tmp#22##0" = add i64 %"#right##0", 8
  %"tmp#23##0" = inttoptr i64 %"tmp#22##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#23##0"
  %"tmp#24##0" = add i64 %"#right##0", 16
  %"tmp#25##0" = inttoptr i64 %"tmp#24##0" to ptr
  %"tmp#9##0" = load i64, ptr %"tmp#25##0"
  %"tmp#26##0" = add i64 %"#right##0", 24
  %"tmp#27##0" = inttoptr i64 %"tmp#26##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#27##0"
  %"tmp#11##0" = icmp eq i64 %"tmp#3##0", %"tmp#7##0"
  br i1 %"tmp#11##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#12##0" = icmp eq i64 %"tmp#4##0", %"tmp#8##0"
  br i1 %"tmp#12##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#13##0" = icmp eq i64 %"tmp#5##0", %"tmp#9##0"
  br i1 %"tmp#13##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#0##0" = icmp eq i64 %"tmp#10##0", %"tmp#6##0"
  %"tmp#28##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#28##0"
if.else.2:
  %"tmp#29##0" = xor i1 0, 1
  ret i1 %"tmp#29##0"
if.else.1:
  %"tmp#30##0" = xor i1 0, 1
  ret i1 %"tmp#30##0"
if.else.0:
  %"tmp#31##0" = xor i1 0, 1
  ret i1 %"tmp#31##0"
}

----------------------------------------------------------------------



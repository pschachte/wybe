----------------------------------------------------------------------
- build & execute without multiple specialization
----------------------------------------------------------------------
(0, 0, 0) #0
(-1, -6, 3) #100
** malloc count: 101

----------------------------------------------------------------------


----------------------------------------------------------------------
- build & execute with multiple specialization
----------------------------------------------------------------------
(0, 0, 0) #0
(-1, -6, 3) #100
** malloc count: 1

----------------------------------------------------------------------


----------------------------------------------------------------------
- final dump (with multiple specialization)
----------------------------------------------------------------------
======================================================================
AFTER BUILDING MAIN:
 Module 
  public submods  : 
  public types    : 
  public resources: 
  public procs    : 
  imports         : from drone use 
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > inline (1 calls)
0: (argc#0:wybe.int, argv#0:wybe.int, ?exit_code#1:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:wybe.int, ?exit_code#1:wybe.int)
    foreign c gc_init(0:wybe.phantom, ?io#1:wybe.phantom)
    drone.<0>(~#argc#0:wybe.int, ?_:wybe.int, ~#argv#0:wybe.int, ?_:wybe.int, 0:wybe.int, ?_:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #0

LLVM code       : None

--------------------------------------------------
 Module drone
  public submods  : 
  public types    : 
  public resources: 
  public procs    : drone.<0>
  imports         : use drone.drone_info
                    use wybe
  types           : drone_info/ is address { drone_info(x:int, y:int, z:int, count:int) @drone:2:23  }  @drone:2:1
  resources       : 
  submodules      : drone.drone_info
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#5:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(4,(drone.loop<0>,fromList [NonAliasedParamCond 0 []]))]
    drone.drone_init<0>(?tmp$0#0:drone.drone_info) #0 @drone:57:6
    foreign c read_char(?ch#0:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:98:37
    foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
    foreign llvm icmp ne(ch#0:wybe.char, ~tmp$1#0:wybe.char, ?tmp$2#0:wybe.bool) @wybe:79:38
    case ~tmp$2#0:wybe.bool of
    0:
        foreign c malloc_count(?mc#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:110:44
        foreign c print_string("** malloc count: ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:100:39
        foreign c print_int(~mc#0:wybe.int, ~#io#3:wybe.phantom, ?tmp$11#0:wybe.phantom) @wybe:88:36
        foreign c putchar('\n':wybe.char, ~tmp$11#0:wybe.phantom, ?#io#5:wybe.phantom) @wybe:86:26

    1:
        drone.loop<0>[04d1467a4d](~tmp$0#0:drone.drone_info, ~ch#0:wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #4 @drone:60:6
        foreign c malloc_count(?mc#0:wybe.int, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:110:44
        foreign c print_string("** malloc count: ":wybe.string, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:100:39
        foreign c print_int(~mc#0:wybe.int, ~#io#4:wybe.phantom, ?tmp$11#0:wybe.phantom) @wybe:88:36
        foreign c putchar('\n':wybe.char, ~tmp$11#0:wybe.phantom, ?#io#5:wybe.phantom) @wybe:86:26



do_action > (4 calls)
0: do_action(d#0:drone.drone_info, ?d#2:drone.drone_info, action#0:wybe.char, ?success#1:wybe.bool):
 AliasPairs: [(d#0,d#2)]
 InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm icmp eq(action#0:wybe.char, 'n':wybe.char, ?tmp$16#0:wybe.bool) @wybe:78:38
    case ~tmp$16#0:wybe.bool of
    0:
        foreign llvm icmp eq(action#0:wybe.char, 's':wybe.char, ?tmp$17#0:wybe.bool) @wybe:78:38
        case ~tmp$17#0:wybe.bool of
        0:
            foreign llvm icmp eq(action#0:wybe.char, 'w':wybe.char, ?tmp$18#0:wybe.bool) @wybe:78:38
            case ~tmp$18#0:wybe.bool of
            0:
                foreign llvm icmp eq(action#0:wybe.char, 'e':wybe.char, ?tmp$19#0:wybe.bool) @wybe:78:38
                case ~tmp$19#0:wybe.bool of
                0:
                    foreign llvm icmp eq(action#0:wybe.char, 'u':wybe.char, ?tmp$20#0:wybe.bool) @wybe:78:38
                    case ~tmp$20#0:wybe.bool of
                    0:
                        foreign llvm icmp eq(~action#0:wybe.char, 'd':wybe.char, ?tmp$21#0:wybe.bool) @wybe:78:38
                        case ~tmp$21#0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?success#1:wybe.bool) @drone:33:9
                            foreign llvm move(~d#0:drone.drone_info, ?d#2:drone.drone_info)

                        1:
                            foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$12#0:wybe.int)
                            foreign llvm sub(~tmp$12#0:wybe.int, 1:wybe.int, ?tmp$11#0:wybe.int) @wybe:23:34
                            foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$11#0:wybe.int)
                            foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
                            foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
                            foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
                            foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


                    1:
                        foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.int)
                        foreign llvm add(~tmp$10#0:wybe.int, 1:wybe.int, ?tmp$9#0:wybe.int) @wybe:20:34
                        foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$9#0:wybe.int)
                        foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
                        foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
                        foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
                        foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


                1:
                    foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.int)
                    foreign llvm add(~tmp$8#0:wybe.int, 1:wybe.int, ?tmp$7#0:wybe.int) @wybe:20:34
                    foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$7#0:wybe.int)
                    foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
                    foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
                    foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
                    foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


            1:
                foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
                foreign llvm sub(~tmp$6#0:wybe.int, 1:wybe.int, ?tmp$5#0:wybe.int) @wybe:23:34
                foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$5#0:wybe.int)
                foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
                foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
                foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
                foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


        1:
            foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
            foreign llvm add(~tmp$4#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.int) @wybe:20:34
            foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$3#0:wybe.int)
            foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
            foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
            foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


    1:
        foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm sub(~tmp$2#0:wybe.int, 1:wybe.int, ?tmp$1#0:wybe.int) @wybe:23:34
        foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$1#0:wybe.int)
        foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
        foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
        foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)



drone_init > (3 calls)
0: drone_init(?$#0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?tmp$5#0:drone.drone_info)
    foreign lpvm mutate(~tmp$5#0:drone.drone_info, ?tmp$6#0:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:drone.drone_info, ?tmp$7#0:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$7#0:drone.drone_info, ?tmp$8#0:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$8#0:drone.drone_info, ?$#0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)


loop > (6 calls)
0: loop(d#0:drone.drone_info, ch#0:wybe.char, io#0:wybe.phantom, ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(7,(drone.loop<0>,fromList [NonAliasedParamCond 0 [0]])),(9,(drone.do_action<0>,fromList [NonAliasedParamCond 0 [0]])),(16,(drone.loop<0>,fromList [NonAliasedParamCond 0 [0]])),(20,(drone.loop<0>,fromList [NonAliasedParamCond 0 [0]])),(24,(drone.loop<0>,fromList [NonAliasedParamCond 0 [0]])),(28,(drone.loop<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(ch#0:wybe.char, ' ':wybe.char, ?tmp$2#0:wybe.bool) @wybe:79:38
    case ~tmp$2#0:wybe.bool of
    0:
        foreign c read_char(?ch#1:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:98:37
        foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
        foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
        case ~tmp$6#0:wybe.bool of
        0:
            foreign llvm move(~io#1:wybe.phantom, ?io#3:wybe.phantom)

        1:
            drone.loop<0>(~d#0:drone.drone_info, ~ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#3:wybe.phantom) #28 @drone:53:10


    1:
        foreign llvm icmp ne(ch#0:wybe.char, '\n':wybe.char, ?tmp$3#0:wybe.bool) @wybe:79:38
        case ~tmp$3#0:wybe.bool of
        0:
            foreign c read_char(?ch#1:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:98:37
            foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
            foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
            case ~tmp$6#0:wybe.bool of
            0:
                foreign llvm move(~io#1:wybe.phantom, ?io#3:wybe.phantom)

            1:
                drone.loop<0>(~d#0:drone.drone_info, ~ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#3:wybe.phantom) #24 @drone:53:10


        1:
            foreign llvm icmp eq(ch#0:wybe.char, 'p':wybe.char, ?tmp$4#0:wybe.bool) @wybe:78:38
            case ~tmp$4#0:wybe.bool of
            0:
                drone.do_action<0>(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, ~ch#0:wybe.char, ?success#0:wybe.bool) #9 @drone:45:13
                foreign llvm icmp eq(~success#0:wybe.bool, 0:wybe.bool, ?tmp$5#0:wybe.bool) @wybe:11:38
                case ~tmp$5#0:wybe.bool of
                0:
                    foreign c read_char(?ch#1:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:98:37
                    foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
                    foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
                    case ~tmp$6#0:wybe.bool of
                    0:
                        foreign llvm move(~io#1:wybe.phantom, ?io#3:wybe.phantom)

                    1:
                        drone.loop<0>(~d#1:drone.drone_info, ~ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#3:wybe.phantom) #20 @drone:53:10


                1:
                    foreign c print_string("invalid action!":wybe.string, ~#io#0:wybe.phantom, ?tmp$17#0:wybe.phantom) @wybe:100:39
                    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:86:26
                    foreign c read_char(?ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:98:37
                    foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
                    foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
                    case ~tmp$6#0:wybe.bool of
                    0:
                        foreign llvm move(~io#2:wybe.phantom, ?io#3:wybe.phantom)

                    1:
                        drone.loop<0>(~d#1:drone.drone_info, ~ch#1:wybe.char, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #16 @drone:53:10



            1:
                drone.print_info<0>(d#0:drone.drone_info, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #3 @drone:43:14
                foreign c read_char(?ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:98:37
                foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
                foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
                case ~tmp$6#0:wybe.bool of
                0:
                    foreign llvm move(~io#2:wybe.phantom, ?io#3:wybe.phantom)

                1:
                    drone.loop<0>(~d#0:drone.drone_info, ~ch#1:wybe.char, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #7 @drone:53:10






print_info > (3 calls)
0: print_info(d#0:drone.drone_info, io#0:wybe.phantom, ?io#9:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:100:39
    foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:88:36
    foreign c print_string(", ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:100:39
    foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:88:36
    foreign c print_string(", ":wybe.string, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @wybe:100:39
    foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.int)
    foreign c print_int(~tmp$2#0:wybe.int, ~#io#5:wybe.phantom, ?#io#6:wybe.phantom) @wybe:88:36
    foreign c print_string(") #":wybe.string, ~#io#6:wybe.phantom, ?#io#7:wybe.phantom) @wybe:100:39
    foreign lpvm access(~d#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign c print_int(~tmp$3#0:wybe.int, ~#io#7:wybe.phantom, ?#io#8:wybe.phantom) @wybe:88:36
    foreign c putchar('\n':wybe.char, ~#io#8:wybe.phantom, ?#io#9:wybe.phantom) @wybe:86:26

LLVM code       : None

--------------------------------------------------
 Module drone.drone_info
  public submods  : 
  public types    : 
  public resources: 
  public procs    : drone.drone_info./=<0>
                    drone.drone_info.=<0>
                    drone.drone_info.count<0>
                    drone.drone_info.count<1>
                    drone.drone_info.drone_info<0>
                    drone.drone_info.drone_info<1>
                    drone.drone_info.x<0>
                    drone.drone_info.x<1>
                    drone.drone_info.y<0>
                    drone.drone_info.y<1>
                    drone.drone_info.z<0>
                    drone.drone_info.z<1>
  imports         : use drone
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline test (0 calls)
0: /=($left#0:drone.drone_info, $right#0:drone.drone_info, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
    foreign lpvm access(~$left#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$7#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$9#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.int)
    foreign lpvm access(~$right#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$11#0:wybe.int)
    foreign llvm icmp eq(~tmp$4#0:wybe.int, ~tmp$8#0:wybe.int, ?tmp$12#0:wybe.bool) @wybe:35:36
    case ~tmp$12#0:wybe.bool of
    0:
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~tmp$5#0:wybe.int, ~tmp$9#0:wybe.int, ?tmp$13#0:wybe.bool) @wybe:35:36
        case ~tmp$13#0:wybe.bool of
        0:
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp eq(~tmp$10#0:wybe.int, ~tmp$6#0:wybe.int, ?tmp$14#0:wybe.bool) @wybe:35:36
            case ~tmp$14#0:wybe.bool of
            0:
                foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign llvm icmp eq(~tmp$11#0:wybe.int, ~tmp$7#0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:35:36
                case ~tmp$1#0:wybe.bool of
                0:
                    foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

                1:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)






= > public inline test (13 calls)
0: =($left#0:drone.drone_info, $right#0:drone.drone_info, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$z#0:wybe.int)
    foreign lpvm access(~$left#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$count#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$y#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$z#0:wybe.int)
    foreign lpvm access(~$right#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$count#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:35:36
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?tmp$3#0:wybe.bool) @wybe:35:36
        case ~tmp$3#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp eq(~$left$z#0:wybe.int, ~$right$z#0:wybe.int, ?tmp$4#0:wybe.bool) @wybe:35:36
            case ~tmp$4#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign llvm icmp eq(~$left$count#0:wybe.int, ~$right$count#0:wybe.int, ?$$#0:wybe.bool) @wybe:35:36





count > public inline (0 calls)
0: count($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
count > public inline (0 calls)
1: count($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


drone_info > public inline (0 calls)
0: drone_info(x#0:wybe.int, y#0:wybe.int, z#0:wybe.int, count#0:wybe.int, ?$#0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?$rec#0:!drone.drone_info)
    foreign lpvm mutate(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:drone.drone_info, ?%$rec#2:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~y#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:drone.drone_info, ?%$rec#3:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~z#0:wybe.int)
    foreign lpvm mutate(~%$rec#3:drone.drone_info, ?%$#0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~count#0:wybe.int)
drone_info > public inline (8 calls)
1: drone_info(?x#0:wybe.int, ?y#0:wybe.int, ?z#0:wybe.int, ?count#0:wybe.int, $#0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access($#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?y#0:wybe.int)
    foreign lpvm access($#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?z#0:wybe.int)
    foreign lpvm access(~$#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?count#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


z > public inline (0 calls)
0: z($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
z > public inline (0 calls)
1: z($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

LLVM code       : None

======================================================================
AFTER EVERYTHING:
 Module 
  public submods  : 
  public types    : 
  public resources: 
  public procs    : 
  imports         : from drone use 
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > inline (1 calls)
0: (argc#0:wybe.int, argv#0:wybe.int, ?exit_code#1:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:wybe.int, ?exit_code#1:wybe.int)
    foreign c gc_init(0:wybe.phantom, ?io#1:wybe.phantom)
    drone.<0>(~#argc#0:wybe.int, ?_:wybe.int, ~#argv#0:wybe.int, ?_:wybe.int, 0:wybe.int, ?_:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #0

  LLVM code       :

; ModuleID = ''


 


declare external fastcc  void @"drone.<0>"(i64, i64, i64)    


declare external ccc  void @gc_init()    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i32 @main(i64  %"argc#0", i64  %"argv#0")    {
entry:
  tail call ccc  void  @gc_init()  
  tail call fastcc  void  @"drone.<0>"(i64  %"argc#0", i64  %"argv#0", i64  0)  
  ret i64 0 
}
--------------------------------------------------
 Module drone
  public submods  : 
  public types    : 
  public resources: 
  public procs    : drone.<0>
  imports         : use drone.drone_info
                    use wybe
  types           : drone_info/ is address { drone_info(x:int, y:int, z:int, count:int) @drone:2:23  }  @drone:2:1
  resources       : 
  submodules      : drone.drone_info
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#5:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(4,(drone.loop<0>,fromList [NonAliasedParamCond 0 []]))]
    drone.drone_init<0>(?tmp$0#0:drone.drone_info) #0 @drone:57:6
    foreign c read_char(?ch#0:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:98:37
    foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
    foreign llvm icmp ne(ch#0:wybe.char, ~tmp$1#0:wybe.char, ?tmp$2#0:wybe.bool) @wybe:79:38
    case ~tmp$2#0:wybe.bool of
    0:
        foreign c malloc_count(?mc#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:110:44
        foreign c print_string("** malloc count: ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:100:39
        foreign c print_int(~mc#0:wybe.int, ~#io#3:wybe.phantom, ?tmp$11#0:wybe.phantom) @wybe:88:36
        foreign c putchar('\n':wybe.char, ~tmp$11#0:wybe.phantom, ?#io#5:wybe.phantom) @wybe:86:26

    1:
        drone.loop<0>[04d1467a4d](~tmp$0#0:drone.drone_info, ~ch#0:wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #4 @drone:60:6
        foreign c malloc_count(?mc#0:wybe.int, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:110:44
        foreign c print_string("** malloc count: ":wybe.string, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:100:39
        foreign c print_int(~mc#0:wybe.int, ~#io#4:wybe.phantom, ?tmp$11#0:wybe.phantom) @wybe:88:36
        foreign c putchar('\n':wybe.char, ~tmp$11#0:wybe.phantom, ?#io#5:wybe.phantom) @wybe:86:26



do_action > (4 calls)
0: do_action(d#0:drone.drone_info, ?d#2:drone.drone_info, action#0:wybe.char, ?success#1:wybe.bool):
 AliasPairs: [(d#0,d#2)]
 InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm icmp eq(action#0:wybe.char, 'n':wybe.char, ?tmp$16#0:wybe.bool) @wybe:78:38
    case ~tmp$16#0:wybe.bool of
    0:
        foreign llvm icmp eq(action#0:wybe.char, 's':wybe.char, ?tmp$17#0:wybe.bool) @wybe:78:38
        case ~tmp$17#0:wybe.bool of
        0:
            foreign llvm icmp eq(action#0:wybe.char, 'w':wybe.char, ?tmp$18#0:wybe.bool) @wybe:78:38
            case ~tmp$18#0:wybe.bool of
            0:
                foreign llvm icmp eq(action#0:wybe.char, 'e':wybe.char, ?tmp$19#0:wybe.bool) @wybe:78:38
                case ~tmp$19#0:wybe.bool of
                0:
                    foreign llvm icmp eq(action#0:wybe.char, 'u':wybe.char, ?tmp$20#0:wybe.bool) @wybe:78:38
                    case ~tmp$20#0:wybe.bool of
                    0:
                        foreign llvm icmp eq(~action#0:wybe.char, 'd':wybe.char, ?tmp$21#0:wybe.bool) @wybe:78:38
                        case ~tmp$21#0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?success#1:wybe.bool) @drone:33:9
                            foreign llvm move(~d#0:drone.drone_info, ?d#2:drone.drone_info)

                        1:
                            foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$12#0:wybe.int)
                            foreign llvm sub(~tmp$12#0:wybe.int, 1:wybe.int, ?tmp$11#0:wybe.int) @wybe:23:34
                            foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$11#0:wybe.int)
                            foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
                            foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
                            foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
                            foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


                    1:
                        foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.int)
                        foreign llvm add(~tmp$10#0:wybe.int, 1:wybe.int, ?tmp$9#0:wybe.int) @wybe:20:34
                        foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$9#0:wybe.int)
                        foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
                        foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
                        foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
                        foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


                1:
                    foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.int)
                    foreign llvm add(~tmp$8#0:wybe.int, 1:wybe.int, ?tmp$7#0:wybe.int) @wybe:20:34
                    foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$7#0:wybe.int)
                    foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
                    foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
                    foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
                    foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


            1:
                foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
                foreign llvm sub(~tmp$6#0:wybe.int, 1:wybe.int, ?tmp$5#0:wybe.int) @wybe:23:34
                foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$5#0:wybe.int)
                foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
                foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
                foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
                foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


        1:
            foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
            foreign llvm add(~tmp$4#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.int) @wybe:20:34
            foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$3#0:wybe.int)
            foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
            foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
            foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


    1:
        foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm sub(~tmp$2#0:wybe.int, 1:wybe.int, ?tmp$1#0:wybe.int) @wybe:23:34
        foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$1#0:wybe.int)
        foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
        foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
        foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)

 [04d1467a4d] [NonAliasedParam 0] :
    foreign llvm icmp eq(action#0:wybe.char, 'n':wybe.char, ?tmp$16#0:wybe.bool) @wybe:78:38
    case ~tmp$16#0:wybe.bool of
    0:
        foreign llvm icmp eq(action#0:wybe.char, 's':wybe.char, ?tmp$17#0:wybe.bool) @wybe:78:38
        case ~tmp$17#0:wybe.bool of
        0:
            foreign llvm icmp eq(action#0:wybe.char, 'w':wybe.char, ?tmp$18#0:wybe.bool) @wybe:78:38
            case ~tmp$18#0:wybe.bool of
            0:
                foreign llvm icmp eq(action#0:wybe.char, 'e':wybe.char, ?tmp$19#0:wybe.bool) @wybe:78:38
                case ~tmp$19#0:wybe.bool of
                0:
                    foreign llvm icmp eq(action#0:wybe.char, 'u':wybe.char, ?tmp$20#0:wybe.bool) @wybe:78:38
                    case ~tmp$20#0:wybe.bool of
                    0:
                        foreign llvm icmp eq(~action#0:wybe.char, 'd':wybe.char, ?tmp$21#0:wybe.bool) @wybe:78:38
                        case ~tmp$21#0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?success#1:wybe.bool) @drone:33:9
                            foreign llvm move(~d#0:drone.drone_info, ?d#2:drone.drone_info)

                        1:
                            foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$12#0:wybe.int)
                            foreign llvm sub(~tmp$12#0:wybe.int, 1:wybe.int, ?tmp$11#0:wybe.int) @wybe:23:34
                            foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$11#0:wybe.int)
                            foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
                            foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
                            foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
                            foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


                    1:
                        foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.int)
                        foreign llvm add(~tmp$10#0:wybe.int, 1:wybe.int, ?tmp$9#0:wybe.int) @wybe:20:34
                        foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$9#0:wybe.int)
                        foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
                        foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
                        foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
                        foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


                1:
                    foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.int)
                    foreign llvm add(~tmp$8#0:wybe.int, 1:wybe.int, ?tmp$7#0:wybe.int) @wybe:20:34
                    foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$7#0:wybe.int)
                    foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
                    foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
                    foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
                    foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


            1:
                foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
                foreign llvm sub(~tmp$6#0:wybe.int, 1:wybe.int, ?tmp$5#0:wybe.int) @wybe:23:34
                foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$5#0:wybe.int)
                foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
                foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
                foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
                foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


        1:
            foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
            foreign llvm add(~tmp$4#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.int) @wybe:20:34
            foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$3#0:wybe.int)
            foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
            foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
            foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)


    1:
        foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm sub(~tmp$2#0:wybe.int, 1:wybe.int, ?tmp$1#0:wybe.int) @wybe:23:34
        foreign lpvm mutate noalias(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$1#0:wybe.int)
        foreign lpvm access(d#1:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$15#0:wybe.int)
        foreign llvm add(~tmp$15#0:wybe.int, 1:wybe.int, ?tmp$14#0:wybe.int) @wybe:20:34
        foreign lpvm mutate noalias(~%d#1:drone.drone_info, ?%d#2:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp$14#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?success#1:wybe.bool)



drone_init > (3 calls)
0: drone_init(?$#0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?tmp$5#0:drone.drone_info)
    foreign lpvm mutate(~tmp$5#0:drone.drone_info, ?tmp$6#0:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:drone.drone_info, ?tmp$7#0:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$7#0:drone.drone_info, ?tmp$8#0:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$8#0:drone.drone_info, ?$#0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)


loop > (6 calls)
0: loop(d#0:drone.drone_info, ch#0:wybe.char, io#0:wybe.phantom, ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(7,(drone.loop<0>,fromList [NonAliasedParamCond 0 [0]])),(9,(drone.do_action<0>,fromList [NonAliasedParamCond 0 [0]])),(16,(drone.loop<0>,fromList [NonAliasedParamCond 0 [0]])),(20,(drone.loop<0>,fromList [NonAliasedParamCond 0 [0]])),(24,(drone.loop<0>,fromList [NonAliasedParamCond 0 [0]])),(28,(drone.loop<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(ch#0:wybe.char, ' ':wybe.char, ?tmp$2#0:wybe.bool) @wybe:79:38
    case ~tmp$2#0:wybe.bool of
    0:
        foreign c read_char(?ch#1:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:98:37
        foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
        foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
        case ~tmp$6#0:wybe.bool of
        0:
            foreign llvm move(~io#1:wybe.phantom, ?io#3:wybe.phantom)

        1:
            drone.loop<0>(~d#0:drone.drone_info, ~ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#3:wybe.phantom) #28 @drone:53:10


    1:
        foreign llvm icmp ne(ch#0:wybe.char, '\n':wybe.char, ?tmp$3#0:wybe.bool) @wybe:79:38
        case ~tmp$3#0:wybe.bool of
        0:
            foreign c read_char(?ch#1:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:98:37
            foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
            foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
            case ~tmp$6#0:wybe.bool of
            0:
                foreign llvm move(~io#1:wybe.phantom, ?io#3:wybe.phantom)

            1:
                drone.loop<0>(~d#0:drone.drone_info, ~ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#3:wybe.phantom) #24 @drone:53:10


        1:
            foreign llvm icmp eq(ch#0:wybe.char, 'p':wybe.char, ?tmp$4#0:wybe.bool) @wybe:78:38
            case ~tmp$4#0:wybe.bool of
            0:
                drone.do_action<0>(~%d#0:drone.drone_info, ?%d#1:drone.drone_info, ~ch#0:wybe.char, ?success#0:wybe.bool) #9 @drone:45:13
                foreign llvm icmp eq(~success#0:wybe.bool, 0:wybe.bool, ?tmp$5#0:wybe.bool) @wybe:11:38
                case ~tmp$5#0:wybe.bool of
                0:
                    foreign c read_char(?ch#1:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:98:37
                    foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
                    foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
                    case ~tmp$6#0:wybe.bool of
                    0:
                        foreign llvm move(~io#1:wybe.phantom, ?io#3:wybe.phantom)

                    1:
                        drone.loop<0>(~d#1:drone.drone_info, ~ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#3:wybe.phantom) #20 @drone:53:10


                1:
                    foreign c print_string("invalid action!":wybe.string, ~#io#0:wybe.phantom, ?tmp$17#0:wybe.phantom) @wybe:100:39
                    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:86:26
                    foreign c read_char(?ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:98:37
                    foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
                    foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
                    case ~tmp$6#0:wybe.bool of
                    0:
                        foreign llvm move(~io#2:wybe.phantom, ?io#3:wybe.phantom)

                    1:
                        drone.loop<0>(~d#1:drone.drone_info, ~ch#1:wybe.char, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #16 @drone:53:10



            1:
                drone.print_info<0>(d#0:drone.drone_info, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #3 @drone:43:14
                foreign c read_char(?ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:98:37
                foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
                foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
                case ~tmp$6#0:wybe.bool of
                0:
                    foreign llvm move(~io#2:wybe.phantom, ?io#3:wybe.phantom)

                1:
                    drone.loop<0>(~d#0:drone.drone_info, ~ch#1:wybe.char, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #7 @drone:53:10




 [04d1467a4d] [NonAliasedParam 0] :
    foreign llvm icmp ne(ch#0:wybe.char, ' ':wybe.char, ?tmp$2#0:wybe.bool) @wybe:79:38
    case ~tmp$2#0:wybe.bool of
    0:
        foreign c read_char(?ch#1:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:98:37
        foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
        foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
        case ~tmp$6#0:wybe.bool of
        0:
            foreign llvm move(~io#1:wybe.phantom, ?io#3:wybe.phantom)

        1:
            drone.loop<0>[04d1467a4d](~d#0:drone.drone_info, ~ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#3:wybe.phantom) #28 @drone:53:10


    1:
        foreign llvm icmp ne(ch#0:wybe.char, '\n':wybe.char, ?tmp$3#0:wybe.bool) @wybe:79:38
        case ~tmp$3#0:wybe.bool of
        0:
            foreign c read_char(?ch#1:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:98:37
            foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
            foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
            case ~tmp$6#0:wybe.bool of
            0:
                foreign llvm move(~io#1:wybe.phantom, ?io#3:wybe.phantom)

            1:
                drone.loop<0>[04d1467a4d](~d#0:drone.drone_info, ~ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#3:wybe.phantom) #24 @drone:53:10


        1:
            foreign llvm icmp eq(ch#0:wybe.char, 'p':wybe.char, ?tmp$4#0:wybe.bool) @wybe:78:38
            case ~tmp$4#0:wybe.bool of
            0:
                drone.do_action<0>[04d1467a4d](~%d#0:drone.drone_info, ?%d#1:drone.drone_info, ~ch#0:wybe.char, ?success#0:wybe.bool) #9 @drone:45:13
                foreign llvm icmp eq(~success#0:wybe.bool, 0:wybe.bool, ?tmp$5#0:wybe.bool) @wybe:11:38
                case ~tmp$5#0:wybe.bool of
                0:
                    foreign c read_char(?ch#1:wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:98:37
                    foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
                    foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
                    case ~tmp$6#0:wybe.bool of
                    0:
                        foreign llvm move(~io#1:wybe.phantom, ?io#3:wybe.phantom)

                    1:
                        drone.loop<0>[04d1467a4d](~d#1:drone.drone_info, ~ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#3:wybe.phantom) #20 @drone:53:10


                1:
                    foreign c print_string("invalid action!":wybe.string, ~#io#0:wybe.phantom, ?tmp$17#0:wybe.phantom) @wybe:100:39
                    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:86:26
                    foreign c read_char(?ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:98:37
                    foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
                    foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
                    case ~tmp$6#0:wybe.bool of
                    0:
                        foreign llvm move(~io#2:wybe.phantom, ?io#3:wybe.phantom)

                    1:
                        drone.loop<0>[04d1467a4d](~d#1:drone.drone_info, ~ch#1:wybe.char, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #16 @drone:53:10



            1:
                drone.print_info<0>(d#0:drone.drone_info, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #3 @drone:43:14
                foreign c read_char(?ch#1:wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:98:37
                foreign lpvm cast(-1:wybe.int, ?tmp$1#0:wybe.char) @wybe:108:24
                foreign llvm icmp ne(ch#1:wybe.char, ~tmp$1#0:wybe.char, ?tmp$6#0:wybe.bool) @wybe:79:38
                case ~tmp$6#0:wybe.bool of
                0:
                    foreign llvm move(~io#2:wybe.phantom, ?io#3:wybe.phantom)

                1:
                    drone.loop<0>[04d1467a4d](~d#0:drone.drone_info, ~ch#1:wybe.char, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #7 @drone:53:10






print_info > (3 calls)
0: print_info(d#0:drone.drone_info, io#0:wybe.phantom, ?io#9:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:100:39
    foreign lpvm access(d#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:88:36
    foreign c print_string(", ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:100:39
    foreign lpvm access(d#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:88:36
    foreign c print_string(", ":wybe.string, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @wybe:100:39
    foreign lpvm access(d#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.int)
    foreign c print_int(~tmp$2#0:wybe.int, ~#io#5:wybe.phantom, ?#io#6:wybe.phantom) @wybe:88:36
    foreign c print_string(") #":wybe.string, ~#io#6:wybe.phantom, ?#io#7:wybe.phantom) @wybe:100:39
    foreign lpvm access(~d#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign c print_int(~tmp$3#0:wybe.int, ~#io#7:wybe.phantom, ?#io#8:wybe.phantom) @wybe:88:36
    foreign c putchar('\n':wybe.char, ~#io#8:wybe.phantom, ?#io#9:wybe.phantom) @wybe:86:26

  LLVM code       :

; ModuleID = 'drone'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_string(i64)    


declare external ccc  i64 @malloc_count()    


declare external ccc  i8 @read_char()    


@drone.6 =    constant [18 x i8] c"** malloc count: \00"


@drone.4 =    constant [18 x i8] c"** malloc count: \00"


@drone.252 =    constant [16 x i8] c"invalid action!\00"


@drone.272 =    constant [16 x i8] c"invalid action!\00"


@drone.303 =    constant [4 x i8] c") #\00"


@drone.297 =    constant [3 x i8] c", \00"


@drone.291 =    constant [3 x i8] c", \00"


@drone.286 =    constant [2 x i8] c"(\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"drone.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i64  @"drone.drone_init<0>"()  
  %"1$ch#0" = tail call ccc  i8  @read_char()  
  %1 = alloca i64 
  store  i64 -1, i64* %1 
  %2 = load  i64, i64* %1 
  %3 = trunc i64 %2 to i8  
  %"1$tmp$2#0" = icmp ne i8 %"1$ch#0", %3 
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"drone.loop<0>[04d1467a4d]"(i64  %"1$tmp$0#0", i8  %"1$ch#0")  
  %"2$mc#0" = tail call ccc  i64  @malloc_count()  
  %5 = ptrtoint i8* getelementptr inbounds ([18 x i8], [18 x i8]* @drone.4, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %5)  
  tail call ccc  void  @print_int(i64  %"2$mc#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  %"3$mc#0" = tail call ccc  i64  @malloc_count()  
  %7 = ptrtoint i8* getelementptr inbounds ([18 x i8], [18 x i8]* @drone.6, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %7)  
  tail call ccc  void  @print_int(i64  %"3$mc#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  {i64, i1} @"drone.do_action<0>"(i64  %"d#0", i8  %"action#0")    {
entry:
  %"1$tmp$16#0" = icmp eq i8 %"action#0", 110 
  br i1 %"1$tmp$16#0", label %if.then, label %if.else 
if.then:
  %8 = add   i64 %"d#0", 8 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %"2$tmp$1#0" = sub   i64 %11, 1 
  %12 = trunc i64 32 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i8* 
  %16 = inttoptr i64 %"d#0" to i8* 
  %17 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %15, i8*  %16, i32  %17, i32  8, i1  0)  
  %18 = add   i64 %14, 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  store  i64 %"2$tmp$1#0", i64* %20 
  %21 = add   i64 %14, 24 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %"2$tmp$14#0" = add   i64 %24, 1 
  %25 = add   i64 %14, 24 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  store  i64 %"2$tmp$14#0", i64* %27 
  %28 = insertvalue {i64, i1} undef, i64 %14, 0 
  %29 = insertvalue {i64, i1} %28, i1 1, 1 
  ret {i64, i1} %29 
if.else:
  %"3$tmp$17#0" = icmp eq i8 %"action#0", 115 
  br i1 %"3$tmp$17#0", label %if.then1, label %if.else1 
if.then1:
  %30 = add   i64 %"d#0", 8 
  %31 = inttoptr i64 %30 to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  %33 = load  i64, i64* %32 
  %"4$tmp$3#0" = add   i64 %33, 1 
  %34 = trunc i64 32 to i32  
  %35 = tail call ccc  i8*  @wybe_malloc(i32  %34)  
  %36 = ptrtoint i8* %35 to i64 
  %37 = inttoptr i64 %36 to i8* 
  %38 = inttoptr i64 %"d#0" to i8* 
  %39 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %37, i8*  %38, i32  %39, i32  8, i1  0)  
  %40 = add   i64 %36, 8 
  %41 = inttoptr i64 %40 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  store  i64 %"4$tmp$3#0", i64* %42 
  %43 = add   i64 %36, 24 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  %46 = load  i64, i64* %45 
  %"4$tmp$14#0" = add   i64 %46, 1 
  %47 = add   i64 %36, 24 
  %48 = inttoptr i64 %47 to i64* 
  %49 = getelementptr  i64, i64* %48, i64 0 
  store  i64 %"4$tmp$14#0", i64* %49 
  %50 = insertvalue {i64, i1} undef, i64 %36, 0 
  %51 = insertvalue {i64, i1} %50, i1 1, 1 
  ret {i64, i1} %51 
if.else1:
  %"5$tmp$18#0" = icmp eq i8 %"action#0", 119 
  br i1 %"5$tmp$18#0", label %if.then2, label %if.else2 
if.then2:
  %52 = inttoptr i64 %"d#0" to i64* 
  %53 = getelementptr  i64, i64* %52, i64 0 
  %54 = load  i64, i64* %53 
  %"6$tmp$5#0" = sub   i64 %54, 1 
  %55 = trunc i64 32 to i32  
  %56 = tail call ccc  i8*  @wybe_malloc(i32  %55)  
  %57 = ptrtoint i8* %56 to i64 
  %58 = inttoptr i64 %57 to i8* 
  %59 = inttoptr i64 %"d#0" to i8* 
  %60 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %58, i8*  %59, i32  %60, i32  8, i1  0)  
  %61 = inttoptr i64 %57 to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  store  i64 %"6$tmp$5#0", i64* %62 
  %63 = add   i64 %57, 24 
  %64 = inttoptr i64 %63 to i64* 
  %65 = getelementptr  i64, i64* %64, i64 0 
  %66 = load  i64, i64* %65 
  %"6$tmp$14#0" = add   i64 %66, 1 
  %67 = add   i64 %57, 24 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  store  i64 %"6$tmp$14#0", i64* %69 
  %70 = insertvalue {i64, i1} undef, i64 %57, 0 
  %71 = insertvalue {i64, i1} %70, i1 1, 1 
  ret {i64, i1} %71 
if.else2:
  %"7$tmp$19#0" = icmp eq i8 %"action#0", 101 
  br i1 %"7$tmp$19#0", label %if.then3, label %if.else3 
if.then3:
  %72 = inttoptr i64 %"d#0" to i64* 
  %73 = getelementptr  i64, i64* %72, i64 0 
  %74 = load  i64, i64* %73 
  %"8$tmp$7#0" = add   i64 %74, 1 
  %75 = trunc i64 32 to i32  
  %76 = tail call ccc  i8*  @wybe_malloc(i32  %75)  
  %77 = ptrtoint i8* %76 to i64 
  %78 = inttoptr i64 %77 to i8* 
  %79 = inttoptr i64 %"d#0" to i8* 
  %80 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %78, i8*  %79, i32  %80, i32  8, i1  0)  
  %81 = inttoptr i64 %77 to i64* 
  %82 = getelementptr  i64, i64* %81, i64 0 
  store  i64 %"8$tmp$7#0", i64* %82 
  %83 = add   i64 %77, 24 
  %84 = inttoptr i64 %83 to i64* 
  %85 = getelementptr  i64, i64* %84, i64 0 
  %86 = load  i64, i64* %85 
  %"8$tmp$14#0" = add   i64 %86, 1 
  %87 = add   i64 %77, 24 
  %88 = inttoptr i64 %87 to i64* 
  %89 = getelementptr  i64, i64* %88, i64 0 
  store  i64 %"8$tmp$14#0", i64* %89 
  %90 = insertvalue {i64, i1} undef, i64 %77, 0 
  %91 = insertvalue {i64, i1} %90, i1 1, 1 
  ret {i64, i1} %91 
if.else3:
  %"9$tmp$20#0" = icmp eq i8 %"action#0", 117 
  br i1 %"9$tmp$20#0", label %if.then4, label %if.else4 
if.then4:
  %92 = add   i64 %"d#0", 16 
  %93 = inttoptr i64 %92 to i64* 
  %94 = getelementptr  i64, i64* %93, i64 0 
  %95 = load  i64, i64* %94 
  %"10$tmp$9#0" = add   i64 %95, 1 
  %96 = trunc i64 32 to i32  
  %97 = tail call ccc  i8*  @wybe_malloc(i32  %96)  
  %98 = ptrtoint i8* %97 to i64 
  %99 = inttoptr i64 %98 to i8* 
  %100 = inttoptr i64 %"d#0" to i8* 
  %101 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %99, i8*  %100, i32  %101, i32  8, i1  0)  
  %102 = add   i64 %98, 16 
  %103 = inttoptr i64 %102 to i64* 
  %104 = getelementptr  i64, i64* %103, i64 0 
  store  i64 %"10$tmp$9#0", i64* %104 
  %105 = add   i64 %98, 24 
  %106 = inttoptr i64 %105 to i64* 
  %107 = getelementptr  i64, i64* %106, i64 0 
  %108 = load  i64, i64* %107 
  %"10$tmp$14#0" = add   i64 %108, 1 
  %109 = add   i64 %98, 24 
  %110 = inttoptr i64 %109 to i64* 
  %111 = getelementptr  i64, i64* %110, i64 0 
  store  i64 %"10$tmp$14#0", i64* %111 
  %112 = insertvalue {i64, i1} undef, i64 %98, 0 
  %113 = insertvalue {i64, i1} %112, i1 1, 1 
  ret {i64, i1} %113 
if.else4:
  %"11$tmp$21#0" = icmp eq i8 %"action#0", 100 
  br i1 %"11$tmp$21#0", label %if.then5, label %if.else5 
if.then5:
  %114 = add   i64 %"d#0", 16 
  %115 = inttoptr i64 %114 to i64* 
  %116 = getelementptr  i64, i64* %115, i64 0 
  %117 = load  i64, i64* %116 
  %"12$tmp$11#0" = sub   i64 %117, 1 
  %118 = trunc i64 32 to i32  
  %119 = tail call ccc  i8*  @wybe_malloc(i32  %118)  
  %120 = ptrtoint i8* %119 to i64 
  %121 = inttoptr i64 %120 to i8* 
  %122 = inttoptr i64 %"d#0" to i8* 
  %123 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %121, i8*  %122, i32  %123, i32  8, i1  0)  
  %124 = add   i64 %120, 16 
  %125 = inttoptr i64 %124 to i64* 
  %126 = getelementptr  i64, i64* %125, i64 0 
  store  i64 %"12$tmp$11#0", i64* %126 
  %127 = add   i64 %120, 24 
  %128 = inttoptr i64 %127 to i64* 
  %129 = getelementptr  i64, i64* %128, i64 0 
  %130 = load  i64, i64* %129 
  %"12$tmp$14#0" = add   i64 %130, 1 
  %131 = add   i64 %120, 24 
  %132 = inttoptr i64 %131 to i64* 
  %133 = getelementptr  i64, i64* %132, i64 0 
  store  i64 %"12$tmp$14#0", i64* %133 
  %134 = insertvalue {i64, i1} undef, i64 %120, 0 
  %135 = insertvalue {i64, i1} %134, i1 1, 1 
  ret {i64, i1} %135 
if.else5:
  %136 = insertvalue {i64, i1} undef, i64 %"d#0", 0 
  %137 = insertvalue {i64, i1} %136, i1 0, 1 
  ret {i64, i1} %137 
}


define external fastcc  {i64, i1} @"drone.do_action<0>[04d1467a4d]"(i64  %"d#0", i8  %"action#0")    {
entry:
  %"1$tmp$16#0" = icmp eq i8 %"action#0", 110 
  br i1 %"1$tmp$16#0", label %if.then, label %if.else 
if.then:
  %138 = add   i64 %"d#0", 8 
  %139 = inttoptr i64 %138 to i64* 
  %140 = getelementptr  i64, i64* %139, i64 0 
  %141 = load  i64, i64* %140 
  %"2$tmp$1#0" = sub   i64 %141, 1 
  %142 = add   i64 %"d#0", 8 
  %143 = inttoptr i64 %142 to i64* 
  %144 = getelementptr  i64, i64* %143, i64 0 
  store  i64 %"2$tmp$1#0", i64* %144 
  %145 = add   i64 %"d#0", 24 
  %146 = inttoptr i64 %145 to i64* 
  %147 = getelementptr  i64, i64* %146, i64 0 
  %148 = load  i64, i64* %147 
  %"2$tmp$14#0" = add   i64 %148, 1 
  %149 = add   i64 %"d#0", 24 
  %150 = inttoptr i64 %149 to i64* 
  %151 = getelementptr  i64, i64* %150, i64 0 
  store  i64 %"2$tmp$14#0", i64* %151 
  %152 = insertvalue {i64, i1} undef, i64 %"d#0", 0 
  %153 = insertvalue {i64, i1} %152, i1 1, 1 
  ret {i64, i1} %153 
if.else:
  %"3$tmp$17#0" = icmp eq i8 %"action#0", 115 
  br i1 %"3$tmp$17#0", label %if.then1, label %if.else1 
if.then1:
  %154 = add   i64 %"d#0", 8 
  %155 = inttoptr i64 %154 to i64* 
  %156 = getelementptr  i64, i64* %155, i64 0 
  %157 = load  i64, i64* %156 
  %"4$tmp$3#0" = add   i64 %157, 1 
  %158 = add   i64 %"d#0", 8 
  %159 = inttoptr i64 %158 to i64* 
  %160 = getelementptr  i64, i64* %159, i64 0 
  store  i64 %"4$tmp$3#0", i64* %160 
  %161 = add   i64 %"d#0", 24 
  %162 = inttoptr i64 %161 to i64* 
  %163 = getelementptr  i64, i64* %162, i64 0 
  %164 = load  i64, i64* %163 
  %"4$tmp$14#0" = add   i64 %164, 1 
  %165 = add   i64 %"d#0", 24 
  %166 = inttoptr i64 %165 to i64* 
  %167 = getelementptr  i64, i64* %166, i64 0 
  store  i64 %"4$tmp$14#0", i64* %167 
  %168 = insertvalue {i64, i1} undef, i64 %"d#0", 0 
  %169 = insertvalue {i64, i1} %168, i1 1, 1 
  ret {i64, i1} %169 
if.else1:
  %"5$tmp$18#0" = icmp eq i8 %"action#0", 119 
  br i1 %"5$tmp$18#0", label %if.then2, label %if.else2 
if.then2:
  %170 = inttoptr i64 %"d#0" to i64* 
  %171 = getelementptr  i64, i64* %170, i64 0 
  %172 = load  i64, i64* %171 
  %"6$tmp$5#0" = sub   i64 %172, 1 
  %173 = inttoptr i64 %"d#0" to i64* 
  %174 = getelementptr  i64, i64* %173, i64 0 
  store  i64 %"6$tmp$5#0", i64* %174 
  %175 = add   i64 %"d#0", 24 
  %176 = inttoptr i64 %175 to i64* 
  %177 = getelementptr  i64, i64* %176, i64 0 
  %178 = load  i64, i64* %177 
  %"6$tmp$14#0" = add   i64 %178, 1 
  %179 = add   i64 %"d#0", 24 
  %180 = inttoptr i64 %179 to i64* 
  %181 = getelementptr  i64, i64* %180, i64 0 
  store  i64 %"6$tmp$14#0", i64* %181 
  %182 = insertvalue {i64, i1} undef, i64 %"d#0", 0 
  %183 = insertvalue {i64, i1} %182, i1 1, 1 
  ret {i64, i1} %183 
if.else2:
  %"7$tmp$19#0" = icmp eq i8 %"action#0", 101 
  br i1 %"7$tmp$19#0", label %if.then3, label %if.else3 
if.then3:
  %184 = inttoptr i64 %"d#0" to i64* 
  %185 = getelementptr  i64, i64* %184, i64 0 
  %186 = load  i64, i64* %185 
  %"8$tmp$7#0" = add   i64 %186, 1 
  %187 = inttoptr i64 %"d#0" to i64* 
  %188 = getelementptr  i64, i64* %187, i64 0 
  store  i64 %"8$tmp$7#0", i64* %188 
  %189 = add   i64 %"d#0", 24 
  %190 = inttoptr i64 %189 to i64* 
  %191 = getelementptr  i64, i64* %190, i64 0 
  %192 = load  i64, i64* %191 
  %"8$tmp$14#0" = add   i64 %192, 1 
  %193 = add   i64 %"d#0", 24 
  %194 = inttoptr i64 %193 to i64* 
  %195 = getelementptr  i64, i64* %194, i64 0 
  store  i64 %"8$tmp$14#0", i64* %195 
  %196 = insertvalue {i64, i1} undef, i64 %"d#0", 0 
  %197 = insertvalue {i64, i1} %196, i1 1, 1 
  ret {i64, i1} %197 
if.else3:
  %"9$tmp$20#0" = icmp eq i8 %"action#0", 117 
  br i1 %"9$tmp$20#0", label %if.then4, label %if.else4 
if.then4:
  %198 = add   i64 %"d#0", 16 
  %199 = inttoptr i64 %198 to i64* 
  %200 = getelementptr  i64, i64* %199, i64 0 
  %201 = load  i64, i64* %200 
  %"10$tmp$9#0" = add   i64 %201, 1 
  %202 = add   i64 %"d#0", 16 
  %203 = inttoptr i64 %202 to i64* 
  %204 = getelementptr  i64, i64* %203, i64 0 
  store  i64 %"10$tmp$9#0", i64* %204 
  %205 = add   i64 %"d#0", 24 
  %206 = inttoptr i64 %205 to i64* 
  %207 = getelementptr  i64, i64* %206, i64 0 
  %208 = load  i64, i64* %207 
  %"10$tmp$14#0" = add   i64 %208, 1 
  %209 = add   i64 %"d#0", 24 
  %210 = inttoptr i64 %209 to i64* 
  %211 = getelementptr  i64, i64* %210, i64 0 
  store  i64 %"10$tmp$14#0", i64* %211 
  %212 = insertvalue {i64, i1} undef, i64 %"d#0", 0 
  %213 = insertvalue {i64, i1} %212, i1 1, 1 
  ret {i64, i1} %213 
if.else4:
  %"11$tmp$21#0" = icmp eq i8 %"action#0", 100 
  br i1 %"11$tmp$21#0", label %if.then5, label %if.else5 
if.then5:
  %214 = add   i64 %"d#0", 16 
  %215 = inttoptr i64 %214 to i64* 
  %216 = getelementptr  i64, i64* %215, i64 0 
  %217 = load  i64, i64* %216 
  %"12$tmp$11#0" = sub   i64 %217, 1 
  %218 = add   i64 %"d#0", 16 
  %219 = inttoptr i64 %218 to i64* 
  %220 = getelementptr  i64, i64* %219, i64 0 
  store  i64 %"12$tmp$11#0", i64* %220 
  %221 = add   i64 %"d#0", 24 
  %222 = inttoptr i64 %221 to i64* 
  %223 = getelementptr  i64, i64* %222, i64 0 
  %224 = load  i64, i64* %223 
  %"12$tmp$14#0" = add   i64 %224, 1 
  %225 = add   i64 %"d#0", 24 
  %226 = inttoptr i64 %225 to i64* 
  %227 = getelementptr  i64, i64* %226, i64 0 
  store  i64 %"12$tmp$14#0", i64* %227 
  %228 = insertvalue {i64, i1} undef, i64 %"d#0", 0 
  %229 = insertvalue {i64, i1} %228, i1 1, 1 
  ret {i64, i1} %229 
if.else5:
  %230 = insertvalue {i64, i1} undef, i64 %"d#0", 0 
  %231 = insertvalue {i64, i1} %230, i1 0, 1 
  ret {i64, i1} %231 
}


define external fastcc  i64 @"drone.drone_init<0>"()    {
entry:
  %232 = trunc i64 32 to i32  
  %233 = tail call ccc  i8*  @wybe_malloc(i32  %232)  
  %234 = ptrtoint i8* %233 to i64 
  %235 = inttoptr i64 %234 to i64* 
  %236 = getelementptr  i64, i64* %235, i64 0 
  store  i64 0, i64* %236 
  %237 = add   i64 %234, 8 
  %238 = inttoptr i64 %237 to i64* 
  %239 = getelementptr  i64, i64* %238, i64 0 
  store  i64 0, i64* %239 
  %240 = add   i64 %234, 16 
  %241 = inttoptr i64 %240 to i64* 
  %242 = getelementptr  i64, i64* %241, i64 0 
  store  i64 0, i64* %242 
  %243 = add   i64 %234, 24 
  %244 = inttoptr i64 %243 to i64* 
  %245 = getelementptr  i64, i64* %244, i64 0 
  store  i64 0, i64* %245 
  ret i64 %234 
}


define external fastcc  void @"drone.loop<0>"(i64  %"d#0", i8  %"ch#0")    {
entry:
  %"1$tmp$2#0" = icmp ne i8 %"ch#0", 32 
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$3#0" = icmp ne i8 %"ch#0", 10 
  br i1 %"2$tmp$3#0", label %if.then1, label %if.else1 
if.else:
  %"3$ch#1" = tail call ccc  i8  @read_char()  
  %263 = alloca i64 
  store  i64 -1, i64* %263 
  %264 = load  i64, i64* %263 
  %265 = trunc i64 %264 to i8  
  %"3$tmp$6#0" = icmp ne i8 %"3$ch#1", %265 
  br i1 %"3$tmp$6#0", label %if.then8, label %if.else8 
if.then1:
  %"4$tmp$4#0" = icmp eq i8 %"ch#0", 112 
  br i1 %"4$tmp$4#0", label %if.then2, label %if.else2 
if.else1:
  %"5$ch#1" = tail call ccc  i8  @read_char()  
  %260 = alloca i64 
  store  i64 -1, i64* %260 
  %261 = load  i64, i64* %260 
  %262 = trunc i64 %261 to i8  
  %"5$tmp$6#0" = icmp ne i8 %"5$ch#1", %262 
  br i1 %"5$tmp$6#0", label %if.then7, label %if.else7 
if.then2:
  tail call fastcc  void  @"drone.print_info<0>"(i64  %"d#0")  
  %"6$ch#1" = tail call ccc  i8  @read_char()  
  %246 = alloca i64 
  store  i64 -1, i64* %246 
  %247 = load  i64, i64* %246 
  %248 = trunc i64 %247 to i8  
  %"6$tmp$6#0" = icmp ne i8 %"6$ch#1", %248 
  br i1 %"6$tmp$6#0", label %if.then3, label %if.else3 
if.else2:
  %249 = tail call fastcc  {i64, i1}  @"drone.do_action<0>"(i64  %"d#0", i8  %"ch#0")  
  %250 = extractvalue {i64, i1} %249, 0 
  %251 = extractvalue {i64, i1} %249, 1 
  %"7$tmp$5#0" = icmp eq i1 %251, 0 
  br i1 %"7$tmp$5#0", label %if.then4, label %if.else4 
if.then3:
  tail call fastcc  void  @"drone.loop<0>"(i64  %"d#0", i8  %"6$ch#1")  
  ret void 
if.else3:
  ret void 
if.then4:
  %253 = ptrtoint i8* getelementptr inbounds ([16 x i8], [16 x i8]* @drone.252, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %253)  
  tail call ccc  void  @putchar(i8  10)  
  %"10$ch#1" = tail call ccc  i8  @read_char()  
  %254 = alloca i64 
  store  i64 -1, i64* %254 
  %255 = load  i64, i64* %254 
  %256 = trunc i64 %255 to i8  
  %"10$tmp$6#0" = icmp ne i8 %"10$ch#1", %256 
  br i1 %"10$tmp$6#0", label %if.then5, label %if.else5 
if.else4:
  %"11$ch#1" = tail call ccc  i8  @read_char()  
  %257 = alloca i64 
  store  i64 -1, i64* %257 
  %258 = load  i64, i64* %257 
  %259 = trunc i64 %258 to i8  
  %"11$tmp$6#0" = icmp ne i8 %"11$ch#1", %259 
  br i1 %"11$tmp$6#0", label %if.then6, label %if.else6 
if.then5:
  tail call fastcc  void  @"drone.loop<0>"(i64  %250, i8  %"10$ch#1")  
  ret void 
if.else5:
  ret void 
if.then6:
  tail call fastcc  void  @"drone.loop<0>"(i64  %250, i8  %"11$ch#1")  
  ret void 
if.else6:
  ret void 
if.then7:
  tail call fastcc  void  @"drone.loop<0>"(i64  %"d#0", i8  %"5$ch#1")  
  ret void 
if.else7:
  ret void 
if.then8:
  tail call fastcc  void  @"drone.loop<0>"(i64  %"d#0", i8  %"3$ch#1")  
  ret void 
if.else8:
  ret void 
}


define external fastcc  void @"drone.loop<0>[04d1467a4d]"(i64  %"d#0", i8  %"ch#0")    {
entry:
  %"1$tmp$2#0" = icmp ne i8 %"ch#0", 32 
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$3#0" = icmp ne i8 %"ch#0", 10 
  br i1 %"2$tmp$3#0", label %if.then1, label %if.else1 
if.else:
  %"3$ch#1" = tail call ccc  i8  @read_char()  
  %283 = alloca i64 
  store  i64 -1, i64* %283 
  %284 = load  i64, i64* %283 
  %285 = trunc i64 %284 to i8  
  %"3$tmp$6#0" = icmp ne i8 %"3$ch#1", %285 
  br i1 %"3$tmp$6#0", label %if.then8, label %if.else8 
if.then1:
  %"4$tmp$4#0" = icmp eq i8 %"ch#0", 112 
  br i1 %"4$tmp$4#0", label %if.then2, label %if.else2 
if.else1:
  %"5$ch#1" = tail call ccc  i8  @read_char()  
  %280 = alloca i64 
  store  i64 -1, i64* %280 
  %281 = load  i64, i64* %280 
  %282 = trunc i64 %281 to i8  
  %"5$tmp$6#0" = icmp ne i8 %"5$ch#1", %282 
  br i1 %"5$tmp$6#0", label %if.then7, label %if.else7 
if.then2:
  tail call fastcc  void  @"drone.print_info<0>"(i64  %"d#0")  
  %"6$ch#1" = tail call ccc  i8  @read_char()  
  %266 = alloca i64 
  store  i64 -1, i64* %266 
  %267 = load  i64, i64* %266 
  %268 = trunc i64 %267 to i8  
  %"6$tmp$6#0" = icmp ne i8 %"6$ch#1", %268 
  br i1 %"6$tmp$6#0", label %if.then3, label %if.else3 
if.else2:
  %269 = tail call fastcc  {i64, i1}  @"drone.do_action<0>[04d1467a4d]"(i64  %"d#0", i8  %"ch#0")  
  %270 = extractvalue {i64, i1} %269, 0 
  %271 = extractvalue {i64, i1} %269, 1 
  %"7$tmp$5#0" = icmp eq i1 %271, 0 
  br i1 %"7$tmp$5#0", label %if.then4, label %if.else4 
if.then3:
  tail call fastcc  void  @"drone.loop<0>[04d1467a4d]"(i64  %"d#0", i8  %"6$ch#1")  
  ret void 
if.else3:
  ret void 
if.then4:
  %273 = ptrtoint i8* getelementptr inbounds ([16 x i8], [16 x i8]* @drone.272, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %273)  
  tail call ccc  void  @putchar(i8  10)  
  %"10$ch#1" = tail call ccc  i8  @read_char()  
  %274 = alloca i64 
  store  i64 -1, i64* %274 
  %275 = load  i64, i64* %274 
  %276 = trunc i64 %275 to i8  
  %"10$tmp$6#0" = icmp ne i8 %"10$ch#1", %276 
  br i1 %"10$tmp$6#0", label %if.then5, label %if.else5 
if.else4:
  %"11$ch#1" = tail call ccc  i8  @read_char()  
  %277 = alloca i64 
  store  i64 -1, i64* %277 
  %278 = load  i64, i64* %277 
  %279 = trunc i64 %278 to i8  
  %"11$tmp$6#0" = icmp ne i8 %"11$ch#1", %279 
  br i1 %"11$tmp$6#0", label %if.then6, label %if.else6 
if.then5:
  tail call fastcc  void  @"drone.loop<0>[04d1467a4d]"(i64  %270, i8  %"10$ch#1")  
  ret void 
if.else5:
  ret void 
if.then6:
  tail call fastcc  void  @"drone.loop<0>[04d1467a4d]"(i64  %270, i8  %"11$ch#1")  
  ret void 
if.else6:
  ret void 
if.then7:
  tail call fastcc  void  @"drone.loop<0>[04d1467a4d]"(i64  %"d#0", i8  %"5$ch#1")  
  ret void 
if.else7:
  ret void 
if.then8:
  tail call fastcc  void  @"drone.loop<0>[04d1467a4d]"(i64  %"d#0", i8  %"3$ch#1")  
  ret void 
if.else8:
  ret void 
}


define external fastcc  void @"drone.print_info<0>"(i64  %"d#0")    {
entry:
  %287 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @drone.286, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %287)  
  %288 = inttoptr i64 %"d#0" to i64* 
  %289 = getelementptr  i64, i64* %288, i64 0 
  %290 = load  i64, i64* %289 
  tail call ccc  void  @print_int(i64  %290)  
  %292 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @drone.291, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %292)  
  %293 = add   i64 %"d#0", 8 
  %294 = inttoptr i64 %293 to i64* 
  %295 = getelementptr  i64, i64* %294, i64 0 
  %296 = load  i64, i64* %295 
  tail call ccc  void  @print_int(i64  %296)  
  %298 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @drone.297, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %298)  
  %299 = add   i64 %"d#0", 16 
  %300 = inttoptr i64 %299 to i64* 
  %301 = getelementptr  i64, i64* %300, i64 0 
  %302 = load  i64, i64* %301 
  tail call ccc  void  @print_int(i64  %302)  
  %304 = ptrtoint i8* getelementptr inbounds ([4 x i8], [4 x i8]* @drone.303, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %304)  
  %305 = add   i64 %"d#0", 24 
  %306 = inttoptr i64 %305 to i64* 
  %307 = getelementptr  i64, i64* %306, i64 0 
  %308 = load  i64, i64* %307 
  tail call ccc  void  @print_int(i64  %308)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module drone.drone_info
  public submods  : 
  public types    : 
  public resources: 
  public procs    : drone.drone_info./=<0>
                    drone.drone_info.=<0>
                    drone.drone_info.count<0>
                    drone.drone_info.count<1>
                    drone.drone_info.drone_info<0>
                    drone.drone_info.drone_info<1>
                    drone.drone_info.x<0>
                    drone.drone_info.x<1>
                    drone.drone_info.y<0>
                    drone.drone_info.y<1>
                    drone.drone_info.z<0>
                    drone.drone_info.z<1>
  imports         : use drone
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline test (0 calls)
0: /=($left#0:drone.drone_info, $right#0:drone.drone_info, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
    foreign lpvm access(~$left#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$7#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$9#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.int)
    foreign lpvm access(~$right#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$11#0:wybe.int)
    foreign llvm icmp eq(~tmp$4#0:wybe.int, ~tmp$8#0:wybe.int, ?tmp$12#0:wybe.bool) @wybe:35:36
    case ~tmp$12#0:wybe.bool of
    0:
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~tmp$5#0:wybe.int, ~tmp$9#0:wybe.int, ?tmp$13#0:wybe.bool) @wybe:35:36
        case ~tmp$13#0:wybe.bool of
        0:
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp eq(~tmp$10#0:wybe.int, ~tmp$6#0:wybe.int, ?tmp$14#0:wybe.bool) @wybe:35:36
            case ~tmp$14#0:wybe.bool of
            0:
                foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign llvm icmp eq(~tmp$11#0:wybe.int, ~tmp$7#0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:35:36
                case ~tmp$1#0:wybe.bool of
                0:
                    foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

                1:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)






= > public inline test (13 calls)
0: =($left#0:drone.drone_info, $right#0:drone.drone_info, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($left#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$z#0:wybe.int)
    foreign lpvm access(~$left#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$count#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$y#0:wybe.int)
    foreign lpvm access($right#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$z#0:wybe.int)
    foreign lpvm access(~$right#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$count#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:35:36
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?tmp$3#0:wybe.bool) @wybe:35:36
        case ~tmp$3#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp eq(~$left$z#0:wybe.int, ~$right$z#0:wybe.int, ?tmp$4#0:wybe.bool) @wybe:35:36
            case ~tmp$4#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign llvm icmp eq(~$left$count#0:wybe.int, ~$right$count#0:wybe.int, ?$$#0:wybe.bool) @wybe:35:36





count > public inline (0 calls)
0: count($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
count > public inline (0 calls)
1: count($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


drone_info > public inline (0 calls)
0: drone_info(x#0:wybe.int, y#0:wybe.int, z#0:wybe.int, count#0:wybe.int, ?$#0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?$rec#0:!drone.drone_info)
    foreign lpvm mutate(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:drone.drone_info, ?%$rec#2:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~y#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:drone.drone_info, ?%$rec#3:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~z#0:wybe.int)
    foreign lpvm mutate(~%$rec#3:drone.drone_info, ?%$#0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~count#0:wybe.int)
drone_info > public inline (8 calls)
1: drone_info(?x#0:wybe.int, ?y#0:wybe.int, ?z#0:wybe.int, ?count#0:wybe.int, $#0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access($#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?y#0:wybe.int)
    foreign lpvm access($#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?z#0:wybe.int)
    foreign lpvm access(~$#0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?count#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


z > public inline (0 calls)
0: z($rec#0:drone.drone_info, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
z > public inline (0 calls)
1: z($rec#0:drone.drone_info, ?$rec#1:drone.drone_info, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:drone.drone_info, ?%$rec#1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'drone.drone_info'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"drone.drone_info./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"$left#0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"$left#0", 24 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = inttoptr i64 %"$right#0" to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %19 = add   i64 %"$right#0", 8 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %23 = add   i64 %"$right#0", 16 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = add   i64 %"$right#0", 24 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %"1$tmp$12#0" = icmp eq i64 %3, %18 
  br i1 %"1$tmp$12#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$13#0" = icmp eq i64 %7, %22 
  br i1 %"2$tmp$13#0", label %if.then1, label %if.else1 
if.else:
  ret i1 1 
if.then1:
  %"4$tmp$14#0" = icmp eq i64 %26, %11 
  br i1 %"4$tmp$14#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 1 
if.then2:
  %"6$tmp$1#0" = icmp eq i64 %30, %15 
  br i1 %"6$tmp$1#0", label %if.then3, label %if.else3 
if.else2:
  ret i1 1 
if.then3:
  ret i1 0 
if.else3:
  ret i1 1 
}


define external fastcc  i1 @"drone.drone_info.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %31 = inttoptr i64 %"$left#0" to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  %33 = load  i64, i64* %32 
  %34 = add   i64 %"$left#0", 8 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  %37 = load  i64, i64* %36 
  %38 = add   i64 %"$left#0", 16 
  %39 = inttoptr i64 %38 to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  %41 = load  i64, i64* %40 
  %42 = add   i64 %"$left#0", 24 
  %43 = inttoptr i64 %42 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  %45 = load  i64, i64* %44 
  %46 = inttoptr i64 %"$right#0" to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  %48 = load  i64, i64* %47 
  %49 = add   i64 %"$right#0", 8 
  %50 = inttoptr i64 %49 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  %52 = load  i64, i64* %51 
  %53 = add   i64 %"$right#0", 16 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  %56 = load  i64, i64* %55 
  %57 = add   i64 %"$right#0", 24 
  %58 = inttoptr i64 %57 to i64* 
  %59 = getelementptr  i64, i64* %58, i64 0 
  %60 = load  i64, i64* %59 
  %"1$tmp$2#0" = icmp eq i64 %33, %48 
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$3#0" = icmp eq i64 %37, %52 
  br i1 %"2$tmp$3#0", label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %"4$tmp$4#0" = icmp eq i64 %41, %56 
  br i1 %"4$tmp$4#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6$$$#0" = icmp eq i64 %45, %60 
  ret i1 %"6$$$#0" 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"drone.drone_info.count<0>"(i64  %"$rec#0")    {
entry:
  %61 = add   i64 %"$rec#0", 24 
  %62 = inttoptr i64 %61 to i64* 
  %63 = getelementptr  i64, i64* %62, i64 0 
  %64 = load  i64, i64* %63 
  ret i64 %64 
}


define external fastcc  i64 @"drone.drone_info.count<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %65 = trunc i64 32 to i32  
  %66 = tail call ccc  i8*  @wybe_malloc(i32  %65)  
  %67 = ptrtoint i8* %66 to i64 
  %68 = inttoptr i64 %67 to i8* 
  %69 = inttoptr i64 %"$rec#0" to i8* 
  %70 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %68, i8*  %69, i32  %70, i32  8, i1  0)  
  %71 = add   i64 %67, 24 
  %72 = inttoptr i64 %71 to i64* 
  %73 = getelementptr  i64, i64* %72, i64 0 
  store  i64 %"$field#0", i64* %73 
  ret i64 %67 
}


define external fastcc  i64 @"drone.drone_info.drone_info<0>"(i64  %"x#0", i64  %"y#0", i64  %"z#0", i64  %"count#0")    {
entry:
  %74 = trunc i64 32 to i32  
  %75 = tail call ccc  i8*  @wybe_malloc(i32  %74)  
  %76 = ptrtoint i8* %75 to i64 
  %77 = inttoptr i64 %76 to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  store  i64 %"x#0", i64* %78 
  %79 = add   i64 %76, 8 
  %80 = inttoptr i64 %79 to i64* 
  %81 = getelementptr  i64, i64* %80, i64 0 
  store  i64 %"y#0", i64* %81 
  %82 = add   i64 %76, 16 
  %83 = inttoptr i64 %82 to i64* 
  %84 = getelementptr  i64, i64* %83, i64 0 
  store  i64 %"z#0", i64* %84 
  %85 = add   i64 %76, 24 
  %86 = inttoptr i64 %85 to i64* 
  %87 = getelementptr  i64, i64* %86, i64 0 
  store  i64 %"count#0", i64* %87 
  ret i64 %76 
}


define external fastcc  {i64, i64, i64, i64} @"drone.drone_info.drone_info<1>"(i64  %"$#0")    {
entry:
  %88 = inttoptr i64 %"$#0" to i64* 
  %89 = getelementptr  i64, i64* %88, i64 0 
  %90 = load  i64, i64* %89 
  %91 = add   i64 %"$#0", 8 
  %92 = inttoptr i64 %91 to i64* 
  %93 = getelementptr  i64, i64* %92, i64 0 
  %94 = load  i64, i64* %93 
  %95 = add   i64 %"$#0", 16 
  %96 = inttoptr i64 %95 to i64* 
  %97 = getelementptr  i64, i64* %96, i64 0 
  %98 = load  i64, i64* %97 
  %99 = add   i64 %"$#0", 24 
  %100 = inttoptr i64 %99 to i64* 
  %101 = getelementptr  i64, i64* %100, i64 0 
  %102 = load  i64, i64* %101 
  %103 = insertvalue {i64, i64, i64, i64} undef, i64 %90, 0 
  %104 = insertvalue {i64, i64, i64, i64} %103, i64 %94, 1 
  %105 = insertvalue {i64, i64, i64, i64} %104, i64 %98, 2 
  %106 = insertvalue {i64, i64, i64, i64} %105, i64 %102, 3 
  ret {i64, i64, i64, i64} %106 
}


define external fastcc  i64 @"drone.drone_info.x<0>"(i64  %"$rec#0")    {
entry:
  %107 = inttoptr i64 %"$rec#0" to i64* 
  %108 = getelementptr  i64, i64* %107, i64 0 
  %109 = load  i64, i64* %108 
  ret i64 %109 
}


define external fastcc  i64 @"drone.drone_info.x<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %110 = trunc i64 32 to i32  
  %111 = tail call ccc  i8*  @wybe_malloc(i32  %110)  
  %112 = ptrtoint i8* %111 to i64 
  %113 = inttoptr i64 %112 to i8* 
  %114 = inttoptr i64 %"$rec#0" to i8* 
  %115 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %113, i8*  %114, i32  %115, i32  8, i1  0)  
  %116 = inttoptr i64 %112 to i64* 
  %117 = getelementptr  i64, i64* %116, i64 0 
  store  i64 %"$field#0", i64* %117 
  ret i64 %112 
}


define external fastcc  i64 @"drone.drone_info.y<0>"(i64  %"$rec#0")    {
entry:
  %118 = add   i64 %"$rec#0", 8 
  %119 = inttoptr i64 %118 to i64* 
  %120 = getelementptr  i64, i64* %119, i64 0 
  %121 = load  i64, i64* %120 
  ret i64 %121 
}


define external fastcc  i64 @"drone.drone_info.y<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %122 = trunc i64 32 to i32  
  %123 = tail call ccc  i8*  @wybe_malloc(i32  %122)  
  %124 = ptrtoint i8* %123 to i64 
  %125 = inttoptr i64 %124 to i8* 
  %126 = inttoptr i64 %"$rec#0" to i8* 
  %127 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %125, i8*  %126, i32  %127, i32  8, i1  0)  
  %128 = add   i64 %124, 8 
  %129 = inttoptr i64 %128 to i64* 
  %130 = getelementptr  i64, i64* %129, i64 0 
  store  i64 %"$field#0", i64* %130 
  ret i64 %124 
}


define external fastcc  i64 @"drone.drone_info.z<0>"(i64  %"$rec#0")    {
entry:
  %131 = add   i64 %"$rec#0", 16 
  %132 = inttoptr i64 %131 to i64* 
  %133 = getelementptr  i64, i64* %132, i64 0 
  %134 = load  i64, i64* %133 
  ret i64 %134 
}


define external fastcc  i64 @"drone.drone_info.z<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %135 = trunc i64 32 to i32  
  %136 = tail call ccc  i8*  @wybe_malloc(i32  %135)  
  %137 = ptrtoint i8* %136 to i64 
  %138 = inttoptr i64 %137 to i8* 
  %139 = inttoptr i64 %"$rec#0" to i8* 
  %140 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %138, i8*  %139, i32  %140, i32  8, i1  0)  
  %141 = add   i64 %137, 16 
  %142 = inttoptr i64 %141 to i64* 
  %143 = getelementptr  i64, i64* %142, i64 0 
  store  i64 %"$field#0", i64* %143 
  ret i64 %137 
}

----------------------------------------------------------------------



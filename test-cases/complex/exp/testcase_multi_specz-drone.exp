----------------------------------------------------------------------
- build & execute without multiple specialization
----------------------------------------------------------------------
(0, 0, 0) #0
(-1, -6, 3) #100
** malloc count: 203

----------------------------------------------------------------------


----------------------------------------------------------------------
- build & execute with multiple specialization
----------------------------------------------------------------------
(0, 0, 0) #0
(-1, -6, 3) #100
** malloc count: 3

----------------------------------------------------------------------


----------------------------------------------------------------------
- final dump (with multiple specialization)
----------------------------------------------------------------------
======================================================================
AFTER BUILDING MAIN:
 Module 
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    use drone
                    use wybe
                    use wybe.array
                    use wybe.bool
                    use wybe.c_string
                    use wybe.char
                    use wybe.comparison
                    use wybe.control
                    use wybe.count
                    use wybe.float
                    use wybe.int
                    use wybe.io
                    use wybe.list
                    use wybe.machine_word
                    use wybe.memory_management
                    use wybe.phantom
                    use wybe.range
                    use wybe.string
  resources       : 
  procs           : 

*main* > {terminal,inline,impure} (0 calls)
0: .<0>
(argc##0:wybe.int, argv##0:wybe.array.raw_array(wybe.c_string), ?exit_code##0:wybe.int, ?io##2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c {impure} gc_init @memory_management:nn:nn
    command_line.<0>(~#argc##0:wybe.int, ?_:wybe.int, ?#arguments##0:wybe.array(wybe.c_string), ~#argv##0:wybe.array.raw_array(wybe.c_string), ?_:wybe.array.raw_array(wybe.c_string), ?#command##0:wybe.c_string, ?#exit_code##0:wybe.int, 0:wybe.phantom, ?_:wybe.phantom) #2
    drone.<0>(0:wybe.phantom, ?#io##2:wybe.phantom) #3
    foreign c {semipure,terminal} exit(exit_code##0:wybe.int)

LLVM code       : None

--------------------------------------------------
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    arguments: command_line.arguments
                    argv: command_line.argv
                    command: command_line.command
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:nn:nn)]
                    arguments: fromList [(command_line.arguments,wybe.array(wybe.c_string) = array(argc @command_line:nn:nn, argv @command_line:nn:nn) @command_line:nn:nn @command_line:nn:nn)]
                    argv: fromList [(command_line.argv,wybe.array.raw_array(wybe.c_string) @command_line:nn:nn)]
                    command: fromList [(command_line.command,wybe.c_string = c"" @command_line:nn:nn @command_line:nn:nn)]
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:nn:nn @command_line:nn:nn)]
  procs           : 

*main* > public {impure} (0 calls)
0: command_line.<0>
(argc##0:wybe.int, [?argc##0:wybe.int], ?arguments##1:wybe.array(wybe.c_string), argv##0:wybe.array.raw_array(wybe.c_string), [?argv##0:wybe.array.raw_array(wybe.c_string)], ?command##1:wybe.c_string, ?exit_code##0:wybe.int, io##0:wybe.phantom, [?io##0:wybe.phantom]):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#4##0:wybe.array(?T))
    foreign lpvm mutate(~tmp#4##0:wybe.array(?T), ?tmp#5##0:wybe.array(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, argc##0:wybe.int)
    foreign lpvm mutate(~tmp#5##0:wybe.array(?T), ?tmp#0##0:wybe.array(?T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, argv##0:wybe.array.raw_array(?T))
    wybe.array.[|]<0>(?command##1:?T, ?arguments##1:wybe.array(?T), ~tmp#0##0:wybe.array(?T), ?tmp#1##0:wybe.bool) #1 @command_line:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign c {terminal,semipure} error_exit(c"command_line:17:6":wybe.c_string, c"Erroneous program argument vector":wybe.c_string) @control:nn:nn
        foreign llvm move(undef:wybe.int, ?exit_code##0:wybe.int)

    1:
        foreign llvm move(0:wybe.int, ?exit_code##0:wybe.int) @command_line:nn:nn



set_exit_code > public {inline} (0 calls)
0: command_line.set_exit_code<0>
set_exit_code(code##0:wybe.int, [exit_code##0:wybe.int], ?exit_code##1:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(~code##0:wybe.int, ?exit_code##1:wybe.int) @command_line:nn:nn

  LLVM code       :

; ModuleID = 'command_line'


 


declare external ccc  void @error_exit(i64, i64)    


declare external fastcc  {i64, i64, i1} @"wybe.array.[|]<0>"(i64)    


@command_line.18 =    constant [?? x i8] c"Erroneous program argument vector\00"


@command_line.16 =    constant [?? x i8] c"command_line:17:6\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  {i64, i64, i64} @"command_line.<0>"(i64  %"argc##0", i64  %"argv##0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 %"argc##0", i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"argv##0", i64* %8 
  %9 = tail call fastcc  {i64, i64, i1}  @"wybe.array.[|]<0>"(i64  %3)  
  %10 = extractvalue {i64, i64, i1} %9, 0 
  %11 = extractvalue {i64, i64, i1} %9, 1 
  %12 = extractvalue {i64, i64, i1} %9, 2 
  br i1 %12, label %if.then, label %if.else 
if.then:
  %13 = insertvalue {i64, i64, i64} undef, i64 %11, 0 
  %14 = insertvalue {i64, i64, i64} %13, i64 %10, 1 
  %15 = insertvalue {i64, i64, i64} %14, i64 0, 2 
  ret {i64, i64, i64} %15 
if.else:
  %17 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.16, i32 0, i32 0) to i64 
  %19 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.18, i32 0, i32 0) to i64 
  tail call ccc  void  @error_exit(i64  %17, i64  %19)  
  %20 = insertvalue {i64, i64, i64} undef, i64 %11, 0 
  %21 = insertvalue {i64, i64, i64} %20, i64 %10, 1 
  %22 = insertvalue {i64, i64, i64} %21, i64 undef, 2 
  ret {i64, i64, i64} %22 
}


define external fastcc  i64 @"command_line.set_exit_code<0>"(i64  %"code##0")    {
entry:
  ret i64 %"code##0" 
}
--------------------------------------------------
 Module drone
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : drone.<0>
  imports         : use command_line
                    use drone.drone_info
                    use wybe
  resources       : 
  submodules      : drone.drone_info
  procs           : 

*main* > public {impure} (0 calls)
0: drone.<0>
(io##0:wybe.phantom, ?io##3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(4,(drone.loop<0>,fromList [NonAliasedParamCond 0 []]))]
    drone.drone_init<0>(?tmp#0##0:drone.drone_info) #0 @drone:nn:nn
    foreign c read_char(?ch##0:wybe.char, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
    foreign lpvm cast(-1:wybe.int, ?tmp#1##0:wybe.char) @io:nn:nn
    foreign llvm icmp_ne(ch##0:wybe.char, ~tmp#1##0:wybe.char, ?tmp#2##0:wybe.bool) @char:nn:nn
    case ~tmp#2##0:wybe.bool of
    0:
        foreign c {impure} malloc_count(?tmp#10##0:wybe.int) @memory_management:nn:nn
        wybe.string.print_string<0>("** malloc count: ":wybe.string, ~io##1:wybe.phantom, ?tmp#11##0:wybe.phantom) #7 @io:nn:nn
        foreign c print_int(~tmp#10##0:wybe.int, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?io##3:wybe.phantom) @io:nn:nn

    1:
        drone.loop<0>[410bae77d3](~tmp#0##0:drone.drone_info, ~ch##0:wybe.char, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) #4 @drone:nn:nn
        foreign c {impure} malloc_count(?tmp#10##0:wybe.int) @memory_management:nn:nn
        wybe.string.print_string<0>("** malloc count: ":wybe.string, ~io##2:wybe.phantom, ?tmp#11##0:wybe.phantom) #8 @io:nn:nn
        foreign c print_int(~tmp#10##0:wybe.int, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?io##3:wybe.phantom) @io:nn:nn



do_action > (2 calls)
0: drone.do_action<0>
do_action(d##0:drone.drone_info, ?d##2:drone.drone_info, action##0:wybe.char, ?success##2:wybe.bool):
 AliasPairs: [(d##0,d##2)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(5,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 []])),(10,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 []])),(15,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 []])),(20,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 []])),(25,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 []])),(30,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 []])),(32,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 [0]]))]
    foreign llvm icmp_eq(action##0:wybe.char, 'n':wybe.char, ?tmp#21##0:wybe.bool) @char:nn:nn
    case ~tmp#21##0:wybe.bool of
    0:
        foreign llvm icmp_eq(action##0:wybe.char, 's':wybe.char, ?tmp#20##0:wybe.bool) @char:nn:nn
        case ~tmp#20##0:wybe.bool of
        0:
            foreign llvm icmp_eq(action##0:wybe.char, 'w':wybe.char, ?tmp#19##0:wybe.bool) @char:nn:nn
            case ~tmp#19##0:wybe.bool of
            0:
                foreign llvm icmp_eq(action##0:wybe.char, 'e':wybe.char, ?tmp#18##0:wybe.bool) @char:nn:nn
                case ~tmp#18##0:wybe.bool of
                0:
                    foreign llvm icmp_eq(action##0:wybe.char, 'u':wybe.char, ?tmp#17##0:wybe.bool) @char:nn:nn
                    case ~tmp#17##0:wybe.bool of
                    0:
                        foreign llvm icmp_eq(~action##0:wybe.char, 'd':wybe.char, ?tmp#16##0:wybe.bool) @char:nn:nn
                        case ~tmp#16##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?success##2:wybe.bool) @drone:nn:nn
                            drone.gen#2<0>(_:wybe.char, ~d##0:drone.drone_info, 0:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #32

                        1:
                            foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.int)
                            foreign llvm sub(~tmp#12##0:wybe.int, 1:wybe.int, ?tmp#11##0:wybe.int) @int:nn:nn
                            foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#11##0:wybe.int)
                            drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #30
                            foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


                    1:
                        foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int)
                        foreign llvm add(~tmp#10##0:wybe.int, 1:wybe.int, ?tmp#9##0:wybe.int) @int:nn:nn
                        foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#9##0:wybe.int)
                        drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #25
                        foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


                1:
                    foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int)
                    foreign llvm add(~tmp#8##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int) @int:nn:nn
                    foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#7##0:wybe.int)
                    drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #20
                    foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


            1:
                foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int)
                foreign llvm sub(~tmp#6##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
                foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#5##0:wybe.int)
                drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #15
                foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


        1:
            foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int)
            foreign llvm add(~tmp#4##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @int:nn:nn
            foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.int)
            drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #10
            foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


    1:
        foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm sub(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int) @int:nn:nn
        foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int)
        drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #5
        foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)



drone_init > (3 calls)
0: drone.drone_init<0>
drone_init(?#result##0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?tmp#5##0:drone.drone_info)
    foreign lpvm mutate(~tmp#5##0:drone.drone_info, ?tmp#6##0:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp#6##0:drone.drone_info, ?tmp#7##0:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp#7##0:drone.drone_info, ?tmp#8##0:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp#8##0:drone.drone_info, ?#result##0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)


gen#1 > {inline} (2 calls)
0: drone.gen#1<0>
gen#1([ch##0:wybe.char], [d##0:drone.drone_info], io##0:wybe.phantom, [tmp#0##0:drone.drone_info], ?io##2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c {impure} malloc_count(?mc##0:wybe.int) @memory_management:nn:nn
    wybe.string.print_string<0>("** malloc count: ":wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #3 @io:nn:nn
    foreign c print_int(~mc##0:wybe.int, ~#io##1:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn


gen#2 > (7 calls)
0: drone.gen#2<0>
gen#2([action##0:wybe.char], d##0:drone.drone_info, success##0:wybe.bool, [tmp#0##0:wybe.bool], ?d##1:drone.drone_info, [?success##0:wybe.bool]):
 AliasPairs: [(d##0,d##1)]
 InterestingCallProperties: [InterestingUnaliased 1]
    case success##0:wybe.bool of
    0:
        foreign llvm move(~d##0:drone.drone_info, ?d##1:drone.drone_info)

    1:
        foreign lpvm access(d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.int)
        foreign llvm add(~tmp#15##0:wybe.int, 1:wybe.int, ?tmp#14##0:wybe.int) @int:nn:nn
        foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#14##0:wybe.int)



gen#3 > (4 calls)
0: drone.gen#3<0>
gen#3([ch##0:wybe.char], d##0:drone.drone_info, io##0:wybe.phantom, ?io##2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 1]
 MultiSpeczDepInfo: [(3,(drone.loop<0>,fromList [NonAliasedParamCond 0 [1]]))]
    foreign c read_char(?ch##1:wybe.char, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
    foreign lpvm cast(-1:wybe.int, ?tmp#3##0:wybe.char) @io:nn:nn
    foreign llvm icmp_ne(ch##1:wybe.char, ~tmp#3##0:wybe.char, ?tmp#4##0:wybe.bool) @char:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm move(~io##1:wybe.phantom, ?io##2:wybe.phantom)

    1:
        drone.loop<0>(~d##0:drone.drone_info, ~ch##1:wybe.char, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) #3 @drone:nn:nn



loop > (2 calls)
0: drone.loop<0>
loop(d##0:drone.drone_info, ch##0:wybe.char, io##0:wybe.phantom, ?io##2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(5,(drone.gen#3<0>,fromList [NonAliasedParamCond 1 [0]])),(6,(drone.do_action<0>,fromList [NonAliasedParamCond 0 [0]])),(10,(drone.gen#3<0>,fromList [NonAliasedParamCond 1 [0]])),(11,(drone.gen#3<0>,fromList [NonAliasedParamCond 1 [0]])),(12,(drone.gen#3<0>,fromList [NonAliasedParamCond 1 [0]]))]
    foreign llvm icmp_ne(ch##0:wybe.char, ' ':wybe.char, ?tmp#0##0:wybe.bool) @char:nn:nn
    foreign llvm icmp_ne(ch##0:wybe.char, '\n':wybe.char, ?tmp#1##0:wybe.bool) @char:nn:nn
    foreign llvm and(~tmp#0##0:wybe.bool, ~tmp#1##0:wybe.bool, ?tmp#7##0:wybe.bool) @bool:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        drone.gen#3<0>(_:wybe.char, ~d##0:drone.drone_info, ~io##0:wybe.phantom, ?io##2:wybe.phantom) #12

    1:
        foreign llvm icmp_eq(ch##0:wybe.char, 'p':wybe.char, ?tmp#6##0:wybe.bool) @char:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            drone.do_action<0>(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, ~ch##0:wybe.char, ?success##0:wybe.bool) #6 @drone:nn:nn
            foreign llvm icmp_eq(~success##0:wybe.bool, 0:wybe.bool, ?tmp#5##0:wybe.bool) @bool:nn:nn
            case ~tmp#5##0:wybe.bool of
            0:
                drone.gen#3<0>(_:wybe.char, ~d##1:drone.drone_info, ~io##0:wybe.phantom, ?io##2:wybe.phantom) #11

            1:
                wybe.string.print_string<0>("invalid action!":wybe.string, ~#io##0:wybe.phantom, ?tmp#20##0:wybe.phantom) #13 @io:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp#20##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
                drone.gen#3<0>(_:wybe.char, ~d##1:drone.drone_info, ~io##1:wybe.phantom, ?io##2:wybe.phantom) #10


        1:
            wybe.string.print_string<0>("(":wybe.string, ~#io##0:wybe.phantom, ?tmp#18##0:wybe.phantom) #14 @io:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#19##0:wybe.int)
            foreign c print_int(~tmp#19##0:wybe.int, ~tmp#18##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @io:nn:nn
            wybe.string.print_string<0>(", ":wybe.string, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) #15 @io:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#22##0:wybe.int)
            foreign c print_int(~tmp#22##0:wybe.int, ~tmp#21##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @io:nn:nn
            wybe.string.print_string<0>(", ":wybe.string, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) #16 @io:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#25##0:wybe.int)
            foreign c print_int(~tmp#25##0:wybe.int, ~tmp#24##0:wybe.phantom, ?tmp#26##0:wybe.phantom) @io:nn:nn
            wybe.string.print_string<0>(") #":wybe.string, ~tmp#26##0:wybe.phantom, ?tmp#27##0:wybe.phantom) #17 @io:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#28##0:wybe.int)
            foreign c print_int(~tmp#28##0:wybe.int, ~tmp#27##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#29##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
            drone.gen#3<0>(_:wybe.char, ~d##0:drone.drone_info, ~io##1:wybe.phantom, ?io##2:wybe.phantom) #5




print_info > {inline} (1 calls)
0: drone.print_info<0>
print_info(d##0:drone.drone_info, io##0:wybe.phantom, ?io##9:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.string.print_string<0>("(":wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #13 @io:nn:nn
    foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int)
    foreign c print_int(~tmp#0##0:wybe.int, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>(", ":wybe.string, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #14 @io:nn:nn
    foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int)
    foreign c print_int(~tmp#1##0:wybe.int, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>(", ":wybe.string, ~#io##4:wybe.phantom, ?#io##5:wybe.phantom) #15 @io:nn:nn
    foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int)
    foreign c print_int(~tmp#2##0:wybe.int, ~#io##5:wybe.phantom, ?#io##6:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>(") #":wybe.string, ~#io##6:wybe.phantom, ?#io##7:wybe.phantom) #16 @io:nn:nn
    foreign lpvm access(~d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int)
    foreign c print_int(~tmp#3##0:wybe.int, ~#io##7:wybe.phantom, ?#io##8:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~#io##8:wybe.phantom, ?#io##9:wybe.phantom) @io:nn:nn

LLVM code       : None

--------------------------------------------------
 Module drone.drone_info
  representation  : address
  public submods  : 
  public resources: 
  public procs    : drone.drone_info.=<0>
                    drone.drone_info.count<0>
                    drone.drone_info.count<1>
                    drone.drone_info.drone_info<0>
                    drone.drone_info.drone_info<1>
                    drone.drone_info.x<0>
                    drone.drone_info.x<1>
                    drone.drone_info.y<0>
                    drone.drone_info.y<1>
                    drone.drone_info.z<0>
                    drone.drone_info.z<1>
                    drone.drone_info.~=<0>
  imports         : use drone
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: drone.drone_info.=<0>
=(#left##0:drone.drone_info, #right##0:drone.drone_info, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#left##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int)
    foreign lpvm access(#left##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int)
    foreign lpvm access(#left##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#z##0:wybe.int)
    foreign lpvm access(~#left##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#count##0:wybe.int)
    foreign lpvm access(#right##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int)
    foreign lpvm access(#right##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int)
    foreign lpvm access(#right##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#z##0:wybe.int)
    foreign lpvm access(~#right##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#count##0:wybe.int)
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#z##0:wybe.int, ~#right#z##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#count##0:wybe.int, ~#right#count##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





count > public {inline} (0 calls)
0: drone.drone_info.count<0>
count(#rec##0:drone.drone_info, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
count > public {inline} (0 calls)
1: drone.drone_info.count<1>
count(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


drone_info > public {inline} (0 calls)
0: drone.drone_info.drone_info<0>
drone_info(x##0:wybe.int, y##0:wybe.int, z##0:wybe.int, count##0:wybe.int, ?#result##0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?#rec##0:drone.drone_info)
    foreign lpvm mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~x##0:wybe.int)
    foreign lpvm mutate(~#rec##1:drone.drone_info, ?#rec##2:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~y##0:wybe.int)
    foreign lpvm mutate(~#rec##2:drone.drone_info, ?#rec##3:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~z##0:wybe.int)
    foreign lpvm mutate(~#rec##3:drone.drone_info, ?#result##0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~count##0:wybe.int)
drone_info > public {inline} (14 calls)
1: drone.drone_info.drone_info<1>
drone_info(?x##0:wybe.int, ?y##0:wybe.int, ?z##0:wybe.int, ?count##0:wybe.int, #result##0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#result##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?x##0:wybe.int)
    foreign lpvm access(#result##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?y##0:wybe.int)
    foreign lpvm access(#result##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?z##0:wybe.int)
    foreign lpvm access(~#result##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?count##0:wybe.int)


x > public {inline} (0 calls)
0: drone.drone_info.x<0>
x(#rec##0:drone.drone_info, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
x > public {inline} (0 calls)
1: drone.drone_info.x<1>
x(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


y > public {inline} (0 calls)
0: drone.drone_info.y<0>
y(#rec##0:drone.drone_info, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
y > public {inline} (0 calls)
1: drone.drone_info.y<1>
y(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


z > public {inline} (0 calls)
0: drone.drone_info.z<0>
z(#rec##0:drone.drone_info, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
z > public {inline} (0 calls)
1: drone.drone_info.z<1>
z(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


~= > public {inline} (0 calls)
0: drone.drone_info.~=<0>
~=(#left##0:drone.drone_info, #right##0:drone.drone_info, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#left##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int)
    foreign lpvm access(#left##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int)
    foreign lpvm access(#left##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int)
    foreign lpvm access(~#left##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int)
    foreign lpvm access(#right##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int)
    foreign lpvm access(#right##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int)
    foreign lpvm access(#right##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int)
    foreign lpvm access(~#right##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int)
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#7##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
    case ~tmp#11##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#12##0:wybe.bool) @int:nn:nn
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp#5##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#13##0:wybe.bool) @int:nn:nn
            case ~tmp#13##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
                foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
                foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)




LLVM code       : None

======================================================================
AFTER EVERYTHING:
 Module 
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    use drone
                    use wybe
                    use wybe.array
                    use wybe.bool
                    use wybe.c_string
                    use wybe.char
                    use wybe.comparison
                    use wybe.control
                    use wybe.count
                    use wybe.float
                    use wybe.int
                    use wybe.io
                    use wybe.list
                    use wybe.machine_word
                    use wybe.memory_management
                    use wybe.phantom
                    use wybe.range
                    use wybe.string
  resources       : 
  procs           : 

*main* > {terminal,inline,impure} (0 calls)
0: .<0>
(argc##0:wybe.int, argv##0:wybe.array.raw_array(wybe.c_string), ?exit_code##0:wybe.int, ?io##2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c {impure} gc_init @memory_management:nn:nn
    command_line.<0>(~#argc##0:wybe.int, ?_:wybe.int, ?#arguments##0:wybe.array(wybe.c_string), ~#argv##0:wybe.array.raw_array(wybe.c_string), ?_:wybe.array.raw_array(wybe.c_string), ?#command##0:wybe.c_string, ?#exit_code##0:wybe.int, 0:wybe.phantom, ?_:wybe.phantom) #2
    drone.<0>(0:wybe.phantom, ?#io##2:wybe.phantom) #3
    foreign c {semipure,terminal} exit(exit_code##0:wybe.int)

  LLVM code       :

; ModuleID = ''


 


declare external ccc  void @exit(i64)    


declare external fastcc  void @"drone.<0>"()    


declare external fastcc  {i64, i64, i64} @"command_line.<0>"(i64, i64)    


declare external ccc  void @gc_init()    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i32 @main(i64  %"argc##0", i64  %"argv##0")    {
entry:
  tail call ccc  void  @gc_init()  
  %1 = tail call fastcc  {i64, i64, i64}  @"command_line.<0>"(i64  %"argc##0", i64  %"argv##0")  
  %2 = extractvalue {i64, i64, i64} %1, 0 
  %3 = extractvalue {i64, i64, i64} %1, 1 
  %4 = extractvalue {i64, i64, i64} %1, 2 
  tail call fastcc  void  @"drone.<0>"()  
  tail call ccc  void  @exit(i64  %4)  
  ret i64 %4 
}
--------------------------------------------------
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    arguments: command_line.arguments
                    argv: command_line.argv
                    command: command_line.command
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:nn:nn)]
                    arguments: fromList [(command_line.arguments,wybe.array(wybe.c_string) = array(argc @command_line:nn:nn, argv @command_line:nn:nn) @command_line:nn:nn @command_line:nn:nn)]
                    argv: fromList [(command_line.argv,wybe.array.raw_array(wybe.c_string) @command_line:nn:nn)]
                    command: fromList [(command_line.command,wybe.c_string = c"" @command_line:nn:nn @command_line:nn:nn)]
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:nn:nn @command_line:nn:nn)]
  procs           : 

*main* > public {impure} (0 calls)
0: command_line.<0>
(argc##0:wybe.int, [?argc##0:wybe.int], ?arguments##1:wybe.array(wybe.c_string), argv##0:wybe.array.raw_array(wybe.c_string), [?argv##0:wybe.array.raw_array(wybe.c_string)], ?command##1:wybe.c_string, ?exit_code##0:wybe.int, io##0:wybe.phantom, [?io##0:wybe.phantom]):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#4##0:wybe.array(?T))
    foreign lpvm mutate(~tmp#4##0:wybe.array(?T), ?tmp#5##0:wybe.array(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, argc##0:wybe.int)
    foreign lpvm mutate(~tmp#5##0:wybe.array(?T), ?tmp#0##0:wybe.array(?T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, argv##0:wybe.array.raw_array(?T))
    wybe.array.[|]<0>(?command##1:?T, ?arguments##1:wybe.array(?T), ~tmp#0##0:wybe.array(?T), ?tmp#1##0:wybe.bool) #1 @command_line:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign c {terminal,semipure} error_exit(c"command_line:17:6":wybe.c_string, c"Erroneous program argument vector":wybe.c_string) @control:nn:nn
        foreign llvm move(undef:wybe.int, ?exit_code##0:wybe.int)

    1:
        foreign llvm move(0:wybe.int, ?exit_code##0:wybe.int) @command_line:nn:nn



set_exit_code > public {inline} (0 calls)
0: command_line.set_exit_code<0>
set_exit_code(code##0:wybe.int, [exit_code##0:wybe.int], ?exit_code##1:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(~code##0:wybe.int, ?exit_code##1:wybe.int) @command_line:nn:nn

  LLVM code       :

; ModuleID = 'command_line'


 


declare external ccc  void @error_exit(i64, i64)    


declare external fastcc  {i64, i64, i1} @"wybe.array.[|]<0>"(i64)    


@command_line.18 =    constant [?? x i8] c"Erroneous program argument vector\00"


@command_line.16 =    constant [?? x i8] c"command_line:17:6\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  {i64, i64, i64} @"command_line.<0>"(i64  %"argc##0", i64  %"argv##0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 %"argc##0", i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"argv##0", i64* %8 
  %9 = tail call fastcc  {i64, i64, i1}  @"wybe.array.[|]<0>"(i64  %3)  
  %10 = extractvalue {i64, i64, i1} %9, 0 
  %11 = extractvalue {i64, i64, i1} %9, 1 
  %12 = extractvalue {i64, i64, i1} %9, 2 
  br i1 %12, label %if.then, label %if.else 
if.then:
  %13 = insertvalue {i64, i64, i64} undef, i64 %11, 0 
  %14 = insertvalue {i64, i64, i64} %13, i64 %10, 1 
  %15 = insertvalue {i64, i64, i64} %14, i64 0, 2 
  ret {i64, i64, i64} %15 
if.else:
  %17 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.16, i32 0, i32 0) to i64 
  %19 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.18, i32 0, i32 0) to i64 
  tail call ccc  void  @error_exit(i64  %17, i64  %19)  
  %20 = insertvalue {i64, i64, i64} undef, i64 %11, 0 
  %21 = insertvalue {i64, i64, i64} %20, i64 %10, 1 
  %22 = insertvalue {i64, i64, i64} %21, i64 undef, 2 
  ret {i64, i64, i64} %22 
}


define external fastcc  i64 @"command_line.set_exit_code<0>"(i64  %"code##0")    {
entry:
  ret i64 %"code##0" 
}
--------------------------------------------------
 Module drone
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : drone.<0>
  imports         : use command_line
                    use drone.drone_info
                    use wybe
  resources       : 
  submodules      : drone.drone_info
  procs           : 

*main* > public {impure} (0 calls)
0: drone.<0>
(io##0:wybe.phantom, ?io##3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(4,(drone.loop<0>,fromList [NonAliasedParamCond 0 []]))]
    drone.drone_init<0>(?tmp#0##0:drone.drone_info) #0 @drone:nn:nn
    foreign c read_char(?ch##0:wybe.char, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
    foreign lpvm cast(-1:wybe.int, ?tmp#1##0:wybe.char) @io:nn:nn
    foreign llvm icmp_ne(ch##0:wybe.char, ~tmp#1##0:wybe.char, ?tmp#2##0:wybe.bool) @char:nn:nn
    case ~tmp#2##0:wybe.bool of
    0:
        foreign c {impure} malloc_count(?tmp#10##0:wybe.int) @memory_management:nn:nn
        wybe.string.print_string<0>("** malloc count: ":wybe.string, ~io##1:wybe.phantom, ?tmp#11##0:wybe.phantom) #7 @io:nn:nn
        foreign c print_int(~tmp#10##0:wybe.int, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?io##3:wybe.phantom) @io:nn:nn

    1:
        drone.loop<0>[410bae77d3](~tmp#0##0:drone.drone_info, ~ch##0:wybe.char, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) #4 @drone:nn:nn
        foreign c {impure} malloc_count(?tmp#10##0:wybe.int) @memory_management:nn:nn
        wybe.string.print_string<0>("** malloc count: ":wybe.string, ~io##2:wybe.phantom, ?tmp#11##0:wybe.phantom) #8 @io:nn:nn
        foreign c print_int(~tmp#10##0:wybe.int, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?io##3:wybe.phantom) @io:nn:nn



do_action > (2 calls)
0: drone.do_action<0>[410bae77d3]
do_action(d##0:drone.drone_info, ?d##2:drone.drone_info, action##0:wybe.char, ?success##2:wybe.bool):
 AliasPairs: [(d##0,d##2)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(5,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 []])),(10,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 []])),(15,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 []])),(20,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 []])),(25,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 []])),(30,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 []])),(32,(drone.gen#2<0>,fromList [NonAliasedParamCond 1 [0]]))]
    foreign llvm icmp_eq(action##0:wybe.char, 'n':wybe.char, ?tmp#21##0:wybe.bool) @char:nn:nn
    case ~tmp#21##0:wybe.bool of
    0:
        foreign llvm icmp_eq(action##0:wybe.char, 's':wybe.char, ?tmp#20##0:wybe.bool) @char:nn:nn
        case ~tmp#20##0:wybe.bool of
        0:
            foreign llvm icmp_eq(action##0:wybe.char, 'w':wybe.char, ?tmp#19##0:wybe.bool) @char:nn:nn
            case ~tmp#19##0:wybe.bool of
            0:
                foreign llvm icmp_eq(action##0:wybe.char, 'e':wybe.char, ?tmp#18##0:wybe.bool) @char:nn:nn
                case ~tmp#18##0:wybe.bool of
                0:
                    foreign llvm icmp_eq(action##0:wybe.char, 'u':wybe.char, ?tmp#17##0:wybe.bool) @char:nn:nn
                    case ~tmp#17##0:wybe.bool of
                    0:
                        foreign llvm icmp_eq(~action##0:wybe.char, 'd':wybe.char, ?tmp#16##0:wybe.bool) @char:nn:nn
                        case ~tmp#16##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?success##2:wybe.bool) @drone:nn:nn
                            drone.gen#2<0>(_:wybe.char, ~d##0:drone.drone_info, 0:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #32

                        1:
                            foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.int)
                            foreign llvm sub(~tmp#12##0:wybe.int, 1:wybe.int, ?tmp#11##0:wybe.int) @int:nn:nn
                            foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#11##0:wybe.int)
                            drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #30
                            foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


                    1:
                        foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int)
                        foreign llvm add(~tmp#10##0:wybe.int, 1:wybe.int, ?tmp#9##0:wybe.int) @int:nn:nn
                        foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#9##0:wybe.int)
                        drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #25
                        foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


                1:
                    foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int)
                    foreign llvm add(~tmp#8##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int) @int:nn:nn
                    foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#7##0:wybe.int)
                    drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #20
                    foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


            1:
                foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int)
                foreign llvm sub(~tmp#6##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
                foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#5##0:wybe.int)
                drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #15
                foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


        1:
            foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int)
            foreign llvm add(~tmp#4##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @int:nn:nn
            foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.int)
            drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #10
            foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


    1:
        foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm sub(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int) @int:nn:nn
        foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int)
        drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #5
        foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_eq(action##0:wybe.char, 'n':wybe.char, ?tmp#21##0:wybe.bool) @char:nn:nn
    case ~tmp#21##0:wybe.bool of
    0:
        foreign llvm icmp_eq(action##0:wybe.char, 's':wybe.char, ?tmp#20##0:wybe.bool) @char:nn:nn
        case ~tmp#20##0:wybe.bool of
        0:
            foreign llvm icmp_eq(action##0:wybe.char, 'w':wybe.char, ?tmp#19##0:wybe.bool) @char:nn:nn
            case ~tmp#19##0:wybe.bool of
            0:
                foreign llvm icmp_eq(action##0:wybe.char, 'e':wybe.char, ?tmp#18##0:wybe.bool) @char:nn:nn
                case ~tmp#18##0:wybe.bool of
                0:
                    foreign llvm icmp_eq(action##0:wybe.char, 'u':wybe.char, ?tmp#17##0:wybe.bool) @char:nn:nn
                    case ~tmp#17##0:wybe.bool of
                    0:
                        foreign llvm icmp_eq(~action##0:wybe.char, 'd':wybe.char, ?tmp#16##0:wybe.bool) @char:nn:nn
                        case ~tmp#16##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?success##2:wybe.bool) @drone:nn:nn
                            drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##0:drone.drone_info, 0:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #32

                        1:
                            foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.int)
                            foreign llvm sub(~tmp#12##0:wybe.int, 1:wybe.int, ?tmp#11##0:wybe.int) @int:nn:nn
                            foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#11##0:wybe.int)
                            drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #30
                            foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


                    1:
                        foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int)
                        foreign llvm add(~tmp#10##0:wybe.int, 1:wybe.int, ?tmp#9##0:wybe.int) @int:nn:nn
                        foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#9##0:wybe.int)
                        drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #25
                        foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


                1:
                    foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int)
                    foreign llvm add(~tmp#8##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int) @int:nn:nn
                    foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#7##0:wybe.int)
                    drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #20
                    foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


            1:
                foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int)
                foreign llvm sub(~tmp#6##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
                foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#5##0:wybe.int)
                drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #15
                foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


        1:
            foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int)
            foreign llvm add(~tmp#4##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @int:nn:nn
            foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.int)
            drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #10
            foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)


    1:
        foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm sub(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int) @int:nn:nn
        foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int)
        drone.gen#2<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, 1:wybe.bool, _:wybe.bool, ?d##2:drone.drone_info, ?_:wybe.bool) #5
        foreign llvm move(1:wybe.bool, ?success##2:wybe.bool)



drone_init > (3 calls)
0: drone.drone_init<0>
drone_init(?#result##0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?tmp#5##0:drone.drone_info)
    foreign lpvm mutate(~tmp#5##0:drone.drone_info, ?tmp#6##0:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp#6##0:drone.drone_info, ?tmp#7##0:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp#7##0:drone.drone_info, ?tmp#8##0:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp#8##0:drone.drone_info, ?#result##0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int)


gen#1 > {inline} (2 calls)
0: drone.gen#1<0>
gen#1([ch##0:wybe.char], [d##0:drone.drone_info], io##0:wybe.phantom, [tmp#0##0:drone.drone_info], ?io##2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c {impure} malloc_count(?mc##0:wybe.int) @memory_management:nn:nn
    wybe.string.print_string<0>("** malloc count: ":wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #3 @io:nn:nn
    foreign c print_int(~mc##0:wybe.int, ~#io##1:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn


gen#2 > (7 calls)
0: drone.gen#2<0>[6dacb8fd25]
gen#2([action##0:wybe.char], d##0:drone.drone_info, success##0:wybe.bool, [tmp#0##0:wybe.bool], ?d##1:drone.drone_info, [?success##0:wybe.bool]):
 AliasPairs: [(d##0,d##1)]
 InterestingCallProperties: [InterestingUnaliased 1]
    case success##0:wybe.bool of
    0:
        foreign llvm move(~d##0:drone.drone_info, ?d##1:drone.drone_info)

    1:
        foreign lpvm access(d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.int)
        foreign llvm add(~tmp#15##0:wybe.int, 1:wybe.int, ?tmp#14##0:wybe.int) @int:nn:nn
        foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#14##0:wybe.int)

 [6dacb8fd25] [NonAliasedParam 1] :
    case success##0:wybe.bool of
    0:
        foreign llvm move(~d##0:drone.drone_info, ?d##1:drone.drone_info)

    1:
        foreign lpvm access(d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.int)
        foreign llvm add(~tmp#15##0:wybe.int, 1:wybe.int, ?tmp#14##0:wybe.int) @int:nn:nn
        foreign lpvm {noalias} mutate(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~tmp#14##0:wybe.int)



gen#3 > (4 calls)
0: drone.gen#3<0>[6dacb8fd25]
gen#3([ch##0:wybe.char], d##0:drone.drone_info, io##0:wybe.phantom, ?io##2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 1]
 MultiSpeczDepInfo: [(3,(drone.loop<0>,fromList [NonAliasedParamCond 0 [1]]))]
    foreign c read_char(?ch##1:wybe.char, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
    foreign lpvm cast(-1:wybe.int, ?tmp#3##0:wybe.char) @io:nn:nn
    foreign llvm icmp_ne(ch##1:wybe.char, ~tmp#3##0:wybe.char, ?tmp#4##0:wybe.bool) @char:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm move(~io##1:wybe.phantom, ?io##2:wybe.phantom)

    1:
        drone.loop<0>(~d##0:drone.drone_info, ~ch##1:wybe.char, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) #3 @drone:nn:nn

 [6dacb8fd25] [NonAliasedParam 1] :
    foreign c read_char(?ch##1:wybe.char, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
    foreign lpvm cast(-1:wybe.int, ?tmp#3##0:wybe.char) @io:nn:nn
    foreign llvm icmp_ne(ch##1:wybe.char, ~tmp#3##0:wybe.char, ?tmp#4##0:wybe.bool) @char:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm move(~io##1:wybe.phantom, ?io##2:wybe.phantom)

    1:
        drone.loop<0>[410bae77d3](~d##0:drone.drone_info, ~ch##1:wybe.char, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) #3 @drone:nn:nn



loop > (2 calls)
0: drone.loop<0>[410bae77d3]
loop(d##0:drone.drone_info, ch##0:wybe.char, io##0:wybe.phantom, ?io##2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(5,(drone.gen#3<0>,fromList [NonAliasedParamCond 1 [0]])),(6,(drone.do_action<0>,fromList [NonAliasedParamCond 0 [0]])),(10,(drone.gen#3<0>,fromList [NonAliasedParamCond 1 [0]])),(11,(drone.gen#3<0>,fromList [NonAliasedParamCond 1 [0]])),(12,(drone.gen#3<0>,fromList [NonAliasedParamCond 1 [0]]))]
    foreign llvm icmp_ne(ch##0:wybe.char, ' ':wybe.char, ?tmp#0##0:wybe.bool) @char:nn:nn
    foreign llvm icmp_ne(ch##0:wybe.char, '\n':wybe.char, ?tmp#1##0:wybe.bool) @char:nn:nn
    foreign llvm and(~tmp#0##0:wybe.bool, ~tmp#1##0:wybe.bool, ?tmp#7##0:wybe.bool) @bool:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        drone.gen#3<0>(_:wybe.char, ~d##0:drone.drone_info, ~io##0:wybe.phantom, ?io##2:wybe.phantom) #12

    1:
        foreign llvm icmp_eq(ch##0:wybe.char, 'p':wybe.char, ?tmp#6##0:wybe.bool) @char:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            drone.do_action<0>(~%d##0:drone.drone_info, ?%d##1:drone.drone_info, ~ch##0:wybe.char, ?success##0:wybe.bool) #6 @drone:nn:nn
            foreign llvm icmp_eq(~success##0:wybe.bool, 0:wybe.bool, ?tmp#5##0:wybe.bool) @bool:nn:nn
            case ~tmp#5##0:wybe.bool of
            0:
                drone.gen#3<0>(_:wybe.char, ~d##1:drone.drone_info, ~io##0:wybe.phantom, ?io##2:wybe.phantom) #11

            1:
                wybe.string.print_string<0>("invalid action!":wybe.string, ~#io##0:wybe.phantom, ?tmp#20##0:wybe.phantom) #13 @io:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp#20##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
                drone.gen#3<0>(_:wybe.char, ~d##1:drone.drone_info, ~io##1:wybe.phantom, ?io##2:wybe.phantom) #10


        1:
            wybe.string.print_string<0>("(":wybe.string, ~#io##0:wybe.phantom, ?tmp#18##0:wybe.phantom) #14 @io:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#19##0:wybe.int)
            foreign c print_int(~tmp#19##0:wybe.int, ~tmp#18##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @io:nn:nn
            wybe.string.print_string<0>(", ":wybe.string, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) #15 @io:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#22##0:wybe.int)
            foreign c print_int(~tmp#22##0:wybe.int, ~tmp#21##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @io:nn:nn
            wybe.string.print_string<0>(", ":wybe.string, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) #16 @io:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#25##0:wybe.int)
            foreign c print_int(~tmp#25##0:wybe.int, ~tmp#24##0:wybe.phantom, ?tmp#26##0:wybe.phantom) @io:nn:nn
            wybe.string.print_string<0>(") #":wybe.string, ~tmp#26##0:wybe.phantom, ?tmp#27##0:wybe.phantom) #17 @io:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#28##0:wybe.int)
            foreign c print_int(~tmp#28##0:wybe.int, ~tmp#27##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#29##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
            drone.gen#3<0>(_:wybe.char, ~d##0:drone.drone_info, ~io##1:wybe.phantom, ?io##2:wybe.phantom) #5


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(ch##0:wybe.char, ' ':wybe.char, ?tmp#0##0:wybe.bool) @char:nn:nn
    foreign llvm icmp_ne(ch##0:wybe.char, '\n':wybe.char, ?tmp#1##0:wybe.bool) @char:nn:nn
    foreign llvm and(~tmp#0##0:wybe.bool, ~tmp#1##0:wybe.bool, ?tmp#7##0:wybe.bool) @bool:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        drone.gen#3<0>[6dacb8fd25](_:wybe.char, ~d##0:drone.drone_info, ~io##0:wybe.phantom, ?io##2:wybe.phantom) #12

    1:
        foreign llvm icmp_eq(ch##0:wybe.char, 'p':wybe.char, ?tmp#6##0:wybe.bool) @char:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            drone.do_action<0>[410bae77d3](~%d##0:drone.drone_info, ?%d##1:drone.drone_info, ~ch##0:wybe.char, ?success##0:wybe.bool) #6 @drone:nn:nn
            foreign llvm icmp_eq(~success##0:wybe.bool, 0:wybe.bool, ?tmp#5##0:wybe.bool) @bool:nn:nn
            case ~tmp#5##0:wybe.bool of
            0:
                drone.gen#3<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, ~io##0:wybe.phantom, ?io##2:wybe.phantom) #11

            1:
                wybe.string.print_string<0>("invalid action!":wybe.string, ~#io##0:wybe.phantom, ?tmp#20##0:wybe.phantom) #13 @io:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp#20##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
                drone.gen#3<0>[6dacb8fd25](_:wybe.char, ~d##1:drone.drone_info, ~io##1:wybe.phantom, ?io##2:wybe.phantom) #10


        1:
            wybe.string.print_string<0>("(":wybe.string, ~#io##0:wybe.phantom, ?tmp#18##0:wybe.phantom) #14 @io:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#19##0:wybe.int)
            foreign c print_int(~tmp#19##0:wybe.int, ~tmp#18##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @io:nn:nn
            wybe.string.print_string<0>(", ":wybe.string, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) #15 @io:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#22##0:wybe.int)
            foreign c print_int(~tmp#22##0:wybe.int, ~tmp#21##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @io:nn:nn
            wybe.string.print_string<0>(", ":wybe.string, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) #16 @io:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#25##0:wybe.int)
            foreign c print_int(~tmp#25##0:wybe.int, ~tmp#24##0:wybe.phantom, ?tmp#26##0:wybe.phantom) @io:nn:nn
            wybe.string.print_string<0>(") #":wybe.string, ~tmp#26##0:wybe.phantom, ?tmp#27##0:wybe.phantom) #17 @io:nn:nn
            foreign lpvm access(d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#28##0:wybe.int)
            foreign c print_int(~tmp#28##0:wybe.int, ~tmp#27##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#29##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
            drone.gen#3<0>[6dacb8fd25](_:wybe.char, ~d##0:drone.drone_info, ~io##1:wybe.phantom, ?io##2:wybe.phantom) #5




print_info > {inline} (1 calls)
0: drone.print_info<0>
print_info(d##0:drone.drone_info, io##0:wybe.phantom, ?io##9:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.string.print_string<0>("(":wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #13 @io:nn:nn
    foreign lpvm access(d##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int)
    foreign c print_int(~tmp#0##0:wybe.int, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>(", ":wybe.string, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #14 @io:nn:nn
    foreign lpvm access(d##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int)
    foreign c print_int(~tmp#1##0:wybe.int, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>(", ":wybe.string, ~#io##4:wybe.phantom, ?#io##5:wybe.phantom) #15 @io:nn:nn
    foreign lpvm access(d##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int)
    foreign c print_int(~tmp#2##0:wybe.int, ~#io##5:wybe.phantom, ?#io##6:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>(") #":wybe.string, ~#io##6:wybe.phantom, ?#io##7:wybe.phantom) #16 @io:nn:nn
    foreign lpvm access(~d##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int)
    foreign c print_int(~tmp#3##0:wybe.int, ~#io##7:wybe.phantom, ?#io##8:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~#io##8:wybe.phantom, ?#io##9:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'drone'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


declare external ccc  i64 @malloc_count()    


declare external ccc  i8 @read_char()    


@drone.8 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @drone.7 to i64) }


@drone.7 =    constant [?? x i8] c"** malloc count: \00"


@drone.5 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @drone.4 to i64) }


@drone.4 =    constant [?? x i8] c"** malloc count: \00"


@drone.165 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @drone.164 to i64) }


@drone.164 =    constant [?? x i8] c"** malloc count: \00"


@drone.224 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @drone.223 to i64) }


@drone.223 =    constant [?? x i8] c"invalid action!\00"


@drone.214 =    constant {i64, i64} { i64 3, i64 ptrtoint ([?? x i8]* @drone.213 to i64) }


@drone.213 =    constant [?? x i8] c") #\00"


@drone.207 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @drone.206 to i64) }


@drone.206 =    constant [?? x i8] c", \00"


@drone.200 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @drone.199 to i64) }


@drone.199 =    constant [?? x i8] c", \00"


@drone.194 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @drone.193 to i64) }


@drone.193 =    constant [?? x i8] c"(\00"


@drone.257 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @drone.256 to i64) }


@drone.256 =    constant [?? x i8] c"invalid action!\00"


@drone.247 =    constant {i64, i64} { i64 3, i64 ptrtoint ([?? x i8]* @drone.246 to i64) }


@drone.246 =    constant [?? x i8] c") #\00"


@drone.240 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @drone.239 to i64) }


@drone.239 =    constant [?? x i8] c", \00"


@drone.233 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @drone.232 to i64) }


@drone.232 =    constant [?? x i8] c", \00"


@drone.227 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @drone.226 to i64) }


@drone.226 =    constant [?? x i8] c"(\00"


@drone.280 =    constant {i64, i64} { i64 3, i64 ptrtoint ([?? x i8]* @drone.279 to i64) }


@drone.279 =    constant [?? x i8] c") #\00"


@drone.273 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @drone.272 to i64) }


@drone.272 =    constant [?? x i8] c", \00"


@drone.266 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @drone.265 to i64) }


@drone.265 =    constant [?? x i8] c", \00"


@drone.260 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @drone.259 to i64) }


@drone.259 =    constant [?? x i8] c"(\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"drone.<0>"()    {
entry:
  %"1#tmp#0##0" = tail call fastcc  i64  @"drone.drone_init<0>"()  
  %"1#ch##0" = tail call ccc  i8  @read_char()  
  %1 = alloca i64 
  store  i64 -1, i64* %1 
  %2 = load  i64, i64* %1 
  %3 = trunc i64 %2 to i8  
  %"1#tmp#2##0" = icmp ne i8 %"1#ch##0", %3 
  br i1 %"1#tmp#2##0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"drone.loop<0>[410bae77d3]"(i64  %"1#tmp#0##0", i8  %"1#ch##0")  
  %"2#tmp#10##0" = tail call ccc  i64  @malloc_count()  
  %6 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.5, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %6)  
  tail call ccc  void  @print_int(i64  %"2#tmp#10##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  %"3#tmp#10##0" = tail call ccc  i64  @malloc_count()  
  %9 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.8, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %9)  
  tail call ccc  void  @print_int(i64  %"3#tmp#10##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  {i64, i1} @"drone.do_action<0>"(i64  %"d##0", i8  %"action##0")    {
entry:
  %"1#tmp#21##0" = icmp eq i8 %"action##0", 110 
  br i1 %"1#tmp#21##0", label %if.then, label %if.else 
if.then:
  %10 = add   i64 %"d##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %"2#tmp#1##0" = sub   i64 %13, 1 
  %14 = trunc i64 32 to i32  
  %15 = tail call ccc  i8*  @wybe_malloc(i32  %14)  
  %16 = ptrtoint i8* %15 to i64 
  %17 = inttoptr i64 %16 to i8* 
  %18 = inttoptr i64 %"d##0" to i8* 
  %19 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %17, i8*  %18, i32  %19, i32  8, i1  0)  
  %20 = add   i64 %16, 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"2#tmp#1##0", i64* %22 
  %"2#d##2" = tail call fastcc  i64  @"drone.gen#2<0>[6dacb8fd25]"(i64  %16, i1  1)  
  %23 = insertvalue {i64, i1} undef, i64 %"2#d##2", 0 
  %24 = insertvalue {i64, i1} %23, i1 1, 1 
  ret {i64, i1} %24 
if.else:
  %"3#tmp#20##0" = icmp eq i8 %"action##0", 115 
  br i1 %"3#tmp#20##0", label %if.then1, label %if.else1 
if.then1:
  %25 = add   i64 %"d##0", 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %"4#tmp#3##0" = add   i64 %28, 1 
  %29 = trunc i64 32 to i32  
  %30 = tail call ccc  i8*  @wybe_malloc(i32  %29)  
  %31 = ptrtoint i8* %30 to i64 
  %32 = inttoptr i64 %31 to i8* 
  %33 = inttoptr i64 %"d##0" to i8* 
  %34 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %32, i8*  %33, i32  %34, i32  8, i1  0)  
  %35 = add   i64 %31, 8 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  store  i64 %"4#tmp#3##0", i64* %37 
  %"4#d##2" = tail call fastcc  i64  @"drone.gen#2<0>[6dacb8fd25]"(i64  %31, i1  1)  
  %38 = insertvalue {i64, i1} undef, i64 %"4#d##2", 0 
  %39 = insertvalue {i64, i1} %38, i1 1, 1 
  ret {i64, i1} %39 
if.else1:
  %"5#tmp#19##0" = icmp eq i8 %"action##0", 119 
  br i1 %"5#tmp#19##0", label %if.then2, label %if.else2 
if.then2:
  %40 = inttoptr i64 %"d##0" to i64* 
  %41 = getelementptr  i64, i64* %40, i64 0 
  %42 = load  i64, i64* %41 
  %"6#tmp#5##0" = sub   i64 %42, 1 
  %43 = trunc i64 32 to i32  
  %44 = tail call ccc  i8*  @wybe_malloc(i32  %43)  
  %45 = ptrtoint i8* %44 to i64 
  %46 = inttoptr i64 %45 to i8* 
  %47 = inttoptr i64 %"d##0" to i8* 
  %48 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %46, i8*  %47, i32  %48, i32  8, i1  0)  
  %49 = inttoptr i64 %45 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  store  i64 %"6#tmp#5##0", i64* %50 
  %"6#d##2" = tail call fastcc  i64  @"drone.gen#2<0>[6dacb8fd25]"(i64  %45, i1  1)  
  %51 = insertvalue {i64, i1} undef, i64 %"6#d##2", 0 
  %52 = insertvalue {i64, i1} %51, i1 1, 1 
  ret {i64, i1} %52 
if.else2:
  %"7#tmp#18##0" = icmp eq i8 %"action##0", 101 
  br i1 %"7#tmp#18##0", label %if.then3, label %if.else3 
if.then3:
  %53 = inttoptr i64 %"d##0" to i64* 
  %54 = getelementptr  i64, i64* %53, i64 0 
  %55 = load  i64, i64* %54 
  %"8#tmp#7##0" = add   i64 %55, 1 
  %56 = trunc i64 32 to i32  
  %57 = tail call ccc  i8*  @wybe_malloc(i32  %56)  
  %58 = ptrtoint i8* %57 to i64 
  %59 = inttoptr i64 %58 to i8* 
  %60 = inttoptr i64 %"d##0" to i8* 
  %61 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %59, i8*  %60, i32  %61, i32  8, i1  0)  
  %62 = inttoptr i64 %58 to i64* 
  %63 = getelementptr  i64, i64* %62, i64 0 
  store  i64 %"8#tmp#7##0", i64* %63 
  %"8#d##2" = tail call fastcc  i64  @"drone.gen#2<0>[6dacb8fd25]"(i64  %58, i1  1)  
  %64 = insertvalue {i64, i1} undef, i64 %"8#d##2", 0 
  %65 = insertvalue {i64, i1} %64, i1 1, 1 
  ret {i64, i1} %65 
if.else3:
  %"9#tmp#17##0" = icmp eq i8 %"action##0", 117 
  br i1 %"9#tmp#17##0", label %if.then4, label %if.else4 
if.then4:
  %66 = add   i64 %"d##0", 16 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  %69 = load  i64, i64* %68 
  %"10#tmp#9##0" = add   i64 %69, 1 
  %70 = trunc i64 32 to i32  
  %71 = tail call ccc  i8*  @wybe_malloc(i32  %70)  
  %72 = ptrtoint i8* %71 to i64 
  %73 = inttoptr i64 %72 to i8* 
  %74 = inttoptr i64 %"d##0" to i8* 
  %75 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %73, i8*  %74, i32  %75, i32  8, i1  0)  
  %76 = add   i64 %72, 16 
  %77 = inttoptr i64 %76 to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  store  i64 %"10#tmp#9##0", i64* %78 
  %"10#d##2" = tail call fastcc  i64  @"drone.gen#2<0>[6dacb8fd25]"(i64  %72, i1  1)  
  %79 = insertvalue {i64, i1} undef, i64 %"10#d##2", 0 
  %80 = insertvalue {i64, i1} %79, i1 1, 1 
  ret {i64, i1} %80 
if.else4:
  %"11#tmp#16##0" = icmp eq i8 %"action##0", 100 
  br i1 %"11#tmp#16##0", label %if.then5, label %if.else5 
if.then5:
  %81 = add   i64 %"d##0", 16 
  %82 = inttoptr i64 %81 to i64* 
  %83 = getelementptr  i64, i64* %82, i64 0 
  %84 = load  i64, i64* %83 
  %"12#tmp#11##0" = sub   i64 %84, 1 
  %85 = trunc i64 32 to i32  
  %86 = tail call ccc  i8*  @wybe_malloc(i32  %85)  
  %87 = ptrtoint i8* %86 to i64 
  %88 = inttoptr i64 %87 to i8* 
  %89 = inttoptr i64 %"d##0" to i8* 
  %90 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %88, i8*  %89, i32  %90, i32  8, i1  0)  
  %91 = add   i64 %87, 16 
  %92 = inttoptr i64 %91 to i64* 
  %93 = getelementptr  i64, i64* %92, i64 0 
  store  i64 %"12#tmp#11##0", i64* %93 
  %"12#d##2" = tail call fastcc  i64  @"drone.gen#2<0>[6dacb8fd25]"(i64  %87, i1  1)  
  %94 = insertvalue {i64, i1} undef, i64 %"12#d##2", 0 
  %95 = insertvalue {i64, i1} %94, i1 1, 1 
  ret {i64, i1} %95 
if.else5:
  %"13#d##2" = tail call fastcc  i64  @"drone.gen#2<0>"(i64  %"d##0", i1  0)  
  %96 = insertvalue {i64, i1} undef, i64 %"13#d##2", 0 
  %97 = insertvalue {i64, i1} %96, i1 0, 1 
  ret {i64, i1} %97 
}


define external fastcc  {i64, i1} @"drone.do_action<0>[410bae77d3]"(i64  %"d##0", i8  %"action##0")    {
entry:
  %"1#tmp#21##0" = icmp eq i8 %"action##0", 110 
  br i1 %"1#tmp#21##0", label %if.then, label %if.else 
if.then:
  %98 = add   i64 %"d##0", 8 
  %99 = inttoptr i64 %98 to i64* 
  %100 = getelementptr  i64, i64* %99, i64 0 
  %101 = load  i64, i64* %100 
  %"2#tmp#1##0" = sub   i64 %101, 1 
  %102 = add   i64 %"d##0", 8 
  %103 = inttoptr i64 %102 to i64* 
  %104 = getelementptr  i64, i64* %103, i64 0 
  store  i64 %"2#tmp#1##0", i64* %104 
  %"2#d##2" = tail call fastcc  i64  @"drone.gen#2<0>[6dacb8fd25]"(i64  %"d##0", i1  1)  
  %105 = insertvalue {i64, i1} undef, i64 %"2#d##2", 0 
  %106 = insertvalue {i64, i1} %105, i1 1, 1 
  ret {i64, i1} %106 
if.else:
  %"3#tmp#20##0" = icmp eq i8 %"action##0", 115 
  br i1 %"3#tmp#20##0", label %if.then1, label %if.else1 
if.then1:
  %107 = add   i64 %"d##0", 8 
  %108 = inttoptr i64 %107 to i64* 
  %109 = getelementptr  i64, i64* %108, i64 0 
  %110 = load  i64, i64* %109 
  %"4#tmp#3##0" = add   i64 %110, 1 
  %111 = add   i64 %"d##0", 8 
  %112 = inttoptr i64 %111 to i64* 
  %113 = getelementptr  i64, i64* %112, i64 0 
  store  i64 %"4#tmp#3##0", i64* %113 
  %"4#d##2" = tail call fastcc  i64  @"drone.gen#2<0>[6dacb8fd25]"(i64  %"d##0", i1  1)  
  %114 = insertvalue {i64, i1} undef, i64 %"4#d##2", 0 
  %115 = insertvalue {i64, i1} %114, i1 1, 1 
  ret {i64, i1} %115 
if.else1:
  %"5#tmp#19##0" = icmp eq i8 %"action##0", 119 
  br i1 %"5#tmp#19##0", label %if.then2, label %if.else2 
if.then2:
  %116 = inttoptr i64 %"d##0" to i64* 
  %117 = getelementptr  i64, i64* %116, i64 0 
  %118 = load  i64, i64* %117 
  %"6#tmp#5##0" = sub   i64 %118, 1 
  %119 = inttoptr i64 %"d##0" to i64* 
  %120 = getelementptr  i64, i64* %119, i64 0 
  store  i64 %"6#tmp#5##0", i64* %120 
  %"6#d##2" = tail call fastcc  i64  @"drone.gen#2<0>[6dacb8fd25]"(i64  %"d##0", i1  1)  
  %121 = insertvalue {i64, i1} undef, i64 %"6#d##2", 0 
  %122 = insertvalue {i64, i1} %121, i1 1, 1 
  ret {i64, i1} %122 
if.else2:
  %"7#tmp#18##0" = icmp eq i8 %"action##0", 101 
  br i1 %"7#tmp#18##0", label %if.then3, label %if.else3 
if.then3:
  %123 = inttoptr i64 %"d##0" to i64* 
  %124 = getelementptr  i64, i64* %123, i64 0 
  %125 = load  i64, i64* %124 
  %"8#tmp#7##0" = add   i64 %125, 1 
  %126 = inttoptr i64 %"d##0" to i64* 
  %127 = getelementptr  i64, i64* %126, i64 0 
  store  i64 %"8#tmp#7##0", i64* %127 
  %"8#d##2" = tail call fastcc  i64  @"drone.gen#2<0>[6dacb8fd25]"(i64  %"d##0", i1  1)  
  %128 = insertvalue {i64, i1} undef, i64 %"8#d##2", 0 
  %129 = insertvalue {i64, i1} %128, i1 1, 1 
  ret {i64, i1} %129 
if.else3:
  %"9#tmp#17##0" = icmp eq i8 %"action##0", 117 
  br i1 %"9#tmp#17##0", label %if.then4, label %if.else4 
if.then4:
  %130 = add   i64 %"d##0", 16 
  %131 = inttoptr i64 %130 to i64* 
  %132 = getelementptr  i64, i64* %131, i64 0 
  %133 = load  i64, i64* %132 
  %"10#tmp#9##0" = add   i64 %133, 1 
  %134 = add   i64 %"d##0", 16 
  %135 = inttoptr i64 %134 to i64* 
  %136 = getelementptr  i64, i64* %135, i64 0 
  store  i64 %"10#tmp#9##0", i64* %136 
  %"10#d##2" = tail call fastcc  i64  @"drone.gen#2<0>[6dacb8fd25]"(i64  %"d##0", i1  1)  
  %137 = insertvalue {i64, i1} undef, i64 %"10#d##2", 0 
  %138 = insertvalue {i64, i1} %137, i1 1, 1 
  ret {i64, i1} %138 
if.else4:
  %"11#tmp#16##0" = icmp eq i8 %"action##0", 100 
  br i1 %"11#tmp#16##0", label %if.then5, label %if.else5 
if.then5:
  %139 = add   i64 %"d##0", 16 
  %140 = inttoptr i64 %139 to i64* 
  %141 = getelementptr  i64, i64* %140, i64 0 
  %142 = load  i64, i64* %141 
  %"12#tmp#11##0" = sub   i64 %142, 1 
  %143 = add   i64 %"d##0", 16 
  %144 = inttoptr i64 %143 to i64* 
  %145 = getelementptr  i64, i64* %144, i64 0 
  store  i64 %"12#tmp#11##0", i64* %145 
  %"12#d##2" = tail call fastcc  i64  @"drone.gen#2<0>[6dacb8fd25]"(i64  %"d##0", i1  1)  
  %146 = insertvalue {i64, i1} undef, i64 %"12#d##2", 0 
  %147 = insertvalue {i64, i1} %146, i1 1, 1 
  ret {i64, i1} %147 
if.else5:
  %"13#d##2" = tail call fastcc  i64  @"drone.gen#2<0>[6dacb8fd25]"(i64  %"d##0", i1  0)  
  %148 = insertvalue {i64, i1} undef, i64 %"13#d##2", 0 
  %149 = insertvalue {i64, i1} %148, i1 0, 1 
  ret {i64, i1} %149 
}


define external fastcc  i64 @"drone.drone_init<0>"()    {
entry:
  %150 = trunc i64 32 to i32  
  %151 = tail call ccc  i8*  @wybe_malloc(i32  %150)  
  %152 = ptrtoint i8* %151 to i64 
  %153 = inttoptr i64 %152 to i64* 
  %154 = getelementptr  i64, i64* %153, i64 0 
  store  i64 0, i64* %154 
  %155 = add   i64 %152, 8 
  %156 = inttoptr i64 %155 to i64* 
  %157 = getelementptr  i64, i64* %156, i64 0 
  store  i64 0, i64* %157 
  %158 = add   i64 %152, 16 
  %159 = inttoptr i64 %158 to i64* 
  %160 = getelementptr  i64, i64* %159, i64 0 
  store  i64 0, i64* %160 
  %161 = add   i64 %152, 24 
  %162 = inttoptr i64 %161 to i64* 
  %163 = getelementptr  i64, i64* %162, i64 0 
  store  i64 0, i64* %163 
  ret i64 %152 
}


define external fastcc  void @"drone.gen#1<0>"()    {
entry:
  %"1#mc##0" = tail call ccc  i64  @malloc_count()  
  %166 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.165, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %166)  
  tail call ccc  void  @print_int(i64  %"1#mc##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"drone.gen#2<0>"(i64  %"d##0", i1  %"success##0")    {
entry:
  br i1 %"success##0", label %if.then, label %if.else 
if.then:
  %167 = add   i64 %"d##0", 24 
  %168 = inttoptr i64 %167 to i64* 
  %169 = getelementptr  i64, i64* %168, i64 0 
  %170 = load  i64, i64* %169 
  %"2#tmp#14##0" = add   i64 %170, 1 
  %171 = trunc i64 32 to i32  
  %172 = tail call ccc  i8*  @wybe_malloc(i32  %171)  
  %173 = ptrtoint i8* %172 to i64 
  %174 = inttoptr i64 %173 to i8* 
  %175 = inttoptr i64 %"d##0" to i8* 
  %176 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %174, i8*  %175, i32  %176, i32  8, i1  0)  
  %177 = add   i64 %173, 24 
  %178 = inttoptr i64 %177 to i64* 
  %179 = getelementptr  i64, i64* %178, i64 0 
  store  i64 %"2#tmp#14##0", i64* %179 
  ret i64 %173 
if.else:
  ret i64 %"d##0" 
}


define external fastcc  i64 @"drone.gen#2<0>[6dacb8fd25]"(i64  %"d##0", i1  %"success##0")    {
entry:
  br i1 %"success##0", label %if.then, label %if.else 
if.then:
  %180 = add   i64 %"d##0", 24 
  %181 = inttoptr i64 %180 to i64* 
  %182 = getelementptr  i64, i64* %181, i64 0 
  %183 = load  i64, i64* %182 
  %"2#tmp#14##0" = add   i64 %183, 1 
  %184 = add   i64 %"d##0", 24 
  %185 = inttoptr i64 %184 to i64* 
  %186 = getelementptr  i64, i64* %185, i64 0 
  store  i64 %"2#tmp#14##0", i64* %186 
  ret i64 %"d##0" 
if.else:
  ret i64 %"d##0" 
}


define external fastcc  void @"drone.gen#3<0>"(i64  %"d##0")    {
entry:
  %"1#ch##1" = tail call ccc  i8  @read_char()  
  %187 = alloca i64 
  store  i64 -1, i64* %187 
  %188 = load  i64, i64* %187 
  %189 = trunc i64 %188 to i8  
  %"1#tmp#4##0" = icmp ne i8 %"1#ch##1", %189 
  br i1 %"1#tmp#4##0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"drone.loop<0>"(i64  %"d##0", i8  %"1#ch##1")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"drone.gen#3<0>[6dacb8fd25]"(i64  %"d##0")    {
entry:
  %"1#ch##1" = tail call ccc  i8  @read_char()  
  %190 = alloca i64 
  store  i64 -1, i64* %190 
  %191 = load  i64, i64* %190 
  %192 = trunc i64 %191 to i8  
  %"1#tmp#4##0" = icmp ne i8 %"1#ch##1", %192 
  br i1 %"1#tmp#4##0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"drone.loop<0>[410bae77d3]"(i64  %"d##0", i8  %"1#ch##1")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"drone.loop<0>"(i64  %"d##0", i8  %"ch##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i8 %"ch##0", 32 
  %"1#tmp#1##0" = icmp ne i8 %"ch##0", 10 
  %"1#tmp#7##0" = and i1 %"1#tmp#0##0", %"1#tmp#1##0" 
  br i1 %"1#tmp#7##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#6##0" = icmp eq i8 %"ch##0", 112 
  br i1 %"2#tmp#6##0", label %if.then1, label %if.else1 
if.else:
  tail call fastcc  void  @"drone.gen#3<0>"(i64  %"d##0")  
  ret void 
if.then1:
  %195 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.194, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %195)  
  %196 = inttoptr i64 %"d##0" to i64* 
  %197 = getelementptr  i64, i64* %196, i64 0 
  %198 = load  i64, i64* %197 
  tail call ccc  void  @print_int(i64  %198)  
  %201 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.200, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %201)  
  %202 = add   i64 %"d##0", 8 
  %203 = inttoptr i64 %202 to i64* 
  %204 = getelementptr  i64, i64* %203, i64 0 
  %205 = load  i64, i64* %204 
  tail call ccc  void  @print_int(i64  %205)  
  %208 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.207, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %208)  
  %209 = add   i64 %"d##0", 16 
  %210 = inttoptr i64 %209 to i64* 
  %211 = getelementptr  i64, i64* %210, i64 0 
  %212 = load  i64, i64* %211 
  tail call ccc  void  @print_int(i64  %212)  
  %215 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.214, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %215)  
  %216 = add   i64 %"d##0", 24 
  %217 = inttoptr i64 %216 to i64* 
  %218 = getelementptr  i64, i64* %217, i64 0 
  %219 = load  i64, i64* %218 
  tail call ccc  void  @print_int(i64  %219)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"drone.gen#3<0>"(i64  %"d##0")  
  ret void 
if.else1:
  %220 = tail call fastcc  {i64, i1}  @"drone.do_action<0>"(i64  %"d##0", i8  %"ch##0")  
  %221 = extractvalue {i64, i1} %220, 0 
  %222 = extractvalue {i64, i1} %220, 1 
  %"5#tmp#5##0" = icmp eq i1 %222, 0 
  br i1 %"5#tmp#5##0", label %if.then2, label %if.else2 
if.then2:
  %225 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.224, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %225)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"drone.gen#3<0>"(i64  %221)  
  ret void 
if.else2:
  tail call fastcc  void  @"drone.gen#3<0>"(i64  %221)  
  ret void 
}


define external fastcc  void @"drone.loop<0>[410bae77d3]"(i64  %"d##0", i8  %"ch##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i8 %"ch##0", 32 
  %"1#tmp#1##0" = icmp ne i8 %"ch##0", 10 
  %"1#tmp#7##0" = and i1 %"1#tmp#0##0", %"1#tmp#1##0" 
  br i1 %"1#tmp#7##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#6##0" = icmp eq i8 %"ch##0", 112 
  br i1 %"2#tmp#6##0", label %if.then1, label %if.else1 
if.else:
  tail call fastcc  void  @"drone.gen#3<0>[6dacb8fd25]"(i64  %"d##0")  
  ret void 
if.then1:
  %228 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.227, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %228)  
  %229 = inttoptr i64 %"d##0" to i64* 
  %230 = getelementptr  i64, i64* %229, i64 0 
  %231 = load  i64, i64* %230 
  tail call ccc  void  @print_int(i64  %231)  
  %234 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.233, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %234)  
  %235 = add   i64 %"d##0", 8 
  %236 = inttoptr i64 %235 to i64* 
  %237 = getelementptr  i64, i64* %236, i64 0 
  %238 = load  i64, i64* %237 
  tail call ccc  void  @print_int(i64  %238)  
  %241 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.240, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %241)  
  %242 = add   i64 %"d##0", 16 
  %243 = inttoptr i64 %242 to i64* 
  %244 = getelementptr  i64, i64* %243, i64 0 
  %245 = load  i64, i64* %244 
  tail call ccc  void  @print_int(i64  %245)  
  %248 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.247, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %248)  
  %249 = add   i64 %"d##0", 24 
  %250 = inttoptr i64 %249 to i64* 
  %251 = getelementptr  i64, i64* %250, i64 0 
  %252 = load  i64, i64* %251 
  tail call ccc  void  @print_int(i64  %252)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"drone.gen#3<0>[6dacb8fd25]"(i64  %"d##0")  
  ret void 
if.else1:
  %253 = tail call fastcc  {i64, i1}  @"drone.do_action<0>[410bae77d3]"(i64  %"d##0", i8  %"ch##0")  
  %254 = extractvalue {i64, i1} %253, 0 
  %255 = extractvalue {i64, i1} %253, 1 
  %"5#tmp#5##0" = icmp eq i1 %255, 0 
  br i1 %"5#tmp#5##0", label %if.then2, label %if.else2 
if.then2:
  %258 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.257, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %258)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"drone.gen#3<0>[6dacb8fd25]"(i64  %254)  
  ret void 
if.else2:
  tail call fastcc  void  @"drone.gen#3<0>[6dacb8fd25]"(i64  %254)  
  ret void 
}


define external fastcc  void @"drone.print_info<0>"(i64  %"d##0")    {
entry:
  %261 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.260, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %261)  
  %262 = inttoptr i64 %"d##0" to i64* 
  %263 = getelementptr  i64, i64* %262, i64 0 
  %264 = load  i64, i64* %263 
  tail call ccc  void  @print_int(i64  %264)  
  %267 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.266, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %267)  
  %268 = add   i64 %"d##0", 8 
  %269 = inttoptr i64 %268 to i64* 
  %270 = getelementptr  i64, i64* %269, i64 0 
  %271 = load  i64, i64* %270 
  tail call ccc  void  @print_int(i64  %271)  
  %274 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.273, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %274)  
  %275 = add   i64 %"d##0", 16 
  %276 = inttoptr i64 %275 to i64* 
  %277 = getelementptr  i64, i64* %276, i64 0 
  %278 = load  i64, i64* %277 
  tail call ccc  void  @print_int(i64  %278)  
  %281 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @drone.280, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %281)  
  %282 = add   i64 %"d##0", 24 
  %283 = inttoptr i64 %282 to i64* 
  %284 = getelementptr  i64, i64* %283, i64 0 
  %285 = load  i64, i64* %284 
  tail call ccc  void  @print_int(i64  %285)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module drone.drone_info
  representation  : address
  public submods  : 
  public resources: 
  public procs    : drone.drone_info.=<0>
                    drone.drone_info.count<0>
                    drone.drone_info.count<1>
                    drone.drone_info.drone_info<0>
                    drone.drone_info.drone_info<1>
                    drone.drone_info.x<0>
                    drone.drone_info.x<1>
                    drone.drone_info.y<0>
                    drone.drone_info.y<1>
                    drone.drone_info.z<0>
                    drone.drone_info.z<1>
                    drone.drone_info.~=<0>
  imports         : use drone
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: drone.drone_info.=<0>
=(#left##0:drone.drone_info, #right##0:drone.drone_info, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#left##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int)
    foreign lpvm access(#left##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int)
    foreign lpvm access(#left##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#z##0:wybe.int)
    foreign lpvm access(~#left##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#count##0:wybe.int)
    foreign lpvm access(#right##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int)
    foreign lpvm access(#right##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int)
    foreign lpvm access(#right##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#z##0:wybe.int)
    foreign lpvm access(~#right##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#count##0:wybe.int)
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#z##0:wybe.int, ~#right#z##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#count##0:wybe.int, ~#right#count##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





count > public {inline} (0 calls)
0: drone.drone_info.count<0>
count(#rec##0:drone.drone_info, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
count > public {inline} (0 calls)
1: drone.drone_info.count<1>
count(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


drone_info > public {inline} (0 calls)
0: drone.drone_info.drone_info<0>
drone_info(x##0:wybe.int, y##0:wybe.int, z##0:wybe.int, count##0:wybe.int, ?#result##0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?#rec##0:drone.drone_info)
    foreign lpvm mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~x##0:wybe.int)
    foreign lpvm mutate(~#rec##1:drone.drone_info, ?#rec##2:drone.drone_info, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~y##0:wybe.int)
    foreign lpvm mutate(~#rec##2:drone.drone_info, ?#rec##3:drone.drone_info, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~z##0:wybe.int)
    foreign lpvm mutate(~#rec##3:drone.drone_info, ?#result##0:drone.drone_info, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~count##0:wybe.int)
drone_info > public {inline} (14 calls)
1: drone.drone_info.drone_info<1>
drone_info(?x##0:wybe.int, ?y##0:wybe.int, ?z##0:wybe.int, ?count##0:wybe.int, #result##0:drone.drone_info):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#result##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?x##0:wybe.int)
    foreign lpvm access(#result##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?y##0:wybe.int)
    foreign lpvm access(#result##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?z##0:wybe.int)
    foreign lpvm access(~#result##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?count##0:wybe.int)


x > public {inline} (0 calls)
0: drone.drone_info.x<0>
x(#rec##0:drone.drone_info, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
x > public {inline} (0 calls)
1: drone.drone_info.x<1>
x(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


y > public {inline} (0 calls)
0: drone.drone_info.y<0>
y(#rec##0:drone.drone_info, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
y > public {inline} (0 calls)
1: drone.drone_info.y<1>
y(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


z > public {inline} (0 calls)
0: drone.drone_info.z<0>
z(#rec##0:drone.drone_info, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
z > public {inline} (0 calls)
1: drone.drone_info.z<1>
z(#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:drone.drone_info, ?#rec##1:drone.drone_info, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


~= > public {inline} (0 calls)
0: drone.drone_info.~=<0>
~=(#left##0:drone.drone_info, #right##0:drone.drone_info, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#left##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int)
    foreign lpvm access(#left##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int)
    foreign lpvm access(#left##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int)
    foreign lpvm access(~#left##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int)
    foreign lpvm access(#right##0:drone.drone_info, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int)
    foreign lpvm access(#right##0:drone.drone_info, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int)
    foreign lpvm access(#right##0:drone.drone_info, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int)
    foreign lpvm access(~#right##0:drone.drone_info, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int)
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#7##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
    case ~tmp#11##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#12##0:wybe.bool) @int:nn:nn
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp#5##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#13##0:wybe.bool) @int:nn:nn
            case ~tmp#13##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
                foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
                foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)




  LLVM code       :

; ModuleID = 'drone.drone_info'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"drone.drone_info.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#left##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"#left##0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"#left##0", 24 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = inttoptr i64 %"#right##0" to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %19 = add   i64 %"#right##0", 8 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %23 = add   i64 %"#right##0", 16 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = add   i64 %"#right##0", 24 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %"1#tmp#1##0" = icmp eq i64 %3, %18 
  br i1 %"1#tmp#1##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#2##0" = icmp eq i64 %7, %22 
  br i1 %"2#tmp#2##0", label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %"4#tmp#3##0" = icmp eq i64 %11, %26 
  br i1 %"4#tmp#3##0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6##success##0" = icmp eq i64 %15, %30 
  ret i1 %"6##success##0" 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"drone.drone_info.count<0>"(i64  %"#rec##0")    {
entry:
  %31 = add   i64 %"#rec##0", 24 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  ret i64 %34 
}


define external fastcc  i64 @"drone.drone_info.count<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %35 = trunc i64 32 to i32  
  %36 = tail call ccc  i8*  @wybe_malloc(i32  %35)  
  %37 = ptrtoint i8* %36 to i64 
  %38 = inttoptr i64 %37 to i8* 
  %39 = inttoptr i64 %"#rec##0" to i8* 
  %40 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %38, i8*  %39, i32  %40, i32  8, i1  0)  
  %41 = add   i64 %37, 24 
  %42 = inttoptr i64 %41 to i64* 
  %43 = getelementptr  i64, i64* %42, i64 0 
  store  i64 %"#field##0", i64* %43 
  ret i64 %37 
}


define external fastcc  i64 @"drone.drone_info.drone_info<0>"(i64  %"x##0", i64  %"y##0", i64  %"z##0", i64  %"count##0")    {
entry:
  %44 = trunc i64 32 to i32  
  %45 = tail call ccc  i8*  @wybe_malloc(i32  %44)  
  %46 = ptrtoint i8* %45 to i64 
  %47 = inttoptr i64 %46 to i64* 
  %48 = getelementptr  i64, i64* %47, i64 0 
  store  i64 %"x##0", i64* %48 
  %49 = add   i64 %46, 8 
  %50 = inttoptr i64 %49 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  store  i64 %"y##0", i64* %51 
  %52 = add   i64 %46, 16 
  %53 = inttoptr i64 %52 to i64* 
  %54 = getelementptr  i64, i64* %53, i64 0 
  store  i64 %"z##0", i64* %54 
  %55 = add   i64 %46, 24 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  store  i64 %"count##0", i64* %57 
  ret i64 %46 
}


define external fastcc  {i64, i64, i64, i64} @"drone.drone_info.drone_info<1>"(i64  %"#result##0")    {
entry:
  %58 = inttoptr i64 %"#result##0" to i64* 
  %59 = getelementptr  i64, i64* %58, i64 0 
  %60 = load  i64, i64* %59 
  %61 = add   i64 %"#result##0", 8 
  %62 = inttoptr i64 %61 to i64* 
  %63 = getelementptr  i64, i64* %62, i64 0 
  %64 = load  i64, i64* %63 
  %65 = add   i64 %"#result##0", 16 
  %66 = inttoptr i64 %65 to i64* 
  %67 = getelementptr  i64, i64* %66, i64 0 
  %68 = load  i64, i64* %67 
  %69 = add   i64 %"#result##0", 24 
  %70 = inttoptr i64 %69 to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  %72 = load  i64, i64* %71 
  %73 = insertvalue {i64, i64, i64, i64} undef, i64 %60, 0 
  %74 = insertvalue {i64, i64, i64, i64} %73, i64 %64, 1 
  %75 = insertvalue {i64, i64, i64, i64} %74, i64 %68, 2 
  %76 = insertvalue {i64, i64, i64, i64} %75, i64 %72, 3 
  ret {i64, i64, i64, i64} %76 
}


define external fastcc  i64 @"drone.drone_info.x<0>"(i64  %"#rec##0")    {
entry:
  %77 = inttoptr i64 %"#rec##0" to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  %79 = load  i64, i64* %78 
  ret i64 %79 
}


define external fastcc  i64 @"drone.drone_info.x<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %80 = trunc i64 32 to i32  
  %81 = tail call ccc  i8*  @wybe_malloc(i32  %80)  
  %82 = ptrtoint i8* %81 to i64 
  %83 = inttoptr i64 %82 to i8* 
  %84 = inttoptr i64 %"#rec##0" to i8* 
  %85 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %83, i8*  %84, i32  %85, i32  8, i1  0)  
  %86 = inttoptr i64 %82 to i64* 
  %87 = getelementptr  i64, i64* %86, i64 0 
  store  i64 %"#field##0", i64* %87 
  ret i64 %82 
}


define external fastcc  i64 @"drone.drone_info.y<0>"(i64  %"#rec##0")    {
entry:
  %88 = add   i64 %"#rec##0", 8 
  %89 = inttoptr i64 %88 to i64* 
  %90 = getelementptr  i64, i64* %89, i64 0 
  %91 = load  i64, i64* %90 
  ret i64 %91 
}


define external fastcc  i64 @"drone.drone_info.y<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %92 = trunc i64 32 to i32  
  %93 = tail call ccc  i8*  @wybe_malloc(i32  %92)  
  %94 = ptrtoint i8* %93 to i64 
  %95 = inttoptr i64 %94 to i8* 
  %96 = inttoptr i64 %"#rec##0" to i8* 
  %97 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %95, i8*  %96, i32  %97, i32  8, i1  0)  
  %98 = add   i64 %94, 8 
  %99 = inttoptr i64 %98 to i64* 
  %100 = getelementptr  i64, i64* %99, i64 0 
  store  i64 %"#field##0", i64* %100 
  ret i64 %94 
}


define external fastcc  i64 @"drone.drone_info.z<0>"(i64  %"#rec##0")    {
entry:
  %101 = add   i64 %"#rec##0", 16 
  %102 = inttoptr i64 %101 to i64* 
  %103 = getelementptr  i64, i64* %102, i64 0 
  %104 = load  i64, i64* %103 
  ret i64 %104 
}


define external fastcc  i64 @"drone.drone_info.z<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %105 = trunc i64 32 to i32  
  %106 = tail call ccc  i8*  @wybe_malloc(i32  %105)  
  %107 = ptrtoint i8* %106 to i64 
  %108 = inttoptr i64 %107 to i8* 
  %109 = inttoptr i64 %"#rec##0" to i8* 
  %110 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %108, i8*  %109, i32  %110, i32  8, i1  0)  
  %111 = add   i64 %107, 16 
  %112 = inttoptr i64 %111 to i64* 
  %113 = getelementptr  i64, i64* %112, i64 0 
  store  i64 %"#field##0", i64* %113 
  ret i64 %107 
}


define external fastcc  i1 @"drone.drone_info.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %114 = inttoptr i64 %"#left##0" to i64* 
  %115 = getelementptr  i64, i64* %114, i64 0 
  %116 = load  i64, i64* %115 
  %117 = add   i64 %"#left##0", 8 
  %118 = inttoptr i64 %117 to i64* 
  %119 = getelementptr  i64, i64* %118, i64 0 
  %120 = load  i64, i64* %119 
  %121 = add   i64 %"#left##0", 16 
  %122 = inttoptr i64 %121 to i64* 
  %123 = getelementptr  i64, i64* %122, i64 0 
  %124 = load  i64, i64* %123 
  %125 = add   i64 %"#left##0", 24 
  %126 = inttoptr i64 %125 to i64* 
  %127 = getelementptr  i64, i64* %126, i64 0 
  %128 = load  i64, i64* %127 
  %129 = inttoptr i64 %"#right##0" to i64* 
  %130 = getelementptr  i64, i64* %129, i64 0 
  %131 = load  i64, i64* %130 
  %132 = add   i64 %"#right##0", 8 
  %133 = inttoptr i64 %132 to i64* 
  %134 = getelementptr  i64, i64* %133, i64 0 
  %135 = load  i64, i64* %134 
  %136 = add   i64 %"#right##0", 16 
  %137 = inttoptr i64 %136 to i64* 
  %138 = getelementptr  i64, i64* %137, i64 0 
  %139 = load  i64, i64* %138 
  %140 = add   i64 %"#right##0", 24 
  %141 = inttoptr i64 %140 to i64* 
  %142 = getelementptr  i64, i64* %141, i64 0 
  %143 = load  i64, i64* %142 
  %"1#tmp#11##0" = icmp eq i64 %116, %131 
  br i1 %"1#tmp#11##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#12##0" = icmp eq i64 %120, %135 
  br i1 %"2#tmp#12##0", label %if.then1, label %if.else1 
if.else:
  %"3##success##0" = xor i1 0, 1 
  ret i1 %"3##success##0" 
if.then1:
  %"4#tmp#13##0" = icmp eq i64 %124, %139 
  br i1 %"4#tmp#13##0", label %if.then2, label %if.else2 
if.else1:
  %"5##success##0" = xor i1 0, 1 
  ret i1 %"5##success##0" 
if.then2:
  %"6#tmp#0##0" = icmp eq i64 %143, %128 
  %"6##success##0" = xor i1 %"6#tmp#0##0", 1 
  ret i1 %"6##success##0" 
if.else2:
  %"7##success##0" = xor i1 0, 1 
  ret i1 %"7##success##0" 
}

----------------------------------------------------------------------



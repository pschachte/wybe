----------------------------------------------------------------------
- build & execute without multiple specialization
----------------------------------------------------------------------
x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
tests with alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
original x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
--------------------
tests without alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
--------------------
 ** malloc count of building lists: 54
 ** malloc count of test(aliased): 307
 ** malloc count of test(non-aliased): 307

----------------------------------------------------------------------


----------------------------------------------------------------------
- build & execute with multiple specialization
----------------------------------------------------------------------
x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
tests with alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
original x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
--------------------
tests without alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
--------------------
 ** malloc count of building lists: 27
 ** malloc count of test(aliased): 99
 ** malloc count of test(non-aliased): 72

----------------------------------------------------------------------


----------------------------------------------------------------------
- final dump (with multiple specialization)
----------------------------------------------------------------------
======================================================================
AFTER BUILDING MAIN:
 Module 
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    use int_list
                    use int_list_test
                    use wybe
                    use wybe.array
                    use wybe.bool
                    use wybe.c_string
                    use wybe.char
                    use wybe.comparison
                    use wybe.control
                    use wybe.count
                    use wybe.float
                    use wybe.int
                    use wybe.io
                    use wybe.list
                    use wybe.machine_word
                    use wybe.memory_management
                    use wybe.phantom
                    use wybe.predicate
                    use wybe.range
                    use wybe.string
  resources       : 
  procs           : 

module top-level code > {terminal,inline,impure} (0 calls)
0: .<0>
(%argc##0:wybe.int, %argv##0:wybe.array.raw_array(wybe.c_string), %?exit_code##0:wybe.int)<{}; {<<command_line.exit_code>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(~%argc##0:wybe.int, <<command_line.argc>>:wybe.int)
    foreign lpvm store(~%argv##0:wybe.array.raw_array(wybe.c_string), <<command_line.argv>>:wybe.array.raw_array(wybe.c_string))
    foreign c {impure} gc_init @memory_management:nn:nn
    foreign lpvm store(0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    command_line.<0><{<<command_line.argc>>, <<command_line.argv>>}; {<<command_line.arguments>>, <<command_line.command>>, <<command_line.exit_code>>}> #2
    int_list_test.<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3
    foreign lpvm load(<<command_line.exit_code>>:wybe.int, ?%exit_code##0:wybe.int)
    foreign c {semipure,terminal} exit(exit_code##0:wybe.int)

LLVM code       : None

--------------------------------------------------
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    arguments: command_line.arguments
                    argv: command_line.argv
                    command: command_line.command
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:nn:nn)]
                    arguments: fromList [(command_line.arguments,wybe.array(wybe.c_string) = array(argc @command_line:nn:nn, argv @command_line:nn:nn) @command_line:nn:nn @command_line:nn:nn)]
                    argv: fromList [(command_line.argv,wybe.array.raw_array(wybe.c_string) @command_line:nn:nn)]
                    command: fromList [(command_line.command,wybe.c_string = c"" @command_line:nn:nn @command_line:nn:nn)]
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:nn:nn @command_line:nn:nn)]
  procs           : 

module top-level code > public {semipure} (0 calls)
0: command_line.<0>
()<{<<command_line.argc>>, <<command_line.argv>>}; {<<command_line.arguments>>, <<command_line.command>>, <<command_line.exit_code>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(1,(wybe.array.[|]<0>,fromList [NonAliasedParamCond 2 []]))]
    foreign lpvm load(<<command_line.argc>>:wybe.int, ?%tmp#1##0:wybe.int) @command_line:nn:nn
    foreign lpvm load(<<command_line.argv>>:wybe.array.raw_array(wybe.c_string), ?%tmp#3##0:wybe.array.raw_array(wybe.c_string)) @command_line:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#10##0:wybe.array(T)) @array:nn:nn
    foreign lpvm mutate(~tmp#10##0:wybe.array(T), ?tmp#11##0:wybe.array(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @array:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.array(T), ?tmp#0##0:wybe.array(wybe.c_string), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.array.raw_array(T)) @array:nn:nn
    foreign lpvm store(tmp#0##0:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
    foreign lpvm store(c"":wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn
    wybe.array.[|]<0>[785a827a1b](?command##1:wybe.c_string, ?arguments##2:wybe.array(wybe.c_string), ~tmp#0##0:wybe.array(wybe.c_string), ?tmp#7##0:wybe.bool) #1 @command_line:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign c {terminal,semipure} error_exit(c"command_line:18:15":wybe.c_string, c"Erroneous program argument vector":wybe.c_string) @control:nn:nn

    1:
        foreign lpvm store(~%arguments##2:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
        foreign lpvm store(~%command##1:wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn
        foreign lpvm store(0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn



set_exit_code > public {inline} (0 calls)
0: command_line.set_exit_code<0>
set_exit_code(code##0:wybe.int)<{}; {<<command_line.exit_code>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(~code##0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn

  LLVM code       :

; ModuleID = 'command_line'


 


@"resource#command_line.argc" =    global i64 undef


@"resource#command_line.arguments" =    global i64 undef


@"resource#command_line.argv" =    global i64 undef


@"resource#command_line.command" =    global i64 undef


@"resource#command_line.exit_code" =    global i64 undef


@command_line.0 =    constant [?? x i8] c"\00"


@command_line.2 =    constant [?? x i8] c"Erroneous program argument vector\00"


@command_line.1 =    constant [?? x i8] c"command_line:18:15\00"


declare external ccc  void @error_exit(i64, i64)    


declare external fastcc  {i64, i64, i1} @"wybe.array.[|]<0>[785a827a1b]"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"command_line.<0>"()    {
entry:
  %0 = load  i64, i64* @"resource#command_line.argc" 
  %1 = load  i64, i64* @"resource#command_line.argv" 
  %2 = trunc i64 16 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %0, i64* %5 
  %6 = add   i64 %4, 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %1, i64* %7 
  store  i64 %4, i64* @"resource#command_line.arguments" 
  store  i64 ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.0, i32 0, i32 0) to i64), i64* @"resource#command_line.command" 
  %8 = tail call fastcc  {i64, i64, i1}  @"wybe.array.[|]<0>[785a827a1b]"(i64  %4)  
  %9 = extractvalue {i64, i64, i1} %8, 0 
  %10 = extractvalue {i64, i64, i1} %8, 1 
  %11 = extractvalue {i64, i64, i1} %8, 2 
  br i1 %11, label %if.then, label %if.else 
if.then:
  store  i64 %10, i64* @"resource#command_line.arguments" 
  store  i64 %9, i64* @"resource#command_line.command" 
  store  i64 0, i64* @"resource#command_line.exit_code" 
  ret void 
if.else:
  tail call ccc  void  @error_exit(i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.1, i32 0, i32 0) to i64), i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.2, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  void @"command_line.set_exit_code<0>"(i64  %"code##0") alwaysinline   {
entry:
  store  i64 %"code##0", i64* @"resource#command_line.exit_code" 
  ret void 
}
--------------------------------------------------
 Module int_list
  representation  : (not a type)
  public submods  : int_list -> int_list.int_list
  public resources: 
  public procs    : int_list.append<0>
                    int_list.count<0>
                    int_list.extend<0>
                    int_list.index<0>
                    int_list.insert<0>
                    int_list.pop<0>
                    int_list.print<0>
                    int_list.println<0>
                    int_list.range<0>
                    int_list.remove<0>
                    int_list.reverse<0>
                    int_list.sort<0>
                    int_list.int_list.=<0>
                    int_list.int_list.cons<0>
                    int_list.int_list.cons<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.nil<0>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
                    int_list.int_list.~=<0>
  imports         : public use int_list.int_list
                    use wybe
  resources       : 
  submodules      : int_list.int_list
  procs           : 

append > public (0 calls)
0: int_list.append<0>
append(lst##0:int_list.int_list, v##0:wybe.int, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~tmp#5##0:int_list.int_list, ?tmp#6##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~tmp#6##0:int_list.int_list, ?tmp#7##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:int_list.int_list) @int_list:nn:nn
    int_list.extend<0>(~lst##0:int_list.int_list, ~tmp#7##0:int_list.int_list, outByReference #result##0:int_list.int_list) #2 @int_list:nn:nn


count > public (3 calls)
0: int_list.count<0>
count(lst##0:int_list.int_list, x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        int_list.count<0>(~t##0:int_list.int_list, x##0:wybe.int, ?tmp#2##0:wybe.int) #1 @int_list:nn:nn
        foreign llvm icmp_eq(~h##0:wybe.int, ~x##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            foreign llvm move(~tmp#2##0:wybe.int, ?#result##0:wybe.int) @int:nn:nn

        1:
            foreign llvm add(~tmp#2##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @int:nn:nn




count#cont#1 > {inline} (2 calls)
0: int_list.count#cont#1<0>
count#cont#1(tmp#2##0:wybe.int, tmp#3##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~tmp#2##0:wybe.int, ~tmp#3##0:wybe.int, ?#result##0:wybe.int) @int:nn:nn


extend > public (3 calls)
0: int_list.extend<0>[410bae77d3]
extend(lst1##0:int_list.int_list, lst2##0:int_list.int_list, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst2##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst1##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~lst2##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst1##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst1##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:int_list.int_list, ?tmp#9##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
        int_list.extend<0>(~t##0:int_list.int_list, ~lst2##0:int_list.int_list, outByReference tmp#2##0:int_list.int_list) #1 @int_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:int_list.int_list) @int_list:nn:nn



greater > (3 calls)
0: int_list.greater<0>
greater(lst##0:int_list.int_list, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_sge(h##0:wybe.int, v##0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            int_list.greater<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #4 @int_list:nn:nn

        1:
            foreign lpvm alloc(16:wybe.int, ?tmp#14##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.greater<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~tmp#15##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn




index > public {inline} (0 calls)
0: int_list.index<0>
index(lst##0:int_list.int_list, x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.index_helper<0>(~lst##0:int_list.int_list, 0:wybe.int, ~x##0:wybe.int, ?#result##0:wybe.int) #0 @int_list:nn:nn


index_helper > (2 calls)
0: int_list.index_helper<0>
index_helper(lst##0:int_list.int_list, idx##0:wybe.int, x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(-1:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(~h##0:wybe.int, x##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            foreign llvm add(~idx##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @int:nn:nn
            int_list.index_helper<0>(~t##0:int_list.int_list, ~tmp#3##0:wybe.int, ~x##0:wybe.int, ?#result##0:wybe.int) #3 @int_list:nn:nn

        1:
            foreign llvm move(~idx##0:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn




insert > public (2 calls)
0: int_list.insert<0>[410bae77d3]
insert(lst##0:int_list.int_list, idx##0:wybe.int, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(4,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]])),(7,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_eq(idx##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool) @int:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#13##0:wybe.bool)
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int) @int:nn:nn
            int_list.insert<0>(0:int_list.int_list, ~tmp#7##0:wybe.int, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #7 @int_list:nn:nn

        1:
            foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
            foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#20##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#20##0:int_list.int_list, ?tmp#21##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.insert<0>(~t##0:int_list.int_list, ~tmp#5##0:wybe.int, ~v##0:wybe.int, outByReference tmp#4##0:int_list.int_list) #4 @int_list:nn:nn
            foreign lpvm mutate(~tmp#21##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#4##0:int_list.int_list) @int_list:nn:nn


    1:
        foreign lpvm alloc(16:wybe.int, ?tmp#25##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#25##0:int_list.int_list, ?tmp#26##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#26##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lst##0:int_list.int_list) @int_list:nn:nn



lesser > (3 calls)
0: int_list.lesser<0>
lesser(lst##0:int_list.int_list, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_slt(h##0:wybe.int, v##0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            int_list.lesser<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #4 @int_list:nn:nn

        1:
            foreign lpvm alloc(16:wybe.int, ?tmp#14##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.lesser<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~tmp#15##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn




pop > public (1 calls)
0: int_list.pop<0>[410bae77d3]
pop(lst##0:int_list.int_list, idx##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(3,(int_list.pop<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(idx##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @int:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#16##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#16##0:int_list.int_list, ?tmp#17##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.pop<0>(~t##0:int_list.int_list, ~tmp#4##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #3 @int_list:nn:nn
            foreign lpvm mutate(~tmp#17##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn

        1:
            foreign llvm move(~t##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn




print > public (2 calls)
0: int_list.print<0>
print(x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool)
    case ~tmp#2##0:wybe.bool of
    0:

    1:
        foreign lpvm access(x##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~x##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~h##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
        foreign c putchar(' ':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @char:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn
        int_list.print<0>(~t##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @int_list:nn:nn



println > public {inline} (0 calls)
0: int_list.println<0>
println(x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.print<0>(~x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#0##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#0##0:wybe.phantom, ?tmp#1##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#1##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


range > public {inline} (0 calls)
0: int_list.range<0>
range(start##0:wybe.int, stop##0:wybe.int, step##0:wybe.int, ?result##1:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.range#cont#1<0>(0:int_list.int_list, ~start##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, ?result##1:int_list.int_list) #1 @int_list:nn:nn


range#cont#1 > (2 calls)
0: int_list.range#cont#1<0>[410bae77d3]
range#cont#1(result##0:int_list.int_list, start##0:wybe.int, step##0:wybe.int, stop##0:wybe.int, ?result##1:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(3,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.range#cont#1<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_slt(start##0:wybe.int, stop##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        int_list.reverse_helper<0>(~result##0:int_list.int_list, 0:int_list.int_list, ?result##1:int_list.int_list) #3 @int_list:nn:nn

    1:
        foreign lpvm alloc(16:wybe.int, ?tmp#11##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#11##0:int_list.int_list, ?tmp#12##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#12##0:int_list.int_list, ?tmp#13##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result##0:int_list.int_list) @int_list:nn:nn
        foreign llvm add(~start##0:wybe.int, step##0:wybe.int, ?tmp#14##0:wybe.int) @int:nn:nn
        int_list.range#cont#1<0>(~tmp#13##0:int_list.int_list, ~tmp#14##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, ?result##1:int_list.int_list) #4 @int_list:nn:nn



range#cont#2 > {inline} (1 calls)
0: int_list.range#cont#2<0>
range#cont#2(result##0:int_list.int_list, start##0:wybe.int, step##0:wybe.int, stop##0:wybe.int, ?result##2:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~tmp#5##0:int_list.int_list, ?tmp#6##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~tmp#6##0:int_list.int_list, ?tmp#7##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result##0:int_list.int_list) @int_list:nn:nn
    foreign llvm add(~start##0:wybe.int, step##0:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
    int_list.range#cont#1<0>(~tmp#7##0:int_list.int_list, ~tmp#2##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, ?result##2:int_list.int_list) #2 @int_list:nn:nn


remove > public (1 calls)
0: int_list.remove<0>[410bae77d3]
remove(lst##0:int_list.int_list, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.remove<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(h##0:wybe.int, v##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
        case ~tmp#5##0:wybe.bool of
        0:
            foreign lpvm alloc(16:wybe.int, ?tmp#13##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#13##0:int_list.int_list, ?tmp#14##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.remove<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn

        1:
            foreign llvm move(~t##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn




reverse > public {inline} (1 calls)
0: int_list.reverse<0>
reverse(lst##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.reverse_helper<0>(~lst##0:int_list.int_list, 0:int_list.int_list, ?#result##0:int_list.int_list) #1 @int_list:nn:nn


reverse_helper > (2 calls)
0: int_list.reverse_helper<0>
reverse_helper(lst##0:int_list.int_list, acc##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,acc##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~acc##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:int_list.int_list, ?tmp#9##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:int_list.int_list, ?tmp#10##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~acc##0:int_list.int_list) @int_list:nn:nn
        int_list.reverse_helper<0>(~t##0:int_list.int_list, ~tmp#10##0:int_list.int_list, ?#result##0:int_list.int_list) #2 @int_list:nn:nn



sort > public (2 calls)
0: int_list.sort<0>[410bae77d3]
sort(lst##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(3,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(6,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        int_list.lesser<0>(t##0:int_list.int_list, h##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #1 @int_list:nn:nn
        int_list.sort<0>[410bae77d3](~tmp#3##0:int_list.int_list, ?tmp#2##0:int_list.int_list) #2 @int_list:nn:nn
        int_list.greater<0>(~t##0:int_list.int_list, h##0:wybe.int, outByReference tmp#6##0:int_list.int_list) #3 @int_list:nn:nn
        int_list.sort<0>[410bae77d3](~tmp#6##0:int_list.int_list, ?tmp#5##0:int_list.int_list) #4 @int_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#13##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#13##0:int_list.int_list, ?tmp#14##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:int_list.int_list) @int_list:nn:nn
        int_list.extend<0>[410bae77d3](~tmp#2##0:int_list.int_list, ~tmp#15##0:int_list.int_list, outByReference #result##0:int_list.int_list) #6 @int_list:nn:nn


LLVM code       : None

--------------------------------------------------
 Module int_list.int_list
  representation  : address
  public submods  : 
  public resources: 
  public procs    : int_list.int_list.=<0>
                    int_list.int_list.cons<0>
                    int_list.int_list.cons<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.nil<0>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
                    int_list.int_list.~=<0>
  imports         : use int_list
                    use wybe
  resources       : 
  procs           : 

= > public (2 calls)
0: int_list.int_list.=<0>
=(#left##0:int_list.int_list, #right##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:int_list.int_list, 0:int_list.int_list, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#head##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~#left##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#tail##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
        case ~tmp#9##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#head##0:wybe.int) @int_list:nn:nn
            foreign lpvm access(~#right##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#tail##0:int_list.int_list) @int_list:nn:nn
            foreign llvm icmp_eq(~#left#head##0:wybe.int, ~#right#head##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                int_list.int_list.=<0>(~#left#tail##0:int_list.int_list, ~#right#tail##0:int_list.int_list, ?#success##0:wybe.bool) #3





cons > public {inline} (0 calls)
0: int_list.int_list.cons<0>
cons(head##0:wybe.int, tail##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~#rec##1:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail##0:int_list.int_list) @int_list:nn:nn
cons > public {inline} (12 calls)
1: int_list.int_list.cons<1>
cons(?head##0:wybe.int, ?tail##0:int_list.int_list, #result##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head##0:wybe.int)
        foreign llvm move(undef:int_list.int_list, ?tail##0:int_list.int_list)

    1:
        foreign lpvm access(#result##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~#result##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



head > public {inline} (0 calls)
0: int_list.int_list.head<0>
head(#rec##0:int_list.int_list, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

head > public {inline} (0 calls)
1: int_list.int_list.head<1>
head(#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:int_list.int_list, ?#rec##1:int_list.int_list)

    1:
        foreign lpvm mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



nil > public {inline} (0 calls)
0: int_list.int_list.nil<0>
nil(?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list)


tail > public {inline} (0 calls)
0: int_list.int_list.tail<0>
tail(#rec##0:int_list.int_list, ?#result##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:int_list.int_list, ?#result##0:int_list.int_list)

    1:
        foreign lpvm access(~#rec##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

tail > public {inline} (0 calls)
1: int_list.int_list.tail<1>
tail(#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, #field##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:int_list.int_list, ?#rec##1:int_list.int_list)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: int_list.int_list.~=<0>
~=(#left##0:int_list.int_list, #right##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.int_list.=<0>(~#left##0:int_list.int_list, ~#right##0:int_list.int_list, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

LLVM code       : None

--------------------------------------------------
 Module int_list_test
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : int_list_test.<0>
  imports         : use command_line
                    use int_list
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: int_list_test.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(24,(int_list_test.test_int_list<0>,fromList [NonAliasedParamCond 0 [],NonAliasedParamCond 1 [],NonAliasedParamCond 2 []])),(34,(int_list.range#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(35,(int_list.range#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(36,(int_list.range#cont#1<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign c {impure} malloc_count(?mc1##0:wybe.int) @memory_management:nn:nn
    int_list.range#cont#1<0>[410bae77d3](0:int_list.int_list, 1:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp#0##0:int_list.int_list) #34 @int_list:nn:nn
    int_list.range#cont#1<0>[410bae77d3](0:int_list.int_list, 2:wybe.int, 2:wybe.int, 20:wybe.int, ?tmp#1##0:int_list.int_list) #35 @int_list:nn:nn
    int_list.range#cont#1<0>[410bae77d3](0:int_list.int_list, 3:wybe.int, 3:wybe.int, 30:wybe.int, ?tmp#2##0:int_list.int_list) #36 @int_list:nn:nn
    wybe.string.print<0>("x y z:":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #37 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #38 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#1##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #39 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#22##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #40 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#25##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#25##0:wybe.phantom, ?tmp#26##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#26##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} malloc_count(?mc2##0:wybe.int) @memory_management:nn:nn
    foreign llvm sub(~mc2##0:wybe.int, ~mc1##0:wybe.int, ?tmp#3##0:wybe.int) @int:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #41 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#31##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("tests with alias":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #42 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#33##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} malloc_count(?mc1##1:wybe.int) @memory_management:nn:nn
    int_list_test.test_int_list<0>(tmp#0##0:int_list.int_list, tmp#1##0:int_list.int_list, tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #13 @int_list_test:nn:nn
    foreign c {impure} malloc_count(?mc2##1:wybe.int) @memory_management:nn:nn
    foreign llvm sub(~mc2##1:wybe.int, ~mc1##1:wybe.int, ?tmp#4##0:wybe.int) @int:nn:nn
    wybe.string.print<0>("original x y z:":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #43 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#38##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#38##0:wybe.phantom, ?tmp#39##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#39##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #44 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#41##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#41##0:wybe.phantom, ?tmp#42##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#42##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#1##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #45 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#44##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#44##0:wybe.phantom, ?tmp#45##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#45##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #46 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#47##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#47##0:wybe.phantom, ?tmp#48##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#48##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #47 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#50##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#50##0:wybe.phantom, ?tmp#51##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#51##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #48 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#53##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#53##0:wybe.phantom, ?tmp#54##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#54##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("tests without alias":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #49 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#56##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#56##0:wybe.phantom, ?tmp#57##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#57##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} malloc_count(?mc1##2:wybe.int) @memory_management:nn:nn
    int_list_test.test_int_list<0>[9e35cb823b](~tmp#0##0:int_list.int_list, ~tmp#1##0:int_list.int_list, ~tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #24 @int_list_test:nn:nn
    foreign c {impure} malloc_count(?mc2##2:wybe.int) @memory_management:nn:nn
    foreign llvm sub(~mc2##2:wybe.int, ~mc1##2:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #50 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#61##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#61##0:wybe.phantom, ?tmp#62##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#62##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>(" ** malloc count of building lists: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #28 @int_list_test:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#64##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#3##0:wybe.int, ~tmp#64##0:wybe.phantom, ?tmp#65##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#65##0:wybe.phantom, ?tmp#66##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#66##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>(" ** malloc count of test(aliased): ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #30 @int_list_test:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#68##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#4##0:wybe.int, ~tmp#68##0:wybe.phantom, ?tmp#69##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#69##0:wybe.phantom, ?tmp#70##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#70##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>(" ** malloc count of test(non-aliased): ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #32 @int_list_test:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#72##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#5##0:wybe.int, ~tmp#72##0:wybe.phantom, ?tmp#73##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#73##0:wybe.phantom, ?tmp#74##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#74##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


test_int_list > (2 calls)
0: int_list_test.test_int_list<0>
test_int_list(x##0:int_list.int_list, y##0:int_list.int_list, z##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 1,InterestingUnaliased 2]
  MultiSpeczDepInfo: [(2,(int_list.append<0>,fromList [NonAliasedParamCond 0 [1]])),(7,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(8,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(11,(int_list.insert<0>,fromList [NonAliasedParamCond 0 []])),(12,(int_list.pop<0>,fromList [NonAliasedParamCond 0 []])),(13,(int_list.remove<0>,fromList [NonAliasedParamCond 0 []])),(16,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(19,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(20,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [2]]))]
    int_list.reverse_helper<0>(~x##0:int_list.int_list, 0:int_list.int_list, ?x##1:int_list.int_list) #19 @int_list:nn:nn
    int_list.reverse_helper<0>(~z##0:int_list.int_list, 0:int_list.int_list, ?z##1:int_list.int_list) #20 @int_list:nn:nn
    int_list.append<0>(~y##0:int_list.int_list, 99:wybe.int, ?tmp#0##0:int_list.int_list) #2 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #21 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(x##1:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #22 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#13##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #23 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(z##1:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #24 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#18##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#19##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.extend<0>[410bae77d3](~x##1:int_list.int_list, ~tmp#0##0:int_list.int_list, outByReference tmp#1##0:int_list.int_list) #7 @int_list_test:nn:nn
    int_list.extend<0>[410bae77d3](~tmp#1##0:int_list.int_list, ~z##1:int_list.int_list, outByReference tmp#2##0:int_list.int_list) #8 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #25 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #26 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#24##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.insert<0>[410bae77d3](~tmp#2##0:int_list.int_list, 4:wybe.int, 78:wybe.int, outByReference tmp#3##0:int_list.int_list) #11 @int_list_test:nn:nn
    int_list.pop<0>[410bae77d3](~tmp#3##0:int_list.int_list, 20:wybe.int, outByReference tmp#4##0:int_list.int_list) #12 @int_list_test:nn:nn
    int_list.remove<0>[410bae77d3](~tmp#4##0:int_list.int_list, 2:wybe.int, outByReference tmp#5##0:int_list.int_list) #13 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #27 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#28##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#5##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #28 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#31##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.sort<0>[410bae77d3](~tmp#5##0:int_list.int_list, ?l##5:int_list.int_list) #16 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #29 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#33##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(~l##5:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #30 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#36##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#36##0:wybe.phantom, ?tmp#37##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#37##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

LLVM code       : None

======================================================================
AFTER EVERYTHING:
 Module 
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    use int_list
                    use int_list_test
                    use wybe
                    use wybe.array
                    use wybe.bool
                    use wybe.c_string
                    use wybe.char
                    use wybe.comparison
                    use wybe.control
                    use wybe.count
                    use wybe.float
                    use wybe.int
                    use wybe.io
                    use wybe.list
                    use wybe.machine_word
                    use wybe.memory_management
                    use wybe.phantom
                    use wybe.predicate
                    use wybe.range
                    use wybe.string
  resources       : 
  procs           : 

module top-level code > {terminal,inline,impure} (0 calls)
0: .<0>
(%argc##0:wybe.int, %argv##0:wybe.array.raw_array(wybe.c_string), %?exit_code##0:wybe.int)<{}; {<<command_line.exit_code>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(~%argc##0:wybe.int, <<command_line.argc>>:wybe.int)
    foreign lpvm store(~%argv##0:wybe.array.raw_array(wybe.c_string), <<command_line.argv>>:wybe.array.raw_array(wybe.c_string))
    foreign c {impure} gc_init @memory_management:nn:nn
    foreign lpvm store(0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    command_line.<0><{<<command_line.argc>>, <<command_line.argv>>}; {<<command_line.arguments>>, <<command_line.command>>, <<command_line.exit_code>>}> #2
    int_list_test.<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3
    foreign lpvm load(<<command_line.exit_code>>:wybe.int, ?%exit_code##0:wybe.int)
    foreign c {semipure,terminal} exit(exit_code##0:wybe.int)

  LLVM code       :

; ModuleID = ''


 


@"resource#command_line.argc" = external   global i64 


@"resource#command_line.argv" = external   global i64 


@"resource#command_line.exit_code" = external   global i64 


declare external ccc  void @exit(i64)    


declare external fastcc  void @"int_list_test.<0>"()    


declare external fastcc  void @"command_line.<0>"()    


declare external ccc  void @gc_init()    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external ccc  i64 @main(i64  %"argc##0", i64  %"argv##0") alwaysinline   {
entry:
  store  i64 %"argc##0", i64* @"resource#command_line.argc" 
  store  i64 %"argv##0", i64* @"resource#command_line.argv" 
  tail call ccc  void  @gc_init()  
  tail call fastcc  void  @"command_line.<0>"()  
  tail call fastcc  void  @"int_list_test.<0>"()  
  %0 = load  i64, i64* @"resource#command_line.exit_code" 
  tail call ccc  void  @exit(i64  %0)  
  ret i64 %0 
}
--------------------------------------------------
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    arguments: command_line.arguments
                    argv: command_line.argv
                    command: command_line.command
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:nn:nn)]
                    arguments: fromList [(command_line.arguments,wybe.array(wybe.c_string) = array(argc @command_line:nn:nn, argv @command_line:nn:nn) @command_line:nn:nn @command_line:nn:nn)]
                    argv: fromList [(command_line.argv,wybe.array.raw_array(wybe.c_string) @command_line:nn:nn)]
                    command: fromList [(command_line.command,wybe.c_string = c"" @command_line:nn:nn @command_line:nn:nn)]
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:nn:nn @command_line:nn:nn)]
  procs           : 

module top-level code > public {semipure} (0 calls)
0: command_line.<0>
()<{<<command_line.argc>>, <<command_line.argv>>}; {<<command_line.arguments>>, <<command_line.command>>, <<command_line.exit_code>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(1,(wybe.array.[|]<0>,fromList [NonAliasedParamCond 2 []]))]
    foreign lpvm load(<<command_line.argc>>:wybe.int, ?%tmp#1##0:wybe.int) @command_line:nn:nn
    foreign lpvm load(<<command_line.argv>>:wybe.array.raw_array(wybe.c_string), ?%tmp#3##0:wybe.array.raw_array(wybe.c_string)) @command_line:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#10##0:wybe.array(T)) @array:nn:nn
    foreign lpvm mutate(~tmp#10##0:wybe.array(T), ?tmp#11##0:wybe.array(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @array:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.array(T), ?tmp#0##0:wybe.array(wybe.c_string), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.array.raw_array(T)) @array:nn:nn
    foreign lpvm store(tmp#0##0:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
    foreign lpvm store(c"":wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn
    wybe.array.[|]<0>[785a827a1b](?command##1:wybe.c_string, ?arguments##2:wybe.array(wybe.c_string), ~tmp#0##0:wybe.array(wybe.c_string), ?tmp#7##0:wybe.bool) #1 @command_line:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign c {terminal,semipure} error_exit(c"command_line:18:15":wybe.c_string, c"Erroneous program argument vector":wybe.c_string) @control:nn:nn

    1:
        foreign lpvm store(~%arguments##2:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
        foreign lpvm store(~%command##1:wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn
        foreign lpvm store(0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn



set_exit_code > public {inline} (0 calls)
0: command_line.set_exit_code<0>
set_exit_code(code##0:wybe.int)<{}; {<<command_line.exit_code>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(~code##0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn

  LLVM code       :

; ModuleID = 'command_line'


 


@"resource#command_line.argc" =    global i64 undef


@"resource#command_line.arguments" =    global i64 undef


@"resource#command_line.argv" =    global i64 undef


@"resource#command_line.command" =    global i64 undef


@"resource#command_line.exit_code" =    global i64 undef


@command_line.0 =    constant [?? x i8] c"\00"


@command_line.2 =    constant [?? x i8] c"Erroneous program argument vector\00"


@command_line.1 =    constant [?? x i8] c"command_line:18:15\00"


declare external ccc  void @error_exit(i64, i64)    


declare external fastcc  {i64, i64, i1} @"wybe.array.[|]<0>[785a827a1b]"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"command_line.<0>"()    {
entry:
  %0 = load  i64, i64* @"resource#command_line.argc" 
  %1 = load  i64, i64* @"resource#command_line.argv" 
  %2 = trunc i64 16 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %0, i64* %5 
  %6 = add   i64 %4, 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %1, i64* %7 
  store  i64 %4, i64* @"resource#command_line.arguments" 
  store  i64 ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.0, i32 0, i32 0) to i64), i64* @"resource#command_line.command" 
  %8 = tail call fastcc  {i64, i64, i1}  @"wybe.array.[|]<0>[785a827a1b]"(i64  %4)  
  %9 = extractvalue {i64, i64, i1} %8, 0 
  %10 = extractvalue {i64, i64, i1} %8, 1 
  %11 = extractvalue {i64, i64, i1} %8, 2 
  br i1 %11, label %if.then, label %if.else 
if.then:
  store  i64 %10, i64* @"resource#command_line.arguments" 
  store  i64 %9, i64* @"resource#command_line.command" 
  store  i64 0, i64* @"resource#command_line.exit_code" 
  ret void 
if.else:
  tail call ccc  void  @error_exit(i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.1, i32 0, i32 0) to i64), i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.2, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  void @"command_line.set_exit_code<0>"(i64  %"code##0") alwaysinline   {
entry:
  store  i64 %"code##0", i64* @"resource#command_line.exit_code" 
  ret void 
}
--------------------------------------------------
 Module int_list
  representation  : (not a type)
  public submods  : int_list -> int_list.int_list
  public resources: 
  public procs    : int_list.append<0>
                    int_list.count<0>
                    int_list.extend<0>
                    int_list.index<0>
                    int_list.insert<0>
                    int_list.pop<0>
                    int_list.print<0>
                    int_list.println<0>
                    int_list.range<0>
                    int_list.remove<0>
                    int_list.reverse<0>
                    int_list.sort<0>
                    int_list.int_list.=<0>
                    int_list.int_list.cons<0>
                    int_list.int_list.cons<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.nil<0>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
                    int_list.int_list.~=<0>
  imports         : public use int_list.int_list
                    use wybe
  resources       : 
  submodules      : int_list.int_list
  procs           : 

append > public (0 calls)
0: int_list.append<0>[410bae77d3]
append(lst##0:int_list.int_list, v##0:wybe.int, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~tmp#5##0:int_list.int_list, ?tmp#6##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~tmp#6##0:int_list.int_list, ?tmp#7##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:int_list.int_list) @int_list:nn:nn
    int_list.extend<0>(~lst##0:int_list.int_list, ~tmp#7##0:int_list.int_list, outByReference #result##0:int_list.int_list) #2 @int_list:nn:nn
 [410bae77d3] [NonAliasedParam 0] :
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~tmp#5##0:int_list.int_list, ?tmp#6##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~tmp#6##0:int_list.int_list, ?tmp#7##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:int_list.int_list) @int_list:nn:nn
    int_list.extend<0>[410bae77d3](~lst##0:int_list.int_list, ~tmp#7##0:int_list.int_list, outByReference #result##0:int_list.int_list) #2 @int_list:nn:nn


count > public (3 calls)
0: int_list.count<0>
count(lst##0:int_list.int_list, x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        int_list.count<0>(~t##0:int_list.int_list, x##0:wybe.int, ?tmp#2##0:wybe.int) #1 @int_list:nn:nn
        foreign llvm icmp_eq(~h##0:wybe.int, ~x##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            foreign llvm move(~tmp#2##0:wybe.int, ?#result##0:wybe.int) @int:nn:nn

        1:
            foreign llvm add(~tmp#2##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @int:nn:nn




count#cont#1 > {inline} (2 calls)
0: int_list.count#cont#1<0>
count#cont#1(tmp#2##0:wybe.int, tmp#3##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~tmp#2##0:wybe.int, ~tmp#3##0:wybe.int, ?#result##0:wybe.int) @int:nn:nn


extend > public (3 calls)
0: int_list.extend<0>[410bae77d3]
extend(lst1##0:int_list.int_list, lst2##0:int_list.int_list, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst2##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst1##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~lst2##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst1##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst1##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:int_list.int_list, ?tmp#9##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
        int_list.extend<0>(~t##0:int_list.int_list, ~lst2##0:int_list.int_list, outByReference tmp#2##0:int_list.int_list) #1 @int_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:int_list.int_list) @int_list:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst1##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~lst2##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst1##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        int_list.extend<0>[410bae77d3](~t##0:int_list.int_list, ~lst2##0:int_list.int_list, outByReference tmp#2##0:int_list.int_list) #1 @int_list:nn:nn
        foreign lpvm mutate(~lst1##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:int_list.int_list) @int_list:nn:nn



greater > (3 calls)
0: int_list.greater<0>[410bae77d3]
greater(lst##0:int_list.int_list, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_sge(h##0:wybe.int, v##0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            int_list.greater<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #4 @int_list:nn:nn

        1:
            foreign lpvm alloc(16:wybe.int, ?tmp#14##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.greater<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~tmp#15##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_sge(~h##0:wybe.int, v##0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            int_list.greater<0>[410bae77d3](~t##0:int_list.int_list, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #4 @int_list:nn:nn

        1:
            int_list.greater<0>[410bae77d3](~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~lst##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn




index > public {inline} (0 calls)
0: int_list.index<0>
index(lst##0:int_list.int_list, x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.index_helper<0>(~lst##0:int_list.int_list, 0:wybe.int, ~x##0:wybe.int, ?#result##0:wybe.int) #0 @int_list:nn:nn


index_helper > (2 calls)
0: int_list.index_helper<0>
index_helper(lst##0:int_list.int_list, idx##0:wybe.int, x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(-1:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(~h##0:wybe.int, x##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            foreign llvm add(~idx##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @int:nn:nn
            int_list.index_helper<0>(~t##0:int_list.int_list, ~tmp#3##0:wybe.int, ~x##0:wybe.int, ?#result##0:wybe.int) #3 @int_list:nn:nn

        1:
            foreign llvm move(~idx##0:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn




insert > public (2 calls)
0: int_list.insert<0>[410bae77d3]
insert(lst##0:int_list.int_list, idx##0:wybe.int, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(4,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]])),(7,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_eq(idx##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool) @int:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#13##0:wybe.bool)
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int) @int:nn:nn
            int_list.insert<0>(0:int_list.int_list, ~tmp#7##0:wybe.int, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #7 @int_list:nn:nn

        1:
            foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
            foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#20##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#20##0:int_list.int_list, ?tmp#21##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.insert<0>(~t##0:int_list.int_list, ~tmp#5##0:wybe.int, ~v##0:wybe.int, outByReference tmp#4##0:int_list.int_list) #4 @int_list:nn:nn
            foreign lpvm mutate(~tmp#21##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#4##0:int_list.int_list) @int_list:nn:nn


    1:
        foreign lpvm alloc(16:wybe.int, ?tmp#25##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#25##0:int_list.int_list, ?tmp#26##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#26##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lst##0:int_list.int_list) @int_list:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_eq(idx##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool) @int:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#13##0:wybe.bool)
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int) @int:nn:nn
            int_list.insert<0>[410bae77d3](0:int_list.int_list, ~tmp#7##0:wybe.int, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #7 @int_list:nn:nn

        1:
            foreign lpvm access(lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
            int_list.insert<0>[410bae77d3](~t##0:int_list.int_list, ~tmp#5##0:wybe.int, ~v##0:wybe.int, outByReference tmp#4##0:int_list.int_list) #4 @int_list:nn:nn
            foreign lpvm mutate(~lst##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#4##0:int_list.int_list) @int_list:nn:nn


    1:
        foreign lpvm alloc(16:wybe.int, ?tmp#25##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#25##0:int_list.int_list, ?tmp#26##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#26##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lst##0:int_list.int_list) @int_list:nn:nn



lesser > (3 calls)
0: int_list.lesser<0>
lesser(lst##0:int_list.int_list, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_slt(h##0:wybe.int, v##0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            int_list.lesser<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #4 @int_list:nn:nn

        1:
            foreign lpvm alloc(16:wybe.int, ?tmp#14##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.lesser<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~tmp#15##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn




pop > public (1 calls)
0: int_list.pop<0>[410bae77d3]
pop(lst##0:int_list.int_list, idx##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(3,(int_list.pop<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(idx##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @int:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#16##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#16##0:int_list.int_list, ?tmp#17##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.pop<0>(~t##0:int_list.int_list, ~tmp#4##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #3 @int_list:nn:nn
            foreign lpvm mutate(~tmp#17##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn

        1:
            foreign llvm move(~t##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(idx##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @int:nn:nn
            int_list.pop<0>[410bae77d3](~t##0:int_list.int_list, ~tmp#4##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #3 @int_list:nn:nn
            foreign lpvm mutate(~lst##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn

        1:
            foreign llvm move(~t##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn




print > public (2 calls)
0: int_list.print<0>
print(x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool)
    case ~tmp#2##0:wybe.bool of
    0:

    1:
        foreign lpvm access(x##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~x##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~h##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
        foreign c putchar(' ':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @char:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn
        int_list.print<0>(~t##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @int_list:nn:nn



println > public {inline} (0 calls)
0: int_list.println<0>
println(x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.print<0>(~x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#0##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#0##0:wybe.phantom, ?tmp#1##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#1##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


range > public {inline} (0 calls)
0: int_list.range<0>
range(start##0:wybe.int, stop##0:wybe.int, step##0:wybe.int, ?result##1:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.range#cont#1<0>(0:int_list.int_list, ~start##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, ?result##1:int_list.int_list) #1 @int_list:nn:nn


range#cont#1 > (2 calls)
0: int_list.range#cont#1<0>
range#cont#1(result##0:int_list.int_list, start##0:wybe.int, step##0:wybe.int, stop##0:wybe.int, ?result##1:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(3,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.range#cont#1<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_slt(start##0:wybe.int, stop##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        int_list.reverse_helper<0>(~result##0:int_list.int_list, 0:int_list.int_list, ?result##1:int_list.int_list) #3 @int_list:nn:nn

    1:
        foreign lpvm alloc(16:wybe.int, ?tmp#11##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#11##0:int_list.int_list, ?tmp#12##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#12##0:int_list.int_list, ?tmp#13##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result##0:int_list.int_list) @int_list:nn:nn
        foreign llvm add(~start##0:wybe.int, step##0:wybe.int, ?tmp#14##0:wybe.int) @int:nn:nn
        int_list.range#cont#1<0>(~tmp#13##0:int_list.int_list, ~tmp#14##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, ?result##1:int_list.int_list) #4 @int_list:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_slt(start##0:wybe.int, stop##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        int_list.reverse_helper<0>[410bae77d3](~result##0:int_list.int_list, 0:int_list.int_list, ?result##1:int_list.int_list) #3 @int_list:nn:nn

    1:
        foreign lpvm alloc(16:wybe.int, ?tmp#11##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#11##0:int_list.int_list, ?tmp#12##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#12##0:int_list.int_list, ?tmp#13##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result##0:int_list.int_list) @int_list:nn:nn
        foreign llvm add(~start##0:wybe.int, step##0:wybe.int, ?tmp#14##0:wybe.int) @int:nn:nn
        int_list.range#cont#1<0>[410bae77d3](~tmp#13##0:int_list.int_list, ~tmp#14##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, ?result##1:int_list.int_list) #4 @int_list:nn:nn



range#cont#2 > {inline} (1 calls)
0: int_list.range#cont#2<0>
range#cont#2(result##0:int_list.int_list, start##0:wybe.int, step##0:wybe.int, stop##0:wybe.int, ?result##2:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~tmp#5##0:int_list.int_list, ?tmp#6##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~tmp#6##0:int_list.int_list, ?tmp#7##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result##0:int_list.int_list) @int_list:nn:nn
    foreign llvm add(~start##0:wybe.int, step##0:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
    int_list.range#cont#1<0>(~tmp#7##0:int_list.int_list, ~tmp#2##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, ?result##2:int_list.int_list) #2 @int_list:nn:nn


remove > public (1 calls)
0: int_list.remove<0>[410bae77d3]
remove(lst##0:int_list.int_list, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.remove<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(h##0:wybe.int, v##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
        case ~tmp#5##0:wybe.bool of
        0:
            foreign lpvm alloc(16:wybe.int, ?tmp#13##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#13##0:int_list.int_list, ?tmp#14##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.remove<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn

        1:
            foreign llvm move(~t##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(~h##0:wybe.int, v##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
        case ~tmp#5##0:wybe.bool of
        0:
            int_list.remove<0>[410bae77d3](~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~lst##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn

        1:
            foreign llvm move(~t##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn




reverse > public {inline} (1 calls)
0: int_list.reverse<0>
reverse(lst##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.reverse_helper<0>(~lst##0:int_list.int_list, 0:int_list.int_list, ?#result##0:int_list.int_list) #1 @int_list:nn:nn


reverse_helper > (2 calls)
0: int_list.reverse_helper<0>[410bae77d3]
reverse_helper(lst##0:int_list.int_list, acc##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,acc##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~acc##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:int_list.int_list, ?tmp#9##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:int_list.int_list, ?tmp#10##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~acc##0:int_list.int_list) @int_list:nn:nn
        int_list.reverse_helper<0>(~t##0:int_list.int_list, ~tmp#10##0:int_list.int_list, ?#result##0:int_list.int_list) #2 @int_list:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~acc##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~lst##0:int_list.int_list, ?tmp#10##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~acc##0:int_list.int_list) @int_list:nn:nn
        int_list.reverse_helper<0>[410bae77d3](~t##0:int_list.int_list, ~tmp#10##0:int_list.int_list, ?#result##0:int_list.int_list) #2 @int_list:nn:nn



sort > public (2 calls)
0: int_list.sort<0>[410bae77d3]
sort(lst##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(3,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(6,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        int_list.lesser<0>(t##0:int_list.int_list, h##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #1 @int_list:nn:nn
        int_list.sort<0>[410bae77d3](~tmp#3##0:int_list.int_list, ?tmp#2##0:int_list.int_list) #2 @int_list:nn:nn
        int_list.greater<0>(~t##0:int_list.int_list, h##0:wybe.int, outByReference tmp#6##0:int_list.int_list) #3 @int_list:nn:nn
        int_list.sort<0>[410bae77d3](~tmp#6##0:int_list.int_list, ?tmp#5##0:int_list.int_list) #4 @int_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#13##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#13##0:int_list.int_list, ?tmp#14##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:int_list.int_list) @int_list:nn:nn
        int_list.extend<0>[410bae77d3](~tmp#2##0:int_list.int_list, ~tmp#15##0:int_list.int_list, outByReference #result##0:int_list.int_list) #6 @int_list:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        int_list.lesser<0>(t##0:int_list.int_list, h##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #1 @int_list:nn:nn
        int_list.sort<0>[410bae77d3](~tmp#3##0:int_list.int_list, ?tmp#2##0:int_list.int_list) #2 @int_list:nn:nn
        int_list.greater<0>[410bae77d3](~t##0:int_list.int_list, ~h##0:wybe.int, outByReference tmp#6##0:int_list.int_list) #3 @int_list:nn:nn
        int_list.sort<0>[410bae77d3](~tmp#6##0:int_list.int_list, ?tmp#5##0:int_list.int_list) #4 @int_list:nn:nn
        foreign lpvm mutate(~lst##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:int_list.int_list) @int_list:nn:nn
        int_list.extend<0>[410bae77d3](~tmp#2##0:int_list.int_list, ~tmp#15##0:int_list.int_list, outByReference #result##0:int_list.int_list) #6 @int_list:nn:nn


  LLVM code       :

; ModuleID = 'int_list'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i64 @"int_list.append<0>"(i64  %"lst##0", i64  %"v##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"v##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = alloca i64 
   call fastcc  void  @"int_list.extend<0>"(i64  %"lst##0", i64  %2, i64*  %6)  
  %7 = load  i64, i64* %6 
  ret i64 %7 
}


define external fastcc  i64 @"int_list.append<0>[410bae77d3]"(i64  %"lst##0", i64  %"v##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"v##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %"lst##0", i64  %2, i64*  %6)  
  %7 = load  i64, i64* %6 
  ret i64 %7 
}


define external fastcc  i64 @"int_list.count<0>"(i64  %"lst##0", i64  %"x##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = tail call fastcc  i64  @"int_list.count<0>"(i64  %5, i64  %"x##0")  
  %7 = icmp eq i64 %2, %"x##0" 
  br i1 %7, label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  %8 = add   i64 %6, 1 
  ret i64 %8 
if.else1:
  ret i64 %6 
}


define external fastcc  i64 @"int_list.count#cont#1<0>"(i64  %"tmp#2##0", i64  %"tmp#3##0") alwaysinline   {
entry:
  %0 = add   i64 %"tmp#2##0", %"tmp#3##0" 
  ret i64 %0 
}


define external fastcc  void @"int_list.extend<0>"(i64  %"lst1##0", i64  %"lst2##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"lst1##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst1##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst1##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %2, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %8, i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.extend<0>"(i64  %5, i64  %"lst2##0", i64*  %11)  
  ret void 
if.else:
  store  i64 %"lst2##0", i64* %"#result##0" 
  ret void 
}


define external fastcc  void @"int_list.extend<0>[410bae77d3]"(i64  %"lst1##0", i64  %"lst2##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"lst1##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"lst1##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"lst1##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"lst1##0", i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %3, i64  %"lst2##0", i64*  %5)  
  ret void 
if.else:
  store  i64 %"lst2##0", i64* %"#result##0" 
  ret void 
}


define external fastcc  void @"int_list.greater<0>"(i64  %"lst##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp sge i64 %2, %"v##0" 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = inttoptr i64 %9 to i64* 
  store  i64 %2, i64* %10 
  %11 = add   i64 %9, 8 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 %9, i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.greater<0>"(i64  %5, i64  %"v##0", i64*  %12)  
  ret void 
if.else1:
  musttail call fastcc  void  @"int_list.greater<0>"(i64  %5, i64  %"v##0", i64*  %"#result##0")  
  ret void 
}


define external fastcc  void @"int_list.greater<0>[410bae77d3]"(i64  %"lst##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp sge i64 %2, %"v##0" 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  %7 = add   i64 %"lst##0", 8 
  %8 = inttoptr i64 %7 to i64* 
  store  i64 %"lst##0", i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.greater<0>[410bae77d3]"(i64  %5, i64  %"v##0", i64*  %8)  
  ret void 
if.else1:
  musttail call fastcc  void  @"int_list.greater<0>[410bae77d3]"(i64  %5, i64  %"v##0", i64*  %"#result##0")  
  ret void 
}


define external fastcc  i64 @"int_list.index<0>"(i64  %"lst##0", i64  %"x##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"int_list.index_helper<0>"(i64  %"lst##0", i64  0, i64  %"x##0")  
  ret i64 %0 
}


define external fastcc  i64 @"int_list.index_helper<0>"(i64  %"lst##0", i64  %"idx##0", i64  %"x##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp eq i64 %2, %"x##0" 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  ret i64 -1 
if.then1:
  ret i64 %"idx##0" 
if.else1:
  %7 = add   i64 %"idx##0", 1 
  %8 = musttail call fastcc  i64  @"int_list.index_helper<0>"(i64  %5, i64  %7, i64  %"x##0")  
  ret i64 %8 
}


define external fastcc  void @"int_list.insert<0>"(i64  %"lst##0", i64  %"idx##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %0 = icmp eq i64 %"idx##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  store  i64 %"v##0", i64* %4 
  %5 = add   i64 %3, 8 
  %6 = inttoptr i64 %5 to i64* 
  store  i64 %"lst##0", i64* %6 
  store  i64 %3, i64* %"#result##0" 
  ret void 
if.else:
  %7 = icmp ne i64 %"lst##0", 0 
  br i1 %7, label %if.then1, label %if.else1 
if.then1:
  %8 = inttoptr i64 %"lst##0" to i64* 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"lst##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = load  i64, i64* %11 
  %13 = sub   i64 %"idx##0", 1 
  %14 = trunc i64 16 to i32  
  %15 = tail call ccc  i8*  @wybe_malloc(i32  %14)  
  %16 = ptrtoint i8* %15 to i64 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %9, i64* %17 
  %18 = add   i64 %16, 8 
  %19 = inttoptr i64 %18 to i64* 
  store  i64 %16, i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.insert<0>"(i64  %12, i64  %13, i64  %"v##0", i64*  %19)  
  ret void 
if.else1:
  %20 = sub   i64 %"idx##0", 1 
  musttail call fastcc  void  @"int_list.insert<0>"(i64  0, i64  %20, i64  %"v##0", i64*  %"#result##0")  
  ret void 
}


define external fastcc  void @"int_list.insert<0>[410bae77d3]"(i64  %"lst##0", i64  %"idx##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %0 = icmp eq i64 %"idx##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  store  i64 %"v##0", i64* %4 
  %5 = add   i64 %3, 8 
  %6 = inttoptr i64 %5 to i64* 
  store  i64 %"lst##0", i64* %6 
  store  i64 %3, i64* %"#result##0" 
  ret void 
if.else:
  %7 = icmp ne i64 %"lst##0", 0 
  br i1 %7, label %if.then1, label %if.else1 
if.then1:
  %8 = add   i64 %"lst##0", 8 
  %9 = inttoptr i64 %8 to i64* 
  %10 = load  i64, i64* %9 
  %11 = sub   i64 %"idx##0", 1 
  %12 = add   i64 %"lst##0", 8 
  %13 = inttoptr i64 %12 to i64* 
  store  i64 %"lst##0", i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.insert<0>[410bae77d3]"(i64  %10, i64  %11, i64  %"v##0", i64*  %13)  
  ret void 
if.else1:
  %14 = sub   i64 %"idx##0", 1 
  musttail call fastcc  void  @"int_list.insert<0>[410bae77d3]"(i64  0, i64  %14, i64  %"v##0", i64*  %"#result##0")  
  ret void 
}


define external fastcc  void @"int_list.lesser<0>"(i64  %"lst##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp slt i64 %2, %"v##0" 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = inttoptr i64 %9 to i64* 
  store  i64 %2, i64* %10 
  %11 = add   i64 %9, 8 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 %9, i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.lesser<0>"(i64  %5, i64  %"v##0", i64*  %12)  
  ret void 
if.else1:
  musttail call fastcc  void  @"int_list.lesser<0>"(i64  %5, i64  %"v##0", i64*  %"#result##0")  
  ret void 
}


define external fastcc  void @"int_list.pop<0>"(i64  %"lst##0", i64  %"idx##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp eq i64 %"idx##0", 0 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  store  i64 %5, i64* %"#result##0" 
  ret void 
if.else1:
  %7 = sub   i64 %"idx##0", 1 
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = add   i64 %10, 8 
  %13 = inttoptr i64 %12 to i64* 
  store  i64 %10, i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.pop<0>"(i64  %5, i64  %7, i64*  %13)  
  ret void 
}


define external fastcc  void @"int_list.pop<0>[410bae77d3]"(i64  %"lst##0", i64  %"idx##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"lst##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = icmp eq i64 %"idx##0", 0 
  br i1 %4, label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  store  i64 %3, i64* %"#result##0" 
  ret void 
if.else1:
  %5 = sub   i64 %"idx##0", 1 
  %6 = add   i64 %"lst##0", 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"lst##0", i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.pop<0>[410bae77d3]"(i64  %3, i64  %5, i64*  %7)  
  ret void 
}


define external fastcc  void @"int_list.print<0>"(i64  %"x##0")    {
entry:
  %0 = icmp ne i64 %"x##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"x##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"x##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  32)  
  musttail call fastcc  void  @"int_list.print<0>"(i64  %5)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"int_list.println<0>"(i64  %"x##0") alwaysinline   {
entry:
  tail call fastcc  void  @"int_list.print<0>"(i64  %"x##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"int_list.range<0>"(i64  %"start##0", i64  %"stop##0", i64  %"step##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"int_list.range#cont#1<0>"(i64  0, i64  %"start##0", i64  %"step##0", i64  %"stop##0")  
  ret i64 %0 
}


define external fastcc  i64 @"int_list.range#cont#1<0>"(i64  %"result##0", i64  %"start##0", i64  %"step##0", i64  %"stop##0")    {
entry:
  %0 = icmp slt i64 %"start##0", %"stop##0" 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  store  i64 %"start##0", i64* %4 
  %5 = add   i64 %3, 8 
  %6 = inttoptr i64 %5 to i64* 
  store  i64 %"result##0", i64* %6 
  %7 = add   i64 %"start##0", %"step##0" 
  %8 = musttail call fastcc  i64  @"int_list.range#cont#1<0>"(i64  %3, i64  %7, i64  %"step##0", i64  %"stop##0")  
  ret i64 %8 
if.else:
  %9 = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"result##0", i64  0)  
  ret i64 %9 
}


define external fastcc  i64 @"int_list.range#cont#1<0>[410bae77d3]"(i64  %"result##0", i64  %"start##0", i64  %"step##0", i64  %"stop##0")    {
entry:
  %0 = icmp slt i64 %"start##0", %"stop##0" 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  store  i64 %"start##0", i64* %4 
  %5 = add   i64 %3, 8 
  %6 = inttoptr i64 %5 to i64* 
  store  i64 %"result##0", i64* %6 
  %7 = add   i64 %"start##0", %"step##0" 
  %8 = musttail call fastcc  i64  @"int_list.range#cont#1<0>[410bae77d3]"(i64  %3, i64  %7, i64  %"step##0", i64  %"stop##0")  
  ret i64 %8 
if.else:
  %9 = tail call fastcc  i64  @"int_list.reverse_helper<0>[410bae77d3]"(i64  %"result##0", i64  0)  
  ret i64 %9 
}


define external fastcc  i64 @"int_list.range#cont#2<0>"(i64  %"result##0", i64  %"start##0", i64  %"step##0", i64  %"stop##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"start##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"result##0", i64* %5 
  %6 = add   i64 %"start##0", %"step##0" 
  %7 = musttail call fastcc  i64  @"int_list.range#cont#1<0>"(i64  %2, i64  %6, i64  %"step##0", i64  %"stop##0")  
  ret i64 %7 
}


define external fastcc  void @"int_list.remove<0>"(i64  %"lst##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp eq i64 %2, %"v##0" 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  store  i64 %5, i64* %"#result##0" 
  ret void 
if.else1:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = inttoptr i64 %9 to i64* 
  store  i64 %2, i64* %10 
  %11 = add   i64 %9, 8 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 %9, i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.remove<0>"(i64  %5, i64  %"v##0", i64*  %12)  
  ret void 
}


define external fastcc  void @"int_list.remove<0>[410bae77d3]"(i64  %"lst##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp eq i64 %2, %"v##0" 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  store  i64 %5, i64* %"#result##0" 
  ret void 
if.else1:
  %7 = add   i64 %"lst##0", 8 
  %8 = inttoptr i64 %7 to i64* 
  store  i64 %"lst##0", i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.remove<0>[410bae77d3]"(i64  %5, i64  %"v##0", i64*  %8)  
  ret void 
}


define external fastcc  i64 @"int_list.reverse<0>"(i64  %"lst##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"lst##0", i64  0)  
  ret i64 %0 
}


define external fastcc  i64 @"int_list.reverse_helper<0>"(i64  %"lst##0", i64  %"acc##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %2, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %"acc##0", i64* %11 
  %12 = musttail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %5, i64  %8)  
  ret i64 %12 
if.else:
  ret i64 %"acc##0" 
}


define external fastcc  i64 @"int_list.reverse_helper<0>[410bae77d3]"(i64  %"lst##0", i64  %"acc##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"lst##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"lst##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"acc##0", i64* %5 
  %6 = musttail call fastcc  i64  @"int_list.reverse_helper<0>[410bae77d3]"(i64  %3, i64  %"lst##0")  
  ret i64 %6 
if.else:
  ret i64 %"acc##0" 
}


define external fastcc  i64 @"int_list.sort<0>"(i64  %"lst##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = alloca i64 
   call fastcc  void  @"int_list.lesser<0>"(i64  %5, i64  %2, i64*  %6)  
  %7 = load  i64, i64* %6 
  %8 = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %7)  
  %9 = alloca i64 
   call fastcc  void  @"int_list.greater<0>"(i64  %5, i64  %2, i64*  %9)  
  %10 = load  i64, i64* %9 
  %11 = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %10)  
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 %2, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %11, i64* %17 
  %18 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %8, i64  %14, i64*  %18)  
  %19 = load  i64, i64* %18 
  ret i64 %19 
if.else:
  ret i64 0 
}


define external fastcc  i64 @"int_list.sort<0>[410bae77d3]"(i64  %"lst##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = alloca i64 
   call fastcc  void  @"int_list.lesser<0>"(i64  %5, i64  %2, i64*  %6)  
  %7 = load  i64, i64* %6 
  %8 = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %7)  
  %9 = alloca i64 
   call fastcc  void  @"int_list.greater<0>[410bae77d3]"(i64  %5, i64  %2, i64*  %9)  
  %10 = load  i64, i64* %9 
  %11 = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %10)  
  %12 = add   i64 %"lst##0", 8 
  %13 = inttoptr i64 %12 to i64* 
  store  i64 %11, i64* %13 
  %14 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %8, i64  %"lst##0", i64*  %14)  
  %15 = load  i64, i64* %14 
  ret i64 %15 
if.else:
  ret i64 0 
}
--------------------------------------------------
 Module int_list.int_list
  representation  : address
  public submods  : 
  public resources: 
  public procs    : int_list.int_list.=<0>
                    int_list.int_list.cons<0>
                    int_list.int_list.cons<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.nil<0>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
                    int_list.int_list.~=<0>
  imports         : use int_list
                    use wybe
  resources       : 
  procs           : 

= > public (2 calls)
0: int_list.int_list.=<0>
=(#left##0:int_list.int_list, #right##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:int_list.int_list, 0:int_list.int_list, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#head##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~#left##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#tail##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
        case ~tmp#9##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#head##0:wybe.int) @int_list:nn:nn
            foreign lpvm access(~#right##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#tail##0:int_list.int_list) @int_list:nn:nn
            foreign llvm icmp_eq(~#left#head##0:wybe.int, ~#right#head##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                int_list.int_list.=<0>(~#left#tail##0:int_list.int_list, ~#right#tail##0:int_list.int_list, ?#success##0:wybe.bool) #3





cons > public {inline} (0 calls)
0: int_list.int_list.cons<0>
cons(head##0:wybe.int, tail##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~#rec##1:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail##0:int_list.int_list) @int_list:nn:nn
cons > public {inline} (12 calls)
1: int_list.int_list.cons<1>
cons(?head##0:wybe.int, ?tail##0:int_list.int_list, #result##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head##0:wybe.int)
        foreign llvm move(undef:int_list.int_list, ?tail##0:int_list.int_list)

    1:
        foreign lpvm access(#result##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~#result##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



head > public {inline} (0 calls)
0: int_list.int_list.head<0>
head(#rec##0:int_list.int_list, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

head > public {inline} (0 calls)
1: int_list.int_list.head<1>
head(#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:int_list.int_list, ?#rec##1:int_list.int_list)

    1:
        foreign lpvm mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



nil > public {inline} (0 calls)
0: int_list.int_list.nil<0>
nil(?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list)


tail > public {inline} (0 calls)
0: int_list.int_list.tail<0>
tail(#rec##0:int_list.int_list, ?#result##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:int_list.int_list, ?#result##0:int_list.int_list)

    1:
        foreign lpvm access(~#rec##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

tail > public {inline} (0 calls)
1: int_list.int_list.tail<1>
tail(#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, #field##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:int_list.int_list, ?#rec##1:int_list.int_list)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: int_list.int_list.~=<0>
~=(#left##0:int_list.int_list, #right##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.int_list.=<0>(~#left##0:int_list.int_list, ~#right##0:int_list.int_list, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'int_list.int_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"int_list.int_list.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp ne i64 %"#left##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp ne i64 %"#right##0", 0 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  %14 = icmp eq i64 %"#right##0", 0 
  ret i1 %14 
if.then1:
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = load  i64, i64* %7 
  %9 = add   i64 %"#right##0", 8 
  %10 = inttoptr i64 %9 to i64* 
  %11 = load  i64, i64* %10 
  %12 = icmp eq i64 %2, %8 
  br i1 %12, label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %13 = musttail call fastcc  i1  @"int_list.int_list.=<0>"(i64  %5, i64  %11)  
  ret i1 %13 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"int_list.int_list.cons<0>"(i64  %"head##0", i64  %"tail##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"head##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"tail##0", i64* %5 
  ret i64 %2 
}


define external fastcc  {i64, i64, i1} @"int_list.int_list.cons<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#result##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i64, i1} undef, i64 %2, 0 
  %7 = insertvalue {i64, i64, i1} %6, i64 %5, 1 
  %8 = insertvalue {i64, i64, i1} %7, i1 1, 2 
  ret {i64, i64, i1} %8 
if.else:
  %9 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i64, i1} %9, i64 undef, 1 
  %11 = insertvalue {i64, i64, i1} %10, i1 0, 2 
  ret {i64, i64, i1} %11 
}


define external fastcc  {i64, i1} @"int_list.int_list.head<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = insertvalue {i64, i1} undef, i64 %2, 0 
  %4 = insertvalue {i64, i1} %3, i1 1, 1 
  ret {i64, i1} %4 
if.else:
  %5 = insertvalue {i64, i1} undef, i64 undef, 0 
  %6 = insertvalue {i64, i1} %5, i1 0, 1 
  ret {i64, i1} %6 
}


define external fastcc  {i64, i1} @"int_list.int_list.head<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  store  i64 %"#field##0", i64* %7 
  %8 = insertvalue {i64, i1} undef, i64 %3, 0 
  %9 = insertvalue {i64, i1} %8, i1 1, 1 
  ret {i64, i1} %9 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 0, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
}


define external fastcc  i64 @"int_list.int_list.nil<0>"() alwaysinline   {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"int_list.int_list.tail<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"int_list.int_list.tail<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 8 
  %8 = inttoptr i64 %7 to i64* 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %3, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 0, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  i1 @"int_list.int_list.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i1  @"int_list.int_list.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module int_list_test
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : int_list_test.<0>
  imports         : use command_line
                    use int_list
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: int_list_test.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(24,(int_list_test.test_int_list<0>,fromList [NonAliasedParamCond 0 [],NonAliasedParamCond 1 [],NonAliasedParamCond 2 []])),(34,(int_list.range#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(35,(int_list.range#cont#1<0>,fromList [NonAliasedParamCond 0 []])),(36,(int_list.range#cont#1<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign c {impure} malloc_count(?mc1##0:wybe.int) @memory_management:nn:nn
    int_list.range#cont#1<0>[410bae77d3](0:int_list.int_list, 1:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp#0##0:int_list.int_list) #34 @int_list:nn:nn
    int_list.range#cont#1<0>[410bae77d3](0:int_list.int_list, 2:wybe.int, 2:wybe.int, 20:wybe.int, ?tmp#1##0:int_list.int_list) #35 @int_list:nn:nn
    int_list.range#cont#1<0>[410bae77d3](0:int_list.int_list, 3:wybe.int, 3:wybe.int, 30:wybe.int, ?tmp#2##0:int_list.int_list) #36 @int_list:nn:nn
    wybe.string.print<0>("x y z:":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #37 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #38 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#1##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #39 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#22##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #40 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#25##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#25##0:wybe.phantom, ?tmp#26##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#26##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} malloc_count(?mc2##0:wybe.int) @memory_management:nn:nn
    foreign llvm sub(~mc2##0:wybe.int, ~mc1##0:wybe.int, ?tmp#3##0:wybe.int) @int:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #41 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#31##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("tests with alias":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #42 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#33##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} malloc_count(?mc1##1:wybe.int) @memory_management:nn:nn
    int_list_test.test_int_list<0>(tmp#0##0:int_list.int_list, tmp#1##0:int_list.int_list, tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #13 @int_list_test:nn:nn
    foreign c {impure} malloc_count(?mc2##1:wybe.int) @memory_management:nn:nn
    foreign llvm sub(~mc2##1:wybe.int, ~mc1##1:wybe.int, ?tmp#4##0:wybe.int) @int:nn:nn
    wybe.string.print<0>("original x y z:":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #43 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#38##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#38##0:wybe.phantom, ?tmp#39##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#39##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #44 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#41##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#41##0:wybe.phantom, ?tmp#42##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#42##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#1##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #45 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#44##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#44##0:wybe.phantom, ?tmp#45##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#45##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #46 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#47##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#47##0:wybe.phantom, ?tmp#48##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#48##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #47 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#50##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#50##0:wybe.phantom, ?tmp#51##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#51##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #48 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#53##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#53##0:wybe.phantom, ?tmp#54##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#54##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("tests without alias":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #49 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#56##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#56##0:wybe.phantom, ?tmp#57##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#57##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} malloc_count(?mc1##2:wybe.int) @memory_management:nn:nn
    int_list_test.test_int_list<0>[9e35cb823b](~tmp#0##0:int_list.int_list, ~tmp#1##0:int_list.int_list, ~tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #24 @int_list_test:nn:nn
    foreign c {impure} malloc_count(?mc2##2:wybe.int) @memory_management:nn:nn
    foreign llvm sub(~mc2##2:wybe.int, ~mc1##2:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #50 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#61##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#61##0:wybe.phantom, ?tmp#62##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#62##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>(" ** malloc count of building lists: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #28 @int_list_test:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#64##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#3##0:wybe.int, ~tmp#64##0:wybe.phantom, ?tmp#65##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#65##0:wybe.phantom, ?tmp#66##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#66##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>(" ** malloc count of test(aliased): ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #30 @int_list_test:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#68##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#4##0:wybe.int, ~tmp#68##0:wybe.phantom, ?tmp#69##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#69##0:wybe.phantom, ?tmp#70##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#70##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>(" ** malloc count of test(non-aliased): ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #32 @int_list_test:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#72##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#5##0:wybe.int, ~tmp#72##0:wybe.phantom, ?tmp#73##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#73##0:wybe.phantom, ?tmp#74##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#74##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


test_int_list > (2 calls)
0: int_list_test.test_int_list<0>[9e35cb823b]
test_int_list(x##0:int_list.int_list, y##0:int_list.int_list, z##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 1,InterestingUnaliased 2]
  MultiSpeczDepInfo: [(2,(int_list.append<0>,fromList [NonAliasedParamCond 0 [1]])),(7,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(8,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(11,(int_list.insert<0>,fromList [NonAliasedParamCond 0 []])),(12,(int_list.pop<0>,fromList [NonAliasedParamCond 0 []])),(13,(int_list.remove<0>,fromList [NonAliasedParamCond 0 []])),(16,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(19,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(20,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [2]]))]
    int_list.reverse_helper<0>(~x##0:int_list.int_list, 0:int_list.int_list, ?x##1:int_list.int_list) #19 @int_list:nn:nn
    int_list.reverse_helper<0>(~z##0:int_list.int_list, 0:int_list.int_list, ?z##1:int_list.int_list) #20 @int_list:nn:nn
    int_list.append<0>(~y##0:int_list.int_list, 99:wybe.int, ?tmp#0##0:int_list.int_list) #2 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #21 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(x##1:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #22 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#13##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #23 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(z##1:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #24 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#18##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#19##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.extend<0>[410bae77d3](~x##1:int_list.int_list, ~tmp#0##0:int_list.int_list, outByReference tmp#1##0:int_list.int_list) #7 @int_list_test:nn:nn
    int_list.extend<0>[410bae77d3](~tmp#1##0:int_list.int_list, ~z##1:int_list.int_list, outByReference tmp#2##0:int_list.int_list) #8 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #25 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #26 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#24##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.insert<0>[410bae77d3](~tmp#2##0:int_list.int_list, 4:wybe.int, 78:wybe.int, outByReference tmp#3##0:int_list.int_list) #11 @int_list_test:nn:nn
    int_list.pop<0>[410bae77d3](~tmp#3##0:int_list.int_list, 20:wybe.int, outByReference tmp#4##0:int_list.int_list) #12 @int_list_test:nn:nn
    int_list.remove<0>[410bae77d3](~tmp#4##0:int_list.int_list, 2:wybe.int, outByReference tmp#5##0:int_list.int_list) #13 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #27 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#28##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#5##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #28 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#31##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.sort<0>[410bae77d3](~tmp#5##0:int_list.int_list, ?l##5:int_list.int_list) #16 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #29 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#33##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(~l##5:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #30 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#36##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#36##0:wybe.phantom, ?tmp#37##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#37##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
 [9e35cb823b] [NonAliasedParam 0,NonAliasedParam 1,NonAliasedParam 2] :
    int_list.reverse_helper<0>[410bae77d3](~x##0:int_list.int_list, 0:int_list.int_list, ?x##1:int_list.int_list) #19 @int_list:nn:nn
    int_list.reverse_helper<0>[410bae77d3](~z##0:int_list.int_list, 0:int_list.int_list, ?z##1:int_list.int_list) #20 @int_list:nn:nn
    int_list.append<0>[410bae77d3](~y##0:int_list.int_list, 99:wybe.int, ?tmp#0##0:int_list.int_list) #2 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #21 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(x##1:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #22 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#13##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #23 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(z##1:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #24 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#18##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#19##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.extend<0>[410bae77d3](~x##1:int_list.int_list, ~tmp#0##0:int_list.int_list, outByReference tmp#1##0:int_list.int_list) #7 @int_list_test:nn:nn
    int_list.extend<0>[410bae77d3](~tmp#1##0:int_list.int_list, ~z##1:int_list.int_list, outByReference tmp#2##0:int_list.int_list) #8 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #25 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #26 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#24##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.insert<0>[410bae77d3](~tmp#2##0:int_list.int_list, 4:wybe.int, 78:wybe.int, outByReference tmp#3##0:int_list.int_list) #11 @int_list_test:nn:nn
    int_list.pop<0>[410bae77d3](~tmp#3##0:int_list.int_list, 20:wybe.int, outByReference tmp#4##0:int_list.int_list) #12 @int_list_test:nn:nn
    int_list.remove<0>[410bae77d3](~tmp#4##0:int_list.int_list, 2:wybe.int, outByReference tmp#5##0:int_list.int_list) #13 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #27 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#28##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#5##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #28 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#31##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.sort<0>[410bae77d3](~tmp#5##0:int_list.int_list, ?l##5:int_list.int_list) #16 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #29 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#33##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(~l##5:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #30 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#36##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#36##0:wybe.phantom, ?tmp#37##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#37##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'int_list_test'


 


@int_list_test.17 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @int_list_test.16 to i64) }


@int_list_test.1 =    constant {i64, i64} { i64 6, i64 ptrtoint ([?? x i8]* @int_list_test.0 to i64) }


@int_list_test.7 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @int_list_test.6 to i64) }


@int_list_test.5 =    constant {i64, i64} { i64 16, i64 ptrtoint ([?? x i8]* @int_list_test.4 to i64) }


@int_list_test.9 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @int_list_test.8 to i64) }


@int_list_test.3 =    constant {i64, i64} { i64 20, i64 ptrtoint ([?? x i8]* @int_list_test.2 to i64) }


@int_list_test.13 =    constant {i64, i64} { i64 35, i64 ptrtoint ([?? x i8]* @int_list_test.12 to i64) }


@int_list_test.11 =    constant {i64, i64} { i64 36, i64 ptrtoint ([?? x i8]* @int_list_test.10 to i64) }


@int_list_test.15 =    constant {i64, i64} { i64 39, i64 ptrtoint ([?? x i8]* @int_list_test.14 to i64) }


@int_list_test.10 =    constant [?? x i8] c" ** malloc count of building lists: \00"


@int_list_test.12 =    constant [?? x i8] c" ** malloc count of test(aliased): \00"


@int_list_test.14 =    constant [?? x i8] c" ** malloc count of test(non-aliased): \00"


@int_list_test.16 =    constant [?? x i8] c"-\00"


@int_list_test.2 =    constant [?? x i8] c"--------------------\00"


@int_list_test.6 =    constant [?? x i8] c"original x y z:\00"


@int_list_test.4 =    constant [?? x i8] c"tests with alias\00"


@int_list_test.8 =    constant [?? x i8] c"tests without alias\00"


@int_list_test.0 =    constant [?? x i8] c"x y z:\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"int_list.print<0>"(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external fastcc  i64 @"int_list.sort<0>[410bae77d3]"(i64)    


declare external fastcc  void @"int_list.remove<0>[410bae77d3]"(i64, i64, i64*)    


declare external fastcc  void @"int_list.pop<0>[410bae77d3]"(i64, i64, i64*)    


declare external fastcc  void @"int_list.insert<0>[410bae77d3]"(i64, i64, i64, i64*)    


declare external fastcc  void @"int_list.extend<0>[410bae77d3]"(i64, i64, i64*)    


declare external fastcc  i64 @"int_list.append<0>[410bae77d3]"(i64, i64)    


declare external fastcc  i64 @"int_list.reverse_helper<0>[410bae77d3]"(i64, i64)    


declare external fastcc  i64 @"int_list.append<0>"(i64, i64)    


declare external fastcc  i64 @"int_list.reverse_helper<0>"(i64, i64)    


declare external ccc  void @print_int(i64)    


declare external ccc  i64 @malloc_count()    


declare external fastcc  i64 @"int_list.range#cont#1<0>[410bae77d3]"(i64, i64, i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"int_list_test.<0>"()    {
entry:
  %0 = tail call ccc  i64  @malloc_count()  
  %1 = tail call fastcc  i64  @"int_list.range#cont#1<0>[410bae77d3]"(i64  0, i64  1, i64  1, i64  10)  
  %2 = tail call fastcc  i64  @"int_list.range#cont#1<0>[410bae77d3]"(i64  0, i64  2, i64  2, i64  20)  
  %3 = tail call fastcc  i64  @"int_list.range#cont#1<0>[410bae77d3]"(i64  0, i64  3, i64  3, i64  30)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %3)  
  tail call ccc  void  @putchar(i8  10)  
  %4 = tail call ccc  i64  @malloc_count()  
  %5 = sub   i64 %4, %0 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.5, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %6 = tail call ccc  i64  @malloc_count()  
  tail call fastcc  void  @"int_list_test.test_int_list<0>"(i64  %1, i64  %2, i64  %3)  
  %7 = tail call ccc  i64  @malloc_count()  
  %8 = sub   i64 %7, %6 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.7, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %3)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.9, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %9 = tail call ccc  i64  @malloc_count()  
  tail call fastcc  void  @"int_list_test.test_int_list<0>[9e35cb823b]"(i64  %1, i64  %2, i64  %3)  
  %10 = tail call ccc  i64  @malloc_count()  
  %11 = sub   i64 %10, %9 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.11, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %5)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.13, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %8)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.15, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %11)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"int_list_test.test_int_list<0>"(i64  %"x##0", i64  %"y##0", i64  %"z##0")    {
entry:
  %0 = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"x##0", i64  0)  
  %1 = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"z##0", i64  0)  
  %2 = tail call fastcc  i64  @"int_list.append<0>"(i64  %"y##0", i64  99)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.17, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %0)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  %3 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %0, i64  %2, i64*  %3)  
  %4 = load  i64, i64* %3 
  %5 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %4, i64  %1, i64*  %5)  
  %6 = load  i64, i64* %5 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.17, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  %7 = alloca i64 
   call fastcc  void  @"int_list.insert<0>[410bae77d3]"(i64  %6, i64  4, i64  78, i64*  %7)  
  %8 = load  i64, i64* %7 
  %9 = alloca i64 
   call fastcc  void  @"int_list.pop<0>[410bae77d3]"(i64  %8, i64  20, i64*  %9)  
  %10 = load  i64, i64* %9 
  %11 = alloca i64 
   call fastcc  void  @"int_list.remove<0>[410bae77d3]"(i64  %10, i64  2, i64*  %11)  
  %12 = load  i64, i64* %11 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.17, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %12)  
  tail call ccc  void  @putchar(i8  10)  
  %13 = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %12)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.17, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %13)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"int_list_test.test_int_list<0>[9e35cb823b]"(i64  %"x##0", i64  %"y##0", i64  %"z##0")    {
entry:
  %0 = tail call fastcc  i64  @"int_list.reverse_helper<0>[410bae77d3]"(i64  %"x##0", i64  0)  
  %1 = tail call fastcc  i64  @"int_list.reverse_helper<0>[410bae77d3]"(i64  %"z##0", i64  0)  
  %2 = tail call fastcc  i64  @"int_list.append<0>[410bae77d3]"(i64  %"y##0", i64  99)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.17, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %0)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  %3 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %0, i64  %2, i64*  %3)  
  %4 = load  i64, i64* %3 
  %5 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %4, i64  %1, i64*  %5)  
  %6 = load  i64, i64* %5 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.17, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  %7 = alloca i64 
   call fastcc  void  @"int_list.insert<0>[410bae77d3]"(i64  %6, i64  4, i64  78, i64*  %7)  
  %8 = load  i64, i64* %7 
  %9 = alloca i64 
   call fastcc  void  @"int_list.pop<0>[410bae77d3]"(i64  %8, i64  20, i64*  %9)  
  %10 = load  i64, i64* %9 
  %11 = alloca i64 
   call fastcc  void  @"int_list.remove<0>[410bae77d3]"(i64  %10, i64  2, i64*  %11)  
  %12 = load  i64, i64* %11 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.17, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %12)  
  tail call ccc  void  @putchar(i8  10)  
  %13 = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %12)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.17, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %13)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
[93mint_list.wybe:4:46: Explicit specification of current type int_list,
  it is recommended to specify type as _
[0m
----------------------------------------------------------------------



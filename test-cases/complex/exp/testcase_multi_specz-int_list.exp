----------------------------------------------------------------------
- build & execute without multiple specialization
----------------------------------------------------------------------
x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
tests with alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
original x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
--------------------
tests without alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
--------------------
 ** malloc count of building lists: 54
 ** malloc count of test(aliased): 307
 ** malloc count of test(non-aliased): 307

----------------------------------------------------------------------


----------------------------------------------------------------------
- build & execute with multiple specialization
----------------------------------------------------------------------
x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
tests with alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
original x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
--------------------
tests without alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
--------------------
 ** malloc count of building lists: 27
 ** malloc count of test(aliased): 99
 ** malloc count of test(non-aliased): 72

----------------------------------------------------------------------


----------------------------------------------------------------------
- final dump (with multiple specialization)
----------------------------------------------------------------------
======================================================================
AFTER BUILDING MAIN:
 Module 
  public submods  : 
  public types    : 
  public resources: 
  public procs    : 
  imports         : from int_list_test use 
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > inline (1 calls)
0: (argc#0:wybe.int, argv#0:wybe.int, ?exit_code#1:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:wybe.int, ?exit_code#1:wybe.int)
    foreign c gc_init(0:wybe.phantom, ?io#1:wybe.phantom)
    int_list_test.<0>(~#argc#0:wybe.int, ?_:wybe.int, ~#argv#0:wybe.int, ?_:wybe.int, 0:wybe.int, ?_:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #0

LLVM code       : None

--------------------------------------------------
 Module int_list
  public submods  : 
  public types    : int_list: (int_list.int_list,Just address)
  public resources: 
  public procs    : int_list.append<0>
                    int_list.count<0>
                    int_list.extend<0>
                    int_list.index<0>
                    int_list.insert<0>
                    int_list.pop<0>
                    int_list.print<0>
                    int_list.println<0>
                    int_list.range<0>
                    int_list.range_loop<0>
                    int_list.remove<0>
                    int_list.reverse<0>
                    int_list.sort<0>
                    int_list.int_list./=<0>
                    int_list.int_list.=<0>
                    int_list.int_list.[]<0>
                    int_list.int_list.[|]<0>
                    int_list.int_list.[|]<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
  imports         : public use int_list.int_list
                    use wybe
  types           : int_list/public  is address { []() @int_list:4:25 | [|](head:int, tail:int_list) @int_list:4:30  }  @int_list:4:5
  resources       : 
  submodules      : int_list.int_list
  procs           : 

append > public (0 calls)
0: append(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:int_list.int_list)
    foreign lpvm mutate(~tmp$5#0:int_list.int_list, ?tmp$6#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:int_list.int_list, ?tmp$7#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:int_list.int_list)
    int_list.extend<0>(~lst#0:int_list.int_list, ~tmp$7#0:int_list.int_list, ?$#0:int_list.int_list) #2 @int_list:48:49


count > public (3 calls)
0: count(lst#0:int_list.int_list, x#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$7#0:wybe.bool)
    case ~tmp$7#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?$#0:wybe.int) @int_list:98:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.count<0>(~t#0:int_list.int_list, x#0:wybe.int, ?tmp$2#0:wybe.int) #1 @int_list:101:9
        foreign llvm icmp eq(~h#0:wybe.int, ~x#0:wybe.int, ?tmp$4#0:wybe.bool) @wybe:35:36
        case ~tmp$4#0:wybe.bool of
        0:
            foreign llvm move(~tmp$2#0:wybe.int, ?$#0:wybe.int) @wybe:20:34

        1:
            foreign llvm add(~tmp$2#0:wybe.int, 1:wybe.int, ?$#0:wybe.int) @wybe:20:34




extend > public (3 calls)
0: extend(lst1#0:int_list.int_list, lst2#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst2#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(1,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(lst1#0:int_list.int_list, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~lst2#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:52:5

    1:
        foreign lpvm access(lst1#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst1#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.extend<0>(~t#0:int_list.int_list, ~lst2#0:int_list.int_list, ?tmp$2#0:int_list.int_list) #1 @int_list:53:35
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:int_list.int_list)
        foreign lpvm mutate(~tmp$8#0:int_list.int_list, ?tmp$9#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$9#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:int_list.int_list)



gen$1 > inline (2 calls)
0: gen$1([h#0:wybe.int], [lst#0:int_list.int_list], [t#0:int_list.int_list], tmp$2#0:wybe.int, tmp$3#0:wybe.int, [x#0:wybe.int], ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm add(~tmp$2#0:wybe.int, ~tmp$3#0:wybe.int, ?$#0:wybe.int) @wybe:20:34


greater > (3 calls)
0: greater(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:140:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp sge(h#0:wybe.int, v#0:wybe.int, ?tmp$6#0:wybe.bool) @wybe:34:36
        case ~tmp$6#0:wybe.bool of
        0:
            int_list.greater<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?$#0:int_list.int_list) #4 @int_list:147:13

        1:
            int_list.greater<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:145:18
            foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)




index > public inline (0 calls)
0: index(lst#0:int_list.int_list, x#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.index_helper<0>(~lst#0:int_list.int_list, 0:wybe.int, ~x#0:wybe.int, ?$#0:wybe.int) #0 @int_list:107:42


index_helper > (2 calls)
0: index_helper(lst#0:int_list.int_list, idx#0:wybe.int, x#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(-1:wybe.int, ?$#0:wybe.int) @int_list:109:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp eq(~h#0:wybe.int, x#0:wybe.int, ?tmp$5#0:wybe.bool) @wybe:35:36
        case ~tmp$5#0:wybe.bool of
        0:
            foreign llvm add(~idx#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.int) @wybe:20:34
            int_list.index_helper<0>(~t#0:int_list.int_list, ~tmp$3#0:wybe.int, ~x#0:wybe.int, ?$#0:wybe.int) #3 @int_list:116:13

        1:
            foreign llvm move(~idx#0:wybe.int, ?$#0:wybe.int) @int_list:109:1




insert > public (2 calls)
0: insert(lst#0:int_list.int_list, idx#0:wybe.int, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(4,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]])),(7,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp eq(idx#0:wybe.int, 0:wybe.int, ?tmp$9#0:wybe.bool) @wybe:35:36
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$13#0:wybe.bool)
        case ~tmp$13#0:wybe.bool of
        0:
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$7#0:wybe.int) @wybe:23:34
            int_list.insert<0>(~lst#0:int_list.int_list, ~tmp$7#0:wybe.int, ~v#0:wybe.int, ?$#0:int_list.int_list) #7 @int_list:67:13

        1:
            foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
            foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$5#0:wybe.int) @wybe:23:34
            int_list.insert<0>(~t#0:int_list.int_list, ~tmp$5#0:wybe.int, ~v#0:wybe.int, ?tmp$4#0:int_list.int_list) #4 @int_list:64:18
            foreign lpvm alloc(16:wybe.int, ?tmp$18#0:int_list.int_list)
            foreign lpvm mutate(~tmp$18#0:int_list.int_list, ?tmp$19#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$19#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$4#0:int_list.int_list)


    1:
        foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
        foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
        foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lst#0:int_list.int_list)



lesser > (3 calls)
0: lesser(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:129:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp slt(h#0:wybe.int, v#0:wybe.int, ?tmp$6#0:wybe.bool) @wybe:31:35
        case ~tmp$6#0:wybe.bool of
        0:
            int_list.lesser<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?$#0:int_list.int_list) #4 @int_list:136:13

        1:
            int_list.lesser<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:134:18
            foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)




pop > public (1 calls)
0: pop(lst#0:int_list.int_list, idx#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(3,(int_list.pop<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:84:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp eq(idx#0:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.bool) @wybe:35:36
        case ~tmp$6#0:wybe.bool of
        0:
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$4#0:wybe.int) @wybe:23:34
            int_list.pop<0>(~t#0:int_list.int_list, ~tmp$4#0:wybe.int, ?tmp$3#0:int_list.int_list) #3 @int_list:91:18
            foreign lpvm alloc(16:wybe.int, ?tmp$16#0:int_list.int_list)
            foreign lpvm mutate(~tmp$16#0:int_list.int_list, ?tmp$17#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$17#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)

        1:
            foreign llvm move(~t#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:84:5




print > public (3 calls)
0: print(x#0:int_list.int_list, io#0:wybe.phantom, ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne(x#0:int_list.int_list, 0:wybe.int, ?tmp$2#0:wybe.bool)
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#3:wybe.phantom)

    1:
        foreign lpvm access(x#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~x#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign c print_int(~h#0:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:88:36
        foreign c putchar(' ':wybe.char, ~%io#1:wybe.phantom, ?%io#2:wybe.phantom) @int_list:10:9
        int_list.print<0>(~t#0:int_list.int_list, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #2 @int_list:11:10



println > public inline (0 calls)
0: println(x#0:int_list.int_list, io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.print<0>(~x#0:int_list.int_list, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #0 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:86:26


range > public (0 calls)
0: range(start#0:wybe.int, stop#0:wybe.int, step#0:wybe.int, ?result#2:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(3,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 []]))]
    int_list.range_loop<0>(~start#0:wybe.int, ~stop#0:wybe.int, ~step#0:wybe.int, 0:int_list.int_list, ?%result#1:int_list.int_list) #1 @int_list:36:5
    int_list.reverse_helper<0>[04d1467a4d](~%result#1:int_list.int_list, 0:int_list.int_list, ?%result#2:int_list.int_list) #3 @int_list:153:42


range_loop > public (2 calls)
0: range_loop(start#0:wybe.int, stop#0:wybe.int, step#0:wybe.int, result#0:int_list.int_list, ?result#2:int_list.int_list):
 AliasPairs: [(result#0,result#2)]
 InterestingCallProperties: []
    foreign llvm icmp slt(start#0:wybe.int, stop#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:31:35
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~result#0:int_list.int_list, ?result#2:int_list.int_list)

    1:
        foreign lpvm alloc(16:wybe.int, ?tmp$7#0:int_list.int_list)
        foreign lpvm mutate(~tmp$7#0:int_list.int_list, ?tmp$8#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start#0:wybe.int)
        foreign lpvm mutate(~tmp$8#0:int_list.int_list, ?tmp$9#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result#0:int_list.int_list)
        foreign llvm add(~start#0:wybe.int, step#0:wybe.int, ?tmp$1#0:wybe.int) @wybe:20:34
        int_list.range_loop<0>(~tmp$1#0:wybe.int, ~stop#0:wybe.int, ~step#0:wybe.int, ~tmp$9#0:int_list.int_list, ?%result#2:int_list.int_list) #3 @int_list:43:9



remove > public (1 calls)
0: remove(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.remove<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:71:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp eq(h#0:wybe.int, v#0:wybe.int, ?tmp$5#0:wybe.bool) @wybe:35:36
        case ~tmp$5#0:wybe.bool of
        0:
            int_list.remove<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:78:18
            foreign lpvm alloc(16:wybe.int, ?tmp$13#0:int_list.int_list)
            foreign lpvm mutate(~tmp$13#0:int_list.int_list, ?tmp$14#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)

        1:
            foreign llvm move(~t#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:71:5




reverse > public inline (1 calls)
0: reverse(lst#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.reverse_helper<0>(~lst#0:int_list.int_list, 0:int_list.int_list, ?$#0:int_list.int_list) #1 @int_list:153:42


reverse_helper > (2 calls)
0: reverse_helper(lst#0:int_list.int_list, acc#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: [($#0,acc#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~acc#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:155:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:int_list.int_list)
        foreign lpvm mutate(~tmp$8#0:int_list.int_list, ?tmp$9#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$9#0:int_list.int_list, ?tmp$10#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~acc#0:int_list.int_list)
        int_list.reverse_helper<0>(~t#0:int_list.int_list, ~tmp$10#0:int_list.int_list, ?$#0:int_list.int_list) #2 @int_list:156:29



sort > public (2 calls)
0: sort(lst#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(3,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(6,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$10#0:wybe.bool)
    case ~tmp$10#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:122:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.lesser<0>(t#0:int_list.int_list, h#0:wybe.int, ?tmp$3#0:int_list.int_list) #1 @int_list:125:21
        int_list.sort<0>[04d1467a4d](~tmp$3#0:int_list.int_list, ?tmp$2#0:int_list.int_list) #2 @int_list:125:16
        int_list.greater<0>(~t#0:int_list.int_list, h#0:wybe.int, ?tmp$6#0:int_list.int_list) #3 @int_list:125:46
        int_list.sort<0>[04d1467a4d](~tmp$6#0:int_list.int_list, ?tmp$5#0:int_list.int_list) #4 @int_list:125:41
        foreign lpvm alloc(16:wybe.int, ?tmp$13#0:int_list.int_list)
        foreign lpvm mutate(~tmp$13#0:int_list.int_list, ?tmp$14#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$5#0:int_list.int_list)
        int_list.extend<0>[04d1467a4d](~tmp$2#0:int_list.int_list, ~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list) #6 @int_list:125:9


LLVM code       : None

--------------------------------------------------
 Module int_list.int_list
  public submods  : 
  public types    : 
  public resources: 
  public procs    : int_list.int_list./=<0>
                    int_list.int_list.=<0>
                    int_list.int_list.[]<0>
                    int_list.int_list.[|]<0>
                    int_list.int_list.[|]<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
  imports         : use int_list
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline (0 calls)
0: /=($left#0:int_list.int_list, $right#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.int_list.=<0>(~$left#0:int_list.int_list, ~$right#0:int_list.int_list, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (5 calls)
0: =($left#0:int_list.int_list, $right#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($left#0:!wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp eq(~$left#0:int_list.int_list, ~$right#0:int_list.int_list, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($left#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$head#0:wybe.int)
        foreign lpvm access(~$left#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$tail#0:int_list.int_list)
        foreign llvm icmp ne($right#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
        case ~tmp$9#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access($right#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$head#0:wybe.int)
            foreign lpvm access(~$right#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$tail#0:int_list.int_list)
            foreign llvm icmp eq(~$left$head#0:wybe.int, ~$right$head#0:wybe.int, ?tmp$4#0:wybe.bool) @wybe:35:36
            case ~tmp$4#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                int_list.int_list.=<0>(~$left$tail#0:int_list.int_list, ~$right$tail#0:int_list.int_list, ?$$#0:wybe.bool) #3





[] > public inline (0 calls)
0: [](?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list)


[|] > public inline (0 calls)
0: [|](head#0:wybe.int, tail#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!int_list.int_list)
    foreign lpvm mutate(~%$rec#0:int_list.int_list, ?%$rec#1:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:int_list.int_list, ?%$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail#0:int_list.int_list)
[|] > public inline (12 calls)
1: [|](?head#0:wybe.int, ?tail#0:int_list.int_list, $#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($#0:int_list.int_list, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head#0:wybe.int)
        foreign lpvm access(~$#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail#0:int_list.int_list)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



head > public inline (0 calls)
0: head($rec#0:int_list.int_list, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($rec#0:int_list.int_list, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

head > public inline (0 calls)
1: head($rec#0:int_list.int_list, ?$rec#1:int_list.int_list, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($rec#0:int_list.int_list, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:int_list.int_list, ?$rec#1:int_list.int_list)

    1:
        foreign lpvm mutate(~%$rec#0:int_list.int_list, ?%$rec#1:int_list.int_list, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



tail > public inline (0 calls)
0: tail($rec#0:int_list.int_list, ?$#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($rec#0:int_list.int_list, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:int_list.int_list)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

tail > public inline (0 calls)
1: tail($rec#0:int_list.int_list, ?$rec#1:int_list.int_list, $field#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($rec#0:int_list.int_list, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:int_list.int_list, ?$rec#1:int_list.int_list)

    1:
        foreign lpvm mutate noalias(~%$rec#0:int_list.int_list, ?%$rec#1:int_list.int_list, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:int_list.int_list)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


LLVM code       : None

--------------------------------------------------
 Module int_list_test
  public submods  : 
  public types    : 
  public resources: 
  public procs    : int_list_test.<0>
  imports         : use int_list
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#28:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(24,(int_list_test.test_int_list<0>,fromList [NonAliasedParamCond 0 [],NonAliasedParamCond 1 [],NonAliasedParamCond 2 []]))]
    foreign c malloc_count(?mc1#0:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:110:44
    int_list.range<0>(1:wybe.int, 10:wybe.int, 1:wybe.int, ?tmp$0#0:int_list.int_list) #1 @int_list_test:32:6
    int_list.range<0>(2:wybe.int, 20:wybe.int, 2:wybe.int, ?tmp$1#0:int_list.int_list) #2 @int_list_test:33:6
    int_list.range<0>(3:wybe.int, 30:wybe.int, 3:wybe.int, ?tmp$2#0:int_list.int_list) #3 @int_list_test:34:6
    foreign c print_string("x y z:":wybe.string, ~#io#1:wybe.phantom, ?tmp$9#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$9#0:wybe.phantom, ?#io#2:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#2:wybe.phantom, ?tmp$12#0:wybe.phantom) #34 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$12#0:wybe.phantom, ?#io#3:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$1#0:int_list.int_list, ~#io#3:wybe.phantom, ?tmp$15#0:wybe.phantom) #35 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$15#0:wybe.phantom, ?#io#4:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#4:wybe.phantom, ?tmp$18#0:wybe.phantom) #36 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$18#0:wybe.phantom, ?#io#5:wybe.phantom) @wybe:86:26
    foreign c malloc_count(?mc2#0:wybe.int, ~#io#5:wybe.phantom, ?#io#6:wybe.phantom) @wybe:110:44
    foreign llvm sub(~mc2#0:wybe.int, ~mc1#0:wybe.int, ?tmp$3#0:wybe.int) @wybe:23:34
    foreign c print_string("--------------------":wybe.string, ~#io#6:wybe.phantom, ?tmp$24#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$24#0:wybe.phantom, ?#io#7:wybe.phantom) @wybe:86:26
    foreign c print_string("tests with alias":wybe.string, ~#io#7:wybe.phantom, ?tmp$27#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$27#0:wybe.phantom, ?#io#8:wybe.phantom) @wybe:86:26
    foreign c malloc_count(?mc1#1:wybe.int, ~#io#8:wybe.phantom, ?#io#9:wybe.phantom) @wybe:110:44
    int_list_test.test_int_list<0>(tmp$0#0:int_list.int_list, tmp$1#0:int_list.int_list, tmp$2#0:int_list.int_list, ~#io#9:wybe.phantom, ?#io#10:wybe.phantom) #13 @int_list_test:47:2
    foreign c malloc_count(?mc2#1:wybe.int, ~#io#10:wybe.phantom, ?#io#11:wybe.phantom) @wybe:110:44
    foreign llvm sub(~mc2#1:wybe.int, ~mc1#1:wybe.int, ?tmp$4#0:wybe.int) @wybe:23:34
    foreign c print_string("original x y z:":wybe.string, ~#io#11:wybe.phantom, ?tmp$34#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$34#0:wybe.phantom, ?#io#12:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#12:wybe.phantom, ?tmp$37#0:wybe.phantom) #37 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$37#0:wybe.phantom, ?#io#13:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$1#0:int_list.int_list, ~#io#13:wybe.phantom, ?tmp$40#0:wybe.phantom) #38 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$40#0:wybe.phantom, ?#io#14:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#14:wybe.phantom, ?tmp$43#0:wybe.phantom) #39 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$43#0:wybe.phantom, ?#io#15:wybe.phantom) @wybe:86:26
    foreign c print_string("--------------------":wybe.string, ~#io#15:wybe.phantom, ?tmp$46#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$46#0:wybe.phantom, ?#io#16:wybe.phantom) @wybe:86:26
    foreign c print_string("--------------------":wybe.string, ~#io#16:wybe.phantom, ?tmp$49#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$49#0:wybe.phantom, ?#io#17:wybe.phantom) @wybe:86:26
    foreign c print_string("tests without alias":wybe.string, ~#io#17:wybe.phantom, ?tmp$52#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$52#0:wybe.phantom, ?#io#18:wybe.phantom) @wybe:86:26
    foreign c malloc_count(?mc1#2:wybe.int, ~#io#18:wybe.phantom, ?#io#19:wybe.phantom) @wybe:110:44
    int_list_test.test_int_list<0>[5d19dca133](~tmp$0#0:int_list.int_list, ~tmp$1#0:int_list.int_list, ~tmp$2#0:int_list.int_list, ~#io#19:wybe.phantom, ?#io#20:wybe.phantom) #24 @int_list_test:60:2
    foreign c malloc_count(?mc2#2:wybe.int, ~#io#20:wybe.phantom, ?#io#21:wybe.phantom) @wybe:110:44
    foreign llvm sub(~mc2#2:wybe.int, ~mc1#2:wybe.int, ?tmp$5#0:wybe.int) @wybe:23:34
    foreign c print_string("--------------------":wybe.string, ~#io#21:wybe.phantom, ?tmp$59#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$59#0:wybe.phantom, ?#io#22:wybe.phantom) @wybe:86:26
    foreign c print_string(" ** malloc count of building lists: ":wybe.string, ~#io#22:wybe.phantom, ?#io#23:wybe.phantom) @wybe:100:39
    foreign c print_int(~tmp$3#0:wybe.int, ~#io#23:wybe.phantom, ?tmp$64#0:wybe.phantom) @wybe:88:36
    foreign c putchar('\n':wybe.char, ~tmp$64#0:wybe.phantom, ?#io#24:wybe.phantom) @wybe:86:26
    foreign c print_string(" ** malloc count of test(aliased): ":wybe.string, ~#io#24:wybe.phantom, ?#io#25:wybe.phantom) @wybe:100:39
    foreign c print_int(~tmp$4#0:wybe.int, ~#io#25:wybe.phantom, ?tmp$69#0:wybe.phantom) @wybe:88:36
    foreign c putchar('\n':wybe.char, ~tmp$69#0:wybe.phantom, ?#io#26:wybe.phantom) @wybe:86:26
    foreign c print_string(" ** malloc count of test(non-aliased): ":wybe.string, ~#io#26:wybe.phantom, ?#io#27:wybe.phantom) @wybe:100:39
    foreign c print_int(~tmp$5#0:wybe.int, ~#io#27:wybe.phantom, ?tmp$74#0:wybe.phantom) @wybe:88:36
    foreign c putchar('\n':wybe.char, ~tmp$74#0:wybe.phantom, ?#io#28:wybe.phantom) @wybe:86:26


test_int_list > (2 calls)
0: test_int_list(x#0:int_list.int_list, y#0:int_list.int_list, z#0:int_list.int_list, io#0:wybe.phantom, ?io#10:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 1,InterestingUnaliased 2]
 MultiSpeczDepInfo: [(2,(int_list.append<0>,fromList [NonAliasedParamCond 0 [1]])),(7,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(8,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(11,(int_list.insert<0>,fromList [NonAliasedParamCond 0 []])),(12,(int_list.pop<0>,fromList [NonAliasedParamCond 0 []])),(13,(int_list.remove<0>,fromList [NonAliasedParamCond 0 []])),(16,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(19,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(20,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [2]]))]
    int_list.reverse_helper<0>(~%x#0:int_list.int_list, 0:int_list.int_list, ?%x#1:int_list.int_list) #19 @int_list:153:42
    int_list.reverse_helper<0>(~%z#0:int_list.int_list, 0:int_list.int_list, ?%z#1:int_list.int_list) #20 @int_list:153:42
    int_list.append<0>(~y#0:int_list.int_list, 99:wybe.int, ?tmp$0#0:int_list.int_list) #2 @int_list_test:8:10
    foreign c print_string("-":wybe.string, ~#io#0:wybe.phantom, ?tmp$10#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:86:26
    int_list.print<0>(x#1:int_list.int_list, ~#io#1:wybe.phantom, ?tmp$13#0:wybe.phantom) #21 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#2:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#2:wybe.phantom, ?tmp$16#0:wybe.phantom) #22 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$16#0:wybe.phantom, ?#io#3:wybe.phantom) @wybe:86:26
    int_list.print<0>(z#1:int_list.int_list, ~#io#3:wybe.phantom, ?tmp$19#0:wybe.phantom) #23 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$19#0:wybe.phantom, ?#io#4:wybe.phantom) @wybe:86:26
    int_list.extend<0>[04d1467a4d](~x#1:int_list.int_list, ~tmp$0#0:int_list.int_list, ?tmp$1#0:int_list.int_list) #7 @int_list_test:14:10
    int_list.extend<0>[04d1467a4d](~tmp$1#0:int_list.int_list, ~z#1:int_list.int_list, ?tmp$2#0:int_list.int_list) #8 @int_list_test:15:10
    foreign c print_string("-":wybe.string, ~#io#4:wybe.phantom, ?tmp$22#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$22#0:wybe.phantom, ?#io#5:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#5:wybe.phantom, ?tmp$25#0:wybe.phantom) #24 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$25#0:wybe.phantom, ?#io#6:wybe.phantom) @wybe:86:26
    int_list.insert<0>[04d1467a4d](~tmp$2#0:int_list.int_list, 4:wybe.int, 78:wybe.int, ?tmp$3#0:int_list.int_list) #11 @int_list_test:19:10
    int_list.pop<0>[04d1467a4d](~tmp$3#0:int_list.int_list, 20:wybe.int, ?tmp$4#0:int_list.int_list) #12 @int_list_test:20:10
    int_list.remove<0>[04d1467a4d](~tmp$4#0:int_list.int_list, 2:wybe.int, ?tmp$5#0:int_list.int_list) #13 @int_list_test:21:10
    foreign c print_string("-":wybe.string, ~#io#6:wybe.phantom, ?tmp$28#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$28#0:wybe.phantom, ?#io#7:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$5#0:int_list.int_list, ~#io#7:wybe.phantom, ?tmp$31#0:wybe.phantom) #25 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$31#0:wybe.phantom, ?#io#8:wybe.phantom) @wybe:86:26
    int_list.sort<0>[04d1467a4d](~tmp$5#0:int_list.int_list, ?%l#5:int_list.int_list) #16 @int_list_test:25:5
    foreign c print_string("-":wybe.string, ~#io#8:wybe.phantom, ?tmp$34#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$34#0:wybe.phantom, ?#io#9:wybe.phantom) @wybe:86:26
    int_list.print<0>(~l#5:int_list.int_list, ~#io#9:wybe.phantom, ?tmp$37#0:wybe.phantom) #26 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$37#0:wybe.phantom, ?#io#10:wybe.phantom) @wybe:86:26

LLVM code       : None

======================================================================
AFTER EVERYTHING:
 Module 
  public submods  : 
  public types    : 
  public resources: 
  public procs    : 
  imports         : from int_list_test use 
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > inline (1 calls)
0: (argc#0:wybe.int, argv#0:wybe.int, ?exit_code#1:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:wybe.int, ?exit_code#1:wybe.int)
    foreign c gc_init(0:wybe.phantom, ?io#1:wybe.phantom)
    int_list_test.<0>(~#argc#0:wybe.int, ?_:wybe.int, ~#argv#0:wybe.int, ?_:wybe.int, 0:wybe.int, ?_:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #0

  LLVM code       :

; ModuleID = ''


 


declare external fastcc  void @"int_list_test.<0>"(i64, i64, i64)    


declare external ccc  void @gc_init()    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i32 @main(i64  %"argc#0", i64  %"argv#0")    {
entry:
  tail call ccc  void  @gc_init()  
  tail call fastcc  void  @"int_list_test.<0>"(i64  %"argc#0", i64  %"argv#0", i64  0)  
  ret i64 0 
}
--------------------------------------------------
 Module int_list
  public submods  : 
  public types    : int_list: (int_list.int_list,Just address)
  public resources: 
  public procs    : int_list.append<0>
                    int_list.count<0>
                    int_list.extend<0>
                    int_list.index<0>
                    int_list.insert<0>
                    int_list.pop<0>
                    int_list.print<0>
                    int_list.println<0>
                    int_list.range<0>
                    int_list.range_loop<0>
                    int_list.remove<0>
                    int_list.reverse<0>
                    int_list.sort<0>
                    int_list.int_list./=<0>
                    int_list.int_list.=<0>
                    int_list.int_list.[]<0>
                    int_list.int_list.[|]<0>
                    int_list.int_list.[|]<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
  imports         : public use int_list.int_list
                    use wybe
  types           : int_list/public  is address { []() @int_list:4:25 | [|](head:int, tail:int_list) @int_list:4:30  }  @int_list:4:5
  resources       : 
  submodules      : int_list.int_list
  procs           : 

append > public (0 calls)
0: append(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:int_list.int_list)
    foreign lpvm mutate(~tmp$5#0:int_list.int_list, ?tmp$6#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:int_list.int_list, ?tmp$7#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:int_list.int_list)
    int_list.extend<0>(~lst#0:int_list.int_list, ~tmp$7#0:int_list.int_list, ?$#0:int_list.int_list) #2 @int_list:48:49
 [04d1467a4d] [NonAliasedParam 0] :
    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:int_list.int_list)
    foreign lpvm mutate(~tmp$5#0:int_list.int_list, ?tmp$6#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:int_list.int_list, ?tmp$7#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:int_list.int_list)
    int_list.extend<0>[04d1467a4d](~lst#0:int_list.int_list, ~tmp$7#0:int_list.int_list, ?$#0:int_list.int_list) #2 @int_list:48:49


count > public (3 calls)
0: count(lst#0:int_list.int_list, x#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$7#0:wybe.bool)
    case ~tmp$7#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?$#0:wybe.int) @int_list:98:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.count<0>(~t#0:int_list.int_list, x#0:wybe.int, ?tmp$2#0:wybe.int) #1 @int_list:101:9
        foreign llvm icmp eq(~h#0:wybe.int, ~x#0:wybe.int, ?tmp$4#0:wybe.bool) @wybe:35:36
        case ~tmp$4#0:wybe.bool of
        0:
            foreign llvm move(~tmp$2#0:wybe.int, ?$#0:wybe.int) @wybe:20:34

        1:
            foreign llvm add(~tmp$2#0:wybe.int, 1:wybe.int, ?$#0:wybe.int) @wybe:20:34




extend > public (3 calls)
0: extend(lst1#0:int_list.int_list, lst2#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst2#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(1,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(lst1#0:int_list.int_list, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~lst2#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:52:5

    1:
        foreign lpvm access(lst1#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst1#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.extend<0>(~t#0:int_list.int_list, ~lst2#0:int_list.int_list, ?tmp$2#0:int_list.int_list) #1 @int_list:53:35
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:int_list.int_list)
        foreign lpvm mutate(~tmp$8#0:int_list.int_list, ?tmp$9#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$9#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:int_list.int_list)

 [04d1467a4d] [NonAliasedParam 0] :
    foreign llvm icmp ne(lst1#0:int_list.int_list, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~lst2#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:52:5

    1:
        foreign lpvm access(lst1#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst1#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.extend<0>[04d1467a4d](~t#0:int_list.int_list, ~lst2#0:int_list.int_list, ?tmp$2#0:int_list.int_list) #1 @int_list:53:35
        foreign llvm sub(~lst1#0:int_list.int_list, 0:wybe.int, ?tmp$8#0:int_list.int_list)
        foreign lpvm mutate(~tmp$8#0:int_list.int_list, ?tmp$9#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$9#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:int_list.int_list)



gen$1 > inline (2 calls)
0: gen$1([h#0:wybe.int], [lst#0:int_list.int_list], [t#0:int_list.int_list], tmp$2#0:wybe.int, tmp$3#0:wybe.int, [x#0:wybe.int], ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm add(~tmp$2#0:wybe.int, ~tmp$3#0:wybe.int, ?$#0:wybe.int) @wybe:20:34


greater > (3 calls)
0: greater(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:140:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp sge(h#0:wybe.int, v#0:wybe.int, ?tmp$6#0:wybe.bool) @wybe:34:36
        case ~tmp$6#0:wybe.bool of
        0:
            int_list.greater<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?$#0:int_list.int_list) #4 @int_list:147:13

        1:
            int_list.greater<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:145:18
            foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)


 [04d1467a4d] [NonAliasedParam 0] :
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:140:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp sge(h#0:wybe.int, v#0:wybe.int, ?tmp$6#0:wybe.bool) @wybe:34:36
        case ~tmp$6#0:wybe.bool of
        0:
            int_list.greater<0>[04d1467a4d](~t#0:int_list.int_list, ~v#0:wybe.int, ?$#0:int_list.int_list) #4 @int_list:147:13

        1:
            int_list.greater<0>[04d1467a4d](~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:145:18
            foreign llvm sub(~lst#0:int_list.int_list, 0:wybe.int, ?tmp$14#0:int_list.int_list)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)




index > public inline (0 calls)
0: index(lst#0:int_list.int_list, x#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.index_helper<0>(~lst#0:int_list.int_list, 0:wybe.int, ~x#0:wybe.int, ?$#0:wybe.int) #0 @int_list:107:42


index_helper > (2 calls)
0: index_helper(lst#0:int_list.int_list, idx#0:wybe.int, x#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(-1:wybe.int, ?$#0:wybe.int) @int_list:109:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp eq(~h#0:wybe.int, x#0:wybe.int, ?tmp$5#0:wybe.bool) @wybe:35:36
        case ~tmp$5#0:wybe.bool of
        0:
            foreign llvm add(~idx#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.int) @wybe:20:34
            int_list.index_helper<0>(~t#0:int_list.int_list, ~tmp$3#0:wybe.int, ~x#0:wybe.int, ?$#0:wybe.int) #3 @int_list:116:13

        1:
            foreign llvm move(~idx#0:wybe.int, ?$#0:wybe.int) @int_list:109:1




insert > public (2 calls)
0: insert(lst#0:int_list.int_list, idx#0:wybe.int, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(4,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]])),(7,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp eq(idx#0:wybe.int, 0:wybe.int, ?tmp$9#0:wybe.bool) @wybe:35:36
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$13#0:wybe.bool)
        case ~tmp$13#0:wybe.bool of
        0:
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$7#0:wybe.int) @wybe:23:34
            int_list.insert<0>(~lst#0:int_list.int_list, ~tmp$7#0:wybe.int, ~v#0:wybe.int, ?$#0:int_list.int_list) #7 @int_list:67:13

        1:
            foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
            foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$5#0:wybe.int) @wybe:23:34
            int_list.insert<0>(~t#0:int_list.int_list, ~tmp$5#0:wybe.int, ~v#0:wybe.int, ?tmp$4#0:int_list.int_list) #4 @int_list:64:18
            foreign lpvm alloc(16:wybe.int, ?tmp$18#0:int_list.int_list)
            foreign lpvm mutate(~tmp$18#0:int_list.int_list, ?tmp$19#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$19#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$4#0:int_list.int_list)


    1:
        foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
        foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
        foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lst#0:int_list.int_list)

 [04d1467a4d] [NonAliasedParam 0] :
    foreign llvm icmp eq(idx#0:wybe.int, 0:wybe.int, ?tmp$9#0:wybe.bool) @wybe:35:36
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$13#0:wybe.bool)
        case ~tmp$13#0:wybe.bool of
        0:
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$7#0:wybe.int) @wybe:23:34
            int_list.insert<0>[04d1467a4d](~lst#0:int_list.int_list, ~tmp$7#0:wybe.int, ~v#0:wybe.int, ?$#0:int_list.int_list) #7 @int_list:67:13

        1:
            foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
            foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$5#0:wybe.int) @wybe:23:34
            int_list.insert<0>[04d1467a4d](~t#0:int_list.int_list, ~tmp$5#0:wybe.int, ~v#0:wybe.int, ?tmp$4#0:int_list.int_list) #4 @int_list:64:18
            foreign llvm sub(~lst#0:int_list.int_list, 0:wybe.int, ?tmp$18#0:int_list.int_list)
            foreign lpvm mutate(~tmp$18#0:int_list.int_list, ?tmp$19#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$19#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$4#0:int_list.int_list)


    1:
        foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
        foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
        foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lst#0:int_list.int_list)



lesser > (3 calls)
0: lesser(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:129:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp slt(h#0:wybe.int, v#0:wybe.int, ?tmp$6#0:wybe.bool) @wybe:31:35
        case ~tmp$6#0:wybe.bool of
        0:
            int_list.lesser<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?$#0:int_list.int_list) #4 @int_list:136:13

        1:
            int_list.lesser<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:134:18
            foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)




pop > public (1 calls)
0: pop(lst#0:int_list.int_list, idx#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(3,(int_list.pop<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:84:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp eq(idx#0:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.bool) @wybe:35:36
        case ~tmp$6#0:wybe.bool of
        0:
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$4#0:wybe.int) @wybe:23:34
            int_list.pop<0>(~t#0:int_list.int_list, ~tmp$4#0:wybe.int, ?tmp$3#0:int_list.int_list) #3 @int_list:91:18
            foreign lpvm alloc(16:wybe.int, ?tmp$16#0:int_list.int_list)
            foreign lpvm mutate(~tmp$16#0:int_list.int_list, ?tmp$17#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$17#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)

        1:
            foreign llvm move(~t#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:84:5


 [04d1467a4d] [NonAliasedParam 0] :
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:84:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp eq(idx#0:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.bool) @wybe:35:36
        case ~tmp$6#0:wybe.bool of
        0:
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$4#0:wybe.int) @wybe:23:34
            int_list.pop<0>[04d1467a4d](~t#0:int_list.int_list, ~tmp$4#0:wybe.int, ?tmp$3#0:int_list.int_list) #3 @int_list:91:18
            foreign llvm sub(~lst#0:int_list.int_list, 0:wybe.int, ?tmp$16#0:int_list.int_list)
            foreign lpvm mutate(~tmp$16#0:int_list.int_list, ?tmp$17#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$17#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)

        1:
            foreign llvm move(~t#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:84:5




print > public (3 calls)
0: print(x#0:int_list.int_list, io#0:wybe.phantom, ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne(x#0:int_list.int_list, 0:wybe.int, ?tmp$2#0:wybe.bool)
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#3:wybe.phantom)

    1:
        foreign lpvm access(x#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~x#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign c print_int(~h#0:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:88:36
        foreign c putchar(' ':wybe.char, ~%io#1:wybe.phantom, ?%io#2:wybe.phantom) @int_list:10:9
        int_list.print<0>(~t#0:int_list.int_list, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #2 @int_list:11:10



println > public inline (0 calls)
0: println(x#0:int_list.int_list, io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.print<0>(~x#0:int_list.int_list, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #0 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:86:26


range > public (0 calls)
0: range(start#0:wybe.int, stop#0:wybe.int, step#0:wybe.int, ?result#2:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(3,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 []]))]
    int_list.range_loop<0>(~start#0:wybe.int, ~stop#0:wybe.int, ~step#0:wybe.int, 0:int_list.int_list, ?%result#1:int_list.int_list) #1 @int_list:36:5
    int_list.reverse_helper<0>[04d1467a4d](~%result#1:int_list.int_list, 0:int_list.int_list, ?%result#2:int_list.int_list) #3 @int_list:153:42


range_loop > public (2 calls)
0: range_loop(start#0:wybe.int, stop#0:wybe.int, step#0:wybe.int, result#0:int_list.int_list, ?result#2:int_list.int_list):
 AliasPairs: [(result#0,result#2)]
 InterestingCallProperties: []
    foreign llvm icmp slt(start#0:wybe.int, stop#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:31:35
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~result#0:int_list.int_list, ?result#2:int_list.int_list)

    1:
        foreign lpvm alloc(16:wybe.int, ?tmp$7#0:int_list.int_list)
        foreign lpvm mutate(~tmp$7#0:int_list.int_list, ?tmp$8#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start#0:wybe.int)
        foreign lpvm mutate(~tmp$8#0:int_list.int_list, ?tmp$9#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result#0:int_list.int_list)
        foreign llvm add(~start#0:wybe.int, step#0:wybe.int, ?tmp$1#0:wybe.int) @wybe:20:34
        int_list.range_loop<0>(~tmp$1#0:wybe.int, ~stop#0:wybe.int, ~step#0:wybe.int, ~tmp$9#0:int_list.int_list, ?%result#2:int_list.int_list) #3 @int_list:43:9



remove > public (1 calls)
0: remove(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.remove<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:71:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp eq(h#0:wybe.int, v#0:wybe.int, ?tmp$5#0:wybe.bool) @wybe:35:36
        case ~tmp$5#0:wybe.bool of
        0:
            int_list.remove<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:78:18
            foreign lpvm alloc(16:wybe.int, ?tmp$13#0:int_list.int_list)
            foreign lpvm mutate(~tmp$13#0:int_list.int_list, ?tmp$14#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)

        1:
            foreign llvm move(~t#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:71:5


 [04d1467a4d] [NonAliasedParam 0] :
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:71:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp eq(h#0:wybe.int, v#0:wybe.int, ?tmp$5#0:wybe.bool) @wybe:35:36
        case ~tmp$5#0:wybe.bool of
        0:
            int_list.remove<0>[04d1467a4d](~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:78:18
            foreign llvm sub(~lst#0:int_list.int_list, 0:wybe.int, ?tmp$13#0:int_list.int_list)
            foreign lpvm mutate(~tmp$13#0:int_list.int_list, ?tmp$14#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)

        1:
            foreign llvm move(~t#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:71:5




reverse > public inline (1 calls)
0: reverse(lst#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.reverse_helper<0>(~lst#0:int_list.int_list, 0:int_list.int_list, ?$#0:int_list.int_list) #1 @int_list:153:42


reverse_helper > (2 calls)
0: reverse_helper(lst#0:int_list.int_list, acc#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: [($#0,acc#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~acc#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:155:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:int_list.int_list)
        foreign lpvm mutate(~tmp$8#0:int_list.int_list, ?tmp$9#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$9#0:int_list.int_list, ?tmp$10#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~acc#0:int_list.int_list)
        int_list.reverse_helper<0>(~t#0:int_list.int_list, ~tmp$10#0:int_list.int_list, ?$#0:int_list.int_list) #2 @int_list:156:29

 [04d1467a4d] [NonAliasedParam 0] :
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~acc#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:155:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm sub(~lst#0:int_list.int_list, 0:wybe.int, ?tmp$8#0:int_list.int_list)
        foreign lpvm mutate(~tmp$8#0:int_list.int_list, ?tmp$9#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$9#0:int_list.int_list, ?tmp$10#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~acc#0:int_list.int_list)
        int_list.reverse_helper<0>[04d1467a4d](~t#0:int_list.int_list, ~tmp$10#0:int_list.int_list, ?$#0:int_list.int_list) #2 @int_list:156:29



sort > public (2 calls)
0: sort(lst#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(3,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(6,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$10#0:wybe.bool)
    case ~tmp$10#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:122:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.lesser<0>(t#0:int_list.int_list, h#0:wybe.int, ?tmp$3#0:int_list.int_list) #1 @int_list:125:21
        int_list.sort<0>[04d1467a4d](~tmp$3#0:int_list.int_list, ?tmp$2#0:int_list.int_list) #2 @int_list:125:16
        int_list.greater<0>(~t#0:int_list.int_list, h#0:wybe.int, ?tmp$6#0:int_list.int_list) #3 @int_list:125:46
        int_list.sort<0>[04d1467a4d](~tmp$6#0:int_list.int_list, ?tmp$5#0:int_list.int_list) #4 @int_list:125:41
        foreign lpvm alloc(16:wybe.int, ?tmp$13#0:int_list.int_list)
        foreign lpvm mutate(~tmp$13#0:int_list.int_list, ?tmp$14#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$5#0:int_list.int_list)
        int_list.extend<0>[04d1467a4d](~tmp$2#0:int_list.int_list, ~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list) #6 @int_list:125:9

 [04d1467a4d] [NonAliasedParam 0] :
    foreign llvm icmp ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$10#0:wybe.bool)
    case ~tmp$10#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:122:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.lesser<0>(t#0:int_list.int_list, h#0:wybe.int, ?tmp$3#0:int_list.int_list) #1 @int_list:125:21
        int_list.sort<0>[04d1467a4d](~tmp$3#0:int_list.int_list, ?tmp$2#0:int_list.int_list) #2 @int_list:125:16
        int_list.greater<0>[04d1467a4d](~t#0:int_list.int_list, h#0:wybe.int, ?tmp$6#0:int_list.int_list) #3 @int_list:125:46
        int_list.sort<0>[04d1467a4d](~tmp$6#0:int_list.int_list, ?tmp$5#0:int_list.int_list) #4 @int_list:125:41
        foreign llvm sub(~lst#0:int_list.int_list, 0:wybe.int, ?tmp$13#0:int_list.int_list)
        foreign lpvm mutate(~tmp$13#0:int_list.int_list, ?tmp$14#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$5#0:int_list.int_list)
        int_list.extend<0>[04d1467a4d](~tmp$2#0:int_list.int_list, ~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list) #6 @int_list:125:9


  LLVM code       :

; ModuleID = 'int_list'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"int_list.append<0>"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 %"v#0", i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 0, i64* %8 
  %"1$$#0" = tail call fastcc  i64  @"int_list.extend<0>"(i64  %"lst#0", i64  %3)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"int_list.append<0>[04d1467a4d]"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %9 = trunc i64 16 to i32  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  %9)  
  %11 = ptrtoint i8* %10 to i64 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 %"v#0", i64* %13 
  %14 = add   i64 %11, 8 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 0, i64* %16 
  %"1$$#0" = tail call fastcc  i64  @"int_list.extend<0>[04d1467a4d]"(i64  %"lst#0", i64  %11)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"int_list.count<0>"(i64  %"lst#0", i64  %"x#0")    {
entry:
  %"1$tmp$7#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$7#0", label %if.then, label %if.else 
if.then:
  %17 = inttoptr i64 %"lst#0" to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  %19 = load  i64, i64* %18 
  %20 = add   i64 %"lst#0", 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  %23 = load  i64, i64* %22 
  %"2$tmp$2#0" = tail call fastcc  i64  @"int_list.count<0>"(i64  %23, i64  %"x#0")  
  %"2$tmp$4#0" = icmp eq i64 %19, %"x#0" 
  br i1 %"2$tmp$4#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  %"4$$#0" = add   i64 %"2$tmp$2#0", 1 
  ret i64 %"4$$#0" 
if.else1:
  ret i64 %"2$tmp$2#0" 
}


define external fastcc  i64 @"int_list.extend<0>"(i64  %"lst1#0", i64  %"lst2#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"lst1#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %24 = inttoptr i64 %"lst1#0" to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = add   i64 %"lst1#0", 8 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %"2$tmp$2#0" = tail call fastcc  i64  @"int_list.extend<0>"(i64  %30, i64  %"lst2#0")  
  %31 = trunc i64 16 to i32  
  %32 = tail call ccc  i8*  @wybe_malloc(i32  %31)  
  %33 = ptrtoint i8* %32 to i64 
  %34 = inttoptr i64 %33 to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  store  i64 %26, i64* %35 
  %36 = add   i64 %33, 8 
  %37 = inttoptr i64 %36 to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  store  i64 %"2$tmp$2#0", i64* %38 
  ret i64 %33 
if.else:
  ret i64 %"lst2#0" 
}


define external fastcc  i64 @"int_list.extend<0>[04d1467a4d]"(i64  %"lst1#0", i64  %"lst2#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"lst1#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %39 = inttoptr i64 %"lst1#0" to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  %41 = load  i64, i64* %40 
  %42 = add   i64 %"lst1#0", 8 
  %43 = inttoptr i64 %42 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  %45 = load  i64, i64* %44 
  %"2$tmp$2#0" = tail call fastcc  i64  @"int_list.extend<0>[04d1467a4d]"(i64  %45, i64  %"lst2#0")  
  %"2$tmp$8#0" = sub   i64 %"lst1#0", 0 
  %46 = inttoptr i64 %"2$tmp$8#0" to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  store  i64 %41, i64* %47 
  %48 = add   i64 %"2$tmp$8#0", 8 
  %49 = inttoptr i64 %48 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  store  i64 %"2$tmp$2#0", i64* %50 
  ret i64 %"2$tmp$8#0" 
if.else:
  ret i64 %"lst2#0" 
}


define external fastcc  i64 @"int_list.gen$1<0>"(i64  %"tmp$2#0", i64  %"tmp$3#0")    {
entry:
  %"1$$#0" = add   i64 %"tmp$2#0", %"tmp$3#0" 
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"int_list.greater<0>"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %"1$tmp$9#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %51 = inttoptr i64 %"lst#0" to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  %53 = load  i64, i64* %52 
  %54 = add   i64 %"lst#0", 8 
  %55 = inttoptr i64 %54 to i64* 
  %56 = getelementptr  i64, i64* %55, i64 0 
  %57 = load  i64, i64* %56 
  %"2$tmp$6#0" = icmp sge i64 %53, %"v#0" 
  br i1 %"2$tmp$6#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  %"4$tmp$3#0" = tail call fastcc  i64  @"int_list.greater<0>"(i64  %57, i64  %"v#0")  
  %58 = trunc i64 16 to i32  
  %59 = tail call ccc  i8*  @wybe_malloc(i32  %58)  
  %60 = ptrtoint i8* %59 to i64 
  %61 = inttoptr i64 %60 to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  store  i64 %53, i64* %62 
  %63 = add   i64 %60, 8 
  %64 = inttoptr i64 %63 to i64* 
  %65 = getelementptr  i64, i64* %64, i64 0 
  store  i64 %"4$tmp$3#0", i64* %65 
  ret i64 %60 
if.else1:
  %"5$$#0" = tail call fastcc  i64  @"int_list.greater<0>"(i64  %57, i64  %"v#0")  
  ret i64 %"5$$#0" 
}


define external fastcc  i64 @"int_list.greater<0>[04d1467a4d]"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %"1$tmp$9#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %66 = inttoptr i64 %"lst#0" to i64* 
  %67 = getelementptr  i64, i64* %66, i64 0 
  %68 = load  i64, i64* %67 
  %69 = add   i64 %"lst#0", 8 
  %70 = inttoptr i64 %69 to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  %72 = load  i64, i64* %71 
  %"2$tmp$6#0" = icmp sge i64 %68, %"v#0" 
  br i1 %"2$tmp$6#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  %"4$tmp$3#0" = tail call fastcc  i64  @"int_list.greater<0>[04d1467a4d]"(i64  %72, i64  %"v#0")  
  %"4$tmp$14#0" = sub   i64 %"lst#0", 0 
  %73 = inttoptr i64 %"4$tmp$14#0" to i64* 
  %74 = getelementptr  i64, i64* %73, i64 0 
  store  i64 %68, i64* %74 
  %75 = add   i64 %"4$tmp$14#0", 8 
  %76 = inttoptr i64 %75 to i64* 
  %77 = getelementptr  i64, i64* %76, i64 0 
  store  i64 %"4$tmp$3#0", i64* %77 
  ret i64 %"4$tmp$14#0" 
if.else1:
  %"5$$#0" = tail call fastcc  i64  @"int_list.greater<0>[04d1467a4d]"(i64  %72, i64  %"v#0")  
  ret i64 %"5$$#0" 
}


define external fastcc  i64 @"int_list.index<0>"(i64  %"lst#0", i64  %"x#0")    {
entry:
  %"1$$#0" = tail call fastcc  i64  @"int_list.index_helper<0>"(i64  %"lst#0", i64  0, i64  %"x#0")  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"int_list.index_helper<0>"(i64  %"lst#0", i64  %"idx#0", i64  %"x#0")    {
entry:
  %"1$tmp$8#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  %78 = inttoptr i64 %"lst#0" to i64* 
  %79 = getelementptr  i64, i64* %78, i64 0 
  %80 = load  i64, i64* %79 
  %81 = add   i64 %"lst#0", 8 
  %82 = inttoptr i64 %81 to i64* 
  %83 = getelementptr  i64, i64* %82, i64 0 
  %84 = load  i64, i64* %83 
  %"2$tmp$5#0" = icmp eq i64 %80, %"x#0" 
  br i1 %"2$tmp$5#0", label %if.then1, label %if.else1 
if.else:
  ret i64 -1 
if.then1:
  ret i64 %"idx#0" 
if.else1:
  %"5$tmp$3#0" = add   i64 %"idx#0", 1 
  %"5$$#0" = tail call fastcc  i64  @"int_list.index_helper<0>"(i64  %84, i64  %"5$tmp$3#0", i64  %"x#0")  
  ret i64 %"5$$#0" 
}


define external fastcc  i64 @"int_list.insert<0>"(i64  %"lst#0", i64  %"idx#0", i64  %"v#0")    {
entry:
  %"1$tmp$9#0" = icmp eq i64 %"idx#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %85 = trunc i64 16 to i32  
  %86 = tail call ccc  i8*  @wybe_malloc(i32  %85)  
  %87 = ptrtoint i8* %86 to i64 
  %88 = inttoptr i64 %87 to i64* 
  %89 = getelementptr  i64, i64* %88, i64 0 
  store  i64 %"v#0", i64* %89 
  %90 = add   i64 %87, 8 
  %91 = inttoptr i64 %90 to i64* 
  %92 = getelementptr  i64, i64* %91, i64 0 
  store  i64 %"lst#0", i64* %92 
  ret i64 %87 
if.else:
  %"3$tmp$13#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"3$tmp$13#0", label %if.then1, label %if.else1 
if.then1:
  %93 = inttoptr i64 %"lst#0" to i64* 
  %94 = getelementptr  i64, i64* %93, i64 0 
  %95 = load  i64, i64* %94 
  %96 = add   i64 %"lst#0", 8 
  %97 = inttoptr i64 %96 to i64* 
  %98 = getelementptr  i64, i64* %97, i64 0 
  %99 = load  i64, i64* %98 
  %"4$tmp$5#0" = sub   i64 %"idx#0", 1 
  %"4$tmp$4#0" = tail call fastcc  i64  @"int_list.insert<0>"(i64  %99, i64  %"4$tmp$5#0", i64  %"v#0")  
  %100 = trunc i64 16 to i32  
  %101 = tail call ccc  i8*  @wybe_malloc(i32  %100)  
  %102 = ptrtoint i8* %101 to i64 
  %103 = inttoptr i64 %102 to i64* 
  %104 = getelementptr  i64, i64* %103, i64 0 
  store  i64 %95, i64* %104 
  %105 = add   i64 %102, 8 
  %106 = inttoptr i64 %105 to i64* 
  %107 = getelementptr  i64, i64* %106, i64 0 
  store  i64 %"4$tmp$4#0", i64* %107 
  ret i64 %102 
if.else1:
  %"5$tmp$7#0" = sub   i64 %"idx#0", 1 
  %"5$$#0" = tail call fastcc  i64  @"int_list.insert<0>"(i64  %"lst#0", i64  %"5$tmp$7#0", i64  %"v#0")  
  ret i64 %"5$$#0" 
}


define external fastcc  i64 @"int_list.insert<0>[04d1467a4d]"(i64  %"lst#0", i64  %"idx#0", i64  %"v#0")    {
entry:
  %"1$tmp$9#0" = icmp eq i64 %"idx#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %108 = trunc i64 16 to i32  
  %109 = tail call ccc  i8*  @wybe_malloc(i32  %108)  
  %110 = ptrtoint i8* %109 to i64 
  %111 = inttoptr i64 %110 to i64* 
  %112 = getelementptr  i64, i64* %111, i64 0 
  store  i64 %"v#0", i64* %112 
  %113 = add   i64 %110, 8 
  %114 = inttoptr i64 %113 to i64* 
  %115 = getelementptr  i64, i64* %114, i64 0 
  store  i64 %"lst#0", i64* %115 
  ret i64 %110 
if.else:
  %"3$tmp$13#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"3$tmp$13#0", label %if.then1, label %if.else1 
if.then1:
  %116 = inttoptr i64 %"lst#0" to i64* 
  %117 = getelementptr  i64, i64* %116, i64 0 
  %118 = load  i64, i64* %117 
  %119 = add   i64 %"lst#0", 8 
  %120 = inttoptr i64 %119 to i64* 
  %121 = getelementptr  i64, i64* %120, i64 0 
  %122 = load  i64, i64* %121 
  %"4$tmp$5#0" = sub   i64 %"idx#0", 1 
  %"4$tmp$4#0" = tail call fastcc  i64  @"int_list.insert<0>[04d1467a4d]"(i64  %122, i64  %"4$tmp$5#0", i64  %"v#0")  
  %"4$tmp$18#0" = sub   i64 %"lst#0", 0 
  %123 = inttoptr i64 %"4$tmp$18#0" to i64* 
  %124 = getelementptr  i64, i64* %123, i64 0 
  store  i64 %118, i64* %124 
  %125 = add   i64 %"4$tmp$18#0", 8 
  %126 = inttoptr i64 %125 to i64* 
  %127 = getelementptr  i64, i64* %126, i64 0 
  store  i64 %"4$tmp$4#0", i64* %127 
  ret i64 %"4$tmp$18#0" 
if.else1:
  %"5$tmp$7#0" = sub   i64 %"idx#0", 1 
  %"5$$#0" = tail call fastcc  i64  @"int_list.insert<0>[04d1467a4d]"(i64  %"lst#0", i64  %"5$tmp$7#0", i64  %"v#0")  
  ret i64 %"5$$#0" 
}


define external fastcc  i64 @"int_list.lesser<0>"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %"1$tmp$9#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %128 = inttoptr i64 %"lst#0" to i64* 
  %129 = getelementptr  i64, i64* %128, i64 0 
  %130 = load  i64, i64* %129 
  %131 = add   i64 %"lst#0", 8 
  %132 = inttoptr i64 %131 to i64* 
  %133 = getelementptr  i64, i64* %132, i64 0 
  %134 = load  i64, i64* %133 
  %"2$tmp$6#0" = icmp slt i64 %130, %"v#0" 
  br i1 %"2$tmp$6#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  %"4$tmp$3#0" = tail call fastcc  i64  @"int_list.lesser<0>"(i64  %134, i64  %"v#0")  
  %135 = trunc i64 16 to i32  
  %136 = tail call ccc  i8*  @wybe_malloc(i32  %135)  
  %137 = ptrtoint i8* %136 to i64 
  %138 = inttoptr i64 %137 to i64* 
  %139 = getelementptr  i64, i64* %138, i64 0 
  store  i64 %130, i64* %139 
  %140 = add   i64 %137, 8 
  %141 = inttoptr i64 %140 to i64* 
  %142 = getelementptr  i64, i64* %141, i64 0 
  store  i64 %"4$tmp$3#0", i64* %142 
  ret i64 %137 
if.else1:
  %"5$$#0" = tail call fastcc  i64  @"int_list.lesser<0>"(i64  %134, i64  %"v#0")  
  ret i64 %"5$$#0" 
}


define external fastcc  i64 @"int_list.pop<0>"(i64  %"lst#0", i64  %"idx#0")    {
entry:
  %"1$tmp$9#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %143 = inttoptr i64 %"lst#0" to i64* 
  %144 = getelementptr  i64, i64* %143, i64 0 
  %145 = load  i64, i64* %144 
  %146 = add   i64 %"lst#0", 8 
  %147 = inttoptr i64 %146 to i64* 
  %148 = getelementptr  i64, i64* %147, i64 0 
  %149 = load  i64, i64* %148 
  %"2$tmp$6#0" = icmp eq i64 %"idx#0", 0 
  br i1 %"2$tmp$6#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  ret i64 %149 
if.else1:
  %"5$tmp$4#0" = sub   i64 %"idx#0", 1 
  %"5$tmp$3#0" = tail call fastcc  i64  @"int_list.pop<0>"(i64  %149, i64  %"5$tmp$4#0")  
  %150 = trunc i64 16 to i32  
  %151 = tail call ccc  i8*  @wybe_malloc(i32  %150)  
  %152 = ptrtoint i8* %151 to i64 
  %153 = inttoptr i64 %152 to i64* 
  %154 = getelementptr  i64, i64* %153, i64 0 
  store  i64 %145, i64* %154 
  %155 = add   i64 %152, 8 
  %156 = inttoptr i64 %155 to i64* 
  %157 = getelementptr  i64, i64* %156, i64 0 
  store  i64 %"5$tmp$3#0", i64* %157 
  ret i64 %152 
}


define external fastcc  i64 @"int_list.pop<0>[04d1467a4d]"(i64  %"lst#0", i64  %"idx#0")    {
entry:
  %"1$tmp$9#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %158 = inttoptr i64 %"lst#0" to i64* 
  %159 = getelementptr  i64, i64* %158, i64 0 
  %160 = load  i64, i64* %159 
  %161 = add   i64 %"lst#0", 8 
  %162 = inttoptr i64 %161 to i64* 
  %163 = getelementptr  i64, i64* %162, i64 0 
  %164 = load  i64, i64* %163 
  %"2$tmp$6#0" = icmp eq i64 %"idx#0", 0 
  br i1 %"2$tmp$6#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  ret i64 %164 
if.else1:
  %"5$tmp$4#0" = sub   i64 %"idx#0", 1 
  %"5$tmp$3#0" = tail call fastcc  i64  @"int_list.pop<0>[04d1467a4d]"(i64  %164, i64  %"5$tmp$4#0")  
  %"5$tmp$16#0" = sub   i64 %"lst#0", 0 
  %165 = inttoptr i64 %"5$tmp$16#0" to i64* 
  %166 = getelementptr  i64, i64* %165, i64 0 
  store  i64 %160, i64* %166 
  %167 = add   i64 %"5$tmp$16#0", 8 
  %168 = inttoptr i64 %167 to i64* 
  %169 = getelementptr  i64, i64* %168, i64 0 
  store  i64 %"5$tmp$3#0", i64* %169 
  ret i64 %"5$tmp$16#0" 
}


define external fastcc  void @"int_list.print<0>"(i64  %"x#0")    {
entry:
  %"1$tmp$2#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  %170 = inttoptr i64 %"x#0" to i64* 
  %171 = getelementptr  i64, i64* %170, i64 0 
  %172 = load  i64, i64* %171 
  %173 = add   i64 %"x#0", 8 
  %174 = inttoptr i64 %173 to i64* 
  %175 = getelementptr  i64, i64* %174, i64 0 
  %176 = load  i64, i64* %175 
  tail call ccc  void  @print_int(i64  %172)  
  tail call ccc  void  @putchar(i8  32)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %176)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"int_list.println<0>"(i64  %"x#0")    {
entry:
  tail call fastcc  void  @"int_list.print<0>"(i64  %"x#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"int_list.range<0>"(i64  %"start#0", i64  %"stop#0", i64  %"step#0")    {
entry:
  %"1$result#1" = tail call fastcc  i64  @"int_list.range_loop<0>"(i64  %"start#0", i64  %"stop#0", i64  %"step#0", i64  0)  
  %"1$result#2" = tail call fastcc  i64  @"int_list.reverse_helper<0>[04d1467a4d]"(i64  %"1$result#1", i64  0)  
  ret i64 %"1$result#2" 
}


define external fastcc  i64 @"int_list.range_loop<0>"(i64  %"start#0", i64  %"stop#0", i64  %"step#0", i64  %"result#0")    {
entry:
  %"1$tmp$2#0" = icmp slt i64 %"start#0", %"stop#0" 
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  %177 = trunc i64 16 to i32  
  %178 = tail call ccc  i8*  @wybe_malloc(i32  %177)  
  %179 = ptrtoint i8* %178 to i64 
  %180 = inttoptr i64 %179 to i64* 
  %181 = getelementptr  i64, i64* %180, i64 0 
  store  i64 %"start#0", i64* %181 
  %182 = add   i64 %179, 8 
  %183 = inttoptr i64 %182 to i64* 
  %184 = getelementptr  i64, i64* %183, i64 0 
  store  i64 %"result#0", i64* %184 
  %"2$tmp$1#0" = add   i64 %"start#0", %"step#0" 
  %"2$result#2" = tail call fastcc  i64  @"int_list.range_loop<0>"(i64  %"2$tmp$1#0", i64  %"stop#0", i64  %"step#0", i64  %179)  
  ret i64 %"2$result#2" 
if.else:
  ret i64 %"result#0" 
}


define external fastcc  i64 @"int_list.remove<0>"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %"1$tmp$8#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  %185 = inttoptr i64 %"lst#0" to i64* 
  %186 = getelementptr  i64, i64* %185, i64 0 
  %187 = load  i64, i64* %186 
  %188 = add   i64 %"lst#0", 8 
  %189 = inttoptr i64 %188 to i64* 
  %190 = getelementptr  i64, i64* %189, i64 0 
  %191 = load  i64, i64* %190 
  %"2$tmp$5#0" = icmp eq i64 %187, %"v#0" 
  br i1 %"2$tmp$5#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  ret i64 %191 
if.else1:
  %"5$tmp$3#0" = tail call fastcc  i64  @"int_list.remove<0>"(i64  %191, i64  %"v#0")  
  %192 = trunc i64 16 to i32  
  %193 = tail call ccc  i8*  @wybe_malloc(i32  %192)  
  %194 = ptrtoint i8* %193 to i64 
  %195 = inttoptr i64 %194 to i64* 
  %196 = getelementptr  i64, i64* %195, i64 0 
  store  i64 %187, i64* %196 
  %197 = add   i64 %194, 8 
  %198 = inttoptr i64 %197 to i64* 
  %199 = getelementptr  i64, i64* %198, i64 0 
  store  i64 %"5$tmp$3#0", i64* %199 
  ret i64 %194 
}


define external fastcc  i64 @"int_list.remove<0>[04d1467a4d]"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %"1$tmp$8#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  %200 = inttoptr i64 %"lst#0" to i64* 
  %201 = getelementptr  i64, i64* %200, i64 0 
  %202 = load  i64, i64* %201 
  %203 = add   i64 %"lst#0", 8 
  %204 = inttoptr i64 %203 to i64* 
  %205 = getelementptr  i64, i64* %204, i64 0 
  %206 = load  i64, i64* %205 
  %"2$tmp$5#0" = icmp eq i64 %202, %"v#0" 
  br i1 %"2$tmp$5#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  ret i64 %206 
if.else1:
  %"5$tmp$3#0" = tail call fastcc  i64  @"int_list.remove<0>[04d1467a4d]"(i64  %206, i64  %"v#0")  
  %"5$tmp$13#0" = sub   i64 %"lst#0", 0 
  %207 = inttoptr i64 %"5$tmp$13#0" to i64* 
  %208 = getelementptr  i64, i64* %207, i64 0 
  store  i64 %202, i64* %208 
  %209 = add   i64 %"5$tmp$13#0", 8 
  %210 = inttoptr i64 %209 to i64* 
  %211 = getelementptr  i64, i64* %210, i64 0 
  store  i64 %"5$tmp$3#0", i64* %211 
  ret i64 %"5$tmp$13#0" 
}


define external fastcc  i64 @"int_list.reverse<0>"(i64  %"lst#0")    {
entry:
  %"1$$#0" = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"lst#0", i64  0)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"int_list.reverse_helper<0>"(i64  %"lst#0", i64  %"acc#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %212 = inttoptr i64 %"lst#0" to i64* 
  %213 = getelementptr  i64, i64* %212, i64 0 
  %214 = load  i64, i64* %213 
  %215 = add   i64 %"lst#0", 8 
  %216 = inttoptr i64 %215 to i64* 
  %217 = getelementptr  i64, i64* %216, i64 0 
  %218 = load  i64, i64* %217 
  %219 = trunc i64 16 to i32  
  %220 = tail call ccc  i8*  @wybe_malloc(i32  %219)  
  %221 = ptrtoint i8* %220 to i64 
  %222 = inttoptr i64 %221 to i64* 
  %223 = getelementptr  i64, i64* %222, i64 0 
  store  i64 %214, i64* %223 
  %224 = add   i64 %221, 8 
  %225 = inttoptr i64 %224 to i64* 
  %226 = getelementptr  i64, i64* %225, i64 0 
  store  i64 %"acc#0", i64* %226 
  %"2$$#0" = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %218, i64  %221)  
  ret i64 %"2$$#0" 
if.else:
  ret i64 %"acc#0" 
}


define external fastcc  i64 @"int_list.reverse_helper<0>[04d1467a4d]"(i64  %"lst#0", i64  %"acc#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %227 = inttoptr i64 %"lst#0" to i64* 
  %228 = getelementptr  i64, i64* %227, i64 0 
  %229 = load  i64, i64* %228 
  %230 = add   i64 %"lst#0", 8 
  %231 = inttoptr i64 %230 to i64* 
  %232 = getelementptr  i64, i64* %231, i64 0 
  %233 = load  i64, i64* %232 
  %"2$tmp$8#0" = sub   i64 %"lst#0", 0 
  %234 = inttoptr i64 %"2$tmp$8#0" to i64* 
  %235 = getelementptr  i64, i64* %234, i64 0 
  store  i64 %229, i64* %235 
  %236 = add   i64 %"2$tmp$8#0", 8 
  %237 = inttoptr i64 %236 to i64* 
  %238 = getelementptr  i64, i64* %237, i64 0 
  store  i64 %"acc#0", i64* %238 
  %"2$$#0" = tail call fastcc  i64  @"int_list.reverse_helper<0>[04d1467a4d]"(i64  %233, i64  %"2$tmp$8#0")  
  ret i64 %"2$$#0" 
if.else:
  ret i64 %"acc#0" 
}


define external fastcc  i64 @"int_list.sort<0>"(i64  %"lst#0")    {
entry:
  %"1$tmp$10#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$10#0", label %if.then, label %if.else 
if.then:
  %239 = inttoptr i64 %"lst#0" to i64* 
  %240 = getelementptr  i64, i64* %239, i64 0 
  %241 = load  i64, i64* %240 
  %242 = add   i64 %"lst#0", 8 
  %243 = inttoptr i64 %242 to i64* 
  %244 = getelementptr  i64, i64* %243, i64 0 
  %245 = load  i64, i64* %244 
  %"2$tmp$3#0" = tail call fastcc  i64  @"int_list.lesser<0>"(i64  %245, i64  %241)  
  %"2$tmp$2#0" = tail call fastcc  i64  @"int_list.sort<0>[04d1467a4d]"(i64  %"2$tmp$3#0")  
  %"2$tmp$6#0" = tail call fastcc  i64  @"int_list.greater<0>"(i64  %245, i64  %241)  
  %"2$tmp$5#0" = tail call fastcc  i64  @"int_list.sort<0>[04d1467a4d]"(i64  %"2$tmp$6#0")  
  %246 = trunc i64 16 to i32  
  %247 = tail call ccc  i8*  @wybe_malloc(i32  %246)  
  %248 = ptrtoint i8* %247 to i64 
  %249 = inttoptr i64 %248 to i64* 
  %250 = getelementptr  i64, i64* %249, i64 0 
  store  i64 %241, i64* %250 
  %251 = add   i64 %248, 8 
  %252 = inttoptr i64 %251 to i64* 
  %253 = getelementptr  i64, i64* %252, i64 0 
  store  i64 %"2$tmp$5#0", i64* %253 
  %"2$$#0" = tail call fastcc  i64  @"int_list.extend<0>[04d1467a4d]"(i64  %"2$tmp$2#0", i64  %248)  
  ret i64 %"2$$#0" 
if.else:
  ret i64 0 
}


define external fastcc  i64 @"int_list.sort<0>[04d1467a4d]"(i64  %"lst#0")    {
entry:
  %"1$tmp$10#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$10#0", label %if.then, label %if.else 
if.then:
  %254 = inttoptr i64 %"lst#0" to i64* 
  %255 = getelementptr  i64, i64* %254, i64 0 
  %256 = load  i64, i64* %255 
  %257 = add   i64 %"lst#0", 8 
  %258 = inttoptr i64 %257 to i64* 
  %259 = getelementptr  i64, i64* %258, i64 0 
  %260 = load  i64, i64* %259 
  %"2$tmp$3#0" = tail call fastcc  i64  @"int_list.lesser<0>"(i64  %260, i64  %256)  
  %"2$tmp$2#0" = tail call fastcc  i64  @"int_list.sort<0>[04d1467a4d]"(i64  %"2$tmp$3#0")  
  %"2$tmp$6#0" = tail call fastcc  i64  @"int_list.greater<0>[04d1467a4d]"(i64  %260, i64  %256)  
  %"2$tmp$5#0" = tail call fastcc  i64  @"int_list.sort<0>[04d1467a4d]"(i64  %"2$tmp$6#0")  
  %"2$tmp$13#0" = sub   i64 %"lst#0", 0 
  %261 = inttoptr i64 %"2$tmp$13#0" to i64* 
  %262 = getelementptr  i64, i64* %261, i64 0 
  store  i64 %256, i64* %262 
  %263 = add   i64 %"2$tmp$13#0", 8 
  %264 = inttoptr i64 %263 to i64* 
  %265 = getelementptr  i64, i64* %264, i64 0 
  store  i64 %"2$tmp$5#0", i64* %265 
  %"2$$#0" = tail call fastcc  i64  @"int_list.extend<0>[04d1467a4d]"(i64  %"2$tmp$2#0", i64  %"2$tmp$13#0")  
  ret i64 %"2$$#0" 
if.else:
  ret i64 0 
}
--------------------------------------------------
 Module int_list.int_list
  public submods  : 
  public types    : 
  public resources: 
  public procs    : int_list.int_list./=<0>
                    int_list.int_list.=<0>
                    int_list.int_list.[]<0>
                    int_list.int_list.[|]<0>
                    int_list.int_list.[|]<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
  imports         : use int_list
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline (0 calls)
0: /=($left#0:int_list.int_list, $right#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.int_list.=<0>(~$left#0:int_list.int_list, ~$right#0:int_list.int_list, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (5 calls)
0: =($left#0:int_list.int_list, $right#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($left#0:!wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp eq(~$left#0:int_list.int_list, ~$right#0:int_list.int_list, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($left#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$head#0:wybe.int)
        foreign lpvm access(~$left#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$tail#0:int_list.int_list)
        foreign llvm icmp ne($right#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
        case ~tmp$9#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access($right#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$head#0:wybe.int)
            foreign lpvm access(~$right#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$tail#0:int_list.int_list)
            foreign llvm icmp eq(~$left$head#0:wybe.int, ~$right$head#0:wybe.int, ?tmp$4#0:wybe.bool) @wybe:35:36
            case ~tmp$4#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                int_list.int_list.=<0>(~$left$tail#0:int_list.int_list, ~$right$tail#0:int_list.int_list, ?$$#0:wybe.bool) #3





[] > public inline (0 calls)
0: [](?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list)


[|] > public inline (0 calls)
0: [|](head#0:wybe.int, tail#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!int_list.int_list)
    foreign lpvm mutate(~%$rec#0:int_list.int_list, ?%$rec#1:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:int_list.int_list, ?%$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail#0:int_list.int_list)
[|] > public inline (12 calls)
1: [|](?head#0:wybe.int, ?tail#0:int_list.int_list, $#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($#0:int_list.int_list, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head#0:wybe.int)
        foreign lpvm access(~$#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail#0:int_list.int_list)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



head > public inline (0 calls)
0: head($rec#0:int_list.int_list, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($rec#0:int_list.int_list, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

head > public inline (0 calls)
1: head($rec#0:int_list.int_list, ?$rec#1:int_list.int_list, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($rec#0:int_list.int_list, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:int_list.int_list, ?$rec#1:int_list.int_list)

    1:
        foreign lpvm mutate(~%$rec#0:int_list.int_list, ?%$rec#1:int_list.int_list, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



tail > public inline (0 calls)
0: tail($rec#0:int_list.int_list, ?$#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($rec#0:int_list.int_list, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:int_list.int_list)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

tail > public inline (0 calls)
1: tail($rec#0:int_list.int_list, ?$rec#1:int_list.int_list, $field#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($rec#0:int_list.int_list, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:int_list.int_list, ?$rec#1:int_list.int_list)

    1:
        foreign lpvm mutate noalias(~%$rec#0:int_list.int_list, ?%$rec#1:int_list.int_list, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:int_list.int_list)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'int_list.int_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"int_list.int_list./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i1  @"int_list.int_list.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  %"1$$$#0" = xor i1 %"1$tmp$0#0", 1 
  ret i1 %"1$$$#0" 
}


define external fastcc  i1 @"int_list.int_list.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %"2$tmp$9#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"2$tmp$9#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"3$$$#0" 
if.then1:
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"4$tmp$4#0" = icmp eq i64 %3, %10 
  br i1 %"4$tmp$4#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6$$$#0" = tail call fastcc  i1  @"int_list.int_list.=<0>"(i64  %7, i64  %14)  
  ret i1 %"6$$$#0" 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"int_list.int_list.[]<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i64 @"int_list.int_list.[|]<0>"(i64  %"head#0", i64  %"tail#0")    {
entry:
  %15 = trunc i64 16 to i32  
  %16 = tail call ccc  i8*  @wybe_malloc(i32  %15)  
  %17 = ptrtoint i8* %16 to i64 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  store  i64 %"head#0", i64* %19 
  %20 = add   i64 %17, 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"tail#0", i64* %22 
  ret i64 %17 
}


define external fastcc  {i64, i64, i1} @"int_list.int_list.[|]<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %23 = inttoptr i64 %"$#0" to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"$#0", 8 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = insertvalue {i64, i64, i1} undef, i64 %25, 0 
  %31 = insertvalue {i64, i64, i1} %30, i64 %29, 1 
  %32 = insertvalue {i64, i64, i1} %31, i1 1, 2 
  ret {i64, i64, i1} %32 
if.else:
  %33 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %34 = insertvalue {i64, i64, i1} %33, i64 undef, 1 
  %35 = insertvalue {i64, i64, i1} %34, i1 0, 2 
  ret {i64, i64, i1} %35 
}


define external fastcc  {i64, i1} @"int_list.int_list.head<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %36 = inttoptr i64 %"$rec#0" to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %39 = insertvalue {i64, i1} undef, i64 %38, 0 
  %40 = insertvalue {i64, i1} %39, i1 1, 1 
  ret {i64, i1} %40 
if.else:
  %41 = insertvalue {i64, i1} undef, i64 undef, 0 
  %42 = insertvalue {i64, i1} %41, i1 0, 1 
  ret {i64, i1} %42 
}


define external fastcc  {i64, i1} @"int_list.int_list.head<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %43 = trunc i64 16 to i32  
  %44 = tail call ccc  i8*  @wybe_malloc(i32  %43)  
  %45 = ptrtoint i8* %44 to i64 
  %46 = inttoptr i64 %45 to i8* 
  %47 = inttoptr i64 %"$rec#0" to i8* 
  %48 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %46, i8*  %47, i32  %48, i32  8, i1  0)  
  %49 = inttoptr i64 %45 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  store  i64 %"$field#0", i64* %50 
  %51 = insertvalue {i64, i1} undef, i64 %45, 0 
  %52 = insertvalue {i64, i1} %51, i1 1, 1 
  ret {i64, i1} %52 
if.else:
  %53 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %54 = insertvalue {i64, i1} %53, i1 0, 1 
  ret {i64, i1} %54 
}


define external fastcc  {i64, i1} @"int_list.int_list.tail<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %55 = add   i64 %"$rec#0", 8 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = insertvalue {i64, i1} undef, i64 %58, 0 
  %60 = insertvalue {i64, i1} %59, i1 1, 1 
  ret {i64, i1} %60 
if.else:
  %61 = insertvalue {i64, i1} undef, i64 undef, 0 
  %62 = insertvalue {i64, i1} %61, i1 0, 1 
  ret {i64, i1} %62 
}


define external fastcc  {i64, i1} @"int_list.int_list.tail<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %63 = trunc i64 16 to i32  
  %64 = tail call ccc  i8*  @wybe_malloc(i32  %63)  
  %65 = ptrtoint i8* %64 to i64 
  %66 = inttoptr i64 %65 to i8* 
  %67 = inttoptr i64 %"$rec#0" to i8* 
  %68 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %66, i8*  %67, i32  %68, i32  8, i1  0)  
  %69 = add   i64 %65, 8 
  %70 = inttoptr i64 %69 to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  store  i64 %"$field#0", i64* %71 
  %72 = insertvalue {i64, i1} undef, i64 %65, 0 
  %73 = insertvalue {i64, i1} %72, i1 1, 1 
  ret {i64, i1} %73 
if.else:
  %74 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %75 = insertvalue {i64, i1} %74, i1 0, 1 
  ret {i64, i1} %75 
}
--------------------------------------------------
 Module int_list_test
  public submods  : 
  public types    : 
  public resources: 
  public procs    : int_list_test.<0>
  imports         : use int_list
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#28:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(24,(int_list_test.test_int_list<0>,fromList [NonAliasedParamCond 0 [],NonAliasedParamCond 1 [],NonAliasedParamCond 2 []]))]
    foreign c malloc_count(?mc1#0:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:110:44
    int_list.range<0>(1:wybe.int, 10:wybe.int, 1:wybe.int, ?tmp$0#0:int_list.int_list) #1 @int_list_test:32:6
    int_list.range<0>(2:wybe.int, 20:wybe.int, 2:wybe.int, ?tmp$1#0:int_list.int_list) #2 @int_list_test:33:6
    int_list.range<0>(3:wybe.int, 30:wybe.int, 3:wybe.int, ?tmp$2#0:int_list.int_list) #3 @int_list_test:34:6
    foreign c print_string("x y z:":wybe.string, ~#io#1:wybe.phantom, ?tmp$9#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$9#0:wybe.phantom, ?#io#2:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#2:wybe.phantom, ?tmp$12#0:wybe.phantom) #34 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$12#0:wybe.phantom, ?#io#3:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$1#0:int_list.int_list, ~#io#3:wybe.phantom, ?tmp$15#0:wybe.phantom) #35 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$15#0:wybe.phantom, ?#io#4:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#4:wybe.phantom, ?tmp$18#0:wybe.phantom) #36 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$18#0:wybe.phantom, ?#io#5:wybe.phantom) @wybe:86:26
    foreign c malloc_count(?mc2#0:wybe.int, ~#io#5:wybe.phantom, ?#io#6:wybe.phantom) @wybe:110:44
    foreign llvm sub(~mc2#0:wybe.int, ~mc1#0:wybe.int, ?tmp$3#0:wybe.int) @wybe:23:34
    foreign c print_string("--------------------":wybe.string, ~#io#6:wybe.phantom, ?tmp$24#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$24#0:wybe.phantom, ?#io#7:wybe.phantom) @wybe:86:26
    foreign c print_string("tests with alias":wybe.string, ~#io#7:wybe.phantom, ?tmp$27#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$27#0:wybe.phantom, ?#io#8:wybe.phantom) @wybe:86:26
    foreign c malloc_count(?mc1#1:wybe.int, ~#io#8:wybe.phantom, ?#io#9:wybe.phantom) @wybe:110:44
    int_list_test.test_int_list<0>(tmp$0#0:int_list.int_list, tmp$1#0:int_list.int_list, tmp$2#0:int_list.int_list, ~#io#9:wybe.phantom, ?#io#10:wybe.phantom) #13 @int_list_test:47:2
    foreign c malloc_count(?mc2#1:wybe.int, ~#io#10:wybe.phantom, ?#io#11:wybe.phantom) @wybe:110:44
    foreign llvm sub(~mc2#1:wybe.int, ~mc1#1:wybe.int, ?tmp$4#0:wybe.int) @wybe:23:34
    foreign c print_string("original x y z:":wybe.string, ~#io#11:wybe.phantom, ?tmp$34#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$34#0:wybe.phantom, ?#io#12:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#12:wybe.phantom, ?tmp$37#0:wybe.phantom) #37 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$37#0:wybe.phantom, ?#io#13:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$1#0:int_list.int_list, ~#io#13:wybe.phantom, ?tmp$40#0:wybe.phantom) #38 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$40#0:wybe.phantom, ?#io#14:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#14:wybe.phantom, ?tmp$43#0:wybe.phantom) #39 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$43#0:wybe.phantom, ?#io#15:wybe.phantom) @wybe:86:26
    foreign c print_string("--------------------":wybe.string, ~#io#15:wybe.phantom, ?tmp$46#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$46#0:wybe.phantom, ?#io#16:wybe.phantom) @wybe:86:26
    foreign c print_string("--------------------":wybe.string, ~#io#16:wybe.phantom, ?tmp$49#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$49#0:wybe.phantom, ?#io#17:wybe.phantom) @wybe:86:26
    foreign c print_string("tests without alias":wybe.string, ~#io#17:wybe.phantom, ?tmp$52#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$52#0:wybe.phantom, ?#io#18:wybe.phantom) @wybe:86:26
    foreign c malloc_count(?mc1#2:wybe.int, ~#io#18:wybe.phantom, ?#io#19:wybe.phantom) @wybe:110:44
    int_list_test.test_int_list<0>[5d19dca133](~tmp$0#0:int_list.int_list, ~tmp$1#0:int_list.int_list, ~tmp$2#0:int_list.int_list, ~#io#19:wybe.phantom, ?#io#20:wybe.phantom) #24 @int_list_test:60:2
    foreign c malloc_count(?mc2#2:wybe.int, ~#io#20:wybe.phantom, ?#io#21:wybe.phantom) @wybe:110:44
    foreign llvm sub(~mc2#2:wybe.int, ~mc1#2:wybe.int, ?tmp$5#0:wybe.int) @wybe:23:34
    foreign c print_string("--------------------":wybe.string, ~#io#21:wybe.phantom, ?tmp$59#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$59#0:wybe.phantom, ?#io#22:wybe.phantom) @wybe:86:26
    foreign c print_string(" ** malloc count of building lists: ":wybe.string, ~#io#22:wybe.phantom, ?#io#23:wybe.phantom) @wybe:100:39
    foreign c print_int(~tmp$3#0:wybe.int, ~#io#23:wybe.phantom, ?tmp$64#0:wybe.phantom) @wybe:88:36
    foreign c putchar('\n':wybe.char, ~tmp$64#0:wybe.phantom, ?#io#24:wybe.phantom) @wybe:86:26
    foreign c print_string(" ** malloc count of test(aliased): ":wybe.string, ~#io#24:wybe.phantom, ?#io#25:wybe.phantom) @wybe:100:39
    foreign c print_int(~tmp$4#0:wybe.int, ~#io#25:wybe.phantom, ?tmp$69#0:wybe.phantom) @wybe:88:36
    foreign c putchar('\n':wybe.char, ~tmp$69#0:wybe.phantom, ?#io#26:wybe.phantom) @wybe:86:26
    foreign c print_string(" ** malloc count of test(non-aliased): ":wybe.string, ~#io#26:wybe.phantom, ?#io#27:wybe.phantom) @wybe:100:39
    foreign c print_int(~tmp$5#0:wybe.int, ~#io#27:wybe.phantom, ?tmp$74#0:wybe.phantom) @wybe:88:36
    foreign c putchar('\n':wybe.char, ~tmp$74#0:wybe.phantom, ?#io#28:wybe.phantom) @wybe:86:26


test_int_list > (2 calls)
0: test_int_list(x#0:int_list.int_list, y#0:int_list.int_list, z#0:int_list.int_list, io#0:wybe.phantom, ?io#10:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 1,InterestingUnaliased 2]
 MultiSpeczDepInfo: [(2,(int_list.append<0>,fromList [NonAliasedParamCond 0 [1]])),(7,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(8,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(11,(int_list.insert<0>,fromList [NonAliasedParamCond 0 []])),(12,(int_list.pop<0>,fromList [NonAliasedParamCond 0 []])),(13,(int_list.remove<0>,fromList [NonAliasedParamCond 0 []])),(16,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(19,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(20,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [2]]))]
    int_list.reverse_helper<0>(~%x#0:int_list.int_list, 0:int_list.int_list, ?%x#1:int_list.int_list) #19 @int_list:153:42
    int_list.reverse_helper<0>(~%z#0:int_list.int_list, 0:int_list.int_list, ?%z#1:int_list.int_list) #20 @int_list:153:42
    int_list.append<0>(~y#0:int_list.int_list, 99:wybe.int, ?tmp$0#0:int_list.int_list) #2 @int_list_test:8:10
    foreign c print_string("-":wybe.string, ~#io#0:wybe.phantom, ?tmp$10#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:86:26
    int_list.print<0>(x#1:int_list.int_list, ~#io#1:wybe.phantom, ?tmp$13#0:wybe.phantom) #21 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#2:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#2:wybe.phantom, ?tmp$16#0:wybe.phantom) #22 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$16#0:wybe.phantom, ?#io#3:wybe.phantom) @wybe:86:26
    int_list.print<0>(z#1:int_list.int_list, ~#io#3:wybe.phantom, ?tmp$19#0:wybe.phantom) #23 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$19#0:wybe.phantom, ?#io#4:wybe.phantom) @wybe:86:26
    int_list.extend<0>[04d1467a4d](~x#1:int_list.int_list, ~tmp$0#0:int_list.int_list, ?tmp$1#0:int_list.int_list) #7 @int_list_test:14:10
    int_list.extend<0>[04d1467a4d](~tmp$1#0:int_list.int_list, ~z#1:int_list.int_list, ?tmp$2#0:int_list.int_list) #8 @int_list_test:15:10
    foreign c print_string("-":wybe.string, ~#io#4:wybe.phantom, ?tmp$22#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$22#0:wybe.phantom, ?#io#5:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#5:wybe.phantom, ?tmp$25#0:wybe.phantom) #24 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$25#0:wybe.phantom, ?#io#6:wybe.phantom) @wybe:86:26
    int_list.insert<0>[04d1467a4d](~tmp$2#0:int_list.int_list, 4:wybe.int, 78:wybe.int, ?tmp$3#0:int_list.int_list) #11 @int_list_test:19:10
    int_list.pop<0>[04d1467a4d](~tmp$3#0:int_list.int_list, 20:wybe.int, ?tmp$4#0:int_list.int_list) #12 @int_list_test:20:10
    int_list.remove<0>[04d1467a4d](~tmp$4#0:int_list.int_list, 2:wybe.int, ?tmp$5#0:int_list.int_list) #13 @int_list_test:21:10
    foreign c print_string("-":wybe.string, ~#io#6:wybe.phantom, ?tmp$28#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$28#0:wybe.phantom, ?#io#7:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$5#0:int_list.int_list, ~#io#7:wybe.phantom, ?tmp$31#0:wybe.phantom) #25 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$31#0:wybe.phantom, ?#io#8:wybe.phantom) @wybe:86:26
    int_list.sort<0>[04d1467a4d](~tmp$5#0:int_list.int_list, ?%l#5:int_list.int_list) #16 @int_list_test:25:5
    foreign c print_string("-":wybe.string, ~#io#8:wybe.phantom, ?tmp$34#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$34#0:wybe.phantom, ?#io#9:wybe.phantom) @wybe:86:26
    int_list.print<0>(~l#5:int_list.int_list, ~#io#9:wybe.phantom, ?tmp$37#0:wybe.phantom) #26 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$37#0:wybe.phantom, ?#io#10:wybe.phantom) @wybe:86:26
 [5d19dca133] [NonAliasedParam 0,NonAliasedParam 1,NonAliasedParam 2] :
    int_list.reverse_helper<0>[04d1467a4d](~%x#0:int_list.int_list, 0:int_list.int_list, ?%x#1:int_list.int_list) #19 @int_list:153:42
    int_list.reverse_helper<0>[04d1467a4d](~%z#0:int_list.int_list, 0:int_list.int_list, ?%z#1:int_list.int_list) #20 @int_list:153:42
    int_list.append<0>[04d1467a4d](~y#0:int_list.int_list, 99:wybe.int, ?tmp$0#0:int_list.int_list) #2 @int_list_test:8:10
    foreign c print_string("-":wybe.string, ~#io#0:wybe.phantom, ?tmp$10#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:86:26
    int_list.print<0>(x#1:int_list.int_list, ~#io#1:wybe.phantom, ?tmp$13#0:wybe.phantom) #21 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#2:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#2:wybe.phantom, ?tmp$16#0:wybe.phantom) #22 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$16#0:wybe.phantom, ?#io#3:wybe.phantom) @wybe:86:26
    int_list.print<0>(z#1:int_list.int_list, ~#io#3:wybe.phantom, ?tmp$19#0:wybe.phantom) #23 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$19#0:wybe.phantom, ?#io#4:wybe.phantom) @wybe:86:26
    int_list.extend<0>[04d1467a4d](~x#1:int_list.int_list, ~tmp$0#0:int_list.int_list, ?tmp$1#0:int_list.int_list) #7 @int_list_test:14:10
    int_list.extend<0>[04d1467a4d](~tmp$1#0:int_list.int_list, ~z#1:int_list.int_list, ?tmp$2#0:int_list.int_list) #8 @int_list_test:15:10
    foreign c print_string("-":wybe.string, ~#io#4:wybe.phantom, ?tmp$22#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$22#0:wybe.phantom, ?#io#5:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#5:wybe.phantom, ?tmp$25#0:wybe.phantom) #24 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$25#0:wybe.phantom, ?#io#6:wybe.phantom) @wybe:86:26
    int_list.insert<0>[04d1467a4d](~tmp$2#0:int_list.int_list, 4:wybe.int, 78:wybe.int, ?tmp$3#0:int_list.int_list) #11 @int_list_test:19:10
    int_list.pop<0>[04d1467a4d](~tmp$3#0:int_list.int_list, 20:wybe.int, ?tmp$4#0:int_list.int_list) #12 @int_list_test:20:10
    int_list.remove<0>[04d1467a4d](~tmp$4#0:int_list.int_list, 2:wybe.int, ?tmp$5#0:int_list.int_list) #13 @int_list_test:21:10
    foreign c print_string("-":wybe.string, ~#io#6:wybe.phantom, ?tmp$28#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$28#0:wybe.phantom, ?#io#7:wybe.phantom) @wybe:86:26
    int_list.print<0>(tmp$5#0:int_list.int_list, ~#io#7:wybe.phantom, ?tmp$31#0:wybe.phantom) #25 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$31#0:wybe.phantom, ?#io#8:wybe.phantom) @wybe:86:26
    int_list.sort<0>[04d1467a4d](~tmp$5#0:int_list.int_list, ?%l#5:int_list.int_list) #16 @int_list_test:25:5
    foreign c print_string("-":wybe.string, ~#io#8:wybe.phantom, ?tmp$34#0:wybe.phantom) @wybe:100:39
    foreign c putchar('\n':wybe.char, ~tmp$34#0:wybe.phantom, ?#io#9:wybe.phantom) @wybe:86:26
    int_list.print<0>(~l#5:int_list.int_list, ~#io#9:wybe.phantom, ?tmp$37#0:wybe.phantom) #26 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$37#0:wybe.phantom, ?#io#10:wybe.phantom) @wybe:86:26

  LLVM code       :

; ModuleID = 'int_list_test'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_string(i64)    


declare external ccc  i64 @malloc_count()    


declare external fastcc  void @"int_list.print<0>"(i64)    


declare external fastcc  i64 @"int_list.range<0>"(i64, i64, i64)    


@int_list_test.21 =    constant [40 x i8] c" ** malloc count of test(non-aliased): \00"


@int_list_test.19 =    constant [36 x i8] c" ** malloc count of test(aliased): \00"


@int_list_test.17 =    constant [37 x i8] c" ** malloc count of building lists: \00"


@int_list_test.15 =    constant [21 x i8] c"--------------------\00"


@int_list_test.13 =    constant [20 x i8] c"tests without alias\00"


@int_list_test.11 =    constant [21 x i8] c"--------------------\00"


@int_list_test.9 =    constant [21 x i8] c"--------------------\00"


@int_list_test.7 =    constant [16 x i8] c"original x y z:\00"


@int_list_test.5 =    constant [17 x i8] c"tests with alias\00"


@int_list_test.3 =    constant [21 x i8] c"--------------------\00"


@int_list_test.1 =    constant [7 x i8] c"x y z:\00"


declare external fastcc  i64 @"int_list.sort<0>[04d1467a4d]"(i64)    


declare external fastcc  i64 @"int_list.remove<0>[04d1467a4d]"(i64, i64)    


declare external fastcc  i64 @"int_list.pop<0>[04d1467a4d]"(i64, i64)    


declare external fastcc  i64 @"int_list.insert<0>[04d1467a4d]"(i64, i64, i64)    


declare external fastcc  i64 @"int_list.extend<0>[04d1467a4d]"(i64, i64)    


declare external fastcc  i64 @"int_list.append<0>"(i64, i64)    


declare external fastcc  i64 @"int_list.reverse_helper<0>"(i64, i64)    


@int_list_test.29 =    constant [2 x i8] c"-\00"


@int_list_test.27 =    constant [2 x i8] c"-\00"


@int_list_test.25 =    constant [2 x i8] c"-\00"


@int_list_test.23 =    constant [2 x i8] c"-\00"


declare external fastcc  i64 @"int_list.append<0>[04d1467a4d]"(i64, i64)    


declare external fastcc  i64 @"int_list.reverse_helper<0>[04d1467a4d]"(i64, i64)    


@int_list_test.37 =    constant [2 x i8] c"-\00"


@int_list_test.35 =    constant [2 x i8] c"-\00"


@int_list_test.33 =    constant [2 x i8] c"-\00"


@int_list_test.31 =    constant [2 x i8] c"-\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"int_list_test.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %"1$mc1#0" = tail call ccc  i64  @malloc_count()  
  %"1$tmp$0#0" = tail call fastcc  i64  @"int_list.range<0>"(i64  1, i64  10, i64  1)  
  %"1$tmp$1#0" = tail call fastcc  i64  @"int_list.range<0>"(i64  2, i64  20, i64  2)  
  %"1$tmp$2#0" = tail call fastcc  i64  @"int_list.range<0>"(i64  3, i64  30, i64  3)  
  %2 = ptrtoint i8* getelementptr inbounds ([7 x i8], [7 x i8]* @int_list_test.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$1#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$2#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$mc2#0" = tail call ccc  i64  @malloc_count()  
  %"1$tmp$3#0" = sub   i64 %"1$mc2#0", %"1$mc1#0" 
  %4 = ptrtoint i8* getelementptr inbounds ([21 x i8], [21 x i8]* @int_list_test.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  tail call ccc  void  @putchar(i8  10)  
  %6 = ptrtoint i8* getelementptr inbounds ([17 x i8], [17 x i8]* @int_list_test.5, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  %"1$mc1#1" = tail call ccc  i64  @malloc_count()  
  tail call fastcc  void  @"int_list_test.test_int_list<0>"(i64  %"1$tmp$0#0", i64  %"1$tmp$1#0", i64  %"1$tmp$2#0")  
  %"1$mc2#1" = tail call ccc  i64  @malloc_count()  
  %"1$tmp$4#0" = sub   i64 %"1$mc2#1", %"1$mc1#1" 
  %8 = ptrtoint i8* getelementptr inbounds ([16 x i8], [16 x i8]* @int_list_test.7, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %8)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$1#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$2#0")  
  tail call ccc  void  @putchar(i8  10)  
  %10 = ptrtoint i8* getelementptr inbounds ([21 x i8], [21 x i8]* @int_list_test.9, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %10)  
  tail call ccc  void  @putchar(i8  10)  
  %12 = ptrtoint i8* getelementptr inbounds ([21 x i8], [21 x i8]* @int_list_test.11, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %12)  
  tail call ccc  void  @putchar(i8  10)  
  %14 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @int_list_test.13, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %14)  
  tail call ccc  void  @putchar(i8  10)  
  %"1$mc1#2" = tail call ccc  i64  @malloc_count()  
  tail call fastcc  void  @"int_list_test.test_int_list<0>[5d19dca133]"(i64  %"1$tmp$0#0", i64  %"1$tmp$1#0", i64  %"1$tmp$2#0")  
  %"1$mc2#2" = tail call ccc  i64  @malloc_count()  
  %"1$tmp$5#0" = sub   i64 %"1$mc2#2", %"1$mc1#2" 
  %16 = ptrtoint i8* getelementptr inbounds ([21 x i8], [21 x i8]* @int_list_test.15, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %16)  
  tail call ccc  void  @putchar(i8  10)  
  %18 = ptrtoint i8* getelementptr inbounds ([37 x i8], [37 x i8]* @int_list_test.17, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %18)  
  tail call ccc  void  @print_int(i64  %"1$tmp$3#0")  
  tail call ccc  void  @putchar(i8  10)  
  %20 = ptrtoint i8* getelementptr inbounds ([36 x i8], [36 x i8]* @int_list_test.19, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %20)  
  tail call ccc  void  @print_int(i64  %"1$tmp$4#0")  
  tail call ccc  void  @putchar(i8  10)  
  %22 = ptrtoint i8* getelementptr inbounds ([40 x i8], [40 x i8]* @int_list_test.21, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %22)  
  tail call ccc  void  @print_int(i64  %"1$tmp$5#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"int_list_test.test_int_list<0>"(i64  %"x#0", i64  %"y#0", i64  %"z#0")    {
entry:
  %"1$x#1" = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"x#0", i64  0)  
  %"1$z#1" = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"z#0", i64  0)  
  %"1$tmp$0#0" = tail call fastcc  i64  @"int_list.append<0>"(i64  %"y#0", i64  99)  
  %24 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.23, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %24)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$x#1")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$z#1")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$tmp$1#0" = tail call fastcc  i64  @"int_list.extend<0>[04d1467a4d]"(i64  %"1$x#1", i64  %"1$tmp$0#0")  
  %"1$tmp$2#0" = tail call fastcc  i64  @"int_list.extend<0>[04d1467a4d]"(i64  %"1$tmp$1#0", i64  %"1$z#1")  
  %26 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.25, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %26)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$2#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$tmp$3#0" = tail call fastcc  i64  @"int_list.insert<0>[04d1467a4d]"(i64  %"1$tmp$2#0", i64  4, i64  78)  
  %"1$tmp$4#0" = tail call fastcc  i64  @"int_list.pop<0>[04d1467a4d]"(i64  %"1$tmp$3#0", i64  20)  
  %"1$tmp$5#0" = tail call fastcc  i64  @"int_list.remove<0>[04d1467a4d]"(i64  %"1$tmp$4#0", i64  2)  
  %28 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.27, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %28)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$5#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$l#5" = tail call fastcc  i64  @"int_list.sort<0>[04d1467a4d]"(i64  %"1$tmp$5#0")  
  %30 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.29, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %30)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$l#5")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"int_list_test.test_int_list<0>[5d19dca133]"(i64  %"x#0", i64  %"y#0", i64  %"z#0")    {
entry:
  %"1$x#1" = tail call fastcc  i64  @"int_list.reverse_helper<0>[04d1467a4d]"(i64  %"x#0", i64  0)  
  %"1$z#1" = tail call fastcc  i64  @"int_list.reverse_helper<0>[04d1467a4d]"(i64  %"z#0", i64  0)  
  %"1$tmp$0#0" = tail call fastcc  i64  @"int_list.append<0>[04d1467a4d]"(i64  %"y#0", i64  99)  
  %32 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.31, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %32)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$x#1")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$z#1")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$tmp$1#0" = tail call fastcc  i64  @"int_list.extend<0>[04d1467a4d]"(i64  %"1$x#1", i64  %"1$tmp$0#0")  
  %"1$tmp$2#0" = tail call fastcc  i64  @"int_list.extend<0>[04d1467a4d]"(i64  %"1$tmp$1#0", i64  %"1$z#1")  
  %34 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.33, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %34)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$2#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$tmp$3#0" = tail call fastcc  i64  @"int_list.insert<0>[04d1467a4d]"(i64  %"1$tmp$2#0", i64  4, i64  78)  
  %"1$tmp$4#0" = tail call fastcc  i64  @"int_list.pop<0>[04d1467a4d]"(i64  %"1$tmp$3#0", i64  20)  
  %"1$tmp$5#0" = tail call fastcc  i64  @"int_list.remove<0>[04d1467a4d]"(i64  %"1$tmp$4#0", i64  2)  
  %36 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.35, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %36)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$5#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$l#5" = tail call fastcc  i64  @"int_list.sort<0>[04d1467a4d]"(i64  %"1$tmp$5#0")  
  %38 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.37, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %38)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$l#5")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

----------------------------------------------------------------------



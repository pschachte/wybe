----------------------------------------------------------------------
- build & execute without multiple specialization
----------------------------------------------------------------------
x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
tests with alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
original x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
--------------------
tests without alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
--------------------
 ** malloc count of building lists: 54
 ** malloc count of test(aliased): 307
 ** malloc count of test(non-aliased): 307

----------------------------------------------------------------------


----------------------------------------------------------------------
- build & execute with multiple specialization
----------------------------------------------------------------------
x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
tests with alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
original x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
--------------------
tests without alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
--------------------
 ** malloc count of building lists: 27
 ** malloc count of test(aliased): 99
 ** malloc count of test(non-aliased): 72

----------------------------------------------------------------------


----------------------------------------------------------------------
- final dump (with multiple specialization)
----------------------------------------------------------------------
======================================================================
AFTER BUILDING MAIN:
 Module 
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    use int_list
                    use int_list_test
                    use wybe
                    use wybe.array
                    use wybe.bool
                    use wybe.c_string
                    use wybe.char
                    use wybe.comparison
                    use wybe.control
                    use wybe.count
                    use wybe.float
                    use wybe.int
                    use wybe.io
                    use wybe.list
                    use wybe.machine_word
                    use wybe.memory_management
                    use wybe.phantom
                    use wybe.predicate
                    use wybe.range
                    use wybe.string
  resources       : 
  procs           : 

module top-level code > {terminal,inline,impure} (0 calls)
0: .<0>
(%argc##0:wybe.int, %argv##0:wybe.array.raw_array(wybe.c_string), %?exit_code##0:wybe.int)<{}; {<<command_line.exit_code>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(~%argc##0:wybe.int, <<command_line.argc>>:wybe.int)
    foreign lpvm store(~%argv##0:wybe.array.raw_array(wybe.c_string), <<command_line.argv>>:wybe.array.raw_array(wybe.c_string))
    foreign c {impure} gc_init @memory_management:nn:nn
    foreign lpvm store(0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    command_line.<0><{<<command_line.argc>>, <<command_line.argv>>}; {<<command_line.arguments>>, <<command_line.command>>, <<command_line.exit_code>>}> #2
    int_list_test.<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3
    foreign lpvm load(<<command_line.exit_code>>:wybe.int, ?%exit_code##0:wybe.int)
    foreign c {semipure,terminal} exit(exit_code##0:wybe.int)

LLVM code       : None

--------------------------------------------------
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    arguments: command_line.arguments
                    argv: command_line.argv
                    command: command_line.command
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:nn:nn)]
                    arguments: fromList [(command_line.arguments,wybe.array(wybe.c_string) = array(argc @command_line:nn:nn, argv @command_line:nn:nn) @command_line:nn:nn @command_line:nn:nn)]
                    argv: fromList [(command_line.argv,wybe.array.raw_array(wybe.c_string) @command_line:nn:nn)]
                    command: fromList [(command_line.command,wybe.c_string = c"" @command_line:nn:nn @command_line:nn:nn)]
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:nn:nn @command_line:nn:nn)]
  procs           : 

module top-level code > public {impure} (0 calls)
0: command_line.<0>
()<{<<command_line.argc>>, <<command_line.argv>>}; {<<command_line.arguments>>, <<command_line.command>>, <<command_line.exit_code>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(1,(wybe.array.[|]<0>,fromList [NonAliasedParamCond 2 []]))]
    foreign lpvm load(<<command_line.argc>>:wybe.int, ?%tmp#1##0:wybe.int) @command_line:nn:nn
    foreign lpvm load(<<command_line.argv>>:wybe.array.raw_array(wybe.c_string), ?%tmp#3##0:wybe.array.raw_array(wybe.c_string)) @command_line:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#10##0:wybe.array(T)) @array:nn:nn
    foreign lpvm mutate(~tmp#10##0:wybe.array(T), ?tmp#11##0:wybe.array(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @array:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.array(T), ?tmp#0##0:wybe.array(wybe.c_string), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.array.raw_array(T)) @array:nn:nn
    foreign lpvm store(tmp#0##0:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
    foreign lpvm store(c"":wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn
    wybe.array.[|]<0>[785a827a1b](?command##1:wybe.c_string, ?arguments##2:wybe.array(wybe.c_string), ~tmp#0##0:wybe.array(wybe.c_string), ?tmp#7##0:wybe.bool) #1 @command_line:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign c {terminal,semipure} error_exit(c"command_line:18:15":wybe.c_string, c"Erroneous program argument vector":wybe.c_string) @control:nn:nn

    1:
        foreign lpvm store(~%arguments##2:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
        foreign lpvm store(~%command##1:wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn
        foreign lpvm store(0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn



set_exit_code > public {inline} (0 calls)
0: command_line.set_exit_code<0>
set_exit_code(code##0:wybe.int)<{}; {<<command_line.exit_code>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(~code##0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn

  LLVM code       :

; ModuleID = 'command_line'


 


@"resource#command_line.argc" =    global i64 undef


@"resource#command_line.arguments" =    global i64 undef


@"resource#command_line.argv" =    global i64 undef


@"resource#command_line.command" =    global i64 undef


@"resource#command_line.exit_code" =    global i64 undef


@command_line.11 =    constant [?? x i8] c"\00"


@command_line.17 =    constant [?? x i8] c"Erroneous program argument vector\00"


@command_line.16 =    constant [?? x i8] c"command_line:18:15\00"


declare external ccc  void @error_exit(i64, i64)    


declare external fastcc  {i64, i64, i1} @"wybe.array.[|]<0>[785a827a1b]"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"command_line.<0>"()    {
entry:
  %1 = load  i64, i64* @"resource#command_line.argc" 
  %2 = load  i64, i64* @"resource#command_line.argv" 
  %3 = trunc i64 16 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %1, i64* %7 
  %8 = add   i64 %5, 8 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %2, i64* %10 
  store  i64 %5, i64* @"resource#command_line.arguments" 
  store  i64 ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.11, i32 0, i32 0) to i64), i64* @"resource#command_line.command" 
  %12 = tail call fastcc  {i64, i64, i1}  @"wybe.array.[|]<0>[785a827a1b]"(i64  %5)  
  %13 = extractvalue {i64, i64, i1} %12, 0 
  %14 = extractvalue {i64, i64, i1} %12, 1 
  %15 = extractvalue {i64, i64, i1} %12, 2 
  br i1 %15, label %if.then, label %if.else 
if.then:
  store  i64 %14, i64* @"resource#command_line.arguments" 
  store  i64 %13, i64* @"resource#command_line.command" 
  store  i64 0, i64* @"resource#command_line.exit_code" 
  ret void 
if.else:
  tail call ccc  void  @error_exit(i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.16, i32 0, i32 0) to i64), i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.17, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  void @"command_line.set_exit_code<0>"(i64  %"code##0")    {
entry:
  store  i64 %"code##0", i64* @"resource#command_line.exit_code" 
  ret void 
}
--------------------------------------------------
 Module int_list
  representation  : (not a type)
  public submods  : int_list -> int_list.int_list
  public resources: 
  public procs    : int_list.append<0>
                    int_list.count<0>
                    int_list.extend<0>
                    int_list.index<0>
                    int_list.insert<0>
                    int_list.pop<0>
                    int_list.print<0>
                    int_list.println<0>
                    int_list.range<0>
                    int_list.remove<0>
                    int_list.reverse<0>
                    int_list.sort<0>
                    int_list.int_list.=<0>
                    int_list.int_list.cons<0>
                    int_list.int_list.cons<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.nil<0>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
                    int_list.int_list.~=<0>
  imports         : public use int_list.int_list
                    use wybe
  resources       : 
  submodules      : int_list.int_list
  procs           : 

append > public (0 calls)
0: int_list.append<0>
append(lst##0:int_list.int_list, v##0:wybe.int, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~tmp#5##0:int_list.int_list, ?tmp#6##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~tmp#6##0:int_list.int_list, ?tmp#7##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:int_list.int_list) @int_list:nn:nn
    int_list.extend<0>(~lst##0:int_list.int_list, ~tmp#7##0:int_list.int_list, outByReference #result##0:int_list.int_list) #2 @int_list:nn:nn


count > public (3 calls)
0: int_list.count<0>
count(lst##0:int_list.int_list, x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        int_list.count<0>(~t##0:int_list.int_list, x##0:wybe.int, ?tmp#2##0:wybe.int) #1 @int_list:nn:nn
        foreign llvm icmp_eq(~h##0:wybe.int, ~x##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            foreign llvm move(~tmp#2##0:wybe.int, ?#result##0:wybe.int) @int:nn:nn

        1:
            foreign llvm add(~tmp#2##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @int:nn:nn




extend > public (3 calls)
0: int_list.extend<0>[410bae77d3]
extend(lst1##0:int_list.int_list, lst2##0:int_list.int_list, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst2##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst1##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~lst2##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst1##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst1##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:int_list.int_list, ?tmp#9##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
        int_list.extend<0>(~t##0:int_list.int_list, ~lst2##0:int_list.int_list, outByReference tmp#2##0:int_list.int_list) #1 @int_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:int_list.int_list) @int_list:nn:nn



gen#1 > {inline} (2 calls)
0: int_list.gen#1<0>
gen#1([h##0:wybe.int], [lst##0:int_list.int_list], [t##0:int_list.int_list], tmp#2##0:wybe.int, tmp#3##0:wybe.int, [x##0:wybe.int], ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~tmp#2##0:wybe.int, ~tmp#3##0:wybe.int, ?#result##0:wybe.int) @int:nn:nn


gen#2 > (2 calls)
0: int_list.gen#2<0>[410bae77d3]
gen#2(result##0:int_list.int_list, start##0:wybe.int, step##0:wybe.int, stop##0:wybe.int, tmp#0##0:int_list.int_list, ?result##1:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(3,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.gen#2<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_slt(start##0:wybe.int, stop##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        int_list.reverse_helper<0>(~result##0:int_list.int_list, 0:int_list.int_list, ?result##1:int_list.int_list) #3 @int_list:nn:nn

    1:
        foreign lpvm alloc(16:wybe.int, ?tmp#12##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#12##0:int_list.int_list, ?tmp#13##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#13##0:int_list.int_list, ?tmp#14##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result##0:int_list.int_list) @int_list:nn:nn
        foreign llvm add(~start##0:wybe.int, step##0:wybe.int, ?tmp#15##0:wybe.int) @int:nn:nn
        int_list.gen#2<0>(~tmp#14##0:int_list.int_list, ~tmp#15##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, ~tmp#0##0:int_list.int_list, ?result##1:int_list.int_list) #4 @int_list:nn:nn



gen#3 > {inline} (1 calls)
0: int_list.gen#3<0>
gen#3(result##0:int_list.int_list, start##0:wybe.int, step##0:wybe.int, stop##0:wybe.int, tmp#0##0:int_list.int_list, ?result##2:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~tmp#5##0:int_list.int_list, ?tmp#6##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~tmp#6##0:int_list.int_list, ?tmp#7##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result##0:int_list.int_list) @int_list:nn:nn
    foreign llvm add(~start##0:wybe.int, step##0:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
    int_list.gen#2<0>(~tmp#7##0:int_list.int_list, ~tmp#2##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, ~tmp#0##0:int_list.int_list, ?result##2:int_list.int_list) #2 @int_list:nn:nn


greater > (3 calls)
0: int_list.greater<0>
greater(lst##0:int_list.int_list, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_sge(h##0:wybe.int, v##0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            int_list.greater<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #4 @int_list:nn:nn

        1:
            foreign lpvm alloc(16:wybe.int, ?tmp#14##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.greater<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~tmp#15##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn




index > public {inline} (0 calls)
0: int_list.index<0>
index(lst##0:int_list.int_list, x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.index_helper<0>(~lst##0:int_list.int_list, 0:wybe.int, ~x##0:wybe.int, ?#result##0:wybe.int) #0 @int_list:nn:nn


index_helper > (2 calls)
0: int_list.index_helper<0>
index_helper(lst##0:int_list.int_list, idx##0:wybe.int, x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(-1:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(~h##0:wybe.int, x##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            foreign llvm add(~idx##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @int:nn:nn
            int_list.index_helper<0>(~t##0:int_list.int_list, ~tmp#3##0:wybe.int, ~x##0:wybe.int, ?#result##0:wybe.int) #3 @int_list:nn:nn

        1:
            foreign llvm move(~idx##0:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn




insert > public (2 calls)
0: int_list.insert<0>[410bae77d3]
insert(lst##0:int_list.int_list, idx##0:wybe.int, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(4,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]])),(7,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_eq(idx##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool) @int:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#13##0:wybe.bool)
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int) @int:nn:nn
            int_list.insert<0>(~lst##0:int_list.int_list, ~tmp#7##0:wybe.int, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #7 @int_list:nn:nn

        1:
            foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
            foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#18##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#18##0:int_list.int_list, ?tmp#19##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.insert<0>(~t##0:int_list.int_list, ~tmp#5##0:wybe.int, ~v##0:wybe.int, outByReference tmp#4##0:int_list.int_list) #4 @int_list:nn:nn
            foreign lpvm mutate(~tmp#19##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#4##0:int_list.int_list) @int_list:nn:nn


    1:
        foreign lpvm alloc(16:wybe.int, ?tmp#14##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#15##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lst##0:int_list.int_list) @int_list:nn:nn



lesser > (3 calls)
0: int_list.lesser<0>
lesser(lst##0:int_list.int_list, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_slt(h##0:wybe.int, v##0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            int_list.lesser<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #4 @int_list:nn:nn

        1:
            foreign lpvm alloc(16:wybe.int, ?tmp#14##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.lesser<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~tmp#15##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn




pop > public (1 calls)
0: int_list.pop<0>[410bae77d3]
pop(lst##0:int_list.int_list, idx##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(3,(int_list.pop<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(idx##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @int:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#16##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#16##0:int_list.int_list, ?tmp#17##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.pop<0>(~t##0:int_list.int_list, ~tmp#4##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #3 @int_list:nn:nn
            foreign lpvm mutate(~tmp#17##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn

        1:
            foreign llvm move(~t##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn




print > public (2 calls)
0: int_list.print<0>
print(x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool)
    case ~tmp#2##0:wybe.bool of
    0:

    1:
        foreign lpvm access(x##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~x##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~h##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
        foreign c putchar(' ':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @char:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn
        int_list.print<0>(~t##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @int_list:nn:nn



println > public {inline} (0 calls)
0: int_list.println<0>
println(x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.print<0>(~x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#0##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#0##0:wybe.phantom, ?tmp#1##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#1##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


range > public {inline} (0 calls)
0: int_list.range<0>
range(start##0:wybe.int, stop##0:wybe.int, step##0:wybe.int, ?result##1:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.gen#2<0>(0:int_list.int_list, ~start##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, 0:int_list.int_list, ?result##1:int_list.int_list) #1 @int_list:nn:nn


remove > public (1 calls)
0: int_list.remove<0>[410bae77d3]
remove(lst##0:int_list.int_list, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.remove<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(h##0:wybe.int, v##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
        case ~tmp#5##0:wybe.bool of
        0:
            foreign lpvm alloc(16:wybe.int, ?tmp#13##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#13##0:int_list.int_list, ?tmp#14##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.remove<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn

        1:
            foreign llvm move(~t##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn




reverse > public {inline} (1 calls)
0: int_list.reverse<0>
reverse(lst##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.reverse_helper<0>(~lst##0:int_list.int_list, 0:int_list.int_list, ?#result##0:int_list.int_list) #1 @int_list:nn:nn


reverse_helper > (2 calls)
0: int_list.reverse_helper<0>
reverse_helper(lst##0:int_list.int_list, acc##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,acc##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~acc##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:int_list.int_list, ?tmp#9##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:int_list.int_list, ?tmp#10##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~acc##0:int_list.int_list) @int_list:nn:nn
        int_list.reverse_helper<0>(~t##0:int_list.int_list, ~tmp#10##0:int_list.int_list, ?#result##0:int_list.int_list) #2 @int_list:nn:nn



sort > public (2 calls)
0: int_list.sort<0>[410bae77d3]
sort(lst##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(3,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(6,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        int_list.lesser<0>(t##0:int_list.int_list, h##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #1 @int_list:nn:nn
        int_list.sort<0>[410bae77d3](~tmp#3##0:int_list.int_list, ?tmp#2##0:int_list.int_list) #2 @int_list:nn:nn
        int_list.greater<0>(~t##0:int_list.int_list, h##0:wybe.int, outByReference tmp#6##0:int_list.int_list) #3 @int_list:nn:nn
        int_list.sort<0>[410bae77d3](~tmp#6##0:int_list.int_list, ?tmp#5##0:int_list.int_list) #4 @int_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#13##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#13##0:int_list.int_list, ?tmp#14##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:int_list.int_list) @int_list:nn:nn
        int_list.extend<0>[410bae77d3](~tmp#2##0:int_list.int_list, ~tmp#15##0:int_list.int_list, outByReference #result##0:int_list.int_list) #6 @int_list:nn:nn


LLVM code       : None

--------------------------------------------------
 Module int_list.int_list
  representation  : address
  public submods  : 
  public resources: 
  public procs    : int_list.int_list.=<0>
                    int_list.int_list.cons<0>
                    int_list.int_list.cons<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.nil<0>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
                    int_list.int_list.~=<0>
  imports         : use int_list
                    use wybe
  resources       : 
  procs           : 

= > public (2 calls)
0: int_list.int_list.=<0>
=(#left##0:int_list.int_list, #right##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:int_list.int_list, ~#right##0:int_list.int_list, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#head##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~#left##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#tail##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
        case ~tmp#9##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#head##0:wybe.int) @int_list:nn:nn
            foreign lpvm access(~#right##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#tail##0:int_list.int_list) @int_list:nn:nn
            foreign llvm icmp_eq(~#left#head##0:wybe.int, ~#right#head##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                int_list.int_list.=<0>(~#left#tail##0:int_list.int_list, ~#right#tail##0:int_list.int_list, ?#success##0:wybe.bool) #3





cons > public {inline} (0 calls)
0: int_list.int_list.cons<0>
cons(head##0:wybe.int, tail##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~#rec##1:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail##0:int_list.int_list) @int_list:nn:nn
cons > public {inline} (12 calls)
1: int_list.int_list.cons<1>
cons(?head##0:wybe.int, ?tail##0:int_list.int_list, #result##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head##0:wybe.int)
        foreign llvm move(undef:int_list.int_list, ?tail##0:int_list.int_list)

    1:
        foreign lpvm access(#result##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~#result##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



head > public {inline} (0 calls)
0: int_list.int_list.head<0>
head(#rec##0:int_list.int_list, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

head > public {inline} (0 calls)
1: int_list.int_list.head<1>
head(#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list)

    1:
        foreign lpvm mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



nil > public {inline} (0 calls)
0: int_list.int_list.nil<0>
nil(?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list)


tail > public {inline} (0 calls)
0: int_list.int_list.tail<0>
tail(#rec##0:int_list.int_list, ?#result##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:int_list.int_list, ?#result##0:int_list.int_list)

    1:
        foreign lpvm access(~#rec##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

tail > public {inline} (0 calls)
1: int_list.int_list.tail<1>
tail(#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, #field##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: int_list.int_list.~=<0>
~=(#left##0:int_list.int_list, #right##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.int_list.=<0>(~#left##0:int_list.int_list, ~#right##0:int_list.int_list, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

LLVM code       : None

--------------------------------------------------
 Module int_list_test
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : int_list_test.<0>
  imports         : use command_line
                    use int_list
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: int_list_test.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(24,(int_list_test.test_int_list<0>,fromList [NonAliasedParamCond 0 [],NonAliasedParamCond 1 [],NonAliasedParamCond 2 []])),(34,(int_list.gen#2<0>,fromList [NonAliasedParamCond 0 []])),(35,(int_list.gen#2<0>,fromList [NonAliasedParamCond 0 []])),(36,(int_list.gen#2<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign c {impure} malloc_count(?mc1##0:wybe.int) @memory_management:nn:nn
    int_list.gen#2<0>[410bae77d3](0:int_list.int_list, 1:wybe.int, 1:wybe.int, 10:wybe.int, 0:int_list.int_list, ?tmp#0##0:int_list.int_list) #34 @int_list:nn:nn
    int_list.gen#2<0>[410bae77d3](0:int_list.int_list, 2:wybe.int, 2:wybe.int, 20:wybe.int, 0:int_list.int_list, ?tmp#1##0:int_list.int_list) #35 @int_list:nn:nn
    int_list.gen#2<0>[410bae77d3](0:int_list.int_list, 3:wybe.int, 3:wybe.int, 30:wybe.int, 0:int_list.int_list, ?tmp#2##0:int_list.int_list) #36 @int_list:nn:nn
    wybe.string.print<0>("x y z:":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #37 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #38 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#1##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #39 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#22##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #40 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#25##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#25##0:wybe.phantom, ?tmp#26##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#26##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} malloc_count(?mc2##0:wybe.int) @memory_management:nn:nn
    foreign llvm sub(~mc2##0:wybe.int, ~mc1##0:wybe.int, ?tmp#3##0:wybe.int) @int:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #41 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#31##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("tests with alias":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #42 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#33##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} malloc_count(?mc1##1:wybe.int) @memory_management:nn:nn
    int_list_test.test_int_list<0>(tmp#0##0:int_list.int_list, tmp#1##0:int_list.int_list, tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #13 @int_list_test:nn:nn
    foreign c {impure} malloc_count(?mc2##1:wybe.int) @memory_management:nn:nn
    foreign llvm sub(~mc2##1:wybe.int, ~mc1##1:wybe.int, ?tmp#4##0:wybe.int) @int:nn:nn
    wybe.string.print<0>("original x y z:":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #43 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#38##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#38##0:wybe.phantom, ?tmp#39##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#39##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #44 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#41##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#41##0:wybe.phantom, ?tmp#42##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#42##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#1##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #45 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#44##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#44##0:wybe.phantom, ?tmp#45##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#45##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #46 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#47##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#47##0:wybe.phantom, ?tmp#48##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#48##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #47 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#50##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#50##0:wybe.phantom, ?tmp#51##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#51##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #48 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#53##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#53##0:wybe.phantom, ?tmp#54##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#54##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("tests without alias":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #49 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#56##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#56##0:wybe.phantom, ?tmp#57##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#57##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} malloc_count(?mc1##2:wybe.int) @memory_management:nn:nn
    int_list_test.test_int_list<0>[9e35cb823b](~tmp#0##0:int_list.int_list, ~tmp#1##0:int_list.int_list, ~tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #24 @int_list_test:nn:nn
    foreign c {impure} malloc_count(?mc2##2:wybe.int) @memory_management:nn:nn
    foreign llvm sub(~mc2##2:wybe.int, ~mc1##2:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #50 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#61##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#61##0:wybe.phantom, ?tmp#62##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#62##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>(" ** malloc count of building lists: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #28 @int_list_test:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#64##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#3##0:wybe.int, ~tmp#64##0:wybe.phantom, ?tmp#65##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#65##0:wybe.phantom, ?tmp#66##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#66##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>(" ** malloc count of test(aliased): ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #30 @int_list_test:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#68##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#4##0:wybe.int, ~tmp#68##0:wybe.phantom, ?tmp#69##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#69##0:wybe.phantom, ?tmp#70##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#70##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>(" ** malloc count of test(non-aliased): ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #32 @int_list_test:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#72##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#5##0:wybe.int, ~tmp#72##0:wybe.phantom, ?tmp#73##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#73##0:wybe.phantom, ?tmp#74##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#74##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


test_int_list > (2 calls)
0: int_list_test.test_int_list<0>
test_int_list(x##0:int_list.int_list, y##0:int_list.int_list, z##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 1,InterestingUnaliased 2]
  MultiSpeczDepInfo: [(2,(int_list.append<0>,fromList [NonAliasedParamCond 0 [1]])),(7,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(8,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(11,(int_list.insert<0>,fromList [NonAliasedParamCond 0 []])),(12,(int_list.pop<0>,fromList [NonAliasedParamCond 0 []])),(13,(int_list.remove<0>,fromList [NonAliasedParamCond 0 []])),(16,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(19,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(20,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [2]]))]
    int_list.reverse_helper<0>(~x##0:int_list.int_list, 0:int_list.int_list, ?x##1:int_list.int_list) #19 @int_list:nn:nn
    int_list.reverse_helper<0>(~z##0:int_list.int_list, 0:int_list.int_list, ?z##1:int_list.int_list) #20 @int_list:nn:nn
    int_list.append<0>(~y##0:int_list.int_list, 99:wybe.int, ?tmp#0##0:int_list.int_list) #2 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #21 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(x##1:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #22 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#13##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #23 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(z##1:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #24 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#18##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#19##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.extend<0>[410bae77d3](~x##1:int_list.int_list, ~tmp#0##0:int_list.int_list, outByReference tmp#1##0:int_list.int_list) #7 @int_list_test:nn:nn
    int_list.extend<0>[410bae77d3](~tmp#1##0:int_list.int_list, ~z##1:int_list.int_list, outByReference tmp#2##0:int_list.int_list) #8 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #25 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #26 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#24##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.insert<0>[410bae77d3](~tmp#2##0:int_list.int_list, 4:wybe.int, 78:wybe.int, outByReference tmp#3##0:int_list.int_list) #11 @int_list_test:nn:nn
    int_list.pop<0>[410bae77d3](~tmp#3##0:int_list.int_list, 20:wybe.int, outByReference tmp#4##0:int_list.int_list) #12 @int_list_test:nn:nn
    int_list.remove<0>[410bae77d3](~tmp#4##0:int_list.int_list, 2:wybe.int, outByReference tmp#5##0:int_list.int_list) #13 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #27 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#28##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#5##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #28 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#31##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.sort<0>[410bae77d3](~tmp#5##0:int_list.int_list, ?l##5:int_list.int_list) #16 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #29 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#33##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(~l##5:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #30 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#36##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#36##0:wybe.phantom, ?tmp#37##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#37##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

LLVM code       : None

======================================================================
AFTER EVERYTHING:
 Module 
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    use int_list
                    use int_list_test
                    use wybe
                    use wybe.array
                    use wybe.bool
                    use wybe.c_string
                    use wybe.char
                    use wybe.comparison
                    use wybe.control
                    use wybe.count
                    use wybe.float
                    use wybe.int
                    use wybe.io
                    use wybe.list
                    use wybe.machine_word
                    use wybe.memory_management
                    use wybe.phantom
                    use wybe.predicate
                    use wybe.range
                    use wybe.string
  resources       : 
  procs           : 

module top-level code > {terminal,inline,impure} (0 calls)
0: .<0>
(%argc##0:wybe.int, %argv##0:wybe.array.raw_array(wybe.c_string), %?exit_code##0:wybe.int)<{}; {<<command_line.exit_code>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(~%argc##0:wybe.int, <<command_line.argc>>:wybe.int)
    foreign lpvm store(~%argv##0:wybe.array.raw_array(wybe.c_string), <<command_line.argv>>:wybe.array.raw_array(wybe.c_string))
    foreign c {impure} gc_init @memory_management:nn:nn
    foreign lpvm store(0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    command_line.<0><{<<command_line.argc>>, <<command_line.argv>>}; {<<command_line.arguments>>, <<command_line.command>>, <<command_line.exit_code>>}> #2
    int_list_test.<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3
    foreign lpvm load(<<command_line.exit_code>>:wybe.int, ?%exit_code##0:wybe.int)
    foreign c {semipure,terminal} exit(exit_code##0:wybe.int)

  LLVM code       :

; ModuleID = ''


 


@"resource#command_line.argc" = external   global i64 


@"resource#command_line.argv" = external   global i64 


@"resource#command_line.exit_code" = external   global i64 


declare external ccc  void @exit(i64)    


declare external fastcc  void @"int_list_test.<0>"()    


declare external fastcc  void @"command_line.<0>"()    


declare external ccc  void @gc_init()    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external ccc  i64 @main(i64  %"argc##0", i64  %"argv##0")    {
entry:
  store  i64 %"argc##0", i64* @"resource#command_line.argc" 
  store  i64 %"argv##0", i64* @"resource#command_line.argv" 
  tail call ccc  void  @gc_init()  
  tail call fastcc  void  @"command_line.<0>"()  
  tail call fastcc  void  @"int_list_test.<0>"()  
  %1 = load  i64, i64* @"resource#command_line.exit_code" 
  tail call ccc  void  @exit(i64  %1)  
  ret i64 %1 
}
--------------------------------------------------
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    arguments: command_line.arguments
                    argv: command_line.argv
                    command: command_line.command
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:nn:nn)]
                    arguments: fromList [(command_line.arguments,wybe.array(wybe.c_string) = array(argc @command_line:nn:nn, argv @command_line:nn:nn) @command_line:nn:nn @command_line:nn:nn)]
                    argv: fromList [(command_line.argv,wybe.array.raw_array(wybe.c_string) @command_line:nn:nn)]
                    command: fromList [(command_line.command,wybe.c_string = c"" @command_line:nn:nn @command_line:nn:nn)]
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:nn:nn @command_line:nn:nn)]
  procs           : 

module top-level code > public {impure} (0 calls)
0: command_line.<0>
()<{<<command_line.argc>>, <<command_line.argv>>}; {<<command_line.arguments>>, <<command_line.command>>, <<command_line.exit_code>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(1,(wybe.array.[|]<0>,fromList [NonAliasedParamCond 2 []]))]
    foreign lpvm load(<<command_line.argc>>:wybe.int, ?%tmp#1##0:wybe.int) @command_line:nn:nn
    foreign lpvm load(<<command_line.argv>>:wybe.array.raw_array(wybe.c_string), ?%tmp#3##0:wybe.array.raw_array(wybe.c_string)) @command_line:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#10##0:wybe.array(T)) @array:nn:nn
    foreign lpvm mutate(~tmp#10##0:wybe.array(T), ?tmp#11##0:wybe.array(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @array:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.array(T), ?tmp#0##0:wybe.array(wybe.c_string), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.array.raw_array(T)) @array:nn:nn
    foreign lpvm store(tmp#0##0:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
    foreign lpvm store(c"":wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn
    wybe.array.[|]<0>[785a827a1b](?command##1:wybe.c_string, ?arguments##2:wybe.array(wybe.c_string), ~tmp#0##0:wybe.array(wybe.c_string), ?tmp#7##0:wybe.bool) #1 @command_line:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign c {terminal,semipure} error_exit(c"command_line:18:15":wybe.c_string, c"Erroneous program argument vector":wybe.c_string) @control:nn:nn

    1:
        foreign lpvm store(~%arguments##2:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
        foreign lpvm store(~%command##1:wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn
        foreign lpvm store(0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn



set_exit_code > public {inline} (0 calls)
0: command_line.set_exit_code<0>
set_exit_code(code##0:wybe.int)<{}; {<<command_line.exit_code>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(~code##0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn

  LLVM code       :

; ModuleID = 'command_line'


 


@"resource#command_line.argc" =    global i64 undef


@"resource#command_line.arguments" =    global i64 undef


@"resource#command_line.argv" =    global i64 undef


@"resource#command_line.command" =    global i64 undef


@"resource#command_line.exit_code" =    global i64 undef


@command_line.11 =    constant [?? x i8] c"\00"


@command_line.17 =    constant [?? x i8] c"Erroneous program argument vector\00"


@command_line.16 =    constant [?? x i8] c"command_line:18:15\00"


declare external ccc  void @error_exit(i64, i64)    


declare external fastcc  {i64, i64, i1} @"wybe.array.[|]<0>[785a827a1b]"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"command_line.<0>"()    {
entry:
  %1 = load  i64, i64* @"resource#command_line.argc" 
  %2 = load  i64, i64* @"resource#command_line.argv" 
  %3 = trunc i64 16 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %1, i64* %7 
  %8 = add   i64 %5, 8 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %2, i64* %10 
  store  i64 %5, i64* @"resource#command_line.arguments" 
  store  i64 ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.11, i32 0, i32 0) to i64), i64* @"resource#command_line.command" 
  %12 = tail call fastcc  {i64, i64, i1}  @"wybe.array.[|]<0>[785a827a1b]"(i64  %5)  
  %13 = extractvalue {i64, i64, i1} %12, 0 
  %14 = extractvalue {i64, i64, i1} %12, 1 
  %15 = extractvalue {i64, i64, i1} %12, 2 
  br i1 %15, label %if.then, label %if.else 
if.then:
  store  i64 %14, i64* @"resource#command_line.arguments" 
  store  i64 %13, i64* @"resource#command_line.command" 
  store  i64 0, i64* @"resource#command_line.exit_code" 
  ret void 
if.else:
  tail call ccc  void  @error_exit(i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.16, i32 0, i32 0) to i64), i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.17, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  void @"command_line.set_exit_code<0>"(i64  %"code##0")    {
entry:
  store  i64 %"code##0", i64* @"resource#command_line.exit_code" 
  ret void 
}
--------------------------------------------------
 Module int_list
  representation  : (not a type)
  public submods  : int_list -> int_list.int_list
  public resources: 
  public procs    : int_list.append<0>
                    int_list.count<0>
                    int_list.extend<0>
                    int_list.index<0>
                    int_list.insert<0>
                    int_list.pop<0>
                    int_list.print<0>
                    int_list.println<0>
                    int_list.range<0>
                    int_list.remove<0>
                    int_list.reverse<0>
                    int_list.sort<0>
                    int_list.int_list.=<0>
                    int_list.int_list.cons<0>
                    int_list.int_list.cons<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.nil<0>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
                    int_list.int_list.~=<0>
  imports         : public use int_list.int_list
                    use wybe
  resources       : 
  submodules      : int_list.int_list
  procs           : 

append > public (0 calls)
0: int_list.append<0>[410bae77d3]
append(lst##0:int_list.int_list, v##0:wybe.int, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~tmp#5##0:int_list.int_list, ?tmp#6##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~tmp#6##0:int_list.int_list, ?tmp#7##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:int_list.int_list) @int_list:nn:nn
    int_list.extend<0>(~lst##0:int_list.int_list, ~tmp#7##0:int_list.int_list, outByReference #result##0:int_list.int_list) #2 @int_list:nn:nn
 [410bae77d3] [NonAliasedParam 0] :
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~tmp#5##0:int_list.int_list, ?tmp#6##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~tmp#6##0:int_list.int_list, ?tmp#7##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:int_list.int_list) @int_list:nn:nn
    int_list.extend<0>[410bae77d3](~lst##0:int_list.int_list, ~tmp#7##0:int_list.int_list, outByReference #result##0:int_list.int_list) #2 @int_list:nn:nn


count > public (3 calls)
0: int_list.count<0>
count(lst##0:int_list.int_list, x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        int_list.count<0>(~t##0:int_list.int_list, x##0:wybe.int, ?tmp#2##0:wybe.int) #1 @int_list:nn:nn
        foreign llvm icmp_eq(~h##0:wybe.int, ~x##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            foreign llvm move(~tmp#2##0:wybe.int, ?#result##0:wybe.int) @int:nn:nn

        1:
            foreign llvm add(~tmp#2##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @int:nn:nn




extend > public (3 calls)
0: int_list.extend<0>[410bae77d3]
extend(lst1##0:int_list.int_list, lst2##0:int_list.int_list, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst2##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst1##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~lst2##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst1##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst1##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:int_list.int_list, ?tmp#9##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
        int_list.extend<0>(~t##0:int_list.int_list, ~lst2##0:int_list.int_list, outByReference tmp#2##0:int_list.int_list) #1 @int_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:int_list.int_list) @int_list:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst1##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~lst2##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst1##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        int_list.extend<0>[410bae77d3](~t##0:int_list.int_list, ~lst2##0:int_list.int_list, outByReference tmp#2##0:int_list.int_list) #1 @int_list:nn:nn
        foreign lpvm mutate(~lst1##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:int_list.int_list) @int_list:nn:nn



gen#1 > {inline} (2 calls)
0: int_list.gen#1<0>
gen#1([h##0:wybe.int], [lst##0:int_list.int_list], [t##0:int_list.int_list], tmp#2##0:wybe.int, tmp#3##0:wybe.int, [x##0:wybe.int], ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~tmp#2##0:wybe.int, ~tmp#3##0:wybe.int, ?#result##0:wybe.int) @int:nn:nn


gen#2 > (2 calls)
0: int_list.gen#2<0>
gen#2(result##0:int_list.int_list, start##0:wybe.int, step##0:wybe.int, stop##0:wybe.int, tmp#0##0:int_list.int_list, ?result##1:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(3,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.gen#2<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_slt(start##0:wybe.int, stop##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        int_list.reverse_helper<0>(~result##0:int_list.int_list, 0:int_list.int_list, ?result##1:int_list.int_list) #3 @int_list:nn:nn

    1:
        foreign lpvm alloc(16:wybe.int, ?tmp#12##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#12##0:int_list.int_list, ?tmp#13##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#13##0:int_list.int_list, ?tmp#14##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result##0:int_list.int_list) @int_list:nn:nn
        foreign llvm add(~start##0:wybe.int, step##0:wybe.int, ?tmp#15##0:wybe.int) @int:nn:nn
        int_list.gen#2<0>(~tmp#14##0:int_list.int_list, ~tmp#15##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, ~tmp#0##0:int_list.int_list, ?result##1:int_list.int_list) #4 @int_list:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_slt(start##0:wybe.int, stop##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        int_list.reverse_helper<0>[410bae77d3](~result##0:int_list.int_list, 0:int_list.int_list, ?result##1:int_list.int_list) #3 @int_list:nn:nn

    1:
        foreign lpvm alloc(16:wybe.int, ?tmp#12##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#12##0:int_list.int_list, ?tmp#13##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#13##0:int_list.int_list, ?tmp#14##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result##0:int_list.int_list) @int_list:nn:nn
        foreign llvm add(~start##0:wybe.int, step##0:wybe.int, ?tmp#15##0:wybe.int) @int:nn:nn
        int_list.gen#2<0>[410bae77d3](~tmp#14##0:int_list.int_list, ~tmp#15##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, ~tmp#0##0:int_list.int_list, ?result##1:int_list.int_list) #4 @int_list:nn:nn



gen#3 > {inline} (1 calls)
0: int_list.gen#3<0>
gen#3(result##0:int_list.int_list, start##0:wybe.int, step##0:wybe.int, stop##0:wybe.int, tmp#0##0:int_list.int_list, ?result##2:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~tmp#5##0:int_list.int_list, ?tmp#6##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~tmp#6##0:int_list.int_list, ?tmp#7##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result##0:int_list.int_list) @int_list:nn:nn
    foreign llvm add(~start##0:wybe.int, step##0:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
    int_list.gen#2<0>(~tmp#7##0:int_list.int_list, ~tmp#2##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, ~tmp#0##0:int_list.int_list, ?result##2:int_list.int_list) #2 @int_list:nn:nn


greater > (3 calls)
0: int_list.greater<0>[410bae77d3]
greater(lst##0:int_list.int_list, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_sge(h##0:wybe.int, v##0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            int_list.greater<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #4 @int_list:nn:nn

        1:
            foreign lpvm alloc(16:wybe.int, ?tmp#14##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.greater<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~tmp#15##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_sge(~h##0:wybe.int, v##0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            int_list.greater<0>[410bae77d3](~t##0:int_list.int_list, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #4 @int_list:nn:nn

        1:
            int_list.greater<0>[410bae77d3](~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~lst##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn




index > public {inline} (0 calls)
0: int_list.index<0>
index(lst##0:int_list.int_list, x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.index_helper<0>(~lst##0:int_list.int_list, 0:wybe.int, ~x##0:wybe.int, ?#result##0:wybe.int) #0 @int_list:nn:nn


index_helper > (2 calls)
0: int_list.index_helper<0>
index_helper(lst##0:int_list.int_list, idx##0:wybe.int, x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(-1:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(~h##0:wybe.int, x##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            foreign llvm add(~idx##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @int:nn:nn
            int_list.index_helper<0>(~t##0:int_list.int_list, ~tmp#3##0:wybe.int, ~x##0:wybe.int, ?#result##0:wybe.int) #3 @int_list:nn:nn

        1:
            foreign llvm move(~idx##0:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn




insert > public (2 calls)
0: int_list.insert<0>[410bae77d3]
insert(lst##0:int_list.int_list, idx##0:wybe.int, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(4,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]])),(7,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_eq(idx##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool) @int:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#13##0:wybe.bool)
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int) @int:nn:nn
            int_list.insert<0>(~lst##0:int_list.int_list, ~tmp#7##0:wybe.int, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #7 @int_list:nn:nn

        1:
            foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
            foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#18##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#18##0:int_list.int_list, ?tmp#19##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.insert<0>(~t##0:int_list.int_list, ~tmp#5##0:wybe.int, ~v##0:wybe.int, outByReference tmp#4##0:int_list.int_list) #4 @int_list:nn:nn
            foreign lpvm mutate(~tmp#19##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#4##0:int_list.int_list) @int_list:nn:nn


    1:
        foreign lpvm alloc(16:wybe.int, ?tmp#14##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#15##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lst##0:int_list.int_list) @int_list:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_eq(idx##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool) @int:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#13##0:wybe.bool)
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int) @int:nn:nn
            int_list.insert<0>[410bae77d3](~lst##0:int_list.int_list, ~tmp#7##0:wybe.int, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #7 @int_list:nn:nn

        1:
            foreign lpvm access(lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
            int_list.insert<0>[410bae77d3](~t##0:int_list.int_list, ~tmp#5##0:wybe.int, ~v##0:wybe.int, outByReference tmp#4##0:int_list.int_list) #4 @int_list:nn:nn
            foreign lpvm mutate(~lst##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#4##0:int_list.int_list) @int_list:nn:nn


    1:
        foreign lpvm alloc(16:wybe.int, ?tmp#14##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#15##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lst##0:int_list.int_list) @int_list:nn:nn



lesser > (3 calls)
0: int_list.lesser<0>
lesser(lst##0:int_list.int_list, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_slt(h##0:wybe.int, v##0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            int_list.lesser<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference #result##0:int_list.int_list) #4 @int_list:nn:nn

        1:
            foreign lpvm alloc(16:wybe.int, ?tmp#14##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.lesser<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~tmp#15##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn




pop > public (1 calls)
0: int_list.pop<0>[410bae77d3]
pop(lst##0:int_list.int_list, idx##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(3,(int_list.pop<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(idx##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @int:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#16##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#16##0:int_list.int_list, ?tmp#17##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.pop<0>(~t##0:int_list.int_list, ~tmp#4##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #3 @int_list:nn:nn
            foreign lpvm mutate(~tmp#17##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn

        1:
            foreign llvm move(~t##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(idx##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            foreign llvm sub(~idx##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @int:nn:nn
            int_list.pop<0>[410bae77d3](~t##0:int_list.int_list, ~tmp#4##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #3 @int_list:nn:nn
            foreign lpvm mutate(~lst##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn

        1:
            foreign llvm move(~t##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn




print > public (2 calls)
0: int_list.print<0>
print(x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool)
    case ~tmp#2##0:wybe.bool of
    0:

    1:
        foreign lpvm access(x##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~x##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~h##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
        foreign c putchar(' ':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @char:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn
        int_list.print<0>(~t##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @int_list:nn:nn



println > public {inline} (0 calls)
0: int_list.println<0>
println(x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.print<0>(~x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#0##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#0##0:wybe.phantom, ?tmp#1##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#1##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


range > public {inline} (0 calls)
0: int_list.range<0>
range(start##0:wybe.int, stop##0:wybe.int, step##0:wybe.int, ?result##1:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.gen#2<0>(0:int_list.int_list, ~start##0:wybe.int, ~step##0:wybe.int, ~stop##0:wybe.int, 0:int_list.int_list, ?result##1:int_list.int_list) #1 @int_list:nn:nn


remove > public (1 calls)
0: int_list.remove<0>[410bae77d3]
remove(lst##0:int_list.int_list, v##0:wybe.int, outByReference #result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,lst##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.remove<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(h##0:wybe.int, v##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
        case ~tmp#5##0:wybe.bool of
        0:
            foreign lpvm alloc(16:wybe.int, ?tmp#13##0:int_list.int_list) @int_list:nn:nn
            foreign lpvm mutate(~tmp#13##0:int_list.int_list, ?tmp#14##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
            int_list.remove<0>(~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn

        1:
            foreign llvm move(~t##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_eq(~h##0:wybe.int, v##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
        case ~tmp#5##0:wybe.bool of
        0:
            int_list.remove<0>[410bae77d3](~t##0:int_list.int_list, ~v##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #2 @int_list:nn:nn
            foreign lpvm mutate(~lst##0:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:int_list.int_list) @int_list:nn:nn

        1:
            foreign llvm move(~t##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn




reverse > public {inline} (1 calls)
0: int_list.reverse<0>
reverse(lst##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.reverse_helper<0>(~lst##0:int_list.int_list, 0:int_list.int_list, ?#result##0:int_list.int_list) #1 @int_list:nn:nn


reverse_helper > (2 calls)
0: int_list.reverse_helper<0>[410bae77d3]
reverse_helper(lst##0:int_list.int_list, acc##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: [(#result##0,acc##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~acc##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:int_list.int_list, ?tmp#9##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:int_list.int_list, ?tmp#10##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~acc##0:int_list.int_list) @int_list:nn:nn
        int_list.reverse_helper<0>(~t##0:int_list.int_list, ~tmp#10##0:int_list.int_list, ?#result##0:int_list.int_list) #2 @int_list:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~acc##0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~lst##0:int_list.int_list, ?tmp#10##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~acc##0:int_list.int_list) @int_list:nn:nn
        int_list.reverse_helper<0>[410bae77d3](~t##0:int_list.int_list, ~tmp#10##0:int_list.int_list, ?#result##0:int_list.int_list) #2 @int_list:nn:nn



sort > public (2 calls)
0: int_list.sort<0>[410bae77d3]
sort(lst##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(3,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(6,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        int_list.lesser<0>(t##0:int_list.int_list, h##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #1 @int_list:nn:nn
        int_list.sort<0>[410bae77d3](~tmp#3##0:int_list.int_list, ?tmp#2##0:int_list.int_list) #2 @int_list:nn:nn
        int_list.greater<0>(~t##0:int_list.int_list, h##0:wybe.int, outByReference tmp#6##0:int_list.int_list) #3 @int_list:nn:nn
        int_list.sort<0>[410bae77d3](~tmp#6##0:int_list.int_list, ?tmp#5##0:int_list.int_list) #4 @int_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#13##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm mutate(~tmp#13##0:int_list.int_list, ?tmp#14##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @int_list:nn:nn
        foreign lpvm mutate(~tmp#14##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:int_list.int_list) @int_list:nn:nn
        int_list.extend<0>[410bae77d3](~tmp#2##0:int_list.int_list, ~tmp#15##0:int_list.int_list, outByReference #result##0:int_list.int_list) #6 @int_list:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list) @int_list:nn:nn

    1:
        foreign lpvm access(lst##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(lst##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        int_list.lesser<0>(t##0:int_list.int_list, h##0:wybe.int, outByReference tmp#3##0:int_list.int_list) #1 @int_list:nn:nn
        int_list.sort<0>[410bae77d3](~tmp#3##0:int_list.int_list, ?tmp#2##0:int_list.int_list) #2 @int_list:nn:nn
        int_list.greater<0>[410bae77d3](~t##0:int_list.int_list, ~h##0:wybe.int, outByReference tmp#6##0:int_list.int_list) #3 @int_list:nn:nn
        int_list.sort<0>[410bae77d3](~tmp#6##0:int_list.int_list, ?tmp#5##0:int_list.int_list) #4 @int_list:nn:nn
        foreign lpvm mutate(~lst##0:int_list.int_list, ?tmp#15##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:int_list.int_list) @int_list:nn:nn
        int_list.extend<0>[410bae77d3](~tmp#2##0:int_list.int_list, ~tmp#15##0:int_list.int_list, outByReference #result##0:int_list.int_list) #6 @int_list:nn:nn


  LLVM code       :

; ModuleID = 'int_list'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i64 @"int_list.append<0>"(i64  %"lst##0", i64  %"v##0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 %"v##0", i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 0, i64* %8 
  %9 = alloca i64 
   call fastcc  void  @"int_list.extend<0>"(i64  %"lst##0", i64  %3, i64*  %9)  
  %10 = load  i64, i64* %9 
  ret i64 %10 
}


define external fastcc  i64 @"int_list.append<0>[410bae77d3]"(i64  %"lst##0", i64  %"v##0")    {
entry:
  %11 = trunc i64 16 to i32  
  %12 = tail call ccc  i8*  @wybe_malloc(i32  %11)  
  %13 = ptrtoint i8* %12 to i64 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 %"v##0", i64* %15 
  %16 = add   i64 %13, 8 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 0, i64* %18 
  %19 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %"lst##0", i64  %13, i64*  %19)  
  %20 = load  i64, i64* %19 
  ret i64 %20 
}


define external fastcc  i64 @"int_list.count<0>"(i64  %"lst##0", i64  %"x##0")    {
entry:
  %"1#tmp#7##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#7##0", label %if.then, label %if.else 
if.then:
  %21 = inttoptr i64 %"lst##0" to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  %23 = load  i64, i64* %22 
  %24 = add   i64 %"lst##0", 8 
  %25 = inttoptr i64 %24 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  %27 = load  i64, i64* %26 
  %"2#tmp#2##0" = tail call fastcc  i64  @"int_list.count<0>"(i64  %27, i64  %"x##0")  
  %"2#tmp#4##0" = icmp eq i64 %23, %"x##0" 
  br i1 %"2#tmp#4##0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  %"4##result##0" = add   i64 %"2#tmp#2##0", 1 
  ret i64 %"4##result##0" 
if.else1:
  ret i64 %"2#tmp#2##0" 
}


define external fastcc  void @"int_list.extend<0>"(i64  %"lst1##0", i64  %"lst2##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#5##0" = icmp ne i64 %"lst1##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %28 = inttoptr i64 %"lst1##0" to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %31 = add   i64 %"lst1##0", 8 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  %35 = trunc i64 16 to i32  
  %36 = tail call ccc  i8*  @wybe_malloc(i32  %35)  
  %37 = ptrtoint i8* %36 to i64 
  %38 = inttoptr i64 %37 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  store  i64 %30, i64* %39 
  %40 = add   i64 %37, 8 
  %41 = inttoptr i64 %40 to i64* 
  store  i64 %37, i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.extend<0>"(i64  %34, i64  %"lst2##0", i64*  %41)  
  ret void 
if.else:
  store  i64 %"lst2##0", i64* %"#result##0" 
  ret void 
}


define external fastcc  void @"int_list.extend<0>[410bae77d3]"(i64  %"lst1##0", i64  %"lst2##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#5##0" = icmp ne i64 %"lst1##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %42 = add   i64 %"lst1##0", 8 
  %43 = inttoptr i64 %42 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  %45 = load  i64, i64* %44 
  %46 = add   i64 %"lst1##0", 8 
  %47 = inttoptr i64 %46 to i64* 
  store  i64 %"lst1##0", i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %45, i64  %"lst2##0", i64*  %47)  
  ret void 
if.else:
  store  i64 %"lst2##0", i64* %"#result##0" 
  ret void 
}


define external fastcc  i64 @"int_list.gen#1<0>"(i64  %"tmp#2##0", i64  %"tmp#3##0")    {
entry:
  %"1##result##0" = add   i64 %"tmp#2##0", %"tmp#3##0" 
  ret i64 %"1##result##0" 
}


define external fastcc  i64 @"int_list.gen#2<0>"(i64  %"result##0", i64  %"start##0", i64  %"step##0", i64  %"stop##0", i64  %"tmp#0##0")    {
entry:
  %"1#tmp#3##0" = icmp slt i64 %"start##0", %"stop##0" 
  br i1 %"1#tmp#3##0", label %if.then, label %if.else 
if.then:
  %48 = trunc i64 16 to i32  
  %49 = tail call ccc  i8*  @wybe_malloc(i32  %48)  
  %50 = ptrtoint i8* %49 to i64 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  store  i64 %"start##0", i64* %52 
  %53 = add   i64 %50, 8 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  store  i64 %"result##0", i64* %55 
  %"2#tmp#15##0" = add   i64 %"start##0", %"step##0" 
  %"2#result##1" = musttail call fastcc  i64  @"int_list.gen#2<0>"(i64  %50, i64  %"2#tmp#15##0", i64  %"step##0", i64  %"stop##0", i64  %"tmp#0##0")  
  ret i64 %"2#result##1" 
if.else:
  %"3#result##1" = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"result##0", i64  0)  
  ret i64 %"3#result##1" 
}


define external fastcc  i64 @"int_list.gen#2<0>[410bae77d3]"(i64  %"result##0", i64  %"start##0", i64  %"step##0", i64  %"stop##0", i64  %"tmp#0##0")    {
entry:
  %"1#tmp#3##0" = icmp slt i64 %"start##0", %"stop##0" 
  br i1 %"1#tmp#3##0", label %if.then, label %if.else 
if.then:
  %56 = trunc i64 16 to i32  
  %57 = tail call ccc  i8*  @wybe_malloc(i32  %56)  
  %58 = ptrtoint i8* %57 to i64 
  %59 = inttoptr i64 %58 to i64* 
  %60 = getelementptr  i64, i64* %59, i64 0 
  store  i64 %"start##0", i64* %60 
  %61 = add   i64 %58, 8 
  %62 = inttoptr i64 %61 to i64* 
  %63 = getelementptr  i64, i64* %62, i64 0 
  store  i64 %"result##0", i64* %63 
  %"2#tmp#15##0" = add   i64 %"start##0", %"step##0" 
  %"2#result##1" = musttail call fastcc  i64  @"int_list.gen#2<0>[410bae77d3]"(i64  %58, i64  %"2#tmp#15##0", i64  %"step##0", i64  %"stop##0", i64  %"tmp#0##0")  
  ret i64 %"2#result##1" 
if.else:
  %"3#result##1" = tail call fastcc  i64  @"int_list.reverse_helper<0>[410bae77d3]"(i64  %"result##0", i64  0)  
  ret i64 %"3#result##1" 
}


define external fastcc  i64 @"int_list.gen#3<0>"(i64  %"result##0", i64  %"start##0", i64  %"step##0", i64  %"stop##0", i64  %"tmp#0##0")    {
entry:
  %64 = trunc i64 16 to i32  
  %65 = tail call ccc  i8*  @wybe_malloc(i32  %64)  
  %66 = ptrtoint i8* %65 to i64 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  store  i64 %"start##0", i64* %68 
  %69 = add   i64 %66, 8 
  %70 = inttoptr i64 %69 to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  store  i64 %"result##0", i64* %71 
  %"1#tmp#2##0" = add   i64 %"start##0", %"step##0" 
  %"1#result##2" = musttail call fastcc  i64  @"int_list.gen#2<0>"(i64  %66, i64  %"1#tmp#2##0", i64  %"step##0", i64  %"stop##0", i64  %"tmp#0##0")  
  ret i64 %"1#result##2" 
}


define external fastcc  void @"int_list.greater<0>"(i64  %"lst##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#9##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#9##0", label %if.then, label %if.else 
if.then:
  %72 = inttoptr i64 %"lst##0" to i64* 
  %73 = getelementptr  i64, i64* %72, i64 0 
  %74 = load  i64, i64* %73 
  %75 = add   i64 %"lst##0", 8 
  %76 = inttoptr i64 %75 to i64* 
  %77 = getelementptr  i64, i64* %76, i64 0 
  %78 = load  i64, i64* %77 
  %"2#tmp#6##0" = icmp sge i64 %74, %"v##0" 
  br i1 %"2#tmp#6##0", label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  %79 = trunc i64 16 to i32  
  %80 = tail call ccc  i8*  @wybe_malloc(i32  %79)  
  %81 = ptrtoint i8* %80 to i64 
  %82 = inttoptr i64 %81 to i64* 
  %83 = getelementptr  i64, i64* %82, i64 0 
  store  i64 %74, i64* %83 
  %84 = add   i64 %81, 8 
  %85 = inttoptr i64 %84 to i64* 
  store  i64 %81, i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.greater<0>"(i64  %78, i64  %"v##0", i64*  %85)  
  ret void 
if.else1:
  musttail call fastcc  void  @"int_list.greater<0>"(i64  %78, i64  %"v##0", i64*  %"#result##0")  
  ret void 
}


define external fastcc  void @"int_list.greater<0>[410bae77d3]"(i64  %"lst##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#9##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#9##0", label %if.then, label %if.else 
if.then:
  %86 = inttoptr i64 %"lst##0" to i64* 
  %87 = getelementptr  i64, i64* %86, i64 0 
  %88 = load  i64, i64* %87 
  %89 = add   i64 %"lst##0", 8 
  %90 = inttoptr i64 %89 to i64* 
  %91 = getelementptr  i64, i64* %90, i64 0 
  %92 = load  i64, i64* %91 
  %"2#tmp#6##0" = icmp sge i64 %88, %"v##0" 
  br i1 %"2#tmp#6##0", label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  %93 = add   i64 %"lst##0", 8 
  %94 = inttoptr i64 %93 to i64* 
  store  i64 %"lst##0", i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.greater<0>[410bae77d3]"(i64  %92, i64  %"v##0", i64*  %94)  
  ret void 
if.else1:
  musttail call fastcc  void  @"int_list.greater<0>[410bae77d3]"(i64  %92, i64  %"v##0", i64*  %"#result##0")  
  ret void 
}


define external fastcc  i64 @"int_list.index<0>"(i64  %"lst##0", i64  %"x##0")    {
entry:
  %"1##result##0" = tail call fastcc  i64  @"int_list.index_helper<0>"(i64  %"lst##0", i64  0, i64  %"x##0")  
  ret i64 %"1##result##0" 
}


define external fastcc  i64 @"int_list.index_helper<0>"(i64  %"lst##0", i64  %"idx##0", i64  %"x##0")    {
entry:
  %"1#tmp#7##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#7##0", label %if.then, label %if.else 
if.then:
  %95 = inttoptr i64 %"lst##0" to i64* 
  %96 = getelementptr  i64, i64* %95, i64 0 
  %97 = load  i64, i64* %96 
  %98 = add   i64 %"lst##0", 8 
  %99 = inttoptr i64 %98 to i64* 
  %100 = getelementptr  i64, i64* %99, i64 0 
  %101 = load  i64, i64* %100 
  %"2#tmp#4##0" = icmp eq i64 %97, %"x##0" 
  br i1 %"2#tmp#4##0", label %if.then1, label %if.else1 
if.else:
  ret i64 -1 
if.then1:
  ret i64 %"idx##0" 
if.else1:
  %"5#tmp#3##0" = add   i64 %"idx##0", 1 
  %"5##result##0" = musttail call fastcc  i64  @"int_list.index_helper<0>"(i64  %101, i64  %"5#tmp#3##0", i64  %"x##0")  
  ret i64 %"5##result##0" 
}


define external fastcc  void @"int_list.insert<0>"(i64  %"lst##0", i64  %"idx##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#9##0" = icmp eq i64 %"idx##0", 0 
  br i1 %"1#tmp#9##0", label %if.then, label %if.else 
if.then:
  %102 = trunc i64 16 to i32  
  %103 = tail call ccc  i8*  @wybe_malloc(i32  %102)  
  %104 = ptrtoint i8* %103 to i64 
  %105 = inttoptr i64 %104 to i64* 
  %106 = getelementptr  i64, i64* %105, i64 0 
  store  i64 %"v##0", i64* %106 
  %107 = add   i64 %104, 8 
  %108 = inttoptr i64 %107 to i64* 
  %109 = getelementptr  i64, i64* %108, i64 0 
  store  i64 %"lst##0", i64* %109 
  store  i64 %104, i64* %"#result##0" 
  ret void 
if.else:
  %"3#tmp#13##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"3#tmp#13##0", label %if.then1, label %if.else1 
if.then1:
  %110 = inttoptr i64 %"lst##0" to i64* 
  %111 = getelementptr  i64, i64* %110, i64 0 
  %112 = load  i64, i64* %111 
  %113 = add   i64 %"lst##0", 8 
  %114 = inttoptr i64 %113 to i64* 
  %115 = getelementptr  i64, i64* %114, i64 0 
  %116 = load  i64, i64* %115 
  %"4#tmp#5##0" = sub   i64 %"idx##0", 1 
  %117 = trunc i64 16 to i32  
  %118 = tail call ccc  i8*  @wybe_malloc(i32  %117)  
  %119 = ptrtoint i8* %118 to i64 
  %120 = inttoptr i64 %119 to i64* 
  %121 = getelementptr  i64, i64* %120, i64 0 
  store  i64 %112, i64* %121 
  %122 = add   i64 %119, 8 
  %123 = inttoptr i64 %122 to i64* 
  store  i64 %119, i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.insert<0>"(i64  %116, i64  %"4#tmp#5##0", i64  %"v##0", i64*  %123)  
  ret void 
if.else1:
  %"5#tmp#7##0" = sub   i64 %"idx##0", 1 
  musttail call fastcc  void  @"int_list.insert<0>"(i64  %"lst##0", i64  %"5#tmp#7##0", i64  %"v##0", i64*  %"#result##0")  
  ret void 
}


define external fastcc  void @"int_list.insert<0>[410bae77d3]"(i64  %"lst##0", i64  %"idx##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#9##0" = icmp eq i64 %"idx##0", 0 
  br i1 %"1#tmp#9##0", label %if.then, label %if.else 
if.then:
  %124 = trunc i64 16 to i32  
  %125 = tail call ccc  i8*  @wybe_malloc(i32  %124)  
  %126 = ptrtoint i8* %125 to i64 
  %127 = inttoptr i64 %126 to i64* 
  %128 = getelementptr  i64, i64* %127, i64 0 
  store  i64 %"v##0", i64* %128 
  %129 = add   i64 %126, 8 
  %130 = inttoptr i64 %129 to i64* 
  %131 = getelementptr  i64, i64* %130, i64 0 
  store  i64 %"lst##0", i64* %131 
  store  i64 %126, i64* %"#result##0" 
  ret void 
if.else:
  %"3#tmp#13##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"3#tmp#13##0", label %if.then1, label %if.else1 
if.then1:
  %132 = add   i64 %"lst##0", 8 
  %133 = inttoptr i64 %132 to i64* 
  %134 = getelementptr  i64, i64* %133, i64 0 
  %135 = load  i64, i64* %134 
  %"4#tmp#5##0" = sub   i64 %"idx##0", 1 
  %136 = add   i64 %"lst##0", 8 
  %137 = inttoptr i64 %136 to i64* 
  store  i64 %"lst##0", i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.insert<0>[410bae77d3]"(i64  %135, i64  %"4#tmp#5##0", i64  %"v##0", i64*  %137)  
  ret void 
if.else1:
  %"5#tmp#7##0" = sub   i64 %"idx##0", 1 
  musttail call fastcc  void  @"int_list.insert<0>[410bae77d3]"(i64  %"lst##0", i64  %"5#tmp#7##0", i64  %"v##0", i64*  %"#result##0")  
  ret void 
}


define external fastcc  void @"int_list.lesser<0>"(i64  %"lst##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#9##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#9##0", label %if.then, label %if.else 
if.then:
  %138 = inttoptr i64 %"lst##0" to i64* 
  %139 = getelementptr  i64, i64* %138, i64 0 
  %140 = load  i64, i64* %139 
  %141 = add   i64 %"lst##0", 8 
  %142 = inttoptr i64 %141 to i64* 
  %143 = getelementptr  i64, i64* %142, i64 0 
  %144 = load  i64, i64* %143 
  %"2#tmp#6##0" = icmp slt i64 %140, %"v##0" 
  br i1 %"2#tmp#6##0", label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  %145 = trunc i64 16 to i32  
  %146 = tail call ccc  i8*  @wybe_malloc(i32  %145)  
  %147 = ptrtoint i8* %146 to i64 
  %148 = inttoptr i64 %147 to i64* 
  %149 = getelementptr  i64, i64* %148, i64 0 
  store  i64 %140, i64* %149 
  %150 = add   i64 %147, 8 
  %151 = inttoptr i64 %150 to i64* 
  store  i64 %147, i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.lesser<0>"(i64  %144, i64  %"v##0", i64*  %151)  
  ret void 
if.else1:
  musttail call fastcc  void  @"int_list.lesser<0>"(i64  %144, i64  %"v##0", i64*  %"#result##0")  
  ret void 
}


define external fastcc  void @"int_list.pop<0>"(i64  %"lst##0", i64  %"idx##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#9##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#9##0", label %if.then, label %if.else 
if.then:
  %152 = inttoptr i64 %"lst##0" to i64* 
  %153 = getelementptr  i64, i64* %152, i64 0 
  %154 = load  i64, i64* %153 
  %155 = add   i64 %"lst##0", 8 
  %156 = inttoptr i64 %155 to i64* 
  %157 = getelementptr  i64, i64* %156, i64 0 
  %158 = load  i64, i64* %157 
  %"2#tmp#6##0" = icmp eq i64 %"idx##0", 0 
  br i1 %"2#tmp#6##0", label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  store  i64 %158, i64* %"#result##0" 
  ret void 
if.else1:
  %"5#tmp#4##0" = sub   i64 %"idx##0", 1 
  %159 = trunc i64 16 to i32  
  %160 = tail call ccc  i8*  @wybe_malloc(i32  %159)  
  %161 = ptrtoint i8* %160 to i64 
  %162 = inttoptr i64 %161 to i64* 
  %163 = getelementptr  i64, i64* %162, i64 0 
  store  i64 %154, i64* %163 
  %164 = add   i64 %161, 8 
  %165 = inttoptr i64 %164 to i64* 
  store  i64 %161, i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.pop<0>"(i64  %158, i64  %"5#tmp#4##0", i64*  %165)  
  ret void 
}


define external fastcc  void @"int_list.pop<0>[410bae77d3]"(i64  %"lst##0", i64  %"idx##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#9##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#9##0", label %if.then, label %if.else 
if.then:
  %166 = add   i64 %"lst##0", 8 
  %167 = inttoptr i64 %166 to i64* 
  %168 = getelementptr  i64, i64* %167, i64 0 
  %169 = load  i64, i64* %168 
  %"2#tmp#6##0" = icmp eq i64 %"idx##0", 0 
  br i1 %"2#tmp#6##0", label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  store  i64 %169, i64* %"#result##0" 
  ret void 
if.else1:
  %"5#tmp#4##0" = sub   i64 %"idx##0", 1 
  %170 = add   i64 %"lst##0", 8 
  %171 = inttoptr i64 %170 to i64* 
  store  i64 %"lst##0", i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.pop<0>[410bae77d3]"(i64  %169, i64  %"5#tmp#4##0", i64*  %171)  
  ret void 
}


define external fastcc  void @"int_list.print<0>"(i64  %"x##0")    {
entry:
  %"1#tmp#2##0" = icmp ne i64 %"x##0", 0 
  br i1 %"1#tmp#2##0", label %if.then, label %if.else 
if.then:
  %172 = inttoptr i64 %"x##0" to i64* 
  %173 = getelementptr  i64, i64* %172, i64 0 
  %174 = load  i64, i64* %173 
  %175 = add   i64 %"x##0", 8 
  %176 = inttoptr i64 %175 to i64* 
  %177 = getelementptr  i64, i64* %176, i64 0 
  %178 = load  i64, i64* %177 
  tail call ccc  void  @print_int(i64  %174)  
  tail call ccc  void  @putchar(i8  32)  
  musttail call fastcc  void  @"int_list.print<0>"(i64  %178)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"int_list.println<0>"(i64  %"x##0")    {
entry:
  tail call fastcc  void  @"int_list.print<0>"(i64  %"x##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"int_list.range<0>"(i64  %"start##0", i64  %"stop##0", i64  %"step##0")    {
entry:
  %"1#result##1" = tail call fastcc  i64  @"int_list.gen#2<0>"(i64  0, i64  %"start##0", i64  %"step##0", i64  %"stop##0", i64  0)  
  ret i64 %"1#result##1" 
}


define external fastcc  void @"int_list.remove<0>"(i64  %"lst##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#8##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#8##0", label %if.then, label %if.else 
if.then:
  %179 = inttoptr i64 %"lst##0" to i64* 
  %180 = getelementptr  i64, i64* %179, i64 0 
  %181 = load  i64, i64* %180 
  %182 = add   i64 %"lst##0", 8 
  %183 = inttoptr i64 %182 to i64* 
  %184 = getelementptr  i64, i64* %183, i64 0 
  %185 = load  i64, i64* %184 
  %"2#tmp#5##0" = icmp eq i64 %181, %"v##0" 
  br i1 %"2#tmp#5##0", label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  store  i64 %185, i64* %"#result##0" 
  ret void 
if.else1:
  %186 = trunc i64 16 to i32  
  %187 = tail call ccc  i8*  @wybe_malloc(i32  %186)  
  %188 = ptrtoint i8* %187 to i64 
  %189 = inttoptr i64 %188 to i64* 
  %190 = getelementptr  i64, i64* %189, i64 0 
  store  i64 %181, i64* %190 
  %191 = add   i64 %188, 8 
  %192 = inttoptr i64 %191 to i64* 
  store  i64 %188, i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.remove<0>"(i64  %185, i64  %"v##0", i64*  %192)  
  ret void 
}


define external fastcc  void @"int_list.remove<0>[410bae77d3]"(i64  %"lst##0", i64  %"v##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#8##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#8##0", label %if.then, label %if.else 
if.then:
  %193 = inttoptr i64 %"lst##0" to i64* 
  %194 = getelementptr  i64, i64* %193, i64 0 
  %195 = load  i64, i64* %194 
  %196 = add   i64 %"lst##0", 8 
  %197 = inttoptr i64 %196 to i64* 
  %198 = getelementptr  i64, i64* %197, i64 0 
  %199 = load  i64, i64* %198 
  %"2#tmp#5##0" = icmp eq i64 %195, %"v##0" 
  br i1 %"2#tmp#5##0", label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  store  i64 %199, i64* %"#result##0" 
  ret void 
if.else1:
  %200 = add   i64 %"lst##0", 8 
  %201 = inttoptr i64 %200 to i64* 
  store  i64 %"lst##0", i64* %"#result##0" 
  musttail call fastcc  void  @"int_list.remove<0>[410bae77d3]"(i64  %199, i64  %"v##0", i64*  %201)  
  ret void 
}


define external fastcc  i64 @"int_list.reverse<0>"(i64  %"lst##0")    {
entry:
  %"1##result##0" = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"lst##0", i64  0)  
  ret i64 %"1##result##0" 
}


define external fastcc  i64 @"int_list.reverse_helper<0>"(i64  %"lst##0", i64  %"acc##0")    {
entry:
  %"1#tmp#5##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %202 = inttoptr i64 %"lst##0" to i64* 
  %203 = getelementptr  i64, i64* %202, i64 0 
  %204 = load  i64, i64* %203 
  %205 = add   i64 %"lst##0", 8 
  %206 = inttoptr i64 %205 to i64* 
  %207 = getelementptr  i64, i64* %206, i64 0 
  %208 = load  i64, i64* %207 
  %209 = trunc i64 16 to i32  
  %210 = tail call ccc  i8*  @wybe_malloc(i32  %209)  
  %211 = ptrtoint i8* %210 to i64 
  %212 = inttoptr i64 %211 to i64* 
  %213 = getelementptr  i64, i64* %212, i64 0 
  store  i64 %204, i64* %213 
  %214 = add   i64 %211, 8 
  %215 = inttoptr i64 %214 to i64* 
  %216 = getelementptr  i64, i64* %215, i64 0 
  store  i64 %"acc##0", i64* %216 
  %"2##result##0" = musttail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %208, i64  %211)  
  ret i64 %"2##result##0" 
if.else:
  ret i64 %"acc##0" 
}


define external fastcc  i64 @"int_list.reverse_helper<0>[410bae77d3]"(i64  %"lst##0", i64  %"acc##0")    {
entry:
  %"1#tmp#5##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %217 = add   i64 %"lst##0", 8 
  %218 = inttoptr i64 %217 to i64* 
  %219 = getelementptr  i64, i64* %218, i64 0 
  %220 = load  i64, i64* %219 
  %221 = add   i64 %"lst##0", 8 
  %222 = inttoptr i64 %221 to i64* 
  %223 = getelementptr  i64, i64* %222, i64 0 
  store  i64 %"acc##0", i64* %223 
  %"2##result##0" = musttail call fastcc  i64  @"int_list.reverse_helper<0>[410bae77d3]"(i64  %220, i64  %"lst##0")  
  ret i64 %"2##result##0" 
if.else:
  ret i64 %"acc##0" 
}


define external fastcc  i64 @"int_list.sort<0>"(i64  %"lst##0")    {
entry:
  %"1#tmp#10##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#10##0", label %if.then, label %if.else 
if.then:
  %224 = inttoptr i64 %"lst##0" to i64* 
  %225 = getelementptr  i64, i64* %224, i64 0 
  %226 = load  i64, i64* %225 
  %227 = add   i64 %"lst##0", 8 
  %228 = inttoptr i64 %227 to i64* 
  %229 = getelementptr  i64, i64* %228, i64 0 
  %230 = load  i64, i64* %229 
  %231 = alloca i64 
   call fastcc  void  @"int_list.lesser<0>"(i64  %230, i64  %226, i64*  %231)  
  %232 = load  i64, i64* %231 
  %"2#tmp#2##0" = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %232)  
  %233 = alloca i64 
   call fastcc  void  @"int_list.greater<0>"(i64  %230, i64  %226, i64*  %233)  
  %234 = load  i64, i64* %233 
  %"2#tmp#5##0" = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %234)  
  %235 = trunc i64 16 to i32  
  %236 = tail call ccc  i8*  @wybe_malloc(i32  %235)  
  %237 = ptrtoint i8* %236 to i64 
  %238 = inttoptr i64 %237 to i64* 
  %239 = getelementptr  i64, i64* %238, i64 0 
  store  i64 %226, i64* %239 
  %240 = add   i64 %237, 8 
  %241 = inttoptr i64 %240 to i64* 
  %242 = getelementptr  i64, i64* %241, i64 0 
  store  i64 %"2#tmp#5##0", i64* %242 
  %243 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %"2#tmp#2##0", i64  %237, i64*  %243)  
  %244 = load  i64, i64* %243 
  ret i64 %244 
if.else:
  ret i64 0 
}


define external fastcc  i64 @"int_list.sort<0>[410bae77d3]"(i64  %"lst##0")    {
entry:
  %"1#tmp#10##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#10##0", label %if.then, label %if.else 
if.then:
  %245 = inttoptr i64 %"lst##0" to i64* 
  %246 = getelementptr  i64, i64* %245, i64 0 
  %247 = load  i64, i64* %246 
  %248 = add   i64 %"lst##0", 8 
  %249 = inttoptr i64 %248 to i64* 
  %250 = getelementptr  i64, i64* %249, i64 0 
  %251 = load  i64, i64* %250 
  %252 = alloca i64 
   call fastcc  void  @"int_list.lesser<0>"(i64  %251, i64  %247, i64*  %252)  
  %253 = load  i64, i64* %252 
  %"2#tmp#2##0" = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %253)  
  %254 = alloca i64 
   call fastcc  void  @"int_list.greater<0>[410bae77d3]"(i64  %251, i64  %247, i64*  %254)  
  %255 = load  i64, i64* %254 
  %"2#tmp#5##0" = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %255)  
  %256 = add   i64 %"lst##0", 8 
  %257 = inttoptr i64 %256 to i64* 
  %258 = getelementptr  i64, i64* %257, i64 0 
  store  i64 %"2#tmp#5##0", i64* %258 
  %259 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %"2#tmp#2##0", i64  %"lst##0", i64*  %259)  
  %260 = load  i64, i64* %259 
  ret i64 %260 
if.else:
  ret i64 0 
}
--------------------------------------------------
 Module int_list.int_list
  representation  : address
  public submods  : 
  public resources: 
  public procs    : int_list.int_list.=<0>
                    int_list.int_list.cons<0>
                    int_list.int_list.cons<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.nil<0>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
                    int_list.int_list.~=<0>
  imports         : use int_list
                    use wybe
  resources       : 
  procs           : 

= > public (2 calls)
0: int_list.int_list.=<0>
=(#left##0:int_list.int_list, #right##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:int_list.int_list, ~#right##0:int_list.int_list, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#head##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~#left##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#tail##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
        case ~tmp#9##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#head##0:wybe.int) @int_list:nn:nn
            foreign lpvm access(~#right##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#tail##0:int_list.int_list) @int_list:nn:nn
            foreign llvm icmp_eq(~#left#head##0:wybe.int, ~#right#head##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                int_list.int_list.=<0>(~#left#tail##0:int_list.int_list, ~#right#tail##0:int_list.int_list, ?#success##0:wybe.bool) #3





cons > public {inline} (0 calls)
0: int_list.int_list.cons<0>
cons(head##0:wybe.int, tail##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~#rec##1:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail##0:int_list.int_list) @int_list:nn:nn
cons > public {inline} (12 calls)
1: int_list.int_list.cons<1>
cons(?head##0:wybe.int, ?tail##0:int_list.int_list, #result##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head##0:wybe.int)
        foreign llvm move(undef:int_list.int_list, ?tail##0:int_list.int_list)

    1:
        foreign lpvm access(#result##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~#result##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



head > public {inline} (0 calls)
0: int_list.int_list.head<0>
head(#rec##0:int_list.int_list, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

head > public {inline} (0 calls)
1: int_list.int_list.head<1>
head(#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list)

    1:
        foreign lpvm mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



nil > public {inline} (0 calls)
0: int_list.int_list.nil<0>
nil(?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list)


tail > public {inline} (0 calls)
0: int_list.int_list.tail<0>
tail(#rec##0:int_list.int_list, ?#result##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:int_list.int_list, ?#result##0:int_list.int_list)

    1:
        foreign lpvm access(~#rec##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

tail > public {inline} (0 calls)
1: int_list.int_list.tail<1>
tail(#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, #field##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: int_list.int_list.~=<0>
~=(#left##0:int_list.int_list, #right##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.int_list.=<0>(~#left##0:int_list.int_list, ~#right##0:int_list.int_list, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'int_list.int_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"int_list.int_list.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#left##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#left##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %"2#tmp#9##0" = icmp ne i64 %"#right##0", 0 
  br i1 %"2#tmp#9##0", label %if.then1, label %if.else1 
if.else:
  %"3##success##0" = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %"3##success##0" 
if.then1:
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"#right##0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"4#tmp#4##0" = icmp eq i64 %3, %10 
  br i1 %"4#tmp#4##0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6##success##0" = musttail call fastcc  i1  @"int_list.int_list.=<0>"(i64  %7, i64  %14)  
  ret i1 %"6##success##0" 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"int_list.int_list.cons<0>"(i64  %"head##0", i64  %"tail##0")    {
entry:
  %15 = trunc i64 16 to i32  
  %16 = tail call ccc  i8*  @wybe_malloc(i32  %15)  
  %17 = ptrtoint i8* %16 to i64 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  store  i64 %"head##0", i64* %19 
  %20 = add   i64 %17, 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"tail##0", i64* %22 
  ret i64 %17 
}


define external fastcc  {i64, i64, i1} @"int_list.int_list.cons<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#result##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %23 = inttoptr i64 %"#result##0" to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"#result##0", 8 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = insertvalue {i64, i64, i1} undef, i64 %25, 0 
  %31 = insertvalue {i64, i64, i1} %30, i64 %29, 1 
  %32 = insertvalue {i64, i64, i1} %31, i1 1, 2 
  ret {i64, i64, i1} %32 
if.else:
  %33 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %34 = insertvalue {i64, i64, i1} %33, i64 undef, 1 
  %35 = insertvalue {i64, i64, i1} %34, i1 0, 2 
  ret {i64, i64, i1} %35 
}


define external fastcc  {i64, i1} @"int_list.int_list.head<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %36 = inttoptr i64 %"#rec##0" to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %39 = insertvalue {i64, i1} undef, i64 %38, 0 
  %40 = insertvalue {i64, i1} %39, i1 1, 1 
  ret {i64, i1} %40 
if.else:
  %41 = insertvalue {i64, i1} undef, i64 undef, 0 
  %42 = insertvalue {i64, i1} %41, i1 0, 1 
  ret {i64, i1} %42 
}


define external fastcc  {i64, i1} @"int_list.int_list.head<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %43 = trunc i64 16 to i32  
  %44 = tail call ccc  i8*  @wybe_malloc(i32  %43)  
  %45 = ptrtoint i8* %44 to i64 
  %46 = inttoptr i64 %45 to i8* 
  %47 = inttoptr i64 %"#rec##0" to i8* 
  %48 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %46, i8*  %47, i32  %48, i1  0)  
  %49 = inttoptr i64 %45 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  store  i64 %"#field##0", i64* %50 
  %51 = insertvalue {i64, i1} undef, i64 %45, 0 
  %52 = insertvalue {i64, i1} %51, i1 1, 1 
  ret {i64, i1} %52 
if.else:
  %53 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %54 = insertvalue {i64, i1} %53, i1 0, 1 
  ret {i64, i1} %54 
}


define external fastcc  i64 @"int_list.int_list.nil<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"int_list.int_list.tail<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %55 = add   i64 %"#rec##0", 8 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = insertvalue {i64, i1} undef, i64 %58, 0 
  %60 = insertvalue {i64, i1} %59, i1 1, 1 
  ret {i64, i1} %60 
if.else:
  %61 = insertvalue {i64, i1} undef, i64 undef, 0 
  %62 = insertvalue {i64, i1} %61, i1 0, 1 
  ret {i64, i1} %62 
}


define external fastcc  {i64, i1} @"int_list.int_list.tail<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %63 = trunc i64 16 to i32  
  %64 = tail call ccc  i8*  @wybe_malloc(i32  %63)  
  %65 = ptrtoint i8* %64 to i64 
  %66 = inttoptr i64 %65 to i8* 
  %67 = inttoptr i64 %"#rec##0" to i8* 
  %68 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %66, i8*  %67, i32  %68, i1  0)  
  %69 = add   i64 %65, 8 
  %70 = inttoptr i64 %69 to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  store  i64 %"#field##0", i64* %71 
  %72 = insertvalue {i64, i1} undef, i64 %65, 0 
  %73 = insertvalue {i64, i1} %72, i1 1, 1 
  ret {i64, i1} %73 
if.else:
  %74 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %75 = insertvalue {i64, i1} %74, i1 0, 1 
  ret {i64, i1} %75 
}


define external fastcc  i1 @"int_list.int_list.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %"1#tmp#0##0" = tail call fastcc  i1  @"int_list.int_list.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %"1##success##0" = xor i1 %"1#tmp#0##0", 1 
  ret i1 %"1##success##0" 
}
--------------------------------------------------
 Module int_list_test
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : int_list_test.<0>
  imports         : use command_line
                    use int_list
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: int_list_test.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(24,(int_list_test.test_int_list<0>,fromList [NonAliasedParamCond 0 [],NonAliasedParamCond 1 [],NonAliasedParamCond 2 []])),(34,(int_list.gen#2<0>,fromList [NonAliasedParamCond 0 []])),(35,(int_list.gen#2<0>,fromList [NonAliasedParamCond 0 []])),(36,(int_list.gen#2<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign c {impure} malloc_count(?mc1##0:wybe.int) @memory_management:nn:nn
    int_list.gen#2<0>[410bae77d3](0:int_list.int_list, 1:wybe.int, 1:wybe.int, 10:wybe.int, 0:int_list.int_list, ?tmp#0##0:int_list.int_list) #34 @int_list:nn:nn
    int_list.gen#2<0>[410bae77d3](0:int_list.int_list, 2:wybe.int, 2:wybe.int, 20:wybe.int, 0:int_list.int_list, ?tmp#1##0:int_list.int_list) #35 @int_list:nn:nn
    int_list.gen#2<0>[410bae77d3](0:int_list.int_list, 3:wybe.int, 3:wybe.int, 30:wybe.int, 0:int_list.int_list, ?tmp#2##0:int_list.int_list) #36 @int_list:nn:nn
    wybe.string.print<0>("x y z:":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #37 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #38 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#1##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #39 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#22##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #40 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#25##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#25##0:wybe.phantom, ?tmp#26##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#26##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} malloc_count(?mc2##0:wybe.int) @memory_management:nn:nn
    foreign llvm sub(~mc2##0:wybe.int, ~mc1##0:wybe.int, ?tmp#3##0:wybe.int) @int:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #41 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#31##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("tests with alias":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #42 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#33##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} malloc_count(?mc1##1:wybe.int) @memory_management:nn:nn
    int_list_test.test_int_list<0>(tmp#0##0:int_list.int_list, tmp#1##0:int_list.int_list, tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #13 @int_list_test:nn:nn
    foreign c {impure} malloc_count(?mc2##1:wybe.int) @memory_management:nn:nn
    foreign llvm sub(~mc2##1:wybe.int, ~mc1##1:wybe.int, ?tmp#4##0:wybe.int) @int:nn:nn
    wybe.string.print<0>("original x y z:":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #43 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#38##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#38##0:wybe.phantom, ?tmp#39##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#39##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #44 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#41##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#41##0:wybe.phantom, ?tmp#42##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#42##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#1##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #45 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#44##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#44##0:wybe.phantom, ?tmp#45##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#45##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #46 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#47##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#47##0:wybe.phantom, ?tmp#48##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#48##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #47 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#50##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#50##0:wybe.phantom, ?tmp#51##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#51##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #48 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#53##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#53##0:wybe.phantom, ?tmp#54##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#54##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("tests without alias":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #49 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#56##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#56##0:wybe.phantom, ?tmp#57##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#57##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign c {impure} malloc_count(?mc1##2:wybe.int) @memory_management:nn:nn
    int_list_test.test_int_list<0>[9e35cb823b](~tmp#0##0:int_list.int_list, ~tmp#1##0:int_list.int_list, ~tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #24 @int_list_test:nn:nn
    foreign c {impure} malloc_count(?mc2##2:wybe.int) @memory_management:nn:nn
    foreign llvm sub(~mc2##2:wybe.int, ~mc1##2:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
    wybe.string.print<0>("--------------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #50 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#61##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#61##0:wybe.phantom, ?tmp#62##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#62##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>(" ** malloc count of building lists: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #28 @int_list_test:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#64##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#3##0:wybe.int, ~tmp#64##0:wybe.phantom, ?tmp#65##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#65##0:wybe.phantom, ?tmp#66##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#66##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>(" ** malloc count of test(aliased): ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #30 @int_list_test:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#68##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#4##0:wybe.int, ~tmp#68##0:wybe.phantom, ?tmp#69##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#69##0:wybe.phantom, ?tmp#70##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#70##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>(" ** malloc count of test(non-aliased): ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #32 @int_list_test:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#72##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#5##0:wybe.int, ~tmp#72##0:wybe.phantom, ?tmp#73##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#73##0:wybe.phantom, ?tmp#74##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#74##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


test_int_list > (2 calls)
0: int_list_test.test_int_list<0>[9e35cb823b]
test_int_list(x##0:int_list.int_list, y##0:int_list.int_list, z##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 1,InterestingUnaliased 2]
  MultiSpeczDepInfo: [(2,(int_list.append<0>,fromList [NonAliasedParamCond 0 [1]])),(7,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(8,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(11,(int_list.insert<0>,fromList [NonAliasedParamCond 0 []])),(12,(int_list.pop<0>,fromList [NonAliasedParamCond 0 []])),(13,(int_list.remove<0>,fromList [NonAliasedParamCond 0 []])),(16,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(19,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(20,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [2]]))]
    int_list.reverse_helper<0>(~x##0:int_list.int_list, 0:int_list.int_list, ?x##1:int_list.int_list) #19 @int_list:nn:nn
    int_list.reverse_helper<0>(~z##0:int_list.int_list, 0:int_list.int_list, ?z##1:int_list.int_list) #20 @int_list:nn:nn
    int_list.append<0>(~y##0:int_list.int_list, 99:wybe.int, ?tmp#0##0:int_list.int_list) #2 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #21 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(x##1:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #22 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#13##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #23 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(z##1:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #24 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#18##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#19##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.extend<0>[410bae77d3](~x##1:int_list.int_list, ~tmp#0##0:int_list.int_list, outByReference tmp#1##0:int_list.int_list) #7 @int_list_test:nn:nn
    int_list.extend<0>[410bae77d3](~tmp#1##0:int_list.int_list, ~z##1:int_list.int_list, outByReference tmp#2##0:int_list.int_list) #8 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #25 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #26 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#24##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.insert<0>[410bae77d3](~tmp#2##0:int_list.int_list, 4:wybe.int, 78:wybe.int, outByReference tmp#3##0:int_list.int_list) #11 @int_list_test:nn:nn
    int_list.pop<0>[410bae77d3](~tmp#3##0:int_list.int_list, 20:wybe.int, outByReference tmp#4##0:int_list.int_list) #12 @int_list_test:nn:nn
    int_list.remove<0>[410bae77d3](~tmp#4##0:int_list.int_list, 2:wybe.int, outByReference tmp#5##0:int_list.int_list) #13 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #27 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#28##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#5##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #28 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#31##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.sort<0>[410bae77d3](~tmp#5##0:int_list.int_list, ?l##5:int_list.int_list) #16 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #29 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#33##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(~l##5:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #30 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#36##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#36##0:wybe.phantom, ?tmp#37##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#37##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
 [9e35cb823b] [NonAliasedParam 0,NonAliasedParam 1,NonAliasedParam 2] :
    int_list.reverse_helper<0>[410bae77d3](~x##0:int_list.int_list, 0:int_list.int_list, ?x##1:int_list.int_list) #19 @int_list:nn:nn
    int_list.reverse_helper<0>[410bae77d3](~z##0:int_list.int_list, 0:int_list.int_list, ?z##1:int_list.int_list) #20 @int_list:nn:nn
    int_list.append<0>[410bae77d3](~y##0:int_list.int_list, 99:wybe.int, ?tmp#0##0:int_list.int_list) #2 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #21 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(x##1:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #22 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#13##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#0##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #23 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(z##1:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #24 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#18##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#19##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.extend<0>[410bae77d3](~x##1:int_list.int_list, ~tmp#0##0:int_list.int_list, outByReference tmp#1##0:int_list.int_list) #7 @int_list_test:nn:nn
    int_list.extend<0>[410bae77d3](~tmp#1##0:int_list.int_list, ~z##1:int_list.int_list, outByReference tmp#2##0:int_list.int_list) #8 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #25 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#2##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #26 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#24##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.insert<0>[410bae77d3](~tmp#2##0:int_list.int_list, 4:wybe.int, 78:wybe.int, outByReference tmp#3##0:int_list.int_list) #11 @int_list_test:nn:nn
    int_list.pop<0>[410bae77d3](~tmp#3##0:int_list.int_list, 20:wybe.int, outByReference tmp#4##0:int_list.int_list) #12 @int_list_test:nn:nn
    int_list.remove<0>[410bae77d3](~tmp#4##0:int_list.int_list, 2:wybe.int, outByReference tmp#5##0:int_list.int_list) #13 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #27 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#28##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(tmp#5##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #28 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#31##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.sort<0>[410bae77d3](~tmp#5##0:int_list.int_list, ?l##5:int_list.int_list) #16 @int_list_test:nn:nn
    wybe.string.print<0>("-":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #29 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#33##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    int_list.print<0>(~l##5:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #30 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#36##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#36##0:wybe.phantom, ?tmp#37##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#37##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'int_list_test'


 


@int_list_test.18 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @int_list_test.17 to i64) }


@int_list_test.2 =    constant {i64, i64} { i64 6, i64 ptrtoint ([?? x i8]* @int_list_test.1 to i64) }


@int_list_test.8 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @int_list_test.7 to i64) }


@int_list_test.6 =    constant {i64, i64} { i64 16, i64 ptrtoint ([?? x i8]* @int_list_test.5 to i64) }


@int_list_test.10 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @int_list_test.9 to i64) }


@int_list_test.4 =    constant {i64, i64} { i64 20, i64 ptrtoint ([?? x i8]* @int_list_test.3 to i64) }


@int_list_test.14 =    constant {i64, i64} { i64 35, i64 ptrtoint ([?? x i8]* @int_list_test.13 to i64) }


@int_list_test.12 =    constant {i64, i64} { i64 36, i64 ptrtoint ([?? x i8]* @int_list_test.11 to i64) }


@int_list_test.16 =    constant {i64, i64} { i64 39, i64 ptrtoint ([?? x i8]* @int_list_test.15 to i64) }


@int_list_test.11 =    constant [?? x i8] c" ** malloc count of building lists: \00"


@int_list_test.13 =    constant [?? x i8] c" ** malloc count of test(aliased): \00"


@int_list_test.15 =    constant [?? x i8] c" ** malloc count of test(non-aliased): \00"


@int_list_test.17 =    constant [?? x i8] c"-\00"


@int_list_test.3 =    constant [?? x i8] c"--------------------\00"


@int_list_test.7 =    constant [?? x i8] c"original x y z:\00"


@int_list_test.5 =    constant [?? x i8] c"tests with alias\00"


@int_list_test.9 =    constant [?? x i8] c"tests without alias\00"


@int_list_test.1 =    constant [?? x i8] c"x y z:\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"int_list.print<0>"(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external fastcc  i64 @"int_list.sort<0>[410bae77d3]"(i64)    


declare external fastcc  void @"int_list.remove<0>[410bae77d3]"(i64, i64, i64*)    


declare external fastcc  void @"int_list.pop<0>[410bae77d3]"(i64, i64, i64*)    


declare external fastcc  void @"int_list.insert<0>[410bae77d3]"(i64, i64, i64, i64*)    


declare external fastcc  void @"int_list.extend<0>[410bae77d3]"(i64, i64, i64*)    


declare external fastcc  i64 @"int_list.append<0>[410bae77d3]"(i64, i64)    


declare external fastcc  i64 @"int_list.reverse_helper<0>[410bae77d3]"(i64, i64)    


declare external fastcc  i64 @"int_list.append<0>"(i64, i64)    


declare external fastcc  i64 @"int_list.reverse_helper<0>"(i64, i64)    


declare external ccc  void @print_int(i64)    


declare external ccc  i64 @malloc_count()    


declare external fastcc  i64 @"int_list.gen#2<0>[410bae77d3]"(i64, i64, i64, i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"int_list_test.<0>"()    {
entry:
  %"1#mc1##0" = tail call ccc  i64  @malloc_count()  
  %"1#tmp#0##0" = tail call fastcc  i64  @"int_list.gen#2<0>[410bae77d3]"(i64  0, i64  1, i64  1, i64  10, i64  0)  
  %"1#tmp#1##0" = tail call fastcc  i64  @"int_list.gen#2<0>[410bae77d3]"(i64  0, i64  2, i64  2, i64  20, i64  0)  
  %"1#tmp#2##0" = tail call fastcc  i64  @"int_list.gen#2<0>[410bae77d3]"(i64  0, i64  3, i64  3, i64  30, i64  0)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.2, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#tmp#0##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#tmp#1##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#tmp#2##0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1#mc2##0" = tail call ccc  i64  @malloc_count()  
  %"1#tmp#3##0" = sub   i64 %"1#mc2##0", %"1#mc1##0" 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.4, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.6, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %"1#mc1##1" = tail call ccc  i64  @malloc_count()  
  tail call fastcc  void  @"int_list_test.test_int_list<0>"(i64  %"1#tmp#0##0", i64  %"1#tmp#1##0", i64  %"1#tmp#2##0")  
  %"1#mc2##1" = tail call ccc  i64  @malloc_count()  
  %"1#tmp#4##0" = sub   i64 %"1#mc2##1", %"1#mc1##1" 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.8, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#tmp#0##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#tmp#1##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#tmp#2##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.4, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.4, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.10, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %"1#mc1##2" = tail call ccc  i64  @malloc_count()  
  tail call fastcc  void  @"int_list_test.test_int_list<0>[9e35cb823b]"(i64  %"1#tmp#0##0", i64  %"1#tmp#1##0", i64  %"1#tmp#2##0")  
  %"1#mc2##2" = tail call ccc  i64  @malloc_count()  
  %"1#tmp#5##0" = sub   i64 %"1#mc2##2", %"1#mc1##2" 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.4, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.12, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %"1#tmp#3##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.14, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %"1#tmp#4##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.16, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %"1#tmp#5##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"int_list_test.test_int_list<0>"(i64  %"x##0", i64  %"y##0", i64  %"z##0")    {
entry:
  %"1#x##1" = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"x##0", i64  0)  
  %"1#z##1" = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"z##0", i64  0)  
  %"1#tmp#0##0" = tail call fastcc  i64  @"int_list.append<0>"(i64  %"y##0", i64  99)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.18, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#x##1")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#tmp#0##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#z##1")  
  tail call ccc  void  @putchar(i8  10)  
  %19 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %"1#x##1", i64  %"1#tmp#0##0", i64*  %19)  
  %20 = load  i64, i64* %19 
  %21 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %20, i64  %"1#z##1", i64*  %21)  
  %22 = load  i64, i64* %21 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.18, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %22)  
  tail call ccc  void  @putchar(i8  10)  
  %23 = alloca i64 
   call fastcc  void  @"int_list.insert<0>[410bae77d3]"(i64  %22, i64  4, i64  78, i64*  %23)  
  %24 = load  i64, i64* %23 
  %25 = alloca i64 
   call fastcc  void  @"int_list.pop<0>[410bae77d3]"(i64  %24, i64  20, i64*  %25)  
  %26 = load  i64, i64* %25 
  %27 = alloca i64 
   call fastcc  void  @"int_list.remove<0>[410bae77d3]"(i64  %26, i64  2, i64*  %27)  
  %28 = load  i64, i64* %27 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.18, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %28)  
  tail call ccc  void  @putchar(i8  10)  
  %"1#l##5" = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %28)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.18, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#l##5")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"int_list_test.test_int_list<0>[9e35cb823b]"(i64  %"x##0", i64  %"y##0", i64  %"z##0")    {
entry:
  %"1#x##1" = tail call fastcc  i64  @"int_list.reverse_helper<0>[410bae77d3]"(i64  %"x##0", i64  0)  
  %"1#z##1" = tail call fastcc  i64  @"int_list.reverse_helper<0>[410bae77d3]"(i64  %"z##0", i64  0)  
  %"1#tmp#0##0" = tail call fastcc  i64  @"int_list.append<0>[410bae77d3]"(i64  %"y##0", i64  99)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.18, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#x##1")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#tmp#0##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#z##1")  
  tail call ccc  void  @putchar(i8  10)  
  %29 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %"1#x##1", i64  %"1#tmp#0##0", i64*  %29)  
  %30 = load  i64, i64* %29 
  %31 = alloca i64 
   call fastcc  void  @"int_list.extend<0>[410bae77d3]"(i64  %30, i64  %"1#z##1", i64*  %31)  
  %32 = load  i64, i64* %31 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.18, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %32)  
  tail call ccc  void  @putchar(i8  10)  
  %33 = alloca i64 
   call fastcc  void  @"int_list.insert<0>[410bae77d3]"(i64  %32, i64  4, i64  78, i64*  %33)  
  %34 = load  i64, i64* %33 
  %35 = alloca i64 
   call fastcc  void  @"int_list.pop<0>[410bae77d3]"(i64  %34, i64  20, i64*  %35)  
  %36 = load  i64, i64* %35 
  %37 = alloca i64 
   call fastcc  void  @"int_list.remove<0>[410bae77d3]"(i64  %36, i64  2, i64*  %37)  
  %38 = load  i64, i64* %37 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.18, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %38)  
  tail call ccc  void  @putchar(i8  10)  
  %"1#l##5" = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %38)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @int_list_test.18, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1#l##5")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

----------------------------------------------------------------------



----------------------------------------------------------------------
- build & execute without multiple specialization
----------------------------------------------------------------------
x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
tests with alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
original x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
--------------------
tests without alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
--------------------
 ** malloc count of building lists: 54
 ** malloc count of test(aliased): 307
 ** malloc count of test(non-aliased): 307

----------------------------------------------------------------------


----------------------------------------------------------------------
- build & execute with multiple specialization
----------------------------------------------------------------------
x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
tests with alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
original x y z:
1 2 3 4 5 6 7 8 9 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
--------------------
--------------------
tests without alias
-
9 8 7 6 5 4 3 2 1 
2 4 6 8 10 12 14 16 18 99 
27 24 21 18 15 12 9 6 3 
-
9 8 7 6 5 4 3 2 1 2 4 6 8 10 12 14 16 18 99 27 24 21 18 15 12 9 6 3 
-
9 8 7 6 78 5 4 3 1 2 4 6 8 10 12 14 16 18 99 24 21 18 15 12 9 6 3 
-
1 2 3 3 4 4 5 6 6 6 7 8 8 9 9 10 12 12 14 15 16 18 18 21 24 78 99 
--------------------
 ** malloc count of building lists: 27
 ** malloc count of test(aliased): 99
 ** malloc count of test(non-aliased): 72

----------------------------------------------------------------------


----------------------------------------------------------------------
- final dump (with multiple specialization)
----------------------------------------------------------------------
======================================================================
AFTER BUILDING MAIN:
 Module 
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    from int_list_test use 
                    use wybe
                    from wybe.io use 
                    from wybe.memory_management use 
  resources       : 
  procs           : 

*main* > {inline} (0 calls)
0: ([argc#0:wybe.int], [argv#0:wybe.int], ?exit_code#0:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c {semipure} gc_init() @memory_management:12:1
    foreign llvm move(0:wybe.int, ?#exit_code#0:wybe.int) @command_line:18:5
    int_list_test.<0>(0:wybe.phantom, ?#io#2:wybe.phantom) #3
    foreign c {semipure,terminal} exit(0:wybe.int)

LLVM code       : None

--------------------------------------------------
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    argv: command_line.argv
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:4:5)] @command_line:4:5
                    argv: fromList [(command_line.argv,wybe.int @command_line:12:5)] @command_line:12:5
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:18:30 @command_line:18:5)] @command_line:18:5
  procs           : 

*main* > public {inline} (0 calls)
0: (?exit_code#1:wybe.int, io#0:wybe.phantom, [?io#0:wybe.phantom]):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:wybe.int, ?exit_code#1:wybe.int) @command_line:18:5


set_exit_code > public {inline} (0 calls)
0: set_exit_code(code#0:wybe.int, [exit_code#0:wybe.int], ?exit_code#1:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(~code#0:wybe.int, ?exit_code#1:wybe.int) @command_line:24:5

  LLVM code       :

; ModuleID = 'command_line'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"command_line.<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i64 @"command_line.set_exit_code<0>"(i64  %"code#0")    {
entry:
  ret i64 %"code#0" 
}
--------------------------------------------------
 Module int_list
  representation  : (not a type)
  public submods  : int_list -> int_list.int_list
  public resources: 
  public procs    : int_list.append<0>
                    int_list.count<0>
                    int_list.extend<0>
                    int_list.index<0>
                    int_list.insert<0>
                    int_list.pop<0>
                    int_list.print<0>
                    int_list.println<0>
                    int_list.range<0>
                    int_list.remove<0>
                    int_list.reverse<0>
                    int_list.sort<0>
                    int_list.int_list./=<0>
                    int_list.int_list.=<0>
                    int_list.int_list.[]<0>
                    int_list.int_list.[|]<0>
                    int_list.int_list.[|]<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
  imports         : public use int_list.int_list
                    use wybe
  resources       : 
  submodules      : int_list.int_list
  procs           : 

append > public (0 calls)
0: append(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:int_list.int_list)
    foreign lpvm mutate(~tmp$5#0:int_list.int_list, ?tmp$6#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:int_list.int_list, ?tmp$7#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:int_list.int_list)
    int_list.extend<0>(~lst#0:int_list.int_list, ~tmp$7#0:int_list.int_list, ?$#0:int_list.int_list) #2 @int_list:35:49


count > public (3 calls)
0: count(lst#0:int_list.int_list, x#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$7#0:wybe.bool)
    case ~tmp$7#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?$#0:wybe.int) @int_list:85:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.count<0>(~t#0:int_list.int_list, x#0:wybe.int, ?tmp$2#0:wybe.int) #1 @int_list:88:9
        foreign llvm icmp_eq(~h#0:wybe.int, ~x#0:wybe.int, ?tmp$4#0:wybe.bool) @int:24:28
        case ~tmp$4#0:wybe.bool of
        0:
            foreign llvm move(~tmp$2#0:wybe.int, ?$#0:wybe.int) @int:8:24

        1:
            foreign llvm add(~tmp$2#0:wybe.int, 1:wybe.int, ?$#0:wybe.int) @int:8:24




extend > public (3 calls)
0: extend(lst1#0:int_list.int_list, lst2#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst2#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(1,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst1#0:int_list.int_list, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~lst2#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:39:5

    1:
        foreign lpvm access(lst1#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst1#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.extend<0>(~t#0:int_list.int_list, ~lst2#0:int_list.int_list, ?tmp$2#0:int_list.int_list) #1 @int_list:40:35
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:int_list.int_list)
        foreign lpvm mutate(~tmp$8#0:int_list.int_list, ?tmp$9#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$9#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:int_list.int_list)



gen$1 > {inline} (2 calls)
0: gen$1([h#0:wybe.int], [lst#0:int_list.int_list], [t#0:int_list.int_list], tmp$2#0:wybe.int, tmp$3#0:wybe.int, [x#0:wybe.int], ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm add(~tmp$2#0:wybe.int, ~tmp$3#0:wybe.int, ?$#0:wybe.int) @int:8:24


gen$2 > (2 calls)
0: gen$2(result#0:int_list.int_list, start#0:wybe.int, step#0:wybe.int, stop#0:wybe.int, tmp$0#0:int_list.int_list, ?result#1:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(3,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.gen$2<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_slt(start#0:wybe.int, stop#0:wybe.int, ?tmp$3#0:wybe.bool) @int:20:27
    case ~tmp$3#0:wybe.bool of
    0:
        int_list.reverse_helper<0>(~%result#0:int_list.int_list, 0:int_list.int_list, ?%result#1:int_list.int_list) #3 @int_list:140:42

    1:
        foreign lpvm alloc(16:wybe.int, ?tmp$12#0:int_list.int_list)
        foreign lpvm mutate(~tmp$12#0:int_list.int_list, ?tmp$13#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start#0:wybe.int)
        foreign lpvm mutate(~tmp$13#0:int_list.int_list, ?tmp$14#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result#0:int_list.int_list)
        foreign llvm add(~start#0:wybe.int, step#0:wybe.int, ?tmp$15#0:wybe.int) @int:8:24
        int_list.gen$2<0>(~tmp$14#0:int_list.int_list, ~tmp$15#0:wybe.int, ~step#0:wybe.int, ~stop#0:wybe.int, ~tmp$0#0:int_list.int_list, ?result#1:int_list.int_list) #4 @int_list:26:5



gen$3 > {inline} (1 calls)
0: gen$3(result#0:int_list.int_list, start#0:wybe.int, step#0:wybe.int, stop#0:wybe.int, tmp$0#0:int_list.int_list, ?result#2:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:int_list.int_list)
    foreign lpvm mutate(~tmp$5#0:int_list.int_list, ?tmp$6#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start#0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:int_list.int_list, ?tmp$7#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result#0:int_list.int_list)
    foreign llvm add(~start#0:wybe.int, step#0:wybe.int, ?tmp$2#0:wybe.int) @int:8:24
    int_list.gen$2<0>(~tmp$7#0:int_list.int_list, ~tmp$2#0:wybe.int, ~step#0:wybe.int, ~stop#0:wybe.int, ~tmp$0#0:int_list.int_list, ?result#2:int_list.int_list) #2 @int_list:26:5


greater > (3 calls)
0: greater(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:127:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp_sge(h#0:wybe.int, v#0:wybe.int, ?tmp$6#0:wybe.bool) @int:23:28
        case ~tmp$6#0:wybe.bool of
        0:
            int_list.greater<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?$#0:int_list.int_list) #4 @int_list:134:13

        1:
            int_list.greater<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:132:18
            foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)




index > public {inline} (0 calls)
0: index(lst#0:int_list.int_list, x#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.index_helper<0>(~lst#0:int_list.int_list, 0:wybe.int, ~x#0:wybe.int, ?$#0:wybe.int) #0 @int_list:94:42


index_helper > (2 calls)
0: index_helper(lst#0:int_list.int_list, idx#0:wybe.int, x#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(-1:wybe.int, ?$#0:wybe.int) @int_list:96:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp_eq(~h#0:wybe.int, x#0:wybe.int, ?tmp$5#0:wybe.bool) @int:24:28
        case ~tmp$5#0:wybe.bool of
        0:
            foreign llvm add(~idx#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.int) @int:8:24
            int_list.index_helper<0>(~t#0:int_list.int_list, ~tmp$3#0:wybe.int, ~x#0:wybe.int, ?$#0:wybe.int) #3 @int_list:103:13

        1:
            foreign llvm move(~idx#0:wybe.int, ?$#0:wybe.int) @int_list:96:1




insert > public (2 calls)
0: insert(lst#0:int_list.int_list, idx#0:wybe.int, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(4,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]])),(7,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_eq(idx#0:wybe.int, 0:wybe.int, ?tmp$9#0:wybe.bool) @int:24:28
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$13#0:wybe.bool)
        case ~tmp$13#0:wybe.bool of
        0:
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$7#0:wybe.int) @int:11:24
            int_list.insert<0>(~lst#0:int_list.int_list, ~tmp$7#0:wybe.int, ~v#0:wybe.int, ?$#0:int_list.int_list) #7 @int_list:54:13

        1:
            foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
            foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$5#0:wybe.int) @int:11:24
            int_list.insert<0>(~t#0:int_list.int_list, ~tmp$5#0:wybe.int, ~v#0:wybe.int, ?tmp$4#0:int_list.int_list) #4 @int_list:51:18
            foreign lpvm alloc(16:wybe.int, ?tmp$18#0:int_list.int_list)
            foreign lpvm mutate(~tmp$18#0:int_list.int_list, ?tmp$19#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$19#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$4#0:int_list.int_list)


    1:
        foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
        foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
        foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lst#0:int_list.int_list)



lesser > (3 calls)
0: lesser(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:116:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp_slt(h#0:wybe.int, v#0:wybe.int, ?tmp$6#0:wybe.bool) @int:20:27
        case ~tmp$6#0:wybe.bool of
        0:
            int_list.lesser<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?$#0:int_list.int_list) #4 @int_list:123:13

        1:
            int_list.lesser<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:121:18
            foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)




pop > public (1 calls)
0: pop(lst#0:int_list.int_list, idx#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(3,(int_list.pop<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:71:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp_eq(idx#0:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.bool) @int:24:28
        case ~tmp$6#0:wybe.bool of
        0:
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$4#0:wybe.int) @int:11:24
            int_list.pop<0>(~t#0:int_list.int_list, ~tmp$4#0:wybe.int, ?tmp$3#0:int_list.int_list) #3 @int_list:78:18
            foreign lpvm alloc(16:wybe.int, ?tmp$16#0:int_list.int_list)
            foreign lpvm mutate(~tmp$16#0:int_list.int_list, ?tmp$17#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$17#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)

        1:
            foreign llvm move(~t#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:71:5




print > public (2 calls)
0: print(x#0:int_list.int_list, io#0:wybe.phantom, ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(x#0:int_list.int_list, 0:wybe.int, ?tmp$2#0:wybe.bool)
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#3:wybe.phantom)

    1:
        foreign lpvm access(x#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~x#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign c print_int(~h#0:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:13:32
        foreign c putchar(' ':wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @io:26:33
        int_list.print<0>(~t#0:int_list.int_list, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #3 @int_list:11:10



println > public {inline} (0 calls)
0: println(x#0:int_list.int_list, io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.print<0>(~x#0:int_list.int_list, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #0 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @io:11:22


range > public {inline} (0 calls)
0: range(start#0:wybe.int, stop#0:wybe.int, step#0:wybe.int, ?result#1:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.gen$2<0>(0:int_list.int_list, ~start#0:wybe.int, ~step#0:wybe.int, ~stop#0:wybe.int, 0:int_list.int_list, ?result#1:int_list.int_list) #1 @int_list:26:5


remove > public (1 calls)
0: remove(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.remove<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:58:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp_eq(h#0:wybe.int, v#0:wybe.int, ?tmp$5#0:wybe.bool) @int:24:28
        case ~tmp$5#0:wybe.bool of
        0:
            int_list.remove<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:65:18
            foreign lpvm alloc(16:wybe.int, ?tmp$13#0:int_list.int_list)
            foreign lpvm mutate(~tmp$13#0:int_list.int_list, ?tmp$14#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)

        1:
            foreign llvm move(~t#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:58:5




reverse > public {inline} (1 calls)
0: reverse(lst#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.reverse_helper<0>(~lst#0:int_list.int_list, 0:int_list.int_list, ?$#0:int_list.int_list) #1 @int_list:140:42


reverse_helper > (2 calls)
0: reverse_helper(lst#0:int_list.int_list, acc#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: [($#0,acc#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~acc#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:142:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:int_list.int_list)
        foreign lpvm mutate(~tmp$8#0:int_list.int_list, ?tmp$9#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$9#0:int_list.int_list, ?tmp$10#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~acc#0:int_list.int_list)
        int_list.reverse_helper<0>(~t#0:int_list.int_list, ~tmp$10#0:int_list.int_list, ?$#0:int_list.int_list) #2 @int_list:143:29



sort > public (2 calls)
0: sort(lst#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(3,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(6,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$10#0:wybe.bool)
    case ~tmp$10#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:109:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.lesser<0>(t#0:int_list.int_list, h#0:wybe.int, ?tmp$3#0:int_list.int_list) #1 @int_list:112:21
        int_list.sort<0>[410bae77d3](~tmp$3#0:int_list.int_list, ?tmp$2#0:int_list.int_list) #2 @int_list:112:16
        int_list.greater<0>(~t#0:int_list.int_list, h#0:wybe.int, ?tmp$6#0:int_list.int_list) #3 @int_list:112:46
        int_list.sort<0>[410bae77d3](~tmp$6#0:int_list.int_list, ?tmp$5#0:int_list.int_list) #4 @int_list:112:41
        foreign lpvm alloc(16:wybe.int, ?tmp$13#0:int_list.int_list)
        foreign lpvm mutate(~tmp$13#0:int_list.int_list, ?tmp$14#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$5#0:int_list.int_list)
        int_list.extend<0>[410bae77d3](~tmp$2#0:int_list.int_list, ~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list) #6 @int_list:112:9


LLVM code       : None

--------------------------------------------------
 Module int_list.int_list
  representation  : address
  public submods  : 
  public resources: 
  public procs    : int_list.int_list./=<0>
                    int_list.int_list.=<0>
                    int_list.int_list.[]<0>
                    int_list.int_list.[|]<0>
                    int_list.int_list.[|]<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
  imports         : use int_list
                    use wybe
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:int_list.int_list, $right#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.int_list.=<0>(~$left#0:int_list.int_list, ~$right#0:int_list.int_list, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (2 calls)
0: =($left#0:int_list.int_list, $right#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($left#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp_eq(~$left#0:int_list.int_list, ~$right#0:int_list.int_list, ?$$#0:!wybe.bool)

    1:
        foreign lpvm access($left#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$head#0:wybe.int)
        foreign lpvm access(~$left#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$tail#0:int_list.int_list)
        foreign llvm icmp_ne($right#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
        case ~tmp$9#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access($right#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$head#0:wybe.int)
            foreign lpvm access(~$right#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$tail#0:int_list.int_list)
            foreign llvm icmp_eq(~$left$head#0:wybe.int, ~$right$head#0:wybe.int, ?tmp$4#0:wybe.bool) @int:24:28
            case ~tmp$4#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                int_list.int_list.=<0>(~$left$tail#0:int_list.int_list, ~$right$tail#0:int_list.int_list, ?$$#0:wybe.bool) #3





[] > public {inline} (0 calls)
0: [](?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list)


[|] > public {inline} (0 calls)
0: [|](head#0:wybe.int, tail#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:int_list.int_list)
    foreign lpvm mutate(~%$rec#0:int_list.int_list, ?%$rec#1:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:int_list.int_list, ?%$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail#0:int_list.int_list)
[|] > public {inline} (12 calls)
1: [|](?head#0:wybe.int, ?tail#0:int_list.int_list, $#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head#0:wybe.int)
        foreign llvm move(undef:int_list.int_list, ?tail#0:int_list.int_list)

    1:
        foreign lpvm access($#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head#0:wybe.int)
        foreign lpvm access(~$#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail#0:int_list.int_list)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



head > public {inline} (0 calls)
0: head($rec#0:int_list.int_list, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

    1:
        foreign lpvm access(~$rec#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

head > public {inline} (0 calls)
1: head($rec#0:int_list.int_list, ?$rec#1:int_list.int_list, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:int_list.int_list, ?$rec#1:int_list.int_list)

    1:
        foreign lpvm mutate(~%$rec#0:int_list.int_list, ?%$rec#1:int_list.int_list, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



tail > public {inline} (0 calls)
0: tail($rec#0:int_list.int_list, ?$#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:int_list.int_list, ?$#0:int_list.int_list)

    1:
        foreign lpvm access(~$rec#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:int_list.int_list)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

tail > public {inline} (0 calls)
1: tail($rec#0:int_list.int_list, ?$rec#1:int_list.int_list, $field#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:int_list.int_list, ?$rec#1:int_list.int_list)

    1:
        foreign lpvm {noalias} mutate(~%$rec#0:int_list.int_list, ?%$rec#1:int_list.int_list, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:int_list.int_list)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


LLVM code       : None

--------------------------------------------------
 Module int_list_test
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : int_list_test.<0>
  imports         : use command_line
                    use int_list
                    use wybe
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (io#0:wybe.phantom, ?io#22:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(24,(int_list_test.test_int_list<0>,fromList [NonAliasedParamCond 0 [],NonAliasedParamCond 1 [],NonAliasedParamCond 2 []])),(34,(int_list.gen$2<0>,fromList [NonAliasedParamCond 0 []])),(35,(int_list.gen$2<0>,fromList [NonAliasedParamCond 0 []])),(36,(int_list.gen$2<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign c {impure} malloc_count(?mc1#0:wybe.int) @memory_management:9:5
    int_list.gen$2<0>[410bae77d3](0:int_list.int_list, 1:wybe.int, 1:wybe.int, 10:wybe.int, 0:int_list.int_list, ?tmp$0#0:int_list.int_list) #34 @int_list:26:5
    int_list.gen$2<0>[410bae77d3](0:int_list.int_list, 2:wybe.int, 2:wybe.int, 20:wybe.int, 0:int_list.int_list, ?tmp$1#0:int_list.int_list) #35 @int_list:26:5
    int_list.gen$2<0>[410bae77d3](0:int_list.int_list, 3:wybe.int, 3:wybe.int, 30:wybe.int, 0:int_list.int_list, ?tmp$2#0:int_list.int_list) #36 @int_list:26:5
    foreign c print_string("x y z:":wybe.string, ~#io#0:wybe.phantom, ?tmp$17#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#io#1:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#1:wybe.phantom, ?tmp$20#0:wybe.phantom) #37 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$20#0:wybe.phantom, ?#io#2:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$1#0:int_list.int_list, ~#io#2:wybe.phantom, ?tmp$23#0:wybe.phantom) #38 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$23#0:wybe.phantom, ?#io#3:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#3:wybe.phantom, ?tmp$26#0:wybe.phantom) #39 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$26#0:wybe.phantom, ?#io#4:wybe.phantom) @io:11:22
    foreign c {impure} malloc_count(?mc2#0:wybe.int) @memory_management:9:5
    foreign llvm sub(~mc2#0:wybe.int, ~mc1#0:wybe.int, ?tmp$3#0:wybe.int) @int:11:24
    foreign c print_string("--------------------":wybe.string, ~#io#4:wybe.phantom, ?tmp$31#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$31#0:wybe.phantom, ?#io#5:wybe.phantom) @io:11:22
    foreign c print_string("tests with alias":wybe.string, ~#io#5:wybe.phantom, ?tmp$34#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$34#0:wybe.phantom, ?#io#6:wybe.phantom) @io:11:22
    foreign c {impure} malloc_count(?mc1#1:wybe.int) @memory_management:9:5
    int_list_test.test_int_list<0>(tmp$0#0:int_list.int_list, tmp$1#0:int_list.int_list, tmp$2#0:int_list.int_list, ~#io#6:wybe.phantom, ?#io#7:wybe.phantom) #13 @int_list_test:47:2
    foreign c {impure} malloc_count(?mc2#1:wybe.int) @memory_management:9:5
    foreign llvm sub(~mc2#1:wybe.int, ~mc1#1:wybe.int, ?tmp$4#0:wybe.int) @int:11:24
    foreign c print_string("original x y z:":wybe.string, ~#io#7:wybe.phantom, ?tmp$39#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$39#0:wybe.phantom, ?#io#8:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#8:wybe.phantom, ?tmp$42#0:wybe.phantom) #40 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$42#0:wybe.phantom, ?#io#9:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$1#0:int_list.int_list, ~#io#9:wybe.phantom, ?tmp$45#0:wybe.phantom) #41 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$45#0:wybe.phantom, ?#io#10:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#10:wybe.phantom, ?tmp$48#0:wybe.phantom) #42 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$48#0:wybe.phantom, ?#io#11:wybe.phantom) @io:11:22
    foreign c print_string("--------------------":wybe.string, ~#io#11:wybe.phantom, ?tmp$51#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$51#0:wybe.phantom, ?#io#12:wybe.phantom) @io:11:22
    foreign c print_string("--------------------":wybe.string, ~#io#12:wybe.phantom, ?tmp$54#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$54#0:wybe.phantom, ?#io#13:wybe.phantom) @io:11:22
    foreign c print_string("tests without alias":wybe.string, ~#io#13:wybe.phantom, ?tmp$57#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$57#0:wybe.phantom, ?#io#14:wybe.phantom) @io:11:22
    foreign c {impure} malloc_count(?mc1#2:wybe.int) @memory_management:9:5
    int_list_test.test_int_list<0>[9e35cb823b](~tmp$0#0:int_list.int_list, ~tmp$1#0:int_list.int_list, ~tmp$2#0:int_list.int_list, ~#io#14:wybe.phantom, ?#io#15:wybe.phantom) #24 @int_list_test:60:2
    foreign c {impure} malloc_count(?mc2#2:wybe.int) @memory_management:9:5
    foreign llvm sub(~mc2#2:wybe.int, ~mc1#2:wybe.int, ?tmp$5#0:wybe.int) @int:11:24
    foreign c print_string("--------------------":wybe.string, ~#io#15:wybe.phantom, ?tmp$62#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$62#0:wybe.phantom, ?#io#16:wybe.phantom) @io:11:22
    foreign c print_string(" ** malloc count of building lists: ":wybe.string, ~#io#16:wybe.phantom, ?#io#17:wybe.phantom) @io:30:35
    foreign c print_int(~tmp$3#0:wybe.int, ~#io#17:wybe.phantom, ?tmp$67#0:wybe.phantom) @io:13:32
    foreign c putchar('\n':wybe.char, ~tmp$67#0:wybe.phantom, ?#io#18:wybe.phantom) @io:11:22
    foreign c print_string(" ** malloc count of test(aliased): ":wybe.string, ~#io#18:wybe.phantom, ?#io#19:wybe.phantom) @io:30:35
    foreign c print_int(~tmp$4#0:wybe.int, ~#io#19:wybe.phantom, ?tmp$72#0:wybe.phantom) @io:13:32
    foreign c putchar('\n':wybe.char, ~tmp$72#0:wybe.phantom, ?#io#20:wybe.phantom) @io:11:22
    foreign c print_string(" ** malloc count of test(non-aliased): ":wybe.string, ~#io#20:wybe.phantom, ?#io#21:wybe.phantom) @io:30:35
    foreign c print_int(~tmp$5#0:wybe.int, ~#io#21:wybe.phantom, ?tmp$77#0:wybe.phantom) @io:13:32
    foreign c putchar('\n':wybe.char, ~tmp$77#0:wybe.phantom, ?#io#22:wybe.phantom) @io:11:22


test_int_list > (2 calls)
0: test_int_list(x#0:int_list.int_list, y#0:int_list.int_list, z#0:int_list.int_list, io#0:wybe.phantom, ?io#10:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 1,InterestingUnaliased 2]
 MultiSpeczDepInfo: [(2,(int_list.append<0>,fromList [NonAliasedParamCond 0 [1]])),(7,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(8,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(11,(int_list.insert<0>,fromList [NonAliasedParamCond 0 []])),(12,(int_list.pop<0>,fromList [NonAliasedParamCond 0 []])),(13,(int_list.remove<0>,fromList [NonAliasedParamCond 0 []])),(16,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(19,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(20,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [2]]))]
    int_list.reverse_helper<0>(~%x#0:int_list.int_list, 0:int_list.int_list, ?%x#1:int_list.int_list) #19 @int_list:140:42
    int_list.reverse_helper<0>(~%z#0:int_list.int_list, 0:int_list.int_list, ?%z#1:int_list.int_list) #20 @int_list:140:42
    int_list.append<0>(~y#0:int_list.int_list, 99:wybe.int, ?tmp$0#0:int_list.int_list) #2 @int_list_test:8:10
    foreign c print_string("-":wybe.string, ~#io#0:wybe.phantom, ?tmp$10#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#io#1:wybe.phantom) @io:11:22
    int_list.print<0>(x#1:int_list.int_list, ~#io#1:wybe.phantom, ?tmp$13#0:wybe.phantom) #21 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#2:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#2:wybe.phantom, ?tmp$16#0:wybe.phantom) #22 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$16#0:wybe.phantom, ?#io#3:wybe.phantom) @io:11:22
    int_list.print<0>(z#1:int_list.int_list, ~#io#3:wybe.phantom, ?tmp$19#0:wybe.phantom) #23 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$19#0:wybe.phantom, ?#io#4:wybe.phantom) @io:11:22
    int_list.extend<0>[410bae77d3](~x#1:int_list.int_list, ~tmp$0#0:int_list.int_list, ?tmp$1#0:int_list.int_list) #7 @int_list_test:14:10
    int_list.extend<0>[410bae77d3](~tmp$1#0:int_list.int_list, ~z#1:int_list.int_list, ?tmp$2#0:int_list.int_list) #8 @int_list_test:15:10
    foreign c print_string("-":wybe.string, ~#io#4:wybe.phantom, ?tmp$22#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$22#0:wybe.phantom, ?#io#5:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#5:wybe.phantom, ?tmp$25#0:wybe.phantom) #24 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$25#0:wybe.phantom, ?#io#6:wybe.phantom) @io:11:22
    int_list.insert<0>[410bae77d3](~tmp$2#0:int_list.int_list, 4:wybe.int, 78:wybe.int, ?tmp$3#0:int_list.int_list) #11 @int_list_test:19:10
    int_list.pop<0>[410bae77d3](~tmp$3#0:int_list.int_list, 20:wybe.int, ?tmp$4#0:int_list.int_list) #12 @int_list_test:20:10
    int_list.remove<0>[410bae77d3](~tmp$4#0:int_list.int_list, 2:wybe.int, ?tmp$5#0:int_list.int_list) #13 @int_list_test:21:10
    foreign c print_string("-":wybe.string, ~#io#6:wybe.phantom, ?tmp$28#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$28#0:wybe.phantom, ?#io#7:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$5#0:int_list.int_list, ~#io#7:wybe.phantom, ?tmp$31#0:wybe.phantom) #25 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$31#0:wybe.phantom, ?#io#8:wybe.phantom) @io:11:22
    int_list.sort<0>[410bae77d3](~tmp$5#0:int_list.int_list, ?%l#5:int_list.int_list) #16 @int_list_test:25:5
    foreign c print_string("-":wybe.string, ~#io#8:wybe.phantom, ?tmp$34#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$34#0:wybe.phantom, ?#io#9:wybe.phantom) @io:11:22
    int_list.print<0>(~l#5:int_list.int_list, ~#io#9:wybe.phantom, ?tmp$37#0:wybe.phantom) #26 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$37#0:wybe.phantom, ?#io#10:wybe.phantom) @io:11:22

LLVM code       : None

======================================================================
AFTER EVERYTHING:
 Module 
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use command_line
                    from int_list_test use 
                    use wybe
                    from wybe.io use 
                    from wybe.memory_management use 
  resources       : 
  procs           : 

*main* > {inline} (0 calls)
0: ([argc#0:wybe.int], [argv#0:wybe.int], ?exit_code#0:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c {semipure} gc_init() @memory_management:12:1
    foreign llvm move(0:wybe.int, ?#exit_code#0:wybe.int) @command_line:18:5
    int_list_test.<0>(0:wybe.phantom, ?#io#2:wybe.phantom) #3
    foreign c {semipure,terminal} exit(0:wybe.int)

  LLVM code       :

; ModuleID = ''


 


declare external ccc  void @exit(i64)    


declare external fastcc  void @"int_list_test.<0>"()    


declare external ccc  void @gc_init()    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i32 @main()    {
entry:
  tail call ccc  void  @gc_init()  
  tail call fastcc  void  @"int_list_test.<0>"()  
  tail call ccc  void  @exit(i64  0)  
  ret i64 0 
}
--------------------------------------------------
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    argv: command_line.argv
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:4:5)] @command_line:4:5
                    argv: fromList [(command_line.argv,wybe.int @command_line:12:5)] @command_line:12:5
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:18:30 @command_line:18:5)] @command_line:18:5
  procs           : 

*main* > public {inline} (0 calls)
0: (?exit_code#1:wybe.int, io#0:wybe.phantom, [?io#0:wybe.phantom]):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:wybe.int, ?exit_code#1:wybe.int) @command_line:18:5


set_exit_code > public {inline} (0 calls)
0: set_exit_code(code#0:wybe.int, [exit_code#0:wybe.int], ?exit_code#1:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(~code#0:wybe.int, ?exit_code#1:wybe.int) @command_line:24:5

  LLVM code       :

; ModuleID = 'command_line'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"command_line.<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i64 @"command_line.set_exit_code<0>"(i64  %"code#0")    {
entry:
  ret i64 %"code#0" 
}
--------------------------------------------------
 Module int_list
  representation  : (not a type)
  public submods  : int_list -> int_list.int_list
  public resources: 
  public procs    : int_list.append<0>
                    int_list.count<0>
                    int_list.extend<0>
                    int_list.index<0>
                    int_list.insert<0>
                    int_list.pop<0>
                    int_list.print<0>
                    int_list.println<0>
                    int_list.range<0>
                    int_list.remove<0>
                    int_list.reverse<0>
                    int_list.sort<0>
                    int_list.int_list./=<0>
                    int_list.int_list.=<0>
                    int_list.int_list.[]<0>
                    int_list.int_list.[|]<0>
                    int_list.int_list.[|]<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
  imports         : public use int_list.int_list
                    use wybe
  resources       : 
  submodules      : int_list.int_list
  procs           : 

append > public (0 calls)
0: append(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:int_list.int_list)
    foreign lpvm mutate(~tmp$5#0:int_list.int_list, ?tmp$6#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:int_list.int_list, ?tmp$7#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:int_list.int_list)
    int_list.extend<0>(~lst#0:int_list.int_list, ~tmp$7#0:int_list.int_list, ?$#0:int_list.int_list) #2 @int_list:35:49
 [410bae77d3] [NonAliasedParam 0] :
    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:int_list.int_list)
    foreign lpvm mutate(~tmp$5#0:int_list.int_list, ?tmp$6#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:int_list.int_list, ?tmp$7#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:int_list.int_list)
    int_list.extend<0>[410bae77d3](~lst#0:int_list.int_list, ~tmp$7#0:int_list.int_list, ?$#0:int_list.int_list) #2 @int_list:35:49


count > public (3 calls)
0: count(lst#0:int_list.int_list, x#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$7#0:wybe.bool)
    case ~tmp$7#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?$#0:wybe.int) @int_list:85:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.count<0>(~t#0:int_list.int_list, x#0:wybe.int, ?tmp$2#0:wybe.int) #1 @int_list:88:9
        foreign llvm icmp_eq(~h#0:wybe.int, ~x#0:wybe.int, ?tmp$4#0:wybe.bool) @int:24:28
        case ~tmp$4#0:wybe.bool of
        0:
            foreign llvm move(~tmp$2#0:wybe.int, ?$#0:wybe.int) @int:8:24

        1:
            foreign llvm add(~tmp$2#0:wybe.int, 1:wybe.int, ?$#0:wybe.int) @int:8:24




extend > public (3 calls)
0: extend(lst1#0:int_list.int_list, lst2#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst2#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(1,(int_list.extend<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst1#0:int_list.int_list, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~lst2#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:39:5

    1:
        foreign lpvm access(lst1#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst1#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.extend<0>(~t#0:int_list.int_list, ~lst2#0:int_list.int_list, ?tmp$2#0:int_list.int_list) #1 @int_list:40:35
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:int_list.int_list)
        foreign lpvm mutate(~tmp$8#0:int_list.int_list, ?tmp$9#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$9#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:int_list.int_list)

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst1#0:int_list.int_list, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~lst2#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:39:5

    1:
        foreign lpvm access(lst1#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.extend<0>[410bae77d3](~t#0:int_list.int_list, ~lst2#0:int_list.int_list, ?tmp$2#0:int_list.int_list) #1 @int_list:40:35
        foreign lpvm mutate(~lst1#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:int_list.int_list)



gen$1 > {inline} (2 calls)
0: gen$1([h#0:wybe.int], [lst#0:int_list.int_list], [t#0:int_list.int_list], tmp$2#0:wybe.int, tmp$3#0:wybe.int, [x#0:wybe.int], ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm add(~tmp$2#0:wybe.int, ~tmp$3#0:wybe.int, ?$#0:wybe.int) @int:8:24


gen$2 > (2 calls)
0: gen$2(result#0:int_list.int_list, start#0:wybe.int, step#0:wybe.int, stop#0:wybe.int, tmp$0#0:int_list.int_list, ?result#1:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(3,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.gen$2<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_slt(start#0:wybe.int, stop#0:wybe.int, ?tmp$3#0:wybe.bool) @int:20:27
    case ~tmp$3#0:wybe.bool of
    0:
        int_list.reverse_helper<0>(~%result#0:int_list.int_list, 0:int_list.int_list, ?%result#1:int_list.int_list) #3 @int_list:140:42

    1:
        foreign lpvm alloc(16:wybe.int, ?tmp$12#0:int_list.int_list)
        foreign lpvm mutate(~tmp$12#0:int_list.int_list, ?tmp$13#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start#0:wybe.int)
        foreign lpvm mutate(~tmp$13#0:int_list.int_list, ?tmp$14#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result#0:int_list.int_list)
        foreign llvm add(~start#0:wybe.int, step#0:wybe.int, ?tmp$15#0:wybe.int) @int:8:24
        int_list.gen$2<0>(~tmp$14#0:int_list.int_list, ~tmp$15#0:wybe.int, ~step#0:wybe.int, ~stop#0:wybe.int, ~tmp$0#0:int_list.int_list, ?result#1:int_list.int_list) #4 @int_list:26:5

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_slt(start#0:wybe.int, stop#0:wybe.int, ?tmp$3#0:wybe.bool) @int:20:27
    case ~tmp$3#0:wybe.bool of
    0:
        int_list.reverse_helper<0>[410bae77d3](~%result#0:int_list.int_list, 0:int_list.int_list, ?%result#1:int_list.int_list) #3 @int_list:140:42

    1:
        foreign lpvm alloc(16:wybe.int, ?tmp$12#0:int_list.int_list)
        foreign lpvm mutate(~tmp$12#0:int_list.int_list, ?tmp$13#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start#0:wybe.int)
        foreign lpvm mutate(~tmp$13#0:int_list.int_list, ?tmp$14#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result#0:int_list.int_list)
        foreign llvm add(~start#0:wybe.int, step#0:wybe.int, ?tmp$15#0:wybe.int) @int:8:24
        int_list.gen$2<0>[410bae77d3](~tmp$14#0:int_list.int_list, ~tmp$15#0:wybe.int, ~step#0:wybe.int, ~stop#0:wybe.int, ~tmp$0#0:int_list.int_list, ?result#1:int_list.int_list) #4 @int_list:26:5



gen$3 > {inline} (1 calls)
0: gen$3(result#0:int_list.int_list, start#0:wybe.int, step#0:wybe.int, stop#0:wybe.int, tmp$0#0:int_list.int_list, ?result#2:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:int_list.int_list)
    foreign lpvm mutate(~tmp$5#0:int_list.int_list, ?tmp$6#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, start#0:wybe.int)
    foreign lpvm mutate(~tmp$6#0:int_list.int_list, ?tmp$7#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~result#0:int_list.int_list)
    foreign llvm add(~start#0:wybe.int, step#0:wybe.int, ?tmp$2#0:wybe.int) @int:8:24
    int_list.gen$2<0>(~tmp$7#0:int_list.int_list, ~tmp$2#0:wybe.int, ~step#0:wybe.int, ~stop#0:wybe.int, ~tmp$0#0:int_list.int_list, ?result#2:int_list.int_list) #2 @int_list:26:5


greater > (3 calls)
0: greater(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:127:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp_sge(h#0:wybe.int, v#0:wybe.int, ?tmp$6#0:wybe.bool) @int:23:28
        case ~tmp$6#0:wybe.bool of
        0:
            int_list.greater<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?$#0:int_list.int_list) #4 @int_list:134:13

        1:
            int_list.greater<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:132:18
            foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:127:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp_sge(~h#0:wybe.int, v#0:wybe.int, ?tmp$6#0:wybe.bool) @int:23:28
        case ~tmp$6#0:wybe.bool of
        0:
            int_list.greater<0>[410bae77d3](~t#0:int_list.int_list, ~v#0:wybe.int, ?$#0:int_list.int_list) #4 @int_list:134:13

        1:
            int_list.greater<0>[410bae77d3](~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:132:18
            foreign lpvm mutate(~lst#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)




index > public {inline} (0 calls)
0: index(lst#0:int_list.int_list, x#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.index_helper<0>(~lst#0:int_list.int_list, 0:wybe.int, ~x#0:wybe.int, ?$#0:wybe.int) #0 @int_list:94:42


index_helper > (2 calls)
0: index_helper(lst#0:int_list.int_list, idx#0:wybe.int, x#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(-1:wybe.int, ?$#0:wybe.int) @int_list:96:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp_eq(~h#0:wybe.int, x#0:wybe.int, ?tmp$5#0:wybe.bool) @int:24:28
        case ~tmp$5#0:wybe.bool of
        0:
            foreign llvm add(~idx#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.int) @int:8:24
            int_list.index_helper<0>(~t#0:int_list.int_list, ~tmp$3#0:wybe.int, ~x#0:wybe.int, ?$#0:wybe.int) #3 @int_list:103:13

        1:
            foreign llvm move(~idx#0:wybe.int, ?$#0:wybe.int) @int_list:96:1




insert > public (2 calls)
0: insert(lst#0:int_list.int_list, idx#0:wybe.int, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(4,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]])),(7,(int_list.insert<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_eq(idx#0:wybe.int, 0:wybe.int, ?tmp$9#0:wybe.bool) @int:24:28
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$13#0:wybe.bool)
        case ~tmp$13#0:wybe.bool of
        0:
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$7#0:wybe.int) @int:11:24
            int_list.insert<0>(~lst#0:int_list.int_list, ~tmp$7#0:wybe.int, ~v#0:wybe.int, ?$#0:int_list.int_list) #7 @int_list:54:13

        1:
            foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
            foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$5#0:wybe.int) @int:11:24
            int_list.insert<0>(~t#0:int_list.int_list, ~tmp$5#0:wybe.int, ~v#0:wybe.int, ?tmp$4#0:int_list.int_list) #4 @int_list:51:18
            foreign lpvm alloc(16:wybe.int, ?tmp$18#0:int_list.int_list)
            foreign lpvm mutate(~tmp$18#0:int_list.int_list, ?tmp$19#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$19#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$4#0:int_list.int_list)


    1:
        foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
        foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
        foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lst#0:int_list.int_list)

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_eq(idx#0:wybe.int, 0:wybe.int, ?tmp$9#0:wybe.bool) @int:24:28
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$13#0:wybe.bool)
        case ~tmp$13#0:wybe.bool of
        0:
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$7#0:wybe.int) @int:11:24
            int_list.insert<0>[410bae77d3](~lst#0:int_list.int_list, ~tmp$7#0:wybe.int, ~v#0:wybe.int, ?$#0:int_list.int_list) #7 @int_list:54:13

        1:
            foreign lpvm access(lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$5#0:wybe.int) @int:11:24
            int_list.insert<0>[410bae77d3](~t#0:int_list.int_list, ~tmp$5#0:wybe.int, ~v#0:wybe.int, ?tmp$4#0:int_list.int_list) #4 @int_list:51:18
            foreign lpvm mutate(~lst#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$4#0:int_list.int_list)


    1:
        foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
        foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
        foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lst#0:int_list.int_list)



lesser > (3 calls)
0: lesser(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.lesser<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:116:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp_slt(h#0:wybe.int, v#0:wybe.int, ?tmp$6#0:wybe.bool) @int:20:27
        case ~tmp$6#0:wybe.bool of
        0:
            int_list.lesser<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?$#0:int_list.int_list) #4 @int_list:123:13

        1:
            int_list.lesser<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:121:18
            foreign lpvm alloc(16:wybe.int, ?tmp$14#0:int_list.int_list)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)




pop > public (1 calls)
0: pop(lst#0:int_list.int_list, idx#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(3,(int_list.pop<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:71:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp_eq(idx#0:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.bool) @int:24:28
        case ~tmp$6#0:wybe.bool of
        0:
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$4#0:wybe.int) @int:11:24
            int_list.pop<0>(~t#0:int_list.int_list, ~tmp$4#0:wybe.int, ?tmp$3#0:int_list.int_list) #3 @int_list:78:18
            foreign lpvm alloc(16:wybe.int, ?tmp$16#0:int_list.int_list)
            foreign lpvm mutate(~tmp$16#0:int_list.int_list, ?tmp$17#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$17#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)

        1:
            foreign llvm move(~t#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:71:5


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:71:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp_eq(idx#0:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.bool) @int:24:28
        case ~tmp$6#0:wybe.bool of
        0:
            foreign llvm sub(~idx#0:wybe.int, 1:wybe.int, ?tmp$4#0:wybe.int) @int:11:24
            int_list.pop<0>[410bae77d3](~t#0:int_list.int_list, ~tmp$4#0:wybe.int, ?tmp$3#0:int_list.int_list) #3 @int_list:78:18
            foreign lpvm mutate(~lst#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)

        1:
            foreign llvm move(~t#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:71:5




print > public (2 calls)
0: print(x#0:int_list.int_list, io#0:wybe.phantom, ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(x#0:int_list.int_list, 0:wybe.int, ?tmp$2#0:wybe.bool)
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#3:wybe.phantom)

    1:
        foreign lpvm access(x#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~x#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign c print_int(~h#0:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:13:32
        foreign c putchar(' ':wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @io:26:33
        int_list.print<0>(~t#0:int_list.int_list, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #3 @int_list:11:10



println > public {inline} (0 calls)
0: println(x#0:int_list.int_list, io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.print<0>(~x#0:int_list.int_list, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #0 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @io:11:22


range > public {inline} (0 calls)
0: range(start#0:wybe.int, stop#0:wybe.int, step#0:wybe.int, ?result#1:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.gen$2<0>(0:int_list.int_list, ~start#0:wybe.int, ~step#0:wybe.int, ~stop#0:wybe.int, 0:int_list.int_list, ?result#1:int_list.int_list) #1 @int_list:26:5


remove > public (1 calls)
0: remove(lst#0:int_list.int_list, v#0:wybe.int, ?$#0:int_list.int_list):
 AliasPairs: [($#0,lst#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.remove<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:58:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp_eq(h#0:wybe.int, v#0:wybe.int, ?tmp$5#0:wybe.bool) @int:24:28
        case ~tmp$5#0:wybe.bool of
        0:
            int_list.remove<0>(~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:65:18
            foreign lpvm alloc(16:wybe.int, ?tmp$13#0:int_list.int_list)
            foreign lpvm mutate(~tmp$13#0:int_list.int_list, ?tmp$14#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
            foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)

        1:
            foreign llvm move(~t#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:58:5


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:58:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign llvm icmp_eq(~h#0:wybe.int, v#0:wybe.int, ?tmp$5#0:wybe.bool) @int:24:28
        case ~tmp$5#0:wybe.bool of
        0:
            int_list.remove<0>[410bae77d3](~t#0:int_list.int_list, ~v#0:wybe.int, ?tmp$3#0:int_list.int_list) #2 @int_list:65:18
            foreign lpvm mutate(~lst#0:int_list.int_list, ?$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$3#0:int_list.int_list)

        1:
            foreign llvm move(~t#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:58:5




reverse > public {inline} (1 calls)
0: reverse(lst#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.reverse_helper<0>(~lst#0:int_list.int_list, 0:int_list.int_list, ?$#0:int_list.int_list) #1 @int_list:140:42


reverse_helper > (2 calls)
0: reverse_helper(lst#0:int_list.int_list, acc#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: [($#0,acc#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~acc#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:142:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:int_list.int_list)
        foreign lpvm mutate(~tmp$8#0:int_list.int_list, ?tmp$9#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$9#0:int_list.int_list, ?tmp$10#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~acc#0:int_list.int_list)
        int_list.reverse_helper<0>(~t#0:int_list.int_list, ~tmp$10#0:int_list.int_list, ?$#0:int_list.int_list) #2 @int_list:143:29

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~acc#0:int_list.int_list, ?$#0:int_list.int_list) @int_list:142:1

    1:
        foreign lpvm access(lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        foreign lpvm mutate(~lst#0:int_list.int_list, ?tmp$10#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~acc#0:int_list.int_list)
        int_list.reverse_helper<0>[410bae77d3](~t#0:int_list.int_list, ~tmp$10#0:int_list.int_list, ?$#0:int_list.int_list) #2 @int_list:143:29



sort > public (2 calls)
0: sort(lst#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(3,(int_list.greater<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(6,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$10#0:wybe.bool)
    case ~tmp$10#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:109:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.lesser<0>(t#0:int_list.int_list, h#0:wybe.int, ?tmp$3#0:int_list.int_list) #1 @int_list:112:21
        int_list.sort<0>[410bae77d3](~tmp$3#0:int_list.int_list, ?tmp$2#0:int_list.int_list) #2 @int_list:112:16
        int_list.greater<0>(~t#0:int_list.int_list, h#0:wybe.int, ?tmp$6#0:int_list.int_list) #3 @int_list:112:46
        int_list.sort<0>[410bae77d3](~tmp$6#0:int_list.int_list, ?tmp$5#0:int_list.int_list) #4 @int_list:112:41
        foreign lpvm alloc(16:wybe.int, ?tmp$13#0:int_list.int_list)
        foreign lpvm mutate(~tmp$13#0:int_list.int_list, ?tmp$14#0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$14#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$5#0:int_list.int_list)
        int_list.extend<0>[410bae77d3](~tmp$2#0:int_list.int_list, ~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list) #6 @int_list:112:9

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst#0:int_list.int_list, 0:wybe.int, ?tmp$10#0:wybe.bool)
    case ~tmp$10#0:wybe.bool of
    0:
        foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list) @int_list:109:5

    1:
        foreign lpvm access(lst#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(lst#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:int_list.int_list)
        int_list.lesser<0>(t#0:int_list.int_list, h#0:wybe.int, ?tmp$3#0:int_list.int_list) #1 @int_list:112:21
        int_list.sort<0>[410bae77d3](~tmp$3#0:int_list.int_list, ?tmp$2#0:int_list.int_list) #2 @int_list:112:16
        int_list.greater<0>[410bae77d3](~t#0:int_list.int_list, ~h#0:wybe.int, ?tmp$6#0:int_list.int_list) #3 @int_list:112:46
        int_list.sort<0>[410bae77d3](~tmp$6#0:int_list.int_list, ?tmp$5#0:int_list.int_list) #4 @int_list:112:41
        foreign lpvm mutate(~lst#0:int_list.int_list, ?tmp$15#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$5#0:int_list.int_list)
        int_list.extend<0>[410bae77d3](~tmp$2#0:int_list.int_list, ~tmp$15#0:int_list.int_list, ?$#0:int_list.int_list) #6 @int_list:112:9


  LLVM code       :

; ModuleID = 'int_list'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"int_list.append<0>"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 %"v#0", i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 0, i64* %8 
  %"1$$#0" = tail call fastcc  i64  @"int_list.extend<0>"(i64  %"lst#0", i64  %3)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"int_list.append<0>[410bae77d3]"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %9 = trunc i64 16 to i32  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  %9)  
  %11 = ptrtoint i8* %10 to i64 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 %"v#0", i64* %13 
  %14 = add   i64 %11, 8 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 0, i64* %16 
  %"1$$#0" = tail call fastcc  i64  @"int_list.extend<0>[410bae77d3]"(i64  %"lst#0", i64  %11)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"int_list.count<0>"(i64  %"lst#0", i64  %"x#0")    {
entry:
  %"1$tmp$7#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$7#0", label %if.then, label %if.else 
if.then:
  %17 = inttoptr i64 %"lst#0" to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  %19 = load  i64, i64* %18 
  %20 = add   i64 %"lst#0", 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  %23 = load  i64, i64* %22 
  %"2$tmp$2#0" = tail call fastcc  i64  @"int_list.count<0>"(i64  %23, i64  %"x#0")  
  %"2$tmp$4#0" = icmp eq i64 %19, %"x#0" 
  br i1 %"2$tmp$4#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  %"4$$#0" = add   i64 %"2$tmp$2#0", 1 
  ret i64 %"4$$#0" 
if.else1:
  ret i64 %"2$tmp$2#0" 
}


define external fastcc  i64 @"int_list.extend<0>"(i64  %"lst1#0", i64  %"lst2#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"lst1#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %24 = inttoptr i64 %"lst1#0" to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = add   i64 %"lst1#0", 8 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %"2$tmp$2#0" = tail call fastcc  i64  @"int_list.extend<0>"(i64  %30, i64  %"lst2#0")  
  %31 = trunc i64 16 to i32  
  %32 = tail call ccc  i8*  @wybe_malloc(i32  %31)  
  %33 = ptrtoint i8* %32 to i64 
  %34 = inttoptr i64 %33 to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  store  i64 %26, i64* %35 
  %36 = add   i64 %33, 8 
  %37 = inttoptr i64 %36 to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  store  i64 %"2$tmp$2#0", i64* %38 
  ret i64 %33 
if.else:
  ret i64 %"lst2#0" 
}


define external fastcc  i64 @"int_list.extend<0>[410bae77d3]"(i64  %"lst1#0", i64  %"lst2#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"lst1#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %39 = add   i64 %"lst1#0", 8 
  %40 = inttoptr i64 %39 to i64* 
  %41 = getelementptr  i64, i64* %40, i64 0 
  %42 = load  i64, i64* %41 
  %"2$tmp$2#0" = tail call fastcc  i64  @"int_list.extend<0>[410bae77d3]"(i64  %42, i64  %"lst2#0")  
  %43 = add   i64 %"lst1#0", 8 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  store  i64 %"2$tmp$2#0", i64* %45 
  ret i64 %"lst1#0" 
if.else:
  ret i64 %"lst2#0" 
}


define external fastcc  i64 @"int_list.gen$1<0>"(i64  %"tmp$2#0", i64  %"tmp$3#0")    {
entry:
  %"1$$#0" = add   i64 %"tmp$2#0", %"tmp$3#0" 
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"int_list.gen$2<0>"(i64  %"result#0", i64  %"start#0", i64  %"step#0", i64  %"stop#0", i64  %"tmp$0#0")    {
entry:
  %"1$tmp$3#0" = icmp slt i64 %"start#0", %"stop#0" 
  br i1 %"1$tmp$3#0", label %if.then, label %if.else 
if.then:
  %46 = trunc i64 16 to i32  
  %47 = tail call ccc  i8*  @wybe_malloc(i32  %46)  
  %48 = ptrtoint i8* %47 to i64 
  %49 = inttoptr i64 %48 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  store  i64 %"start#0", i64* %50 
  %51 = add   i64 %48, 8 
  %52 = inttoptr i64 %51 to i64* 
  %53 = getelementptr  i64, i64* %52, i64 0 
  store  i64 %"result#0", i64* %53 
  %"2$tmp$15#0" = add   i64 %"start#0", %"step#0" 
  %"2$result#1" = tail call fastcc  i64  @"int_list.gen$2<0>"(i64  %48, i64  %"2$tmp$15#0", i64  %"step#0", i64  %"stop#0", i64  %"tmp$0#0")  
  ret i64 %"2$result#1" 
if.else:
  %"3$result#1" = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"result#0", i64  0)  
  ret i64 %"3$result#1" 
}


define external fastcc  i64 @"int_list.gen$2<0>[410bae77d3]"(i64  %"result#0", i64  %"start#0", i64  %"step#0", i64  %"stop#0", i64  %"tmp$0#0")    {
entry:
  %"1$tmp$3#0" = icmp slt i64 %"start#0", %"stop#0" 
  br i1 %"1$tmp$3#0", label %if.then, label %if.else 
if.then:
  %54 = trunc i64 16 to i32  
  %55 = tail call ccc  i8*  @wybe_malloc(i32  %54)  
  %56 = ptrtoint i8* %55 to i64 
  %57 = inttoptr i64 %56 to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  store  i64 %"start#0", i64* %58 
  %59 = add   i64 %56, 8 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  store  i64 %"result#0", i64* %61 
  %"2$tmp$15#0" = add   i64 %"start#0", %"step#0" 
  %"2$result#1" = tail call fastcc  i64  @"int_list.gen$2<0>[410bae77d3]"(i64  %56, i64  %"2$tmp$15#0", i64  %"step#0", i64  %"stop#0", i64  %"tmp$0#0")  
  ret i64 %"2$result#1" 
if.else:
  %"3$result#1" = tail call fastcc  i64  @"int_list.reverse_helper<0>[410bae77d3]"(i64  %"result#0", i64  0)  
  ret i64 %"3$result#1" 
}


define external fastcc  i64 @"int_list.gen$3<0>"(i64  %"result#0", i64  %"start#0", i64  %"step#0", i64  %"stop#0", i64  %"tmp$0#0")    {
entry:
  %62 = trunc i64 16 to i32  
  %63 = tail call ccc  i8*  @wybe_malloc(i32  %62)  
  %64 = ptrtoint i8* %63 to i64 
  %65 = inttoptr i64 %64 to i64* 
  %66 = getelementptr  i64, i64* %65, i64 0 
  store  i64 %"start#0", i64* %66 
  %67 = add   i64 %64, 8 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  store  i64 %"result#0", i64* %69 
  %"1$tmp$2#0" = add   i64 %"start#0", %"step#0" 
  %"1$result#2" = tail call fastcc  i64  @"int_list.gen$2<0>"(i64  %64, i64  %"1$tmp$2#0", i64  %"step#0", i64  %"stop#0", i64  %"tmp$0#0")  
  ret i64 %"1$result#2" 
}


define external fastcc  i64 @"int_list.greater<0>"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %"1$tmp$9#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %70 = inttoptr i64 %"lst#0" to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  %72 = load  i64, i64* %71 
  %73 = add   i64 %"lst#0", 8 
  %74 = inttoptr i64 %73 to i64* 
  %75 = getelementptr  i64, i64* %74, i64 0 
  %76 = load  i64, i64* %75 
  %"2$tmp$6#0" = icmp sge i64 %72, %"v#0" 
  br i1 %"2$tmp$6#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  %"4$tmp$3#0" = tail call fastcc  i64  @"int_list.greater<0>"(i64  %76, i64  %"v#0")  
  %77 = trunc i64 16 to i32  
  %78 = tail call ccc  i8*  @wybe_malloc(i32  %77)  
  %79 = ptrtoint i8* %78 to i64 
  %80 = inttoptr i64 %79 to i64* 
  %81 = getelementptr  i64, i64* %80, i64 0 
  store  i64 %72, i64* %81 
  %82 = add   i64 %79, 8 
  %83 = inttoptr i64 %82 to i64* 
  %84 = getelementptr  i64, i64* %83, i64 0 
  store  i64 %"4$tmp$3#0", i64* %84 
  ret i64 %79 
if.else1:
  %"5$$#0" = tail call fastcc  i64  @"int_list.greater<0>"(i64  %76, i64  %"v#0")  
  ret i64 %"5$$#0" 
}


define external fastcc  i64 @"int_list.greater<0>[410bae77d3]"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %"1$tmp$9#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %85 = inttoptr i64 %"lst#0" to i64* 
  %86 = getelementptr  i64, i64* %85, i64 0 
  %87 = load  i64, i64* %86 
  %88 = add   i64 %"lst#0", 8 
  %89 = inttoptr i64 %88 to i64* 
  %90 = getelementptr  i64, i64* %89, i64 0 
  %91 = load  i64, i64* %90 
  %"2$tmp$6#0" = icmp sge i64 %87, %"v#0" 
  br i1 %"2$tmp$6#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  %"4$tmp$3#0" = tail call fastcc  i64  @"int_list.greater<0>[410bae77d3]"(i64  %91, i64  %"v#0")  
  %92 = add   i64 %"lst#0", 8 
  %93 = inttoptr i64 %92 to i64* 
  %94 = getelementptr  i64, i64* %93, i64 0 
  store  i64 %"4$tmp$3#0", i64* %94 
  ret i64 %"lst#0" 
if.else1:
  %"5$$#0" = tail call fastcc  i64  @"int_list.greater<0>[410bae77d3]"(i64  %91, i64  %"v#0")  
  ret i64 %"5$$#0" 
}


define external fastcc  i64 @"int_list.index<0>"(i64  %"lst#0", i64  %"x#0")    {
entry:
  %"1$$#0" = tail call fastcc  i64  @"int_list.index_helper<0>"(i64  %"lst#0", i64  0, i64  %"x#0")  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"int_list.index_helper<0>"(i64  %"lst#0", i64  %"idx#0", i64  %"x#0")    {
entry:
  %"1$tmp$8#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  %95 = inttoptr i64 %"lst#0" to i64* 
  %96 = getelementptr  i64, i64* %95, i64 0 
  %97 = load  i64, i64* %96 
  %98 = add   i64 %"lst#0", 8 
  %99 = inttoptr i64 %98 to i64* 
  %100 = getelementptr  i64, i64* %99, i64 0 
  %101 = load  i64, i64* %100 
  %"2$tmp$5#0" = icmp eq i64 %97, %"x#0" 
  br i1 %"2$tmp$5#0", label %if.then1, label %if.else1 
if.else:
  ret i64 -1 
if.then1:
  ret i64 %"idx#0" 
if.else1:
  %"5$tmp$3#0" = add   i64 %"idx#0", 1 
  %"5$$#0" = tail call fastcc  i64  @"int_list.index_helper<0>"(i64  %101, i64  %"5$tmp$3#0", i64  %"x#0")  
  ret i64 %"5$$#0" 
}


define external fastcc  i64 @"int_list.insert<0>"(i64  %"lst#0", i64  %"idx#0", i64  %"v#0")    {
entry:
  %"1$tmp$9#0" = icmp eq i64 %"idx#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %102 = trunc i64 16 to i32  
  %103 = tail call ccc  i8*  @wybe_malloc(i32  %102)  
  %104 = ptrtoint i8* %103 to i64 
  %105 = inttoptr i64 %104 to i64* 
  %106 = getelementptr  i64, i64* %105, i64 0 
  store  i64 %"v#0", i64* %106 
  %107 = add   i64 %104, 8 
  %108 = inttoptr i64 %107 to i64* 
  %109 = getelementptr  i64, i64* %108, i64 0 
  store  i64 %"lst#0", i64* %109 
  ret i64 %104 
if.else:
  %"3$tmp$13#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"3$tmp$13#0", label %if.then1, label %if.else1 
if.then1:
  %110 = inttoptr i64 %"lst#0" to i64* 
  %111 = getelementptr  i64, i64* %110, i64 0 
  %112 = load  i64, i64* %111 
  %113 = add   i64 %"lst#0", 8 
  %114 = inttoptr i64 %113 to i64* 
  %115 = getelementptr  i64, i64* %114, i64 0 
  %116 = load  i64, i64* %115 
  %"4$tmp$5#0" = sub   i64 %"idx#0", 1 
  %"4$tmp$4#0" = tail call fastcc  i64  @"int_list.insert<0>"(i64  %116, i64  %"4$tmp$5#0", i64  %"v#0")  
  %117 = trunc i64 16 to i32  
  %118 = tail call ccc  i8*  @wybe_malloc(i32  %117)  
  %119 = ptrtoint i8* %118 to i64 
  %120 = inttoptr i64 %119 to i64* 
  %121 = getelementptr  i64, i64* %120, i64 0 
  store  i64 %112, i64* %121 
  %122 = add   i64 %119, 8 
  %123 = inttoptr i64 %122 to i64* 
  %124 = getelementptr  i64, i64* %123, i64 0 
  store  i64 %"4$tmp$4#0", i64* %124 
  ret i64 %119 
if.else1:
  %"5$tmp$7#0" = sub   i64 %"idx#0", 1 
  %"5$$#0" = tail call fastcc  i64  @"int_list.insert<0>"(i64  %"lst#0", i64  %"5$tmp$7#0", i64  %"v#0")  
  ret i64 %"5$$#0" 
}


define external fastcc  i64 @"int_list.insert<0>[410bae77d3]"(i64  %"lst#0", i64  %"idx#0", i64  %"v#0")    {
entry:
  %"1$tmp$9#0" = icmp eq i64 %"idx#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %125 = trunc i64 16 to i32  
  %126 = tail call ccc  i8*  @wybe_malloc(i32  %125)  
  %127 = ptrtoint i8* %126 to i64 
  %128 = inttoptr i64 %127 to i64* 
  %129 = getelementptr  i64, i64* %128, i64 0 
  store  i64 %"v#0", i64* %129 
  %130 = add   i64 %127, 8 
  %131 = inttoptr i64 %130 to i64* 
  %132 = getelementptr  i64, i64* %131, i64 0 
  store  i64 %"lst#0", i64* %132 
  ret i64 %127 
if.else:
  %"3$tmp$13#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"3$tmp$13#0", label %if.then1, label %if.else1 
if.then1:
  %133 = add   i64 %"lst#0", 8 
  %134 = inttoptr i64 %133 to i64* 
  %135 = getelementptr  i64, i64* %134, i64 0 
  %136 = load  i64, i64* %135 
  %"4$tmp$5#0" = sub   i64 %"idx#0", 1 
  %"4$tmp$4#0" = tail call fastcc  i64  @"int_list.insert<0>[410bae77d3]"(i64  %136, i64  %"4$tmp$5#0", i64  %"v#0")  
  %137 = add   i64 %"lst#0", 8 
  %138 = inttoptr i64 %137 to i64* 
  %139 = getelementptr  i64, i64* %138, i64 0 
  store  i64 %"4$tmp$4#0", i64* %139 
  ret i64 %"lst#0" 
if.else1:
  %"5$tmp$7#0" = sub   i64 %"idx#0", 1 
  %"5$$#0" = tail call fastcc  i64  @"int_list.insert<0>[410bae77d3]"(i64  %"lst#0", i64  %"5$tmp$7#0", i64  %"v#0")  
  ret i64 %"5$$#0" 
}


define external fastcc  i64 @"int_list.lesser<0>"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %"1$tmp$9#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %140 = inttoptr i64 %"lst#0" to i64* 
  %141 = getelementptr  i64, i64* %140, i64 0 
  %142 = load  i64, i64* %141 
  %143 = add   i64 %"lst#0", 8 
  %144 = inttoptr i64 %143 to i64* 
  %145 = getelementptr  i64, i64* %144, i64 0 
  %146 = load  i64, i64* %145 
  %"2$tmp$6#0" = icmp slt i64 %142, %"v#0" 
  br i1 %"2$tmp$6#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  %"4$tmp$3#0" = tail call fastcc  i64  @"int_list.lesser<0>"(i64  %146, i64  %"v#0")  
  %147 = trunc i64 16 to i32  
  %148 = tail call ccc  i8*  @wybe_malloc(i32  %147)  
  %149 = ptrtoint i8* %148 to i64 
  %150 = inttoptr i64 %149 to i64* 
  %151 = getelementptr  i64, i64* %150, i64 0 
  store  i64 %142, i64* %151 
  %152 = add   i64 %149, 8 
  %153 = inttoptr i64 %152 to i64* 
  %154 = getelementptr  i64, i64* %153, i64 0 
  store  i64 %"4$tmp$3#0", i64* %154 
  ret i64 %149 
if.else1:
  %"5$$#0" = tail call fastcc  i64  @"int_list.lesser<0>"(i64  %146, i64  %"v#0")  
  ret i64 %"5$$#0" 
}


define external fastcc  i64 @"int_list.pop<0>"(i64  %"lst#0", i64  %"idx#0")    {
entry:
  %"1$tmp$9#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %155 = inttoptr i64 %"lst#0" to i64* 
  %156 = getelementptr  i64, i64* %155, i64 0 
  %157 = load  i64, i64* %156 
  %158 = add   i64 %"lst#0", 8 
  %159 = inttoptr i64 %158 to i64* 
  %160 = getelementptr  i64, i64* %159, i64 0 
  %161 = load  i64, i64* %160 
  %"2$tmp$6#0" = icmp eq i64 %"idx#0", 0 
  br i1 %"2$tmp$6#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  ret i64 %161 
if.else1:
  %"5$tmp$4#0" = sub   i64 %"idx#0", 1 
  %"5$tmp$3#0" = tail call fastcc  i64  @"int_list.pop<0>"(i64  %161, i64  %"5$tmp$4#0")  
  %162 = trunc i64 16 to i32  
  %163 = tail call ccc  i8*  @wybe_malloc(i32  %162)  
  %164 = ptrtoint i8* %163 to i64 
  %165 = inttoptr i64 %164 to i64* 
  %166 = getelementptr  i64, i64* %165, i64 0 
  store  i64 %157, i64* %166 
  %167 = add   i64 %164, 8 
  %168 = inttoptr i64 %167 to i64* 
  %169 = getelementptr  i64, i64* %168, i64 0 
  store  i64 %"5$tmp$3#0", i64* %169 
  ret i64 %164 
}


define external fastcc  i64 @"int_list.pop<0>[410bae77d3]"(i64  %"lst#0", i64  %"idx#0")    {
entry:
  %"1$tmp$9#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %170 = add   i64 %"lst#0", 8 
  %171 = inttoptr i64 %170 to i64* 
  %172 = getelementptr  i64, i64* %171, i64 0 
  %173 = load  i64, i64* %172 
  %"2$tmp$6#0" = icmp eq i64 %"idx#0", 0 
  br i1 %"2$tmp$6#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  ret i64 %173 
if.else1:
  %"5$tmp$4#0" = sub   i64 %"idx#0", 1 
  %"5$tmp$3#0" = tail call fastcc  i64  @"int_list.pop<0>[410bae77d3]"(i64  %173, i64  %"5$tmp$4#0")  
  %174 = add   i64 %"lst#0", 8 
  %175 = inttoptr i64 %174 to i64* 
  %176 = getelementptr  i64, i64* %175, i64 0 
  store  i64 %"5$tmp$3#0", i64* %176 
  ret i64 %"lst#0" 
}


define external fastcc  void @"int_list.print<0>"(i64  %"x#0")    {
entry:
  %"1$tmp$2#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  %177 = inttoptr i64 %"x#0" to i64* 
  %178 = getelementptr  i64, i64* %177, i64 0 
  %179 = load  i64, i64* %178 
  %180 = add   i64 %"x#0", 8 
  %181 = inttoptr i64 %180 to i64* 
  %182 = getelementptr  i64, i64* %181, i64 0 
  %183 = load  i64, i64* %182 
  tail call ccc  void  @print_int(i64  %179)  
  tail call ccc  void  @putchar(i8  32)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %183)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"int_list.println<0>"(i64  %"x#0")    {
entry:
  tail call fastcc  void  @"int_list.print<0>"(i64  %"x#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"int_list.range<0>"(i64  %"start#0", i64  %"stop#0", i64  %"step#0")    {
entry:
  %"1$result#1" = tail call fastcc  i64  @"int_list.gen$2<0>"(i64  0, i64  %"start#0", i64  %"step#0", i64  %"stop#0", i64  0)  
  ret i64 %"1$result#1" 
}


define external fastcc  i64 @"int_list.remove<0>"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %"1$tmp$8#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  %184 = inttoptr i64 %"lst#0" to i64* 
  %185 = getelementptr  i64, i64* %184, i64 0 
  %186 = load  i64, i64* %185 
  %187 = add   i64 %"lst#0", 8 
  %188 = inttoptr i64 %187 to i64* 
  %189 = getelementptr  i64, i64* %188, i64 0 
  %190 = load  i64, i64* %189 
  %"2$tmp$5#0" = icmp eq i64 %186, %"v#0" 
  br i1 %"2$tmp$5#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  ret i64 %190 
if.else1:
  %"5$tmp$3#0" = tail call fastcc  i64  @"int_list.remove<0>"(i64  %190, i64  %"v#0")  
  %191 = trunc i64 16 to i32  
  %192 = tail call ccc  i8*  @wybe_malloc(i32  %191)  
  %193 = ptrtoint i8* %192 to i64 
  %194 = inttoptr i64 %193 to i64* 
  %195 = getelementptr  i64, i64* %194, i64 0 
  store  i64 %186, i64* %195 
  %196 = add   i64 %193, 8 
  %197 = inttoptr i64 %196 to i64* 
  %198 = getelementptr  i64, i64* %197, i64 0 
  store  i64 %"5$tmp$3#0", i64* %198 
  ret i64 %193 
}


define external fastcc  i64 @"int_list.remove<0>[410bae77d3]"(i64  %"lst#0", i64  %"v#0")    {
entry:
  %"1$tmp$8#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  %199 = inttoptr i64 %"lst#0" to i64* 
  %200 = getelementptr  i64, i64* %199, i64 0 
  %201 = load  i64, i64* %200 
  %202 = add   i64 %"lst#0", 8 
  %203 = inttoptr i64 %202 to i64* 
  %204 = getelementptr  i64, i64* %203, i64 0 
  %205 = load  i64, i64* %204 
  %"2$tmp$5#0" = icmp eq i64 %201, %"v#0" 
  br i1 %"2$tmp$5#0", label %if.then1, label %if.else1 
if.else:
  ret i64 0 
if.then1:
  ret i64 %205 
if.else1:
  %"5$tmp$3#0" = tail call fastcc  i64  @"int_list.remove<0>[410bae77d3]"(i64  %205, i64  %"v#0")  
  %206 = add   i64 %"lst#0", 8 
  %207 = inttoptr i64 %206 to i64* 
  %208 = getelementptr  i64, i64* %207, i64 0 
  store  i64 %"5$tmp$3#0", i64* %208 
  ret i64 %"lst#0" 
}


define external fastcc  i64 @"int_list.reverse<0>"(i64  %"lst#0")    {
entry:
  %"1$$#0" = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"lst#0", i64  0)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"int_list.reverse_helper<0>"(i64  %"lst#0", i64  %"acc#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %209 = inttoptr i64 %"lst#0" to i64* 
  %210 = getelementptr  i64, i64* %209, i64 0 
  %211 = load  i64, i64* %210 
  %212 = add   i64 %"lst#0", 8 
  %213 = inttoptr i64 %212 to i64* 
  %214 = getelementptr  i64, i64* %213, i64 0 
  %215 = load  i64, i64* %214 
  %216 = trunc i64 16 to i32  
  %217 = tail call ccc  i8*  @wybe_malloc(i32  %216)  
  %218 = ptrtoint i8* %217 to i64 
  %219 = inttoptr i64 %218 to i64* 
  %220 = getelementptr  i64, i64* %219, i64 0 
  store  i64 %211, i64* %220 
  %221 = add   i64 %218, 8 
  %222 = inttoptr i64 %221 to i64* 
  %223 = getelementptr  i64, i64* %222, i64 0 
  store  i64 %"acc#0", i64* %223 
  %"2$$#0" = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %215, i64  %218)  
  ret i64 %"2$$#0" 
if.else:
  ret i64 %"acc#0" 
}


define external fastcc  i64 @"int_list.reverse_helper<0>[410bae77d3]"(i64  %"lst#0", i64  %"acc#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %224 = add   i64 %"lst#0", 8 
  %225 = inttoptr i64 %224 to i64* 
  %226 = getelementptr  i64, i64* %225, i64 0 
  %227 = load  i64, i64* %226 
  %228 = add   i64 %"lst#0", 8 
  %229 = inttoptr i64 %228 to i64* 
  %230 = getelementptr  i64, i64* %229, i64 0 
  store  i64 %"acc#0", i64* %230 
  %"2$$#0" = tail call fastcc  i64  @"int_list.reverse_helper<0>[410bae77d3]"(i64  %227, i64  %"lst#0")  
  ret i64 %"2$$#0" 
if.else:
  ret i64 %"acc#0" 
}


define external fastcc  i64 @"int_list.sort<0>"(i64  %"lst#0")    {
entry:
  %"1$tmp$10#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$10#0", label %if.then, label %if.else 
if.then:
  %231 = inttoptr i64 %"lst#0" to i64* 
  %232 = getelementptr  i64, i64* %231, i64 0 
  %233 = load  i64, i64* %232 
  %234 = add   i64 %"lst#0", 8 
  %235 = inttoptr i64 %234 to i64* 
  %236 = getelementptr  i64, i64* %235, i64 0 
  %237 = load  i64, i64* %236 
  %"2$tmp$3#0" = tail call fastcc  i64  @"int_list.lesser<0>"(i64  %237, i64  %233)  
  %"2$tmp$2#0" = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %"2$tmp$3#0")  
  %"2$tmp$6#0" = tail call fastcc  i64  @"int_list.greater<0>"(i64  %237, i64  %233)  
  %"2$tmp$5#0" = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %"2$tmp$6#0")  
  %238 = trunc i64 16 to i32  
  %239 = tail call ccc  i8*  @wybe_malloc(i32  %238)  
  %240 = ptrtoint i8* %239 to i64 
  %241 = inttoptr i64 %240 to i64* 
  %242 = getelementptr  i64, i64* %241, i64 0 
  store  i64 %233, i64* %242 
  %243 = add   i64 %240, 8 
  %244 = inttoptr i64 %243 to i64* 
  %245 = getelementptr  i64, i64* %244, i64 0 
  store  i64 %"2$tmp$5#0", i64* %245 
  %"2$$#0" = tail call fastcc  i64  @"int_list.extend<0>[410bae77d3]"(i64  %"2$tmp$2#0", i64  %240)  
  ret i64 %"2$$#0" 
if.else:
  ret i64 0 
}


define external fastcc  i64 @"int_list.sort<0>[410bae77d3]"(i64  %"lst#0")    {
entry:
  %"1$tmp$10#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$10#0", label %if.then, label %if.else 
if.then:
  %246 = inttoptr i64 %"lst#0" to i64* 
  %247 = getelementptr  i64, i64* %246, i64 0 
  %248 = load  i64, i64* %247 
  %249 = add   i64 %"lst#0", 8 
  %250 = inttoptr i64 %249 to i64* 
  %251 = getelementptr  i64, i64* %250, i64 0 
  %252 = load  i64, i64* %251 
  %"2$tmp$3#0" = tail call fastcc  i64  @"int_list.lesser<0>"(i64  %252, i64  %248)  
  %"2$tmp$2#0" = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %"2$tmp$3#0")  
  %"2$tmp$6#0" = tail call fastcc  i64  @"int_list.greater<0>[410bae77d3]"(i64  %252, i64  %248)  
  %"2$tmp$5#0" = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %"2$tmp$6#0")  
  %253 = add   i64 %"lst#0", 8 
  %254 = inttoptr i64 %253 to i64* 
  %255 = getelementptr  i64, i64* %254, i64 0 
  store  i64 %"2$tmp$5#0", i64* %255 
  %"2$$#0" = tail call fastcc  i64  @"int_list.extend<0>[410bae77d3]"(i64  %"2$tmp$2#0", i64  %"lst#0")  
  ret i64 %"2$$#0" 
if.else:
  ret i64 0 
}
--------------------------------------------------
 Module int_list.int_list
  representation  : address
  public submods  : 
  public resources: 
  public procs    : int_list.int_list./=<0>
                    int_list.int_list.=<0>
                    int_list.int_list.[]<0>
                    int_list.int_list.[|]<0>
                    int_list.int_list.[|]<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
  imports         : use int_list
                    use wybe
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:int_list.int_list, $right#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    int_list.int_list.=<0>(~$left#0:int_list.int_list, ~$right#0:int_list.int_list, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (2 calls)
0: =($left#0:int_list.int_list, $right#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($left#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp_eq(~$left#0:int_list.int_list, ~$right#0:int_list.int_list, ?$$#0:!wybe.bool)

    1:
        foreign lpvm access($left#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$head#0:wybe.int)
        foreign lpvm access(~$left#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$tail#0:int_list.int_list)
        foreign llvm icmp_ne($right#0:int_list.int_list, 0:wybe.int, ?tmp$9#0:wybe.bool)
        case ~tmp$9#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access($right#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$head#0:wybe.int)
            foreign lpvm access(~$right#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$tail#0:int_list.int_list)
            foreign llvm icmp_eq(~$left$head#0:wybe.int, ~$right$head#0:wybe.int, ?tmp$4#0:wybe.bool) @int:24:28
            case ~tmp$4#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                int_list.int_list.=<0>(~$left$tail#0:int_list.int_list, ~$right$tail#0:int_list.int_list, ?$$#0:wybe.bool) #3





[] > public {inline} (0 calls)
0: [](?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:int_list.int_list, ?$#0:int_list.int_list)


[|] > public {inline} (0 calls)
0: [|](head#0:wybe.int, tail#0:int_list.int_list, ?$#0:int_list.int_list):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:int_list.int_list)
    foreign lpvm mutate(~%$rec#0:int_list.int_list, ?%$rec#1:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:int_list.int_list, ?%$#0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail#0:int_list.int_list)
[|] > public {inline} (12 calls)
1: [|](?head#0:wybe.int, ?tail#0:int_list.int_list, $#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head#0:wybe.int)
        foreign llvm move(undef:int_list.int_list, ?tail#0:int_list.int_list)

    1:
        foreign lpvm access($#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head#0:wybe.int)
        foreign lpvm access(~$#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail#0:int_list.int_list)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



head > public {inline} (0 calls)
0: head($rec#0:int_list.int_list, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

    1:
        foreign lpvm access(~$rec#0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

head > public {inline} (0 calls)
1: head($rec#0:int_list.int_list, ?$rec#1:int_list.int_list, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:int_list.int_list, ?$rec#1:int_list.int_list)

    1:
        foreign lpvm mutate(~%$rec#0:int_list.int_list, ?%$rec#1:int_list.int_list, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



tail > public {inline} (0 calls)
0: tail($rec#0:int_list.int_list, ?$#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:int_list.int_list, ?$#0:int_list.int_list)

    1:
        foreign lpvm access(~$rec#0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:int_list.int_list)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

tail > public {inline} (0 calls)
1: tail($rec#0:int_list.int_list, ?$rec#1:int_list.int_list, $field#0:int_list.int_list, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:int_list.int_list, ?$rec#1:int_list.int_list)

    1:
        foreign lpvm {noalias} mutate(~%$rec#0:int_list.int_list, ?%$rec#1:int_list.int_list, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:int_list.int_list)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'int_list.int_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"int_list.int_list./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i1  @"int_list.int_list.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  %"1$$$#0" = xor i1 %"1$tmp$0#0", 1 
  ret i1 %"1$$$#0" 
}


define external fastcc  i1 @"int_list.int_list.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %"2$tmp$9#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"2$tmp$9#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"3$$$#0" 
if.then1:
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"4$tmp$4#0" = icmp eq i64 %3, %10 
  br i1 %"4$tmp$4#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6$$$#0" = tail call fastcc  i1  @"int_list.int_list.=<0>"(i64  %7, i64  %14)  
  ret i1 %"6$$$#0" 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"int_list.int_list.[]<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i64 @"int_list.int_list.[|]<0>"(i64  %"head#0", i64  %"tail#0")    {
entry:
  %15 = trunc i64 16 to i32  
  %16 = tail call ccc  i8*  @wybe_malloc(i32  %15)  
  %17 = ptrtoint i8* %16 to i64 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  store  i64 %"head#0", i64* %19 
  %20 = add   i64 %17, 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"tail#0", i64* %22 
  ret i64 %17 
}


define external fastcc  {i64, i64, i1} @"int_list.int_list.[|]<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %23 = inttoptr i64 %"$#0" to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"$#0", 8 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = insertvalue {i64, i64, i1} undef, i64 %25, 0 
  %31 = insertvalue {i64, i64, i1} %30, i64 %29, 1 
  %32 = insertvalue {i64, i64, i1} %31, i1 1, 2 
  ret {i64, i64, i1} %32 
if.else:
  %33 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %34 = insertvalue {i64, i64, i1} %33, i64 undef, 1 
  %35 = insertvalue {i64, i64, i1} %34, i1 0, 2 
  ret {i64, i64, i1} %35 
}


define external fastcc  {i64, i1} @"int_list.int_list.head<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %36 = inttoptr i64 %"$rec#0" to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %39 = insertvalue {i64, i1} undef, i64 %38, 0 
  %40 = insertvalue {i64, i1} %39, i1 1, 1 
  ret {i64, i1} %40 
if.else:
  %41 = insertvalue {i64, i1} undef, i64 undef, 0 
  %42 = insertvalue {i64, i1} %41, i1 0, 1 
  ret {i64, i1} %42 
}


define external fastcc  {i64, i1} @"int_list.int_list.head<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %43 = trunc i64 16 to i32  
  %44 = tail call ccc  i8*  @wybe_malloc(i32  %43)  
  %45 = ptrtoint i8* %44 to i64 
  %46 = inttoptr i64 %45 to i8* 
  %47 = inttoptr i64 %"$rec#0" to i8* 
  %48 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %46, i8*  %47, i32  %48, i32  8, i1  0)  
  %49 = inttoptr i64 %45 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  store  i64 %"$field#0", i64* %50 
  %51 = insertvalue {i64, i1} undef, i64 %45, 0 
  %52 = insertvalue {i64, i1} %51, i1 1, 1 
  ret {i64, i1} %52 
if.else:
  %53 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %54 = insertvalue {i64, i1} %53, i1 0, 1 
  ret {i64, i1} %54 
}


define external fastcc  {i64, i1} @"int_list.int_list.tail<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %55 = add   i64 %"$rec#0", 8 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = insertvalue {i64, i1} undef, i64 %58, 0 
  %60 = insertvalue {i64, i1} %59, i1 1, 1 
  ret {i64, i1} %60 
if.else:
  %61 = insertvalue {i64, i1} undef, i64 undef, 0 
  %62 = insertvalue {i64, i1} %61, i1 0, 1 
  ret {i64, i1} %62 
}


define external fastcc  {i64, i1} @"int_list.int_list.tail<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %63 = trunc i64 16 to i32  
  %64 = tail call ccc  i8*  @wybe_malloc(i32  %63)  
  %65 = ptrtoint i8* %64 to i64 
  %66 = inttoptr i64 %65 to i8* 
  %67 = inttoptr i64 %"$rec#0" to i8* 
  %68 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %66, i8*  %67, i32  %68, i32  8, i1  0)  
  %69 = add   i64 %65, 8 
  %70 = inttoptr i64 %69 to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  store  i64 %"$field#0", i64* %71 
  %72 = insertvalue {i64, i1} undef, i64 %65, 0 
  %73 = insertvalue {i64, i1} %72, i1 1, 1 
  ret {i64, i1} %73 
if.else:
  %74 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %75 = insertvalue {i64, i1} %74, i1 0, 1 
  ret {i64, i1} %75 
}
--------------------------------------------------
 Module int_list_test
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : int_list_test.<0>
  imports         : use command_line
                    use int_list
                    use wybe
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (io#0:wybe.phantom, ?io#22:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(24,(int_list_test.test_int_list<0>,fromList [NonAliasedParamCond 0 [],NonAliasedParamCond 1 [],NonAliasedParamCond 2 []])),(34,(int_list.gen$2<0>,fromList [NonAliasedParamCond 0 []])),(35,(int_list.gen$2<0>,fromList [NonAliasedParamCond 0 []])),(36,(int_list.gen$2<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign c {impure} malloc_count(?mc1#0:wybe.int) @memory_management:9:5
    int_list.gen$2<0>[410bae77d3](0:int_list.int_list, 1:wybe.int, 1:wybe.int, 10:wybe.int, 0:int_list.int_list, ?tmp$0#0:int_list.int_list) #34 @int_list:26:5
    int_list.gen$2<0>[410bae77d3](0:int_list.int_list, 2:wybe.int, 2:wybe.int, 20:wybe.int, 0:int_list.int_list, ?tmp$1#0:int_list.int_list) #35 @int_list:26:5
    int_list.gen$2<0>[410bae77d3](0:int_list.int_list, 3:wybe.int, 3:wybe.int, 30:wybe.int, 0:int_list.int_list, ?tmp$2#0:int_list.int_list) #36 @int_list:26:5
    foreign c print_string("x y z:":wybe.string, ~#io#0:wybe.phantom, ?tmp$17#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#io#1:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#1:wybe.phantom, ?tmp$20#0:wybe.phantom) #37 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$20#0:wybe.phantom, ?#io#2:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$1#0:int_list.int_list, ~#io#2:wybe.phantom, ?tmp$23#0:wybe.phantom) #38 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$23#0:wybe.phantom, ?#io#3:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#3:wybe.phantom, ?tmp$26#0:wybe.phantom) #39 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$26#0:wybe.phantom, ?#io#4:wybe.phantom) @io:11:22
    foreign c {impure} malloc_count(?mc2#0:wybe.int) @memory_management:9:5
    foreign llvm sub(~mc2#0:wybe.int, ~mc1#0:wybe.int, ?tmp$3#0:wybe.int) @int:11:24
    foreign c print_string("--------------------":wybe.string, ~#io#4:wybe.phantom, ?tmp$31#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$31#0:wybe.phantom, ?#io#5:wybe.phantom) @io:11:22
    foreign c print_string("tests with alias":wybe.string, ~#io#5:wybe.phantom, ?tmp$34#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$34#0:wybe.phantom, ?#io#6:wybe.phantom) @io:11:22
    foreign c {impure} malloc_count(?mc1#1:wybe.int) @memory_management:9:5
    int_list_test.test_int_list<0>(tmp$0#0:int_list.int_list, tmp$1#0:int_list.int_list, tmp$2#0:int_list.int_list, ~#io#6:wybe.phantom, ?#io#7:wybe.phantom) #13 @int_list_test:47:2
    foreign c {impure} malloc_count(?mc2#1:wybe.int) @memory_management:9:5
    foreign llvm sub(~mc2#1:wybe.int, ~mc1#1:wybe.int, ?tmp$4#0:wybe.int) @int:11:24
    foreign c print_string("original x y z:":wybe.string, ~#io#7:wybe.phantom, ?tmp$39#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$39#0:wybe.phantom, ?#io#8:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#8:wybe.phantom, ?tmp$42#0:wybe.phantom) #40 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$42#0:wybe.phantom, ?#io#9:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$1#0:int_list.int_list, ~#io#9:wybe.phantom, ?tmp$45#0:wybe.phantom) #41 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$45#0:wybe.phantom, ?#io#10:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#10:wybe.phantom, ?tmp$48#0:wybe.phantom) #42 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$48#0:wybe.phantom, ?#io#11:wybe.phantom) @io:11:22
    foreign c print_string("--------------------":wybe.string, ~#io#11:wybe.phantom, ?tmp$51#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$51#0:wybe.phantom, ?#io#12:wybe.phantom) @io:11:22
    foreign c print_string("--------------------":wybe.string, ~#io#12:wybe.phantom, ?tmp$54#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$54#0:wybe.phantom, ?#io#13:wybe.phantom) @io:11:22
    foreign c print_string("tests without alias":wybe.string, ~#io#13:wybe.phantom, ?tmp$57#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$57#0:wybe.phantom, ?#io#14:wybe.phantom) @io:11:22
    foreign c {impure} malloc_count(?mc1#2:wybe.int) @memory_management:9:5
    int_list_test.test_int_list<0>[9e35cb823b](~tmp$0#0:int_list.int_list, ~tmp$1#0:int_list.int_list, ~tmp$2#0:int_list.int_list, ~#io#14:wybe.phantom, ?#io#15:wybe.phantom) #24 @int_list_test:60:2
    foreign c {impure} malloc_count(?mc2#2:wybe.int) @memory_management:9:5
    foreign llvm sub(~mc2#2:wybe.int, ~mc1#2:wybe.int, ?tmp$5#0:wybe.int) @int:11:24
    foreign c print_string("--------------------":wybe.string, ~#io#15:wybe.phantom, ?tmp$62#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$62#0:wybe.phantom, ?#io#16:wybe.phantom) @io:11:22
    foreign c print_string(" ** malloc count of building lists: ":wybe.string, ~#io#16:wybe.phantom, ?#io#17:wybe.phantom) @io:30:35
    foreign c print_int(~tmp$3#0:wybe.int, ~#io#17:wybe.phantom, ?tmp$67#0:wybe.phantom) @io:13:32
    foreign c putchar('\n':wybe.char, ~tmp$67#0:wybe.phantom, ?#io#18:wybe.phantom) @io:11:22
    foreign c print_string(" ** malloc count of test(aliased): ":wybe.string, ~#io#18:wybe.phantom, ?#io#19:wybe.phantom) @io:30:35
    foreign c print_int(~tmp$4#0:wybe.int, ~#io#19:wybe.phantom, ?tmp$72#0:wybe.phantom) @io:13:32
    foreign c putchar('\n':wybe.char, ~tmp$72#0:wybe.phantom, ?#io#20:wybe.phantom) @io:11:22
    foreign c print_string(" ** malloc count of test(non-aliased): ":wybe.string, ~#io#20:wybe.phantom, ?#io#21:wybe.phantom) @io:30:35
    foreign c print_int(~tmp$5#0:wybe.int, ~#io#21:wybe.phantom, ?tmp$77#0:wybe.phantom) @io:13:32
    foreign c putchar('\n':wybe.char, ~tmp$77#0:wybe.phantom, ?#io#22:wybe.phantom) @io:11:22


test_int_list > (2 calls)
0: test_int_list(x#0:int_list.int_list, y#0:int_list.int_list, z#0:int_list.int_list, io#0:wybe.phantom, ?io#10:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 1,InterestingUnaliased 2]
 MultiSpeczDepInfo: [(2,(int_list.append<0>,fromList [NonAliasedParamCond 0 [1]])),(7,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(8,(int_list.extend<0>,fromList [NonAliasedParamCond 0 []])),(11,(int_list.insert<0>,fromList [NonAliasedParamCond 0 []])),(12,(int_list.pop<0>,fromList [NonAliasedParamCond 0 []])),(13,(int_list.remove<0>,fromList [NonAliasedParamCond 0 []])),(16,(int_list.sort<0>,fromList [NonAliasedParamCond 0 []])),(19,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [0]])),(20,(int_list.reverse_helper<0>,fromList [NonAliasedParamCond 0 [2]]))]
    int_list.reverse_helper<0>(~%x#0:int_list.int_list, 0:int_list.int_list, ?%x#1:int_list.int_list) #19 @int_list:140:42
    int_list.reverse_helper<0>(~%z#0:int_list.int_list, 0:int_list.int_list, ?%z#1:int_list.int_list) #20 @int_list:140:42
    int_list.append<0>(~y#0:int_list.int_list, 99:wybe.int, ?tmp$0#0:int_list.int_list) #2 @int_list_test:8:10
    foreign c print_string("-":wybe.string, ~#io#0:wybe.phantom, ?tmp$10#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#io#1:wybe.phantom) @io:11:22
    int_list.print<0>(x#1:int_list.int_list, ~#io#1:wybe.phantom, ?tmp$13#0:wybe.phantom) #21 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#2:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#2:wybe.phantom, ?tmp$16#0:wybe.phantom) #22 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$16#0:wybe.phantom, ?#io#3:wybe.phantom) @io:11:22
    int_list.print<0>(z#1:int_list.int_list, ~#io#3:wybe.phantom, ?tmp$19#0:wybe.phantom) #23 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$19#0:wybe.phantom, ?#io#4:wybe.phantom) @io:11:22
    int_list.extend<0>[410bae77d3](~x#1:int_list.int_list, ~tmp$0#0:int_list.int_list, ?tmp$1#0:int_list.int_list) #7 @int_list_test:14:10
    int_list.extend<0>[410bae77d3](~tmp$1#0:int_list.int_list, ~z#1:int_list.int_list, ?tmp$2#0:int_list.int_list) #8 @int_list_test:15:10
    foreign c print_string("-":wybe.string, ~#io#4:wybe.phantom, ?tmp$22#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$22#0:wybe.phantom, ?#io#5:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#5:wybe.phantom, ?tmp$25#0:wybe.phantom) #24 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$25#0:wybe.phantom, ?#io#6:wybe.phantom) @io:11:22
    int_list.insert<0>[410bae77d3](~tmp$2#0:int_list.int_list, 4:wybe.int, 78:wybe.int, ?tmp$3#0:int_list.int_list) #11 @int_list_test:19:10
    int_list.pop<0>[410bae77d3](~tmp$3#0:int_list.int_list, 20:wybe.int, ?tmp$4#0:int_list.int_list) #12 @int_list_test:20:10
    int_list.remove<0>[410bae77d3](~tmp$4#0:int_list.int_list, 2:wybe.int, ?tmp$5#0:int_list.int_list) #13 @int_list_test:21:10
    foreign c print_string("-":wybe.string, ~#io#6:wybe.phantom, ?tmp$28#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$28#0:wybe.phantom, ?#io#7:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$5#0:int_list.int_list, ~#io#7:wybe.phantom, ?tmp$31#0:wybe.phantom) #25 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$31#0:wybe.phantom, ?#io#8:wybe.phantom) @io:11:22
    int_list.sort<0>[410bae77d3](~tmp$5#0:int_list.int_list, ?%l#5:int_list.int_list) #16 @int_list_test:25:5
    foreign c print_string("-":wybe.string, ~#io#8:wybe.phantom, ?tmp$34#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$34#0:wybe.phantom, ?#io#9:wybe.phantom) @io:11:22
    int_list.print<0>(~l#5:int_list.int_list, ~#io#9:wybe.phantom, ?tmp$37#0:wybe.phantom) #26 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$37#0:wybe.phantom, ?#io#10:wybe.phantom) @io:11:22
 [9e35cb823b] [NonAliasedParam 0,NonAliasedParam 1,NonAliasedParam 2] :
    int_list.reverse_helper<0>[410bae77d3](~%x#0:int_list.int_list, 0:int_list.int_list, ?%x#1:int_list.int_list) #19 @int_list:140:42
    int_list.reverse_helper<0>[410bae77d3](~%z#0:int_list.int_list, 0:int_list.int_list, ?%z#1:int_list.int_list) #20 @int_list:140:42
    int_list.append<0>[410bae77d3](~y#0:int_list.int_list, 99:wybe.int, ?tmp$0#0:int_list.int_list) #2 @int_list_test:8:10
    foreign c print_string("-":wybe.string, ~#io#0:wybe.phantom, ?tmp$10#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#io#1:wybe.phantom) @io:11:22
    int_list.print<0>(x#1:int_list.int_list, ~#io#1:wybe.phantom, ?tmp$13#0:wybe.phantom) #21 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#2:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$0#0:int_list.int_list, ~#io#2:wybe.phantom, ?tmp$16#0:wybe.phantom) #22 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$16#0:wybe.phantom, ?#io#3:wybe.phantom) @io:11:22
    int_list.print<0>(z#1:int_list.int_list, ~#io#3:wybe.phantom, ?tmp$19#0:wybe.phantom) #23 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$19#0:wybe.phantom, ?#io#4:wybe.phantom) @io:11:22
    int_list.extend<0>[410bae77d3](~x#1:int_list.int_list, ~tmp$0#0:int_list.int_list, ?tmp$1#0:int_list.int_list) #7 @int_list_test:14:10
    int_list.extend<0>[410bae77d3](~tmp$1#0:int_list.int_list, ~z#1:int_list.int_list, ?tmp$2#0:int_list.int_list) #8 @int_list_test:15:10
    foreign c print_string("-":wybe.string, ~#io#4:wybe.phantom, ?tmp$22#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$22#0:wybe.phantom, ?#io#5:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$2#0:int_list.int_list, ~#io#5:wybe.phantom, ?tmp$25#0:wybe.phantom) #24 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$25#0:wybe.phantom, ?#io#6:wybe.phantom) @io:11:22
    int_list.insert<0>[410bae77d3](~tmp$2#0:int_list.int_list, 4:wybe.int, 78:wybe.int, ?tmp$3#0:int_list.int_list) #11 @int_list_test:19:10
    int_list.pop<0>[410bae77d3](~tmp$3#0:int_list.int_list, 20:wybe.int, ?tmp$4#0:int_list.int_list) #12 @int_list_test:20:10
    int_list.remove<0>[410bae77d3](~tmp$4#0:int_list.int_list, 2:wybe.int, ?tmp$5#0:int_list.int_list) #13 @int_list_test:21:10
    foreign c print_string("-":wybe.string, ~#io#6:wybe.phantom, ?tmp$28#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$28#0:wybe.phantom, ?#io#7:wybe.phantom) @io:11:22
    int_list.print<0>(tmp$5#0:int_list.int_list, ~#io#7:wybe.phantom, ?tmp$31#0:wybe.phantom) #25 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$31#0:wybe.phantom, ?#io#8:wybe.phantom) @io:11:22
    int_list.sort<0>[410bae77d3](~tmp$5#0:int_list.int_list, ?%l#5:int_list.int_list) #16 @int_list_test:25:5
    foreign c print_string("-":wybe.string, ~#io#8:wybe.phantom, ?tmp$34#0:wybe.phantom) @io:30:35
    foreign c putchar('\n':wybe.char, ~tmp$34#0:wybe.phantom, ?#io#9:wybe.phantom) @io:11:22
    int_list.print<0>(~l#5:int_list.int_list, ~#io#9:wybe.phantom, ?tmp$37#0:wybe.phantom) #26 @int_list:17:6
    foreign c putchar('\n':wybe.char, ~tmp$37#0:wybe.phantom, ?#io#10:wybe.phantom) @io:11:22

  LLVM code       :

; ModuleID = 'int_list_test'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_string(i64)    


declare external ccc  i64 @malloc_count()    


declare external fastcc  void @"int_list.print<0>"(i64)    


declare external fastcc  i64 @"int_list.gen$2<0>[410bae77d3]"(i64, i64, i64, i64, i64)    


@int_list_test.21 =    constant [40 x i8] c" ** malloc count of test(non-aliased): \00"


@int_list_test.19 =    constant [36 x i8] c" ** malloc count of test(aliased): \00"


@int_list_test.17 =    constant [37 x i8] c" ** malloc count of building lists: \00"


@int_list_test.15 =    constant [21 x i8] c"--------------------\00"


@int_list_test.13 =    constant [20 x i8] c"tests without alias\00"


@int_list_test.11 =    constant [21 x i8] c"--------------------\00"


@int_list_test.9 =    constant [21 x i8] c"--------------------\00"


@int_list_test.7 =    constant [16 x i8] c"original x y z:\00"


@int_list_test.5 =    constant [17 x i8] c"tests with alias\00"


@int_list_test.3 =    constant [21 x i8] c"--------------------\00"


@int_list_test.1 =    constant [7 x i8] c"x y z:\00"


declare external fastcc  i64 @"int_list.sort<0>[410bae77d3]"(i64)    


declare external fastcc  i64 @"int_list.remove<0>[410bae77d3]"(i64, i64)    


declare external fastcc  i64 @"int_list.pop<0>[410bae77d3]"(i64, i64)    


declare external fastcc  i64 @"int_list.insert<0>[410bae77d3]"(i64, i64, i64)    


declare external fastcc  i64 @"int_list.extend<0>[410bae77d3]"(i64, i64)    


declare external fastcc  i64 @"int_list.append<0>"(i64, i64)    


declare external fastcc  i64 @"int_list.reverse_helper<0>"(i64, i64)    


@int_list_test.29 =    constant [2 x i8] c"-\00"


@int_list_test.27 =    constant [2 x i8] c"-\00"


@int_list_test.25 =    constant [2 x i8] c"-\00"


@int_list_test.23 =    constant [2 x i8] c"-\00"


declare external fastcc  i64 @"int_list.append<0>[410bae77d3]"(i64, i64)    


declare external fastcc  i64 @"int_list.reverse_helper<0>[410bae77d3]"(i64, i64)    


@int_list_test.37 =    constant [2 x i8] c"-\00"


@int_list_test.35 =    constant [2 x i8] c"-\00"


@int_list_test.33 =    constant [2 x i8] c"-\00"


@int_list_test.31 =    constant [2 x i8] c"-\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"int_list_test.<0>"()    {
entry:
  %"1$mc1#0" = tail call ccc  i64  @malloc_count()  
  %"1$tmp$0#0" = tail call fastcc  i64  @"int_list.gen$2<0>[410bae77d3]"(i64  0, i64  1, i64  1, i64  10, i64  0)  
  %"1$tmp$1#0" = tail call fastcc  i64  @"int_list.gen$2<0>[410bae77d3]"(i64  0, i64  2, i64  2, i64  20, i64  0)  
  %"1$tmp$2#0" = tail call fastcc  i64  @"int_list.gen$2<0>[410bae77d3]"(i64  0, i64  3, i64  3, i64  30, i64  0)  
  %2 = ptrtoint i8* getelementptr inbounds ([7 x i8], [7 x i8]* @int_list_test.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$1#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$2#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$mc2#0" = tail call ccc  i64  @malloc_count()  
  %"1$tmp$3#0" = sub   i64 %"1$mc2#0", %"1$mc1#0" 
  %4 = ptrtoint i8* getelementptr inbounds ([21 x i8], [21 x i8]* @int_list_test.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  tail call ccc  void  @putchar(i8  10)  
  %6 = ptrtoint i8* getelementptr inbounds ([17 x i8], [17 x i8]* @int_list_test.5, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  %"1$mc1#1" = tail call ccc  i64  @malloc_count()  
  tail call fastcc  void  @"int_list_test.test_int_list<0>"(i64  %"1$tmp$0#0", i64  %"1$tmp$1#0", i64  %"1$tmp$2#0")  
  %"1$mc2#1" = tail call ccc  i64  @malloc_count()  
  %"1$tmp$4#0" = sub   i64 %"1$mc2#1", %"1$mc1#1" 
  %8 = ptrtoint i8* getelementptr inbounds ([16 x i8], [16 x i8]* @int_list_test.7, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %8)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$1#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$2#0")  
  tail call ccc  void  @putchar(i8  10)  
  %10 = ptrtoint i8* getelementptr inbounds ([21 x i8], [21 x i8]* @int_list_test.9, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %10)  
  tail call ccc  void  @putchar(i8  10)  
  %12 = ptrtoint i8* getelementptr inbounds ([21 x i8], [21 x i8]* @int_list_test.11, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %12)  
  tail call ccc  void  @putchar(i8  10)  
  %14 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @int_list_test.13, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %14)  
  tail call ccc  void  @putchar(i8  10)  
  %"1$mc1#2" = tail call ccc  i64  @malloc_count()  
  tail call fastcc  void  @"int_list_test.test_int_list<0>[9e35cb823b]"(i64  %"1$tmp$0#0", i64  %"1$tmp$1#0", i64  %"1$tmp$2#0")  
  %"1$mc2#2" = tail call ccc  i64  @malloc_count()  
  %"1$tmp$5#0" = sub   i64 %"1$mc2#2", %"1$mc1#2" 
  %16 = ptrtoint i8* getelementptr inbounds ([21 x i8], [21 x i8]* @int_list_test.15, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %16)  
  tail call ccc  void  @putchar(i8  10)  
  %18 = ptrtoint i8* getelementptr inbounds ([37 x i8], [37 x i8]* @int_list_test.17, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %18)  
  tail call ccc  void  @print_int(i64  %"1$tmp$3#0")  
  tail call ccc  void  @putchar(i8  10)  
  %20 = ptrtoint i8* getelementptr inbounds ([36 x i8], [36 x i8]* @int_list_test.19, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %20)  
  tail call ccc  void  @print_int(i64  %"1$tmp$4#0")  
  tail call ccc  void  @putchar(i8  10)  
  %22 = ptrtoint i8* getelementptr inbounds ([40 x i8], [40 x i8]* @int_list_test.21, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %22)  
  tail call ccc  void  @print_int(i64  %"1$tmp$5#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"int_list_test.test_int_list<0>"(i64  %"x#0", i64  %"y#0", i64  %"z#0")    {
entry:
  %"1$x#1" = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"x#0", i64  0)  
  %"1$z#1" = tail call fastcc  i64  @"int_list.reverse_helper<0>"(i64  %"z#0", i64  0)  
  %"1$tmp$0#0" = tail call fastcc  i64  @"int_list.append<0>"(i64  %"y#0", i64  99)  
  %24 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.23, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %24)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$x#1")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$z#1")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$tmp$1#0" = tail call fastcc  i64  @"int_list.extend<0>[410bae77d3]"(i64  %"1$x#1", i64  %"1$tmp$0#0")  
  %"1$tmp$2#0" = tail call fastcc  i64  @"int_list.extend<0>[410bae77d3]"(i64  %"1$tmp$1#0", i64  %"1$z#1")  
  %26 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.25, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %26)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$2#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$tmp$3#0" = tail call fastcc  i64  @"int_list.insert<0>[410bae77d3]"(i64  %"1$tmp$2#0", i64  4, i64  78)  
  %"1$tmp$4#0" = tail call fastcc  i64  @"int_list.pop<0>[410bae77d3]"(i64  %"1$tmp$3#0", i64  20)  
  %"1$tmp$5#0" = tail call fastcc  i64  @"int_list.remove<0>[410bae77d3]"(i64  %"1$tmp$4#0", i64  2)  
  %28 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.27, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %28)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$5#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$l#5" = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %"1$tmp$5#0")  
  %30 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.29, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %30)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$l#5")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"int_list_test.test_int_list<0>[9e35cb823b]"(i64  %"x#0", i64  %"y#0", i64  %"z#0")    {
entry:
  %"1$x#1" = tail call fastcc  i64  @"int_list.reverse_helper<0>[410bae77d3]"(i64  %"x#0", i64  0)  
  %"1$z#1" = tail call fastcc  i64  @"int_list.reverse_helper<0>[410bae77d3]"(i64  %"z#0", i64  0)  
  %"1$tmp$0#0" = tail call fastcc  i64  @"int_list.append<0>[410bae77d3]"(i64  %"y#0", i64  99)  
  %32 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.31, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %32)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$x#1")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$z#1")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$tmp$1#0" = tail call fastcc  i64  @"int_list.extend<0>[410bae77d3]"(i64  %"1$x#1", i64  %"1$tmp$0#0")  
  %"1$tmp$2#0" = tail call fastcc  i64  @"int_list.extend<0>[410bae77d3]"(i64  %"1$tmp$1#0", i64  %"1$z#1")  
  %34 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.33, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %34)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$2#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$tmp$3#0" = tail call fastcc  i64  @"int_list.insert<0>[410bae77d3]"(i64  %"1$tmp$2#0", i64  4, i64  78)  
  %"1$tmp$4#0" = tail call fastcc  i64  @"int_list.pop<0>[410bae77d3]"(i64  %"1$tmp$3#0", i64  20)  
  %"1$tmp$5#0" = tail call fastcc  i64  @"int_list.remove<0>[410bae77d3]"(i64  %"1$tmp$4#0", i64  2)  
  %36 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.35, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %36)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$tmp$5#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$l#5" = tail call fastcc  i64  @"int_list.sort<0>[410bae77d3]"(i64  %"1$tmp$5#0")  
  %38 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @int_list_test.37, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %38)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %"1$l#5")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

----------------------------------------------------------------------



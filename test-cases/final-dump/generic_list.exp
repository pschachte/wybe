======================================================================
AFTER EVERYTHING:
 Module generic_list(T)
  representation  : address
  public submods  : 
  public resources: 
  public procs    : generic_list.append<0>
                    generic_list.car<0>
                    generic_list.car<1>
                    generic_list.cdr<0>
                    generic_list.cdr<1>
                    generic_list.cons<0>
                    generic_list.cons<1>
                    generic_list.length<0>
                    generic_list.nil<0>
  imports         : use wybe
  resources       : 
  procs           : 

append > public (1 calls)
0: generic_list.append<0>
append(x##0:generic_list(T), y##0:generic_list(T), outByReference #result##0:generic_list(T))<{}; {}>:
  AliasPairs: [(#result##0,y##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(generic_list.append<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~y##0:generic_list(T), ?#result##0:generic_list(T)) @generic_list:nn:nn

    1:
        foreign lpvm access(x##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @generic_list:nn:nn
        foreign lpvm access(~x##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:generic_list(T), ?tmp#9##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @generic_list:nn:nn
        generic_list.append<0>(~t##0:generic_list(T), ~y##0:generic_list(T), outByReference tmp#2##0:generic_list(T)) #1 @generic_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:generic_list(T)) @generic_list:nn:nn



car > public {inline} (0 calls)
0: generic_list.car<0>
car(#rec##0:generic_list(T), ?#result##0:T, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?#result##0:T)

    1:
        foreign lpvm access(~#rec##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:T) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

car > public {inline} (0 calls)
1: generic_list.car<1>
car(#rec##0:generic_list(T), ?#rec##1:generic_list(T), #field##0:T, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:generic_list(T), ?#rec##1:generic_list(T))

    1:
        foreign lpvm mutate(~#rec##0:generic_list(T), ?#rec##1:generic_list(T), 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:T) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



cdr > public {inline} (0 calls)
0: generic_list.cdr<0>
cdr(#rec##0:generic_list(T), ?#result##0:generic_list(T), ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:generic_list(T), ?#result##0:generic_list(T))

    1:
        foreign lpvm access(~#rec##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

cdr > public {inline} (0 calls)
1: generic_list.cdr<1>
cdr(#rec##0:generic_list(T), ?#rec##1:generic_list(T), #field##0:generic_list(T), ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:generic_list(T), ?#rec##1:generic_list(T))

    1:
        foreign lpvm {noalias} mutate(~#rec##0:generic_list(T), ?#rec##1:generic_list(T), 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



cons > public {inline} (1 calls)
0: generic_list.cons<0>
cons(car##0:T, cdr##0:generic_list(T), ?#result##0:generic_list(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:generic_list(T)) @generic_list:nn:nn
    foreign lpvm mutate(~#rec##0:generic_list(T), ?#rec##1:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~car##0:T) @generic_list:nn:nn
    foreign lpvm mutate(~#rec##1:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~cdr##0:generic_list(T)) @generic_list:nn:nn
cons > public {inline} (6 calls)
1: generic_list.cons<1>
cons(?car##0:T, ?cdr##0:generic_list(T), #result##0:generic_list(T), ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?car##0:T)
        foreign llvm move(undef:generic_list(T), ?cdr##0:generic_list(T))

    1:
        foreign lpvm access(#result##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?car##0:T) @generic_list:nn:nn
        foreign lpvm access(~#result##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?cdr##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



length > public {inline} (0 calls)
0: generic_list.length<0>
length(x##0:generic_list(T), ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_list.length1<0>(~x##0:generic_list(T), 0:wybe.int, ?#result##0:wybe.int) #0 @generic_list:nn:nn


length1 > (2 calls)
0: generic_list.length1<0>
length1(x##0:generic_list(T), acc##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~acc##0:wybe.int, ?#result##0:wybe.int) @generic_list:nn:nn

    1:
        foreign lpvm access(~x##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm add(~acc##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
        generic_list.length1<0>(~t##0:generic_list(T), ~tmp#2##0:wybe.int, ?#result##0:wybe.int) #2 @generic_list:nn:nn



nil > public {inline} (0 calls)
0: generic_list.nil<0>
nil(?#result##0:generic_list(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:generic_list(T), ?#result##0:generic_list(T))

  LLVM code       :

; ModuleID = 'generic_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"generic_list.append<0>"(i64  %"x##0", i64  %"y##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#5##0" = icmp ne i64 %"x##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"x##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"x##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 %3, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  store  i64 %10, i64* %"#result##0" 
  musttail call fastcc  void  @"generic_list.append<0>"(i64  %7, i64  %"y##0", i64*  %14)  
  ret void 
if.else:
  store  i64 %"y##0", i64* %"#result##0" 
  ret void 
}


define external fastcc  {i64, i1} @"generic_list.car<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %15 = inttoptr i64 %"#rec##0" to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = insertvalue {i64, i1} undef, i64 %17, 0 
  %19 = insertvalue {i64, i1} %18, i1 1, 1 
  ret {i64, i1} %19 
if.else:
  %20 = insertvalue {i64, i1} undef, i64 undef, 0 
  %21 = insertvalue {i64, i1} %20, i1 0, 1 
  ret {i64, i1} %21 
}


define external fastcc  {i64, i1} @"generic_list.car<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %22 = trunc i64 16 to i32  
  %23 = tail call ccc  i8*  @wybe_malloc(i32  %22)  
  %24 = ptrtoint i8* %23 to i64 
  %25 = inttoptr i64 %24 to i8* 
  %26 = inttoptr i64 %"#rec##0" to i8* 
  %27 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %25, i8*  %26, i32  %27, i1  0)  
  %28 = inttoptr i64 %24 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  store  i64 %"#field##0", i64* %29 
  %30 = insertvalue {i64, i1} undef, i64 %24, 0 
  %31 = insertvalue {i64, i1} %30, i1 1, 1 
  ret {i64, i1} %31 
if.else:
  %32 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %33 = insertvalue {i64, i1} %32, i1 0, 1 
  ret {i64, i1} %33 
}


define external fastcc  {i64, i1} @"generic_list.cdr<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %34 = add   i64 %"#rec##0", 8 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  %37 = load  i64, i64* %36 
  %38 = insertvalue {i64, i1} undef, i64 %37, 0 
  %39 = insertvalue {i64, i1} %38, i1 1, 1 
  ret {i64, i1} %39 
if.else:
  %40 = insertvalue {i64, i1} undef, i64 undef, 0 
  %41 = insertvalue {i64, i1} %40, i1 0, 1 
  ret {i64, i1} %41 
}


define external fastcc  {i64, i1} @"generic_list.cdr<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %42 = trunc i64 16 to i32  
  %43 = tail call ccc  i8*  @wybe_malloc(i32  %42)  
  %44 = ptrtoint i8* %43 to i64 
  %45 = inttoptr i64 %44 to i8* 
  %46 = inttoptr i64 %"#rec##0" to i8* 
  %47 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %45, i8*  %46, i32  %47, i1  0)  
  %48 = add   i64 %44, 8 
  %49 = inttoptr i64 %48 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  store  i64 %"#field##0", i64* %50 
  %51 = insertvalue {i64, i1} undef, i64 %44, 0 
  %52 = insertvalue {i64, i1} %51, i1 1, 1 
  ret {i64, i1} %52 
if.else:
  %53 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %54 = insertvalue {i64, i1} %53, i1 0, 1 
  ret {i64, i1} %54 
}


define external fastcc  i64 @"generic_list.cons<0>"(i64  %"car##0", i64  %"cdr##0")    {
entry:
  %55 = trunc i64 16 to i32  
  %56 = tail call ccc  i8*  @wybe_malloc(i32  %55)  
  %57 = ptrtoint i8* %56 to i64 
  %58 = inttoptr i64 %57 to i64* 
  %59 = getelementptr  i64, i64* %58, i64 0 
  store  i64 %"car##0", i64* %59 
  %60 = add   i64 %57, 8 
  %61 = inttoptr i64 %60 to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  store  i64 %"cdr##0", i64* %62 
  ret i64 %57 
}


define external fastcc  {i64, i64, i1} @"generic_list.cons<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#result##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %63 = inttoptr i64 %"#result##0" to i64* 
  %64 = getelementptr  i64, i64* %63, i64 0 
  %65 = load  i64, i64* %64 
  %66 = add   i64 %"#result##0", 8 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  %69 = load  i64, i64* %68 
  %70 = insertvalue {i64, i64, i1} undef, i64 %65, 0 
  %71 = insertvalue {i64, i64, i1} %70, i64 %69, 1 
  %72 = insertvalue {i64, i64, i1} %71, i1 1, 2 
  ret {i64, i64, i1} %72 
if.else:
  %73 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %74 = insertvalue {i64, i64, i1} %73, i64 undef, 1 
  %75 = insertvalue {i64, i64, i1} %74, i1 0, 2 
  ret {i64, i64, i1} %75 
}


define external fastcc  i64 @"generic_list.length<0>"(i64  %"x##0")    {
entry:
  %"1##result##0" = tail call fastcc  i64  @"generic_list.length1<0>"(i64  %"x##0", i64  0)  
  ret i64 %"1##result##0" 
}


define external fastcc  i64 @"generic_list.length1<0>"(i64  %"x##0", i64  %"acc##0")    {
entry:
  %"1#tmp#5##0" = icmp ne i64 %"x##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %76 = add   i64 %"x##0", 8 
  %77 = inttoptr i64 %76 to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  %79 = load  i64, i64* %78 
  %"2#tmp#2##0" = add   i64 %"acc##0", 1 
  %"2##result##0" = musttail call fastcc  i64  @"generic_list.length1<0>"(i64  %79, i64  %"2#tmp#2##0")  
  ret i64 %"2##result##0" 
if.else:
  ret i64 %"acc##0" 
}


define external fastcc  i64 @"generic_list.nil<0>"()    {
entry:
  ret i64 0 
}

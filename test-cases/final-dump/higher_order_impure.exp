======================================================================
AFTER EVERYTHING:
 Module higher_order_impure
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : higher_order_impure.<0>
                    higher_order_impure.measure<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: higher_order_impure.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    higher_order_impure.#anon#1<0>(_:wybe.list(wybe.int)) #0 @higher_order_impure:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom) @higher_order_impure:nn:nn
    foreign c print_float(3.0:wybe.float, ~tmp#18##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @higher_order_impure:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @higher_order_impure:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @higher_order_impure:nn:nn


proc #anon#1 > {inline,impure} (1 calls)
0: higher_order_impure.#anon#1<0>
#anon#1([^l2##0:wybe.list(wybe.int)])<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
proc #anon#1 > {inline,impure} (1 calls)
1: higher_order_impure.#anon#1<1>
#anon#1([^l2##0:wybe.list(wybe.int)])<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []


proc measure > public {inline,impure} (1 calls)
0: higher_order_impure.measure<0>
measure(func##0:{impure}(), ?seconds_elapsed##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~func##0:{impure}() #0 @higher_order_impure:nn:nn
    foreign llvm move(3.0:wybe.float, ?seconds_elapsed##0:wybe.float) @higher_order_impure:nn:nn

  LLVM code       :

; ModuleID = 'higher_order_impure'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_float(double)    


declare external ccc  ptr @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0.p0.i64(ptr, ptr, i32, i1)    


define external fastcc  void @"higher_order_impure.<0>"() alwaysinline   {
entry:
  tail call fastcc  void  @"higher_order_impure.#anon#1<0>"()  
  call ccc  void  @print_float(double  3.000000e0)  
  call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"higher_order_impure.#anon#1<0>"() alwaysinline   {
entry:
  ret void 
}


define external fastcc  void @"higher_order_impure.#anon#1<1>"(i64  %"#env##0") alwaysinline   {
entry:
  ret void 
}


define external fastcc  double @"higher_order_impure.measure<0>"(i64  %"func##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"func##0" to ptr 
  %1 = load  i64, ptr %0 
  %2 = inttoptr i64 %1 to void (i64)* 
  tail call fastcc  void  %2(i64  %"func##0")  
  ret double 3.000000e0 
}

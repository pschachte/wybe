======================================================================
AFTER EVERYTHING:
 Module ctor_visibility
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use ctor_visibility.all_priv
                    use ctor_visibility.all_public_long
                    use ctor_visibility.all_public_short
                    use ctor_visibility.ctor_keyword
                    use ctor_visibility.one_pub
                    use ctor_visibility.one_pub2
                    use ctor_visibility.with_fields
                    use ctor_visibility.with_fields2
                    use wybe
  resources       : 
  submodules      : ctor_visibility.all_priv, ctor_visibility.all_public_long, ctor_visibility.all_public_short, ctor_visibility.ctor_keyword, ctor_visibility.one_pub, ctor_visibility.one_pub2, ctor_visibility.with_fields, ctor_visibility.with_fields2
  procs           : 


  LLVM code       :

; ModuleID = 'ctor_visibility'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    
--------------------------------------------------
 Module ctor_visibility.all_priv
  representation  : 1 bit unsigned
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.all_priv.=<0>
                    ctor_visibility.all_priv.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: ctor_visibility.all_priv.=<0>
=(#left##0:ctor_visibility.all_priv, #right##0:ctor_visibility.all_priv, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.all_priv, ~#right##0:ctor_visibility.all_priv, ?#success##0:wybe.bool)


bar > {inline} (0 calls)
0: ctor_visibility.all_priv.bar<0>
bar(?#result##0:ctor_visibility.all_priv)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:ctor_visibility.all_priv, ?#result##0:ctor_visibility.all_priv)


foo > {inline} (0 calls)
0: ctor_visibility.all_priv.foo<0>
foo(?#result##0:ctor_visibility.all_priv)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:ctor_visibility.all_priv, ?#result##0:ctor_visibility.all_priv)


~= > public {inline} (0 calls)
0: ctor_visibility.all_priv.~=<0>
~=(#left##0:ctor_visibility.all_priv, #right##0:ctor_visibility.all_priv, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.all_priv, ~#right##0:ctor_visibility.all_priv, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'ctor_visibility.all_priv'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"ctor_visibility.all_priv.=<0>"(i1  %"#left##0", i1  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i1 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i1 @"ctor_visibility.all_priv.bar<0>"() alwaysinline   {
entry:
  ret i1 1 
}


define external fastcc  i1 @"ctor_visibility.all_priv.foo<0>"() alwaysinline   {
entry:
  ret i1 0 
}


define external fastcc  i1 @"ctor_visibility.all_priv.~=<0>"(i1  %"#left##0", i1  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i1 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module ctor_visibility.all_public_long
  representation  : 1 bit unsigned
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.all_public_long.=<0>
                    ctor_visibility.all_public_long.bar<0>
                    ctor_visibility.all_public_long.foo<0>
                    ctor_visibility.all_public_long.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: ctor_visibility.all_public_long.=<0>
=(#left##0:ctor_visibility.all_public_long, #right##0:ctor_visibility.all_public_long, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.all_public_long, ~#right##0:ctor_visibility.all_public_long, ?#success##0:wybe.bool)


bar > public {inline} (0 calls)
0: ctor_visibility.all_public_long.bar<0>
bar(?#result##0:ctor_visibility.all_public_long)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:ctor_visibility.all_public_long, ?#result##0:ctor_visibility.all_public_long)


foo > public {inline} (0 calls)
0: ctor_visibility.all_public_long.foo<0>
foo(?#result##0:ctor_visibility.all_public_long)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:ctor_visibility.all_public_long, ?#result##0:ctor_visibility.all_public_long)


~= > public {inline} (0 calls)
0: ctor_visibility.all_public_long.~=<0>
~=(#left##0:ctor_visibility.all_public_long, #right##0:ctor_visibility.all_public_long, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.all_public_long, ~#right##0:ctor_visibility.all_public_long, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'ctor_visibility.all_public_long'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"ctor_visibility.all_public_long.=<0>"(i1  %"#left##0", i1  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i1 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i1 @"ctor_visibility.all_public_long.bar<0>"() alwaysinline   {
entry:
  ret i1 1 
}


define external fastcc  i1 @"ctor_visibility.all_public_long.foo<0>"() alwaysinline   {
entry:
  ret i1 0 
}


define external fastcc  i1 @"ctor_visibility.all_public_long.~=<0>"(i1  %"#left##0", i1  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i1 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module ctor_visibility.all_public_short
  representation  : 1 bit unsigned
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.all_public_short.=<0>
                    ctor_visibility.all_public_short.bar<0>
                    ctor_visibility.all_public_short.foo<0>
                    ctor_visibility.all_public_short.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: ctor_visibility.all_public_short.=<0>
=(#left##0:ctor_visibility.all_public_short, #right##0:ctor_visibility.all_public_short, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.all_public_short, ~#right##0:ctor_visibility.all_public_short, ?#success##0:wybe.bool)


bar > public {inline} (0 calls)
0: ctor_visibility.all_public_short.bar<0>
bar(?#result##0:ctor_visibility.all_public_short)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:ctor_visibility.all_public_short, ?#result##0:ctor_visibility.all_public_short)


foo > public {inline} (0 calls)
0: ctor_visibility.all_public_short.foo<0>
foo(?#result##0:ctor_visibility.all_public_short)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:ctor_visibility.all_public_short, ?#result##0:ctor_visibility.all_public_short)


~= > public {inline} (0 calls)
0: ctor_visibility.all_public_short.~=<0>
~=(#left##0:ctor_visibility.all_public_short, #right##0:ctor_visibility.all_public_short, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.all_public_short, ~#right##0:ctor_visibility.all_public_short, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'ctor_visibility.all_public_short'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"ctor_visibility.all_public_short.=<0>"(i1  %"#left##0", i1  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i1 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i1 @"ctor_visibility.all_public_short.bar<0>"() alwaysinline   {
entry:
  ret i1 1 
}


define external fastcc  i1 @"ctor_visibility.all_public_short.foo<0>"() alwaysinline   {
entry:
  ret i1 0 
}


define external fastcc  i1 @"ctor_visibility.all_public_short.~=<0>"(i1  %"#left##0", i1  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i1 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module ctor_visibility.ctor_keyword
  representation  : 1 bit unsigned
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.ctor_keyword.=<0>
                    ctor_visibility.ctor_keyword.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: ctor_visibility.ctor_keyword.=<0>
=(#left##0:ctor_visibility.ctor_keyword, #right##0:ctor_visibility.ctor_keyword, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.ctor_keyword, ~#right##0:ctor_visibility.ctor_keyword, ?#success##0:wybe.bool)


bar > {inline} (0 calls)
0: ctor_visibility.ctor_keyword.bar<0>
bar(?#result##0:ctor_visibility.ctor_keyword)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:ctor_visibility.ctor_keyword, ?#result##0:ctor_visibility.ctor_keyword)


foo > {inline} (0 calls)
0: ctor_visibility.ctor_keyword.foo<0>
foo(?#result##0:ctor_visibility.ctor_keyword)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:ctor_visibility.ctor_keyword, ?#result##0:ctor_visibility.ctor_keyword)


~= > public {inline} (0 calls)
0: ctor_visibility.ctor_keyword.~=<0>
~=(#left##0:ctor_visibility.ctor_keyword, #right##0:ctor_visibility.ctor_keyword, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.ctor_keyword, ~#right##0:ctor_visibility.ctor_keyword, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'ctor_visibility.ctor_keyword'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"ctor_visibility.ctor_keyword.=<0>"(i1  %"#left##0", i1  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i1 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i1 @"ctor_visibility.ctor_keyword.bar<0>"() alwaysinline   {
entry:
  ret i1 1 
}


define external fastcc  i1 @"ctor_visibility.ctor_keyword.foo<0>"() alwaysinline   {
entry:
  ret i1 0 
}


define external fastcc  i1 @"ctor_visibility.ctor_keyword.~=<0>"(i1  %"#left##0", i1  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i1 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module ctor_visibility.one_pub
  representation  : 1 bit unsigned
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.one_pub.=<0>
                    ctor_visibility.one_pub.foo<0>
                    ctor_visibility.one_pub.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: ctor_visibility.one_pub.=<0>
=(#left##0:ctor_visibility.one_pub, #right##0:ctor_visibility.one_pub, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.one_pub, ~#right##0:ctor_visibility.one_pub, ?#success##0:wybe.bool)


bar > {inline} (0 calls)
0: ctor_visibility.one_pub.bar<0>
bar(?#result##0:ctor_visibility.one_pub)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:ctor_visibility.one_pub, ?#result##0:ctor_visibility.one_pub)


foo > public {inline} (0 calls)
0: ctor_visibility.one_pub.foo<0>
foo(?#result##0:ctor_visibility.one_pub)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:ctor_visibility.one_pub, ?#result##0:ctor_visibility.one_pub)


~= > public {inline} (0 calls)
0: ctor_visibility.one_pub.~=<0>
~=(#left##0:ctor_visibility.one_pub, #right##0:ctor_visibility.one_pub, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.one_pub, ~#right##0:ctor_visibility.one_pub, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'ctor_visibility.one_pub'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"ctor_visibility.one_pub.=<0>"(i1  %"#left##0", i1  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i1 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i1 @"ctor_visibility.one_pub.bar<0>"() alwaysinline   {
entry:
  ret i1 1 
}


define external fastcc  i1 @"ctor_visibility.one_pub.foo<0>"() alwaysinline   {
entry:
  ret i1 0 
}


define external fastcc  i1 @"ctor_visibility.one_pub.~=<0>"(i1  %"#left##0", i1  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i1 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module ctor_visibility.one_pub2
  representation  : 1 bit unsigned
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.one_pub2.=<0>
                    ctor_visibility.one_pub2.bar<0>
                    ctor_visibility.one_pub2.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: ctor_visibility.one_pub2.=<0>
=(#left##0:ctor_visibility.one_pub2, #right##0:ctor_visibility.one_pub2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.one_pub2, ~#right##0:ctor_visibility.one_pub2, ?#success##0:wybe.bool)


bar > public {inline} (0 calls)
0: ctor_visibility.one_pub2.bar<0>
bar(?#result##0:ctor_visibility.one_pub2)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:ctor_visibility.one_pub2, ?#result##0:ctor_visibility.one_pub2)


foo > {inline} (0 calls)
0: ctor_visibility.one_pub2.foo<0>
foo(?#result##0:ctor_visibility.one_pub2)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:ctor_visibility.one_pub2, ?#result##0:ctor_visibility.one_pub2)


~= > public {inline} (0 calls)
0: ctor_visibility.one_pub2.~=<0>
~=(#left##0:ctor_visibility.one_pub2, #right##0:ctor_visibility.one_pub2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.one_pub2, ~#right##0:ctor_visibility.one_pub2, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'ctor_visibility.one_pub2'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"ctor_visibility.one_pub2.=<0>"(i1  %"#left##0", i1  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i1 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i1 @"ctor_visibility.one_pub2.bar<0>"() alwaysinline   {
entry:
  ret i1 1 
}


define external fastcc  i1 @"ctor_visibility.one_pub2.foo<0>"() alwaysinline   {
entry:
  ret i1 0 
}


define external fastcc  i1 @"ctor_visibility.one_pub2.~=<0>"(i1  %"#left##0", i1  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i1 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module ctor_visibility.with_fields
  representation  : address
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.with_fields.=<0>
                    ctor_visibility.with_fields.a<0>
                    ctor_visibility.with_fields.a<1>
                    ctor_visibility.with_fields.b<0>
                    ctor_visibility.with_fields.b<1>
                    ctor_visibility.with_fields.bar<0>
                    ctor_visibility.with_fields.bar<1>
                    ctor_visibility.with_fields.foo<0>
                    ctor_visibility.with_fields.foo<1>
                    ctor_visibility.with_fields.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

= > public (1 calls)
0: ctor_visibility.with_fields.=<0>
=(#left##0:ctor_visibility.with_fields, #right##0:ctor_visibility.with_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 1:wybe.int, ?tmp#9##0:wybe.int)
    foreign llvm icmp_eq(tmp#9##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~tmp#9##0:wybe.int, 1:wybe.int, ?tmp#13##0:wybe.bool)
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#left##0:ctor_visibility.with_fields, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#left#a##1:wybe.int) @ctor_visibility:nn:nn
            foreign lpvm access(~#left##0:ctor_visibility.with_fields, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#left#b##0:wybe.int) @ctor_visibility:nn:nn
            foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#15##0:wybe.int)
            foreign llvm icmp_eq(~tmp#15##0:wybe.int, 1:wybe.int, ?tmp#16##0:wybe.bool)
            case ~tmp#16##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(#right##0:ctor_visibility.with_fields, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#right#a##0:wybe.int) @ctor_visibility:nn:nn
                foreign lpvm access(~#right##0:ctor_visibility.with_fields, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#right#b##0:wybe.int) @ctor_visibility:nn:nn
                foreign llvm icmp_eq(~#left#a##1:wybe.int, ~#right#a##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
                case ~tmp#4##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~#left#b##0:wybe.int, ~#right#b##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




    1:
        foreign lpvm access(~#left##0:ctor_visibility.with_fields, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#a##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#22##0:wybe.int)
        foreign llvm icmp_eq(~tmp#22##0:wybe.int, 0:wybe.int, ?tmp#23##0:wybe.bool)
        case ~tmp#23##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:ctor_visibility.with_fields, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#a##0:wybe.int) @ctor_visibility:nn:nn
            foreign llvm icmp_eq(~#left#a##0:wybe.int, ~#right#a##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




a > public (0 calls)
0: ctor_visibility.with_fields.a<0>
a(#rec##0:ctor_visibility.with_fields, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign lpvm access(~#rec##0:ctor_visibility.with_fields, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @ctor_visibility:nn:nn

    1:
        foreign lpvm access(~#rec##0:ctor_visibility.with_fields, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @ctor_visibility:nn:nn

a > public (0 calls)
1: ctor_visibility.with_fields.a<1>
a(#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign lpvm {noalias} mutate(~#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields, -1:wybe.int, 0:wybe.int, 16:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @ctor_visibility:nn:nn

    1:
        foreign lpvm {noalias} mutate(~#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @ctor_visibility:nn:nn



b > public {inline} (0 calls)
0: ctor_visibility.with_fields.b<0>
b(#rec##0:ctor_visibility.with_fields, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:ctor_visibility.with_fields, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

b > public {inline} (0 calls)
1: ctor_visibility.with_fields.b<1>
b(#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields, 7:wybe.int, 0:wybe.int, 16:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



bar > public {inline} (0 calls)
0: ctor_visibility.with_fields.bar<0>
bar(a##0:wybe.int, b##0:wybe.int, ?#result##0:ctor_visibility.with_fields)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:ctor_visibility.with_fields) @ctor_visibility:nn:nn
    foreign lpvm mutate(~#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~a##0:wybe.int) @ctor_visibility:nn:nn
    foreign lpvm mutate(~#rec##1:ctor_visibility.with_fields, ?#rec##2:ctor_visibility.with_fields, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~b##0:wybe.int) @ctor_visibility:nn:nn
    foreign llvm or(~#rec##2:ctor_visibility.with_fields, 1:wybe.int, ?#result##0:ctor_visibility.with_fields) @ctor_visibility:nn:nn
bar > public {inline} (7 calls)
1: ctor_visibility.with_fields.bar<1>
bar(?a##0:wybe.int, ?b##0:wybe.int, #result##0:ctor_visibility.with_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?a##0:wybe.int)
        foreign llvm move(undef:wybe.int, ?b##0:wybe.int)

    1:
        foreign lpvm access(#result##0:ctor_visibility.with_fields, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?a##0:wybe.int) @ctor_visibility:nn:nn
        foreign lpvm access(~#result##0:ctor_visibility.with_fields, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?b##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



foo > public {inline} (0 calls)
0: ctor_visibility.with_fields.foo<0>
foo(a##0:wybe.int, ?#result##0:ctor_visibility.with_fields)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:ctor_visibility.with_fields) @ctor_visibility:nn:nn
    foreign lpvm mutate(~#rec##0:ctor_visibility.with_fields, ?#result##0:ctor_visibility.with_fields, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~a##0:wybe.int) @ctor_visibility:nn:nn
foo > public {inline} (11 calls)
1: ctor_visibility.with_fields.foo<1>
foo(?a##0:wybe.int, #result##0:ctor_visibility.with_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?a##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:ctor_visibility.with_fields, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: ctor_visibility.with_fields.~=<0>
~=(#left##0:ctor_visibility.with_fields, #right##0:ctor_visibility.with_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ctor_visibility.with_fields.=<0>(~#left##0:ctor_visibility.with_fields, ~#right##0:ctor_visibility.with_fields, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'ctor_visibility.with_fields'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"ctor_visibility.with_fields.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = and i64 %"#left##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#left##0" to i64* 
  %3 = load  i64, i64* %2 
  %4 = and i64 %"#right##0", 1 
  %5 = icmp eq i64 %4, 0 
  br i1 %5, label %if.then1, label %if.else1 
if.else:
  %9 = icmp eq i64 %0, 1 
  br i1 %9, label %if.then2, label %if.else2 
if.then1:
  %6 = inttoptr i64 %"#right##0" to i64* 
  %7 = load  i64, i64* %6 
  %8 = icmp eq i64 %3, %7 
  ret i1 %8 
if.else1:
  ret i1 0 
if.then2:
  %10 = add   i64 %"#left##0", -1 
  %11 = inttoptr i64 %10 to i64* 
  %12 = load  i64, i64* %11 
  %13 = add   i64 %"#left##0", 7 
  %14 = inttoptr i64 %13 to i64* 
  %15 = load  i64, i64* %14 
  %16 = and i64 %"#right##0", 1 
  %17 = icmp eq i64 %16, 1 
  br i1 %17, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %18 = add   i64 %"#right##0", -1 
  %19 = inttoptr i64 %18 to i64* 
  %20 = load  i64, i64* %19 
  %21 = add   i64 %"#right##0", 7 
  %22 = inttoptr i64 %21 to i64* 
  %23 = load  i64, i64* %22 
  %24 = icmp eq i64 %12, %20 
  br i1 %24, label %if.then4, label %if.else4 
if.else3:
  ret i1 0 
if.then4:
  %25 = icmp eq i64 %15, %23 
  ret i1 %25 
if.else4:
  ret i1 0 
}


define external fastcc  i64 @"ctor_visibility.with_fields.a<0>"(i64  %"#rec##0")    {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#rec##0" to i64* 
  %3 = load  i64, i64* %2 
  ret i64 %3 
if.else:
  %4 = add   i64 %"#rec##0", -1 
  %5 = inttoptr i64 %4 to i64* 
  %6 = load  i64, i64* %5 
  ret i64 %6 
}


define external fastcc  i64 @"ctor_visibility.with_fields.a<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 8 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = inttoptr i64 %4 to i8* 
  %6 = inttoptr i64 %"#rec##0" to i8* 
  %7 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = inttoptr i64 %4 to i64* 
  store  i64 %"#field##0", i64* %8 
  ret i64 %4 
if.else:
  %9 = trunc i64 16 to i32  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  %9)  
  %11 = ptrtoint i8* %10 to i64 
  %12 = add   i64 %11, 1 
  %13 = sub   i64 %"#rec##0", 1 
  %14 = inttoptr i64 %11 to i8* 
  %15 = inttoptr i64 %13 to i8* 
  %16 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %14, i8*  %15, i32  %16, i1  0)  
  %17 = add   i64 %12, -1 
  %18 = inttoptr i64 %17 to i64* 
  store  i64 %"#field##0", i64* %18 
  ret i64 %12 
}


define external fastcc  {i64, i1} @"ctor_visibility.with_fields.b<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#rec##0", 7 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"ctor_visibility.with_fields.b<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 16 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = add   i64 %4, 1 
  %6 = sub   i64 %"#rec##0", 1 
  %7 = inttoptr i64 %4 to i8* 
  %8 = inttoptr i64 %6 to i8* 
  %9 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %7, i8*  %8, i32  %9, i1  0)  
  %10 = add   i64 %5, 7 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %"#field##0", i64* %11 
  %12 = insertvalue {i64, i1} undef, i64 %5, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else:
  %14 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  i64 @"ctor_visibility.with_fields.bar<0>"(i64  %"a##0", i64  %"b##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"a##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"b##0", i64* %5 
  %6 = or i64 %2, 1 
  ret i64 %6 
}


define external fastcc  {i64, i64, i1} @"ctor_visibility.with_fields.bar<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = and i64 %"#result##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#result##0", -1 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"#result##0", 7 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  %8 = insertvalue {i64, i64, i1} undef, i64 %4, 0 
  %9 = insertvalue {i64, i64, i1} %8, i64 %7, 1 
  %10 = insertvalue {i64, i64, i1} %9, i1 1, 2 
  ret {i64, i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i64, i1} %11, i64 undef, 1 
  %13 = insertvalue {i64, i64, i1} %12, i1 0, 2 
  ret {i64, i64, i1} %13 
}


define external fastcc  i64 @"ctor_visibility.with_fields.foo<0>"(i64  %"a##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"a##0", i64* %3 
  ret i64 %2 
}


define external fastcc  {i64, i1} @"ctor_visibility.with_fields.foo<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = and i64 %"#result##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#result##0" to i64* 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  i1 @"ctor_visibility.with_fields.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i1  @"ctor_visibility.with_fields.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module ctor_visibility.with_fields2
  representation  : address
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.with_fields2.=<0>
                    ctor_visibility.with_fields2.a<0>
                    ctor_visibility.with_fields2.a<1>
                    ctor_visibility.with_fields2.foo<0>
                    ctor_visibility.with_fields2.foo<1>
                    ctor_visibility.with_fields2.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

= > public (1 calls)
0: ctor_visibility.with_fields2.=<0>
=(#left##0:ctor_visibility.with_fields2, #right##0:ctor_visibility.with_fields2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 1:wybe.int, ?tmp#8##0:wybe.int)
    foreign llvm icmp_eq(tmp#8##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~tmp#8##0:wybe.int, 1:wybe.int, ?tmp#12##0:wybe.bool)
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#left##0:ctor_visibility.with_fields2, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#b##0:wybe.int) @ctor_visibility:nn:nn
            foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#14##0:wybe.int)
            foreign llvm icmp_eq(~tmp#14##0:wybe.int, 1:wybe.int, ?tmp#15##0:wybe.bool)
            case ~tmp#15##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#right##0:ctor_visibility.with_fields2, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#b##0:wybe.int) @ctor_visibility:nn:nn
                foreign llvm icmp_eq(~#left#b##0:wybe.int, ~#right#b##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



    1:
        foreign lpvm access(~#left##0:ctor_visibility.with_fields2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#a##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#19##0:wybe.int)
        foreign llvm icmp_eq(~tmp#19##0:wybe.int, 0:wybe.int, ?tmp#20##0:wybe.bool)
        case ~tmp#20##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:ctor_visibility.with_fields2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#a##0:wybe.int) @ctor_visibility:nn:nn
            foreign llvm icmp_eq(~#left#a##0:wybe.int, ~#right#a##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




a > public {inline} (0 calls)
0: ctor_visibility.with_fields2.a<0>
a(#rec##0:ctor_visibility.with_fields2, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:ctor_visibility.with_fields2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

a > public {inline} (0 calls)
1: ctor_visibility.with_fields2.a<1>
a(#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



b > {inline} (0 calls)
0: ctor_visibility.with_fields2.b<0>
b(#rec##0:ctor_visibility.with_fields2, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:ctor_visibility.with_fields2, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

b > {inline} (0 calls)
1: ctor_visibility.with_fields2.b<1>
b(#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2, -1:wybe.int, 0:wybe.int, 8:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



bar > {inline} (0 calls)
0: ctor_visibility.with_fields2.bar<0>
bar(b##0:wybe.int, ?#result##0:ctor_visibility.with_fields2)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:ctor_visibility.with_fields2) @ctor_visibility:nn:nn
    foreign lpvm mutate(~#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~b##0:wybe.int) @ctor_visibility:nn:nn
    foreign llvm or(~#rec##1:ctor_visibility.with_fields2, 1:wybe.int, ?#result##0:ctor_visibility.with_fields2) @ctor_visibility:nn:nn
bar > {inline} (5 calls)
1: ctor_visibility.with_fields2.bar<1>
bar(?b##0:wybe.int, #result##0:ctor_visibility.with_fields2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?b##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:ctor_visibility.with_fields2, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?b##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



foo > public {inline} (0 calls)
0: ctor_visibility.with_fields2.foo<0>
foo(a##0:wybe.int, ?#result##0:ctor_visibility.with_fields2)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:ctor_visibility.with_fields2) @ctor_visibility:nn:nn
    foreign lpvm mutate(~#rec##0:ctor_visibility.with_fields2, ?#result##0:ctor_visibility.with_fields2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~a##0:wybe.int) @ctor_visibility:nn:nn
foo > public {inline} (10 calls)
1: ctor_visibility.with_fields2.foo<1>
foo(?a##0:wybe.int, #result##0:ctor_visibility.with_fields2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?a##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:ctor_visibility.with_fields2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: ctor_visibility.with_fields2.~=<0>
~=(#left##0:ctor_visibility.with_fields2, #right##0:ctor_visibility.with_fields2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ctor_visibility.with_fields2.=<0>(~#left##0:ctor_visibility.with_fields2, ~#right##0:ctor_visibility.with_fields2, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'ctor_visibility.with_fields2'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"ctor_visibility.with_fields2.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = and i64 %"#left##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#left##0" to i64* 
  %3 = load  i64, i64* %2 
  %4 = and i64 %"#right##0", 1 
  %5 = icmp eq i64 %4, 0 
  br i1 %5, label %if.then1, label %if.else1 
if.else:
  %9 = icmp eq i64 %0, 1 
  br i1 %9, label %if.then2, label %if.else2 
if.then1:
  %6 = inttoptr i64 %"#right##0" to i64* 
  %7 = load  i64, i64* %6 
  %8 = icmp eq i64 %3, %7 
  ret i1 %8 
if.else1:
  ret i1 0 
if.then2:
  %10 = add   i64 %"#left##0", -1 
  %11 = inttoptr i64 %10 to i64* 
  %12 = load  i64, i64* %11 
  %13 = and i64 %"#right##0", 1 
  %14 = icmp eq i64 %13, 1 
  br i1 %14, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %15 = add   i64 %"#right##0", -1 
  %16 = inttoptr i64 %15 to i64* 
  %17 = load  i64, i64* %16 
  %18 = icmp eq i64 %12, %17 
  ret i1 %18 
if.else3:
  ret i1 0 
}


define external fastcc  {i64, i1} @"ctor_visibility.with_fields2.a<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#rec##0" to i64* 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"ctor_visibility.with_fields2.a<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 8 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = inttoptr i64 %4 to i8* 
  %6 = inttoptr i64 %"#rec##0" to i8* 
  %7 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = inttoptr i64 %4 to i64* 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %4, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  {i64, i1} @"ctor_visibility.with_fields2.b<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#rec##0", -1 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"ctor_visibility.with_fields2.b<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 8 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = add   i64 %4, 1 
  %6 = sub   i64 %"#rec##0", 1 
  %7 = inttoptr i64 %4 to i8* 
  %8 = inttoptr i64 %6 to i8* 
  %9 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %7, i8*  %8, i32  %9, i1  0)  
  %10 = add   i64 %5, -1 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %"#field##0", i64* %11 
  %12 = insertvalue {i64, i1} undef, i64 %5, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else:
  %14 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  i64 @"ctor_visibility.with_fields2.bar<0>"(i64  %"b##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"b##0", i64* %3 
  %4 = or i64 %2, 1 
  ret i64 %4 
}


define external fastcc  {i64, i1} @"ctor_visibility.with_fields2.bar<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = and i64 %"#result##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#result##0", -1 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  i64 @"ctor_visibility.with_fields2.foo<0>"(i64  %"a##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"a##0", i64* %3 
  ret i64 %2 
}


define external fastcc  {i64, i1} @"ctor_visibility.with_fields2.foo<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = and i64 %"#result##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#result##0" to i64* 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  i1 @"ctor_visibility.with_fields2.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i1  @"ctor_visibility.with_fields2.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}

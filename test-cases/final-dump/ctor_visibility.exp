======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module ctor_visibility
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use ctor_visibility.all_priv
                    use ctor_visibility.all_public_long
                    use ctor_visibility.all_public_short
                    use ctor_visibility.ctor_keyword
                    use ctor_visibility.one_pub
                    use ctor_visibility.one_pub2
                    use ctor_visibility.with_fields
                    use ctor_visibility.with_fields2
                    use wybe
  resources       : 
  submodules      : ctor_visibility.all_priv, ctor_visibility.all_public_long, ctor_visibility.all_public_short, ctor_visibility.ctor_keyword, ctor_visibility.one_pub, ctor_visibility.one_pub2, ctor_visibility.with_fields, ctor_visibility.with_fields2
  procs           : 


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'ctor_visibility'

source_filename = "!ROOT!/final-dump/ctor_visibility.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

--------------------------------------------------
 Module ctor_visibility.all_priv
  representation  : 1 bit unsigned
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.all_priv.=<0>
                    ctor_visibility.all_priv.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: ctor_visibility.all_priv.=<0>
=(#left##0:ctor_visibility.all_priv, #right##0:ctor_visibility.all_priv, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.all_priv, ~#right##0:ctor_visibility.all_priv, ?#success##0:wybe.bool)


proc bar > {inline} (0 calls)
0: ctor_visibility.all_priv.bar<0>
bar(?#result##0:ctor_visibility.all_priv)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:ctor_visibility.all_priv, ?#result##0:ctor_visibility.all_priv)


proc foo > {inline} (0 calls)
0: ctor_visibility.all_priv.foo<0>
foo(?#result##0:ctor_visibility.all_priv)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:ctor_visibility.all_priv, ?#result##0:ctor_visibility.all_priv)


proc ~= > public {inline} (0 calls)
0: ctor_visibility.all_priv.~=<0>
~=(#left##0:ctor_visibility.all_priv, #right##0:ctor_visibility.all_priv, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.all_priv, ~#right##0:ctor_visibility.all_priv, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'ctor_visibility.all_priv'

source_filename = "!ROOT!/final-dump/ctor_visibility.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"ctor_visibility.all_priv.=<0>"(i1 %"#left##0", i1 %"#right##0") {
  %"tmp#1##0" = icmp eq i1 %"#left##0", %"#right##0"
  ret i1 %"tmp#1##0"
}

define external fastcc i1 @"ctor_visibility.all_priv.bar<0>"() {
  ret i1 1
}

define external fastcc i1 @"ctor_visibility.all_priv.foo<0>"() {
  ret i1 0
}

define external fastcc i1 @"ctor_visibility.all_priv.~=<0>"(i1 %"#left##0", i1 %"#right##0") {
  %"tmp#0##0" = icmp eq i1 %"#left##0", %"#right##0"
  %"tmp#3##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#3##0"
}

--------------------------------------------------
 Module ctor_visibility.all_public_long
  representation  : 1 bit unsigned
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.all_public_long.=<0>
                    ctor_visibility.all_public_long.bar<0>
                    ctor_visibility.all_public_long.foo<0>
                    ctor_visibility.all_public_long.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: ctor_visibility.all_public_long.=<0>
=(#left##0:ctor_visibility.all_public_long, #right##0:ctor_visibility.all_public_long, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.all_public_long, ~#right##0:ctor_visibility.all_public_long, ?#success##0:wybe.bool)


proc bar > public {inline} (0 calls)
0: ctor_visibility.all_public_long.bar<0>
bar(?#result##0:ctor_visibility.all_public_long)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:ctor_visibility.all_public_long, ?#result##0:ctor_visibility.all_public_long)


proc foo > public {inline} (0 calls)
0: ctor_visibility.all_public_long.foo<0>
foo(?#result##0:ctor_visibility.all_public_long)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:ctor_visibility.all_public_long, ?#result##0:ctor_visibility.all_public_long)


proc ~= > public {inline} (0 calls)
0: ctor_visibility.all_public_long.~=<0>
~=(#left##0:ctor_visibility.all_public_long, #right##0:ctor_visibility.all_public_long, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.all_public_long, ~#right##0:ctor_visibility.all_public_long, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'ctor_visibility.all_public_long'

source_filename = "!ROOT!/final-dump/ctor_visibility.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"ctor_visibility.all_public_long.=<0>"(i1 %"#left##0", i1 %"#right##0") {
  %"tmp#1##0" = icmp eq i1 %"#left##0", %"#right##0"
  ret i1 %"tmp#1##0"
}

define external fastcc i1 @"ctor_visibility.all_public_long.bar<0>"() {
  ret i1 1
}

define external fastcc i1 @"ctor_visibility.all_public_long.foo<0>"() {
  ret i1 0
}

define external fastcc i1 @"ctor_visibility.all_public_long.~=<0>"(i1 %"#left##0", i1 %"#right##0") {
  %"tmp#0##0" = icmp eq i1 %"#left##0", %"#right##0"
  %"tmp#3##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#3##0"
}

--------------------------------------------------
 Module ctor_visibility.all_public_short
  representation  : 1 bit unsigned
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.all_public_short.=<0>
                    ctor_visibility.all_public_short.bar<0>
                    ctor_visibility.all_public_short.foo<0>
                    ctor_visibility.all_public_short.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: ctor_visibility.all_public_short.=<0>
=(#left##0:ctor_visibility.all_public_short, #right##0:ctor_visibility.all_public_short, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.all_public_short, ~#right##0:ctor_visibility.all_public_short, ?#success##0:wybe.bool)


proc bar > public {inline} (0 calls)
0: ctor_visibility.all_public_short.bar<0>
bar(?#result##0:ctor_visibility.all_public_short)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:ctor_visibility.all_public_short, ?#result##0:ctor_visibility.all_public_short)


proc foo > public {inline} (0 calls)
0: ctor_visibility.all_public_short.foo<0>
foo(?#result##0:ctor_visibility.all_public_short)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:ctor_visibility.all_public_short, ?#result##0:ctor_visibility.all_public_short)


proc ~= > public {inline} (0 calls)
0: ctor_visibility.all_public_short.~=<0>
~=(#left##0:ctor_visibility.all_public_short, #right##0:ctor_visibility.all_public_short, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.all_public_short, ~#right##0:ctor_visibility.all_public_short, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'ctor_visibility.all_public_short'

source_filename = "!ROOT!/final-dump/ctor_visibility.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"ctor_visibility.all_public_short.=<0>"(i1 %"#left##0", i1 %"#right##0") {
  %"tmp#1##0" = icmp eq i1 %"#left##0", %"#right##0"
  ret i1 %"tmp#1##0"
}

define external fastcc i1 @"ctor_visibility.all_public_short.bar<0>"() {
  ret i1 1
}

define external fastcc i1 @"ctor_visibility.all_public_short.foo<0>"() {
  ret i1 0
}

define external fastcc i1 @"ctor_visibility.all_public_short.~=<0>"(i1 %"#left##0", i1 %"#right##0") {
  %"tmp#0##0" = icmp eq i1 %"#left##0", %"#right##0"
  %"tmp#3##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#3##0"
}

--------------------------------------------------
 Module ctor_visibility.ctor_keyword
  representation  : 1 bit unsigned
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.ctor_keyword.=<0>
                    ctor_visibility.ctor_keyword.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: ctor_visibility.ctor_keyword.=<0>
=(#left##0:ctor_visibility.ctor_keyword, #right##0:ctor_visibility.ctor_keyword, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.ctor_keyword, ~#right##0:ctor_visibility.ctor_keyword, ?#success##0:wybe.bool)


proc bar > {inline} (0 calls)
0: ctor_visibility.ctor_keyword.bar<0>
bar(?#result##0:ctor_visibility.ctor_keyword)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:ctor_visibility.ctor_keyword, ?#result##0:ctor_visibility.ctor_keyword)


proc foo > {inline} (0 calls)
0: ctor_visibility.ctor_keyword.foo<0>
foo(?#result##0:ctor_visibility.ctor_keyword)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:ctor_visibility.ctor_keyword, ?#result##0:ctor_visibility.ctor_keyword)


proc ~= > public {inline} (0 calls)
0: ctor_visibility.ctor_keyword.~=<0>
~=(#left##0:ctor_visibility.ctor_keyword, #right##0:ctor_visibility.ctor_keyword, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.ctor_keyword, ~#right##0:ctor_visibility.ctor_keyword, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'ctor_visibility.ctor_keyword'

source_filename = "!ROOT!/final-dump/ctor_visibility.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"ctor_visibility.ctor_keyword.=<0>"(i1 %"#left##0", i1 %"#right##0") {
  %"tmp#1##0" = icmp eq i1 %"#left##0", %"#right##0"
  ret i1 %"tmp#1##0"
}

define external fastcc i1 @"ctor_visibility.ctor_keyword.bar<0>"() {
  ret i1 1
}

define external fastcc i1 @"ctor_visibility.ctor_keyword.foo<0>"() {
  ret i1 0
}

define external fastcc i1 @"ctor_visibility.ctor_keyword.~=<0>"(i1 %"#left##0", i1 %"#right##0") {
  %"tmp#0##0" = icmp eq i1 %"#left##0", %"#right##0"
  %"tmp#3##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#3##0"
}

--------------------------------------------------
 Module ctor_visibility.one_pub
  representation  : 1 bit unsigned
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.one_pub.=<0>
                    ctor_visibility.one_pub.foo<0>
                    ctor_visibility.one_pub.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: ctor_visibility.one_pub.=<0>
=(#left##0:ctor_visibility.one_pub, #right##0:ctor_visibility.one_pub, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.one_pub, ~#right##0:ctor_visibility.one_pub, ?#success##0:wybe.bool)


proc bar > {inline} (0 calls)
0: ctor_visibility.one_pub.bar<0>
bar(?#result##0:ctor_visibility.one_pub)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:ctor_visibility.one_pub, ?#result##0:ctor_visibility.one_pub)


proc foo > public {inline} (0 calls)
0: ctor_visibility.one_pub.foo<0>
foo(?#result##0:ctor_visibility.one_pub)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:ctor_visibility.one_pub, ?#result##0:ctor_visibility.one_pub)


proc ~= > public {inline} (0 calls)
0: ctor_visibility.one_pub.~=<0>
~=(#left##0:ctor_visibility.one_pub, #right##0:ctor_visibility.one_pub, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.one_pub, ~#right##0:ctor_visibility.one_pub, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'ctor_visibility.one_pub'

source_filename = "!ROOT!/final-dump/ctor_visibility.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"ctor_visibility.one_pub.=<0>"(i1 %"#left##0", i1 %"#right##0") {
  %"tmp#1##0" = icmp eq i1 %"#left##0", %"#right##0"
  ret i1 %"tmp#1##0"
}

define external fastcc i1 @"ctor_visibility.one_pub.bar<0>"() {
  ret i1 1
}

define external fastcc i1 @"ctor_visibility.one_pub.foo<0>"() {
  ret i1 0
}

define external fastcc i1 @"ctor_visibility.one_pub.~=<0>"(i1 %"#left##0", i1 %"#right##0") {
  %"tmp#0##0" = icmp eq i1 %"#left##0", %"#right##0"
  %"tmp#3##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#3##0"
}

--------------------------------------------------
 Module ctor_visibility.one_pub2
  representation  : 1 bit unsigned
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.one_pub2.=<0>
                    ctor_visibility.one_pub2.bar<0>
                    ctor_visibility.one_pub2.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: ctor_visibility.one_pub2.=<0>
=(#left##0:ctor_visibility.one_pub2, #right##0:ctor_visibility.one_pub2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.one_pub2, ~#right##0:ctor_visibility.one_pub2, ?#success##0:wybe.bool)


proc bar > public {inline} (0 calls)
0: ctor_visibility.one_pub2.bar<0>
bar(?#result##0:ctor_visibility.one_pub2)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:ctor_visibility.one_pub2, ?#result##0:ctor_visibility.one_pub2)


proc foo > {inline} (0 calls)
0: ctor_visibility.one_pub2.foo<0>
foo(?#result##0:ctor_visibility.one_pub2)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:ctor_visibility.one_pub2, ?#result##0:ctor_visibility.one_pub2)


proc ~= > public {inline} (0 calls)
0: ctor_visibility.one_pub2.~=<0>
~=(#left##0:ctor_visibility.one_pub2, #right##0:ctor_visibility.one_pub2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:ctor_visibility.one_pub2, ~#right##0:ctor_visibility.one_pub2, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'ctor_visibility.one_pub2'

source_filename = "!ROOT!/final-dump/ctor_visibility.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"ctor_visibility.one_pub2.=<0>"(i1 %"#left##0", i1 %"#right##0") {
  %"tmp#1##0" = icmp eq i1 %"#left##0", %"#right##0"
  ret i1 %"tmp#1##0"
}

define external fastcc i1 @"ctor_visibility.one_pub2.bar<0>"() {
  ret i1 1
}

define external fastcc i1 @"ctor_visibility.one_pub2.foo<0>"() {
  ret i1 0
}

define external fastcc i1 @"ctor_visibility.one_pub2.~=<0>"(i1 %"#left##0", i1 %"#right##0") {
  %"tmp#0##0" = icmp eq i1 %"#left##0", %"#right##0"
  %"tmp#3##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#3##0"
}

--------------------------------------------------
 Module ctor_visibility.with_fields
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.with_fields.=<0>
                    ctor_visibility.with_fields.a<0>
                    ctor_visibility.with_fields.a<1>
                    ctor_visibility.with_fields.b<0>
                    ctor_visibility.with_fields.b<1>
                    ctor_visibility.with_fields.bar<0>
                    ctor_visibility.with_fields.bar<1>
                    ctor_visibility.with_fields.foo<0>
                    ctor_visibility.with_fields.foo<1>
                    ctor_visibility.with_fields.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

proc = > public (1 calls)
0: ctor_visibility.with_fields.=<0>
=(#left##0:ctor_visibility.with_fields, #right##0:ctor_visibility.with_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 1:wybe.int, ?tmp#9##0:wybe.int)
    foreign llvm icmp_eq(tmp#9##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~tmp#9##0:wybe.int, 1:wybe.int, ?tmp#13##0:wybe.bool)
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#left##0:ctor_visibility.with_fields, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#left#a##1:wybe.int) @ctor_visibility:nn:nn
            foreign lpvm access(~#left##0:ctor_visibility.with_fields, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#left#b##0:wybe.int) @ctor_visibility:nn:nn
            foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#15##0:wybe.int)
            foreign llvm icmp_eq(~tmp#15##0:wybe.int, 1:wybe.int, ?tmp#16##0:wybe.bool)
            case ~tmp#16##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(#right##0:ctor_visibility.with_fields, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#right#a##0:wybe.int) @ctor_visibility:nn:nn
                foreign lpvm access(~#right##0:ctor_visibility.with_fields, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#right#b##0:wybe.int) @ctor_visibility:nn:nn
                foreign llvm icmp_eq(~#left#a##1:wybe.int, ~#right#a##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
                case ~tmp#4##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~#left#b##0:wybe.int, ~#right#b##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




    1:
        foreign lpvm access(~#left##0:ctor_visibility.with_fields, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#a##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#22##0:wybe.int)
        foreign llvm icmp_eq(~tmp#22##0:wybe.int, 0:wybe.int, ?tmp#23##0:wybe.bool)
        case ~tmp#23##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:ctor_visibility.with_fields, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#a##0:wybe.int) @ctor_visibility:nn:nn
            foreign llvm icmp_eq(~#left#a##0:wybe.int, ~#right#a##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc a > public (0 calls)
0: ctor_visibility.with_fields.a<0>
a(#rec##0:ctor_visibility.with_fields, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign lpvm access(~#rec##0:ctor_visibility.with_fields, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @ctor_visibility:nn:nn

    1:
        foreign lpvm access(~#rec##0:ctor_visibility.with_fields, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @ctor_visibility:nn:nn

proc a > public (0 calls)
1: ctor_visibility.with_fields.a<1>
a(#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign lpvm {noalias} mutate(~#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields, -1:wybe.int, 0:wybe.int, 16:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @ctor_visibility:nn:nn

    1:
        foreign lpvm {noalias} mutate(~#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @ctor_visibility:nn:nn



proc b > public {inline} (0 calls)
0: ctor_visibility.with_fields.b<0>
b(#rec##0:ctor_visibility.with_fields, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:ctor_visibility.with_fields, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc b > public {inline} (0 calls)
1: ctor_visibility.with_fields.b<1>
b(#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields, 7:wybe.int, 0:wybe.int, 16:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc bar > public {inline} (0 calls)
0: ctor_visibility.with_fields.bar<0>
bar(a##0:wybe.int, b##0:wybe.int, ?#result##0:ctor_visibility.with_fields)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:ctor_visibility.with_fields) @ctor_visibility:nn:nn
    foreign lpvm mutate(~#rec##0:ctor_visibility.with_fields, ?#rec##1:ctor_visibility.with_fields, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~a##0:wybe.int) @ctor_visibility:nn:nn
    foreign lpvm mutate(~#rec##1:ctor_visibility.with_fields, ?#rec##2:ctor_visibility.with_fields, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~b##0:wybe.int) @ctor_visibility:nn:nn
    foreign llvm or(~#rec##2:ctor_visibility.with_fields, 1:wybe.int, ?#result##0:ctor_visibility.with_fields) @ctor_visibility:nn:nn
proc bar > public {inline} (7 calls)
1: ctor_visibility.with_fields.bar<1>
bar(?a##0:wybe.int, ?b##0:wybe.int, #result##0:ctor_visibility.with_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?a##0:wybe.int)
        foreign llvm move(undef:wybe.int, ?b##0:wybe.int)

    1:
        foreign lpvm access(#result##0:ctor_visibility.with_fields, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?a##0:wybe.int) @ctor_visibility:nn:nn
        foreign lpvm access(~#result##0:ctor_visibility.with_fields, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?b##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc foo > public {inline} (0 calls)
0: ctor_visibility.with_fields.foo<0>
foo(a##0:wybe.int, ?#result##0:ctor_visibility.with_fields)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:ctor_visibility.with_fields) @ctor_visibility:nn:nn
    foreign lpvm mutate(~#rec##0:ctor_visibility.with_fields, ?#result##0:ctor_visibility.with_fields, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~a##0:wybe.int) @ctor_visibility:nn:nn
proc foo > public {inline} (11 calls)
1: ctor_visibility.with_fields.foo<1>
foo(?a##0:wybe.int, #result##0:ctor_visibility.with_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?a##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:ctor_visibility.with_fields, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: ctor_visibility.with_fields.~=<0>
~=(#left##0:ctor_visibility.with_fields, #right##0:ctor_visibility.with_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ctor_visibility.with_fields.=<0>(~#left##0:ctor_visibility.with_fields, ~#right##0:ctor_visibility.with_fields, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'ctor_visibility.with_fields'

source_filename = "!ROOT!/final-dump/ctor_visibility.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"ctor_visibility.with_fields.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#9##0" = and i64 %"#left##0", 1
  %"tmp#10##0" = icmp eq i64 %"tmp#9##0", 0
  br i1 %"tmp#10##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#26##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#a##0" = load i64, ptr %"tmp#26##0"
  %"tmp#22##0" = and i64 %"#right##0", 1
  %"tmp#23##0" = icmp eq i64 %"tmp#22##0", 0
  br i1 %"tmp#23##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#27##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#a##0" = load i64, ptr %"tmp#27##0"
  %"tmp#28##0" = icmp eq i64 %"#left#a##0", %"#right#a##0"
  ret i1 %"tmp#28##0"
if.else.1:
  ret i1 0
if.else.0:
  %"tmp#13##0" = icmp eq i64 %"tmp#9##0", 1
  br i1 %"tmp#13##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#29##0" = add i64 %"#left##0", -1
  %"tmp#30##0" = inttoptr i64 %"tmp#29##0" to ptr
  %"#left#a##1" = load i64, ptr %"tmp#30##0"
  %"tmp#31##0" = add i64 %"#left##0", 7
  %"tmp#32##0" = inttoptr i64 %"tmp#31##0" to ptr
  %"#left#b##0" = load i64, ptr %"tmp#32##0"
  %"tmp#15##0" = and i64 %"#right##0", 1
  %"tmp#16##0" = icmp eq i64 %"tmp#15##0", 1
  br i1 %"tmp#16##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#33##0" = add i64 %"#right##0", -1
  %"tmp#34##0" = inttoptr i64 %"tmp#33##0" to ptr
  %"tmp#35##0" = load i64, ptr %"tmp#34##0"
  %"tmp#36##0" = add i64 %"#right##0", 7
  %"tmp#37##0" = inttoptr i64 %"tmp#36##0" to ptr
  %"#right#b##0" = load i64, ptr %"tmp#37##0"
  %"tmp#4##0" = icmp eq i64 %"#left#a##1", %"tmp#35##0"
  br i1 %"tmp#4##0", label %if.then.4, label %if.else.4
if.then.4:
  %"tmp#38##0" = icmp eq i64 %"#left#b##0", %"#right#b##0"
  ret i1 %"tmp#38##0"
if.else.4:
  ret i1 0
if.else.3:
  ret i1 0
if.else.2:
  ret i1 0
}

define external fastcc i64 @"ctor_visibility.with_fields.a<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  ret i64 %"tmp#3##0"
if.else.0:
  %"tmp#4##0" = add i64 %"#rec##0", -1
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#5##0"
  ret i64 %"tmp#6##0"
}

define external fastcc i64 @"ctor_visibility.with_fields.a<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#3##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#3##0", ptr %"tmp#2##0", i64 8, i1 0)
  %"tmp#4##0" = ptrtoint ptr %"tmp#3##0" to i64
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  ret i64 %"tmp#4##0"
if.else.0:
  %"tmp#6##0" = sub i64 %"#rec##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#8##0", ptr %"tmp#7##0", i64 16, i1 0)
  %"tmp#9##0" = ptrtoint ptr %"tmp#8##0" to i64
  %"tmp#10##0" = add i64 %"tmp#9##0", 1
  %"tmp#11##0" = add i64 %"tmp#10##0", -1
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"#field##0", ptr %"tmp#12##0"
  ret i64 %"tmp#10##0"
}

define external fastcc {i64, i1} @"ctor_visibility.with_fields.b<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#rec##0", 7
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc {i64, i1} @"ctor_visibility.with_fields.b<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = sub i64 %"#rec##0", 1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#4##0", ptr %"tmp#3##0", i64 16, i1 0)
  %"tmp#5##0" = ptrtoint ptr %"tmp#4##0" to i64
  %"tmp#6##0" = add i64 %"tmp#5##0", 1
  %"tmp#7##0" = add i64 %"tmp#6##0", 7
  %"tmp#8##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 %"#field##0", ptr %"tmp#8##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#6##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.0:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
}

define external fastcc i64 @"ctor_visibility.with_fields.bar<0>"(i64 %"a##0", i64 %"b##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"a##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"b##0", ptr %"tmp#3##0"
  %"tmp#4##0" = or i64 %"#rec##0", 1
  ret i64 %"tmp#4##0"
}

define external fastcc {i64, i64, i1} @"ctor_visibility.with_fields.bar<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#result##0", -1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = add i64 %"#result##0", 7
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#6##0"
  %"tmp#8##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#9##0" = insertvalue {i64, i64, i1} %"tmp#8##0", i64 %"tmp#7##0", 1
  %"tmp#10##0" = insertvalue {i64, i64, i1} %"tmp#9##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#10##0"
if.else.0:
  %"tmp#11##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i64, i1} %"tmp#11##0", i64 undef, 1
  %"tmp#13##0" = insertvalue {i64, i64, i1} %"tmp#12##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#13##0"
}

define external fastcc i64 @"ctor_visibility.with_fields.foo<0>"(i64 %"a##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"a##0", ptr %"tmp#1##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i1} @"ctor_visibility.with_fields.foo<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc i1 @"ctor_visibility.with_fields.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"ctor_visibility.with_fields.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

--------------------------------------------------
 Module ctor_visibility.with_fields2
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : ctor_visibility.with_fields2.=<0>
                    ctor_visibility.with_fields2.a<0>
                    ctor_visibility.with_fields2.a<1>
                    ctor_visibility.with_fields2.foo<0>
                    ctor_visibility.with_fields2.foo<1>
                    ctor_visibility.with_fields2.~=<0>
  imports         : use ctor_visibility
                    use wybe
  resources       : 
  procs           : 

proc = > public (1 calls)
0: ctor_visibility.with_fields2.=<0>
=(#left##0:ctor_visibility.with_fields2, #right##0:ctor_visibility.with_fields2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 1:wybe.int, ?tmp#8##0:wybe.int)
    foreign llvm icmp_eq(tmp#8##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~tmp#8##0:wybe.int, 1:wybe.int, ?tmp#12##0:wybe.bool)
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#left##0:ctor_visibility.with_fields2, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#b##0:wybe.int) @ctor_visibility:nn:nn
            foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#14##0:wybe.int)
            foreign llvm icmp_eq(~tmp#14##0:wybe.int, 1:wybe.int, ?tmp#15##0:wybe.bool)
            case ~tmp#15##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#right##0:ctor_visibility.with_fields2, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#b##0:wybe.int) @ctor_visibility:nn:nn
                foreign llvm icmp_eq(~#left#b##0:wybe.int, ~#right#b##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



    1:
        foreign lpvm access(~#left##0:ctor_visibility.with_fields2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#a##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#19##0:wybe.int)
        foreign llvm icmp_eq(~tmp#19##0:wybe.int, 0:wybe.int, ?tmp#20##0:wybe.bool)
        case ~tmp#20##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:ctor_visibility.with_fields2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#a##0:wybe.int) @ctor_visibility:nn:nn
            foreign llvm icmp_eq(~#left#a##0:wybe.int, ~#right#a##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc a > public {inline} (0 calls)
0: ctor_visibility.with_fields2.a<0>
a(#rec##0:ctor_visibility.with_fields2, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:ctor_visibility.with_fields2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc a > public {inline} (0 calls)
1: ctor_visibility.with_fields2.a<1>
a(#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc b > {inline} (0 calls)
0: ctor_visibility.with_fields2.b<0>
b(#rec##0:ctor_visibility.with_fields2, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:ctor_visibility.with_fields2, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc b > {inline} (0 calls)
1: ctor_visibility.with_fields2.b<1>
b(#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2, -1:wybe.int, 0:wybe.int, 8:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc bar > {inline} (0 calls)
0: ctor_visibility.with_fields2.bar<0>
bar(b##0:wybe.int, ?#result##0:ctor_visibility.with_fields2)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:ctor_visibility.with_fields2) @ctor_visibility:nn:nn
    foreign lpvm mutate(~#rec##0:ctor_visibility.with_fields2, ?#rec##1:ctor_visibility.with_fields2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~b##0:wybe.int) @ctor_visibility:nn:nn
    foreign llvm or(~#rec##1:ctor_visibility.with_fields2, 1:wybe.int, ?#result##0:ctor_visibility.with_fields2) @ctor_visibility:nn:nn
proc bar > {inline} (5 calls)
1: ctor_visibility.with_fields2.bar<1>
bar(?b##0:wybe.int, #result##0:ctor_visibility.with_fields2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?b##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:ctor_visibility.with_fields2, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?b##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc foo > public {inline} (0 calls)
0: ctor_visibility.with_fields2.foo<0>
foo(a##0:wybe.int, ?#result##0:ctor_visibility.with_fields2)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:ctor_visibility.with_fields2) @ctor_visibility:nn:nn
    foreign lpvm mutate(~#rec##0:ctor_visibility.with_fields2, ?#result##0:ctor_visibility.with_fields2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~a##0:wybe.int) @ctor_visibility:nn:nn
proc foo > public {inline} (10 calls)
1: ctor_visibility.with_fields2.foo<1>
foo(?a##0:wybe.int, #result##0:ctor_visibility.with_fields2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?a##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:ctor_visibility.with_fields2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a##0:wybe.int) @ctor_visibility:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: ctor_visibility.with_fields2.~=<0>
~=(#left##0:ctor_visibility.with_fields2, #right##0:ctor_visibility.with_fields2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ctor_visibility.with_fields2.=<0>(~#left##0:ctor_visibility.with_fields2, ~#right##0:ctor_visibility.with_fields2, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'ctor_visibility.with_fields2'

source_filename = "!ROOT!/final-dump/ctor_visibility.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"ctor_visibility.with_fields2.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#8##0" = and i64 %"#left##0", 1
  %"tmp#9##0" = icmp eq i64 %"tmp#8##0", 0
  br i1 %"tmp#9##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#23##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#a##0" = load i64, ptr %"tmp#23##0"
  %"tmp#19##0" = and i64 %"#right##0", 1
  %"tmp#20##0" = icmp eq i64 %"tmp#19##0", 0
  br i1 %"tmp#20##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#24##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#a##0" = load i64, ptr %"tmp#24##0"
  %"tmp#25##0" = icmp eq i64 %"#left#a##0", %"#right#a##0"
  ret i1 %"tmp#25##0"
if.else.1:
  ret i1 0
if.else.0:
  %"tmp#12##0" = icmp eq i64 %"tmp#8##0", 1
  br i1 %"tmp#12##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#26##0" = add i64 %"#left##0", -1
  %"tmp#27##0" = inttoptr i64 %"tmp#26##0" to ptr
  %"#left#b##0" = load i64, ptr %"tmp#27##0"
  %"tmp#14##0" = and i64 %"#right##0", 1
  %"tmp#15##0" = icmp eq i64 %"tmp#14##0", 1
  br i1 %"tmp#15##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#28##0" = add i64 %"#right##0", -1
  %"tmp#29##0" = inttoptr i64 %"tmp#28##0" to ptr
  %"#right#b##0" = load i64, ptr %"tmp#29##0"
  %"tmp#30##0" = icmp eq i64 %"#left#b##0", %"#right#b##0"
  ret i1 %"tmp#30##0"
if.else.3:
  ret i1 0
if.else.2:
  ret i1 0
}

define external fastcc {i64, i1} @"ctor_visibility.with_fields2.a<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"ctor_visibility.with_fields2.a<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#3##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#3##0", ptr %"tmp#2##0", i64 8, i1 0)
  %"tmp#4##0" = ptrtoint ptr %"tmp#3##0" to i64
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

define external fastcc {i64, i1} @"ctor_visibility.with_fields2.b<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#rec##0", -1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc {i64, i1} @"ctor_visibility.with_fields2.b<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = sub i64 %"#rec##0", 1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#4##0", ptr %"tmp#3##0", i64 8, i1 0)
  %"tmp#5##0" = ptrtoint ptr %"tmp#4##0" to i64
  %"tmp#6##0" = add i64 %"tmp#5##0", 1
  %"tmp#7##0" = add i64 %"tmp#6##0", -1
  %"tmp#8##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 %"#field##0", ptr %"tmp#8##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#6##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.0:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
}

define external fastcc i64 @"ctor_visibility.with_fields2.bar<0>"(i64 %"b##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"b##0", ptr %"tmp#1##0"
  %"tmp#2##0" = or i64 %"#rec##0", 1
  ret i64 %"tmp#2##0"
}

define external fastcc {i64, i1} @"ctor_visibility.with_fields2.bar<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#result##0", -1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc i64 @"ctor_visibility.with_fields2.foo<0>"(i64 %"a##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"a##0", ptr %"tmp#1##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i1} @"ctor_visibility.with_fields2.foo<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc i1 @"ctor_visibility.with_fields2.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"ctor_visibility.with_fields2.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

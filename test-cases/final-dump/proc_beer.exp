======================================================================
AFTER EVERYTHING:
 Module proc_beer
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : proc_beer.<0>
                    proc_beer.beer99<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,impure} (0 calls)
0: proc_beer.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    proc_beer.gen#1<0>(99:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @proc_beer:nn:nn


beer99 > public {inline} (1 calls)
0: proc_beer.beer99<0>
beer99()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    proc_beer.gen#1<0>(99:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @proc_beer:nn:nn


gen#1 > (2 calls)
0: proc_beer.gen#1<0>
gen#1(count##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sge(count##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
    case ~tmp#0##0:wybe.bool of
    0:

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
        foreign c print_int(count##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
        foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
        wybe.string.print<0>(" bottles of beer on the wall":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        foreign llvm sub(~count##0:wybe.int, 1:wybe.int, ?tmp#8##0:wybe.int) @int:nn:nn
        proc_beer.gen#1<0>(~tmp#8##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @proc_beer:nn:nn



gen#2 > {inline} (1 calls)
0: proc_beer.gen#2<0>
gen#2(count##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(count##0:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(" bottles of beer on the wall":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign llvm sub(~count##0:wybe.int, 1:wybe.int, ?count##1:wybe.int) @int:nn:nn
    proc_beer.gen#1<0>(~count##1:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @proc_beer:nn:nn

  LLVM code       :

; ModuleID = 'proc_beer'


 


@proc_beer.1 =    constant {i64, i64} { i64 28, i64 ptrtoint ([?? x i8]* @proc_beer.0 to i64) }


@proc_beer.0 =    constant [?? x i8] c" bottles of beer on the wall\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"proc_beer.<0>"() alwaysinline   {
entry:
  tail call fastcc  void  @"proc_beer.gen#1<0>"(i64  99)  
  ret void 
}


define external fastcc  void @"proc_beer.beer99<0>"() alwaysinline   {
entry:
  tail call fastcc  void  @"proc_beer.gen#1<0>"(i64  99)  
  ret void 
}


define external fastcc  void @"proc_beer.gen#1<0>"(i64  %"count##0")    {
entry:
  %0 = icmp sge i64 %"count##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %"count##0")  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @proc_beer.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %1 = sub   i64 %"count##0", 1 
  musttail call fastcc  void  @"proc_beer.gen#1<0>"(i64  %1)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"proc_beer.gen#2<0>"(i64  %"count##0") alwaysinline   {
entry:
  tail call ccc  void  @print_int(i64  %"count##0")  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @proc_beer.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %0 = sub   i64 %"count##0", 1 
  musttail call fastcc  void  @"proc_beer.gen#1<0>"(i64  %0)  
  ret void 
}

======================================================================
AFTER EVERYTHING:
 Module exp_simple
  public submods  : 
  public types    : 
  public resources: 
  public procs    : exp_simple.<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#7:wybe.phantom):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign c print_int(3:wybe.int, ~#io#0:wybe.phantom, ?tmp$8#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$8#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign c print_float(3.5999999999999996:wybe.float, ~#io#1:wybe.phantom, ?tmp$13#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign c putchar('h':wybe.char, ~#io#2:wybe.phantom, ?tmp$16#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$16#0:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    foreign c print_string("hello":wybe.string, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
    foreign c print_int(3:wybe.int, ~#io#4:wybe.phantom, ?tmp$23#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$23#0:wybe.phantom, ?#io#5:wybe.phantom) @wybe:nn:nn
    foreign c print_int(1001:wybe.int, ~#io#5:wybe.phantom, ?tmp$27#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$27#0:wybe.phantom, ?#io#6:wybe.phantom) @wybe:nn:nn
    foreign c print_int(3:wybe.int, ~#io#6:wybe.phantom, ?#io#7:wybe.phantom) @wybe:nn:nn


foreign_add > inline (1 calls)
0: foreign_add(?$#0:wybe.int):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign llvm move(3:wybe.int, ?$#0:wybe.int) @exp_simple:30:1

  LLVM code       :

; ModuleID = 'exp_simple'


 


declare external ccc  void @print_int(i64)    


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external ccc  void @print_float(double)    


@exp_simple.1 =    constant [6 x i8] c"hello\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"exp_simple.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  tail call ccc  void  @print_int(i64  3)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_float(double  3.600000e0)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @putchar(i8  104)  
  tail call ccc  void  @putchar(i8  10)  
  %2 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @exp_simple.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @print_int(i64  3)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  1001)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  3)  
  ret void 
}


define external fastcc  i64 @"exp_simple.foreign_add<0>"()    {
entry:
  ret i64 3 
}

constructors null | snoc(tail: _, head1: int, head2: int)

def append(a: _, b: _, ?result: _) {
    if { snoc(?t, ?h, ?h2) = a ::
            append(b, t, ?t2)
            # mutate for val happens at the end. This breaks this optimization :((
            ?result = snoc(t2, h, h)
       | else ::
            ?result = b
    }
}

def print_list(a: _) use !io {
    if { snoc(?tail, ?head, ?head2) = a ::
        !print("node(")
        !print(head)
        !print(",")
        !print(head2)
        !print(",")
        !print_list(tail)
        !print(")")
       | else ::
        !print("null")
    }

}
?x = snoc(null, 1, 1)
?x2 = snoc(null, 2, 3)
append(x, x2, ?x3)
!print_list(x2)
!nl
!print_list(x3)
!nl
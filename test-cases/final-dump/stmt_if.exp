======================================================================
AFTER EVERYTHING:
 Module stmt_if
  representation  : (not a type)
  public submods  : tree -> stmt_if.tree
  public resources: 
  public procs    : stmt_if.lookup<0>
                    stmt_if.tree.=<0>
                    stmt_if.tree.empty<0>
                    stmt_if.tree.key<0>
                    stmt_if.tree.key<1>
                    stmt_if.tree.left<0>
                    stmt_if.tree.left<1>
                    stmt_if.tree.node<0>
                    stmt_if.tree.node<1>
                    stmt_if.tree.right<0>
                    stmt_if.tree.right<1>
                    stmt_if.tree.~=<0>
  imports         : public use stmt_if.tree
                    use wybe
  resources       : 
  submodules      : stmt_if.tree
  procs           : 

foobar > (0 calls)
0: stmt_if.foobar<0>
foobar()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#8##0:stmt_if.tree) @stmt_if:nn:nn
    foreign lpvm mutate(~tmp#8##0:stmt_if.tree, ?tmp#9##0:stmt_if.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:stmt_if.tree) @stmt_if:nn:nn
    foreign lpvm mutate(~tmp#9##0:stmt_if.tree, ?tmp#10##0:stmt_if.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @stmt_if:nn:nn
    foreign lpvm mutate(~tmp#10##0:stmt_if.tree, ?tmp#11##0:stmt_if.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:stmt_if.tree) @stmt_if:nn:nn
    stmt_if.lookup<0>(1:wybe.int, tmp#11##0:stmt_if.tree, ?tmp#4##0:wybe.bool) #3 @stmt_if:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        wybe.string.print<0>("lookup fails when it should succeed":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#13##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        stmt_if.gen#1<0>(_:stmt_if.tree, _:stmt_if.tree, _:stmt_if.tree, ~tmp#11##0:stmt_if.tree)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7

    1:
        wybe.string.print<0>("lookup succeeds when it should":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #9 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#13##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        stmt_if.gen#1<0>(_:stmt_if.tree, _:stmt_if.tree, _:stmt_if.tree, ~tmp#11##0:stmt_if.tree)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5



gen#1 > (2 calls)
0: stmt_if.gen#1<0>
gen#1([tmp#0##0:stmt_if.tree], [tmp#1##0:stmt_if.tree], [tmp#2##0:stmt_if.tree], tr##0:stmt_if.tree)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_if.lookup<0>(3:wybe.int, ~tr##0:stmt_if.tree, ?tmp#3##0:wybe.bool) #0 @stmt_if:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        wybe.string.print<0>("lookup succeeds when it should fail":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

    1:
        wybe.string.print<0>("lookup fails when it should":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn



lookup > public (8 calls)
0: stmt_if.lookup<0>
lookup(key##0:wybe.int, tree##0:stmt_if.tree, ?result##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tree##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool)
    case ~tmp#6##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?result##0:wybe.bool) @stmt_if:nn:nn

    1:
        foreign lpvm access(tree##0:stmt_if.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?left##0:stmt_if.tree) @stmt_if:nn:nn
        foreign lpvm access(tree##0:stmt_if.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?nodekey##0:wybe.int) @stmt_if:nn:nn
        foreign lpvm access(~tree##0:stmt_if.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?right##0:stmt_if.tree) @stmt_if:nn:nn
        foreign llvm icmp_eq(key##0:wybe.int, nodekey##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
        case ~tmp#3##0:wybe.bool of
        0:
            foreign llvm icmp_slt(key##0:wybe.int, ~nodekey##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
            case ~tmp#2##0:wybe.bool of
            0:
                stmt_if.lookup<0>(~key##0:wybe.int, ~right##0:stmt_if.tree, ?result##0:wybe.bool) #5 @stmt_if:nn:nn

            1:
                stmt_if.lookup<0>(~key##0:wybe.int, ~left##0:stmt_if.tree, ?result##0:wybe.bool) #4 @stmt_if:nn:nn


        1:
            foreign llvm move(1:wybe.bool, ?result##0:wybe.bool) @stmt_if:nn:nn



  LLVM code       :

; ModuleID = 'stmt_if'


 


@stmt_if.5 =    constant {i64, i64} { i64 27, i64 ptrtoint ([?? x i8]* @stmt_if.4 to i64) }


@stmt_if.1 =    constant {i64, i64} { i64 30, i64 ptrtoint ([?? x i8]* @stmt_if.0 to i64) }


@stmt_if.3 =    constant {i64, i64} { i64 35, i64 ptrtoint ([?? x i8]* @stmt_if.2 to i64) }


@stmt_if.7 =    constant {i64, i64} { i64 35, i64 ptrtoint ([?? x i8]* @stmt_if.6 to i64) }


@stmt_if.4 =    constant [?? x i8] c"lookup fails when it should\00"


@stmt_if.2 =    constant [?? x i8] c"lookup fails when it should succeed\00"


@stmt_if.0 =    constant [?? x i8] c"lookup succeeds when it should\00"


@stmt_if.6 =    constant [?? x i8] c"lookup succeeds when it should fail\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"stmt_if.foobar<0>"()    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 0, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 1, i64* %7 
  %8 = add   i64 %2, 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 0, i64* %10 
  %11 = tail call fastcc  i1  @"stmt_if.lookup<0>"(i64  1, i64  %2)  
  br i1 %11, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_if.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_if.gen#1<0>"(i64  %2)  
  ret void 
if.else:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_if.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_if.gen#1<0>"(i64  %2)  
  ret void 
}


define external fastcc  void @"stmt_if.gen#1<0>"(i64  %"tr##0")    {
entry:
  %0 = tail call fastcc  i1  @"stmt_if.lookup<0>"(i64  3, i64  %"tr##0")  
  br i1 %0, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_if.5, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_if.7, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i1 @"stmt_if.lookup<0>"(i64  %"key##0", i64  %"tree##0")    {
entry:
  %0 = icmp ne i64 %"tree##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"tree##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"tree##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"tree##0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = icmp eq i64 %"key##0", %7 
  br i1 %12, label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  ret i1 1 
if.else1:
  %13 = icmp slt i64 %"key##0", %7 
  br i1 %13, label %if.then2, label %if.else2 
if.then2:
  %14 = musttail call fastcc  i1  @"stmt_if.lookup<0>"(i64  %"key##0", i64  %3)  
  ret i1 %14 
if.else2:
  %15 = musttail call fastcc  i1  @"stmt_if.lookup<0>"(i64  %"key##0", i64  %11)  
  ret i1 %15 
}
--------------------------------------------------
 Module stmt_if.tree
  representation  : address
  public submods  : 
  public resources: 
  public procs    : stmt_if.tree.=<0>
                    stmt_if.tree.empty<0>
                    stmt_if.tree.key<0>
                    stmt_if.tree.key<1>
                    stmt_if.tree.left<0>
                    stmt_if.tree.left<1>
                    stmt_if.tree.node<0>
                    stmt_if.tree.node<1>
                    stmt_if.tree.right<0>
                    stmt_if.tree.right<1>
                    stmt_if.tree.~=<0>
  imports         : use stmt_if
                    use wybe
  resources       : 
  procs           : 

= > public (7 calls)
0: stmt_if.tree.=<0>
=(#left##0:stmt_if.tree, #right##0:stmt_if.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:stmt_if.tree, ~#right##0:stmt_if.tree, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:stmt_if.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#left##0:stmt_if.tree) @stmt_if:nn:nn
        foreign lpvm access(#left##0:stmt_if.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#key##0:wybe.int) @stmt_if:nn:nn
        foreign lpvm access(~#left##0:stmt_if.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#right##0:stmt_if.tree) @stmt_if:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
        case ~tmp#10##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:stmt_if.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#left##0:stmt_if.tree) @stmt_if:nn:nn
            foreign lpvm access(#right##0:stmt_if.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#key##0:wybe.int) @stmt_if:nn:nn
            foreign lpvm access(~#right##0:stmt_if.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#right##0:stmt_if.tree) @stmt_if:nn:nn
            stmt_if.tree.=<0>(~#left#left##0:stmt_if.tree, ~#right#left##0:stmt_if.tree, ?tmp#4##0:wybe.bool) #2
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#key##0:wybe.int, ~#right#key##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
                case ~tmp#5##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    stmt_if.tree.=<0>(~#left#right##0:stmt_if.tree, ~#right#right##0:stmt_if.tree, ?#success##0:wybe.bool) #4






empty > public {inline} (0 calls)
0: stmt_if.tree.empty<0>
empty(?#result##0:stmt_if.tree)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:stmt_if.tree, ?#result##0:stmt_if.tree)


key > public {inline} (0 calls)
0: stmt_if.tree.key<0>
key(#rec##0:stmt_if.tree, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:stmt_if.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @stmt_if:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

key > public {inline} (0 calls)
1: stmt_if.tree.key<1>
key(#rec##0:stmt_if.tree, ?#rec##1:stmt_if.tree, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:stmt_if.tree, ?#rec##1:stmt_if.tree)

    1:
        foreign lpvm mutate(~#rec##0:stmt_if.tree, ?#rec##1:stmt_if.tree, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @stmt_if:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



left > public {inline} (0 calls)
0: stmt_if.tree.left<0>
left(#rec##0:stmt_if.tree, ?#result##0:stmt_if.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:stmt_if.tree, ?#result##0:stmt_if.tree)

    1:
        foreign lpvm access(~#rec##0:stmt_if.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:stmt_if.tree) @stmt_if:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

left > public {inline} (0 calls)
1: stmt_if.tree.left<1>
left(#rec##0:stmt_if.tree, ?#rec##1:stmt_if.tree, #field##0:stmt_if.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:stmt_if.tree, ?#rec##1:stmt_if.tree)

    1:
        foreign lpvm mutate(~#rec##0:stmt_if.tree, ?#rec##1:stmt_if.tree, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:stmt_if.tree) @stmt_if:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



node > public {inline} (0 calls)
0: stmt_if.tree.node<0>
node(left##0:stmt_if.tree, key##0:wybe.int, right##0:stmt_if.tree, ?#result##0:stmt_if.tree)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:stmt_if.tree) @stmt_if:nn:nn
    foreign lpvm mutate(~#rec##0:stmt_if.tree, ?#rec##1:stmt_if.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~left##0:stmt_if.tree) @stmt_if:nn:nn
    foreign lpvm mutate(~#rec##1:stmt_if.tree, ?#rec##2:stmt_if.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~key##0:wybe.int) @stmt_if:nn:nn
    foreign lpvm mutate(~#rec##2:stmt_if.tree, ?#result##0:stmt_if.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~right##0:stmt_if.tree) @stmt_if:nn:nn
node > public {inline} (16 calls)
1: stmt_if.tree.node<1>
node(?left##0:stmt_if.tree, ?key##0:wybe.int, ?right##0:stmt_if.tree, #result##0:stmt_if.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:stmt_if.tree, ?left##0:stmt_if.tree)
        foreign llvm move(undef:wybe.int, ?key##0:wybe.int)
        foreign llvm move(undef:stmt_if.tree, ?right##0:stmt_if.tree)

    1:
        foreign lpvm access(#result##0:stmt_if.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?left##0:stmt_if.tree) @stmt_if:nn:nn
        foreign lpvm access(#result##0:stmt_if.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?key##0:wybe.int) @stmt_if:nn:nn
        foreign lpvm access(~#result##0:stmt_if.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?right##0:stmt_if.tree) @stmt_if:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



right > public {inline} (0 calls)
0: stmt_if.tree.right<0>
right(#rec##0:stmt_if.tree, ?#result##0:stmt_if.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:stmt_if.tree, ?#result##0:stmt_if.tree)

    1:
        foreign lpvm access(~#rec##0:stmt_if.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:stmt_if.tree) @stmt_if:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

right > public {inline} (0 calls)
1: stmt_if.tree.right<1>
right(#rec##0:stmt_if.tree, ?#rec##1:stmt_if.tree, #field##0:stmt_if.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:stmt_if.tree, ?#rec##1:stmt_if.tree)

    1:
        foreign lpvm mutate(~#rec##0:stmt_if.tree, ?#rec##1:stmt_if.tree, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:stmt_if.tree) @stmt_if:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: stmt_if.tree.~=<0>
~=(#left##0:stmt_if.tree, #right##0:stmt_if.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_if.tree.=<0>(~#left##0:stmt_if.tree, ~#right##0:stmt_if.tree, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'stmt_if.tree'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"stmt_if.tree.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp ne i64 %"#left##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#left##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"#left##0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = icmp ne i64 %"#right##0", 0 
  br i1 %12, label %if.then1, label %if.else1 
if.else:
  %27 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %27 
if.then1:
  %13 = inttoptr i64 %"#right##0" to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = add   i64 %"#right##0", 8 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  %19 = load  i64, i64* %18 
  %20 = add   i64 %"#right##0", 16 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  %23 = load  i64, i64* %22 
  %24 = tail call fastcc  i1  @"stmt_if.tree.=<0>"(i64  %3, i64  %15)  
  br i1 %24, label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %25 = icmp eq i64 %7, %19 
  br i1 %25, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %26 = musttail call fastcc  i1  @"stmt_if.tree.=<0>"(i64  %11, i64  %23)  
  ret i1 %26 
if.else3:
  ret i1 0 
}


define external fastcc  i64 @"stmt_if.tree.empty<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"stmt_if.tree.key<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"stmt_if.tree.key<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  store  i64 %"#field##0", i64* %9 
  %10 = insertvalue {i64, i1} undef, i64 %3, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else:
  %12 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"stmt_if.tree.left<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"stmt_if.tree.left<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %3, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  i64 @"stmt_if.tree.node<0>"(i64  %"left##0", i64  %"key##0", i64  %"right##0")    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"left##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"key##0", i64* %7 
  %8 = add   i64 %2, 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"right##0", i64* %10 
  ret i64 %2 
}


define external fastcc  {i64, i64, i64, i1} @"stmt_if.tree.node<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#result##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#result##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"#result##0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i64, i64, i1} undef, i64 %3, 0 
  %13 = insertvalue {i64, i64, i64, i1} %12, i64 %7, 1 
  %14 = insertvalue {i64, i64, i64, i1} %13, i64 %11, 2 
  %15 = insertvalue {i64, i64, i64, i1} %14, i1 1, 3 
  ret {i64, i64, i64, i1} %15 
if.else:
  %16 = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i64, i64, i1} %16, i64 undef, 1 
  %18 = insertvalue {i64, i64, i64, i1} %17, i64 undef, 2 
  %19 = insertvalue {i64, i64, i64, i1} %18, i1 0, 3 
  ret {i64, i64, i64, i1} %19 
}


define external fastcc  {i64, i1} @"stmt_if.tree.right<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 16 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"stmt_if.tree.right<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 16 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  store  i64 %"#field##0", i64* %9 
  %10 = insertvalue {i64, i1} undef, i64 %3, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else:
  %12 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i1 @"stmt_if.tree.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = tail call fastcc  i1  @"stmt_if.tree.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}

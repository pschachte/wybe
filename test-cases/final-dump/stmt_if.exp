======================================================================
AFTER EVERYTHING:
 Module stmt_if
  public submods  : 
  public types    : tree: (stmt_if.tree,Just address)
  public resources: 
  public procs    : stmt_if.lookup<0>
                    stmt_if.tree./=<0>
                    stmt_if.tree.=<0>
                    stmt_if.tree.empty<0>
                    stmt_if.tree.key<0>
                    stmt_if.tree.key<1>
                    stmt_if.tree.left<0>
                    stmt_if.tree.left<1>
                    stmt_if.tree.node<0>
                    stmt_if.tree.node<1>
                    stmt_if.tree.right<0>
                    stmt_if.tree.right<1>
  imports         : public use stmt_if.tree
                    use wybe
  types           : tree/public  is address { empty() @stmt_if:3:21 | node(left:tree, key:int, right:tree) @stmt_if:3:29  }  @stmt_if:3:5
  resources       : 
  submodules      : stmt_if.tree
  procs           : 

foobar > (0 calls)
0: foobar(io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp$8#0:stmt_if.tree)
    foreign lpvm mutate(~tmp$8#0:stmt_if.tree, ?tmp$9#0:stmt_if.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:stmt_if.tree)
    foreign lpvm mutate(~tmp$9#0:stmt_if.tree, ?tmp$10#0:stmt_if.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$10#0:stmt_if.tree, ?tmp$11#0:stmt_if.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:stmt_if.tree)
    stmt_if.lookup<0>(1:wybe.int, tmp$11#0:stmt_if.tree, ?tmp$4#0:wybe.bool) #3 @stmt_if:21:9
    case ~tmp$4#0:wybe.bool of
    0:
        foreign c print_string("lookup fails when it should succeed":wybe.string, ~#io#0:wybe.phantom, ?tmp$14#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$14#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
        stmt_if.gen$1<0>(~io#1:wybe.phantom, _:stmt_if.tree, _:stmt_if.tree, _:stmt_if.tree, ~tmp$11#0:stmt_if.tree, ?io#2:wybe.phantom) #8

    1:
        foreign c print_string("lookup succeeds when it should":wybe.string, ~#io#0:wybe.phantom, ?tmp$14#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$14#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
        stmt_if.gen$1<0>(~io#1:wybe.phantom, _:stmt_if.tree, _:stmt_if.tree, _:stmt_if.tree, ~tmp$11#0:stmt_if.tree, ?io#2:wybe.phantom) #5



gen$1 > (2 calls)
0: gen$1(io#0:wybe.phantom, [tmp$0#0:stmt_if.tree], [tmp$1#0:stmt_if.tree], [tmp$2#0:stmt_if.tree], tr#0:stmt_if.tree, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    stmt_if.lookup<0>(3:wybe.int, ~tr#0:stmt_if.tree, ?tmp$3#0:wybe.bool) #0 @stmt_if:24:9
    case ~tmp$3#0:wybe.bool of
    0:
        foreign c print_string("lookup succeeds when it should fail":wybe.string, ~#io#0:wybe.phantom, ?tmp$6#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$6#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn

    1:
        foreign c print_string("lookup fails when it should":wybe.string, ~#io#0:wybe.phantom, ?tmp$6#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$6#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn



lookup > public (8 calls)
0: lookup(key#0:wybe.int, tree#0:stmt_if.tree, ?result#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(tree#0:stmt_if.tree, 0:wybe.int, ?tmp$6#0:wybe.bool)
    case ~tmp$6#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?result#0:wybe.bool) @stmt_if:14:21

    1:
        foreign lpvm access(tree#0:stmt_if.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?left#0:stmt_if.tree)
        foreign lpvm access(tree#0:stmt_if.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?nodekey#0:wybe.int)
        foreign lpvm access(~tree#0:stmt_if.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?right#0:stmt_if.tree)
        foreign llvm icmp_eq(key#0:wybe.int, nodekey#0:wybe.int, ?tmp$3#0:wybe.bool) @wybe:nn:nn
        case ~tmp$3#0:wybe.bool of
        0:
            foreign llvm icmp_slt(key#0:wybe.int, ~nodekey#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
            case ~tmp$2#0:wybe.bool of
            0:
                stmt_if.lookup<0>(~key#0:wybe.int, ~right#0:stmt_if.tree, ?result#0:wybe.bool) #6 @stmt_if:12:29

            1:
                stmt_if.lookup<0>(~key#0:wybe.int, ~left#0:stmt_if.tree, ?result#0:wybe.bool) #4 @stmt_if:8:29


        1:
            foreign llvm move(1:wybe.bool, ?result#0:wybe.bool) @stmt_if:7:29



  LLVM code       :

; ModuleID = 'stmt_if'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


@stmt_if.14 =    constant [36 x i8] c"lookup fails when it should succeed\00"


@stmt_if.12 =    constant [31 x i8] c"lookup succeeds when it should\00"


@stmt_if.18 =    constant [36 x i8] c"lookup succeeds when it should fail\00"


@stmt_if.16 =    constant [28 x i8] c"lookup fails when it should\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"stmt_if.foobar<0>"()    {
entry:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 0, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 1, i64* %8 
  %9 = add   i64 %3, 16 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  store  i64 0, i64* %11 
  %"1$tmp$4#0" = tail call fastcc  i1  @"stmt_if.lookup<0>"(i64  1, i64  %3)  
  br i1 %"1$tmp$4#0", label %if.then, label %if.else 
if.then:
  %13 = ptrtoint i8* getelementptr inbounds ([31 x i8], [31 x i8]* @stmt_if.12, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %13)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_if.gen$1<0>"(i64  %3)  
  ret void 
if.else:
  %15 = ptrtoint i8* getelementptr inbounds ([36 x i8], [36 x i8]* @stmt_if.14, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %15)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_if.gen$1<0>"(i64  %3)  
  ret void 
}


define external fastcc  void @"stmt_if.gen$1<0>"(i64  %"tr#0")    {
entry:
  %"1$tmp$3#0" = tail call fastcc  i1  @"stmt_if.lookup<0>"(i64  3, i64  %"tr#0")  
  br i1 %"1$tmp$3#0", label %if.then, label %if.else 
if.then:
  %17 = ptrtoint i8* getelementptr inbounds ([28 x i8], [28 x i8]* @stmt_if.16, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %17)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  %19 = ptrtoint i8* getelementptr inbounds ([36 x i8], [36 x i8]* @stmt_if.18, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %19)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i1 @"stmt_if.lookup<0>"(i64  %"key#0", i64  %"tree#0")    {
entry:
  %"1$tmp$6#0" = icmp ne i64 %"tree#0", 0 
  br i1 %"1$tmp$6#0", label %if.then, label %if.else 
if.then:
  %20 = inttoptr i64 %"tree#0" to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %23 = add   i64 %"tree#0", 8 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = add   i64 %"tree#0", 16 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %"2$tmp$3#0" = icmp eq i64 %"key#0", %26 
  br i1 %"2$tmp$3#0", label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  ret i1 1 
if.else1:
  %"5$tmp$2#0" = icmp slt i64 %"key#0", %26 
  br i1 %"5$tmp$2#0", label %if.then2, label %if.else2 
if.then2:
  %"6$result#0" = tail call fastcc  i1  @"stmt_if.lookup<0>"(i64  %"key#0", i64  %22)  
  ret i1 %"6$result#0" 
if.else2:
  %"7$result#0" = tail call fastcc  i1  @"stmt_if.lookup<0>"(i64  %"key#0", i64  %30)  
  ret i1 %"7$result#0" 
}
--------------------------------------------------
 Module stmt_if.tree
  public submods  : 
  public types    : 
  public resources: 
  public procs    : stmt_if.tree./=<0>
                    stmt_if.tree.=<0>
                    stmt_if.tree.empty<0>
                    stmt_if.tree.key<0>
                    stmt_if.tree.key<1>
                    stmt_if.tree.left<0>
                    stmt_if.tree.left<1>
                    stmt_if.tree.node<0>
                    stmt_if.tree.node<1>
                    stmt_if.tree.right<0>
                    stmt_if.tree.right<1>
  imports         : use stmt_if
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:stmt_if.tree, $right#0:stmt_if.tree, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    stmt_if.tree.=<0>(~$left#0:stmt_if.tree, ~$right#0:stmt_if.tree, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (7 calls)
0: =($left#0:stmt_if.tree, $right#0:stmt_if.tree, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($left#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp_eq(~$left#0:stmt_if.tree, ~$right#0:stmt_if.tree, ?$$#0:!wybe.bool)

    1:
        foreign lpvm access($left#0:stmt_if.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?$left$left#0:stmt_if.tree)
        foreign lpvm access($left#0:stmt_if.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?$left$key#0:wybe.int)
        foreign lpvm access(~$left#0:stmt_if.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?$left$right#0:stmt_if.tree)
        foreign llvm icmp_ne($right#0:stmt_if.tree, 0:wybe.int, ?tmp$10#0:wybe.bool)
        case ~tmp$10#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access($right#0:stmt_if.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?$right$left#0:stmt_if.tree)
            foreign lpvm access($right#0:stmt_if.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?$right$key#0:wybe.int)
            foreign lpvm access(~$right#0:stmt_if.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?$right$right#0:stmt_if.tree)
            stmt_if.tree.=<0>(~$left$left#0:stmt_if.tree, ~$right$left#0:stmt_if.tree, ?tmp$4#0:wybe.bool) #2
            case ~tmp$4#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign llvm icmp_eq(~$left$key#0:wybe.int, ~$right$key#0:wybe.int, ?tmp$5#0:wybe.bool) @wybe:nn:nn
                case ~tmp$5#0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                1:
                    stmt_if.tree.=<0>(~$left$right#0:stmt_if.tree, ~$right$right#0:stmt_if.tree, ?$$#0:wybe.bool) #4






empty > public {inline} (0 calls)
0: empty(?$#0:stmt_if.tree):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:stmt_if.tree, ?$#0:stmt_if.tree)


key > public {inline} (0 calls)
0: key($rec#0:stmt_if.tree, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:stmt_if.tree, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

    1:
        foreign lpvm access(~$rec#0:stmt_if.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

key > public {inline} (0 calls)
1: key($rec#0:stmt_if.tree, ?$rec#1:stmt_if.tree, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:stmt_if.tree, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:stmt_if.tree, ?$rec#1:stmt_if.tree)

    1:
        foreign lpvm mutate(~%$rec#0:stmt_if.tree, ?%$rec#1:stmt_if.tree, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



left > public {inline} (0 calls)
0: left($rec#0:stmt_if.tree, ?$#0:stmt_if.tree, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:stmt_if.tree, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:stmt_if.tree, ?$#0:stmt_if.tree)

    1:
        foreign lpvm access(~$rec#0:stmt_if.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?$#0:stmt_if.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

left > public {inline} (0 calls)
1: left($rec#0:stmt_if.tree, ?$rec#1:stmt_if.tree, $field#0:stmt_if.tree, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:stmt_if.tree, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:stmt_if.tree, ?$rec#1:stmt_if.tree)

    1:
        foreign lpvm mutate(~%$rec#0:stmt_if.tree, ?%$rec#1:stmt_if.tree, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:stmt_if.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



node > public {inline} (0 calls)
0: node(left#0:stmt_if.tree, key#0:wybe.int, right#0:stmt_if.tree, ?$#0:stmt_if.tree):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?$rec#0:!stmt_if.tree)
    foreign lpvm mutate(~%$rec#0:stmt_if.tree, ?%$rec#1:stmt_if.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~left#0:stmt_if.tree)
    foreign lpvm mutate(~%$rec#1:stmt_if.tree, ?%$rec#2:stmt_if.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~key#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:stmt_if.tree, ?%$#0:stmt_if.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~right#0:stmt_if.tree)
node > public {inline} (16 calls)
1: node(?left#0:stmt_if.tree, ?key#0:wybe.int, ?right#0:stmt_if.tree, $#0:stmt_if.tree, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:stmt_if.tree, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:stmt_if.tree, ?left#0:stmt_if.tree)
        foreign llvm move(undef:wybe.int, ?key#0:wybe.int)
        foreign llvm move(undef:stmt_if.tree, ?right#0:stmt_if.tree)

    1:
        foreign lpvm access($#0:stmt_if.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?left#0:stmt_if.tree)
        foreign lpvm access($#0:stmt_if.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?key#0:wybe.int)
        foreign lpvm access(~$#0:stmt_if.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?right#0:stmt_if.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



right > public {inline} (0 calls)
0: right($rec#0:stmt_if.tree, ?$#0:stmt_if.tree, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:stmt_if.tree, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:stmt_if.tree, ?$#0:stmt_if.tree)

    1:
        foreign lpvm access(~$rec#0:stmt_if.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?$#0:stmt_if.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

right > public {inline} (0 calls)
1: right($rec#0:stmt_if.tree, ?$rec#1:stmt_if.tree, $field#0:stmt_if.tree, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:stmt_if.tree, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:stmt_if.tree, ?$rec#1:stmt_if.tree)

    1:
        foreign lpvm mutate(~%$rec#0:stmt_if.tree, ?%$rec#1:stmt_if.tree, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:stmt_if.tree)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'stmt_if.tree'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"stmt_if.tree./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i1  @"stmt_if.tree.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  %"1$$$#0" = xor i1 %"1$tmp$0#0", 1 
  ret i1 %"1$$$#0" 
}


define external fastcc  i1 @"stmt_if.tree.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"$left#0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %"2$tmp$10#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"2$tmp$10#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"3$$$#0" 
if.then1:
  %12 = inttoptr i64 %"$right#0" to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %15 = add   i64 %"$right#0", 8 
  %16 = inttoptr i64 %15 to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %19 = add   i64 %"$right#0", 16 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %"4$tmp$4#0" = tail call fastcc  i1  @"stmt_if.tree.=<0>"(i64  %3, i64  %14)  
  br i1 %"4$tmp$4#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6$tmp$5#0" = icmp eq i64 %7, %18 
  br i1 %"6$tmp$5#0", label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %"8$$$#0" = tail call fastcc  i1  @"stmt_if.tree.=<0>"(i64  %11, i64  %22)  
  ret i1 %"8$$$#0" 
if.else3:
  ret i1 0 
}


define external fastcc  i64 @"stmt_if.tree.empty<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"stmt_if.tree.key<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %23 = add   i64 %"$rec#0", 8 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = insertvalue {i64, i1} undef, i64 %26, 0 
  %28 = insertvalue {i64, i1} %27, i1 1, 1 
  ret {i64, i1} %28 
if.else:
  %29 = insertvalue {i64, i1} undef, i64 undef, 0 
  %30 = insertvalue {i64, i1} %29, i1 0, 1 
  ret {i64, i1} %30 
}


define external fastcc  {i64, i1} @"stmt_if.tree.key<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %31 = trunc i64 24 to i32  
  %32 = tail call ccc  i8*  @wybe_malloc(i32  %31)  
  %33 = ptrtoint i8* %32 to i64 
  %34 = inttoptr i64 %33 to i8* 
  %35 = inttoptr i64 %"$rec#0" to i8* 
  %36 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %34, i8*  %35, i32  %36, i32  8, i1  0)  
  %37 = add   i64 %33, 8 
  %38 = inttoptr i64 %37 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  store  i64 %"$field#0", i64* %39 
  %40 = insertvalue {i64, i1} undef, i64 %33, 0 
  %41 = insertvalue {i64, i1} %40, i1 1, 1 
  ret {i64, i1} %41 
if.else:
  %42 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %43 = insertvalue {i64, i1} %42, i1 0, 1 
  ret {i64, i1} %43 
}


define external fastcc  {i64, i1} @"stmt_if.tree.left<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %44 = inttoptr i64 %"$rec#0" to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  %46 = load  i64, i64* %45 
  %47 = insertvalue {i64, i1} undef, i64 %46, 0 
  %48 = insertvalue {i64, i1} %47, i1 1, 1 
  ret {i64, i1} %48 
if.else:
  %49 = insertvalue {i64, i1} undef, i64 undef, 0 
  %50 = insertvalue {i64, i1} %49, i1 0, 1 
  ret {i64, i1} %50 
}


define external fastcc  {i64, i1} @"stmt_if.tree.left<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %51 = trunc i64 24 to i32  
  %52 = tail call ccc  i8*  @wybe_malloc(i32  %51)  
  %53 = ptrtoint i8* %52 to i64 
  %54 = inttoptr i64 %53 to i8* 
  %55 = inttoptr i64 %"$rec#0" to i8* 
  %56 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %54, i8*  %55, i32  %56, i32  8, i1  0)  
  %57 = inttoptr i64 %53 to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  store  i64 %"$field#0", i64* %58 
  %59 = insertvalue {i64, i1} undef, i64 %53, 0 
  %60 = insertvalue {i64, i1} %59, i1 1, 1 
  ret {i64, i1} %60 
if.else:
  %61 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %62 = insertvalue {i64, i1} %61, i1 0, 1 
  ret {i64, i1} %62 
}


define external fastcc  i64 @"stmt_if.tree.node<0>"(i64  %"left#0", i64  %"key#0", i64  %"right#0")    {
entry:
  %63 = trunc i64 24 to i32  
  %64 = tail call ccc  i8*  @wybe_malloc(i32  %63)  
  %65 = ptrtoint i8* %64 to i64 
  %66 = inttoptr i64 %65 to i64* 
  %67 = getelementptr  i64, i64* %66, i64 0 
  store  i64 %"left#0", i64* %67 
  %68 = add   i64 %65, 8 
  %69 = inttoptr i64 %68 to i64* 
  %70 = getelementptr  i64, i64* %69, i64 0 
  store  i64 %"key#0", i64* %70 
  %71 = add   i64 %65, 16 
  %72 = inttoptr i64 %71 to i64* 
  %73 = getelementptr  i64, i64* %72, i64 0 
  store  i64 %"right#0", i64* %73 
  ret i64 %65 
}


define external fastcc  {i64, i64, i64, i1} @"stmt_if.tree.node<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %74 = inttoptr i64 %"$#0" to i64* 
  %75 = getelementptr  i64, i64* %74, i64 0 
  %76 = load  i64, i64* %75 
  %77 = add   i64 %"$#0", 8 
  %78 = inttoptr i64 %77 to i64* 
  %79 = getelementptr  i64, i64* %78, i64 0 
  %80 = load  i64, i64* %79 
  %81 = add   i64 %"$#0", 16 
  %82 = inttoptr i64 %81 to i64* 
  %83 = getelementptr  i64, i64* %82, i64 0 
  %84 = load  i64, i64* %83 
  %85 = insertvalue {i64, i64, i64, i1} undef, i64 %76, 0 
  %86 = insertvalue {i64, i64, i64, i1} %85, i64 %80, 1 
  %87 = insertvalue {i64, i64, i64, i1} %86, i64 %84, 2 
  %88 = insertvalue {i64, i64, i64, i1} %87, i1 1, 3 
  ret {i64, i64, i64, i1} %88 
if.else:
  %89 = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0 
  %90 = insertvalue {i64, i64, i64, i1} %89, i64 undef, 1 
  %91 = insertvalue {i64, i64, i64, i1} %90, i64 undef, 2 
  %92 = insertvalue {i64, i64, i64, i1} %91, i1 0, 3 
  ret {i64, i64, i64, i1} %92 
}


define external fastcc  {i64, i1} @"stmt_if.tree.right<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %93 = add   i64 %"$rec#0", 16 
  %94 = inttoptr i64 %93 to i64* 
  %95 = getelementptr  i64, i64* %94, i64 0 
  %96 = load  i64, i64* %95 
  %97 = insertvalue {i64, i1} undef, i64 %96, 0 
  %98 = insertvalue {i64, i1} %97, i1 1, 1 
  ret {i64, i1} %98 
if.else:
  %99 = insertvalue {i64, i1} undef, i64 undef, 0 
  %100 = insertvalue {i64, i1} %99, i1 0, 1 
  ret {i64, i1} %100 
}


define external fastcc  {i64, i1} @"stmt_if.tree.right<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %101 = trunc i64 24 to i32  
  %102 = tail call ccc  i8*  @wybe_malloc(i32  %101)  
  %103 = ptrtoint i8* %102 to i64 
  %104 = inttoptr i64 %103 to i8* 
  %105 = inttoptr i64 %"$rec#0" to i8* 
  %106 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %104, i8*  %105, i32  %106, i32  8, i1  0)  
  %107 = add   i64 %103, 16 
  %108 = inttoptr i64 %107 to i64* 
  %109 = getelementptr  i64, i64* %108, i64 0 
  store  i64 %"$field#0", i64* %109 
  %110 = insertvalue {i64, i1} undef, i64 %103, 0 
  %111 = insertvalue {i64, i1} %110, i1 1, 1 
  ret {i64, i1} %111 
if.else:
  %112 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %113 = insertvalue {i64, i1} %112, i1 0, 1 
  ret {i64, i1} %113 
}

======================================================================
AFTER EVERYTHING:
 Module call_site_id
  public submods  : 
  public types    : 
  public resources: 
  public procs    : call_site_id.<0>
                    call_site_id.bar<0>
                    call_site_id.foo<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#4:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c read_int(?x#0:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign c read_int(?y#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign llvm icmp sgt(x#0:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.bool) @wybe:nn:nn
    case ~tmp$3#0:wybe.bool of
    0:
        foreign llvm sub(0:wybe.int, ~x#0:wybe.int, ?tmp$1#0:wybe.int) @wybe:nn:nn
        call_site_id.foo<0>(~tmp$1#0:wybe.int, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #17 @call_site_id:25:6
        foreign llvm icmp sgt(y#0:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.bool) @wybe:nn:nn
        case ~tmp$5#0:wybe.bool of
        0:
            foreign llvm sub(0:wybe.int, ~y#0:wybe.int, ?tmp$2#0:wybe.int) @wybe:nn:nn
            call_site_id.foo<0>(~tmp$2#0:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) #18 @call_site_id:25:6

        1:
            call_site_id.foo<0>(~y#0:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) #19 @call_site_id:25:6


    1:
        call_site_id.foo<0>(~x#0:wybe.int, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #20 @call_site_id:25:6
        foreign llvm icmp sgt(y#0:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.bool) @wybe:nn:nn
        case ~tmp$4#0:wybe.bool of
        0:
            foreign llvm sub(0:wybe.int, ~y#0:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
            call_site_id.foo<0>(~tmp$0#0:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) #21 @call_site_id:25:6

        1:
            call_site_id.foo<0>(~y#0:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) #22 @call_site_id:25:6




bar > public inline (9 calls)
0: bar(x#0:wybe.int, io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    call_site_id.foo<0>(~x#0:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #0 @call_site_id:25:6


foo > public (1 calls)
0: foo(x#0:wybe.int, io#0:wybe.phantom, ?io#8:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string(" ":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign c print_string(" ":wybe.string, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign c print_string(" ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    foreign c print_string(" ":wybe.string, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
    foreign c print_string(" ":wybe.string, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @wybe:nn:nn
    foreign c print_string(" ":wybe.string, ~#io#5:wybe.phantom, ?#io#6:wybe.phantom) @wybe:nn:nn
    foreign c print_string(" ":wybe.string, ~#io#6:wybe.phantom, ?#io#7:wybe.phantom) @wybe:nn:nn
    foreign llvm mul(~x#0:wybe.int, 5:wybe.int, ?tmp$1#0:wybe.int) @wybe:nn:nn
    foreign llvm add(~tmp$1#0:wybe.int, 10:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#7:wybe.phantom, ?tmp$22#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$22#0:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'call_site_id'


 


declare external ccc  i64 @read_int()    


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_string(i64)    


@call_site_id.13 =    constant [2 x i8] c" \00"


@call_site_id.11 =    constant [2 x i8] c" \00"


@call_site_id.9 =    constant [2 x i8] c" \00"


@call_site_id.7 =    constant [2 x i8] c" \00"


@call_site_id.5 =    constant [2 x i8] c" \00"


@call_site_id.3 =    constant [2 x i8] c" \00"


@call_site_id.1 =    constant [2 x i8] c" \00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"call_site_id.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %"1$x#0" = tail call ccc  i64  @read_int()  
  %"1$y#0" = tail call ccc  i64  @read_int()  
  %"1$tmp$3#0" = icmp sgt i64 %"1$x#0", 0 
  br i1 %"1$tmp$3#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"1$x#0")  
  %"2$tmp$4#0" = icmp sgt i64 %"1$y#0", 0 
  br i1 %"2$tmp$4#0", label %if.then1, label %if.else1 
if.else:
  %"3$tmp$1#0" = sub   i64 0, %"1$x#0" 
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"3$tmp$1#0")  
  %"3$tmp$5#0" = icmp sgt i64 %"1$y#0", 0 
  br i1 %"3$tmp$5#0", label %if.then2, label %if.else2 
if.then1:
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"1$y#0")  
  ret void 
if.else1:
  %"5$tmp$0#0" = sub   i64 0, %"1$y#0" 
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"5$tmp$0#0")  
  ret void 
if.then2:
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"1$y#0")  
  ret void 
if.else2:
  %"7$tmp$2#0" = sub   i64 0, %"1$y#0" 
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"7$tmp$2#0")  
  ret void 
}


define external fastcc  void @"call_site_id.bar<0>"(i64  %"x#0")    {
entry:
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"x#0")  
  ret void 
}


define external fastcc  void @"call_site_id.foo<0>"(i64  %"x#0")    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @call_site_id.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  %4 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @call_site_id.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  %6 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @call_site_id.5, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %6)  
  %8 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @call_site_id.7, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %8)  
  %10 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @call_site_id.9, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %10)  
  %12 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @call_site_id.11, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %12)  
  %14 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @call_site_id.13, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %14)  
  %"1$tmp$1#0" = mul   i64 %"x#0", 5 
  %"1$tmp$0#0" = add   i64 %"1$tmp$1#0", 10 
  tail call ccc  void  @print_int(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

======================================================================
AFTER EVERYTHING:
 Module call_site_id
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : call_site_id.<0>
                    call_site_id.bar<0>
                    call_site_id.foo<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: call_site_id.<0>
(io##0:wybe.phantom, ?io##4:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c read_int(?x##0:wybe.int, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
    foreign c read_int(?y##0:wybe.int, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    foreign llvm icmp_sgt(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm sub(0:wybe.int, ~x##0:wybe.int, ?tmp#1##0:wybe.int) @int:nn:nn
        call_site_id.foo<0>(~tmp#1##0:wybe.int, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #14 @call_site_id:nn:nn
        foreign llvm icmp_sgt(y##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            foreign llvm sub(0:wybe.int, ~y##0:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
            call_site_id.foo<0>(~tmp#2##0:wybe.int, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) #15 @call_site_id:nn:nn

        1:
            call_site_id.foo<0>(~y##0:wybe.int, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) #16 @call_site_id:nn:nn


    1:
        call_site_id.foo<0>(~x##0:wybe.int, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #17 @call_site_id:nn:nn
        foreign llvm icmp_sgt(y##0:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
        case ~tmp#3##0:wybe.bool of
        0:
            foreign llvm sub(0:wybe.int, ~y##0:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
            call_site_id.foo<0>(~tmp#0##0:wybe.int, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) #18 @call_site_id:nn:nn

        1:
            call_site_id.foo<0>(~y##0:wybe.int, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) #19 @call_site_id:nn:nn




bar > public {inline} (9 calls)
0: call_site_id.bar<0>
bar(x##0:wybe.int, io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    call_site_id.foo<0>(~x##0:wybe.int, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #0 @call_site_id:nn:nn


foo > public (1 calls)
0: call_site_id.foo<0>
foo(x##0:wybe.int, io##0:wybe.phantom, ?io##8:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.string.print_string<0>(" ":wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #10 @io:nn:nn
    wybe.string.print_string<0>(" ":wybe.string, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) #11 @io:nn:nn
    wybe.string.print_string<0>(" ":wybe.string, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #12 @io:nn:nn
    wybe.string.print_string<0>(" ":wybe.string, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) #13 @io:nn:nn
    wybe.string.print_string<0>(" ":wybe.string, ~#io##4:wybe.phantom, ?#io##5:wybe.phantom) #14 @io:nn:nn
    wybe.string.print_string<0>(" ":wybe.string, ~#io##5:wybe.phantom, ?#io##6:wybe.phantom) #15 @io:nn:nn
    wybe.string.print_string<0>(" ":wybe.string, ~#io##6:wybe.phantom, ?#io##7:wybe.phantom) #16 @io:nn:nn
    foreign llvm mul(~x##0:wybe.int, 5:wybe.int, ?tmp#1##0:wybe.int) @int:nn:nn
    foreign llvm add(~tmp#1##0:wybe.int, 10:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~#io##7:wybe.phantom, ?tmp#22##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?#io##8:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'call_site_id'


 


declare external ccc  i64 @read_int()    


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


@call_site_id.14 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @call_site_id.13 to i64) }


@call_site_id.13 =    constant [?? x i8] c" \00"


@call_site_id.12 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @call_site_id.11 to i64) }


@call_site_id.11 =    constant [?? x i8] c" \00"


@call_site_id.10 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @call_site_id.9 to i64) }


@call_site_id.9 =    constant [?? x i8] c" \00"


@call_site_id.8 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @call_site_id.7 to i64) }


@call_site_id.7 =    constant [?? x i8] c" \00"


@call_site_id.6 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @call_site_id.5 to i64) }


@call_site_id.5 =    constant [?? x i8] c" \00"


@call_site_id.4 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @call_site_id.3 to i64) }


@call_site_id.3 =    constant [?? x i8] c" \00"


@call_site_id.2 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @call_site_id.1 to i64) }


@call_site_id.1 =    constant [?? x i8] c" \00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"call_site_id.<0>"()    {
entry:
  %"1#x##0" = tail call ccc  i64  @read_int()  
  %"1#y##0" = tail call ccc  i64  @read_int()  
  %"1#tmp#5##0" = icmp sgt i64 %"1#x##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"1#x##0")  
  %"2#tmp#3##0" = icmp sgt i64 %"1#y##0", 0 
  br i1 %"2#tmp#3##0", label %if.then1, label %if.else1 
if.else:
  %"3#tmp#1##0" = sub   i64 0, %"1#x##0" 
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"3#tmp#1##0")  
  %"3#tmp#4##0" = icmp sgt i64 %"1#y##0", 0 
  br i1 %"3#tmp#4##0", label %if.then2, label %if.else2 
if.then1:
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"1#y##0")  
  ret void 
if.else1:
  %"5#tmp#0##0" = sub   i64 0, %"1#y##0" 
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"5#tmp#0##0")  
  ret void 
if.then2:
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"1#y##0")  
  ret void 
if.else2:
  %"7#tmp#2##0" = sub   i64 0, %"1#y##0" 
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"7#tmp#2##0")  
  ret void 
}


define external fastcc  void @"call_site_id.bar<0>"(i64  %"x##0")    {
entry:
  tail call fastcc  void  @"call_site_id.foo<0>"(i64  %"x##0")  
  ret void 
}


define external fastcc  void @"call_site_id.foo<0>"(i64  %"x##0")    {
entry:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @call_site_id.2, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @call_site_id.4, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @call_site_id.6, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @call_site_id.8, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @call_site_id.10, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @call_site_id.12, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @call_site_id.14, i32 0, i32 0) to i64))  
  %"1#tmp#1##0" = mul   i64 %"x##0", 5 
  %"1#tmp#0##0" = add   i64 %"1#tmp#1##0", 10 
  tail call ccc  void  @print_int(i64  %"1#tmp#0##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

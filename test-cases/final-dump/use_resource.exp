======================================================================
AFTER EVERYTHING:
 Module use_resource
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : use_resource.<0>
  imports         : use wybe
  resources       : count: fromList [(use_resource.count,wybe.int = 0 @use_resource:nn:nn @use_resource:nn:nn)]
  procs           : 

*main* > public {impure} (0 calls) 
0: use_resource.<0>
(*#globals##0:wybe.phantom, *?#globals##2:wybe.phantom):
  GlobalFlows: {<<use_resource.count>>::{FlowIn, FlowOut}, <<wybe.io.io>>::{FlowIn, FlowOut}} 
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(<<use_resource.count>>:wybe.int, 0:wybe.int, ~*#globals##0:wybe.phantom, ?*#globals##1:wybe.phantom)
    use_resource.inc_count<0>(~*#globals##1:wybe.phantom, ?*tmp#1##0:wybe.phantom) #1 @use_resource:nn:nn
    foreign lpvm load(<<use_resource.count>>:wybe.int, ?%tmp#2##0:wybe.int, *tmp#1##0:wybe.phantom)
    use_resource.inc_count<0>(~*tmp#1##0:wybe.phantom, ?*tmp#3##0:wybe.phantom) #2 @use_resource:nn:nn
    use_resource.inc_count<0>(~*tmp#3##0:wybe.phantom, ?*tmp#4##0:wybe.phantom) #3 @use_resource:nn:nn
    use_resource.inc_count<0>(~*tmp#4##0:wybe.phantom, ?*tmp#5##0:wybe.phantom) #4 @use_resource:nn:nn
    wybe.string.print_string<0>("Inner count (4): ":wybe.string, ~*tmp#5##0:wybe.phantom, ?*tmp#6##0:wybe.phantom) #5 @io:nn:nn
    foreign lpvm load(<<use_resource.count>>:wybe.int, ?%tmp#7##0:wybe.int, *tmp#6##0:wybe.phantom)
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom, *tmp#6##0:wybe.phantom)
    foreign c print_int(~%tmp#7##0:wybe.int, ~%tmp#8##0:wybe.phantom, ?%tmp#9##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#9##0:wybe.phantom, ?%tmp#10##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(<<wybe.io.io>>:wybe.phantom, ~%tmp#10##0:wybe.phantom, ~*tmp#6##0:wybe.phantom, ?*tmp#11##0:wybe.phantom)
    foreign lpvm store(<<use_resource.count>>:wybe.int, %tmp#2##0:wybe.int, ~*tmp#11##0:wybe.phantom, ?*tmp#12##0:wybe.phantom)
    wybe.string.print_string<0>("Outer count (1): ":wybe.string, ~*tmp#12##0:wybe.phantom, ?*tmp#13##0:wybe.phantom) #6 @io:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom, *tmp#13##0:wybe.phantom)
    foreign c print_int(~%tmp#2##0:wybe.int, ~%tmp#14##0:wybe.phantom, ?%tmp#15##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#15##0:wybe.phantom, ?%tmp#16##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(<<wybe.io.io>>:wybe.phantom, ~%tmp#16##0:wybe.phantom, ~*tmp#13##0:wybe.phantom, ?*#globals##2:wybe.phantom)


inc_count > (4 calls) 
0: use_resource.inc_count<0>
inc_count(*#globals##0:wybe.phantom, *?#globals##1:wybe.phantom):
  GlobalFlows: {<<use_resource.count>>::{FlowIn, FlowOut}} 
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<use_resource.count>>:wybe.int, ?%count##0:wybe.int, *#globals##0:wybe.phantom)
    foreign llvm add(~%count##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
    foreign lpvm store(<<use_resource.count>>:wybe.int, ~tmp#0##0:wybe.int, ~*#globals##0:wybe.phantom, ?*#globals##1:wybe.phantom)


use_test > {inline} (1 calls) 
0: use_resource.use_test<0>
use_test(*#globals##0:wybe.phantom, *?#globals##9:wybe.phantom):
  GlobalFlows: {<<use_resource.count>>::{FlowIn, FlowOut}, <<wybe.io.io>>::{FlowIn, FlowOut}} 
  AliasPairs: []
  InterestingCallProperties: []
    use_resource.inc_count<0>(~*#globals##0:wybe.phantom, ?*#globals##1:wybe.phantom) #0 @use_resource:nn:nn
    foreign lpvm load(<<use_resource.count>>:wybe.int, ?%tmp#0##0:wybe.int, *#globals##1:wybe.phantom)
    use_resource.inc_count<0>(~*#globals##1:wybe.phantom, ?*#globals##2:wybe.phantom) #1 @use_resource:nn:nn
    use_resource.inc_count<0>(~*#globals##2:wybe.phantom, ?*#globals##3:wybe.phantom) #2 @use_resource:nn:nn
    use_resource.inc_count<0>(~*#globals##3:wybe.phantom, ?*#globals##4:wybe.phantom) #3 @use_resource:nn:nn
    wybe.string.print_string<0>("Inner count (4): ":wybe.string, ~*#globals##4:wybe.phantom, ?*#globals##5:wybe.phantom) #8 @io:nn:nn
    foreign lpvm load(<<use_resource.count>>:wybe.int, ?%count##0:wybe.int, *#globals##5:wybe.phantom)
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom, *#globals##5:wybe.phantom)
    foreign c print_int(~%count##0:wybe.int, ~%tmp#5##0:wybe.phantom, ?%tmp#6##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#6##0:wybe.phantom, ?%tmp#8##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(<<wybe.io.io>>:wybe.phantom, ~%tmp#8##0:wybe.phantom, ~*#globals##5:wybe.phantom, ?*#globals##6:wybe.phantom)
    foreign lpvm store(<<use_resource.count>>:wybe.int, %tmp#0##0:wybe.int, ~*#globals##6:wybe.phantom, ?*#globals##7:wybe.phantom)
    wybe.string.print_string<0>("Outer count (1): ":wybe.string, ~*#globals##7:wybe.phantom, ?*#globals##8:wybe.phantom) #9 @io:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#13##0:wybe.phantom, *#globals##8:wybe.phantom)
    foreign c print_int(~%tmp#0##0:wybe.int, ~%tmp#13##0:wybe.phantom, ?%tmp#14##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#14##0:wybe.phantom, ?%tmp#16##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(<<wybe.io.io>>:wybe.phantom, ~%tmp#16##0:wybe.phantom, ~*#globals##8:wybe.phantom, ?*#globals##9:wybe.phantom)

  LLVM code       :

; ModuleID = 'use_resource'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


@use_resource.6 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @use_resource.5 to i64) }


@use_resource.5 =    constant [?? x i8] c"Outer count (1): \00"


@use_resource.3 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @use_resource.2 to i64) }


@use_resource.2 =    constant [?? x i8] c"Inner count (4): \00"


@"resource#use_resource.count" =    global i64 undef


@use_resource.13 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @use_resource.12 to i64) }


@use_resource.12 =    constant [?? x i8] c"Outer count (1): \00"


@use_resource.10 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @use_resource.9 to i64) }


@use_resource.9 =    constant [?? x i8] c"Inner count (4): \00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"use_resource.<0>"()    {
entry:
  store  i64 0, i64* @"resource#use_resource.count" 
  tail call fastcc  void  @"use_resource.inc_count<0>"()  
  %1 = load  i64, i64* @"resource#use_resource.count" 
  tail call fastcc  void  @"use_resource.inc_count<0>"()  
  tail call fastcc  void  @"use_resource.inc_count<0>"()  
  tail call fastcc  void  @"use_resource.inc_count<0>"()  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @use_resource.3, i32 0, i32 0) to i64))  
  %4 = load  i64, i64* @"resource#use_resource.count" 
  tail call ccc  void  @print_int(i64  %4)  
  tail call ccc  void  @putchar(i8  10)  
  store  i64 %1, i64* @"resource#use_resource.count" 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @use_resource.6, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"use_resource.inc_count<0>"()    {
entry:
  %7 = load  i64, i64* @"resource#use_resource.count" 
  %"1#tmp#0##0" = add   i64 %7, 1 
  store  i64 %"1#tmp#0##0", i64* @"resource#use_resource.count" 
  ret void 
}


define external fastcc  void @"use_resource.use_test<0>"()    {
entry:
  tail call fastcc  void  @"use_resource.inc_count<0>"()  
  %8 = load  i64, i64* @"resource#use_resource.count" 
  tail call fastcc  void  @"use_resource.inc_count<0>"()  
  tail call fastcc  void  @"use_resource.inc_count<0>"()  
  tail call fastcc  void  @"use_resource.inc_count<0>"()  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @use_resource.10, i32 0, i32 0) to i64))  
  %11 = load  i64, i64* @"resource#use_resource.count" 
  tail call ccc  void  @print_int(i64  %11)  
  tail call ccc  void  @putchar(i8  10)  
  store  i64 %8, i64* @"resource#use_resource.count" 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @use_resource.13, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %8)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module backwards_assign
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : backwards_assign.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: backwards_assign.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    backwards_assign.#cont#1<0>(0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @backwards_assign:nn:nn


proc #cont#1 > {semipure} (2 calls)
0: backwards_assign.#cont#1<0>
#cont#1(i##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom) @backwards_assign:nn:nn
    foreign c print_int(i##0:wybe.int, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @backwards_assign:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @backwards_assign:nn:nn
    foreign lpvm store(~%tmp#4##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @backwards_assign:nn:nn
    foreign llvm add(~i##0:wybe.int, 1:wybe.int, ?i##1:wybe.int) @backwards_assign:nn:nn
    foreign llvm icmp_slt(i##1:wybe.int, 10:wybe.int, ?tmp#0##0:wybe.bool) @backwards_assign:nn:nn
    case ~tmp#0##0:wybe.bool of
    0:

    1:
        backwards_assign.#cont#1<0>(~i##1:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @backwards_assign:nn:nn



proc backwards_assign > {inline} (3 calls)
0: backwards_assign.backwards_assign<0>
backwards_assign(?output##0:wybe.int, input##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~input##0:wybe.int, 1:wybe.int, ?output##0:wybe.int) @backwards_assign:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'backwards_assign'

source_filename = "!ROOT!/final-dump/backwards_assign.wybe"
target triple    ????


declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"backwards_assign.<0>"() {
  tail call fastcc void @"backwards_assign.#cont#1<0>"(i64 0)
  ret void
}

define external fastcc void @"backwards_assign.#cont#1<0>"(i64 %"i##0") {
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  %"i##1" = add i64 %"i##0", 1
  %"tmp#0##0" = icmp slt i64 %"i##1", 10
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"backwards_assign.#cont#1<0>"(i64 %"i##1")
  ret void
if.else.0:
  ret void
}

define external fastcc i64 @"backwards_assign.backwards_assign<0>"(i64 %"input##0") {
  %"tmp#3##0" = add i64 %"input##0", 1
  ret i64 %"tmp#3##0"
}

======================================================================
AFTER EVERYTHING:
 Module backwards_assign
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : backwards_assign.<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public {inline} (0 calls)
0: backwards_assign.<0>
(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    backwards_assign.gen$1<0>(0:wybe.int, ~io#0:wybe.phantom, ?io#1:wybe.phantom) #0 @backwards_assign:nn:nn


backwards_assign > {inline} (3 calls)
0: backwards_assign.backwards_assign<0>
backwards_assign(?output#0:wybe.int, input#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm add(~input#0:wybe.int, 1:wybe.int, ?output#0:wybe.int) @int:nn:nn


gen$1 > (2 calls)
0: backwards_assign.gen$1<0>
gen$1(i#0:wybe.int, io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_int(i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$3#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$3#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    foreign llvm add(~i#0:wybe.int, 1:wybe.int, ?i#1:wybe.int) @int:nn:nn
    foreign llvm icmp_slt(i#1:wybe.int, 10:wybe.int, ?tmp$0#0:wybe.bool) @int:nn:nn
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(~io#1:wybe.phantom, ?io#2:wybe.phantom)

    1:
        backwards_assign.gen$1<0>(~i#1:wybe.int, ~io#1:wybe.phantom, ?io#2:wybe.phantom) #3 @backwards_assign:nn:nn


  LLVM code       :

; ModuleID = 'backwards_assign'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"backwards_assign.<0>"()    {
entry:
  tail call fastcc  void  @"backwards_assign.gen$1<0>"(i64  0)  
  ret void 
}


define external fastcc  i64 @"backwards_assign.backwards_assign<0>"(i64  %"input#0")    {
entry:
  %"1$output#0" = add   i64 %"input#0", 1 
  ret i64 %"1$output#0" 
}


define external fastcc  void @"backwards_assign.gen$1<0>"(i64  %"i#0")    {
entry:
  tail call ccc  void  @print_int(i64  %"i#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$i#1" = add   i64 %"i#0", 1 
  %"1$tmp$0#0" = icmp slt i64 %"1$i#1", 10 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"backwards_assign.gen$1<0>"(i64  %"1$i#1")  
  ret void 
if.else:
  ret void 
}

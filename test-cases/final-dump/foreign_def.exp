======================================================================
AFTER EVERYTHING:
 Module foreign_def
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : foreign_def.<0>
                    foreign_def.putchar<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: foreign_def.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @foreign_def:nn:nn
    foreign c putchar('W':wybe.char, ~%tmp#1##0:wybe.phantom, ?%tmp#2##0:wybe.phantom) @foreign_def:nn:nn
    foreign c putchar('y':wybe.char, ~tmp#2##0:wybe.phantom, ?%tmp#5##0:wybe.phantom) @foreign_def:nn:nn
    foreign c putchar('b':wybe.char, ~tmp#5##0:wybe.phantom, ?%tmp#8##0:wybe.phantom) @foreign_def:nn:nn
    foreign c putchar('e':wybe.char, ~tmp#8##0:wybe.phantom, ?%tmp#11##0:wybe.phantom) @foreign_def:nn:nn
    foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @foreign_def:nn:nn


proc putchar > public {inline} (4 calls)
0: foreign_def.putchar<0>
putchar(c##0:wybe.char)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%io##0:wybe.phantom) @foreign_def:nn:nn
    foreign c putchar(~c##0:wybe.char, ~%io##0:wybe.phantom, ?%io##1:wybe.phantom) @foreign_def:nn:nn
    foreign lpvm store(~%io##1:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @foreign_def:nn:nn

  LLVM code       :

; ModuleID = 'foreign_def'


 


declare external ccc  void @putchar(i8)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"foreign_def.<0>"()    {
entry:
  tail call ccc  void  @putchar(i8  87)  
  tail call ccc  void  @putchar(i8  121)  
  tail call ccc  void  @putchar(i8  98)  
  tail call ccc  void  @putchar(i8  101)  
  ret void 
}


define external fastcc  void @"foreign_def.putchar<0>"(i8  %"c##0") alwaysinline   {
entry:
  tail call ccc  void  @putchar(i8  %"c##0")  
  ret void 
}

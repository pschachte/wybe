======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module stmt_if2
  representation  : (not a type)
  public submods  : tree -> stmt_if2.tree
  public resources: 
  public procs    : stmt_if2.<0>
                    stmt_if2.lookup<0>
                    stmt_if2.tree.=<0>
                    stmt_if2.tree.empty<0>
                    stmt_if2.tree.key<0>
                    stmt_if2.tree.key<1>
                    stmt_if2.tree.left<0>
                    stmt_if2.tree.left<1>
                    stmt_if2.tree.node<0>
                    stmt_if2.tree.node<1>
                    stmt_if2.tree.right<0>
                    stmt_if2.tree.right<1>
                    stmt_if2.tree.~=<0>
  imports         : public use stmt_if2.tree
                    use wybe
  resources       : 
  submodules      : stmt_if2.tree
  procs           : 

module top-level code > public {semipure} (0 calls)
0: stmt_if2.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#7##0:stmt_if2.tree) @stmt_if2:nn:nn
    foreign lpvm mutate(~tmp#7##0:stmt_if2.tree, ?tmp#8##0:stmt_if2.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:stmt_if2.tree) @stmt_if2:nn:nn
    foreign lpvm mutate(~tmp#8##0:stmt_if2.tree, ?tmp#9##0:stmt_if2.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @stmt_if2:nn:nn
    foreign lpvm mutate(~tmp#9##0:stmt_if2.tree, ?tmp#10##0:stmt_if2.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:stmt_if2.tree) @stmt_if2:nn:nn
    stmt_if2.lookup<0>(1:wybe.int, ~tmp#10##0:stmt_if2.tree, ?tmp#3##0:wybe.bool) #3 @stmt_if2:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:

    1:
        wybe.string.print<0>("found":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @stmt_if2:nn:nn



proc lookup > public (5 calls)
0: stmt_if2.lookup<0>
lookup(key##0:wybe.int, tree##0:stmt_if2.tree, ?#result##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_if2.tree.=<0>(tree##0:stmt_if2.tree, 0:stmt_if2.tree, ?tmp#13##0:wybe.bool) #1 @stmt_if2:nn:nn
    case ~tmp#13##0:wybe.bool of
    0:
        foreign llvm icmp_ne(tree##0:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.bool) @stmt_if2:nn:nn
        case ~tmp#15##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#result##0:wybe.bool) @stmt_if2:nn:nn

        1:
            foreign lpvm access(tree##0:stmt_if2.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?l##0:stmt_if2.tree) @stmt_if2:nn:nn
            foreign lpvm access(tree##0:stmt_if2.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?k##0:wybe.int) @stmt_if2:nn:nn
            foreign lpvm access(~tree##0:stmt_if2.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?r##0:stmt_if2.tree) @stmt_if2:nn:nn
            foreign llvm icmp_eq(k##0:wybe.int, key##0:wybe.int, ?tmp#11##0:wybe.bool) @stmt_if2:nn:nn
            case ~tmp#11##0:wybe.bool of
            0:
                foreign llvm icmp_sgt(~k##0:wybe.int, key##0:wybe.int, ?tmp#10##0:wybe.bool) @stmt_if2:nn:nn
                case ~tmp#10##0:wybe.bool of
                0:
                    stmt_if2.lookup<0>(~key##0:wybe.int, ~r##0:stmt_if2.tree, ?#result##0:wybe.bool) #10 @stmt_if2:nn:nn

                1:
                    stmt_if2.lookup<0>(~key##0:wybe.int, ~l##0:stmt_if2.tree, ?#result##0:wybe.bool) #8 @stmt_if2:nn:nn


            1:
                foreign llvm move(1:wybe.bool, ?#result##0:wybe.bool) @stmt_if2:nn:nn



    1:
        foreign llvm move(0:wybe.bool, ?#result##0:wybe.bool) @stmt_if2:nn:nn



proc lookup#cont#1 > {inline} (3 calls)
0: stmt_if2.lookup#cont#1<0>
lookup#cont#1(tmp#4##0:wybe.bool, ?#result##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~tmp#4##0:wybe.bool, ?#result##0:wybe.bool) @stmt_if2:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'stmt_if2'

source_filename = "!ROOT!/final-dump/stmt_if2.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"found\00", align 8
@"string#1" = private unnamed_addr constant {i64, i64} { i64 5, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"stmt_if2.<0>"() {
  %"tmp#11##0" = call ccc ptr @wybe_malloc(i32 24)
  %"tmp#7##0" = ptrtoint ptr %"tmp#11##0" to i64
  %"tmp#12##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 0, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"tmp#7##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  store i64 1, ptr %"tmp#14##0"
  %"tmp#15##0" = add i64 %"tmp#7##0", 16
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 0, ptr %"tmp#16##0"
  %"tmp#3##0" = tail call fastcc i1 @"stmt_if2.lookup<0>"(i64 1, i64 %"tmp#7##0")
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#1" to i64 ))
  ret void
if.else.0:
  ret void
}

define external fastcc i1 @"stmt_if2.lookup<0>"(i64 %"key##0", i64 %"tree##0") {
  %"tmp#13##0" = tail call fastcc i1 @"stmt_if2.tree.=<0>"(i64 %"tree##0", i64 0)
  br i1 %"tmp#13##0", label %if.then.0, label %if.else.0
if.then.0:
  ret i1 0
if.else.0:
  %"tmp#15##0" = icmp ne i64 %"tree##0", 0
  br i1 %"tmp#15##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#23##0" = inttoptr i64 %"tree##0" to ptr
  %"l##0" = load i64, ptr %"tmp#23##0"
  %"tmp#24##0" = add i64 %"tree##0", 8
  %"tmp#25##0" = inttoptr i64 %"tmp#24##0" to ptr
  %"k##0" = load i64, ptr %"tmp#25##0"
  %"tmp#26##0" = add i64 %"tree##0", 16
  %"tmp#27##0" = inttoptr i64 %"tmp#26##0" to ptr
  %"r##0" = load i64, ptr %"tmp#27##0"
  %"tmp#11##0" = icmp eq i64 %"k##0", %"key##0"
  br i1 %"tmp#11##0", label %if.then.2, label %if.else.2
if.then.2:
  ret i1 1
if.else.2:
  %"tmp#10##0" = icmp sgt i64 %"k##0", %"key##0"
  br i1 %"tmp#10##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#28##0" = tail call fastcc i1 @"stmt_if2.lookup<0>"(i64 %"key##0", i64 %"l##0")
  ret i1 %"tmp#28##0"
if.else.3:
  %"tmp#29##0" = tail call fastcc i1 @"stmt_if2.lookup<0>"(i64 %"key##0", i64 %"r##0")
  ret i1 %"tmp#29##0"
if.else.1:
  ret i1 0
}

define external fastcc i1 @"stmt_if2.lookup#cont#1<0>"(i1 %"tmp#4##0") {
  ret i1 %"tmp#4##0"
}

--------------------------------------------------
 Module stmt_if2.tree
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : stmt_if2.tree.=<0>
                    stmt_if2.tree.empty<0>
                    stmt_if2.tree.key<0>
                    stmt_if2.tree.key<1>
                    stmt_if2.tree.left<0>
                    stmt_if2.tree.left<1>
                    stmt_if2.tree.node<0>
                    stmt_if2.tree.node<1>
                    stmt_if2.tree.right<0>
                    stmt_if2.tree.right<1>
                    stmt_if2.tree.~=<0>
  imports         : use stmt_if2
                    use wybe
  resources       : 
  procs           : 

proc = > public (7 calls)
0: stmt_if2.tree.=<0>
=(#left##0:stmt_if2.tree, #right##0:stmt_if2.tree, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:stmt_if2.tree, 0:stmt_if2.tree, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:stmt_if2.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#left##0:stmt_if2.tree) @stmt_if2:nn:nn
        foreign lpvm access(#left##0:stmt_if2.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#key##0:wybe.int) @stmt_if2:nn:nn
        foreign lpvm access(~#left##0:stmt_if2.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#right##0:stmt_if2.tree) @stmt_if2:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
        case ~tmp#10##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:stmt_if2.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#left##0:stmt_if2.tree) @stmt_if2:nn:nn
            foreign lpvm access(#right##0:stmt_if2.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#key##0:wybe.int) @stmt_if2:nn:nn
            foreign lpvm access(~#right##0:stmt_if2.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#right##0:stmt_if2.tree) @stmt_if2:nn:nn
            stmt_if2.tree.=<0>(~#left#left##0:stmt_if2.tree, ~#right#left##0:stmt_if2.tree, ?tmp#4##0:wybe.bool) #2
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#key##0:wybe.int, ~#right#key##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
                case ~tmp#5##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    stmt_if2.tree.=<0>(~#left#right##0:stmt_if2.tree, ~#right#right##0:stmt_if2.tree, ?#success##0:wybe.bool) #4






proc empty > public {inline} (0 calls)
0: stmt_if2.tree.empty<0>
empty(?#result##0:stmt_if2.tree)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:stmt_if2.tree, ?#result##0:stmt_if2.tree)


proc key > public {inline} (0 calls)
0: stmt_if2.tree.key<0>
key(#rec##0:stmt_if2.tree, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:stmt_if2.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @stmt_if2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc key > public {inline} (0 calls)
1: stmt_if2.tree.key<1>
key(#rec##0:stmt_if2.tree, ?#rec##1:stmt_if2.tree, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:stmt_if2.tree, ?#rec##1:stmt_if2.tree)

    1:
        foreign lpvm mutate(~#rec##0:stmt_if2.tree, ?#rec##1:stmt_if2.tree, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @stmt_if2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc left > public {inline} (0 calls)
0: stmt_if2.tree.left<0>
left(#rec##0:stmt_if2.tree, ?#result##0:stmt_if2.tree, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:stmt_if2.tree, ?#result##0:stmt_if2.tree)

    1:
        foreign lpvm access(~#rec##0:stmt_if2.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:stmt_if2.tree) @stmt_if2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc left > public {inline} (0 calls)
1: stmt_if2.tree.left<1>
left(#rec##0:stmt_if2.tree, ?#rec##1:stmt_if2.tree, #field##0:stmt_if2.tree, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:stmt_if2.tree, ?#rec##1:stmt_if2.tree)

    1:
        foreign lpvm mutate(~#rec##0:stmt_if2.tree, ?#rec##1:stmt_if2.tree, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:stmt_if2.tree) @stmt_if2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc node > public {inline} (0 calls)
0: stmt_if2.tree.node<0>
node(left##0:stmt_if2.tree, key##0:wybe.int, right##0:stmt_if2.tree, ?#result##0:stmt_if2.tree)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:stmt_if2.tree) @stmt_if2:nn:nn
    foreign lpvm mutate(~#rec##0:stmt_if2.tree, ?#rec##1:stmt_if2.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~left##0:stmt_if2.tree) @stmt_if2:nn:nn
    foreign lpvm mutate(~#rec##1:stmt_if2.tree, ?#rec##2:stmt_if2.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~key##0:wybe.int) @stmt_if2:nn:nn
    foreign lpvm mutate(~#rec##2:stmt_if2.tree, ?#result##0:stmt_if2.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~right##0:stmt_if2.tree) @stmt_if2:nn:nn
proc node > public {inline} (16 calls)
1: stmt_if2.tree.node<1>
node(?left##0:stmt_if2.tree, ?key##0:wybe.int, ?right##0:stmt_if2.tree, #result##0:stmt_if2.tree, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:stmt_if2.tree, ?left##0:stmt_if2.tree)
        foreign llvm move(undef:wybe.int, ?key##0:wybe.int)
        foreign llvm move(undef:stmt_if2.tree, ?right##0:stmt_if2.tree)

    1:
        foreign lpvm access(#result##0:stmt_if2.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?left##0:stmt_if2.tree) @stmt_if2:nn:nn
        foreign lpvm access(#result##0:stmt_if2.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?key##0:wybe.int) @stmt_if2:nn:nn
        foreign lpvm access(~#result##0:stmt_if2.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?right##0:stmt_if2.tree) @stmt_if2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc right > public {inline} (0 calls)
0: stmt_if2.tree.right<0>
right(#rec##0:stmt_if2.tree, ?#result##0:stmt_if2.tree, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:stmt_if2.tree, ?#result##0:stmt_if2.tree)

    1:
        foreign lpvm access(~#rec##0:stmt_if2.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:stmt_if2.tree) @stmt_if2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc right > public {inline} (0 calls)
1: stmt_if2.tree.right<1>
right(#rec##0:stmt_if2.tree, ?#rec##1:stmt_if2.tree, #field##0:stmt_if2.tree, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:stmt_if2.tree, ?#rec##1:stmt_if2.tree)

    1:
        foreign lpvm mutate(~#rec##0:stmt_if2.tree, ?#rec##1:stmt_if2.tree, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:stmt_if2.tree) @stmt_if2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: stmt_if2.tree.~=<0>
~=(#left##0:stmt_if2.tree, #right##0:stmt_if2.tree, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_if2.tree.=<0>(~#left##0:stmt_if2.tree, ~#right##0:stmt_if2.tree, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'stmt_if2.tree'

source_filename = "!ROOT!/final-dump/stmt_if2.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"stmt_if2.tree.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp ne i64 %"#left##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#13##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#left##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = add i64 %"#left##0", 8
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  %"#left#key##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = add i64 %"#left##0", 16
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  %"#left#right##0" = load i64, ptr %"tmp#17##0"
  %"tmp#10##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#10##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#18##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#left##0" = load i64, ptr %"tmp#18##0"
  %"tmp#19##0" = add i64 %"#right##0", 8
  %"tmp#20##0" = inttoptr i64 %"tmp#19##0" to ptr
  %"#right#key##0" = load i64, ptr %"tmp#20##0"
  %"tmp#21##0" = add i64 %"#right##0", 16
  %"tmp#22##0" = inttoptr i64 %"tmp#21##0" to ptr
  %"#right#right##0" = load i64, ptr %"tmp#22##0"
  %"tmp#4##0" = tail call fastcc i1 @"stmt_if2.tree.=<0>"(i64 %"#left#left##0", i64 %"#right#left##0")
  br i1 %"tmp#4##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#5##0" = icmp eq i64 %"#left#key##0", %"#right#key##0"
  br i1 %"tmp#5##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#23##0" = tail call fastcc i1 @"stmt_if2.tree.=<0>"(i64 %"#left#right##0", i64 %"#right#right##0")
  ret i1 %"tmp#23##0"
if.else.3:
  ret i1 0
if.else.2:
  ret i1 0
if.else.1:
  ret i1 0
if.else.0:
  %"tmp#24##0" = icmp eq i64 %"#right##0", 0
  ret i1 %"tmp#24##0"
}

define external fastcc i64 @"stmt_if2.tree.empty<0>"() {
  ret i64 0
}

define external fastcc {i64, i1} @"stmt_if2.tree.key<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = add i64 %"#rec##0", 8
  %"tmp#2##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"stmt_if2.tree.key<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 24, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = add i64 %"tmp#3##0", 8
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

define external fastcc {i64, i1} @"stmt_if2.tree.left<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = insertvalue {i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#4##0" = insertvalue {i64, i1} %"tmp#3##0", i1 1, 1
  ret {i64, i1} %"tmp#4##0"
if.else.0:
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 0, 1
  ret {i64, i1} %"tmp#6##0"
}

define external fastcc {i64, i1} @"stmt_if2.tree.left<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 24, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc i64 @"stmt_if2.tree.node<0>"(i64 %"left##0", i64 %"key##0", i64 %"right##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 24)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"left##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"key##0", ptr %"tmp#3##0"
  %"tmp#4##0" = add i64 %"#rec##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"right##0", ptr %"tmp#5##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64, i64, i1} @"stmt_if2.tree.node<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = add i64 %"#result##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = add i64 %"#result##0", 16
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i64, i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#10##0" = insertvalue {i64, i64, i64, i1} %"tmp#9##0", i64 %"tmp#5##0", 1
  %"tmp#11##0" = insertvalue {i64, i64, i64, i1} %"tmp#10##0", i64 %"tmp#8##0", 2
  %"tmp#12##0" = insertvalue {i64, i64, i64, i1} %"tmp#11##0", i1 1, 3
  ret {i64, i64, i64, i1} %"tmp#12##0"
if.else.0:
  %"tmp#13##0" = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i64, i64, i1} %"tmp#13##0", i64 undef, 1
  %"tmp#15##0" = insertvalue {i64, i64, i64, i1} %"tmp#14##0", i64 undef, 2
  %"tmp#16##0" = insertvalue {i64, i64, i64, i1} %"tmp#15##0", i1 0, 3
  ret {i64, i64, i64, i1} %"tmp#16##0"
}

define external fastcc {i64, i1} @"stmt_if2.tree.right<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = add i64 %"#rec##0", 16
  %"tmp#2##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"stmt_if2.tree.right<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 24, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = add i64 %"tmp#3##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

define external fastcc i1 @"stmt_if2.tree.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"stmt_if2.tree.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

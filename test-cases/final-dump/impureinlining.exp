======================================================================
AFTER EVERYTHING:
 Module impureinlining
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : impureinlining.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: impureinlining.<0>
()<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} printf(c"Hello, World!\n":wybe.c_string) @impureinlining:nn:nn
    foreign c {impure} printf(c"Hello, World!\n":wybe.c_string) @impureinlining:nn:nn


impure > {inline,impure} (1 calls)
0: impureinlining.impure<0>
impure()<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} printf(c"Hello, World!\n":wybe.c_string) @impureinlining:nn:nn


inlined > {inline,impure} (1 calls)
0: impureinlining.inlined<0>
inlined()<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} printf(c"Hello, World!\n":wybe.c_string) @impureinlining:nn:nn

  LLVM code       :

; ModuleID = 'impureinlining'


 


@impureinlining.0 =    constant [?? x i8] c"Hello, World!\0a\00"


declare external ccc  void @printf(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"impureinlining.<0>"() alwaysinline   {
entry:
  tail call ccc  void  @printf(i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @impureinlining.0, i32 0, i32 0) to i64))  
  tail call ccc  void  @printf(i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @impureinlining.0, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  void @"impureinlining.impure<0>"() alwaysinline   {
entry:
  tail call ccc  void  @printf(i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @impureinlining.0, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  void @"impureinlining.inlined<0>"() alwaysinline   {
entry:
  tail call ccc  void  @printf(i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @impureinlining.0, i32 0, i32 0) to i64))  
  ret void 
}

======================================================================
AFTER EVERYTHING:
 Module unique_conditional
 modifiers       : {unique} 
  representation  : 32 bit signed
  public submods  : 
  public resources: 
  public procs    : unique_conditional.bar<0>
                    unique_conditional.baz<0>
  imports         : use wybe
  resources       : 
  procs           : 

proc bar > public {inline} (1 calls)
0: unique_conditional.bar<0>
bar([a##0:unique_conditional])<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []


proc baz > public {inline} (1 calls)
0: unique_conditional.baz<0>
baz([a##0:unique_conditional])<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []


proc foo > (0 calls)
0: unique_conditional.foo<0>
foo(b##0:wybe.bool, [a##0:unique_conditional])<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~b##0:wybe.bool of
    0:

    1:


  LLVM code       :

; ModuleID = 'unique_conditional'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"unique_conditional.bar<0>"() alwaysinline   {
entry:
  ret void 
}


define external fastcc  void @"unique_conditional.baz<0>"() alwaysinline   {
entry:
  ret void 
}


define external fastcc  void @"unique_conditional.foo<0>"(i1  %"b##0")    {
entry:
  br i1 %"b##0", label %if.then, label %if.else 
if.then:
  ret void 
if.else:
  ret void 
}

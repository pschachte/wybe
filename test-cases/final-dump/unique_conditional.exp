======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module unique_conditional
 modifiers       : {unique} 
  representation  : 32 bit signed
  public submods  : 
  public resources: 
  public procs    : unique_conditional.bar<0>
                    unique_conditional.baz<0>
  imports         : use wybe
  resources       : 
  procs           : 

proc bar > public {inline} (1 calls)
0: unique_conditional.bar<0>
bar([a##0:unique_conditional])<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []


proc baz > public {inline} (1 calls)
0: unique_conditional.baz<0>
baz([a##0:unique_conditional])<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []


proc foo > (0 calls)
0: unique_conditional.foo<0>
foo(b##0:wybe.bool, [a##0:unique_conditional])<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~b##0:wybe.bool of
    0:

    1:


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'unique_conditional'

source_filename = "!ROOT!/final-dump/unique_conditional.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"unique_conditional.bar<0>"() {
  ret void
}

define external fastcc void @"unique_conditional.baz<0>"() {
  ret void
}

define external fastcc void @"unique_conditional.foo<0>"(i1 %"b##0") {
  br i1 %"b##0", label %if.then.0, label %if.else.0
if.then.0:
  ret void
if.else.0:
  ret void
}

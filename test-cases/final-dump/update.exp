======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module update
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : update.inc2<0>
                    update.inc2<1>
  imports         : use wybe
  resources       : 
  procs           : 

proc inc2 > public {inline} (0 calls)
0: update.inc2<0>
inc2(x##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~x##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int) @update:nn:nn
    foreign llvm add(~tmp#1##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @update:nn:nn
proc inc2 > public {inline} (0 calls)
1: update.inc2<1>
inc2(?x##0:wybe.int, y##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm sub(~y##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.int) @update:nn:nn
    foreign llvm sub(~tmp#0##0:wybe.int, 1:wybe.int, ?x##0:wybe.int) @update:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'update'

source_filename = "!ROOT!/final-dump/update.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i64 @"update.inc2<0>"(i64 %"x##0") {
  %"tmp#1##0" = add i64 %"x##0", 1
  %"tmp#6##0" = add i64 %"tmp#1##0", 1
  ret i64 %"tmp#6##0"
}

define external fastcc i64 @"update.inc2<1>"(i64 %"y##0") {
  %"tmp#0##0" = sub i64 %"y##0", 1
  %"tmp#5##0" = sub i64 %"tmp#0##0", 1
  ret i64 %"tmp#5##0"
}

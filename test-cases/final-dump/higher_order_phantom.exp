======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module higher_order_phantom
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use wybe
  resources       : 
  procs           : 

proc a > {inline} (0 calls)
0: higher_order_phantom.a<0>
a(f##0:(wybe.phantom, ?wybe.phantom), x##0:wybe.phantom, ?#result##0:wybe.phantom)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~f##0:(wybe.phantom, ?wybe.phantom)(~x##0:wybe.phantom, ?#result##0:wybe.phantom) #0 @higher_order_phantom:nn:nn


proc b > {inline,semipure} (0 calls)
0: higher_order_phantom.b<0>
b(f##0:{impure}(wybe.phantom, ?wybe.phantom), x##0:wybe.phantom, [y##0:wybe.phantom])<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~f##0:{impure}(wybe.phantom, ?wybe.phantom)(~x##0:wybe.phantom, ?y##1:wybe.phantom) #0 @higher_order_phantom:nn:nn


proc c > {inline} (0 calls)
0: higher_order_phantom.c<0>
c(f##0:(wybe.phantom, ?X) <{}; {}; {0}>, x##0:wybe.phantom, ?#result##0:X <{}; {}; {0}>)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~f##0:(wybe.phantom, ?X)(~x##0:wybe.phantom, ?#result##0:X) #0 @higher_order_phantom:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'higher_order_phantom'

source_filename = "!ROOT!/final-dump/higher_order_phantom.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"higher_order_phantom.a<0>"(i64 %"f##0") {
  ret void
}

define external fastcc void @"higher_order_phantom.b<0>"(i64 %"f##0") {
  %"tmp#1##0" = inttoptr i64 %"f##0" to ptr
  %"tmp#0##0" = load ptr, ptr %"tmp#1##0"
  tail call fastcc void %"tmp#0##0"(i64 %"f##0")
  ret void
}

define external fastcc i64 @"higher_order_phantom.c<0>"(i64 %"f##0") {
  %"tmp#2##0" = inttoptr i64 %"f##0" to ptr
  %"tmp#1##0" = load ptr, ptr %"tmp#2##0"
  %"tmp#3##0" = tail call fastcc i64 %"tmp#1##0"(i64 %"f##0")
  ret i64 %"tmp#3##0"
}

======================================================================
AFTER EVERYTHING:
 Module person1
  public submods  : 
  public types    : person: (person1.person,Just address)
  public resources: 
  public procs    : person1.<0>
                    person1.person./=<0>
                    person1.person.=<0>
                    person1.person.firstname<0>
                    person1.person.firstname<1>
                    person1.person.lastname<0>
                    person1.person.lastname<1>
                    person1.person.person<0>
                    person1.person.person<1>
  imports         : public use person1.person
                    use wybe
  types           : person/public  is address { person(firstname:string, lastname:string) @person1:1:23  }  @person1:1:5
  resources       : 
  submodules      : person1.person
  procs           : 

*main* > public inline (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("Wang":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'person1'


 


declare external ccc  void @print_string(i64)    


@person1.1 =    constant [5 x i8] c"Wang\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"person1.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @person1.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  ret void 
}
--------------------------------------------------
 Module person1.person
  public submods  : 
  public types    : 
  public resources: 
  public procs    : person1.person./=<0>
                    person1.person.=<0>
                    person1.person.firstname<0>
                    person1.person.firstname<1>
                    person1.person.lastname<0>
                    person1.person.lastname<1>
                    person1.person.person<0>
                    person1.person.person<1>
  imports         : use person1
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline test (0 calls)
0: /=($left#0:person1.person, $right#0:person1.person, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:person1.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.string)
    foreign lpvm access(~$left#0:person1.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.string)
    foreign lpvm access($right#0:person1.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.string)
    foreign lpvm access(~$right#0:person1.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$7#0:wybe.string)
    foreign c strcmp(~tmp$4#0:wybe.string, ~tmp$6#0:wybe.string, ?tmp$8#0:wybe.int) @wybe:nn:nn
    foreign llvm icmp eq(~tmp$8#0:wybe.int, 0:wybe.int, ?tmp$9#0:wybe.bool) @wybe:nn:nn
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign c strcmp(~tmp$5#0:wybe.string, ~tmp$7#0:wybe.string, ?tmp$10#0:wybe.int) @wybe:nn:nn
        foreign llvm icmp eq(~tmp$10#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)




= > public inline test (6 calls)
0: =($left#0:person1.person, $right#0:person1.person, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:person1.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$firstname#0:wybe.string)
    foreign lpvm access(~$left#0:person1.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$lastname#0:wybe.string)
    foreign lpvm access($right#0:person1.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$firstname#0:wybe.string)
    foreign lpvm access(~$right#0:person1.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$lastname#0:wybe.string)
    foreign c strcmp(~$left$firstname#0:wybe.string, ~$right$firstname#0:wybe.string, ?tmp$8#0:wybe.int) @wybe:nn:nn
    foreign llvm icmp eq(~tmp$8#0:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign c strcmp(~$left$lastname#0:wybe.string, ~$right$lastname#0:wybe.string, ?tmp$11#0:wybe.int) @wybe:nn:nn
        foreign llvm icmp eq(~tmp$11#0:wybe.int, 0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



firstname > public inline (0 calls)
0: firstname($rec#0:person1.person, ?$#0:wybe.string):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:person1.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.string)
firstname > public inline (0 calls)
1: firstname($rec#0:person1.person, ?$rec#1:person1.person, $field#0:wybe.string):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate(~%$rec#0:person1.person, ?%$rec#1:person1.person, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.string)


lastname > public inline (0 calls)
0: lastname($rec#0:person1.person, ?$#0:wybe.string):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:person1.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.string)
lastname > public inline (0 calls)
1: lastname($rec#0:person1.person, ?$rec#1:person1.person, $field#0:wybe.string):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate(~%$rec#0:person1.person, ?%$rec#1:person1.person, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.string)


person > public inline (0 calls)
0: person(firstname#0:wybe.string, lastname#0:wybe.string, ?$#0:person1.person):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!person1.person)
    foreign lpvm mutate(~%$rec#0:person1.person, ?%$rec#1:person1.person, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~firstname#0:wybe.string)
    foreign lpvm mutate(~%$rec#1:person1.person, ?%$#0:person1.person, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lastname#0:wybe.string)
person > public inline (4 calls)
1: person(?firstname#0:wybe.string, ?lastname#0:wybe.string, $#0:person1.person):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($#0:person1.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?firstname#0:wybe.string)
    foreign lpvm access(~$#0:person1.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?lastname#0:wybe.string)

  LLVM code       :

; ModuleID = 'person1.person'


 


declare external ccc  i64 @strcmp(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"person1.person./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"1$tmp$8#0" = tail call ccc  i64  @strcmp(i64  %3, i64  %10)  
  %"1$tmp$9#0" = icmp eq i64 %"1$tmp$8#0", 0 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$10#0" = tail call ccc  i64  @strcmp(i64  %7, i64  %14)  
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$10#0", 0 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  ret i1 1 
if.then1:
  ret i1 0 
if.else1:
  ret i1 1 
}


define external fastcc  i1 @"person1.person.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %15 = inttoptr i64 %"$left#0" to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = add   i64 %"$left#0", 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = inttoptr i64 %"$right#0" to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %25 = add   i64 %"$right#0", 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %"1$tmp$8#0" = tail call ccc  i64  @strcmp(i64  %17, i64  %24)  
  %"1$tmp$2#0" = icmp eq i64 %"1$tmp$8#0", 0 
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$11#0" = tail call ccc  i64  @strcmp(i64  %21, i64  %28)  
  %"2$$$#0" = icmp eq i64 %"2$tmp$11#0", 0 
  ret i1 %"2$$$#0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"person1.person.firstname<0>"(i64  %"$rec#0")    {
entry:
  %29 = inttoptr i64 %"$rec#0" to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  %31 = load  i64, i64* %30 
  ret i64 %31 
}


define external fastcc  i64 @"person1.person.firstname<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %32 = trunc i64 16 to i32  
  %33 = tail call ccc  i8*  @wybe_malloc(i32  %32)  
  %34 = ptrtoint i8* %33 to i64 
  %35 = inttoptr i64 %34 to i8* 
  %36 = inttoptr i64 %"$rec#0" to i8* 
  %37 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %35, i8*  %36, i32  %37, i32  8, i1  0)  
  %38 = inttoptr i64 %34 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  store  i64 %"$field#0", i64* %39 
  ret i64 %34 
}


define external fastcc  i64 @"person1.person.lastname<0>"(i64  %"$rec#0")    {
entry:
  %40 = add   i64 %"$rec#0", 8 
  %41 = inttoptr i64 %40 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  %43 = load  i64, i64* %42 
  ret i64 %43 
}


define external fastcc  i64 @"person1.person.lastname<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %44 = trunc i64 16 to i32  
  %45 = tail call ccc  i8*  @wybe_malloc(i32  %44)  
  %46 = ptrtoint i8* %45 to i64 
  %47 = inttoptr i64 %46 to i8* 
  %48 = inttoptr i64 %"$rec#0" to i8* 
  %49 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %47, i8*  %48, i32  %49, i32  8, i1  0)  
  %50 = add   i64 %46, 8 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  store  i64 %"$field#0", i64* %52 
  ret i64 %46 
}


define external fastcc  i64 @"person1.person.person<0>"(i64  %"firstname#0", i64  %"lastname#0")    {
entry:
  %53 = trunc i64 16 to i32  
  %54 = tail call ccc  i8*  @wybe_malloc(i32  %53)  
  %55 = ptrtoint i8* %54 to i64 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  store  i64 %"firstname#0", i64* %57 
  %58 = add   i64 %55, 8 
  %59 = inttoptr i64 %58 to i64* 
  %60 = getelementptr  i64, i64* %59, i64 0 
  store  i64 %"lastname#0", i64* %60 
  ret i64 %55 
}


define external fastcc  {i64, i64} @"person1.person.person<1>"(i64  %"$#0")    {
entry:
  %61 = inttoptr i64 %"$#0" to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  %63 = load  i64, i64* %62 
  %64 = add   i64 %"$#0", 8 
  %65 = inttoptr i64 %64 to i64* 
  %66 = getelementptr  i64, i64* %65, i64 0 
  %67 = load  i64, i64* %66 
  %68 = insertvalue {i64, i64} undef, i64 %63, 0 
  %69 = insertvalue {i64, i64} %68, i64 %67, 1 
  ret {i64, i64} %69 
}

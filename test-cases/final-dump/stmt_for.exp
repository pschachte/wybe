======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module stmt_for
  representation  : (not a type)
  public submods  : int_sequence -> stmt_for.int_sequence
  public resources: 
  public procs    : stmt_for.<0>
                    stmt_for.irange<0>
                    stmt_for.multiple_generator<0>
                    stmt_for.semi_det_for_loop<0>
                    stmt_for.shortest_generator_termination<0>
                    stmt_for.single_generator<0>
                    stmt_for.using_break<0>
                    stmt_for.using_irange<0>
                    stmt_for.using_irange_reverse<0>
                    stmt_for.using_next<0>
                    stmt_for.using_unless<0>
                    stmt_for.using_until<0>
                    stmt_for.using_when<0>
                    stmt_for.using_while<0>
                    stmt_for.using_xrange<0>
                    stmt_for.using_xrange_reverse<0>
                    stmt_for.xrange<0>
                    stmt_for.int_sequence.=<0>
                    stmt_for.int_sequence.[|]<0>
                    stmt_for.int_sequence.end<0>
                    stmt_for.int_sequence.end<1>
                    stmt_for.int_sequence.int_sequence<0>
                    stmt_for.int_sequence.int_sequence<1>
                    stmt_for.int_sequence.start<0>
                    stmt_for.int_sequence.start<1>
                    stmt_for.int_sequence.stride<0>
                    stmt_for.int_sequence.stride<1>
                    stmt_for.int_sequence.~=<0>
  imports         : public use stmt_for.int_sequence
                    use wybe
  resources       : 
  submodules      : stmt_for.int_sequence
  procs           : 

module top-level code > public {semipure} (0 calls)
0: stmt_for.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("single_generator:":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #26 @stmt_for:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @stmt_for:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @stmt_for:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
    stmt_for.single_generator<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @stmt_for:nn:nn
    wybe.string.print<0>("\nmultiple_generator":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #27 @stmt_for:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @stmt_for:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @stmt_for:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
    stmt_for.multiple_generator<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @stmt_for:nn:nn
    wybe.string.print<0>("\nshortest_generator_termination":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #28 @stmt_for:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#7##0:wybe.phantom) @stmt_for:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @stmt_for:nn:nn
    foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
    stmt_for.shortest_generator_termination<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_break":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #29 @stmt_for:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @stmt_for:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @stmt_for:nn:nn
    foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
    stmt_for.using_break<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_next":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #30 @stmt_for:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#13##0:wybe.phantom) @stmt_for:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @stmt_for:nn:nn
    foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
    stmt_for.using_next<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_while":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #31 @stmt_for:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @stmt_for:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @stmt_for:nn:nn
    foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
    stmt_for.using_while<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #11 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_until":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #32 @stmt_for:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @stmt_for:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @stmt_for:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
    stmt_for.using_until<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #13 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_when":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #33 @stmt_for:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#22##0:wybe.phantom) @stmt_for:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @stmt_for:nn:nn
    foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
    stmt_for.using_when<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #15 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_unless":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #34 @stmt_for:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#25##0:wybe.phantom) @stmt_for:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#25##0:wybe.phantom, ?tmp#26##0:wybe.phantom) @stmt_for:nn:nn
    foreign lpvm store(~%tmp#26##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
    stmt_for.using_unless<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #17 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_xrange":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #35 @stmt_for:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#28##0:wybe.phantom) @stmt_for:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#28##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @stmt_for:nn:nn
    foreign lpvm store(~%tmp#29##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
    stmt_for.xrange<0>(1:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp#30##0:stmt_for.int_sequence) #36 @stmt_for:nn:nn
    stmt_for.using_xrange#cont#1<0>(~tmp#30##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #37 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_xrange_reverse":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #38 @stmt_for:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#32##0:wybe.phantom) @stmt_for:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#32##0:wybe.phantom, ?tmp#33##0:wybe.phantom) @stmt_for:nn:nn
    foreign lpvm store(~%tmp#33##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
    stmt_for.xrange<0>(10:wybe.int, -1:wybe.int, 1:wybe.int, ?tmp#34##0:stmt_for.int_sequence) #39 @stmt_for:nn:nn
    stmt_for.using_xrange_reverse#cont#1<0>(~tmp#34##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #40 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_irange":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #41 @stmt_for:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#36##0:wybe.phantom) @stmt_for:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#36##0:wybe.phantom, ?tmp#37##0:wybe.phantom) @stmt_for:nn:nn
    foreign lpvm store(~%tmp#37##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
    stmt_for.irange<0>(1:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp#38##0:stmt_for.int_sequence) #42 @stmt_for:nn:nn
    stmt_for.using_irange#cont#1<0>(~tmp#38##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #43 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_irange_reverse":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #44 @stmt_for:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#40##0:wybe.phantom) @stmt_for:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#40##0:wybe.phantom, ?tmp#41##0:wybe.phantom) @stmt_for:nn:nn
    foreign lpvm store(~%tmp#41##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
    stmt_for.irange<0>(10:wybe.int, -1:wybe.int, 1:wybe.int, ?tmp#42##0:stmt_for.int_sequence) #45 @stmt_for:nn:nn
    stmt_for.using_irange_reverse#cont#1<0>(~tmp#42##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #46 @stmt_for:nn:nn


proc irange > public (2 calls)
0: stmt_for.irange<0>
irange(start##0:wybe.int, stride##0:wybe.int, end##0:wybe.int, ?#result##0:stmt_for.int_sequence)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_slt(stride##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @stmt_for:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm add(~end##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm alloc(24:wybe.int, ?tmp#12##0:stmt_for.int_sequence) @stmt_for:nn:nn
        foreign lpvm mutate(~tmp#12##0:stmt_for.int_sequence, ?tmp#13##0:stmt_for.int_sequence, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~start##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm mutate(~tmp#13##0:stmt_for.int_sequence, ?tmp#14##0:stmt_for.int_sequence, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~stride##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm mutate(~tmp#14##0:stmt_for.int_sequence, ?#result##0:stmt_for.int_sequence, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.int) @stmt_for:nn:nn

    1:
        foreign llvm sub(~end##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm alloc(24:wybe.int, ?tmp#21##0:stmt_for.int_sequence) @stmt_for:nn:nn
        foreign lpvm mutate(~tmp#21##0:stmt_for.int_sequence, ?tmp#22##0:stmt_for.int_sequence, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~start##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm mutate(~tmp#22##0:stmt_for.int_sequence, ?tmp#23##0:stmt_for.int_sequence, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~stride##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm mutate(~tmp#23##0:stmt_for.int_sequence, ?#result##0:stmt_for.int_sequence, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.int) @stmt_for:nn:nn



proc multiple_generator > public (1 calls)
0: stmt_for.multiple_generator<0>
multiple_generator()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#16##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#17##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#17##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#20##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#21##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#21##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#24##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#25##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#25##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#28##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#28##0:wybe.list(T), ?tmp#29##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 6:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#29##0:wybe.list(T), ?tmp#6##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#32##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#32##0:wybe.list(T), ?tmp#33##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 5:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#33##0:wybe.list(T), ?tmp#5##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#36##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#36##0:wybe.list(T), ?tmp#37##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#37##0:wybe.list(T), ?tmp#4##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:wybe.list(T)) @stmt_for:nn:nn
    stmt_for.multiple_generator#cont#1<0>(~tmp#0##0:wybe.list(wybe.int), ~tmp#4##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @stmt_for:nn:nn


proc multiple_generator#cont#1 > (2 calls)
0: stmt_for.multiple_generator#cont#1<0>
multiple_generator#cont#1(tmp#8##0:wybe.list(wybe.int), tmp#9##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#8##0:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.bool) @stmt_for:nn:nn
    case ~tmp#15##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#8##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm access(~tmp#8##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##1:wybe.list(wybe.int)) @stmt_for:nn:nn
        foreign llvm icmp_ne(tmp#9##0:wybe.int, 0:wybe.int, ?tmp#17##0:wybe.bool) @stmt_for:nn:nn
        case ~tmp#17##0:wybe.bool of
        0:

        1:
            foreign lpvm access(tmp#9##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?j##0:wybe.int) @stmt_for:nn:nn
            foreign lpvm access(~tmp#9##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##1:wybe.list(wybe.int)) @stmt_for:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @stmt_for:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @stmt_for:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) @stmt_for:nn:nn
            foreign c print_int(~j##0:wybe.int, ~tmp#21##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @stmt_for:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @stmt_for:nn:nn
            foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
            stmt_for.multiple_generator#cont#1<0>(~tmp#8##1:wybe.list(wybe.int), ~tmp#9##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @stmt_for:nn:nn




proc semi_det_for_loop > public (0 calls)
0: stmt_for.semi_det_for_loop<0>
semi_det_for_loop(?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.xrange<0>(0:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp#1##0:stmt_for.int_sequence) #0 @stmt_for:nn:nn
    stmt_for.semi_det_for_loop#cont#1<0>(~tmp#1##0:stmt_for.int_sequence, ?#success##0:wybe.bool) #1 @stmt_for:nn:nn


proc semi_det_for_loop#cont#1 > (2 calls)
0: stmt_for.semi_det_for_loop#cont#1<0>
semi_det_for_loop#cont#1(tmp#0##0:stmt_for.int_sequence, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.int_sequence.[|]<0>(?i##0:wybe.int, ?tmp#0##1:stmt_for.int_sequence, ~tmp#0##0:stmt_for.int_sequence, ?tmp#4##0:wybe.bool) #0 @stmt_for:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_slt(~i##0:wybe.int, 5:wybe.int, ?tmp#3##0:wybe.bool) @stmt_for:nn:nn
        case ~tmp#3##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            stmt_for.semi_det_for_loop#cont#1<0>(~tmp#0##1:stmt_for.int_sequence, ?#success##0:wybe.bool) #2 @stmt_for:nn:nn




proc shortest_generator_termination > public (1 calls)
0: stmt_for.shortest_generator_termination<0>
shortest_generator_termination()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#16##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#17##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#17##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#20##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#21##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#21##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#24##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#25##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#25##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#28##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#28##0:wybe.list(T), ?tmp#29##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#29##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#32##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#32##0:wybe.list(T), ?tmp#33##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 5:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#33##0:wybe.list(T), ?tmp#6##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#36##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#36##0:wybe.list(T), ?tmp#37##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#37##0:wybe.list(T), ?tmp#5##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.list(T)) @stmt_for:nn:nn
    stmt_for.shortest_generator_termination#cont#1<0>(~tmp#0##0:wybe.list(wybe.int), ~tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @stmt_for:nn:nn


proc shortest_generator_termination#cont#1 > (2 calls)
0: stmt_for.shortest_generator_termination#cont#1<0>
shortest_generator_termination#cont#1(tmp#8##0:wybe.list(wybe.int), tmp#9##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#8##0:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.bool) @stmt_for:nn:nn
    case ~tmp#15##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#8##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm access(~tmp#8##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##1:wybe.list(wybe.int)) @stmt_for:nn:nn
        foreign llvm icmp_ne(tmp#9##0:wybe.int, 0:wybe.int, ?tmp#17##0:wybe.bool) @stmt_for:nn:nn
        case ~tmp#17##0:wybe.bool of
        0:

        1:
            foreign lpvm access(tmp#9##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?j##0:wybe.int) @stmt_for:nn:nn
            foreign lpvm access(~tmp#9##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##1:wybe.list(wybe.int)) @stmt_for:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @stmt_for:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @stmt_for:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) @stmt_for:nn:nn
            foreign c print_int(~j##0:wybe.int, ~tmp#21##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @stmt_for:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @stmt_for:nn:nn
            foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
            stmt_for.shortest_generator_termination#cont#1<0>(~tmp#8##1:wybe.list(wybe.int), ~tmp#9##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @stmt_for:nn:nn




proc single_generator > public (1 calls)
0: stmt_for.single_generator<0>
single_generator()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#9##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#9##0:wybe.list(T), ?tmp#10##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#10##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#13##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#13##0:wybe.list(T), ?tmp#14##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#14##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#17##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#17##0:wybe.list(T), ?tmp#18##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#18##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @stmt_for:nn:nn
    stmt_for.single_generator#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @stmt_for:nn:nn


proc single_generator#cont#1 > (2 calls)
0: stmt_for.single_generator#cont#1<0>
single_generator#cont#1(tmp#4##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#4##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool) @stmt_for:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#4##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm access(~tmp#4##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##1:wybe.list(wybe.int)) @stmt_for:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @stmt_for:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @stmt_for:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @stmt_for:nn:nn
        foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
        stmt_for.single_generator#cont#1<0>(~tmp#4##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn



proc using_break > public (1 calls)
0: stmt_for.using_break<0>
using_break()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#12##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @stmt_for:nn:nn
    stmt_for.using_break#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn


proc using_break#cont#1 > (2 calls)
0: stmt_for.using_break#cont#1<0>
using_break#cont#1(tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool) @stmt_for:nn:nn
    case ~tmp#10##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list(wybe.int)) @stmt_for:nn:nn
        foreign llvm icmp_eq(i##0:wybe.int, 3:wybe.int, ?tmp#7##0:wybe.bool) @stmt_for:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @stmt_for:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @stmt_for:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @stmt_for:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
            stmt_for.using_break#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @stmt_for:nn:nn

        1:




proc using_irange > public {inline} (1 calls)
0: stmt_for.using_irange<0>
using_irange()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.irange<0>(1:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp#1##0:stmt_for.int_sequence) #0 @stmt_for:nn:nn
    stmt_for.using_irange#cont#1<0>(~tmp#1##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @stmt_for:nn:nn


proc using_irange#cont#1 > (2 calls)
0: stmt_for.using_irange#cont#1<0>
using_irange#cont#1(tmp#0##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.int_sequence.[|]<0>(?i##0:wybe.int, ?tmp#0##1:stmt_for.int_sequence, ~tmp#0##0:stmt_for.int_sequence, ?tmp#3##0:wybe.bool) #0 @stmt_for:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @stmt_for:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @stmt_for:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @stmt_for:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
        stmt_for.using_irange#cont#1<0>(~tmp#0##1:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn



proc using_irange_reverse > public {inline} (1 calls)
0: stmt_for.using_irange_reverse<0>
using_irange_reverse()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.irange<0>(10:wybe.int, -1:wybe.int, 1:wybe.int, ?tmp#1##0:stmt_for.int_sequence) #0 @stmt_for:nn:nn
    stmt_for.using_irange_reverse#cont#1<0>(~tmp#1##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @stmt_for:nn:nn


proc using_irange_reverse#cont#1 > (2 calls)
0: stmt_for.using_irange_reverse#cont#1<0>
using_irange_reverse#cont#1(tmp#0##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.int_sequence.[|]<0>(?i##0:wybe.int, ?tmp#0##1:stmt_for.int_sequence, ~tmp#0##0:stmt_for.int_sequence, ?tmp#3##0:wybe.bool) #0 @stmt_for:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @stmt_for:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @stmt_for:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @stmt_for:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
        stmt_for.using_irange_reverse#cont#1<0>(~tmp#0##1:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn



proc using_next > public (1 calls)
0: stmt_for.using_next<0>
using_next()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#12##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @stmt_for:nn:nn
    stmt_for.using_next#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn


proc using_next#cont#1 > (3 calls)
0: stmt_for.using_next#cont#1<0>
using_next#cont#1(tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool) @stmt_for:nn:nn
    case ~tmp#10##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list(wybe.int)) @stmt_for:nn:nn
        foreign llvm icmp_eq(i##0:wybe.int, 3:wybe.int, ?tmp#7##0:wybe.bool) @stmt_for:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @stmt_for:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @stmt_for:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @stmt_for:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
            stmt_for.using_next#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @stmt_for:nn:nn

        1:
            stmt_for.using_next#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn




proc using_unless > public (1 calls)
0: stmt_for.using_unless<0>
using_unless()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#12##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @stmt_for:nn:nn
    stmt_for.using_unless#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn


proc using_unless#cont#1 > (3 calls)
0: stmt_for.using_unless#cont#1<0>
using_unless#cont#1(tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool) @stmt_for:nn:nn
    case ~tmp#10##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list(wybe.int)) @stmt_for:nn:nn
        foreign llvm icmp_slt(i##0:wybe.int, 3:wybe.int, ?tmp#7##0:wybe.bool) @stmt_for:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @stmt_for:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @stmt_for:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @stmt_for:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
            stmt_for.using_unless#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @stmt_for:nn:nn

        1:
            stmt_for.using_unless#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn




proc using_until > public (1 calls)
0: stmt_for.using_until<0>
using_until()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#12##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @stmt_for:nn:nn
    stmt_for.using_until#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn


proc using_until#cont#1 > (2 calls)
0: stmt_for.using_until#cont#1<0>
using_until#cont#1(tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool) @stmt_for:nn:nn
    case ~tmp#10##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list(wybe.int)) @stmt_for:nn:nn
        foreign llvm icmp_eq(i##0:wybe.int, 3:wybe.int, ?tmp#7##0:wybe.bool) @stmt_for:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @stmt_for:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @stmt_for:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @stmt_for:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
            stmt_for.using_until#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @stmt_for:nn:nn

        1:




proc using_when > public (1 calls)
0: stmt_for.using_when<0>
using_when()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#12##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @stmt_for:nn:nn
    stmt_for.using_when#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn


proc using_when#cont#1 > (3 calls)
0: stmt_for.using_when#cont#1<0>
using_when#cont#1(tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool) @stmt_for:nn:nn
    case ~tmp#10##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list(wybe.int)) @stmt_for:nn:nn
        foreign llvm icmp_slt(i##0:wybe.int, 3:wybe.int, ?tmp#7##0:wybe.bool) @stmt_for:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:
            stmt_for.using_when#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @stmt_for:nn:nn

        1:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @stmt_for:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @stmt_for:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @stmt_for:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
            stmt_for.using_when#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @stmt_for:nn:nn




proc using_while > public (1 calls)
0: stmt_for.using_while<0>
using_while()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#12##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @stmt_for:nn:nn
    stmt_for.using_while#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn


proc using_while#cont#1 > (2 calls)
0: stmt_for.using_while#cont#1<0>
using_while#cont#1(tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool) @stmt_for:nn:nn
    case ~tmp#10##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list(wybe.int)) @stmt_for:nn:nn
        foreign llvm icmp_slt(i##0:wybe.int, 3:wybe.int, ?tmp#7##0:wybe.bool) @stmt_for:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:

        1:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @stmt_for:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @stmt_for:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @stmt_for:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
            stmt_for.using_while#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @stmt_for:nn:nn




proc using_xrange > public {inline} (1 calls)
0: stmt_for.using_xrange<0>
using_xrange()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.xrange<0>(1:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp#1##0:stmt_for.int_sequence) #0 @stmt_for:nn:nn
    stmt_for.using_xrange#cont#1<0>(~tmp#1##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @stmt_for:nn:nn


proc using_xrange#cont#1 > (2 calls)
0: stmt_for.using_xrange#cont#1<0>
using_xrange#cont#1(tmp#0##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.int_sequence.[|]<0>(?i##0:wybe.int, ?tmp#0##1:stmt_for.int_sequence, ~tmp#0##0:stmt_for.int_sequence, ?tmp#3##0:wybe.bool) #0 @stmt_for:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @stmt_for:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @stmt_for:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @stmt_for:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
        stmt_for.using_xrange#cont#1<0>(~tmp#0##1:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn



proc using_xrange_reverse > public {inline} (1 calls)
0: stmt_for.using_xrange_reverse<0>
using_xrange_reverse()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.xrange<0>(10:wybe.int, -1:wybe.int, 1:wybe.int, ?tmp#1##0:stmt_for.int_sequence) #0 @stmt_for:nn:nn
    stmt_for.using_xrange_reverse#cont#1<0>(~tmp#1##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @stmt_for:nn:nn


proc using_xrange_reverse#cont#1 > (2 calls)
0: stmt_for.using_xrange_reverse#cont#1<0>
using_xrange_reverse#cont#1(tmp#0##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.int_sequence.[|]<0>(?i##0:wybe.int, ?tmp#0##1:stmt_for.int_sequence, ~tmp#0##0:stmt_for.int_sequence, ?tmp#3##0:wybe.bool) #0 @stmt_for:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @stmt_for:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @stmt_for:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @stmt_for:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_for:nn:nn
        stmt_for.using_xrange_reverse#cont#1<0>(~tmp#0##1:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn



proc xrange > public (3 calls)
0: stmt_for.xrange<0>
xrange(start##0:wybe.int, stride##0:wybe.int, end##0:wybe.int, ?#result##0:stmt_for.int_sequence)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#4##0:stmt_for.int_sequence) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#4##0:stmt_for.int_sequence, ?tmp#5##0:stmt_for.int_sequence, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~start##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#5##0:stmt_for.int_sequence, ?tmp#6##0:stmt_for.int_sequence, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~stride##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#6##0:stmt_for.int_sequence, ?#result##0:stmt_for.int_sequence, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~end##0:wybe.int) @stmt_for:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'stmt_for'

source_filename = "!ROOT!/final-dump/stmt_for.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"\0Amultiple_generator\00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"\0Ashortest_generator_termination\00", align 8
@"cstring#2" = private unnamed_addr constant [ ?? x i8 ] c"\0Ausing_break\00", align 8
@"cstring#3" = private unnamed_addr constant [ ?? x i8 ] c"\0Ausing_irange\00", align 8
@"cstring#4" = private unnamed_addr constant [ ?? x i8 ] c"\0Ausing_irange_reverse\00", align 8
@"cstring#5" = private unnamed_addr constant [ ?? x i8 ] c"\0Ausing_next\00", align 8
@"cstring#6" = private unnamed_addr constant [ ?? x i8 ] c"\0Ausing_unless\00", align 8
@"cstring#7" = private unnamed_addr constant [ ?? x i8 ] c"\0Ausing_until\00", align 8
@"cstring#8" = private unnamed_addr constant [ ?? x i8 ] c"\0Ausing_when\00", align 8
@"cstring#9" = private unnamed_addr constant [ ?? x i8 ] c"\0Ausing_while\00", align 8
@"cstring#10" = private unnamed_addr constant [ ?? x i8 ] c"\0Ausing_xrange\00", align 8
@"cstring#11" = private unnamed_addr constant [ ?? x i8 ] c"\0Ausing_xrange_reverse\00", align 8
@"cstring#12" = private unnamed_addr constant [ ?? x i8 ] c"single_generator:\00", align 8
@"string#13" = private unnamed_addr constant {i64, i64} { i64 19, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#14" = private unnamed_addr constant {i64, i64} { i64 31, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8
@"string#15" = private unnamed_addr constant {i64, i64} { i64 12, i64 ptrtoint( ptr @"cstring#2" to i64 ) }, align 8
@"string#16" = private unnamed_addr constant {i64, i64} { i64 13, i64 ptrtoint( ptr @"cstring#3" to i64 ) }, align 8
@"string#17" = private unnamed_addr constant {i64, i64} { i64 21, i64 ptrtoint( ptr @"cstring#4" to i64 ) }, align 8
@"string#18" = private unnamed_addr constant {i64, i64} { i64 11, i64 ptrtoint( ptr @"cstring#5" to i64 ) }, align 8
@"string#19" = private unnamed_addr constant {i64, i64} { i64 13, i64 ptrtoint( ptr @"cstring#6" to i64 ) }, align 8
@"string#20" = private unnamed_addr constant {i64, i64} { i64 12, i64 ptrtoint( ptr @"cstring#7" to i64 ) }, align 8
@"string#21" = private unnamed_addr constant {i64, i64} { i64 11, i64 ptrtoint( ptr @"cstring#8" to i64 ) }, align 8
@"string#22" = private unnamed_addr constant {i64, i64} { i64 12, i64 ptrtoint( ptr @"cstring#9" to i64 ) }, align 8
@"string#23" = private unnamed_addr constant {i64, i64} { i64 13, i64 ptrtoint( ptr @"cstring#10" to i64 ) }, align 8
@"string#24" = private unnamed_addr constant {i64, i64} { i64 21, i64 ptrtoint( ptr @"cstring#11" to i64 ) }, align 8
@"string#25" = private unnamed_addr constant {i64, i64} { i64 17, i64 ptrtoint( ptr @"cstring#12" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"stmt_for.<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#25" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.single_generator<0>"()
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#13" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.multiple_generator<0>"()
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#14" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.shortest_generator_termination<0>"()
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#15" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_break<0>"()
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#18" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_next<0>"()
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#22" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_while<0>"()
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#20" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_until<0>"()
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#21" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_when<0>"()
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#19" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_unless<0>"()
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#23" to i64 ))
  call ccc void @putchar(i8 10)
  %"tmp#30##0" = tail call fastcc i64 @"stmt_for.xrange<0>"(i64 1, i64 1, i64 10)
  tail call fastcc void @"stmt_for.using_xrange#cont#1<0>"(i64 %"tmp#30##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#24" to i64 ))
  call ccc void @putchar(i8 10)
  %"tmp#34##0" = tail call fastcc i64 @"stmt_for.xrange<0>"(i64 10, i64 -1, i64 1)
  tail call fastcc void @"stmt_for.using_xrange_reverse#cont#1<0>"(i64 %"tmp#34##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#16" to i64 ))
  call ccc void @putchar(i8 10)
  %"tmp#38##0" = tail call fastcc i64 @"stmt_for.irange<0>"(i64 1, i64 1, i64 10)
  tail call fastcc void @"stmt_for.using_irange#cont#1<0>"(i64 %"tmp#38##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#17" to i64 ))
  call ccc void @putchar(i8 10)
  %"tmp#42##0" = tail call fastcc i64 @"stmt_for.irange<0>"(i64 10, i64 -1, i64 1)
  tail call fastcc void @"stmt_for.using_irange_reverse#cont#1<0>"(i64 %"tmp#42##0")
  ret void
}

define external fastcc i64 @"stmt_for.irange<0>"(i64 %"start##0", i64 %"stride##0", i64 %"end##0") {
  %"tmp#4##0" = icmp slt i64 %"stride##0", 0
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = sub i64 %"end##0", 1
  %"tmp#25##0" = call ccc ptr @wybe_malloc(i32 24)
  %"tmp#21##0" = ptrtoint ptr %"tmp#25##0" to i64
  %"tmp#26##0" = inttoptr i64 %"tmp#21##0" to ptr
  store i64 %"start##0", ptr %"tmp#26##0"
  %"tmp#27##0" = add i64 %"tmp#21##0", 8
  %"tmp#28##0" = inttoptr i64 %"tmp#27##0" to ptr
  store i64 %"stride##0", ptr %"tmp#28##0"
  %"tmp#29##0" = add i64 %"tmp#21##0", 16
  %"tmp#30##0" = inttoptr i64 %"tmp#29##0" to ptr
  store i64 %"tmp#2##0", ptr %"tmp#30##0"
  ret i64 %"tmp#21##0"
if.else.0:
  %"tmp#3##0" = add i64 %"end##0", 1
  %"tmp#31##0" = call ccc ptr @wybe_malloc(i32 24)
  %"tmp#12##0" = ptrtoint ptr %"tmp#31##0" to i64
  %"tmp#32##0" = inttoptr i64 %"tmp#12##0" to ptr
  store i64 %"start##0", ptr %"tmp#32##0"
  %"tmp#33##0" = add i64 %"tmp#12##0", 8
  %"tmp#34##0" = inttoptr i64 %"tmp#33##0" to ptr
  store i64 %"stride##0", ptr %"tmp#34##0"
  %"tmp#35##0" = add i64 %"tmp#12##0", 16
  %"tmp#36##0" = inttoptr i64 %"tmp#35##0" to ptr
  store i64 %"tmp#3##0", ptr %"tmp#36##0"
  ret i64 %"tmp#12##0"
}

define external fastcc void @"stmt_for.multiple_generator<0>"() {
  %"tmp#38##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#16##0" = ptrtoint ptr %"tmp#38##0" to i64
  %"tmp#39##0" = inttoptr i64 %"tmp#16##0" to ptr
  store i64 3, ptr %"tmp#39##0"
  %"tmp#40##0" = add i64 %"tmp#16##0", 8
  %"tmp#41##0" = inttoptr i64 %"tmp#40##0" to ptr
  store i64 0, ptr %"tmp#41##0"
  %"tmp#42##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#20##0" = ptrtoint ptr %"tmp#42##0" to i64
  %"tmp#43##0" = inttoptr i64 %"tmp#20##0" to ptr
  store i64 2, ptr %"tmp#43##0"
  %"tmp#44##0" = add i64 %"tmp#20##0", 8
  %"tmp#45##0" = inttoptr i64 %"tmp#44##0" to ptr
  store i64 %"tmp#16##0", ptr %"tmp#45##0"
  %"tmp#46##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#24##0" = ptrtoint ptr %"tmp#46##0" to i64
  %"tmp#47##0" = inttoptr i64 %"tmp#24##0" to ptr
  store i64 1, ptr %"tmp#47##0"
  %"tmp#48##0" = add i64 %"tmp#24##0", 8
  %"tmp#49##0" = inttoptr i64 %"tmp#48##0" to ptr
  store i64 %"tmp#20##0", ptr %"tmp#49##0"
  %"tmp#50##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#28##0" = ptrtoint ptr %"tmp#50##0" to i64
  %"tmp#51##0" = inttoptr i64 %"tmp#28##0" to ptr
  store i64 6, ptr %"tmp#51##0"
  %"tmp#52##0" = add i64 %"tmp#28##0", 8
  %"tmp#53##0" = inttoptr i64 %"tmp#52##0" to ptr
  store i64 0, ptr %"tmp#53##0"
  %"tmp#54##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#32##0" = ptrtoint ptr %"tmp#54##0" to i64
  %"tmp#55##0" = inttoptr i64 %"tmp#32##0" to ptr
  store i64 5, ptr %"tmp#55##0"
  %"tmp#56##0" = add i64 %"tmp#32##0", 8
  %"tmp#57##0" = inttoptr i64 %"tmp#56##0" to ptr
  store i64 %"tmp#28##0", ptr %"tmp#57##0"
  %"tmp#58##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#36##0" = ptrtoint ptr %"tmp#58##0" to i64
  %"tmp#59##0" = inttoptr i64 %"tmp#36##0" to ptr
  store i64 4, ptr %"tmp#59##0"
  %"tmp#60##0" = add i64 %"tmp#36##0", 8
  %"tmp#61##0" = inttoptr i64 %"tmp#60##0" to ptr
  store i64 %"tmp#32##0", ptr %"tmp#61##0"
  tail call fastcc void @"stmt_for.multiple_generator#cont#1<0>"(i64 %"tmp#24##0", i64 %"tmp#36##0")
  ret void
}

define external fastcc void @"stmt_for.multiple_generator#cont#1<0>"(i64 %"tmp#8##0", i64 %"tmp#9##0") {
  %"tmp#15##0" = icmp ne i64 %"tmp#8##0", 0
  br i1 %"tmp#15##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#26##0" = inttoptr i64 %"tmp#8##0" to ptr
  %"i##0" = load i64, ptr %"tmp#26##0"
  %"tmp#27##0" = add i64 %"tmp#8##0", 8
  %"tmp#28##0" = inttoptr i64 %"tmp#27##0" to ptr
  %"tmp#8##1" = load i64, ptr %"tmp#28##0"
  %"tmp#17##0" = icmp ne i64 %"tmp#9##0", 0
  br i1 %"tmp#17##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#29##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"j##0" = load i64, ptr %"tmp#29##0"
  %"tmp#30##0" = add i64 %"tmp#9##0", 8
  %"tmp#31##0" = inttoptr i64 %"tmp#30##0" to ptr
  %"tmp#9##1" = load i64, ptr %"tmp#31##0"
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  call ccc void @print_int(i64 %"j##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.multiple_generator#cont#1<0>"(i64 %"tmp#8##1", i64 %"tmp#9##1")
  ret void
if.else.1:
  ret void
if.else.0:
  ret void
}

define external fastcc i1 @"stmt_for.semi_det_for_loop<0>"() {
  %"tmp#1##0" = tail call fastcc i64 @"stmt_for.xrange<0>"(i64 0, i64 1, i64 10)
  %"tmp#5##0" = tail call fastcc i1 @"stmt_for.semi_det_for_loop#cont#1<0>"(i64 %"tmp#1##0")
  ret i1 %"tmp#5##0"
}

define external fastcc i1 @"stmt_for.semi_det_for_loop#cont#1<0>"(i64 %"tmp#0##0") {
  %"tmp#7##0" = tail call fastcc {i64, i64, i1} @"stmt_for.int_sequence.[|]<0>"(i64 %"tmp#0##0")
  %"i##0" = extractvalue {i64, i64, i1}%"tmp#7##0", 0
  %"tmp#0##1" = extractvalue {i64, i64, i1}%"tmp#7##0", 1
  %"tmp#4##0" = extractvalue {i64, i64, i1}%"tmp#7##0", 2
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#3##0" = icmp slt i64 %"i##0", 5
  br i1 %"tmp#3##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#8##0" = tail call fastcc i1 @"stmt_for.semi_det_for_loop#cont#1<0>"(i64 %"tmp#0##1")
  ret i1 %"tmp#8##0"
if.else.1:
  ret i1 0
if.else.0:
  ret i1 1
}

define external fastcc void @"stmt_for.shortest_generator_termination<0>"() {
  %"tmp#38##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#16##0" = ptrtoint ptr %"tmp#38##0" to i64
  %"tmp#39##0" = inttoptr i64 %"tmp#16##0" to ptr
  store i64 4, ptr %"tmp#39##0"
  %"tmp#40##0" = add i64 %"tmp#16##0", 8
  %"tmp#41##0" = inttoptr i64 %"tmp#40##0" to ptr
  store i64 0, ptr %"tmp#41##0"
  %"tmp#42##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#20##0" = ptrtoint ptr %"tmp#42##0" to i64
  %"tmp#43##0" = inttoptr i64 %"tmp#20##0" to ptr
  store i64 3, ptr %"tmp#43##0"
  %"tmp#44##0" = add i64 %"tmp#20##0", 8
  %"tmp#45##0" = inttoptr i64 %"tmp#44##0" to ptr
  store i64 %"tmp#16##0", ptr %"tmp#45##0"
  %"tmp#46##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#24##0" = ptrtoint ptr %"tmp#46##0" to i64
  %"tmp#47##0" = inttoptr i64 %"tmp#24##0" to ptr
  store i64 2, ptr %"tmp#47##0"
  %"tmp#48##0" = add i64 %"tmp#24##0", 8
  %"tmp#49##0" = inttoptr i64 %"tmp#48##0" to ptr
  store i64 %"tmp#20##0", ptr %"tmp#49##0"
  %"tmp#50##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#28##0" = ptrtoint ptr %"tmp#50##0" to i64
  %"tmp#51##0" = inttoptr i64 %"tmp#28##0" to ptr
  store i64 1, ptr %"tmp#51##0"
  %"tmp#52##0" = add i64 %"tmp#28##0", 8
  %"tmp#53##0" = inttoptr i64 %"tmp#52##0" to ptr
  store i64 %"tmp#24##0", ptr %"tmp#53##0"
  %"tmp#54##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#32##0" = ptrtoint ptr %"tmp#54##0" to i64
  %"tmp#55##0" = inttoptr i64 %"tmp#32##0" to ptr
  store i64 5, ptr %"tmp#55##0"
  %"tmp#56##0" = add i64 %"tmp#32##0", 8
  %"tmp#57##0" = inttoptr i64 %"tmp#56##0" to ptr
  store i64 0, ptr %"tmp#57##0"
  %"tmp#58##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#36##0" = ptrtoint ptr %"tmp#58##0" to i64
  %"tmp#59##0" = inttoptr i64 %"tmp#36##0" to ptr
  store i64 4, ptr %"tmp#59##0"
  %"tmp#60##0" = add i64 %"tmp#36##0", 8
  %"tmp#61##0" = inttoptr i64 %"tmp#60##0" to ptr
  store i64 %"tmp#32##0", ptr %"tmp#61##0"
  tail call fastcc void @"stmt_for.shortest_generator_termination#cont#1<0>"(i64 %"tmp#28##0", i64 %"tmp#36##0")
  ret void
}

define external fastcc void @"stmt_for.shortest_generator_termination#cont#1<0>"(i64 %"tmp#8##0", i64 %"tmp#9##0") {
  %"tmp#15##0" = icmp ne i64 %"tmp#8##0", 0
  br i1 %"tmp#15##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#26##0" = inttoptr i64 %"tmp#8##0" to ptr
  %"i##0" = load i64, ptr %"tmp#26##0"
  %"tmp#27##0" = add i64 %"tmp#8##0", 8
  %"tmp#28##0" = inttoptr i64 %"tmp#27##0" to ptr
  %"tmp#8##1" = load i64, ptr %"tmp#28##0"
  %"tmp#17##0" = icmp ne i64 %"tmp#9##0", 0
  br i1 %"tmp#17##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#29##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"j##0" = load i64, ptr %"tmp#29##0"
  %"tmp#30##0" = add i64 %"tmp#9##0", 8
  %"tmp#31##0" = inttoptr i64 %"tmp#30##0" to ptr
  %"tmp#9##1" = load i64, ptr %"tmp#31##0"
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  call ccc void @print_int(i64 %"j##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.shortest_generator_termination#cont#1<0>"(i64 %"tmp#8##1", i64 %"tmp#9##1")
  ret void
if.else.1:
  ret void
if.else.0:
  ret void
}

define external fastcc void @"stmt_for.single_generator<0>"() {
  %"tmp#19##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#9##0" = ptrtoint ptr %"tmp#19##0" to i64
  %"tmp#20##0" = inttoptr i64 %"tmp#9##0" to ptr
  store i64 3, ptr %"tmp#20##0"
  %"tmp#21##0" = add i64 %"tmp#9##0", 8
  %"tmp#22##0" = inttoptr i64 %"tmp#21##0" to ptr
  store i64 0, ptr %"tmp#22##0"
  %"tmp#23##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#13##0" = ptrtoint ptr %"tmp#23##0" to i64
  %"tmp#24##0" = inttoptr i64 %"tmp#13##0" to ptr
  store i64 2, ptr %"tmp#24##0"
  %"tmp#25##0" = add i64 %"tmp#13##0", 8
  %"tmp#26##0" = inttoptr i64 %"tmp#25##0" to ptr
  store i64 %"tmp#9##0", ptr %"tmp#26##0"
  %"tmp#27##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#17##0" = ptrtoint ptr %"tmp#27##0" to i64
  %"tmp#28##0" = inttoptr i64 %"tmp#17##0" to ptr
  store i64 1, ptr %"tmp#28##0"
  %"tmp#29##0" = add i64 %"tmp#17##0", 8
  %"tmp#30##0" = inttoptr i64 %"tmp#29##0" to ptr
  store i64 %"tmp#13##0", ptr %"tmp#30##0"
  tail call fastcc void @"stmt_for.single_generator#cont#1<0>"(i64 %"tmp#17##0")
  ret void
}

define external fastcc void @"stmt_for.single_generator#cont#1<0>"(i64 %"tmp#4##0") {
  %"tmp#8##0" = icmp ne i64 %"tmp#4##0", 0
  br i1 %"tmp#8##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#13##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"i##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = add i64 %"tmp#4##0", 8
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  %"tmp#4##1" = load i64, ptr %"tmp#15##0"
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.single_generator#cont#1<0>"(i64 %"tmp#4##1")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"stmt_for.using_break<0>"() {
  %"tmp#25##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#11##0" = ptrtoint ptr %"tmp#25##0" to i64
  %"tmp#26##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 4, ptr %"tmp#26##0"
  %"tmp#27##0" = add i64 %"tmp#11##0", 8
  %"tmp#28##0" = inttoptr i64 %"tmp#27##0" to ptr
  store i64 0, ptr %"tmp#28##0"
  %"tmp#29##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#15##0" = ptrtoint ptr %"tmp#29##0" to i64
  %"tmp#30##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 3, ptr %"tmp#30##0"
  %"tmp#31##0" = add i64 %"tmp#15##0", 8
  %"tmp#32##0" = inttoptr i64 %"tmp#31##0" to ptr
  store i64 %"tmp#11##0", ptr %"tmp#32##0"
  %"tmp#33##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#19##0" = ptrtoint ptr %"tmp#33##0" to i64
  %"tmp#34##0" = inttoptr i64 %"tmp#19##0" to ptr
  store i64 2, ptr %"tmp#34##0"
  %"tmp#35##0" = add i64 %"tmp#19##0", 8
  %"tmp#36##0" = inttoptr i64 %"tmp#35##0" to ptr
  store i64 %"tmp#15##0", ptr %"tmp#36##0"
  %"tmp#37##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#23##0" = ptrtoint ptr %"tmp#37##0" to i64
  %"tmp#38##0" = inttoptr i64 %"tmp#23##0" to ptr
  store i64 1, ptr %"tmp#38##0"
  %"tmp#39##0" = add i64 %"tmp#23##0", 8
  %"tmp#40##0" = inttoptr i64 %"tmp#39##0" to ptr
  store i64 %"tmp#19##0", ptr %"tmp#40##0"
  tail call fastcc void @"stmt_for.using_break#cont#1<0>"(i64 %"tmp#23##0")
  ret void
}

define external fastcc void @"stmt_for.using_break#cont#1<0>"(i64 %"tmp#5##0") {
  %"tmp#10##0" = icmp ne i64 %"tmp#5##0", 0
  br i1 %"tmp#10##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#17##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"i##0" = load i64, ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"tmp#5##0", 8
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  %"tmp#5##1" = load i64, ptr %"tmp#19##0"
  %"tmp#7##0" = icmp eq i64 %"i##0", 3
  br i1 %"tmp#7##0", label %if.then.1, label %if.else.1
if.then.1:
  ret void
if.else.1:
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_break#cont#1<0>"(i64 %"tmp#5##1")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"stmt_for.using_irange<0>"() {
  %"tmp#1##0" = tail call fastcc i64 @"stmt_for.irange<0>"(i64 1, i64 1, i64 10)
  tail call fastcc void @"stmt_for.using_irange#cont#1<0>"(i64 %"tmp#1##0")
  ret void
}

define external fastcc void @"stmt_for.using_irange#cont#1<0>"(i64 %"tmp#0##0") {
  %"tmp#8##0" = tail call fastcc {i64, i64, i1} @"stmt_for.int_sequence.[|]<0>"(i64 %"tmp#0##0")
  %"i##0" = extractvalue {i64, i64, i1}%"tmp#8##0", 0
  %"tmp#0##1" = extractvalue {i64, i64, i1}%"tmp#8##0", 1
  %"tmp#3##0" = extractvalue {i64, i64, i1}%"tmp#8##0", 2
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_irange#cont#1<0>"(i64 %"tmp#0##1")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"stmt_for.using_irange_reverse<0>"() {
  %"tmp#1##0" = tail call fastcc i64 @"stmt_for.irange<0>"(i64 10, i64 -1, i64 1)
  tail call fastcc void @"stmt_for.using_irange_reverse#cont#1<0>"(i64 %"tmp#1##0")
  ret void
}

define external fastcc void @"stmt_for.using_irange_reverse#cont#1<0>"(i64 %"tmp#0##0") {
  %"tmp#8##0" = tail call fastcc {i64, i64, i1} @"stmt_for.int_sequence.[|]<0>"(i64 %"tmp#0##0")
  %"i##0" = extractvalue {i64, i64, i1}%"tmp#8##0", 0
  %"tmp#0##1" = extractvalue {i64, i64, i1}%"tmp#8##0", 1
  %"tmp#3##0" = extractvalue {i64, i64, i1}%"tmp#8##0", 2
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_irange_reverse#cont#1<0>"(i64 %"tmp#0##1")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"stmt_for.using_next<0>"() {
  %"tmp#25##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#11##0" = ptrtoint ptr %"tmp#25##0" to i64
  %"tmp#26##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 4, ptr %"tmp#26##0"
  %"tmp#27##0" = add i64 %"tmp#11##0", 8
  %"tmp#28##0" = inttoptr i64 %"tmp#27##0" to ptr
  store i64 0, ptr %"tmp#28##0"
  %"tmp#29##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#15##0" = ptrtoint ptr %"tmp#29##0" to i64
  %"tmp#30##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 3, ptr %"tmp#30##0"
  %"tmp#31##0" = add i64 %"tmp#15##0", 8
  %"tmp#32##0" = inttoptr i64 %"tmp#31##0" to ptr
  store i64 %"tmp#11##0", ptr %"tmp#32##0"
  %"tmp#33##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#19##0" = ptrtoint ptr %"tmp#33##0" to i64
  %"tmp#34##0" = inttoptr i64 %"tmp#19##0" to ptr
  store i64 2, ptr %"tmp#34##0"
  %"tmp#35##0" = add i64 %"tmp#19##0", 8
  %"tmp#36##0" = inttoptr i64 %"tmp#35##0" to ptr
  store i64 %"tmp#15##0", ptr %"tmp#36##0"
  %"tmp#37##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#23##0" = ptrtoint ptr %"tmp#37##0" to i64
  %"tmp#38##0" = inttoptr i64 %"tmp#23##0" to ptr
  store i64 1, ptr %"tmp#38##0"
  %"tmp#39##0" = add i64 %"tmp#23##0", 8
  %"tmp#40##0" = inttoptr i64 %"tmp#39##0" to ptr
  store i64 %"tmp#19##0", ptr %"tmp#40##0"
  tail call fastcc void @"stmt_for.using_next#cont#1<0>"(i64 %"tmp#23##0")
  ret void
}

define external fastcc void @"stmt_for.using_next#cont#1<0>"(i64 %"tmp#5##0") {
  %"tmp#10##0" = icmp ne i64 %"tmp#5##0", 0
  br i1 %"tmp#10##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#17##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"i##0" = load i64, ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"tmp#5##0", 8
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  %"tmp#5##1" = load i64, ptr %"tmp#19##0"
  %"tmp#7##0" = icmp eq i64 %"i##0", 3
  br i1 %"tmp#7##0", label %if.then.1, label %if.else.1
if.then.1:
  tail call fastcc void @"stmt_for.using_next#cont#1<0>"(i64 %"tmp#5##1")
  ret void
if.else.1:
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_next#cont#1<0>"(i64 %"tmp#5##1")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"stmt_for.using_unless<0>"() {
  %"tmp#25##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#11##0" = ptrtoint ptr %"tmp#25##0" to i64
  %"tmp#26##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 4, ptr %"tmp#26##0"
  %"tmp#27##0" = add i64 %"tmp#11##0", 8
  %"tmp#28##0" = inttoptr i64 %"tmp#27##0" to ptr
  store i64 0, ptr %"tmp#28##0"
  %"tmp#29##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#15##0" = ptrtoint ptr %"tmp#29##0" to i64
  %"tmp#30##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 3, ptr %"tmp#30##0"
  %"tmp#31##0" = add i64 %"tmp#15##0", 8
  %"tmp#32##0" = inttoptr i64 %"tmp#31##0" to ptr
  store i64 %"tmp#11##0", ptr %"tmp#32##0"
  %"tmp#33##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#19##0" = ptrtoint ptr %"tmp#33##0" to i64
  %"tmp#34##0" = inttoptr i64 %"tmp#19##0" to ptr
  store i64 2, ptr %"tmp#34##0"
  %"tmp#35##0" = add i64 %"tmp#19##0", 8
  %"tmp#36##0" = inttoptr i64 %"tmp#35##0" to ptr
  store i64 %"tmp#15##0", ptr %"tmp#36##0"
  %"tmp#37##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#23##0" = ptrtoint ptr %"tmp#37##0" to i64
  %"tmp#38##0" = inttoptr i64 %"tmp#23##0" to ptr
  store i64 1, ptr %"tmp#38##0"
  %"tmp#39##0" = add i64 %"tmp#23##0", 8
  %"tmp#40##0" = inttoptr i64 %"tmp#39##0" to ptr
  store i64 %"tmp#19##0", ptr %"tmp#40##0"
  tail call fastcc void @"stmt_for.using_unless#cont#1<0>"(i64 %"tmp#23##0")
  ret void
}

define external fastcc void @"stmt_for.using_unless#cont#1<0>"(i64 %"tmp#5##0") {
  %"tmp#10##0" = icmp ne i64 %"tmp#5##0", 0
  br i1 %"tmp#10##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#17##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"i##0" = load i64, ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"tmp#5##0", 8
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  %"tmp#5##1" = load i64, ptr %"tmp#19##0"
  %"tmp#7##0" = icmp slt i64 %"i##0", 3
  br i1 %"tmp#7##0", label %if.then.1, label %if.else.1
if.then.1:
  tail call fastcc void @"stmt_for.using_unless#cont#1<0>"(i64 %"tmp#5##1")
  ret void
if.else.1:
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_unless#cont#1<0>"(i64 %"tmp#5##1")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"stmt_for.using_until<0>"() {
  %"tmp#25##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#11##0" = ptrtoint ptr %"tmp#25##0" to i64
  %"tmp#26##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 4, ptr %"tmp#26##0"
  %"tmp#27##0" = add i64 %"tmp#11##0", 8
  %"tmp#28##0" = inttoptr i64 %"tmp#27##0" to ptr
  store i64 0, ptr %"tmp#28##0"
  %"tmp#29##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#15##0" = ptrtoint ptr %"tmp#29##0" to i64
  %"tmp#30##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 3, ptr %"tmp#30##0"
  %"tmp#31##0" = add i64 %"tmp#15##0", 8
  %"tmp#32##0" = inttoptr i64 %"tmp#31##0" to ptr
  store i64 %"tmp#11##0", ptr %"tmp#32##0"
  %"tmp#33##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#19##0" = ptrtoint ptr %"tmp#33##0" to i64
  %"tmp#34##0" = inttoptr i64 %"tmp#19##0" to ptr
  store i64 2, ptr %"tmp#34##0"
  %"tmp#35##0" = add i64 %"tmp#19##0", 8
  %"tmp#36##0" = inttoptr i64 %"tmp#35##0" to ptr
  store i64 %"tmp#15##0", ptr %"tmp#36##0"
  %"tmp#37##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#23##0" = ptrtoint ptr %"tmp#37##0" to i64
  %"tmp#38##0" = inttoptr i64 %"tmp#23##0" to ptr
  store i64 1, ptr %"tmp#38##0"
  %"tmp#39##0" = add i64 %"tmp#23##0", 8
  %"tmp#40##0" = inttoptr i64 %"tmp#39##0" to ptr
  store i64 %"tmp#19##0", ptr %"tmp#40##0"
  tail call fastcc void @"stmt_for.using_until#cont#1<0>"(i64 %"tmp#23##0")
  ret void
}

define external fastcc void @"stmt_for.using_until#cont#1<0>"(i64 %"tmp#5##0") {
  %"tmp#10##0" = icmp ne i64 %"tmp#5##0", 0
  br i1 %"tmp#10##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#17##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"i##0" = load i64, ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"tmp#5##0", 8
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  %"tmp#5##1" = load i64, ptr %"tmp#19##0"
  %"tmp#7##0" = icmp eq i64 %"i##0", 3
  br i1 %"tmp#7##0", label %if.then.1, label %if.else.1
if.then.1:
  ret void
if.else.1:
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_until#cont#1<0>"(i64 %"tmp#5##1")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"stmt_for.using_when<0>"() {
  %"tmp#25##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#11##0" = ptrtoint ptr %"tmp#25##0" to i64
  %"tmp#26##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 4, ptr %"tmp#26##0"
  %"tmp#27##0" = add i64 %"tmp#11##0", 8
  %"tmp#28##0" = inttoptr i64 %"tmp#27##0" to ptr
  store i64 0, ptr %"tmp#28##0"
  %"tmp#29##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#15##0" = ptrtoint ptr %"tmp#29##0" to i64
  %"tmp#30##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 3, ptr %"tmp#30##0"
  %"tmp#31##0" = add i64 %"tmp#15##0", 8
  %"tmp#32##0" = inttoptr i64 %"tmp#31##0" to ptr
  store i64 %"tmp#11##0", ptr %"tmp#32##0"
  %"tmp#33##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#19##0" = ptrtoint ptr %"tmp#33##0" to i64
  %"tmp#34##0" = inttoptr i64 %"tmp#19##0" to ptr
  store i64 2, ptr %"tmp#34##0"
  %"tmp#35##0" = add i64 %"tmp#19##0", 8
  %"tmp#36##0" = inttoptr i64 %"tmp#35##0" to ptr
  store i64 %"tmp#15##0", ptr %"tmp#36##0"
  %"tmp#37##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#23##0" = ptrtoint ptr %"tmp#37##0" to i64
  %"tmp#38##0" = inttoptr i64 %"tmp#23##0" to ptr
  store i64 1, ptr %"tmp#38##0"
  %"tmp#39##0" = add i64 %"tmp#23##0", 8
  %"tmp#40##0" = inttoptr i64 %"tmp#39##0" to ptr
  store i64 %"tmp#19##0", ptr %"tmp#40##0"
  tail call fastcc void @"stmt_for.using_when#cont#1<0>"(i64 %"tmp#23##0")
  ret void
}

define external fastcc void @"stmt_for.using_when#cont#1<0>"(i64 %"tmp#5##0") {
  %"tmp#10##0" = icmp ne i64 %"tmp#5##0", 0
  br i1 %"tmp#10##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#17##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"i##0" = load i64, ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"tmp#5##0", 8
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  %"tmp#5##1" = load i64, ptr %"tmp#19##0"
  %"tmp#7##0" = icmp slt i64 %"i##0", 3
  br i1 %"tmp#7##0", label %if.then.1, label %if.else.1
if.then.1:
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_when#cont#1<0>"(i64 %"tmp#5##1")
  ret void
if.else.1:
  tail call fastcc void @"stmt_for.using_when#cont#1<0>"(i64 %"tmp#5##1")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"stmt_for.using_while<0>"() {
  %"tmp#25##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#11##0" = ptrtoint ptr %"tmp#25##0" to i64
  %"tmp#26##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 4, ptr %"tmp#26##0"
  %"tmp#27##0" = add i64 %"tmp#11##0", 8
  %"tmp#28##0" = inttoptr i64 %"tmp#27##0" to ptr
  store i64 0, ptr %"tmp#28##0"
  %"tmp#29##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#15##0" = ptrtoint ptr %"tmp#29##0" to i64
  %"tmp#30##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 3, ptr %"tmp#30##0"
  %"tmp#31##0" = add i64 %"tmp#15##0", 8
  %"tmp#32##0" = inttoptr i64 %"tmp#31##0" to ptr
  store i64 %"tmp#11##0", ptr %"tmp#32##0"
  %"tmp#33##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#19##0" = ptrtoint ptr %"tmp#33##0" to i64
  %"tmp#34##0" = inttoptr i64 %"tmp#19##0" to ptr
  store i64 2, ptr %"tmp#34##0"
  %"tmp#35##0" = add i64 %"tmp#19##0", 8
  %"tmp#36##0" = inttoptr i64 %"tmp#35##0" to ptr
  store i64 %"tmp#15##0", ptr %"tmp#36##0"
  %"tmp#37##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#23##0" = ptrtoint ptr %"tmp#37##0" to i64
  %"tmp#38##0" = inttoptr i64 %"tmp#23##0" to ptr
  store i64 1, ptr %"tmp#38##0"
  %"tmp#39##0" = add i64 %"tmp#23##0", 8
  %"tmp#40##0" = inttoptr i64 %"tmp#39##0" to ptr
  store i64 %"tmp#19##0", ptr %"tmp#40##0"
  tail call fastcc void @"stmt_for.using_while#cont#1<0>"(i64 %"tmp#23##0")
  ret void
}

define external fastcc void @"stmt_for.using_while#cont#1<0>"(i64 %"tmp#5##0") {
  %"tmp#10##0" = icmp ne i64 %"tmp#5##0", 0
  br i1 %"tmp#10##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#17##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"i##0" = load i64, ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"tmp#5##0", 8
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  %"tmp#5##1" = load i64, ptr %"tmp#19##0"
  %"tmp#7##0" = icmp slt i64 %"i##0", 3
  br i1 %"tmp#7##0", label %if.then.1, label %if.else.1
if.then.1:
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_while#cont#1<0>"(i64 %"tmp#5##1")
  ret void
if.else.1:
  ret void
if.else.0:
  ret void
}

define external fastcc void @"stmt_for.using_xrange<0>"() {
  %"tmp#1##0" = tail call fastcc i64 @"stmt_for.xrange<0>"(i64 1, i64 1, i64 10)
  tail call fastcc void @"stmt_for.using_xrange#cont#1<0>"(i64 %"tmp#1##0")
  ret void
}

define external fastcc void @"stmt_for.using_xrange#cont#1<0>"(i64 %"tmp#0##0") {
  %"tmp#8##0" = tail call fastcc {i64, i64, i1} @"stmt_for.int_sequence.[|]<0>"(i64 %"tmp#0##0")
  %"i##0" = extractvalue {i64, i64, i1}%"tmp#8##0", 0
  %"tmp#0##1" = extractvalue {i64, i64, i1}%"tmp#8##0", 1
  %"tmp#3##0" = extractvalue {i64, i64, i1}%"tmp#8##0", 2
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_xrange#cont#1<0>"(i64 %"tmp#0##1")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"stmt_for.using_xrange_reverse<0>"() {
  %"tmp#1##0" = tail call fastcc i64 @"stmt_for.xrange<0>"(i64 10, i64 -1, i64 1)
  tail call fastcc void @"stmt_for.using_xrange_reverse#cont#1<0>"(i64 %"tmp#1##0")
  ret void
}

define external fastcc void @"stmt_for.using_xrange_reverse#cont#1<0>"(i64 %"tmp#0##0") {
  %"tmp#8##0" = tail call fastcc {i64, i64, i1} @"stmt_for.int_sequence.[|]<0>"(i64 %"tmp#0##0")
  %"i##0" = extractvalue {i64, i64, i1}%"tmp#8##0", 0
  %"tmp#0##1" = extractvalue {i64, i64, i1}%"tmp#8##0", 1
  %"tmp#3##0" = extractvalue {i64, i64, i1}%"tmp#8##0", 2
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_for.using_xrange_reverse#cont#1<0>"(i64 %"tmp#0##1")
  ret void
if.else.0:
  ret void
}

define external fastcc i64 @"stmt_for.xrange<0>"(i64 %"start##0", i64 %"stride##0", i64 %"end##0") {
  %"tmp#8##0" = call ccc ptr @wybe_malloc(i32 24)
  %"tmp#4##0" = ptrtoint ptr %"tmp#8##0" to i64
  %"tmp#9##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"start##0", ptr %"tmp#9##0"
  %"tmp#10##0" = add i64 %"tmp#4##0", 8
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  store i64 %"stride##0", ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"tmp#4##0", 16
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  store i64 %"end##0", ptr %"tmp#13##0"
  ret i64 %"tmp#4##0"
}

--------------------------------------------------
 Module stmt_for.int_sequence
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : stmt_for.int_sequence.=<0>
                    stmt_for.int_sequence.[|]<0>
                    stmt_for.int_sequence.end<0>
                    stmt_for.int_sequence.end<1>
                    stmt_for.int_sequence.int_sequence<0>
                    stmt_for.int_sequence.int_sequence<1>
                    stmt_for.int_sequence.start<0>
                    stmt_for.int_sequence.start<1>
                    stmt_for.int_sequence.stride<0>
                    stmt_for.int_sequence.stride<1>
                    stmt_for.int_sequence.~=<0>
  imports         : use stmt_for
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: stmt_for.int_sequence.=<0>
=(#left##0:stmt_for.int_sequence, #right##0:stmt_for.int_sequence, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#start##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#left##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#stride##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(~#left##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#end##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#right##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#start##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#right##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#stride##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(~#right##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#end##0:wybe.int) @stmt_for:nn:nn
    foreign llvm icmp_eq(~#left#start##0:wybe.int, ~#right#start##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#stride##0:wybe.int, ~#right#stride##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#end##0:wybe.int, ~#right#end##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc [|] > public (0 calls)
0: stmt_for.int_sequence.[|]<0>
[|](?value##0:wybe.int, ?rest##0:stmt_for.int_sequence, current##0:stmt_for.int_sequence, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(current##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?s##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(current##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?st##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(~current##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?en##0:wybe.int) @stmt_for:nn:nn
    foreign llvm icmp_slt(st##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @stmt_for:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm icmp_sgt(en##0:wybe.int, s##0:wybe.int, ?tmp#3##0:wybe.bool) @stmt_for:nn:nn
        case ~tmp#3##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?value##0:wybe.int)
            foreign llvm move(undef:stmt_for.int_sequence, ?rest##0:stmt_for.int_sequence)

        1:
            stmt_for.int_sequence.[|]#cont#1<0>(~en##0:wybe.int, ~s##0:wybe.int, ~st##0:wybe.int, ?value##0:wybe.int, ?rest##0:stmt_for.int_sequence, ?#success##0:wybe.bool) #5


    1:
        foreign llvm icmp_slt(en##0:wybe.int, s##0:wybe.int, ?tmp#2##0:wybe.bool) @stmt_for:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?value##0:wybe.int)
            foreign llvm move(undef:stmt_for.int_sequence, ?rest##0:stmt_for.int_sequence)

        1:
            stmt_for.int_sequence.[|]#cont#1<0>(~en##0:wybe.int, ~s##0:wybe.int, ~st##0:wybe.int, ?value##0:wybe.int, ?rest##0:stmt_for.int_sequence, ?#success##0:wybe.bool) #3




proc [|]#cont#1 > (2 calls)
0: stmt_for.int_sequence.[|]#cont#1<0>
[|]#cont#1(en##0:wybe.int, s##0:wybe.int, st##0:wybe.int, ?value##0:wybe.int, ?rest##0:stmt_for.int_sequence, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(s##0:wybe.int, ?value##0:wybe.int) @stmt_for:nn:nn
    foreign llvm add(~s##0:wybe.int, st##0:wybe.int, ?tmp#1##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm alloc(24:wybe.int, ?tmp#7##0:stmt_for.int_sequence) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#7##0:stmt_for.int_sequence, ?tmp#8##0:stmt_for.int_sequence, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#8##0:stmt_for.int_sequence, ?tmp#9##0:stmt_for.int_sequence, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~st##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#9##0:stmt_for.int_sequence, ?rest##0:stmt_for.int_sequence, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~en##0:wybe.int) @stmt_for:nn:nn
    foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc end > public {inline} (0 calls)
0: stmt_for.int_sequence.end<0>
end(#rec##0:stmt_for.int_sequence, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @stmt_for:nn:nn
proc end > public {inline} (0 calls)
1: stmt_for.int_sequence.end<1>
end(#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @stmt_for:nn:nn


proc int_sequence > public {inline} (1 calls)
0: stmt_for.int_sequence.int_sequence<0>
int_sequence(start##0:wybe.int, stride##0:wybe.int, end##0:wybe.int, ?#result##0:stmt_for.int_sequence)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:stmt_for.int_sequence) @stmt_for:nn:nn
    foreign lpvm mutate(~#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~start##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm mutate(~#rec##1:stmt_for.int_sequence, ?#rec##2:stmt_for.int_sequence, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~stride##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm mutate(~#rec##2:stmt_for.int_sequence, ?#result##0:stmt_for.int_sequence, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~end##0:wybe.int) @stmt_for:nn:nn
proc int_sequence > public {inline} (16 calls)
1: stmt_for.int_sequence.int_sequence<1>
int_sequence(?start##0:wybe.int, ?stride##0:wybe.int, ?end##0:wybe.int, #result##0:stmt_for.int_sequence)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?start##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#result##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?stride##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(~#result##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?end##0:wybe.int) @stmt_for:nn:nn


proc start > public {inline} (0 calls)
0: stmt_for.int_sequence.start<0>
start(#rec##0:stmt_for.int_sequence, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @stmt_for:nn:nn
proc start > public {inline} (0 calls)
1: stmt_for.int_sequence.start<1>
start(#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @stmt_for:nn:nn


proc stride > public {inline} (0 calls)
0: stmt_for.int_sequence.stride<0>
stride(#rec##0:stmt_for.int_sequence, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @stmt_for:nn:nn
proc stride > public {inline} (0 calls)
1: stmt_for.int_sequence.stride<1>
stride(#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @stmt_for:nn:nn


proc ~= > public {inline} (0 calls)
0: stmt_for.int_sequence.~=<0>
~=(#left##0:stmt_for.int_sequence, #right##0:stmt_for.int_sequence, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#left##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(~#left##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#right##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#right##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(~#right##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @stmt_for:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#9##0:wybe.bool) @int:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#7##0:wybe.int, ?tmp#10##0:wybe.bool) @int:nn:nn
        case ~tmp#10##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp#5##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)



  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'stmt_for.int_sequence'

source_filename = "!ROOT!/final-dump/stmt_for.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"stmt_for.int_sequence.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#12##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#start##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#left##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#left#stride##0" = load i64, ptr %"tmp#14##0"
  %"tmp#15##0" = add i64 %"#left##0", 16
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  %"#left#end##0" = load i64, ptr %"tmp#16##0"
  %"tmp#17##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#start##0" = load i64, ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"#right##0", 8
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  %"#right#stride##0" = load i64, ptr %"tmp#19##0"
  %"tmp#20##0" = add i64 %"#right##0", 16
  %"tmp#21##0" = inttoptr i64 %"tmp#20##0" to ptr
  %"#right#end##0" = load i64, ptr %"tmp#21##0"
  %"tmp#1##0" = icmp eq i64 %"#left#start##0", %"#right#start##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = icmp eq i64 %"#left#stride##0", %"#right#stride##0"
  br i1 %"tmp#2##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#22##0" = icmp eq i64 %"#left#end##0", %"#right#end##0"
  ret i1 %"tmp#22##0"
if.else.1:
  ret i1 0
if.else.0:
  ret i1 0
}

define external fastcc {i64, i64, i1} @"stmt_for.int_sequence.[|]<0>"(i64 %"current##0") {
  %"tmp#12##0" = inttoptr i64 %"current##0" to ptr
  %"s##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"current##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"st##0" = load i64, ptr %"tmp#14##0"
  %"tmp#15##0" = add i64 %"current##0", 16
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  %"en##0" = load i64, ptr %"tmp#16##0"
  %"tmp#4##0" = icmp slt i64 %"st##0", 0
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = icmp slt i64 %"en##0", %"s##0"
  br i1 %"tmp#2##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#17##0" = tail call fastcc {i64, i64, i1} @"stmt_for.int_sequence.[|]#cont#1<0>"(i64 %"en##0", i64 %"s##0", i64 %"st##0")
  %"tmp#18##0" = extractvalue {i64, i64, i1}%"tmp#17##0", 0
  %"tmp#19##0" = extractvalue {i64, i64, i1}%"tmp#17##0", 1
  %"tmp#20##0" = extractvalue {i64, i64, i1}%"tmp#17##0", 2
  %"tmp#21##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#18##0", 0
  %"tmp#22##0" = insertvalue {i64, i64, i1} %"tmp#21##0", i64 %"tmp#19##0", 1
  %"tmp#23##0" = insertvalue {i64, i64, i1} %"tmp#22##0", i1 %"tmp#20##0", 2
  ret {i64, i64, i1} %"tmp#23##0"
if.else.1:
  %"tmp#24##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#25##0" = insertvalue {i64, i64, i1} %"tmp#24##0", i64 undef, 1
  %"tmp#26##0" = insertvalue {i64, i64, i1} %"tmp#25##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#26##0"
if.else.0:
  %"tmp#3##0" = icmp sgt i64 %"en##0", %"s##0"
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#27##0" = tail call fastcc {i64, i64, i1} @"stmt_for.int_sequence.[|]#cont#1<0>"(i64 %"en##0", i64 %"s##0", i64 %"st##0")
  %"tmp#28##0" = extractvalue {i64, i64, i1}%"tmp#27##0", 0
  %"tmp#29##0" = extractvalue {i64, i64, i1}%"tmp#27##0", 1
  %"tmp#30##0" = extractvalue {i64, i64, i1}%"tmp#27##0", 2
  %"tmp#31##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#28##0", 0
  %"tmp#32##0" = insertvalue {i64, i64, i1} %"tmp#31##0", i64 %"tmp#29##0", 1
  %"tmp#33##0" = insertvalue {i64, i64, i1} %"tmp#32##0", i1 %"tmp#30##0", 2
  ret {i64, i64, i1} %"tmp#33##0"
if.else.2:
  %"tmp#34##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#35##0" = insertvalue {i64, i64, i1} %"tmp#34##0", i64 undef, 1
  %"tmp#36##0" = insertvalue {i64, i64, i1} %"tmp#35##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#36##0"
}

define external fastcc {i64, i64, i1} @"stmt_for.int_sequence.[|]#cont#1<0>"(i64 %"en##0", i64 %"s##0", i64 %"st##0") {
  %"tmp#1##0" = add i64 %"s##0", %"st##0"
  %"tmp#10##0" = call ccc ptr @wybe_malloc(i32 24)
  %"tmp#7##0" = ptrtoint ptr %"tmp#10##0" to i64
  %"tmp#11##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 %"tmp#1##0", ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"tmp#7##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  store i64 %"st##0", ptr %"tmp#13##0"
  %"tmp#14##0" = add i64 %"tmp#7##0", 16
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  store i64 %"en##0", ptr %"tmp#15##0"
  %"tmp#16##0" = insertvalue {i64, i64, i1} undef, i64 %"s##0", 0
  %"tmp#17##0" = insertvalue {i64, i64, i1} %"tmp#16##0", i64 %"tmp#7##0", 1
  %"tmp#18##0" = insertvalue {i64, i64, i1} %"tmp#17##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#18##0"
}

define external fastcc i64 @"stmt_for.int_sequence.end<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 16
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"stmt_for.int_sequence.end<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 24, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 16
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"stmt_for.int_sequence.int_sequence<0>"(i64 %"start##0", i64 %"stride##0", i64 %"end##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 24)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"start##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"stride##0", ptr %"tmp#3##0"
  %"tmp#4##0" = add i64 %"#rec##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"end##0", ptr %"tmp#5##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64, i64} @"stmt_for.int_sequence.int_sequence<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = add i64 %"#result##0", 16
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#6##0"
  %"tmp#8##0" = insertvalue {i64, i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#9##0" = insertvalue {i64, i64, i64} %"tmp#8##0", i64 %"tmp#4##0", 1
  %"tmp#10##0" = insertvalue {i64, i64, i64} %"tmp#9##0", i64 %"tmp#7##0", 2
  ret {i64, i64, i64} %"tmp#10##0"
}

define external fastcc i64 @"stmt_for.int_sequence.start<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"stmt_for.int_sequence.start<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 24, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"stmt_for.int_sequence.stride<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"stmt_for.int_sequence.stride<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 24, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i1 @"stmt_for.int_sequence.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#11##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"#left##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = add i64 %"#left##0", 16
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#16##0"
  %"tmp#17##0" = add i64 %"#right##0", 8
  %"tmp#18##0" = inttoptr i64 %"tmp#17##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#18##0"
  %"tmp#19##0" = add i64 %"#right##0", 16
  %"tmp#20##0" = inttoptr i64 %"tmp#19##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#20##0"
  %"tmp#9##0" = icmp eq i64 %"tmp#3##0", %"tmp#6##0"
  br i1 %"tmp#9##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#10##0" = icmp eq i64 %"tmp#4##0", %"tmp#7##0"
  br i1 %"tmp#10##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#0##0" = icmp eq i64 %"tmp#5##0", %"tmp#8##0"
  %"tmp#21##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#21##0"
if.else.1:
  %"tmp#22##0" = xor i1 0, 1
  ret i1 %"tmp#22##0"
if.else.0:
  %"tmp#23##0" = xor i1 0, 1
  ret i1 %"tmp#23##0"
}

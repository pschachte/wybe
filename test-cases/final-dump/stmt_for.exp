======================================================================
AFTER EVERYTHING:
 Module stmt_for
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : stmt_for.<0>
                    stmt_for.multiple_generator<0>
                    stmt_for.semi_det_for_loop<0>
                    stmt_for.shortest_generator_termination<0>
                    stmt_for.single_generator<0>
                    stmt_for.using_break<0>
                    stmt_for.using_irange<0>
                    stmt_for.using_irange_reverse<0>
                    stmt_for.using_next<0>
                    stmt_for.using_unless<0>
                    stmt_for.using_until<0>
                    stmt_for.using_when<0>
                    stmt_for.using_while<0>
                    stmt_for.using_xrange<0>
                    stmt_for.using_xrange_reverse<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public (0 calls)
0: stmt_for.<0>
(io#0:wybe.phantom, ?io#26:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("single_generator:":wybe.raw_string, ~#io#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    stmt_for.single_generator<0>(~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #1 @stmt_for:nn:nn
    foreign c print_string("\nmultiple_generator":wybe.raw_string, ~#io#2:wybe.phantom, ?tmp$5#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$5#0:wybe.phantom, ?#io#3:wybe.phantom) @io:nn:nn
    stmt_for.multiple_generator<0>(~#io#3:wybe.phantom, ?#io#4:wybe.phantom) #3 @stmt_for:nn:nn
    foreign c print_string("\nshortest_generator_termination":wybe.raw_string, ~#io#4:wybe.phantom, ?tmp$8#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$8#0:wybe.phantom, ?#io#5:wybe.phantom) @io:nn:nn
    stmt_for.shortest_generator_termination<0>(~#io#5:wybe.phantom, ?#io#6:wybe.phantom) #5 @stmt_for:nn:nn
    foreign c print_string("\nusing_break":wybe.raw_string, ~#io#6:wybe.phantom, ?tmp$11#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$11#0:wybe.phantom, ?#io#7:wybe.phantom) @io:nn:nn
    stmt_for.using_break<0>(~#io#7:wybe.phantom, ?#io#8:wybe.phantom) #7 @stmt_for:nn:nn
    foreign c print_string("\nusing_next":wybe.raw_string, ~#io#8:wybe.phantom, ?tmp$14#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$14#0:wybe.phantom, ?#io#9:wybe.phantom) @io:nn:nn
    stmt_for.using_next<0>(~#io#9:wybe.phantom, ?#io#10:wybe.phantom) #9 @stmt_for:nn:nn
    foreign c print_string("\nusing_while":wybe.raw_string, ~#io#10:wybe.phantom, ?tmp$17#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$17#0:wybe.phantom, ?#io#11:wybe.phantom) @io:nn:nn
    stmt_for.using_while<0>(~#io#11:wybe.phantom, ?#io#12:wybe.phantom) #11 @stmt_for:nn:nn
    foreign c print_string("\nusing_until":wybe.raw_string, ~#io#12:wybe.phantom, ?tmp$20#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$20#0:wybe.phantom, ?#io#13:wybe.phantom) @io:nn:nn
    stmt_for.using_until<0>(~#io#13:wybe.phantom, ?#io#14:wybe.phantom) #13 @stmt_for:nn:nn
    foreign c print_string("\nusing_when":wybe.raw_string, ~#io#14:wybe.phantom, ?tmp$23#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$23#0:wybe.phantom, ?#io#15:wybe.phantom) @io:nn:nn
    stmt_for.using_when<0>(~#io#15:wybe.phantom, ?#io#16:wybe.phantom) #15 @stmt_for:nn:nn
    foreign c print_string("\nusing_unless":wybe.raw_string, ~#io#16:wybe.phantom, ?tmp$26#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$26#0:wybe.phantom, ?#io#17:wybe.phantom) @io:nn:nn
    stmt_for.using_unless<0>(~#io#17:wybe.phantom, ?#io#18:wybe.phantom) #17 @stmt_for:nn:nn
    foreign c print_string("\nusing_xrange":wybe.raw_string, ~#io#18:wybe.phantom, ?tmp$29#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$29#0:wybe.phantom, ?#io#19:wybe.phantom) @io:nn:nn
    stmt_for.using_xrange<0>(~#io#19:wybe.phantom, ?#io#20:wybe.phantom) #19 @stmt_for:nn:nn
    foreign c print_string("\nusing_xrange_reverse":wybe.raw_string, ~#io#20:wybe.phantom, ?tmp$32#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$32#0:wybe.phantom, ?#io#21:wybe.phantom) @io:nn:nn
    stmt_for.using_xrange_reverse<0>(~#io#21:wybe.phantom, ?#io#22:wybe.phantom) #21 @stmt_for:nn:nn
    foreign c print_string("\nusing_irange":wybe.raw_string, ~#io#22:wybe.phantom, ?tmp$35#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$35#0:wybe.phantom, ?#io#23:wybe.phantom) @io:nn:nn
    stmt_for.using_irange<0>(~#io#23:wybe.phantom, ?#io#24:wybe.phantom) #23 @stmt_for:nn:nn
    foreign c print_string("\nusing_irange_reverse":wybe.raw_string, ~#io#24:wybe.phantom, ?tmp$38#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$38#0:wybe.phantom, ?#io#25:wybe.phantom) @io:nn:nn
    stmt_for.using_irange_reverse<0>(~#io#25:wybe.phantom, ?#io#26:wybe.phantom) #25 @stmt_for:nn:nn


gen$1 > (2 calls)
0: stmt_for.gen$1<0>
gen$1(io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), tmp$6#0:wybe.list(wybe.int), tmp$7#0:wybe.list(wybe.int), tmp$8#0:wybe.list(wybe.int), tmp$9#0:wybe.list(wybe.int), x#0:wybe.list(wybe.int), y#0:wybe.list(wybe.int), ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(tmp$8#0:wybe.list(wybe.int), 0:wybe.int, ?tmp$14#0:wybe.bool)
    case ~tmp$14#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        foreign lpvm access(tmp$8#0:wybe.list(wybe.int), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i#0:wybe.int)
        foreign lpvm access(~tmp$8#0:wybe.list(wybe.int), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.list(wybe.int))
        stmt_for.gen$2<0>(~i#0:wybe.int, ~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), _:wybe.list(wybe.int), _:wybe.bool, ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), ~tmp$7#0:wybe.list(wybe.int), ~tmp$10#0:wybe.list(wybe.int), ~tmp$9#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ~y#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #1



gen$10 > (2 calls)
0: stmt_for.gen$10<0>
gen$10(io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), x#0:wybe.list(wybe.int), ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(tmp$5#0:wybe.list(wybe.int), 0:wybe.int, ?tmp$10#0:wybe.bool)
    case ~tmp$10#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        foreign lpvm access(tmp$5#0:wybe.list(wybe.int), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i#0:wybe.int)
        foreign lpvm access(~tmp$5#0:wybe.list(wybe.int), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.list(wybe.int))
        stmt_for.gen$11<0>(~i#0:wybe.int, ~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), _:wybe.list(wybe.int), _:wybe.bool, ~x#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #1



gen$11 > (1 calls)
0: stmt_for.gen$11<0>
gen$11(i#0:wybe.int, io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), [tmp$6#0:wybe.list(wybe.int)], [tmp$7#0:wybe.bool], x#0:wybe.list(wybe.int), ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_eq(i#0:wybe.int, 3:wybe.int, ?tmp$8#0:wybe.bool) @int:nn:nn
    case ~tmp$8#0:wybe.bool of
    0:
        foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$13#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        stmt_for.gen$10<0>(~io#1:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ?io#2:wybe.phantom) #2 @stmt_for:nn:nn

    1:
        foreign llvm move(~io#0:wybe.phantom, ?io#2:wybe.phantom)



gen$12 > (2 calls)
0: stmt_for.gen$12<0>
gen$12(io#0:wybe.phantom, tmp$0#0:wybe.range, tmp$3#0:wybe.range, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.range.[|]<0>(?i#0:wybe.int, ?tmp$1#0:wybe.range, ~tmp$0#0:wybe.range, ?tmp$2#0:wybe.bool) #0
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#2:wybe.phantom)

    1:
        foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$6#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$6#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        stmt_for.gen$12<0>(~io#1:wybe.phantom, ~tmp$1#0:wybe.range, ~tmp$3#0:wybe.range, ?io#2:wybe.phantom) #2 @stmt_for:nn:nn



gen$13 > (2 calls)
0: stmt_for.gen$13<0>
gen$13(io#0:wybe.phantom, tmp$0#0:wybe.range, tmp$3#0:wybe.range, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.range.[|]<0>(?i#0:wybe.int, ?tmp$1#0:wybe.range, ~tmp$0#0:wybe.range, ?tmp$2#0:wybe.bool) #0
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#2:wybe.phantom)

    1:
        foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$6#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$6#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        stmt_for.gen$13<0>(~io#1:wybe.phantom, ~tmp$1#0:wybe.range, ~tmp$3#0:wybe.range, ?io#2:wybe.phantom) #2 @stmt_for:nn:nn



gen$14 > (3 calls)
0: stmt_for.gen$14<0>
gen$14(io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), x#0:wybe.list(wybe.int), ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(tmp$5#0:wybe.list(wybe.int), 0:wybe.int, ?tmp$10#0:wybe.bool)
    case ~tmp$10#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        foreign lpvm access(tmp$5#0:wybe.list(wybe.int), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i#0:wybe.int)
        foreign lpvm access(~tmp$5#0:wybe.list(wybe.int), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.list(wybe.int))
        stmt_for.gen$15<0>(~i#0:wybe.int, ~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), _:wybe.list(wybe.int), _:wybe.bool, ~x#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #1



gen$15 > (1 calls)
0: stmt_for.gen$15<0>
gen$15(i#0:wybe.int, io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), [tmp$6#0:wybe.list(wybe.int)], [tmp$7#0:wybe.bool], x#0:wybe.list(wybe.int), ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_eq(i#0:wybe.int, 3:wybe.int, ?tmp$8#0:wybe.bool) @int:nn:nn
    case ~tmp$8#0:wybe.bool of
    0:
        foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$13#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        stmt_for.gen$14<0>(~io#1:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ?io#2:wybe.phantom) #3 @stmt_for:nn:nn

    1:
        stmt_for.gen$14<0>(~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ?io#2:wybe.phantom) #1 @stmt_for:nn:nn



gen$16 > (3 calls)
0: stmt_for.gen$16<0>
gen$16(io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), x#0:wybe.list(wybe.int), ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(tmp$5#0:wybe.list(wybe.int), 0:wybe.int, ?tmp$10#0:wybe.bool)
    case ~tmp$10#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        foreign lpvm access(tmp$5#0:wybe.list(wybe.int), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i#0:wybe.int)
        foreign lpvm access(~tmp$5#0:wybe.list(wybe.int), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.list(wybe.int))
        stmt_for.gen$17<0>(~i#0:wybe.int, ~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), _:wybe.list(wybe.int), _:wybe.bool, ~x#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #1



gen$17 > (1 calls)
0: stmt_for.gen$17<0>
gen$17(i#0:wybe.int, io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), [tmp$6#0:wybe.list(wybe.int)], [tmp$7#0:wybe.bool], x#0:wybe.list(wybe.int), ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_slt(i#0:wybe.int, 3:wybe.int, ?tmp$8#0:wybe.bool) @int:nn:nn
    case ~tmp$8#0:wybe.bool of
    0:
        foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$13#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        stmt_for.gen$16<0>(~io#1:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ?io#2:wybe.phantom) #3 @stmt_for:nn:nn

    1:
        stmt_for.gen$16<0>(~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ?io#2:wybe.phantom) #1 @stmt_for:nn:nn



gen$18 > (2 calls)
0: stmt_for.gen$18<0>
gen$18(io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), x#0:wybe.list(wybe.int), ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(tmp$5#0:wybe.list(wybe.int), 0:wybe.int, ?tmp$10#0:wybe.bool)
    case ~tmp$10#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        foreign lpvm access(tmp$5#0:wybe.list(wybe.int), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i#0:wybe.int)
        foreign lpvm access(~tmp$5#0:wybe.list(wybe.int), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.list(wybe.int))
        stmt_for.gen$19<0>(~i#0:wybe.int, ~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), _:wybe.list(wybe.int), _:wybe.bool, ~x#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #1



gen$19 > (1 calls)
0: stmt_for.gen$19<0>
gen$19(i#0:wybe.int, io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), [tmp$6#0:wybe.list(wybe.int)], [tmp$7#0:wybe.bool], x#0:wybe.list(wybe.int), ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_eq(i#0:wybe.int, 3:wybe.int, ?tmp$8#0:wybe.bool) @int:nn:nn
    case ~tmp$8#0:wybe.bool of
    0:
        foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$13#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        stmt_for.gen$18<0>(~io#1:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ?io#2:wybe.phantom) #2 @stmt_for:nn:nn

    1:
        foreign llvm move(~io#0:wybe.phantom, ?io#2:wybe.phantom)



gen$2 > (1 calls)
0: stmt_for.gen$2<0>
gen$2(i#0:wybe.int, io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), [tmp$10#0:wybe.list(wybe.int)], [tmp$12#0:wybe.bool], tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), tmp$6#0:wybe.list(wybe.int), tmp$7#0:wybe.list(wybe.int), tmp$8#0:wybe.list(wybe.int), tmp$9#0:wybe.list(wybe.int), x#0:wybe.list(wybe.int), y#0:wybe.list(wybe.int), ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(tmp$9#0:wybe.list(wybe.int), 0:wybe.int, ?tmp$14#0:wybe.bool)
    case ~tmp$14#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        foreign lpvm access(tmp$9#0:wybe.list(wybe.int), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?j#0:wybe.int)
        foreign lpvm access(~tmp$9#0:wybe.list(wybe.int), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$11#0:wybe.list(wybe.int))
        foreign c print_int(~i#0:wybe.int, ~io#0:wybe.phantom, ?tmp$33#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$33#0:wybe.phantom, ?tmp$34#0:wybe.phantom) @io:nn:nn
        foreign c print_int(~j#0:wybe.int, ~tmp$34#0:wybe.phantom, ?tmp$35#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$35#0:wybe.phantom, ?tmp$36#0:wybe.phantom) @io:nn:nn
        stmt_for.gen$1<0>(~tmp$36#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), ~tmp$7#0:wybe.list(wybe.int), ~tmp$8#0:wybe.list(wybe.int), ~tmp$11#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ~y#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #2 @stmt_for:nn:nn



gen$20 > (3 calls)
0: stmt_for.gen$20<0>
gen$20(io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), x#0:wybe.list(wybe.int), ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(tmp$5#0:wybe.list(wybe.int), 0:wybe.int, ?tmp$10#0:wybe.bool)
    case ~tmp$10#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        foreign lpvm access(tmp$5#0:wybe.list(wybe.int), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i#0:wybe.int)
        foreign lpvm access(~tmp$5#0:wybe.list(wybe.int), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.list(wybe.int))
        stmt_for.gen$21<0>(~i#0:wybe.int, ~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), _:wybe.list(wybe.int), _:wybe.bool, ~x#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #1



gen$21 > (1 calls)
0: stmt_for.gen$21<0>
gen$21(i#0:wybe.int, io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), [tmp$6#0:wybe.list(wybe.int)], [tmp$7#0:wybe.bool], x#0:wybe.list(wybe.int), ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_slt(i#0:wybe.int, 3:wybe.int, ?tmp$8#0:wybe.bool) @int:nn:nn
    case ~tmp$8#0:wybe.bool of
    0:
        stmt_for.gen$20<0>(~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ?io#2:wybe.phantom) #3 @stmt_for:nn:nn

    1:
        foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$13#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        stmt_for.gen$20<0>(~io#1:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ?io#2:wybe.phantom) #2 @stmt_for:nn:nn



gen$22 > (2 calls)
0: stmt_for.gen$22<0>
gen$22(io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), x#0:wybe.list(wybe.int), ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(tmp$5#0:wybe.list(wybe.int), 0:wybe.int, ?tmp$10#0:wybe.bool)
    case ~tmp$10#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        foreign lpvm access(tmp$5#0:wybe.list(wybe.int), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i#0:wybe.int)
        foreign lpvm access(~tmp$5#0:wybe.list(wybe.int), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.list(wybe.int))
        stmt_for.gen$23<0>(~i#0:wybe.int, ~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), _:wybe.list(wybe.int), _:wybe.bool, ~x#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #1



gen$23 > (1 calls)
0: stmt_for.gen$23<0>
gen$23(i#0:wybe.int, io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), [tmp$6#0:wybe.list(wybe.int)], [tmp$7#0:wybe.bool], x#0:wybe.list(wybe.int), ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_slt(i#0:wybe.int, 3:wybe.int, ?tmp$8#0:wybe.bool) @int:nn:nn
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#2:wybe.phantom)

    1:
        foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$13#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        stmt_for.gen$22<0>(~io#1:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ?io#2:wybe.phantom) #2 @stmt_for:nn:nn



gen$24 > (2 calls)
0: stmt_for.gen$24<0>
gen$24(io#0:wybe.phantom, tmp$0#0:wybe.range, tmp$3#0:wybe.range, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.range.[|]<0>(?i#0:wybe.int, ?tmp$1#0:wybe.range, ~tmp$0#0:wybe.range, ?tmp$2#0:wybe.bool) #0
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#2:wybe.phantom)

    1:
        foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$6#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$6#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        stmt_for.gen$24<0>(~io#1:wybe.phantom, ~tmp$1#0:wybe.range, ~tmp$3#0:wybe.range, ?io#2:wybe.phantom) #2 @stmt_for:nn:nn



gen$25 > (2 calls)
0: stmt_for.gen$25<0>
gen$25(io#0:wybe.phantom, tmp$0#0:wybe.range, tmp$3#0:wybe.range, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.range.[|]<0>(?i#0:wybe.int, ?tmp$1#0:wybe.range, ~tmp$0#0:wybe.range, ?tmp$2#0:wybe.bool) #0
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#2:wybe.phantom)

    1:
        foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$6#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$6#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        stmt_for.gen$25<0>(~io#1:wybe.phantom, ~tmp$1#0:wybe.range, ~tmp$3#0:wybe.range, ?io#2:wybe.phantom) #2 @stmt_for:nn:nn



gen$3 > {inline} (1 calls)
0: stmt_for.gen$3<0>
gen$3(i#0:wybe.int, io#0:wybe.phantom, j#0:wybe.int, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), [tmp$10#0:wybe.list(wybe.int)], [tmp$11#0:wybe.list(wybe.int)], [tmp$12#0:wybe.bool], tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), tmp$6#0:wybe.list(wybe.int), tmp$7#0:wybe.list(wybe.int), tmp$8#0:wybe.list(wybe.int), tmp$9#0:wybe.list(wybe.int), x#0:wybe.list(wybe.int), y#0:wybe.list(wybe.int), ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$15#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$15#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    foreign c print_int(~j#0:wybe.int, ~#io#1:wybe.phantom, ?tmp$18#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$18#0:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn
    stmt_for.gen$1<0>(~io#2:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), ~tmp$7#0:wybe.list(wybe.int), ~tmp$8#0:wybe.list(wybe.int), ~tmp$9#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ~y#0:wybe.list(wybe.int), ?io#3:wybe.phantom) #2 @stmt_for:nn:nn


gen$4 > (2 calls)
0: stmt_for.gen$4<0>
gen$4(io#0:wybe.phantom, tmp$0#0:wybe.range, tmp$3#0:wybe.range, ?io#1:wybe.phantom, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.range.[|]<0>(?i#0:wybe.int, ?tmp$1#0:wybe.range, ~tmp$0#0:wybe.range, ?tmp$2#0:wybe.bool) #0
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        stmt_for.gen$5<0>(~i#0:wybe.int, ~io#0:wybe.phantom, ~tmp$1#0:wybe.range, _:wybe.range, _:wybe.bool, ~tmp$3#0:wybe.range, ?io#1:wybe.phantom, ?$$#0:wybe.bool) #1



gen$5 > (1 calls)
0: stmt_for.gen$5<0>
gen$5(i#0:wybe.int, io#0:wybe.phantom, tmp$0#0:wybe.range, [tmp$1#0:wybe.range], [tmp$2#0:wybe.bool], tmp$3#0:wybe.range, ?io#2:wybe.phantom, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_slt(i#0:wybe.int, 5:wybe.int, ?tmp$4#0:wybe.bool) @int:nn:nn
    case ~tmp$4#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~io#0:wybe.phantom, ?io#2:wybe.phantom)

    1:
        foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$9#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$9#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        stmt_for.gen$4<0>(~io#1:wybe.phantom, ~tmp$0#0:wybe.range, ~tmp$3#0:wybe.range, ?io#2:wybe.phantom, ?$$#0:wybe.bool) #2 @stmt_for:nn:nn



gen$6 > (2 calls)
0: stmt_for.gen$6<0>
gen$6(io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), tmp$6#0:wybe.list(wybe.int), tmp$7#0:wybe.list(wybe.int), tmp$8#0:wybe.list(wybe.int), tmp$9#0:wybe.list(wybe.int), x#0:wybe.list(wybe.int), y#0:wybe.list(wybe.int), ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(tmp$8#0:wybe.list(wybe.int), 0:wybe.int, ?tmp$14#0:wybe.bool)
    case ~tmp$14#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        foreign lpvm access(tmp$8#0:wybe.list(wybe.int), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i#0:wybe.int)
        foreign lpvm access(~tmp$8#0:wybe.list(wybe.int), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.list(wybe.int))
        stmt_for.gen$7<0>(~i#0:wybe.int, ~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), _:wybe.list(wybe.int), _:wybe.bool, ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), ~tmp$7#0:wybe.list(wybe.int), ~tmp$10#0:wybe.list(wybe.int), ~tmp$9#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ~y#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #1



gen$7 > (1 calls)
0: stmt_for.gen$7<0>
gen$7(i#0:wybe.int, io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), [tmp$10#0:wybe.list(wybe.int)], [tmp$12#0:wybe.bool], tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), tmp$6#0:wybe.list(wybe.int), tmp$7#0:wybe.list(wybe.int), tmp$8#0:wybe.list(wybe.int), tmp$9#0:wybe.list(wybe.int), x#0:wybe.list(wybe.int), y#0:wybe.list(wybe.int), ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(tmp$9#0:wybe.list(wybe.int), 0:wybe.int, ?tmp$14#0:wybe.bool)
    case ~tmp$14#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        foreign lpvm access(tmp$9#0:wybe.list(wybe.int), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?j#0:wybe.int)
        foreign lpvm access(~tmp$9#0:wybe.list(wybe.int), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$11#0:wybe.list(wybe.int))
        foreign c print_int(~i#0:wybe.int, ~io#0:wybe.phantom, ?tmp$33#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$33#0:wybe.phantom, ?tmp$34#0:wybe.phantom) @io:nn:nn
        foreign c print_int(~j#0:wybe.int, ~tmp$34#0:wybe.phantom, ?tmp$35#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$35#0:wybe.phantom, ?tmp$36#0:wybe.phantom) @io:nn:nn
        stmt_for.gen$6<0>(~tmp$36#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), ~tmp$7#0:wybe.list(wybe.int), ~tmp$8#0:wybe.list(wybe.int), ~tmp$11#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ~y#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #2 @stmt_for:nn:nn



gen$8 > {inline} (1 calls)
0: stmt_for.gen$8<0>
gen$8(i#0:wybe.int, io#0:wybe.phantom, j#0:wybe.int, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), [tmp$10#0:wybe.list(wybe.int)], [tmp$11#0:wybe.list(wybe.int)], [tmp$12#0:wybe.bool], tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), tmp$5#0:wybe.list(wybe.int), tmp$6#0:wybe.list(wybe.int), tmp$7#0:wybe.list(wybe.int), tmp$8#0:wybe.list(wybe.int), tmp$9#0:wybe.list(wybe.int), x#0:wybe.list(wybe.int), y#0:wybe.list(wybe.int), ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$15#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$15#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    foreign c print_int(~j#0:wybe.int, ~#io#1:wybe.phantom, ?tmp$18#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$18#0:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn
    stmt_for.gen$6<0>(~io#2:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), ~tmp$7#0:wybe.list(wybe.int), ~tmp$8#0:wybe.list(wybe.int), ~tmp$9#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ~y#0:wybe.list(wybe.int), ?io#3:wybe.phantom) #2 @stmt_for:nn:nn


gen$9 > (2 calls)
0: stmt_for.gen$9<0>
gen$9(io#0:wybe.phantom, tmp$0#0:wybe.list(wybe.int), tmp$1#0:wybe.list(wybe.int), tmp$2#0:wybe.list(wybe.int), tmp$3#0:wybe.list(wybe.int), tmp$4#0:wybe.list(wybe.int), x#0:wybe.list(wybe.int), ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(tmp$4#0:wybe.list(wybe.int), 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#2:wybe.phantom)

    1:
        foreign lpvm access(tmp$4#0:wybe.list(wybe.int), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i#0:wybe.int)
        foreign lpvm access(~tmp$4#0:wybe.list(wybe.int), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.list(wybe.int))
        foreign c print_int(~i#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$11#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$11#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        stmt_for.gen$9<0>(~io#1:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~x#0:wybe.list(wybe.int), ?io#2:wybe.phantom) #2 @stmt_for:nn:nn



multiple_generator > public (1 calls)
0: stmt_for.multiple_generator<0>
multiple_generator(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$15#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$15#0:wybe.list(?T), ?tmp$16#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int)
    foreign lpvm mutate(~tmp$16#0:wybe.list(?T), ?tmp$2#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(?T))
    foreign lpvm alloc(16:wybe.int, ?tmp$19#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$19#0:wybe.list(?T), ?tmp$20#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$20#0:wybe.list(?T), ?tmp$1#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$2#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$23#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$23#0:wybe.list(?T), ?tmp$24#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$24#0:wybe.list(?T), ?tmp$0#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$1#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$27#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$27#0:wybe.list(?T), ?tmp$28#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 6:wybe.int)
    foreign lpvm mutate(~tmp$28#0:wybe.list(?T), ?tmp$6#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(?T))
    foreign lpvm alloc(16:wybe.int, ?tmp$31#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$31#0:wybe.list(?T), ?tmp$32#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 5:wybe.int)
    foreign lpvm mutate(~tmp$32#0:wybe.list(?T), ?tmp$5#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$6#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$35#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$35#0:wybe.list(?T), ?tmp$36#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:wybe.int)
    foreign lpvm mutate(~tmp$36#0:wybe.list(?T), ?tmp$4#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$5#0:wybe.list(wybe.int))
    stmt_for.gen$1<0>(~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), 0:wybe.list(?T), ~tmp$4#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), 0:wybe.list(?T), ~tmp$0#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ~tmp$0#0:wybe.list(wybe.int), ~tmp$4#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #8 @stmt_for:nn:nn


semi_det_for_loop > public (0 calls)
0: stmt_for.semi_det_for_loop<0>
semi_det_for_loop(io#0:wybe.phantom, ?io#1:wybe.phantom, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.range.xrange<0>(0:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp$3#0:wybe.range) #0 @stmt_for:nn:nn
    stmt_for.gen$4<0>(~io#0:wybe.phantom, ~tmp$3#0:wybe.range, ~tmp$3#0:wybe.range, ?io#1:wybe.phantom, ?$$#0:wybe.bool) #1 @stmt_for:nn:nn


shortest_generator_termination > public (1 calls)
0: stmt_for.shortest_generator_termination<0>
shortest_generator_termination(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$15#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$15#0:wybe.list(?T), ?tmp$16#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:wybe.int)
    foreign lpvm mutate(~tmp$16#0:wybe.list(?T), ?tmp$3#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(?T))
    foreign lpvm alloc(16:wybe.int, ?tmp$19#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$19#0:wybe.list(?T), ?tmp$20#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int)
    foreign lpvm mutate(~tmp$20#0:wybe.list(?T), ?tmp$2#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$3#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$23#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$23#0:wybe.list(?T), ?tmp$24#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$24#0:wybe.list(?T), ?tmp$1#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$2#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$27#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$27#0:wybe.list(?T), ?tmp$28#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$28#0:wybe.list(?T), ?tmp$0#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$1#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$31#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$31#0:wybe.list(?T), ?tmp$32#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 5:wybe.int)
    foreign lpvm mutate(~tmp$32#0:wybe.list(?T), ?tmp$6#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(?T))
    foreign lpvm alloc(16:wybe.int, ?tmp$35#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$35#0:wybe.list(?T), ?tmp$36#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:wybe.int)
    foreign lpvm mutate(~tmp$36#0:wybe.list(?T), ?tmp$5#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$6#0:wybe.list(wybe.int))
    stmt_for.gen$6<0>(~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), 0:wybe.list(?T), ~tmp$5#0:wybe.list(wybe.int), ~tmp$6#0:wybe.list(wybe.int), 0:wybe.list(?T), ~tmp$0#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ~tmp$0#0:wybe.list(wybe.int), ~tmp$5#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #8 @stmt_for:nn:nn


single_generator > public (1 calls)
0: stmt_for.single_generator<0>
single_generator(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$9#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$9#0:wybe.list(?T), ?tmp$10#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int)
    foreign lpvm mutate(~tmp$10#0:wybe.list(?T), ?tmp$2#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(?T))
    foreign lpvm alloc(16:wybe.int, ?tmp$13#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$13#0:wybe.list(?T), ?tmp$14#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$14#0:wybe.list(?T), ?tmp$1#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$2#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$17#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$17#0:wybe.list(?T), ?tmp$18#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$18#0:wybe.list(?T), ?tmp$0#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$1#0:wybe.list(wybe.int))
    stmt_for.gen$9<0>(~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), 0:wybe.list(?T), ~tmp$0#0:wybe.list(wybe.int), ~tmp$0#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #4 @stmt_for:nn:nn


using_break > public (1 calls)
0: stmt_for.using_break<0>
using_break(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$11#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$11#0:wybe.list(?T), ?tmp$12#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:wybe.int)
    foreign lpvm mutate(~tmp$12#0:wybe.list(?T), ?tmp$3#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(?T))
    foreign lpvm alloc(16:wybe.int, ?tmp$15#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$15#0:wybe.list(?T), ?tmp$16#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int)
    foreign lpvm mutate(~tmp$16#0:wybe.list(?T), ?tmp$2#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$3#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$19#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$19#0:wybe.list(?T), ?tmp$20#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$20#0:wybe.list(?T), ?tmp$1#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$2#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$23#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$23#0:wybe.list(?T), ?tmp$24#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$24#0:wybe.list(?T), ?tmp$0#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$1#0:wybe.list(wybe.int))
    stmt_for.gen$10<0>(~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), 0:wybe.list(?T), ~tmp$0#0:wybe.list(wybe.int), ~tmp$0#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #5 @stmt_for:nn:nn


using_irange > public (1 calls)
0: stmt_for.using_irange<0>
using_irange(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.range.irange<0>(1:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp$3#0:wybe.range) #0 @stmt_for:nn:nn
    stmt_for.gen$12<0>(~io#0:wybe.phantom, ~tmp$3#0:wybe.range, ~tmp$3#0:wybe.range, ?io#1:wybe.phantom) #1 @stmt_for:nn:nn


using_irange_reverse > public (1 calls)
0: stmt_for.using_irange_reverse<0>
using_irange_reverse(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.range.irange<0>(10:wybe.int, -1:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.range) #0 @stmt_for:nn:nn
    stmt_for.gen$13<0>(~io#0:wybe.phantom, ~tmp$3#0:wybe.range, ~tmp$3#0:wybe.range, ?io#1:wybe.phantom) #1 @stmt_for:nn:nn


using_next > public (1 calls)
0: stmt_for.using_next<0>
using_next(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$11#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$11#0:wybe.list(?T), ?tmp$12#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:wybe.int)
    foreign lpvm mutate(~tmp$12#0:wybe.list(?T), ?tmp$3#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(?T))
    foreign lpvm alloc(16:wybe.int, ?tmp$15#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$15#0:wybe.list(?T), ?tmp$16#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int)
    foreign lpvm mutate(~tmp$16#0:wybe.list(?T), ?tmp$2#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$3#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$19#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$19#0:wybe.list(?T), ?tmp$20#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$20#0:wybe.list(?T), ?tmp$1#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$2#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$23#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$23#0:wybe.list(?T), ?tmp$24#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$24#0:wybe.list(?T), ?tmp$0#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$1#0:wybe.list(wybe.int))
    stmt_for.gen$14<0>(~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), 0:wybe.list(?T), ~tmp$0#0:wybe.list(wybe.int), ~tmp$0#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #5 @stmt_for:nn:nn


using_unless > public (1 calls)
0: stmt_for.using_unless<0>
using_unless(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$11#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$11#0:wybe.list(?T), ?tmp$12#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:wybe.int)
    foreign lpvm mutate(~tmp$12#0:wybe.list(?T), ?tmp$3#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(?T))
    foreign lpvm alloc(16:wybe.int, ?tmp$15#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$15#0:wybe.list(?T), ?tmp$16#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int)
    foreign lpvm mutate(~tmp$16#0:wybe.list(?T), ?tmp$2#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$3#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$19#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$19#0:wybe.list(?T), ?tmp$20#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$20#0:wybe.list(?T), ?tmp$1#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$2#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$23#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$23#0:wybe.list(?T), ?tmp$24#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$24#0:wybe.list(?T), ?tmp$0#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$1#0:wybe.list(wybe.int))
    stmt_for.gen$16<0>(~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), 0:wybe.list(?T), ~tmp$0#0:wybe.list(wybe.int), ~tmp$0#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #5 @stmt_for:nn:nn


using_until > public (1 calls)
0: stmt_for.using_until<0>
using_until(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$11#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$11#0:wybe.list(?T), ?tmp$12#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:wybe.int)
    foreign lpvm mutate(~tmp$12#0:wybe.list(?T), ?tmp$3#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(?T))
    foreign lpvm alloc(16:wybe.int, ?tmp$15#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$15#0:wybe.list(?T), ?tmp$16#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int)
    foreign lpvm mutate(~tmp$16#0:wybe.list(?T), ?tmp$2#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$3#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$19#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$19#0:wybe.list(?T), ?tmp$20#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$20#0:wybe.list(?T), ?tmp$1#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$2#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$23#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$23#0:wybe.list(?T), ?tmp$24#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$24#0:wybe.list(?T), ?tmp$0#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$1#0:wybe.list(wybe.int))
    stmt_for.gen$18<0>(~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), 0:wybe.list(?T), ~tmp$0#0:wybe.list(wybe.int), ~tmp$0#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #5 @stmt_for:nn:nn


using_when > public (1 calls)
0: stmt_for.using_when<0>
using_when(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$11#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$11#0:wybe.list(?T), ?tmp$12#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:wybe.int)
    foreign lpvm mutate(~tmp$12#0:wybe.list(?T), ?tmp$3#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(?T))
    foreign lpvm alloc(16:wybe.int, ?tmp$15#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$15#0:wybe.list(?T), ?tmp$16#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int)
    foreign lpvm mutate(~tmp$16#0:wybe.list(?T), ?tmp$2#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$3#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$19#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$19#0:wybe.list(?T), ?tmp$20#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$20#0:wybe.list(?T), ?tmp$1#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$2#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$23#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$23#0:wybe.list(?T), ?tmp$24#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$24#0:wybe.list(?T), ?tmp$0#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$1#0:wybe.list(wybe.int))
    stmt_for.gen$20<0>(~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), 0:wybe.list(?T), ~tmp$0#0:wybe.list(wybe.int), ~tmp$0#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #5 @stmt_for:nn:nn


using_while > public (1 calls)
0: stmt_for.using_while<0>
using_while(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$11#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$11#0:wybe.list(?T), ?tmp$12#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:wybe.int)
    foreign lpvm mutate(~tmp$12#0:wybe.list(?T), ?tmp$3#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(?T))
    foreign lpvm alloc(16:wybe.int, ?tmp$15#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$15#0:wybe.list(?T), ?tmp$16#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int)
    foreign lpvm mutate(~tmp$16#0:wybe.list(?T), ?tmp$2#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$3#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$19#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$19#0:wybe.list(?T), ?tmp$20#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$20#0:wybe.list(?T), ?tmp$1#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$2#0:wybe.list(wybe.int))
    foreign lpvm alloc(16:wybe.int, ?tmp$23#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$23#0:wybe.list(?T), ?tmp$24#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$24#0:wybe.list(?T), ?tmp$0#0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$1#0:wybe.list(wybe.int))
    stmt_for.gen$22<0>(~io#0:wybe.phantom, ~tmp$0#0:wybe.list(wybe.int), ~tmp$1#0:wybe.list(wybe.int), ~tmp$2#0:wybe.list(wybe.int), ~tmp$3#0:wybe.list(wybe.int), 0:wybe.list(?T), ~tmp$0#0:wybe.list(wybe.int), ~tmp$0#0:wybe.list(wybe.int), ?io#1:wybe.phantom) #5 @stmt_for:nn:nn


using_xrange > public (1 calls)
0: stmt_for.using_xrange<0>
using_xrange(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.range.xrange<0>(1:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp$3#0:wybe.range) #0 @stmt_for:nn:nn
    stmt_for.gen$24<0>(~io#0:wybe.phantom, ~tmp$3#0:wybe.range, ~tmp$3#0:wybe.range, ?io#1:wybe.phantom) #1 @stmt_for:nn:nn


using_xrange_reverse > public (1 calls)
0: stmt_for.using_xrange_reverse<0>
using_xrange_reverse(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.range.xrange<0>(10:wybe.int, -1:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.range) #0 @stmt_for:nn:nn
    stmt_for.gen$25<0>(~io#0:wybe.phantom, ~tmp$3#0:wybe.range, ~tmp$3#0:wybe.range, ?io#1:wybe.phantom) #1 @stmt_for:nn:nn

  LLVM code       :

; ModuleID = 'stmt_for'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


@stmt_for.25 =    constant [?? x i8] c"\0ausing_irange_reverse\00"


@stmt_for.23 =    constant [?? x i8] c"\0ausing_irange\00"


@stmt_for.21 =    constant [?? x i8] c"\0ausing_xrange_reverse\00"


@stmt_for.19 =    constant [?? x i8] c"\0ausing_xrange\00"


@stmt_for.17 =    constant [?? x i8] c"\0ausing_unless\00"


@stmt_for.15 =    constant [?? x i8] c"\0ausing_when\00"


@stmt_for.13 =    constant [?? x i8] c"\0ausing_until\00"


@stmt_for.11 =    constant [?? x i8] c"\0ausing_while\00"


@stmt_for.9 =    constant [?? x i8] c"\0ausing_next\00"


@stmt_for.7 =    constant [?? x i8] c"\0ausing_break\00"


@stmt_for.5 =    constant [?? x i8] c"\0ashortest_generator_termination\00"


@stmt_for.3 =    constant [?? x i8] c"\0amultiple_generator\00"


@stmt_for.1 =    constant [?? x i8] c"single_generator:\00"


declare external ccc  void @print_int(i64)    


declare external fastcc  {i64, i64, i1} @"wybe.range.[|]<0>"(i64)    


declare external fastcc  i64 @"wybe.range.xrange<0>"(i64, i64, i64)    


declare external fastcc  i64 @"wybe.range.irange<0>"(i64, i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"stmt_for.<0>"()    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @stmt_for.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.single_generator<0>"()  
  %4 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @stmt_for.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.multiple_generator<0>"()  
  %6 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @stmt_for.5, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.shortest_generator_termination<0>"()  
  %8 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @stmt_for.7, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %8)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_break<0>"()  
  %10 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @stmt_for.9, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %10)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_next<0>"()  
  %12 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @stmt_for.11, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %12)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_while<0>"()  
  %14 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @stmt_for.13, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %14)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_until<0>"()  
  %16 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @stmt_for.15, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %16)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_when<0>"()  
  %18 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @stmt_for.17, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %18)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_unless<0>"()  
  %20 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @stmt_for.19, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %20)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_xrange<0>"()  
  %22 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @stmt_for.21, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %22)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_xrange_reverse<0>"()  
  %24 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @stmt_for.23, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %24)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_irange<0>"()  
  %26 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @stmt_for.25, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %26)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_irange_reverse<0>"()  
  ret void 
}


define external fastcc  void @"stmt_for.gen$1<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"tmp$6#0", i64  %"tmp$7#0", i64  %"tmp$8#0", i64  %"tmp$9#0", i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$tmp$14#0" = icmp ne i64 %"tmp$8#0", 0 
  br i1 %"1$tmp$14#0", label %if.then, label %if.else 
if.then:
  %27 = inttoptr i64 %"tmp$8#0" to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = add   i64 %"tmp$8#0", 8 
  %31 = inttoptr i64 %30 to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  %33 = load  i64, i64* %32 
  tail call fastcc  void  @"stmt_for.gen$2<0>"(i64  %29, i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"tmp$6#0", i64  %"tmp$7#0", i64  %33, i64  %"tmp$9#0", i64  %"x#0", i64  %"y#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$10<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")    {
entry:
  %"1$tmp$10#0" = icmp ne i64 %"tmp$5#0", 0 
  br i1 %"1$tmp$10#0", label %if.then, label %if.else 
if.then:
  %34 = inttoptr i64 %"tmp$5#0" to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  %36 = load  i64, i64* %35 
  %37 = add   i64 %"tmp$5#0", 8 
  %38 = inttoptr i64 %37 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  %40 = load  i64, i64* %39 
  tail call fastcc  void  @"stmt_for.gen$11<0>"(i64  %36, i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %40, i64  %"x#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$11<0>"(i64  %"i#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")    {
entry:
  %"1$tmp$8#0" = icmp eq i64 %"i#0", 3 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  ret void 
if.else:
  tail call ccc  void  @print_int(i64  %"i#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$10<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")  
  ret void 
}


define external fastcc  void @"stmt_for.gen$12<0>"(i64  %"tmp$0#0", i64  %"tmp$3#0")    {
entry:
  %41 = tail call fastcc  {i64, i64, i1}  @"wybe.range.[|]<0>"(i64  %"tmp$0#0")  
  %42 = extractvalue {i64, i64, i1} %41, 0 
  %43 = extractvalue {i64, i64, i1} %41, 1 
  %44 = extractvalue {i64, i64, i1} %41, 2 
  br i1 %44, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %42)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$12<0>"(i64  %43, i64  %"tmp$3#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$13<0>"(i64  %"tmp$0#0", i64  %"tmp$3#0")    {
entry:
  %45 = tail call fastcc  {i64, i64, i1}  @"wybe.range.[|]<0>"(i64  %"tmp$0#0")  
  %46 = extractvalue {i64, i64, i1} %45, 0 
  %47 = extractvalue {i64, i64, i1} %45, 1 
  %48 = extractvalue {i64, i64, i1} %45, 2 
  br i1 %48, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %46)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$13<0>"(i64  %47, i64  %"tmp$3#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$14<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")    {
entry:
  %"1$tmp$10#0" = icmp ne i64 %"tmp$5#0", 0 
  br i1 %"1$tmp$10#0", label %if.then, label %if.else 
if.then:
  %49 = inttoptr i64 %"tmp$5#0" to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  %51 = load  i64, i64* %50 
  %52 = add   i64 %"tmp$5#0", 8 
  %53 = inttoptr i64 %52 to i64* 
  %54 = getelementptr  i64, i64* %53, i64 0 
  %55 = load  i64, i64* %54 
  tail call fastcc  void  @"stmt_for.gen$15<0>"(i64  %51, i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %55, i64  %"x#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$15<0>"(i64  %"i#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")    {
entry:
  %"1$tmp$8#0" = icmp eq i64 %"i#0", 3 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"stmt_for.gen$14<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")  
  ret void 
if.else:
  tail call ccc  void  @print_int(i64  %"i#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$14<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")  
  ret void 
}


define external fastcc  void @"stmt_for.gen$16<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")    {
entry:
  %"1$tmp$10#0" = icmp ne i64 %"tmp$5#0", 0 
  br i1 %"1$tmp$10#0", label %if.then, label %if.else 
if.then:
  %56 = inttoptr i64 %"tmp$5#0" to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = add   i64 %"tmp$5#0", 8 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  %62 = load  i64, i64* %61 
  tail call fastcc  void  @"stmt_for.gen$17<0>"(i64  %58, i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %62, i64  %"x#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$17<0>"(i64  %"i#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")    {
entry:
  %"1$tmp$8#0" = icmp slt i64 %"i#0", 3 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"stmt_for.gen$16<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")  
  ret void 
if.else:
  tail call ccc  void  @print_int(i64  %"i#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$16<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")  
  ret void 
}


define external fastcc  void @"stmt_for.gen$18<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")    {
entry:
  %"1$tmp$10#0" = icmp ne i64 %"tmp$5#0", 0 
  br i1 %"1$tmp$10#0", label %if.then, label %if.else 
if.then:
  %63 = inttoptr i64 %"tmp$5#0" to i64* 
  %64 = getelementptr  i64, i64* %63, i64 0 
  %65 = load  i64, i64* %64 
  %66 = add   i64 %"tmp$5#0", 8 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  %69 = load  i64, i64* %68 
  tail call fastcc  void  @"stmt_for.gen$19<0>"(i64  %65, i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %69, i64  %"x#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$19<0>"(i64  %"i#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")    {
entry:
  %"1$tmp$8#0" = icmp eq i64 %"i#0", 3 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  ret void 
if.else:
  tail call ccc  void  @print_int(i64  %"i#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$18<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")  
  ret void 
}


define external fastcc  void @"stmt_for.gen$2<0>"(i64  %"i#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"tmp$6#0", i64  %"tmp$7#0", i64  %"tmp$8#0", i64  %"tmp$9#0", i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$tmp$14#0" = icmp ne i64 %"tmp$9#0", 0 
  br i1 %"1$tmp$14#0", label %if.then, label %if.else 
if.then:
  %70 = inttoptr i64 %"tmp$9#0" to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  %72 = load  i64, i64* %71 
  %73 = add   i64 %"tmp$9#0", 8 
  %74 = inttoptr i64 %73 to i64* 
  %75 = getelementptr  i64, i64* %74, i64 0 
  %76 = load  i64, i64* %75 
  tail call ccc  void  @print_int(i64  %"i#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  %72)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$1<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"tmp$6#0", i64  %"tmp$7#0", i64  %"tmp$8#0", i64  %76, i64  %"x#0", i64  %"y#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$20<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")    {
entry:
  %"1$tmp$10#0" = icmp ne i64 %"tmp$5#0", 0 
  br i1 %"1$tmp$10#0", label %if.then, label %if.else 
if.then:
  %77 = inttoptr i64 %"tmp$5#0" to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  %79 = load  i64, i64* %78 
  %80 = add   i64 %"tmp$5#0", 8 
  %81 = inttoptr i64 %80 to i64* 
  %82 = getelementptr  i64, i64* %81, i64 0 
  %83 = load  i64, i64* %82 
  tail call fastcc  void  @"stmt_for.gen$21<0>"(i64  %79, i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %83, i64  %"x#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$21<0>"(i64  %"i#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")    {
entry:
  %"1$tmp$8#0" = icmp slt i64 %"i#0", 3 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %"i#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$20<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")  
  ret void 
if.else:
  tail call fastcc  void  @"stmt_for.gen$20<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")  
  ret void 
}


define external fastcc  void @"stmt_for.gen$22<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")    {
entry:
  %"1$tmp$10#0" = icmp ne i64 %"tmp$5#0", 0 
  br i1 %"1$tmp$10#0", label %if.then, label %if.else 
if.then:
  %84 = inttoptr i64 %"tmp$5#0" to i64* 
  %85 = getelementptr  i64, i64* %84, i64 0 
  %86 = load  i64, i64* %85 
  %87 = add   i64 %"tmp$5#0", 8 
  %88 = inttoptr i64 %87 to i64* 
  %89 = getelementptr  i64, i64* %88, i64 0 
  %90 = load  i64, i64* %89 
  tail call fastcc  void  @"stmt_for.gen$23<0>"(i64  %86, i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %90, i64  %"x#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$23<0>"(i64  %"i#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")    {
entry:
  %"1$tmp$8#0" = icmp slt i64 %"i#0", 3 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %"i#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$22<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"x#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$24<0>"(i64  %"tmp$0#0", i64  %"tmp$3#0")    {
entry:
  %91 = tail call fastcc  {i64, i64, i1}  @"wybe.range.[|]<0>"(i64  %"tmp$0#0")  
  %92 = extractvalue {i64, i64, i1} %91, 0 
  %93 = extractvalue {i64, i64, i1} %91, 1 
  %94 = extractvalue {i64, i64, i1} %91, 2 
  br i1 %94, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %92)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$24<0>"(i64  %93, i64  %"tmp$3#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$25<0>"(i64  %"tmp$0#0", i64  %"tmp$3#0")    {
entry:
  %95 = tail call fastcc  {i64, i64, i1}  @"wybe.range.[|]<0>"(i64  %"tmp$0#0")  
  %96 = extractvalue {i64, i64, i1} %95, 0 
  %97 = extractvalue {i64, i64, i1} %95, 1 
  %98 = extractvalue {i64, i64, i1} %95, 2 
  br i1 %98, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %96)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$25<0>"(i64  %97, i64  %"tmp$3#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$3<0>"(i64  %"i#0", i64  %"j#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"tmp$6#0", i64  %"tmp$7#0", i64  %"tmp$8#0", i64  %"tmp$9#0", i64  %"x#0", i64  %"y#0")    {
entry:
  tail call ccc  void  @print_int(i64  %"i#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  %"j#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$1<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"tmp$6#0", i64  %"tmp$7#0", i64  %"tmp$8#0", i64  %"tmp$9#0", i64  %"x#0", i64  %"y#0")  
  ret void 
}


define external fastcc  i1 @"stmt_for.gen$4<0>"(i64  %"tmp$0#0", i64  %"tmp$3#0")    {
entry:
  %99 = tail call fastcc  {i64, i64, i1}  @"wybe.range.[|]<0>"(i64  %"tmp$0#0")  
  %100 = extractvalue {i64, i64, i1} %99, 0 
  %101 = extractvalue {i64, i64, i1} %99, 1 
  %102 = extractvalue {i64, i64, i1} %99, 2 
  br i1 %102, label %if.then, label %if.else 
if.then:
  %"2$$$#0" = tail call fastcc  i1  @"stmt_for.gen$5<0>"(i64  %100, i64  %101, i64  %"tmp$3#0")  
  ret i1 %"2$$$#0" 
if.else:
  ret i1 1 
}


define external fastcc  i1 @"stmt_for.gen$5<0>"(i64  %"i#0", i64  %"tmp$0#0", i64  %"tmp$3#0")    {
entry:
  %"1$tmp$4#0" = icmp slt i64 %"i#0", 5 
  br i1 %"1$tmp$4#0", label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %"i#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"2$$$#0" = tail call fastcc  i1  @"stmt_for.gen$4<0>"(i64  %"tmp$0#0", i64  %"tmp$3#0")  
  ret i1 %"2$$$#0" 
if.else:
  ret i1 0 
}


define external fastcc  void @"stmt_for.gen$6<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"tmp$6#0", i64  %"tmp$7#0", i64  %"tmp$8#0", i64  %"tmp$9#0", i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$tmp$14#0" = icmp ne i64 %"tmp$8#0", 0 
  br i1 %"1$tmp$14#0", label %if.then, label %if.else 
if.then:
  %103 = inttoptr i64 %"tmp$8#0" to i64* 
  %104 = getelementptr  i64, i64* %103, i64 0 
  %105 = load  i64, i64* %104 
  %106 = add   i64 %"tmp$8#0", 8 
  %107 = inttoptr i64 %106 to i64* 
  %108 = getelementptr  i64, i64* %107, i64 0 
  %109 = load  i64, i64* %108 
  tail call fastcc  void  @"stmt_for.gen$7<0>"(i64  %105, i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"tmp$6#0", i64  %"tmp$7#0", i64  %109, i64  %"tmp$9#0", i64  %"x#0", i64  %"y#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$7<0>"(i64  %"i#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"tmp$6#0", i64  %"tmp$7#0", i64  %"tmp$8#0", i64  %"tmp$9#0", i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$tmp$14#0" = icmp ne i64 %"tmp$9#0", 0 
  br i1 %"1$tmp$14#0", label %if.then, label %if.else 
if.then:
  %110 = inttoptr i64 %"tmp$9#0" to i64* 
  %111 = getelementptr  i64, i64* %110, i64 0 
  %112 = load  i64, i64* %111 
  %113 = add   i64 %"tmp$9#0", 8 
  %114 = inttoptr i64 %113 to i64* 
  %115 = getelementptr  i64, i64* %114, i64 0 
  %116 = load  i64, i64* %115 
  tail call ccc  void  @print_int(i64  %"i#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  %112)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$6<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"tmp$6#0", i64  %"tmp$7#0", i64  %"tmp$8#0", i64  %116, i64  %"x#0", i64  %"y#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.gen$8<0>"(i64  %"i#0", i64  %"j#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"tmp$6#0", i64  %"tmp$7#0", i64  %"tmp$8#0", i64  %"tmp$9#0", i64  %"x#0", i64  %"y#0")    {
entry:
  tail call ccc  void  @print_int(i64  %"i#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  %"j#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$6<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"tmp$5#0", i64  %"tmp$6#0", i64  %"tmp$7#0", i64  %"tmp$8#0", i64  %"tmp$9#0", i64  %"x#0", i64  %"y#0")  
  ret void 
}


define external fastcc  void @"stmt_for.gen$9<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"tmp$4#0", i64  %"x#0")    {
entry:
  %"1$tmp$8#0" = icmp ne i64 %"tmp$4#0", 0 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  %117 = inttoptr i64 %"tmp$4#0" to i64* 
  %118 = getelementptr  i64, i64* %117, i64 0 
  %119 = load  i64, i64* %118 
  %120 = add   i64 %"tmp$4#0", 8 
  %121 = inttoptr i64 %120 to i64* 
  %122 = getelementptr  i64, i64* %121, i64 0 
  %123 = load  i64, i64* %122 
  tail call ccc  void  @print_int(i64  %119)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.gen$9<0>"(i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %123, i64  %"x#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.multiple_generator<0>"()    {
entry:
  %124 = trunc i64 16 to i32  
  %125 = tail call ccc  i8*  @wybe_malloc(i32  %124)  
  %126 = ptrtoint i8* %125 to i64 
  %127 = inttoptr i64 %126 to i64* 
  %128 = getelementptr  i64, i64* %127, i64 0 
  store  i64 3, i64* %128 
  %129 = add   i64 %126, 8 
  %130 = inttoptr i64 %129 to i64* 
  %131 = getelementptr  i64, i64* %130, i64 0 
  store  i64 0, i64* %131 
  %132 = trunc i64 16 to i32  
  %133 = tail call ccc  i8*  @wybe_malloc(i32  %132)  
  %134 = ptrtoint i8* %133 to i64 
  %135 = inttoptr i64 %134 to i64* 
  %136 = getelementptr  i64, i64* %135, i64 0 
  store  i64 2, i64* %136 
  %137 = add   i64 %134, 8 
  %138 = inttoptr i64 %137 to i64* 
  %139 = getelementptr  i64, i64* %138, i64 0 
  store  i64 %126, i64* %139 
  %140 = trunc i64 16 to i32  
  %141 = tail call ccc  i8*  @wybe_malloc(i32  %140)  
  %142 = ptrtoint i8* %141 to i64 
  %143 = inttoptr i64 %142 to i64* 
  %144 = getelementptr  i64, i64* %143, i64 0 
  store  i64 1, i64* %144 
  %145 = add   i64 %142, 8 
  %146 = inttoptr i64 %145 to i64* 
  %147 = getelementptr  i64, i64* %146, i64 0 
  store  i64 %134, i64* %147 
  %148 = trunc i64 16 to i32  
  %149 = tail call ccc  i8*  @wybe_malloc(i32  %148)  
  %150 = ptrtoint i8* %149 to i64 
  %151 = inttoptr i64 %150 to i64* 
  %152 = getelementptr  i64, i64* %151, i64 0 
  store  i64 6, i64* %152 
  %153 = add   i64 %150, 8 
  %154 = inttoptr i64 %153 to i64* 
  %155 = getelementptr  i64, i64* %154, i64 0 
  store  i64 0, i64* %155 
  %156 = trunc i64 16 to i32  
  %157 = tail call ccc  i8*  @wybe_malloc(i32  %156)  
  %158 = ptrtoint i8* %157 to i64 
  %159 = inttoptr i64 %158 to i64* 
  %160 = getelementptr  i64, i64* %159, i64 0 
  store  i64 5, i64* %160 
  %161 = add   i64 %158, 8 
  %162 = inttoptr i64 %161 to i64* 
  %163 = getelementptr  i64, i64* %162, i64 0 
  store  i64 %150, i64* %163 
  %164 = trunc i64 16 to i32  
  %165 = tail call ccc  i8*  @wybe_malloc(i32  %164)  
  %166 = ptrtoint i8* %165 to i64 
  %167 = inttoptr i64 %166 to i64* 
  %168 = getelementptr  i64, i64* %167, i64 0 
  store  i64 4, i64* %168 
  %169 = add   i64 %166, 8 
  %170 = inttoptr i64 %169 to i64* 
  %171 = getelementptr  i64, i64* %170, i64 0 
  store  i64 %158, i64* %171 
  tail call fastcc  void  @"stmt_for.gen$1<0>"(i64  %142, i64  %134, i64  %126, i64  0, i64  %166, i64  %158, i64  %150, i64  0, i64  %142, i64  %166, i64  %142, i64  %166)  
  ret void 
}


define external fastcc  i1 @"stmt_for.semi_det_for_loop<0>"()    {
entry:
  %"1$tmp$3#0" = tail call fastcc  i64  @"wybe.range.xrange<0>"(i64  0, i64  1, i64  10)  
  %"1$$$#0" = tail call fastcc  i1  @"stmt_for.gen$4<0>"(i64  %"1$tmp$3#0", i64  %"1$tmp$3#0")  
  ret i1 %"1$$$#0" 
}


define external fastcc  void @"stmt_for.shortest_generator_termination<0>"()    {
entry:
  %172 = trunc i64 16 to i32  
  %173 = tail call ccc  i8*  @wybe_malloc(i32  %172)  
  %174 = ptrtoint i8* %173 to i64 
  %175 = inttoptr i64 %174 to i64* 
  %176 = getelementptr  i64, i64* %175, i64 0 
  store  i64 4, i64* %176 
  %177 = add   i64 %174, 8 
  %178 = inttoptr i64 %177 to i64* 
  %179 = getelementptr  i64, i64* %178, i64 0 
  store  i64 0, i64* %179 
  %180 = trunc i64 16 to i32  
  %181 = tail call ccc  i8*  @wybe_malloc(i32  %180)  
  %182 = ptrtoint i8* %181 to i64 
  %183 = inttoptr i64 %182 to i64* 
  %184 = getelementptr  i64, i64* %183, i64 0 
  store  i64 3, i64* %184 
  %185 = add   i64 %182, 8 
  %186 = inttoptr i64 %185 to i64* 
  %187 = getelementptr  i64, i64* %186, i64 0 
  store  i64 %174, i64* %187 
  %188 = trunc i64 16 to i32  
  %189 = tail call ccc  i8*  @wybe_malloc(i32  %188)  
  %190 = ptrtoint i8* %189 to i64 
  %191 = inttoptr i64 %190 to i64* 
  %192 = getelementptr  i64, i64* %191, i64 0 
  store  i64 2, i64* %192 
  %193 = add   i64 %190, 8 
  %194 = inttoptr i64 %193 to i64* 
  %195 = getelementptr  i64, i64* %194, i64 0 
  store  i64 %182, i64* %195 
  %196 = trunc i64 16 to i32  
  %197 = tail call ccc  i8*  @wybe_malloc(i32  %196)  
  %198 = ptrtoint i8* %197 to i64 
  %199 = inttoptr i64 %198 to i64* 
  %200 = getelementptr  i64, i64* %199, i64 0 
  store  i64 1, i64* %200 
  %201 = add   i64 %198, 8 
  %202 = inttoptr i64 %201 to i64* 
  %203 = getelementptr  i64, i64* %202, i64 0 
  store  i64 %190, i64* %203 
  %204 = trunc i64 16 to i32  
  %205 = tail call ccc  i8*  @wybe_malloc(i32  %204)  
  %206 = ptrtoint i8* %205 to i64 
  %207 = inttoptr i64 %206 to i64* 
  %208 = getelementptr  i64, i64* %207, i64 0 
  store  i64 5, i64* %208 
  %209 = add   i64 %206, 8 
  %210 = inttoptr i64 %209 to i64* 
  %211 = getelementptr  i64, i64* %210, i64 0 
  store  i64 0, i64* %211 
  %212 = trunc i64 16 to i32  
  %213 = tail call ccc  i8*  @wybe_malloc(i32  %212)  
  %214 = ptrtoint i8* %213 to i64 
  %215 = inttoptr i64 %214 to i64* 
  %216 = getelementptr  i64, i64* %215, i64 0 
  store  i64 4, i64* %216 
  %217 = add   i64 %214, 8 
  %218 = inttoptr i64 %217 to i64* 
  %219 = getelementptr  i64, i64* %218, i64 0 
  store  i64 %206, i64* %219 
  tail call fastcc  void  @"stmt_for.gen$6<0>"(i64  %198, i64  %190, i64  %182, i64  %174, i64  0, i64  %214, i64  %206, i64  0, i64  %198, i64  %214, i64  %198, i64  %214)  
  ret void 
}


define external fastcc  void @"stmt_for.single_generator<0>"()    {
entry:
  %220 = trunc i64 16 to i32  
  %221 = tail call ccc  i8*  @wybe_malloc(i32  %220)  
  %222 = ptrtoint i8* %221 to i64 
  %223 = inttoptr i64 %222 to i64* 
  %224 = getelementptr  i64, i64* %223, i64 0 
  store  i64 3, i64* %224 
  %225 = add   i64 %222, 8 
  %226 = inttoptr i64 %225 to i64* 
  %227 = getelementptr  i64, i64* %226, i64 0 
  store  i64 0, i64* %227 
  %228 = trunc i64 16 to i32  
  %229 = tail call ccc  i8*  @wybe_malloc(i32  %228)  
  %230 = ptrtoint i8* %229 to i64 
  %231 = inttoptr i64 %230 to i64* 
  %232 = getelementptr  i64, i64* %231, i64 0 
  store  i64 2, i64* %232 
  %233 = add   i64 %230, 8 
  %234 = inttoptr i64 %233 to i64* 
  %235 = getelementptr  i64, i64* %234, i64 0 
  store  i64 %222, i64* %235 
  %236 = trunc i64 16 to i32  
  %237 = tail call ccc  i8*  @wybe_malloc(i32  %236)  
  %238 = ptrtoint i8* %237 to i64 
  %239 = inttoptr i64 %238 to i64* 
  %240 = getelementptr  i64, i64* %239, i64 0 
  store  i64 1, i64* %240 
  %241 = add   i64 %238, 8 
  %242 = inttoptr i64 %241 to i64* 
  %243 = getelementptr  i64, i64* %242, i64 0 
  store  i64 %230, i64* %243 
  tail call fastcc  void  @"stmt_for.gen$9<0>"(i64  %238, i64  %230, i64  %222, i64  0, i64  %238, i64  %238)  
  ret void 
}


define external fastcc  void @"stmt_for.using_break<0>"()    {
entry:
  %244 = trunc i64 16 to i32  
  %245 = tail call ccc  i8*  @wybe_malloc(i32  %244)  
  %246 = ptrtoint i8* %245 to i64 
  %247 = inttoptr i64 %246 to i64* 
  %248 = getelementptr  i64, i64* %247, i64 0 
  store  i64 4, i64* %248 
  %249 = add   i64 %246, 8 
  %250 = inttoptr i64 %249 to i64* 
  %251 = getelementptr  i64, i64* %250, i64 0 
  store  i64 0, i64* %251 
  %252 = trunc i64 16 to i32  
  %253 = tail call ccc  i8*  @wybe_malloc(i32  %252)  
  %254 = ptrtoint i8* %253 to i64 
  %255 = inttoptr i64 %254 to i64* 
  %256 = getelementptr  i64, i64* %255, i64 0 
  store  i64 3, i64* %256 
  %257 = add   i64 %254, 8 
  %258 = inttoptr i64 %257 to i64* 
  %259 = getelementptr  i64, i64* %258, i64 0 
  store  i64 %246, i64* %259 
  %260 = trunc i64 16 to i32  
  %261 = tail call ccc  i8*  @wybe_malloc(i32  %260)  
  %262 = ptrtoint i8* %261 to i64 
  %263 = inttoptr i64 %262 to i64* 
  %264 = getelementptr  i64, i64* %263, i64 0 
  store  i64 2, i64* %264 
  %265 = add   i64 %262, 8 
  %266 = inttoptr i64 %265 to i64* 
  %267 = getelementptr  i64, i64* %266, i64 0 
  store  i64 %254, i64* %267 
  %268 = trunc i64 16 to i32  
  %269 = tail call ccc  i8*  @wybe_malloc(i32  %268)  
  %270 = ptrtoint i8* %269 to i64 
  %271 = inttoptr i64 %270 to i64* 
  %272 = getelementptr  i64, i64* %271, i64 0 
  store  i64 1, i64* %272 
  %273 = add   i64 %270, 8 
  %274 = inttoptr i64 %273 to i64* 
  %275 = getelementptr  i64, i64* %274, i64 0 
  store  i64 %262, i64* %275 
  tail call fastcc  void  @"stmt_for.gen$10<0>"(i64  %270, i64  %262, i64  %254, i64  %246, i64  0, i64  %270, i64  %270)  
  ret void 
}


define external fastcc  void @"stmt_for.using_irange<0>"()    {
entry:
  %"1$tmp$3#0" = tail call fastcc  i64  @"wybe.range.irange<0>"(i64  1, i64  1, i64  10)  
  tail call fastcc  void  @"stmt_for.gen$12<0>"(i64  %"1$tmp$3#0", i64  %"1$tmp$3#0")  
  ret void 
}


define external fastcc  void @"stmt_for.using_irange_reverse<0>"()    {
entry:
  %"1$tmp$3#0" = tail call fastcc  i64  @"wybe.range.irange<0>"(i64  10, i64  -1, i64  1)  
  tail call fastcc  void  @"stmt_for.gen$13<0>"(i64  %"1$tmp$3#0", i64  %"1$tmp$3#0")  
  ret void 
}


define external fastcc  void @"stmt_for.using_next<0>"()    {
entry:
  %276 = trunc i64 16 to i32  
  %277 = tail call ccc  i8*  @wybe_malloc(i32  %276)  
  %278 = ptrtoint i8* %277 to i64 
  %279 = inttoptr i64 %278 to i64* 
  %280 = getelementptr  i64, i64* %279, i64 0 
  store  i64 4, i64* %280 
  %281 = add   i64 %278, 8 
  %282 = inttoptr i64 %281 to i64* 
  %283 = getelementptr  i64, i64* %282, i64 0 
  store  i64 0, i64* %283 
  %284 = trunc i64 16 to i32  
  %285 = tail call ccc  i8*  @wybe_malloc(i32  %284)  
  %286 = ptrtoint i8* %285 to i64 
  %287 = inttoptr i64 %286 to i64* 
  %288 = getelementptr  i64, i64* %287, i64 0 
  store  i64 3, i64* %288 
  %289 = add   i64 %286, 8 
  %290 = inttoptr i64 %289 to i64* 
  %291 = getelementptr  i64, i64* %290, i64 0 
  store  i64 %278, i64* %291 
  %292 = trunc i64 16 to i32  
  %293 = tail call ccc  i8*  @wybe_malloc(i32  %292)  
  %294 = ptrtoint i8* %293 to i64 
  %295 = inttoptr i64 %294 to i64* 
  %296 = getelementptr  i64, i64* %295, i64 0 
  store  i64 2, i64* %296 
  %297 = add   i64 %294, 8 
  %298 = inttoptr i64 %297 to i64* 
  %299 = getelementptr  i64, i64* %298, i64 0 
  store  i64 %286, i64* %299 
  %300 = trunc i64 16 to i32  
  %301 = tail call ccc  i8*  @wybe_malloc(i32  %300)  
  %302 = ptrtoint i8* %301 to i64 
  %303 = inttoptr i64 %302 to i64* 
  %304 = getelementptr  i64, i64* %303, i64 0 
  store  i64 1, i64* %304 
  %305 = add   i64 %302, 8 
  %306 = inttoptr i64 %305 to i64* 
  %307 = getelementptr  i64, i64* %306, i64 0 
  store  i64 %294, i64* %307 
  tail call fastcc  void  @"stmt_for.gen$14<0>"(i64  %302, i64  %294, i64  %286, i64  %278, i64  0, i64  %302, i64  %302)  
  ret void 
}


define external fastcc  void @"stmt_for.using_unless<0>"()    {
entry:
  %308 = trunc i64 16 to i32  
  %309 = tail call ccc  i8*  @wybe_malloc(i32  %308)  
  %310 = ptrtoint i8* %309 to i64 
  %311 = inttoptr i64 %310 to i64* 
  %312 = getelementptr  i64, i64* %311, i64 0 
  store  i64 4, i64* %312 
  %313 = add   i64 %310, 8 
  %314 = inttoptr i64 %313 to i64* 
  %315 = getelementptr  i64, i64* %314, i64 0 
  store  i64 0, i64* %315 
  %316 = trunc i64 16 to i32  
  %317 = tail call ccc  i8*  @wybe_malloc(i32  %316)  
  %318 = ptrtoint i8* %317 to i64 
  %319 = inttoptr i64 %318 to i64* 
  %320 = getelementptr  i64, i64* %319, i64 0 
  store  i64 3, i64* %320 
  %321 = add   i64 %318, 8 
  %322 = inttoptr i64 %321 to i64* 
  %323 = getelementptr  i64, i64* %322, i64 0 
  store  i64 %310, i64* %323 
  %324 = trunc i64 16 to i32  
  %325 = tail call ccc  i8*  @wybe_malloc(i32  %324)  
  %326 = ptrtoint i8* %325 to i64 
  %327 = inttoptr i64 %326 to i64* 
  %328 = getelementptr  i64, i64* %327, i64 0 
  store  i64 2, i64* %328 
  %329 = add   i64 %326, 8 
  %330 = inttoptr i64 %329 to i64* 
  %331 = getelementptr  i64, i64* %330, i64 0 
  store  i64 %318, i64* %331 
  %332 = trunc i64 16 to i32  
  %333 = tail call ccc  i8*  @wybe_malloc(i32  %332)  
  %334 = ptrtoint i8* %333 to i64 
  %335 = inttoptr i64 %334 to i64* 
  %336 = getelementptr  i64, i64* %335, i64 0 
  store  i64 1, i64* %336 
  %337 = add   i64 %334, 8 
  %338 = inttoptr i64 %337 to i64* 
  %339 = getelementptr  i64, i64* %338, i64 0 
  store  i64 %326, i64* %339 
  tail call fastcc  void  @"stmt_for.gen$16<0>"(i64  %334, i64  %326, i64  %318, i64  %310, i64  0, i64  %334, i64  %334)  
  ret void 
}


define external fastcc  void @"stmt_for.using_until<0>"()    {
entry:
  %340 = trunc i64 16 to i32  
  %341 = tail call ccc  i8*  @wybe_malloc(i32  %340)  
  %342 = ptrtoint i8* %341 to i64 
  %343 = inttoptr i64 %342 to i64* 
  %344 = getelementptr  i64, i64* %343, i64 0 
  store  i64 4, i64* %344 
  %345 = add   i64 %342, 8 
  %346 = inttoptr i64 %345 to i64* 
  %347 = getelementptr  i64, i64* %346, i64 0 
  store  i64 0, i64* %347 
  %348 = trunc i64 16 to i32  
  %349 = tail call ccc  i8*  @wybe_malloc(i32  %348)  
  %350 = ptrtoint i8* %349 to i64 
  %351 = inttoptr i64 %350 to i64* 
  %352 = getelementptr  i64, i64* %351, i64 0 
  store  i64 3, i64* %352 
  %353 = add   i64 %350, 8 
  %354 = inttoptr i64 %353 to i64* 
  %355 = getelementptr  i64, i64* %354, i64 0 
  store  i64 %342, i64* %355 
  %356 = trunc i64 16 to i32  
  %357 = tail call ccc  i8*  @wybe_malloc(i32  %356)  
  %358 = ptrtoint i8* %357 to i64 
  %359 = inttoptr i64 %358 to i64* 
  %360 = getelementptr  i64, i64* %359, i64 0 
  store  i64 2, i64* %360 
  %361 = add   i64 %358, 8 
  %362 = inttoptr i64 %361 to i64* 
  %363 = getelementptr  i64, i64* %362, i64 0 
  store  i64 %350, i64* %363 
  %364 = trunc i64 16 to i32  
  %365 = tail call ccc  i8*  @wybe_malloc(i32  %364)  
  %366 = ptrtoint i8* %365 to i64 
  %367 = inttoptr i64 %366 to i64* 
  %368 = getelementptr  i64, i64* %367, i64 0 
  store  i64 1, i64* %368 
  %369 = add   i64 %366, 8 
  %370 = inttoptr i64 %369 to i64* 
  %371 = getelementptr  i64, i64* %370, i64 0 
  store  i64 %358, i64* %371 
  tail call fastcc  void  @"stmt_for.gen$18<0>"(i64  %366, i64  %358, i64  %350, i64  %342, i64  0, i64  %366, i64  %366)  
  ret void 
}


define external fastcc  void @"stmt_for.using_when<0>"()    {
entry:
  %372 = trunc i64 16 to i32  
  %373 = tail call ccc  i8*  @wybe_malloc(i32  %372)  
  %374 = ptrtoint i8* %373 to i64 
  %375 = inttoptr i64 %374 to i64* 
  %376 = getelementptr  i64, i64* %375, i64 0 
  store  i64 4, i64* %376 
  %377 = add   i64 %374, 8 
  %378 = inttoptr i64 %377 to i64* 
  %379 = getelementptr  i64, i64* %378, i64 0 
  store  i64 0, i64* %379 
  %380 = trunc i64 16 to i32  
  %381 = tail call ccc  i8*  @wybe_malloc(i32  %380)  
  %382 = ptrtoint i8* %381 to i64 
  %383 = inttoptr i64 %382 to i64* 
  %384 = getelementptr  i64, i64* %383, i64 0 
  store  i64 3, i64* %384 
  %385 = add   i64 %382, 8 
  %386 = inttoptr i64 %385 to i64* 
  %387 = getelementptr  i64, i64* %386, i64 0 
  store  i64 %374, i64* %387 
  %388 = trunc i64 16 to i32  
  %389 = tail call ccc  i8*  @wybe_malloc(i32  %388)  
  %390 = ptrtoint i8* %389 to i64 
  %391 = inttoptr i64 %390 to i64* 
  %392 = getelementptr  i64, i64* %391, i64 0 
  store  i64 2, i64* %392 
  %393 = add   i64 %390, 8 
  %394 = inttoptr i64 %393 to i64* 
  %395 = getelementptr  i64, i64* %394, i64 0 
  store  i64 %382, i64* %395 
  %396 = trunc i64 16 to i32  
  %397 = tail call ccc  i8*  @wybe_malloc(i32  %396)  
  %398 = ptrtoint i8* %397 to i64 
  %399 = inttoptr i64 %398 to i64* 
  %400 = getelementptr  i64, i64* %399, i64 0 
  store  i64 1, i64* %400 
  %401 = add   i64 %398, 8 
  %402 = inttoptr i64 %401 to i64* 
  %403 = getelementptr  i64, i64* %402, i64 0 
  store  i64 %390, i64* %403 
  tail call fastcc  void  @"stmt_for.gen$20<0>"(i64  %398, i64  %390, i64  %382, i64  %374, i64  0, i64  %398, i64  %398)  
  ret void 
}


define external fastcc  void @"stmt_for.using_while<0>"()    {
entry:
  %404 = trunc i64 16 to i32  
  %405 = tail call ccc  i8*  @wybe_malloc(i32  %404)  
  %406 = ptrtoint i8* %405 to i64 
  %407 = inttoptr i64 %406 to i64* 
  %408 = getelementptr  i64, i64* %407, i64 0 
  store  i64 4, i64* %408 
  %409 = add   i64 %406, 8 
  %410 = inttoptr i64 %409 to i64* 
  %411 = getelementptr  i64, i64* %410, i64 0 
  store  i64 0, i64* %411 
  %412 = trunc i64 16 to i32  
  %413 = tail call ccc  i8*  @wybe_malloc(i32  %412)  
  %414 = ptrtoint i8* %413 to i64 
  %415 = inttoptr i64 %414 to i64* 
  %416 = getelementptr  i64, i64* %415, i64 0 
  store  i64 3, i64* %416 
  %417 = add   i64 %414, 8 
  %418 = inttoptr i64 %417 to i64* 
  %419 = getelementptr  i64, i64* %418, i64 0 
  store  i64 %406, i64* %419 
  %420 = trunc i64 16 to i32  
  %421 = tail call ccc  i8*  @wybe_malloc(i32  %420)  
  %422 = ptrtoint i8* %421 to i64 
  %423 = inttoptr i64 %422 to i64* 
  %424 = getelementptr  i64, i64* %423, i64 0 
  store  i64 2, i64* %424 
  %425 = add   i64 %422, 8 
  %426 = inttoptr i64 %425 to i64* 
  %427 = getelementptr  i64, i64* %426, i64 0 
  store  i64 %414, i64* %427 
  %428 = trunc i64 16 to i32  
  %429 = tail call ccc  i8*  @wybe_malloc(i32  %428)  
  %430 = ptrtoint i8* %429 to i64 
  %431 = inttoptr i64 %430 to i64* 
  %432 = getelementptr  i64, i64* %431, i64 0 
  store  i64 1, i64* %432 
  %433 = add   i64 %430, 8 
  %434 = inttoptr i64 %433 to i64* 
  %435 = getelementptr  i64, i64* %434, i64 0 
  store  i64 %422, i64* %435 
  tail call fastcc  void  @"stmt_for.gen$22<0>"(i64  %430, i64  %422, i64  %414, i64  %406, i64  0, i64  %430, i64  %430)  
  ret void 
}


define external fastcc  void @"stmt_for.using_xrange<0>"()    {
entry:
  %"1$tmp$3#0" = tail call fastcc  i64  @"wybe.range.xrange<0>"(i64  1, i64  1, i64  10)  
  tail call fastcc  void  @"stmt_for.gen$24<0>"(i64  %"1$tmp$3#0", i64  %"1$tmp$3#0")  
  ret void 
}


define external fastcc  void @"stmt_for.using_xrange_reverse<0>"()    {
entry:
  %"1$tmp$3#0" = tail call fastcc  i64  @"wybe.range.xrange<0>"(i64  10, i64  -1, i64  1)  
  tail call fastcc  void  @"stmt_for.gen$25<0>"(i64  %"1$tmp$3#0", i64  %"1$tmp$3#0")  
  ret void 
}

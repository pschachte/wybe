======================================================================
AFTER EVERYTHING:
 Module stmt_for
  representation  : (not a type)
  public submods  : int_sequence -> stmt_for.int_sequence
  public resources: 
  public procs    : stmt_for.<0>
                    stmt_for.irange<0>
                    stmt_for.multiple_generator<0>
                    stmt_for.semi_det_for_loop<0>
                    stmt_for.shortest_generator_termination<0>
                    stmt_for.single_generator<0>
                    stmt_for.using_break<0>
                    stmt_for.using_irange<0>
                    stmt_for.using_irange_reverse<0>
                    stmt_for.using_next<0>
                    stmt_for.using_unless<0>
                    stmt_for.using_until<0>
                    stmt_for.using_when<0>
                    stmt_for.using_while<0>
                    stmt_for.using_xrange<0>
                    stmt_for.using_xrange_reverse<0>
                    stmt_for.xrange<0>
                    stmt_for.int_sequence.=<0>
                    stmt_for.int_sequence.[|]<0>
                    stmt_for.int_sequence.end<0>
                    stmt_for.int_sequence.end<1>
                    stmt_for.int_sequence.int_sequence<0>
                    stmt_for.int_sequence.int_sequence<1>
                    stmt_for.int_sequence.start<0>
                    stmt_for.int_sequence.start<1>
                    stmt_for.int_sequence.stride<0>
                    stmt_for.int_sequence.stride<1>
                    stmt_for.int_sequence.~=<0>
  imports         : public use stmt_for.int_sequence
                    use wybe
  resources       : 
  submodules      : stmt_for.int_sequence
  procs           : 

module top-level code > public {semipure} (0 calls)
0: stmt_for.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("single_generator:":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #26 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_for.single_generator<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @stmt_for:nn:nn
    wybe.string.print<0>("\nmultiple_generator":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #27 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_for.multiple_generator<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @stmt_for:nn:nn
    wybe.string.print<0>("\nshortest_generator_termination":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #28 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#7##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_for.shortest_generator_termination<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_break":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #29 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_for.using_break<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_next":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #30 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#13##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_for.using_next<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_while":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #31 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_for.using_while<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #11 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_until":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #32 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_for.using_until<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #13 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_when":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #33 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#22##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_for.using_when<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #15 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_unless":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #34 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#25##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#25##0:wybe.phantom, ?tmp#26##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#26##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_for.using_unless<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #17 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_xrange":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #35 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#28##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#28##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#29##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_for.xrange<0>(1:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp#30##0:stmt_for.int_sequence) #36 @stmt_for:nn:nn
    stmt_for.using_xrange#cont#1<0>(~tmp#30##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #37 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_xrange_reverse":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #38 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#32##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#32##0:wybe.phantom, ?tmp#33##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#33##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_for.xrange<0>(10:wybe.int, -1:wybe.int, 1:wybe.int, ?tmp#34##0:stmt_for.int_sequence) #39 @stmt_for:nn:nn
    stmt_for.using_xrange_reverse#cont#1<0>(~tmp#34##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #40 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_irange":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #41 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#36##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#36##0:wybe.phantom, ?tmp#37##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#37##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_for.irange<0>(1:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp#38##0:stmt_for.int_sequence) #42 @stmt_for:nn:nn
    stmt_for.using_irange#cont#1<0>(~tmp#38##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #43 @stmt_for:nn:nn
    wybe.string.print<0>("\nusing_irange_reverse":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #44 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#40##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#40##0:wybe.phantom, ?tmp#41##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#41##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_for.irange<0>(10:wybe.int, -1:wybe.int, 1:wybe.int, ?tmp#42##0:stmt_for.int_sequence) #45 @stmt_for:nn:nn
    stmt_for.using_irange_reverse#cont#1<0>(~tmp#42##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #46 @stmt_for:nn:nn


proc irange > public (2 calls)
0: stmt_for.irange<0>
irange(start##0:wybe.int, stride##0:wybe.int, end##0:wybe.int, ?#result##0:stmt_for.int_sequence)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_slt(stride##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm add(~end##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @int:nn:nn
        foreign lpvm alloc(24:wybe.int, ?tmp#12##0:stmt_for.int_sequence) @stmt_for:nn:nn
        foreign lpvm mutate(~tmp#12##0:stmt_for.int_sequence, ?tmp#13##0:stmt_for.int_sequence, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~start##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm mutate(~tmp#13##0:stmt_for.int_sequence, ?tmp#14##0:stmt_for.int_sequence, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~stride##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm mutate(~tmp#14##0:stmt_for.int_sequence, ?#result##0:stmt_for.int_sequence, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.int) @stmt_for:nn:nn

    1:
        foreign llvm sub(~end##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
        foreign lpvm alloc(24:wybe.int, ?tmp#21##0:stmt_for.int_sequence) @stmt_for:nn:nn
        foreign lpvm mutate(~tmp#21##0:stmt_for.int_sequence, ?tmp#22##0:stmt_for.int_sequence, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~start##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm mutate(~tmp#22##0:stmt_for.int_sequence, ?tmp#23##0:stmt_for.int_sequence, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~stride##0:wybe.int) @stmt_for:nn:nn
        foreign lpvm mutate(~tmp#23##0:stmt_for.int_sequence, ?#result##0:stmt_for.int_sequence, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.int) @stmt_for:nn:nn



proc multiple_generator > public (1 calls)
0: stmt_for.multiple_generator<0>
multiple_generator()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#16##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#17##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#17##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#20##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#21##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#21##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#24##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#25##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#25##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#28##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#28##0:wybe.list(T), ?tmp#29##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 6:T) @list:nn:nn
    foreign lpvm mutate(~tmp#29##0:wybe.list(T), ?tmp#6##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#32##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#32##0:wybe.list(T), ?tmp#33##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 5:T) @list:nn:nn
    foreign lpvm mutate(~tmp#33##0:wybe.list(T), ?tmp#5##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#36##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#36##0:wybe.list(T), ?tmp#37##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#37##0:wybe.list(T), ?tmp#4##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:wybe.list(T)) @list:nn:nn
    stmt_for.multiple_generator#cont#1<0>(~tmp#0##0:wybe.list(wybe.int), ~tmp#4##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @stmt_for:nn:nn


proc multiple_generator#cont#1 > (2 calls)
0: stmt_for.multiple_generator#cont#1<0>
multiple_generator#cont#1(tmp#8##0:wybe.list(wybe.int), tmp#9##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#8##0:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.bool)
    case ~tmp#15##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#8##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @list:nn:nn
        foreign lpvm access(~tmp#8##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##1:wybe.list(wybe.int)) @list:nn:nn
        foreign llvm icmp_ne(tmp#9##0:wybe.int, 0:wybe.int, ?tmp#17##0:wybe.bool)
        case ~tmp#17##0:wybe.bool of
        0:

        1:
            foreign lpvm access(tmp#9##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?j##0:wybe.int) @list:nn:nn
            foreign lpvm access(~tmp#9##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##1:wybe.list(wybe.int)) @list:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @int:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @int:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) @io:nn:nn
            foreign c print_int(~j##0:wybe.int, ~tmp#21##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @int:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
            stmt_for.multiple_generator#cont#1<0>(~tmp#8##1:wybe.list(wybe.int), ~tmp#9##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @stmt_for:nn:nn




proc semi_det_for_loop > public (0 calls)
0: stmt_for.semi_det_for_loop<0>
semi_det_for_loop(?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.xrange<0>(0:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp#1##0:stmt_for.int_sequence) #0 @stmt_for:nn:nn
    stmt_for.semi_det_for_loop#cont#1<0>(~tmp#1##0:stmt_for.int_sequence, ?#success##0:wybe.bool) #1 @stmt_for:nn:nn


proc semi_det_for_loop#cont#1 > (2 calls)
0: stmt_for.semi_det_for_loop#cont#1<0>
semi_det_for_loop#cont#1(tmp#0##0:stmt_for.int_sequence, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.int_sequence.[|]<0>(?i##0:wybe.int, ?tmp#0##1:stmt_for.int_sequence, ~tmp#0##0:stmt_for.int_sequence, ?tmp#4##0:wybe.bool) #0 @stmt_for:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_slt(~i##0:wybe.int, 5:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
        case ~tmp#3##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            stmt_for.semi_det_for_loop#cont#1<0>(~tmp#0##1:stmt_for.int_sequence, ?#success##0:wybe.bool) #2 @stmt_for:nn:nn




proc shortest_generator_termination > public (1 calls)
0: stmt_for.shortest_generator_termination<0>
shortest_generator_termination()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#16##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#17##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#17##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#20##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#21##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#21##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#24##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#25##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#25##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#28##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#28##0:wybe.list(T), ?tmp#29##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#29##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#32##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#32##0:wybe.list(T), ?tmp#33##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 5:T) @list:nn:nn
    foreign lpvm mutate(~tmp#33##0:wybe.list(T), ?tmp#6##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#36##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#36##0:wybe.list(T), ?tmp#37##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#37##0:wybe.list(T), ?tmp#5##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.list(T)) @list:nn:nn
    stmt_for.shortest_generator_termination#cont#1<0>(~tmp#0##0:wybe.list(wybe.int), ~tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @stmt_for:nn:nn


proc shortest_generator_termination#cont#1 > (2 calls)
0: stmt_for.shortest_generator_termination#cont#1<0>
shortest_generator_termination#cont#1(tmp#8##0:wybe.list(wybe.int), tmp#9##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#8##0:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.bool)
    case ~tmp#15##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#8##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @list:nn:nn
        foreign lpvm access(~tmp#8##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##1:wybe.list(wybe.int)) @list:nn:nn
        foreign llvm icmp_ne(tmp#9##0:wybe.int, 0:wybe.int, ?tmp#17##0:wybe.bool)
        case ~tmp#17##0:wybe.bool of
        0:

        1:
            foreign lpvm access(tmp#9##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?j##0:wybe.int) @list:nn:nn
            foreign lpvm access(~tmp#9##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##1:wybe.list(wybe.int)) @list:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @int:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @int:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) @io:nn:nn
            foreign c print_int(~j##0:wybe.int, ~tmp#21##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @int:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
            stmt_for.shortest_generator_termination#cont#1<0>(~tmp#8##1:wybe.list(wybe.int), ~tmp#9##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @stmt_for:nn:nn




proc single_generator > public (1 calls)
0: stmt_for.single_generator<0>
single_generator()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#9##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#9##0:wybe.list(T), ?tmp#10##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#10##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#13##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#13##0:wybe.list(T), ?tmp#14##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#14##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#17##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#17##0:wybe.list(T), ?tmp#18##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#18##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @list:nn:nn
    stmt_for.single_generator#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @stmt_for:nn:nn


proc single_generator#cont#1 > (2 calls)
0: stmt_for.single_generator#cont#1<0>
single_generator#cont#1(tmp#4##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#4##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#4##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @list:nn:nn
        foreign lpvm access(~tmp#4##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##1:wybe.list(wybe.int)) @list:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @int:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        stmt_for.single_generator#cont#1<0>(~tmp#4##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn



proc using_break > public (1 calls)
0: stmt_for.using_break<0>
using_break()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#12##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @list:nn:nn
    stmt_for.using_break#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn


proc using_break#cont#1 > (2 calls)
0: stmt_for.using_break#cont#1<0>
using_break#cont#1(tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @list:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list(wybe.int)) @list:nn:nn
        foreign llvm icmp_eq(i##0:wybe.int, 3:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @int:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @int:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
            stmt_for.using_break#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @stmt_for:nn:nn

        1:




proc using_irange > public {inline} (1 calls)
0: stmt_for.using_irange<0>
using_irange()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.irange<0>(1:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp#1##0:stmt_for.int_sequence) #0 @stmt_for:nn:nn
    stmt_for.using_irange#cont#1<0>(~tmp#1##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @stmt_for:nn:nn


proc using_irange#cont#1 > (2 calls)
0: stmt_for.using_irange#cont#1<0>
using_irange#cont#1(tmp#0##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.int_sequence.[|]<0>(?i##0:wybe.int, ?tmp#0##1:stmt_for.int_sequence, ~tmp#0##0:stmt_for.int_sequence, ?tmp#3##0:wybe.bool) #0 @stmt_for:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @int:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        stmt_for.using_irange#cont#1<0>(~tmp#0##1:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn



proc using_irange_reverse > public {inline} (1 calls)
0: stmt_for.using_irange_reverse<0>
using_irange_reverse()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.irange<0>(10:wybe.int, -1:wybe.int, 1:wybe.int, ?tmp#1##0:stmt_for.int_sequence) #0 @stmt_for:nn:nn
    stmt_for.using_irange_reverse#cont#1<0>(~tmp#1##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @stmt_for:nn:nn


proc using_irange_reverse#cont#1 > (2 calls)
0: stmt_for.using_irange_reverse#cont#1<0>
using_irange_reverse#cont#1(tmp#0##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.int_sequence.[|]<0>(?i##0:wybe.int, ?tmp#0##1:stmt_for.int_sequence, ~tmp#0##0:stmt_for.int_sequence, ?tmp#3##0:wybe.bool) #0 @stmt_for:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @int:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        stmt_for.using_irange_reverse#cont#1<0>(~tmp#0##1:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn



proc using_next > public (1 calls)
0: stmt_for.using_next<0>
using_next()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#12##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @list:nn:nn
    stmt_for.using_next#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn


proc using_next#cont#1 > (3 calls)
0: stmt_for.using_next#cont#1<0>
using_next#cont#1(tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @list:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list(wybe.int)) @list:nn:nn
        foreign llvm icmp_eq(i##0:wybe.int, 3:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @int:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @int:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
            stmt_for.using_next#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @stmt_for:nn:nn

        1:
            stmt_for.using_next#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn




proc using_unless > public (1 calls)
0: stmt_for.using_unless<0>
using_unless()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#12##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @list:nn:nn
    stmt_for.using_unless#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn


proc using_unless#cont#1 > (3 calls)
0: stmt_for.using_unless#cont#1<0>
using_unless#cont#1(tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @list:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list(wybe.int)) @list:nn:nn
        foreign llvm icmp_slt(i##0:wybe.int, 3:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @int:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @int:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
            stmt_for.using_unless#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @stmt_for:nn:nn

        1:
            stmt_for.using_unless#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn




proc using_until > public (1 calls)
0: stmt_for.using_until<0>
using_until()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#12##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @list:nn:nn
    stmt_for.using_until#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn


proc using_until#cont#1 > (2 calls)
0: stmt_for.using_until#cont#1<0>
using_until#cont#1(tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @list:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list(wybe.int)) @list:nn:nn
        foreign llvm icmp_eq(i##0:wybe.int, 3:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @int:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @int:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
            stmt_for.using_until#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @stmt_for:nn:nn

        1:




proc using_when > public (1 calls)
0: stmt_for.using_when<0>
using_when()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#12##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @list:nn:nn
    stmt_for.using_when#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn


proc using_when#cont#1 > (3 calls)
0: stmt_for.using_when#cont#1<0>
using_when#cont#1(tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @list:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list(wybe.int)) @list:nn:nn
        foreign llvm icmp_slt(i##0:wybe.int, 3:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:
            stmt_for.using_when#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @stmt_for:nn:nn

        1:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @int:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @int:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
            stmt_for.using_when#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @stmt_for:nn:nn




proc using_while > public (1 calls)
0: stmt_for.using_while<0>
using_while()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#12##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @list:nn:nn
    stmt_for.using_while#cont#1<0>(~tmp#0##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @stmt_for:nn:nn


proc using_while#cont#1 > (2 calls)
0: stmt_for.using_while#cont#1<0>
using_while#cont#1(tmp#5##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?i##0:wybe.int) @list:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list(wybe.int)) @list:nn:nn
        foreign llvm icmp_slt(i##0:wybe.int, 3:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:

        1:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @int:nn:nn
            foreign c print_int(~i##0:wybe.int, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @int:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
            stmt_for.using_while#cont#1<0>(~tmp#5##1:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @stmt_for:nn:nn




proc using_xrange > public {inline} (1 calls)
0: stmt_for.using_xrange<0>
using_xrange()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.xrange<0>(1:wybe.int, 1:wybe.int, 10:wybe.int, ?tmp#1##0:stmt_for.int_sequence) #0 @stmt_for:nn:nn
    stmt_for.using_xrange#cont#1<0>(~tmp#1##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @stmt_for:nn:nn


proc using_xrange#cont#1 > (2 calls)
0: stmt_for.using_xrange#cont#1<0>
using_xrange#cont#1(tmp#0##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.int_sequence.[|]<0>(?i##0:wybe.int, ?tmp#0##1:stmt_for.int_sequence, ~tmp#0##0:stmt_for.int_sequence, ?tmp#3##0:wybe.bool) #0 @stmt_for:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @int:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        stmt_for.using_xrange#cont#1<0>(~tmp#0##1:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn



proc using_xrange_reverse > public {inline} (1 calls)
0: stmt_for.using_xrange_reverse<0>
using_xrange_reverse()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.xrange<0>(10:wybe.int, -1:wybe.int, 1:wybe.int, ?tmp#1##0:stmt_for.int_sequence) #0 @stmt_for:nn:nn
    stmt_for.using_xrange_reverse#cont#1<0>(~tmp#1##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @stmt_for:nn:nn


proc using_xrange_reverse#cont#1 > (2 calls)
0: stmt_for.using_xrange_reverse#cont#1<0>
using_xrange_reverse#cont#1(tmp#0##0:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_for.int_sequence.[|]<0>(?i##0:wybe.int, ?tmp#0##1:stmt_for.int_sequence, ~tmp#0##0:stmt_for.int_sequence, ?tmp#3##0:wybe.bool) #0 @stmt_for:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @int:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        stmt_for.using_xrange_reverse#cont#1<0>(~tmp#0##1:stmt_for.int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_for:nn:nn



proc xrange > public (3 calls)
0: stmt_for.xrange<0>
xrange(start##0:wybe.int, stride##0:wybe.int, end##0:wybe.int, ?#result##0:stmt_for.int_sequence)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#4##0:stmt_for.int_sequence) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#4##0:stmt_for.int_sequence, ?tmp#5##0:stmt_for.int_sequence, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~start##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#5##0:stmt_for.int_sequence, ?tmp#6##0:stmt_for.int_sequence, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~stride##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#6##0:stmt_for.int_sequence, ?#result##0:stmt_for.int_sequence, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~end##0:wybe.int) @stmt_for:nn:nn

  LLVM code       :

; ModuleID = 'stmt_for'


 


@stmt_for.15 =    constant {i64, i64} { i64 11, i64 ptrtoint ([?? x i8]* @stmt_for.14 to i64) }


@stmt_for.9 =    constant {i64, i64} { i64 11, i64 ptrtoint ([?? x i8]* @stmt_for.8 to i64) }


@stmt_for.11 =    constant {i64, i64} { i64 12, i64 ptrtoint ([?? x i8]* @stmt_for.10 to i64) }


@stmt_for.13 =    constant {i64, i64} { i64 12, i64 ptrtoint ([?? x i8]* @stmt_for.12 to i64) }


@stmt_for.7 =    constant {i64, i64} { i64 12, i64 ptrtoint ([?? x i8]* @stmt_for.6 to i64) }


@stmt_for.17 =    constant {i64, i64} { i64 13, i64 ptrtoint ([?? x i8]* @stmt_for.16 to i64) }


@stmt_for.19 =    constant {i64, i64} { i64 13, i64 ptrtoint ([?? x i8]* @stmt_for.18 to i64) }


@stmt_for.23 =    constant {i64, i64} { i64 13, i64 ptrtoint ([?? x i8]* @stmt_for.22 to i64) }


@stmt_for.1 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @stmt_for.0 to i64) }


@stmt_for.3 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @stmt_for.2 to i64) }


@stmt_for.21 =    constant {i64, i64} { i64 21, i64 ptrtoint ([?? x i8]* @stmt_for.20 to i64) }


@stmt_for.25 =    constant {i64, i64} { i64 21, i64 ptrtoint ([?? x i8]* @stmt_for.24 to i64) }


@stmt_for.5 =    constant {i64, i64} { i64 31, i64 ptrtoint ([?? x i8]* @stmt_for.4 to i64) }


@stmt_for.2 =    constant [?? x i8] c"\0amultiple_generator\00"


@stmt_for.4 =    constant [?? x i8] c"\0ashortest_generator_termination\00"


@stmt_for.6 =    constant [?? x i8] c"\0ausing_break\00"


@stmt_for.22 =    constant [?? x i8] c"\0ausing_irange\00"


@stmt_for.24 =    constant [?? x i8] c"\0ausing_irange_reverse\00"


@stmt_for.8 =    constant [?? x i8] c"\0ausing_next\00"


@stmt_for.16 =    constant [?? x i8] c"\0ausing_unless\00"


@stmt_for.12 =    constant [?? x i8] c"\0ausing_until\00"


@stmt_for.14 =    constant [?? x i8] c"\0ausing_when\00"


@stmt_for.10 =    constant [?? x i8] c"\0ausing_while\00"


@stmt_for.18 =    constant [?? x i8] c"\0ausing_xrange\00"


@stmt_for.20 =    constant [?? x i8] c"\0ausing_xrange_reverse\00"


@stmt_for.0 =    constant [?? x i8] c"single_generator:\00"


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"stmt_for.<0>"()    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_for.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.single_generator<0>"()  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_for.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.multiple_generator<0>"()  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_for.5, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.shortest_generator_termination<0>"()  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_for.7, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_break<0>"()  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_for.9, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_next<0>"()  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_for.11, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_while<0>"()  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_for.13, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_until<0>"()  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_for.15, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_when<0>"()  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_for.17, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_for.using_unless<0>"()  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_for.19, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %0 = tail call fastcc  i64  @"stmt_for.xrange<0>"(i64  1, i64  1, i64  10)  
  tail call fastcc  void  @"stmt_for.using_xrange#cont#1<0>"(i64  %0)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_for.21, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %1 = tail call fastcc  i64  @"stmt_for.xrange<0>"(i64  10, i64  -1, i64  1)  
  tail call fastcc  void  @"stmt_for.using_xrange_reverse#cont#1<0>"(i64  %1)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_for.23, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %2 = tail call fastcc  i64  @"stmt_for.irange<0>"(i64  1, i64  1, i64  10)  
  tail call fastcc  void  @"stmt_for.using_irange#cont#1<0>"(i64  %2)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @stmt_for.25, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %3 = tail call fastcc  i64  @"stmt_for.irange<0>"(i64  10, i64  -1, i64  1)  
  tail call fastcc  void  @"stmt_for.using_irange_reverse#cont#1<0>"(i64  %3)  
  ret void 
}


define external fastcc  i64 @"stmt_for.irange<0>"(i64  %"start##0", i64  %"stride##0", i64  %"end##0")    {
entry:
  %0 = icmp slt i64 %"stride##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = sub   i64 %"end##0", 1 
  %2 = trunc i64 24 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"start##0", i64* %5 
  %6 = add   i64 %4, 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"stride##0", i64* %7 
  %8 = add   i64 %4, 16 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %1, i64* %9 
  ret i64 %4 
if.else:
  %10 = add   i64 %"end##0", 1 
  %11 = trunc i64 24 to i32  
  %12 = tail call ccc  i8*  @wybe_malloc(i32  %11)  
  %13 = ptrtoint i8* %12 to i64 
  %14 = inttoptr i64 %13 to i64* 
  store  i64 %"start##0", i64* %14 
  %15 = add   i64 %13, 8 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %"stride##0", i64* %16 
  %17 = add   i64 %13, 16 
  %18 = inttoptr i64 %17 to i64* 
  store  i64 %10, i64* %18 
  ret i64 %13 
}


define external fastcc  void @"stmt_for.multiple_generator<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 3, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 2, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 1, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %8, i64* %17 
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 6, i64* %21 
  %22 = add   i64 %20, 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 0, i64* %23 
  %24 = trunc i64 16 to i32  
  %25 = tail call ccc  i8*  @wybe_malloc(i32  %24)  
  %26 = ptrtoint i8* %25 to i64 
  %27 = inttoptr i64 %26 to i64* 
  store  i64 5, i64* %27 
  %28 = add   i64 %26, 8 
  %29 = inttoptr i64 %28 to i64* 
  store  i64 %20, i64* %29 
  %30 = trunc i64 16 to i32  
  %31 = tail call ccc  i8*  @wybe_malloc(i32  %30)  
  %32 = ptrtoint i8* %31 to i64 
  %33 = inttoptr i64 %32 to i64* 
  store  i64 4, i64* %33 
  %34 = add   i64 %32, 8 
  %35 = inttoptr i64 %34 to i64* 
  store  i64 %26, i64* %35 
  tail call fastcc  void  @"stmt_for.multiple_generator#cont#1<0>"(i64  %14, i64  %32)  
  ret void 
}


define external fastcc  void @"stmt_for.multiple_generator#cont#1<0>"(i64  %"tmp#8##0", i64  %"tmp#9##0")    {
entry:
  %0 = icmp ne i64 %"tmp#8##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"tmp#8##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"tmp#8##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp ne i64 %"tmp#9##0", 0 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  ret void 
if.then1:
  %7 = inttoptr i64 %"tmp#9##0" to i64* 
  %8 = load  i64, i64* %7 
  %9 = add   i64 %"tmp#9##0", 8 
  %10 = inttoptr i64 %9 to i64* 
  %11 = load  i64, i64* %10 
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  %8)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_for.multiple_generator#cont#1<0>"(i64  %5, i64  %11)  
  ret void 
if.else1:
  ret void 
}


define external fastcc  i1 @"stmt_for.semi_det_for_loop<0>"()    {
entry:
  %0 = tail call fastcc  i64  @"stmt_for.xrange<0>"(i64  0, i64  1, i64  10)  
  %1 = tail call fastcc  i1  @"stmt_for.semi_det_for_loop#cont#1<0>"(i64  %0)  
  ret i1 %1 
}


define external fastcc  i1 @"stmt_for.semi_det_for_loop#cont#1<0>"(i64  %"tmp#0##0")    {
entry:
  %0 = tail call fastcc  {i64, i64, i1}  @"stmt_for.int_sequence.[|]<0>"(i64  %"tmp#0##0")  
  %1 = extractvalue {i64, i64, i1} %0, 0 
  %2 = extractvalue {i64, i64, i1} %0, 1 
  %3 = extractvalue {i64, i64, i1} %0, 2 
  br i1 %3, label %if.then, label %if.else 
if.then:
  %4 = icmp slt i64 %1, 5 
  br i1 %4, label %if.then1, label %if.else1 
if.else:
  ret i1 1 
if.then1:
  %5 = musttail call fastcc  i1  @"stmt_for.semi_det_for_loop#cont#1<0>"(i64  %2)  
  ret i1 %5 
if.else1:
  ret i1 0 
}


define external fastcc  void @"stmt_for.shortest_generator_termination<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 4, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 3, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 2, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %8, i64* %17 
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 1, i64* %21 
  %22 = add   i64 %20, 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 %14, i64* %23 
  %24 = trunc i64 16 to i32  
  %25 = tail call ccc  i8*  @wybe_malloc(i32  %24)  
  %26 = ptrtoint i8* %25 to i64 
  %27 = inttoptr i64 %26 to i64* 
  store  i64 5, i64* %27 
  %28 = add   i64 %26, 8 
  %29 = inttoptr i64 %28 to i64* 
  store  i64 0, i64* %29 
  %30 = trunc i64 16 to i32  
  %31 = tail call ccc  i8*  @wybe_malloc(i32  %30)  
  %32 = ptrtoint i8* %31 to i64 
  %33 = inttoptr i64 %32 to i64* 
  store  i64 4, i64* %33 
  %34 = add   i64 %32, 8 
  %35 = inttoptr i64 %34 to i64* 
  store  i64 %26, i64* %35 
  tail call fastcc  void  @"stmt_for.shortest_generator_termination#cont#1<0>"(i64  %20, i64  %32)  
  ret void 
}


define external fastcc  void @"stmt_for.shortest_generator_termination#cont#1<0>"(i64  %"tmp#8##0", i64  %"tmp#9##0")    {
entry:
  %0 = icmp ne i64 %"tmp#8##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"tmp#8##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"tmp#8##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp ne i64 %"tmp#9##0", 0 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  ret void 
if.then1:
  %7 = inttoptr i64 %"tmp#9##0" to i64* 
  %8 = load  i64, i64* %7 
  %9 = add   i64 %"tmp#9##0", 8 
  %10 = inttoptr i64 %9 to i64* 
  %11 = load  i64, i64* %10 
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  %8)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_for.shortest_generator_termination#cont#1<0>"(i64  %5, i64  %11)  
  ret void 
if.else1:
  ret void 
}


define external fastcc  void @"stmt_for.single_generator<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 3, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 2, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 1, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %8, i64* %17 
  tail call fastcc  void  @"stmt_for.single_generator#cont#1<0>"(i64  %14)  
  ret void 
}


define external fastcc  void @"stmt_for.single_generator#cont#1<0>"(i64  %"tmp#4##0")    {
entry:
  %0 = icmp ne i64 %"tmp#4##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"tmp#4##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"tmp#4##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_for.single_generator#cont#1<0>"(i64  %5)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.using_break<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 4, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 3, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 2, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %8, i64* %17 
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 1, i64* %21 
  %22 = add   i64 %20, 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 %14, i64* %23 
  tail call fastcc  void  @"stmt_for.using_break#cont#1<0>"(i64  %20)  
  ret void 
}


define external fastcc  void @"stmt_for.using_break#cont#1<0>"(i64  %"tmp#5##0")    {
entry:
  %0 = icmp ne i64 %"tmp#5##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"tmp#5##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"tmp#5##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp eq i64 %2, 3 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  ret void 
if.then1:
  ret void 
if.else1:
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_for.using_break#cont#1<0>"(i64  %5)  
  ret void 
}


define external fastcc  void @"stmt_for.using_irange<0>"() alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"stmt_for.irange<0>"(i64  1, i64  1, i64  10)  
  tail call fastcc  void  @"stmt_for.using_irange#cont#1<0>"(i64  %0)  
  ret void 
}


define external fastcc  void @"stmt_for.using_irange#cont#1<0>"(i64  %"tmp#0##0")    {
entry:
  %0 = tail call fastcc  {i64, i64, i1}  @"stmt_for.int_sequence.[|]<0>"(i64  %"tmp#0##0")  
  %1 = extractvalue {i64, i64, i1} %0, 0 
  %2 = extractvalue {i64, i64, i1} %0, 1 
  %3 = extractvalue {i64, i64, i1} %0, 2 
  br i1 %3, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_for.using_irange#cont#1<0>"(i64  %2)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.using_irange_reverse<0>"() alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"stmt_for.irange<0>"(i64  10, i64  -1, i64  1)  
  tail call fastcc  void  @"stmt_for.using_irange_reverse#cont#1<0>"(i64  %0)  
  ret void 
}


define external fastcc  void @"stmt_for.using_irange_reverse#cont#1<0>"(i64  %"tmp#0##0")    {
entry:
  %0 = tail call fastcc  {i64, i64, i1}  @"stmt_for.int_sequence.[|]<0>"(i64  %"tmp#0##0")  
  %1 = extractvalue {i64, i64, i1} %0, 0 
  %2 = extractvalue {i64, i64, i1} %0, 1 
  %3 = extractvalue {i64, i64, i1} %0, 2 
  br i1 %3, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_for.using_irange_reverse#cont#1<0>"(i64  %2)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.using_next<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 4, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 3, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 2, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %8, i64* %17 
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 1, i64* %21 
  %22 = add   i64 %20, 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 %14, i64* %23 
  tail call fastcc  void  @"stmt_for.using_next#cont#1<0>"(i64  %20)  
  ret void 
}


define external fastcc  void @"stmt_for.using_next#cont#1<0>"(i64  %"tmp#5##0")    {
entry:
  %0 = icmp ne i64 %"tmp#5##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"tmp#5##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"tmp#5##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp eq i64 %2, 3 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  ret void 
if.then1:
  musttail call fastcc  void  @"stmt_for.using_next#cont#1<0>"(i64  %5)  
  ret void 
if.else1:
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_for.using_next#cont#1<0>"(i64  %5)  
  ret void 
}


define external fastcc  void @"stmt_for.using_unless<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 4, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 3, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 2, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %8, i64* %17 
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 1, i64* %21 
  %22 = add   i64 %20, 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 %14, i64* %23 
  tail call fastcc  void  @"stmt_for.using_unless#cont#1<0>"(i64  %20)  
  ret void 
}


define external fastcc  void @"stmt_for.using_unless#cont#1<0>"(i64  %"tmp#5##0")    {
entry:
  %0 = icmp ne i64 %"tmp#5##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"tmp#5##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"tmp#5##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp slt i64 %2, 3 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  ret void 
if.then1:
  musttail call fastcc  void  @"stmt_for.using_unless#cont#1<0>"(i64  %5)  
  ret void 
if.else1:
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_for.using_unless#cont#1<0>"(i64  %5)  
  ret void 
}


define external fastcc  void @"stmt_for.using_until<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 4, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 3, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 2, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %8, i64* %17 
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 1, i64* %21 
  %22 = add   i64 %20, 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 %14, i64* %23 
  tail call fastcc  void  @"stmt_for.using_until#cont#1<0>"(i64  %20)  
  ret void 
}


define external fastcc  void @"stmt_for.using_until#cont#1<0>"(i64  %"tmp#5##0")    {
entry:
  %0 = icmp ne i64 %"tmp#5##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"tmp#5##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"tmp#5##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp eq i64 %2, 3 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  ret void 
if.then1:
  ret void 
if.else1:
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_for.using_until#cont#1<0>"(i64  %5)  
  ret void 
}


define external fastcc  void @"stmt_for.using_when<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 4, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 3, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 2, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %8, i64* %17 
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 1, i64* %21 
  %22 = add   i64 %20, 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 %14, i64* %23 
  tail call fastcc  void  @"stmt_for.using_when#cont#1<0>"(i64  %20)  
  ret void 
}


define external fastcc  void @"stmt_for.using_when#cont#1<0>"(i64  %"tmp#5##0")    {
entry:
  %0 = icmp ne i64 %"tmp#5##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"tmp#5##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"tmp#5##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp slt i64 %2, 3 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  ret void 
if.then1:
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_for.using_when#cont#1<0>"(i64  %5)  
  ret void 
if.else1:
  musttail call fastcc  void  @"stmt_for.using_when#cont#1<0>"(i64  %5)  
  ret void 
}


define external fastcc  void @"stmt_for.using_while<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 4, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 3, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 2, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %8, i64* %17 
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 1, i64* %21 
  %22 = add   i64 %20, 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 %14, i64* %23 
  tail call fastcc  void  @"stmt_for.using_while#cont#1<0>"(i64  %20)  
  ret void 
}


define external fastcc  void @"stmt_for.using_while#cont#1<0>"(i64  %"tmp#5##0")    {
entry:
  %0 = icmp ne i64 %"tmp#5##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"tmp#5##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"tmp#5##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp slt i64 %2, 3 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  ret void 
if.then1:
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_for.using_while#cont#1<0>"(i64  %5)  
  ret void 
if.else1:
  ret void 
}


define external fastcc  void @"stmt_for.using_xrange<0>"() alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"stmt_for.xrange<0>"(i64  1, i64  1, i64  10)  
  tail call fastcc  void  @"stmt_for.using_xrange#cont#1<0>"(i64  %0)  
  ret void 
}


define external fastcc  void @"stmt_for.using_xrange#cont#1<0>"(i64  %"tmp#0##0")    {
entry:
  %0 = tail call fastcc  {i64, i64, i1}  @"stmt_for.int_sequence.[|]<0>"(i64  %"tmp#0##0")  
  %1 = extractvalue {i64, i64, i1} %0, 0 
  %2 = extractvalue {i64, i64, i1} %0, 1 
  %3 = extractvalue {i64, i64, i1} %0, 2 
  br i1 %3, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_for.using_xrange#cont#1<0>"(i64  %2)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_for.using_xrange_reverse<0>"() alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"stmt_for.xrange<0>"(i64  10, i64  -1, i64  1)  
  tail call fastcc  void  @"stmt_for.using_xrange_reverse#cont#1<0>"(i64  %0)  
  ret void 
}


define external fastcc  void @"stmt_for.using_xrange_reverse#cont#1<0>"(i64  %"tmp#0##0")    {
entry:
  %0 = tail call fastcc  {i64, i64, i1}  @"stmt_for.int_sequence.[|]<0>"(i64  %"tmp#0##0")  
  %1 = extractvalue {i64, i64, i1} %0, 0 
  %2 = extractvalue {i64, i64, i1} %0, 1 
  %3 = extractvalue {i64, i64, i1} %0, 2 
  br i1 %3, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_for.using_xrange_reverse#cont#1<0>"(i64  %2)  
  ret void 
if.else:
  ret void 
}


define external fastcc  i64 @"stmt_for.xrange<0>"(i64  %"start##0", i64  %"stride##0", i64  %"end##0")    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"start##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"stride##0", i64* %5 
  %6 = add   i64 %2, 16 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"end##0", i64* %7 
  ret i64 %2 
}
--------------------------------------------------
 Module stmt_for.int_sequence
  representation  : address
  public submods  : 
  public resources: 
  public procs    : stmt_for.int_sequence.=<0>
                    stmt_for.int_sequence.[|]<0>
                    stmt_for.int_sequence.end<0>
                    stmt_for.int_sequence.end<1>
                    stmt_for.int_sequence.int_sequence<0>
                    stmt_for.int_sequence.int_sequence<1>
                    stmt_for.int_sequence.start<0>
                    stmt_for.int_sequence.start<1>
                    stmt_for.int_sequence.stride<0>
                    stmt_for.int_sequence.stride<1>
                    stmt_for.int_sequence.~=<0>
  imports         : use stmt_for
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: stmt_for.int_sequence.=<0>
=(#left##0:stmt_for.int_sequence, #right##0:stmt_for.int_sequence, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#start##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#left##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#stride##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(~#left##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#end##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#right##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#start##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#right##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#stride##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(~#right##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#end##0:wybe.int) @stmt_for:nn:nn
    foreign llvm icmp_eq(~#left#start##0:wybe.int, ~#right#start##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#stride##0:wybe.int, ~#right#stride##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#end##0:wybe.int, ~#right#end##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc [|] > public (0 calls)
0: stmt_for.int_sequence.[|]<0>
[|](?value##0:wybe.int, ?rest##0:stmt_for.int_sequence, current##0:stmt_for.int_sequence, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(current##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?s##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(current##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?st##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(~current##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?en##0:wybe.int) @stmt_for:nn:nn
    foreign llvm icmp_slt(st##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm icmp_sgt(en##0:wybe.int, s##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
        case ~tmp#3##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?value##0:wybe.int)
            foreign llvm move(undef:stmt_for.int_sequence, ?rest##0:stmt_for.int_sequence)

        1:
            stmt_for.int_sequence.[|]#cont#1<0>(~en##0:wybe.int, ~s##0:wybe.int, ~st##0:wybe.int, ?value##0:wybe.int, ?rest##0:stmt_for.int_sequence, ?#success##0:wybe.bool) #5


    1:
        foreign llvm icmp_slt(en##0:wybe.int, s##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?value##0:wybe.int)
            foreign llvm move(undef:stmt_for.int_sequence, ?rest##0:stmt_for.int_sequence)

        1:
            stmt_for.int_sequence.[|]#cont#1<0>(~en##0:wybe.int, ~s##0:wybe.int, ~st##0:wybe.int, ?value##0:wybe.int, ?rest##0:stmt_for.int_sequence, ?#success##0:wybe.bool) #3




proc [|]#cont#1 > (2 calls)
0: stmt_for.int_sequence.[|]#cont#1<0>
[|]#cont#1(en##0:wybe.int, s##0:wybe.int, st##0:wybe.int, ?value##0:wybe.int, ?rest##0:stmt_for.int_sequence, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(s##0:wybe.int, ?value##0:wybe.int) @stmt_for:nn:nn
    foreign llvm add(~s##0:wybe.int, st##0:wybe.int, ?tmp#1##0:wybe.int) @int:nn:nn
    foreign lpvm alloc(24:wybe.int, ?tmp#7##0:stmt_for.int_sequence) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#7##0:stmt_for.int_sequence, ?tmp#8##0:stmt_for.int_sequence, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#8##0:stmt_for.int_sequence, ?tmp#9##0:stmt_for.int_sequence, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~st##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm mutate(~tmp#9##0:stmt_for.int_sequence, ?rest##0:stmt_for.int_sequence, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~en##0:wybe.int) @stmt_for:nn:nn
    foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc end > public {inline} (0 calls)
0: stmt_for.int_sequence.end<0>
end(#rec##0:stmt_for.int_sequence, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @stmt_for:nn:nn
proc end > public {inline} (0 calls)
1: stmt_for.int_sequence.end<1>
end(#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @stmt_for:nn:nn


proc int_sequence > public {inline} (1 calls)
0: stmt_for.int_sequence.int_sequence<0>
int_sequence(start##0:wybe.int, stride##0:wybe.int, end##0:wybe.int, ?#result##0:stmt_for.int_sequence)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:stmt_for.int_sequence) @stmt_for:nn:nn
    foreign lpvm mutate(~#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~start##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm mutate(~#rec##1:stmt_for.int_sequence, ?#rec##2:stmt_for.int_sequence, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~stride##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm mutate(~#rec##2:stmt_for.int_sequence, ?#result##0:stmt_for.int_sequence, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~end##0:wybe.int) @stmt_for:nn:nn
proc int_sequence > public {inline} (16 calls)
1: stmt_for.int_sequence.int_sequence<1>
int_sequence(?start##0:wybe.int, ?stride##0:wybe.int, ?end##0:wybe.int, #result##0:stmt_for.int_sequence)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?start##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#result##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?stride##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(~#result##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?end##0:wybe.int) @stmt_for:nn:nn


proc start > public {inline} (0 calls)
0: stmt_for.int_sequence.start<0>
start(#rec##0:stmt_for.int_sequence, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @stmt_for:nn:nn
proc start > public {inline} (0 calls)
1: stmt_for.int_sequence.start<1>
start(#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @stmt_for:nn:nn


proc stride > public {inline} (0 calls)
0: stmt_for.int_sequence.stride<0>
stride(#rec##0:stmt_for.int_sequence, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @stmt_for:nn:nn
proc stride > public {inline} (0 calls)
1: stmt_for.int_sequence.stride<1>
stride(#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:stmt_for.int_sequence, ?#rec##1:stmt_for.int_sequence, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @stmt_for:nn:nn


proc ~= > public {inline} (0 calls)
0: stmt_for.int_sequence.~=<0>
~=(#left##0:stmt_for.int_sequence, #right##0:stmt_for.int_sequence, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#left##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(~#left##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#right##0:stmt_for.int_sequence, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(#right##0:stmt_for.int_sequence, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @stmt_for:nn:nn
    foreign lpvm access(~#right##0:stmt_for.int_sequence, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @stmt_for:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#9##0:wybe.bool) @int:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#7##0:wybe.int, ?tmp#10##0:wybe.bool) @int:nn:nn
        case ~tmp#10##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp#5##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)



  LLVM code       :

; ModuleID = 'stmt_for.int_sequence'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"stmt_for.int_sequence.=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"#left##0", 16 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = load  i64, i64* %11 
  %13 = add   i64 %"#right##0", 16 
  %14 = inttoptr i64 %13 to i64* 
  %15 = load  i64, i64* %14 
  %16 = icmp eq i64 %1, %9 
  br i1 %16, label %if.then, label %if.else 
if.then:
  %17 = icmp eq i64 %4, %12 
  br i1 %17, label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %18 = icmp eq i64 %7, %15 
  ret i1 %18 
if.else1:
  ret i1 0 
}


define external fastcc  {i64, i64, i1} @"stmt_for.int_sequence.[|]<0>"(i64  %"current##0")    {
entry:
  %0 = inttoptr i64 %"current##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"current##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"current##0", 16 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  %8 = icmp slt i64 %4, 0 
  br i1 %8, label %if.then, label %if.else 
if.then:
  %9 = icmp slt i64 %7, %1 
  br i1 %9, label %if.then1, label %if.else1 
if.else:
  %20 = icmp sgt i64 %7, %1 
  br i1 %20, label %if.then2, label %if.else2 
if.then1:
  %10 = tail call fastcc  {i64, i64, i1}  @"stmt_for.int_sequence.[|]#cont#1<0>"(i64  %7, i64  %1, i64  %4)  
  %11 = extractvalue {i64, i64, i1} %10, 0 
  %12 = extractvalue {i64, i64, i1} %10, 1 
  %13 = extractvalue {i64, i64, i1} %10, 2 
  %14 = insertvalue {i64, i64, i1} undef, i64 %11, 0 
  %15 = insertvalue {i64, i64, i1} %14, i64 %12, 1 
  %16 = insertvalue {i64, i64, i1} %15, i1 %13, 2 
  ret {i64, i64, i1} %16 
if.else1:
  %17 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %18 = insertvalue {i64, i64, i1} %17, i64 undef, 1 
  %19 = insertvalue {i64, i64, i1} %18, i1 0, 2 
  ret {i64, i64, i1} %19 
if.then2:
  %21 = tail call fastcc  {i64, i64, i1}  @"stmt_for.int_sequence.[|]#cont#1<0>"(i64  %7, i64  %1, i64  %4)  
  %22 = extractvalue {i64, i64, i1} %21, 0 
  %23 = extractvalue {i64, i64, i1} %21, 1 
  %24 = extractvalue {i64, i64, i1} %21, 2 
  %25 = insertvalue {i64, i64, i1} undef, i64 %22, 0 
  %26 = insertvalue {i64, i64, i1} %25, i64 %23, 1 
  %27 = insertvalue {i64, i64, i1} %26, i1 %24, 2 
  ret {i64, i64, i1} %27 
if.else2:
  %28 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %29 = insertvalue {i64, i64, i1} %28, i64 undef, 1 
  %30 = insertvalue {i64, i64, i1} %29, i1 0, 2 
  ret {i64, i64, i1} %30 
}


define external fastcc  {i64, i64, i1} @"stmt_for.int_sequence.[|]#cont#1<0>"(i64  %"en##0", i64  %"s##0", i64  %"st##0")    {
entry:
  %0 = add   i64 %"s##0", %"st##0" 
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  store  i64 %0, i64* %4 
  %5 = add   i64 %3, 8 
  %6 = inttoptr i64 %5 to i64* 
  store  i64 %"st##0", i64* %6 
  %7 = add   i64 %3, 16 
  %8 = inttoptr i64 %7 to i64* 
  store  i64 %"en##0", i64* %8 
  %9 = insertvalue {i64, i64, i1} undef, i64 %"s##0", 0 
  %10 = insertvalue {i64, i64, i1} %9, i64 %3, 1 
  %11 = insertvalue {i64, i64, i1} %10, i1 1, 2 
  ret {i64, i64, i1} %11 
}


define external fastcc  i64 @"stmt_for.int_sequence.end<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 16 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"stmt_for.int_sequence.end<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 16 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i64 @"stmt_for.int_sequence.int_sequence<0>"(i64  %"start##0", i64  %"stride##0", i64  %"end##0") alwaysinline   {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"start##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"stride##0", i64* %5 
  %6 = add   i64 %2, 16 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"end##0", i64* %7 
  ret i64 %2 
}


define external fastcc  {i64, i64, i64} @"stmt_for.int_sequence.int_sequence<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#result##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"#result##0", 16 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  %8 = insertvalue {i64, i64, i64} undef, i64 %1, 0 
  %9 = insertvalue {i64, i64, i64} %8, i64 %4, 1 
  %10 = insertvalue {i64, i64, i64} %9, i64 %7, 2 
  ret {i64, i64, i64} %10 
}


define external fastcc  i64 @"stmt_for.int_sequence.start<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = load  i64, i64* %0 
  ret i64 %1 
}


define external fastcc  i64 @"stmt_for.int_sequence.start<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  store  i64 %"#field##0", i64* %6 
  ret i64 %2 
}


define external fastcc  i64 @"stmt_for.int_sequence.stride<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"stmt_for.int_sequence.stride<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i1 @"stmt_for.int_sequence.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"#left##0", 16 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = load  i64, i64* %11 
  %13 = add   i64 %"#right##0", 16 
  %14 = inttoptr i64 %13 to i64* 
  %15 = load  i64, i64* %14 
  %16 = icmp eq i64 %1, %9 
  br i1 %16, label %if.then, label %if.else 
if.then:
  %17 = icmp eq i64 %4, %12 
  br i1 %17, label %if.then1, label %if.else1 
if.else:
  %21 = xor i1 0, 1 
  ret i1 %21 
if.then1:
  %18 = icmp eq i64 %7, %15 
  %19 = xor i1 %18, 1 
  ret i1 %19 
if.else1:
  %20 = xor i1 0, 1 
  ret i1 %20 
}

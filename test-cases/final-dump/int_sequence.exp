======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module int_sequence
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : int_sequence.<0>
                    int_sequence...<0>
                    int_sequence...<1>
                    int_sequence.=<0>
                    int_sequence.[|]<0>
                    int_sequence.lower<0>
                    int_sequence.lower<1>
                    int_sequence.upper<0>
                    int_sequence.upper<1>
                    int_sequence.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: int_sequence.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(1,(int_sequence.#cont#1<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#6##0:int_sequence) @int_sequence:nn:nn
    foreign lpvm mutate(~tmp#6##0:int_sequence, ?tmp#7##0:int_sequence, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int) @int_sequence:nn:nn
    foreign lpvm mutate(~tmp#7##0:int_sequence, ?tmp#1##0:int_sequence, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 10:wybe.int) @int_sequence:nn:nn
    int_sequence.#cont#1<0>[410bae77d3](~tmp#1##0:int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @int_sequence:nn:nn


proc #cont#1 > {semipure} (2 calls)
0: int_sequence.#cont#1<0>
#cont#1(tmp#0##0:int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(0,(int_sequence.[|]<0>,fromList [NonAliasedParamCond 2 [0]])),(2,(int_sequence.#cont#1<0>,fromList [NonAliasedParamCond 0 []]))]
    int_sequence.[|]<0>(?i##0:wybe.int, ?tmp#0##1:int_sequence, ~tmp#0##0:int_sequence, ?tmp#3##0:wybe.bool) #0 @int_sequence:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @int_sequence:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @int_sequence:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @int_sequence:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int_sequence:nn:nn
        int_sequence.#cont#1<0>[410bae77d3](~tmp#0##1:int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @int_sequence:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    int_sequence.[|]<0>[785a827a1b](?i##0:wybe.int, ?tmp#0##1:int_sequence, ~tmp#0##0:int_sequence, ?tmp#3##0:wybe.bool) #0 @int_sequence:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @int_sequence:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @int_sequence:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @int_sequence:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int_sequence:nn:nn
        int_sequence.#cont#1<0>[410bae77d3](~tmp#0##1:int_sequence)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @int_sequence:nn:nn



proc .. > public {inline} (2 calls)
0: int_sequence...<0>
..(lower##0:wybe.int, upper##0:wybe.int, ?#result##0:int_sequence)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:int_sequence) @int_sequence:nn:nn
    foreign lpvm mutate(~#rec##0:int_sequence, ?#rec##1:int_sequence, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lower##0:wybe.int) @int_sequence:nn:nn
    foreign lpvm mutate(~#rec##1:int_sequence, ?#result##0:int_sequence, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~upper##0:wybe.int) @int_sequence:nn:nn
proc .. > public {inline} (6 calls)
1: int_sequence...<1>
..(?lower##0:wybe.int, ?upper##0:wybe.int, #result##0:int_sequence)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:int_sequence, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?lower##0:wybe.int) @int_sequence:nn:nn
    foreign lpvm access(~#result##0:int_sequence, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?upper##0:wybe.int) @int_sequence:nn:nn


proc = > public {inline} (1 calls)
0: int_sequence.=<0>
=(#left##0:int_sequence, #right##0:int_sequence, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:int_sequence, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#lower##0:wybe.int) @int_sequence:nn:nn
    foreign lpvm access(~#left##0:int_sequence, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#upper##0:wybe.int) @int_sequence:nn:nn
    foreign lpvm access(#right##0:int_sequence, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#lower##0:wybe.int) @int_sequence:nn:nn
    foreign lpvm access(~#right##0:int_sequence, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#upper##0:wybe.int) @int_sequence:nn:nn
    foreign llvm icmp_eq(~#left#lower##0:wybe.int, ~#right#lower##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#upper##0:wybe.int, ~#right#upper##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



proc [|] > public (3 calls)
0: int_sequence.[|]<0>
[|](?head##0:wybe.int, ?tail##0:int_sequence, seq##0:int_sequence, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 2]
    foreign lpvm access(seq##0:int_sequence, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @int_sequence:nn:nn
    foreign lpvm access(~seq##0:int_sequence, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @int_sequence:nn:nn
    foreign llvm icmp_sle(tmp#0##0:wybe.int, tmp#1##0:wybe.int, ?tmp#7##0:wybe.bool) @int_sequence:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head##0:wybe.int)
        foreign llvm move(undef:int_sequence, ?tail##0:int_sequence)

    1:
        foreign llvm move(tmp#0##0:wybe.int, ?head##0:wybe.int) @int_sequence:nn:nn
        foreign llvm add(~tmp#0##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @int_sequence:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#19##0:int_sequence) @int_sequence:nn:nn
        foreign lpvm mutate(~tmp#19##0:int_sequence, ?tmp#20##0:int_sequence, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#4##0:wybe.int) @int_sequence:nn:nn
        foreign lpvm mutate(~tmp#20##0:int_sequence, ?tail##0:int_sequence, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @int_sequence:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

 [785a827a1b] [NonAliasedParam 2] :
    foreign lpvm access(seq##0:int_sequence, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @int_sequence:nn:nn
    foreign lpvm access(seq##0:int_sequence, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @int_sequence:nn:nn
    foreign llvm icmp_sle(tmp#0##0:wybe.int, tmp#1##0:wybe.int, ?tmp#7##0:wybe.bool) @int_sequence:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head##0:wybe.int)
        foreign llvm move(undef:int_sequence, ?tail##0:int_sequence)

    1:
        foreign llvm move(tmp#0##0:wybe.int, ?head##0:wybe.int) @int_sequence:nn:nn
        foreign llvm add(~tmp#0##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @int_sequence:nn:nn
        foreign lpvm mutate(~seq##0:int_sequence, ?tmp#20##0:int_sequence, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#4##0:wybe.int) @int_sequence:nn:nn
        foreign lpvm mutate(~tmp#20##0:int_sequence, ?tail##0:int_sequence, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @int_sequence:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc lower > public {inline} (5 calls)
0: int_sequence.lower<0>
lower(#rec##0:int_sequence, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:int_sequence, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @int_sequence:nn:nn
proc lower > public {inline} (0 calls)
1: int_sequence.lower<1>
lower(#rec##0:int_sequence, ?#rec##1:int_sequence, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:int_sequence, ?#rec##1:int_sequence, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @int_sequence:nn:nn


proc upper > public {inline} (4 calls)
0: int_sequence.upper<0>
upper(#rec##0:int_sequence, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:int_sequence, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @int_sequence:nn:nn
proc upper > public {inline} (0 calls)
1: int_sequence.upper<1>
upper(#rec##0:int_sequence, ?#rec##1:int_sequence, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:int_sequence, ?#rec##1:int_sequence, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @int_sequence:nn:nn


proc ~= > public {inline} (0 calls)
0: int_sequence.~=<0>
~=(#left##0:int_sequence, #right##0:int_sequence, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:int_sequence, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @int_sequence:nn:nn
    foreign lpvm access(~#left##0:int_sequence, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @int_sequence:nn:nn
    foreign lpvm access(#right##0:int_sequence, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @int_sequence:nn:nn
    foreign lpvm access(~#right##0:int_sequence, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @int_sequence:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'int_sequence'

source_filename = "!ROOT!/final-dump/int_sequence.wybe"
target triple    ????


declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"int_sequence.<0>"() {
  %"tmp#8##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#6##0" = ptrtoint ptr %"tmp#8##0" to i64
  %"tmp#9##0" = inttoptr i64 %"tmp#6##0" to ptr
  store i64 1, ptr %"tmp#9##0"
  %"tmp#10##0" = add i64 %"tmp#6##0", 8
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  store i64 10, ptr %"tmp#11##0"
  tail call fastcc void @"int_sequence.#cont#1<0>[410bae77d3]"(i64 %"tmp#6##0")
  ret void
}

define external fastcc void @"int_sequence.#cont#1<0>"(i64 %"tmp#0##0") {
  %"tmp#8##0" = tail call fastcc {i64, i64, i1} @"int_sequence.[|]<0>"(i64 %"tmp#0##0")
  %"i##0" = extractvalue {i64, i64, i1}%"tmp#8##0", 0
  %"tmp#0##1" = extractvalue {i64, i64, i1}%"tmp#8##0", 1
  %"tmp#3##0" = extractvalue {i64, i64, i1}%"tmp#8##0", 2
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"int_sequence.#cont#1<0>[410bae77d3]"(i64 %"tmp#0##1")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"int_sequence.#cont#1<0>[410bae77d3]"(i64 %"tmp#0##0") {
  %"tmp#8##0" = tail call fastcc {i64, i64, i1} @"int_sequence.[|]<0>[785a827a1b]"(i64 %"tmp#0##0")
  %"i##0" = extractvalue {i64, i64, i1}%"tmp#8##0", 0
  %"tmp#0##1" = extractvalue {i64, i64, i1}%"tmp#8##0", 1
  %"tmp#3##0" = extractvalue {i64, i64, i1}%"tmp#8##0", 2
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"int_sequence.#cont#1<0>[410bae77d3]"(i64 %"tmp#0##1")
  ret void
if.else.0:
  ret void
}

define external fastcc i64 @"int_sequence...<0>"(i64 %"lower##0", i64 %"upper##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"lower##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"upper##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64} @"int_sequence...<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#6##0" = insertvalue {i64, i64} %"tmp#5##0", i64 %"tmp#4##0", 1
  ret {i64, i64} %"tmp#6##0"
}

define external fastcc i1 @"int_sequence.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#9##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#lower##0" = load i64, ptr %"tmp#9##0"
  %"tmp#10##0" = add i64 %"#left##0", 8
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"#left#upper##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#lower##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#right##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#right#upper##0" = load i64, ptr %"tmp#14##0"
  %"tmp#1##0" = icmp eq i64 %"#left#lower##0", %"#right#lower##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#15##0" = icmp eq i64 %"#left#upper##0", %"#right#upper##0"
  ret i1 %"tmp#15##0"
if.else.0:
  ret i1 0
}

define external fastcc {i64, i64, i1} @"int_sequence.[|]<0>"(i64 %"seq##0") {
  %"tmp#21##0" = inttoptr i64 %"seq##0" to ptr
  %"tmp#0##0" = load i64, ptr %"tmp#21##0"
  %"tmp#22##0" = add i64 %"seq##0", 8
  %"tmp#23##0" = inttoptr i64 %"tmp#22##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#23##0"
  %"tmp#7##0" = icmp sle i64 %"tmp#0##0", %"tmp#1##0"
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#4##0" = add i64 %"tmp#0##0", 1
  %"tmp#24##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#19##0" = ptrtoint ptr %"tmp#24##0" to i64
  %"tmp#25##0" = inttoptr i64 %"tmp#19##0" to ptr
  store i64 %"tmp#4##0", ptr %"tmp#25##0"
  %"tmp#26##0" = add i64 %"tmp#19##0", 8
  %"tmp#27##0" = inttoptr i64 %"tmp#26##0" to ptr
  store i64 %"tmp#1##0", ptr %"tmp#27##0"
  %"tmp#28##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#0##0", 0
  %"tmp#29##0" = insertvalue {i64, i64, i1} %"tmp#28##0", i64 %"tmp#19##0", 1
  %"tmp#30##0" = insertvalue {i64, i64, i1} %"tmp#29##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#30##0"
if.else.0:
  %"tmp#31##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#32##0" = insertvalue {i64, i64, i1} %"tmp#31##0", i64 undef, 1
  %"tmp#33##0" = insertvalue {i64, i64, i1} %"tmp#32##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#33##0"
}

define external fastcc {i64, i64, i1} @"int_sequence.[|]<0>[785a827a1b]"(i64 %"seq##0") {
  %"tmp#21##0" = inttoptr i64 %"seq##0" to ptr
  %"tmp#0##0" = load i64, ptr %"tmp#21##0"
  %"tmp#22##0" = add i64 %"seq##0", 8
  %"tmp#23##0" = inttoptr i64 %"tmp#22##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#23##0"
  %"tmp#7##0" = icmp sle i64 %"tmp#0##0", %"tmp#1##0"
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#4##0" = add i64 %"tmp#0##0", 1
  %"tmp#24##0" = inttoptr i64 %"seq##0" to ptr
  store i64 %"tmp#4##0", ptr %"tmp#24##0"
  %"tmp#25##0" = add i64 %"seq##0", 8
  %"tmp#26##0" = inttoptr i64 %"tmp#25##0" to ptr
  store i64 %"tmp#1##0", ptr %"tmp#26##0"
  %"tmp#27##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#0##0", 0
  %"tmp#28##0" = insertvalue {i64, i64, i1} %"tmp#27##0", i64 %"seq##0", 1
  %"tmp#29##0" = insertvalue {i64, i64, i1} %"tmp#28##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#29##0"
if.else.0:
  %"tmp#30##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#31##0" = insertvalue {i64, i64, i1} %"tmp#30##0", i64 undef, 1
  %"tmp#32##0" = insertvalue {i64, i64, i1} %"tmp#31##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#32##0"
}

define external fastcc i64 @"int_sequence.lower<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"int_sequence.lower<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"int_sequence.upper<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"int_sequence.upper<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i1 @"int_sequence.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#8##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#8##0"
  %"tmp#9##0" = add i64 %"#left##0", 8
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#10##0"
  %"tmp#11##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"#right##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#13##0"
  %"tmp#7##0" = icmp eq i64 %"tmp#3##0", %"tmp#5##0"
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#0##0" = icmp eq i64 %"tmp#4##0", %"tmp#6##0"
  %"tmp#14##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = xor i1 0, 1
  ret i1 %"tmp#15##0"
}

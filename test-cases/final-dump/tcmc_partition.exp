======================================================================
AFTER EVERYTHING:
 Module tcmc_partition
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : tcmc_partition.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: tcmc_partition.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(10,(tcmc_partition.partition<0>,fromList [NonAliasedParamCond 1 []]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#14##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#14##0:wybe.list(T), ?tmp#15##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 7:T) @list:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#7##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#18##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#18##0:wybe.list(T), ?tmp#19##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 6:T) @list:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#6##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#7##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#22##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#22##0:wybe.list(T), ?tmp#23##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 5:T) @list:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#5##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#26##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#26##0:wybe.list(T), ?tmp#27##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#27##0:wybe.list(T), ?tmp#4##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#30##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#30##0:wybe.list(T), ?tmp#31##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#31##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#4##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#34##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#34##0:wybe.list(T), ?tmp#35##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 9:T) @list:nn:nn
    foreign lpvm mutate(~tmp#35##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#38##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#38##0:wybe.list(T), ?tmp#39##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#39##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#42##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#42##0:wybe.list(T), ?tmp#43##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#43##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @list:nn:nn
    wybe.list.print<0>(tcmc_partition.gen#1<0><>:{resource}(T), tmp#0##0:wybe.list(T))<Everything; Everything> #15 @list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#46##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#46##0:wybe.phantom, ?tmp#47##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#47##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    tcmc_partition.partition<0>[6dacb8fd25](tcmc_partition.gen#2<1><>:(wybe.int, ?wybe.bool), ~tmp#0##0:wybe.list(wybe.int), outByReference yes##0:wybe.list(wybe.int), outByReference no##0:wybe.list(wybe.int)) #10 @tcmc_partition:nn:nn
    wybe.list.print<0>(tcmc_partition.gen#1<0><>:{resource}(wybe.int), ~yes##0:wybe.list(wybe.int))<Everything; Everything> #11 @tcmc_partition:nn:nn
    wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #12 @tcmc_partition:nn:nn
    wybe.list.print<0>(tcmc_partition.gen#1<0><>:{resource}(wybe.int), ~no##0:wybe.list(wybe.int))<Everything; Everything> #13 @tcmc_partition:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#48##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#48##0:wybe.phantom, ?tmp#49##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#49##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


gen#1 > {inline} (3 calls)
0: tcmc_partition.gen#1<0>
gen#1(x##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~x##0:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn


gen#2 > {inline} (1 calls)
0: tcmc_partition.gen#2<0>
gen#2(anon#1#1##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sge(~anon#1#1##0:wybe.int, 3:wybe.int, ?#success##0:wybe.bool) @int:nn:nn
gen#2 > {inline} (1 calls)
1: tcmc_partition.gen#2<1>
gen#2(anon#1#1##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sge(~anon#1#1##0:wybe.int, 3:wybe.int, ?#success##0:wybe.bool) @int:nn:nn


partition > (3 calls)
0: tcmc_partition.partition<0>[6dacb8fd25]
partition(p##0:(T, ?wybe.bool), l##0:wybe.list(T), outByReference yes##0:wybe.list(T), outByReference no##0:wybe.list(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 1]
  MultiSpeczDepInfo: [(2,(tcmc_partition.partition<0>,fromList [NonAliasedParamCond 1 [1]])),(4,(tcmc_partition.partition<0>,fromList [NonAliasedParamCond 1 [1]]))]
    foreign llvm icmp_ne(l##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.list(T), ?yes##0:wybe.list(T)) @tcmc_partition:nn:nn
        foreign llvm move(0:wybe.list(T), ?no##0:wybe.list(T)) @tcmc_partition:nn:nn

    1:
        foreign lpvm access(l##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @list:nn:nn
        foreign lpvm access(~l##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:wybe.list(T)) @list:nn:nn
        p##0:(T, ?wybe.bool)(h##0:T, ?tmp#4##0:wybe.bool) #1 @tcmc_partition:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            foreign lpvm alloc(16:wybe.int, ?tmp#10##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#10##0:wybe.list(T), ?tmp#11##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @list:nn:nn
            tcmc_partition.partition<0>(~p##0:(T, ?wybe.bool), ~t##0:wybe.list(T), outByReference yes##0:wybe.list(T), outByReference no0##0:wybe.list(T)) #4 @tcmc_partition:nn:nn
            foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?no##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference no0##0:wybe.list(T)) @list:nn:nn

        1:
            foreign lpvm alloc(16:wybe.int, ?tmp#10##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#10##0:wybe.list(T), ?tmp#11##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @list:nn:nn
            tcmc_partition.partition<0>(~p##0:(T, ?wybe.bool), ~t##0:wybe.list(T), outByReference yes0##0:wybe.list(T), outByReference no##0:wybe.list(T)) #2 @tcmc_partition:nn:nn
            foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?yes##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference yes0##0:wybe.list(T)) @list:nn:nn


 [6dacb8fd25] [NonAliasedParam 1] :
    foreign llvm icmp_ne(l##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.list(T), ?yes##0:wybe.list(T)) @tcmc_partition:nn:nn
        foreign llvm move(0:wybe.list(T), ?no##0:wybe.list(T)) @tcmc_partition:nn:nn

    1:
        foreign lpvm access(l##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @list:nn:nn
        foreign lpvm access(l##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:wybe.list(T)) @list:nn:nn
        p##0:(T, ?wybe.bool)(~h##0:T, ?tmp#4##0:wybe.bool) #1 @tcmc_partition:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            tcmc_partition.partition<0>[6dacb8fd25](~p##0:(T, ?wybe.bool), ~t##0:wybe.list(T), outByReference yes##0:wybe.list(T), outByReference no0##0:wybe.list(T)) #4 @tcmc_partition:nn:nn
            foreign lpvm mutate(~l##0:wybe.list(T), ?no##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference no0##0:wybe.list(T)) @list:nn:nn

        1:
            tcmc_partition.partition<0>[6dacb8fd25](~p##0:(T, ?wybe.bool), ~t##0:wybe.list(T), outByReference yes0##0:wybe.list(T), outByReference no##0:wybe.list(T)) #2 @tcmc_partition:nn:nn
            foreign lpvm mutate(~l##0:wybe.list(T), ?yes##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference yes0##0:wybe.list(T)) @list:nn:nn



  LLVM code       :

; ModuleID = 'tcmc_partition'


 


@tcmc_partition.3 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @tcmc_partition.2 to i64) }


@tcmc_partition.2 =    constant [?? x i8] c", \00"


@tcmc_partition.0 =    constant [1 x i64] [i64 ptrtoint (void (i64, i64)* @"tcmc_partition.gen#1<0>" to i64)]


@tcmc_partition.1 =    constant [1 x i64] [i64 ptrtoint (i64 (i64, i64)* @"tcmc_partition.gen#2<1>" to i64)]


declare external ccc  void @print_int(i64)    


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.list.print<0>"(i64, i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"tcmc_partition.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 7, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 6, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 5, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %8, i64* %17 
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 4, i64* %21 
  %22 = add   i64 %20, 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 %14, i64* %23 
  %24 = trunc i64 16 to i32  
  %25 = tail call ccc  i8*  @wybe_malloc(i32  %24)  
  %26 = ptrtoint i8* %25 to i64 
  %27 = inttoptr i64 %26 to i64* 
  store  i64 3, i64* %27 
  %28 = add   i64 %26, 8 
  %29 = inttoptr i64 %28 to i64* 
  store  i64 %20, i64* %29 
  %30 = trunc i64 16 to i32  
  %31 = tail call ccc  i8*  @wybe_malloc(i32  %30)  
  %32 = ptrtoint i8* %31 to i64 
  %33 = inttoptr i64 %32 to i64* 
  store  i64 9, i64* %33 
  %34 = add   i64 %32, 8 
  %35 = inttoptr i64 %34 to i64* 
  store  i64 %26, i64* %35 
  %36 = trunc i64 16 to i32  
  %37 = tail call ccc  i8*  @wybe_malloc(i32  %36)  
  %38 = ptrtoint i8* %37 to i64 
  %39 = inttoptr i64 %38 to i64* 
  store  i64 2, i64* %39 
  %40 = add   i64 %38, 8 
  %41 = inttoptr i64 %40 to i64* 
  store  i64 %32, i64* %41 
  %42 = trunc i64 16 to i32  
  %43 = tail call ccc  i8*  @wybe_malloc(i32  %42)  
  %44 = ptrtoint i8* %43 to i64 
  %45 = inttoptr i64 %44 to i64* 
  store  i64 1, i64* %45 
  %46 = add   i64 %44, 8 
  %47 = inttoptr i64 %46 to i64* 
  store  i64 %38, i64* %47 
  tail call fastcc  void  @"wybe.list.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @tcmc_partition.0, i32 0, i32 0) to i64), i64  %44)  
  tail call ccc  void  @putchar(i8  10)  
  %48 = alloca i64 
  %49 = alloca i64 
   call fastcc  void  @"tcmc_partition.partition<0>[6dacb8fd25]"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @tcmc_partition.1, i32 0, i32 0) to i64), i64  %44, i64*  %48, i64*  %49)  
  %50 = load  i64, i64* %48 
  %51 = load  i64, i64* %49 
  tail call fastcc  void  @"wybe.list.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @tcmc_partition.0, i32 0, i32 0) to i64), i64  %50)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @tcmc_partition.3, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.list.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @tcmc_partition.0, i32 0, i32 0) to i64), i64  %51)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"tcmc_partition.gen#1<0>"(i64  %"#env##0", i64  %"x##0")    {
entry:
  tail call ccc  void  @print_int(i64  %"x##0")  
  ret void 
}


define external fastcc  i1 @"tcmc_partition.gen#2<0>"(i64  %"anon#1#1##0")    {
entry:
  %0 = icmp sge i64 %"anon#1#1##0", 3 
  ret i1 %0 
}


define external fastcc  i64 @"tcmc_partition.gen#2<1>"(i64  %"#env##0", i64  %"anon#1#1##0")    {
entry:
  %0 = icmp sge i64 %"anon#1#1##0", 3 
  %1 = zext i1 %0 to i64  
  ret i64 %1 
}


define external fastcc  void @"tcmc_partition.partition<0>"(i64  %"p##0", i64  %"l##0", i64*  %"yes#ref##0", i64*  %"no#ref##0")    {
entry:
  %0 = icmp ne i64 %"l##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"l##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"l##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = inttoptr i64 %"p##0" to i64* 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %7 to i64 (i64, i64)* 
  %9 = tail call fastcc  i64  %8(i64  %"p##0", i64  %2)  
  %10 = trunc i64 %9 to i1  
  br i1 %10, label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"yes#ref##0" 
  store  i64 0, i64* %"no#ref##0" 
  ret void 
if.then1:
  %11 = trunc i64 16 to i32  
  %12 = tail call ccc  i8*  @wybe_malloc(i32  %11)  
  %13 = ptrtoint i8* %12 to i64 
  %14 = inttoptr i64 %13 to i64* 
  store  i64 %2, i64* %14 
  %15 = add   i64 %13, 8 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %13, i64* %"yes#ref##0" 
  musttail call fastcc  void  @"tcmc_partition.partition<0>"(i64  %"p##0", i64  %5, i64*  %16, i64*  %"no#ref##0")  
  ret void 
if.else1:
  %17 = trunc i64 16 to i32  
  %18 = tail call ccc  i8*  @wybe_malloc(i32  %17)  
  %19 = ptrtoint i8* %18 to i64 
  %20 = inttoptr i64 %19 to i64* 
  store  i64 %2, i64* %20 
  %21 = add   i64 %19, 8 
  %22 = inttoptr i64 %21 to i64* 
  store  i64 %19, i64* %"no#ref##0" 
  musttail call fastcc  void  @"tcmc_partition.partition<0>"(i64  %"p##0", i64  %5, i64*  %"yes#ref##0", i64*  %22)  
  ret void 
}


define external fastcc  void @"tcmc_partition.partition<0>[6dacb8fd25]"(i64  %"p##0", i64  %"l##0", i64*  %"yes#ref##0", i64*  %"no#ref##0")    {
entry:
  %0 = icmp ne i64 %"l##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"l##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"l##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = inttoptr i64 %"p##0" to i64* 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %7 to i64 (i64, i64)* 
  %9 = tail call fastcc  i64  %8(i64  %"p##0", i64  %2)  
  %10 = trunc i64 %9 to i1  
  br i1 %10, label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"yes#ref##0" 
  store  i64 0, i64* %"no#ref##0" 
  ret void 
if.then1:
  %11 = add   i64 %"l##0", 8 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 %"l##0", i64* %"yes#ref##0" 
  musttail call fastcc  void  @"tcmc_partition.partition<0>[6dacb8fd25]"(i64  %"p##0", i64  %5, i64*  %12, i64*  %"no#ref##0")  
  ret void 
if.else1:
  %13 = add   i64 %"l##0", 8 
  %14 = inttoptr i64 %13 to i64* 
  store  i64 %"l##0", i64* %"no#ref##0" 
  musttail call fastcc  void  @"tcmc_partition.partition<0>[6dacb8fd25]"(i64  %"p##0", i64  %5, i64*  %"yes#ref##0", i64*  %14)  
  ret void 
}

======================================================================
AFTER EVERYTHING:
 Module unbranch_inout
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : unbranch_inout.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: unbranch_inout.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom) @int:nn:nn
    foreign c print_int(1:wybe.int, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#3##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn


proc bug > {inline} (1 calls)
0: unbranch_inout.bug<0>
bug(i##0:wybe.int, ?i##1:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~i##0:wybe.int, ?i##1:wybe.int)


proc bug#cont#1 > {inline} (1 calls)
0: unbranch_inout.bug#cont#1<0>
bug#cont#1(i##0:wybe.int, [?i##0:wybe.int])<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []

  LLVM code       :

; ModuleID = 'unbranch_inout'


 


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"unbranch_inout.<0>"() alwaysinline   {
entry:
  tail call ccc  void  @print_int(i64  1)  
  ret void 
}


define external fastcc  i64 @"unbranch_inout.bug<0>"(i64  %"i##0") alwaysinline   {
entry:
  ret i64 %"i##0" 
}


define external fastcc  void @"unbranch_inout.bug#cont#1<0>"(i64  %"i##0") alwaysinline   {
entry:
  ret void 
}

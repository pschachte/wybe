======================================================================
AFTER EVERYTHING:
 Module decimal
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : decimal.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls) 
0: decimal.<0>
(*#globals##0:wybe.phantom, *?#globals##10:wybe.phantom):
  GlobalFlows: {<<wybe.io.io>>::{FlowIn, FlowOut}} 
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom, ~*#globals##0:wybe.phantom, ?*#globals##9:wybe.phantom)
    foreign c print_float(1.0e-2:wybe.float, ~%tmp#2##0:wybe.phantom, ?%tmp#4##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#4##0:wybe.phantom, ?%tmp#5##0:wybe.phantom) @io:nn:nn
    foreign c print_int(255:wybe.int, ~%tmp#5##0:wybe.phantom, ?%tmp#10##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#10##0:wybe.phantom, ?%tmp#11##0:wybe.phantom) @io:nn:nn
    foreign c print_int(42:wybe.int, ~%tmp#11##0:wybe.phantom, ?%tmp#16##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#16##0:wybe.phantom, ?%tmp#17##0:wybe.phantom) @io:nn:nn
    foreign c print_int(63:wybe.int, ~%tmp#17##0:wybe.phantom, ?%tmp#22##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#22##0:wybe.phantom, ?%tmp#23##0:wybe.phantom) @io:nn:nn
    foreign c print_float(1.0e100:wybe.float, ~%tmp#23##0:wybe.phantom, ?%tmp#28##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#28##0:wybe.phantom, ?%tmp#29##0:wybe.phantom) @io:nn:nn
    foreign c print_float(100.001:wybe.float, ~%tmp#29##0:wybe.phantom, ?%tmp#34##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#34##0:wybe.phantom, ?%tmp#35##0:wybe.phantom) @io:nn:nn
    foreign c print_float(50010.0:wybe.float, ~%tmp#35##0:wybe.phantom, ?%tmp#40##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#40##0:wybe.phantom, ?%tmp#41##0:wybe.phantom) @io:nn:nn
    foreign c print_int(1000000000:wybe.int, ~%tmp#41##0:wybe.phantom, ?%tmp#46##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#46##0:wybe.phantom, ?%tmp#47##0:wybe.phantom) @io:nn:nn
    foreign c print_float(5.0010000000000006e-14:wybe.float, ~%tmp#47##0:wybe.phantom, ?%tmp#52##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#52##0:wybe.phantom, ?%tmp#53##0:wybe.phantom) @io:nn:nn
    foreign c print_float(-10.0:wybe.float, ~%tmp#53##0:wybe.phantom, ?%tmp#58##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#58##0:wybe.phantom, ?%tmp#59##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(<<wybe.io.io>>:wybe.phantom, ~%tmp#59##0:wybe.phantom, ~*#globals##9:wybe.phantom, ?*#globals##10:wybe.phantom)

  LLVM code       :

; ModuleID = 'decimal'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_float(double)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"decimal.<0>"()    {
entry:
  tail call ccc  void  @print_float(double  1.000000e-2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  255)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  42)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  63)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_float(double  1.000000e100)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_float(double  1.000010e2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_float(double  5.001000e4)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  1000000000)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_float(double  5.001000e-14)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_float(double  -1.000000e1)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

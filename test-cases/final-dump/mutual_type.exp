======================================================================
AFTER EVERYTHING:
 Module mutual_type
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use mutual_type.a
                    use mutual_type.b
                    use wybe
  resources       : 
  submodules      : mutual_type.a, mutual_type.b
  procs           : 


  LLVM code       :

; ModuleID = 'mutual_type'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    
--------------------------------------------------
 Module mutual_type.a
  representation  : address
  public submods  : 
  public resources: 
  public procs    : mutual_type.a./=<0>
                    mutual_type.a.=<0>
                    mutual_type.a.a<0>
                    mutual_type.a.a<1>
                    mutual_type.a.ahead<0>
                    mutual_type.a.ahead<1>
                    mutual_type.a.atail<0>
                    mutual_type.a.atail<1>
                    mutual_type.a.no_a<0>
  imports         : use mutual_type
                    use wybe
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: mutual_type.a./=<0>
/=($left#0:mutual_type.a, $right#0:mutual_type.a, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    mutual_type.a.=<0>(~$left#0:mutual_type.a, ~$right#0:mutual_type.a, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (1 calls)
0: mutual_type.a.=<0>
=($left#0:mutual_type.a, $right#0:mutual_type.a, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($left#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp_eq(~$left#0:mutual_type.a, ~$right#0:mutual_type.a, ?$$#0:!wybe.bool)

    1:
        foreign lpvm access($left#0:mutual_type.a, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$ahead#0:wybe.int)
        foreign lpvm access(~$left#0:mutual_type.a, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$atail#0:mutual_type.b)
        foreign llvm icmp_ne($right#0:mutual_type.a, 0:wybe.int, ?tmp$9#0:wybe.bool)
        case ~tmp$9#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access($right#0:mutual_type.a, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$ahead#0:wybe.int)
            foreign lpvm access(~$right#0:mutual_type.a, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$atail#0:mutual_type.b)
            foreign llvm icmp_eq(~$left$ahead#0:wybe.int, ~$right$ahead#0:wybe.int, ?tmp$4#0:wybe.bool) @int:nn:nn
            case ~tmp$4#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                mutual_type.b.=<0>(~$left$atail#0:mutual_type.b, ~$right$atail#0:mutual_type.b, ?$$#0:wybe.bool) #3





a > public {inline} (0 calls)
0: mutual_type.a.a<0>
a(ahead#0:wybe.int, atail#0:mutual_type.b, ?$#0:mutual_type.a):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:mutual_type.a)
    foreign lpvm mutate(~%$rec#0:mutual_type.a, ?%$rec#1:mutual_type.a, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~ahead#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:mutual_type.a, ?%$#0:mutual_type.a, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~atail#0:mutual_type.b)
a > public {inline} (12 calls)
1: mutual_type.a.a<1>
a(?ahead#0:wybe.int, ?atail#0:mutual_type.b, $#0:mutual_type.a, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?ahead#0:wybe.int)
        foreign llvm move(undef:mutual_type.b, ?atail#0:mutual_type.b)

    1:
        foreign lpvm access($#0:mutual_type.a, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?ahead#0:wybe.int)
        foreign lpvm access(~$#0:mutual_type.a, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?atail#0:mutual_type.b)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



ahead > public {inline} (0 calls)
0: mutual_type.a.ahead<0>
ahead($rec#0:mutual_type.a, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

    1:
        foreign lpvm access(~$rec#0:mutual_type.a, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

ahead > public {inline} (0 calls)
1: mutual_type.a.ahead<1>
ahead($rec#0:mutual_type.a, ?$rec#1:mutual_type.a, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:mutual_type.a, ?$rec#1:mutual_type.a)

    1:
        foreign lpvm mutate(~%$rec#0:mutual_type.a, ?%$rec#1:mutual_type.a, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



atail > public {inline} (0 calls)
0: mutual_type.a.atail<0>
atail($rec#0:mutual_type.a, ?$#0:mutual_type.b, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:mutual_type.b, ?$#0:mutual_type.b)

    1:
        foreign lpvm access(~$rec#0:mutual_type.a, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:mutual_type.b)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

atail > public {inline} (0 calls)
1: mutual_type.a.atail<1>
atail($rec#0:mutual_type.a, ?$rec#1:mutual_type.a, $field#0:mutual_type.b, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:mutual_type.a, ?$rec#1:mutual_type.a)

    1:
        foreign lpvm {noalias} mutate(~%$rec#0:mutual_type.a, ?%$rec#1:mutual_type.a, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:mutual_type.b)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



no_a > public {inline} (0 calls)
0: mutual_type.a.no_a<0>
no_a(?$#0:mutual_type.a):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:mutual_type.a, ?$#0:mutual_type.a)

  LLVM code       :

; ModuleID = 'mutual_type.a'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"mutual_type.a./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i1  @"mutual_type.a.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  %"1$$$#0" = xor i1 %"1$tmp$0#0", 1 
  ret i1 %"1$$$#0" 
}


define external fastcc  i1 @"mutual_type.a.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %"2$tmp$9#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"2$tmp$9#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"3$$$#0" 
if.then1:
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"4$tmp$4#0" = icmp eq i64 %3, %10 
  br i1 %"4$tmp$4#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6$$$#0" = tail call fastcc  i1  @"mutual_type.b.=<0>"(i64  %7, i64  %14)  
  ret i1 %"6$$$#0" 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"mutual_type.a.a<0>"(i64  %"ahead#0", i64  %"atail#0")    {
entry:
  %15 = trunc i64 16 to i32  
  %16 = tail call ccc  i8*  @wybe_malloc(i32  %15)  
  %17 = ptrtoint i8* %16 to i64 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  store  i64 %"ahead#0", i64* %19 
  %20 = add   i64 %17, 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"atail#0", i64* %22 
  ret i64 %17 
}


define external fastcc  {i64, i64, i1} @"mutual_type.a.a<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %23 = inttoptr i64 %"$#0" to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"$#0", 8 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = insertvalue {i64, i64, i1} undef, i64 %25, 0 
  %31 = insertvalue {i64, i64, i1} %30, i64 %29, 1 
  %32 = insertvalue {i64, i64, i1} %31, i1 1, 2 
  ret {i64, i64, i1} %32 
if.else:
  %33 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %34 = insertvalue {i64, i64, i1} %33, i64 undef, 1 
  %35 = insertvalue {i64, i64, i1} %34, i1 0, 2 
  ret {i64, i64, i1} %35 
}


define external fastcc  {i64, i1} @"mutual_type.a.ahead<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %36 = inttoptr i64 %"$rec#0" to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %39 = insertvalue {i64, i1} undef, i64 %38, 0 
  %40 = insertvalue {i64, i1} %39, i1 1, 1 
  ret {i64, i1} %40 
if.else:
  %41 = insertvalue {i64, i1} undef, i64 undef, 0 
  %42 = insertvalue {i64, i1} %41, i1 0, 1 
  ret {i64, i1} %42 
}


define external fastcc  {i64, i1} @"mutual_type.a.ahead<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %43 = trunc i64 16 to i32  
  %44 = tail call ccc  i8*  @wybe_malloc(i32  %43)  
  %45 = ptrtoint i8* %44 to i64 
  %46 = inttoptr i64 %45 to i8* 
  %47 = inttoptr i64 %"$rec#0" to i8* 
  %48 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %46, i8*  %47, i32  %48, i32  8, i1  0)  
  %49 = inttoptr i64 %45 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  store  i64 %"$field#0", i64* %50 
  %51 = insertvalue {i64, i1} undef, i64 %45, 0 
  %52 = insertvalue {i64, i1} %51, i1 1, 1 
  ret {i64, i1} %52 
if.else:
  %53 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %54 = insertvalue {i64, i1} %53, i1 0, 1 
  ret {i64, i1} %54 
}


define external fastcc  {i64, i1} @"mutual_type.a.atail<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %55 = add   i64 %"$rec#0", 8 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = insertvalue {i64, i1} undef, i64 %58, 0 
  %60 = insertvalue {i64, i1} %59, i1 1, 1 
  ret {i64, i1} %60 
if.else:
  %61 = insertvalue {i64, i1} undef, i64 undef, 0 
  %62 = insertvalue {i64, i1} %61, i1 0, 1 
  ret {i64, i1} %62 
}


define external fastcc  {i64, i1} @"mutual_type.a.atail<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %63 = trunc i64 16 to i32  
  %64 = tail call ccc  i8*  @wybe_malloc(i32  %63)  
  %65 = ptrtoint i8* %64 to i64 
  %66 = inttoptr i64 %65 to i8* 
  %67 = inttoptr i64 %"$rec#0" to i8* 
  %68 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %66, i8*  %67, i32  %68, i32  8, i1  0)  
  %69 = add   i64 %65, 8 
  %70 = inttoptr i64 %69 to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  store  i64 %"$field#0", i64* %71 
  %72 = insertvalue {i64, i1} undef, i64 %65, 0 
  %73 = insertvalue {i64, i1} %72, i1 1, 1 
  ret {i64, i1} %73 
if.else:
  %74 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %75 = insertvalue {i64, i1} %74, i1 0, 1 
  ret {i64, i1} %75 
}


define external fastcc  i64 @"mutual_type.a.no_a<0>"()    {
entry:
  ret i64 0 
}
--------------------------------------------------
 Module mutual_type.b
  representation  : address
  public submods  : 
  public resources: 
  public procs    : mutual_type.b./=<0>
                    mutual_type.b.=<0>
                    mutual_type.b.b<0>
                    mutual_type.b.b<1>
                    mutual_type.b.bhead<0>
                    mutual_type.b.bhead<1>
                    mutual_type.b.btail<0>
                    mutual_type.b.btail<1>
                    mutual_type.b.no_b<0>
  imports         : use mutual_type
                    use wybe
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: mutual_type.b./=<0>
/=($left#0:mutual_type.b, $right#0:mutual_type.b, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    mutual_type.b.=<0>(~$left#0:mutual_type.b, ~$right#0:mutual_type.b, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (1 calls)
0: mutual_type.b.=<0>
=($left#0:mutual_type.b, $right#0:mutual_type.b, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($left#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp_eq(~$left#0:mutual_type.b, ~$right#0:mutual_type.b, ?$$#0:!wybe.bool)

    1:
        foreign lpvm access($left#0:mutual_type.b, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$bhead#0:wybe.int)
        foreign lpvm access(~$left#0:mutual_type.b, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$btail#0:mutual_type.a)
        foreign llvm icmp_ne($right#0:mutual_type.b, 0:wybe.int, ?tmp$9#0:wybe.bool)
        case ~tmp$9#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access($right#0:mutual_type.b, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$bhead#0:wybe.int)
            foreign lpvm access(~$right#0:mutual_type.b, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$btail#0:mutual_type.a)
            foreign llvm icmp_eq(~$left$bhead#0:wybe.int, ~$right$bhead#0:wybe.int, ?tmp$4#0:wybe.bool) @int:nn:nn
            case ~tmp$4#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                mutual_type.a.=<0>(~$left$btail#0:mutual_type.a, ~$right$btail#0:mutual_type.a, ?$$#0:wybe.bool) #3





b > public {inline} (0 calls)
0: mutual_type.b.b<0>
b(bhead#0:wybe.int, btail#0:mutual_type.a, ?$#0:mutual_type.b):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:mutual_type.b)
    foreign lpvm mutate(~%$rec#0:mutual_type.b, ?%$rec#1:mutual_type.b, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~bhead#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:mutual_type.b, ?%$#0:mutual_type.b, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~btail#0:mutual_type.a)
b > public {inline} (12 calls)
1: mutual_type.b.b<1>
b(?bhead#0:wybe.int, ?btail#0:mutual_type.a, $#0:mutual_type.b, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?bhead#0:wybe.int)
        foreign llvm move(undef:mutual_type.a, ?btail#0:mutual_type.a)

    1:
        foreign lpvm access($#0:mutual_type.b, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?bhead#0:wybe.int)
        foreign lpvm access(~$#0:mutual_type.b, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?btail#0:mutual_type.a)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



bhead > public {inline} (0 calls)
0: mutual_type.b.bhead<0>
bhead($rec#0:mutual_type.b, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

    1:
        foreign lpvm access(~$rec#0:mutual_type.b, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

bhead > public {inline} (0 calls)
1: mutual_type.b.bhead<1>
bhead($rec#0:mutual_type.b, ?$rec#1:mutual_type.b, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:mutual_type.b, ?$rec#1:mutual_type.b)

    1:
        foreign lpvm mutate(~%$rec#0:mutual_type.b, ?%$rec#1:mutual_type.b, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



btail > public {inline} (0 calls)
0: mutual_type.b.btail<0>
btail($rec#0:mutual_type.b, ?$#0:mutual_type.a, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:mutual_type.a, ?$#0:mutual_type.a)

    1:
        foreign lpvm access(~$rec#0:mutual_type.b, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:mutual_type.a)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

btail > public {inline} (0 calls)
1: mutual_type.b.btail<1>
btail($rec#0:mutual_type.b, ?$rec#1:mutual_type.b, $field#0:mutual_type.a, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:mutual_type.b, ?$rec#1:mutual_type.b)

    1:
        foreign lpvm {noalias} mutate(~%$rec#0:mutual_type.b, ?%$rec#1:mutual_type.b, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:mutual_type.a)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



no_b > public {inline} (0 calls)
0: mutual_type.b.no_b<0>
no_b(?$#0:mutual_type.b):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:mutual_type.b, ?$#0:mutual_type.b)

  LLVM code       :

; ModuleID = 'mutual_type.b'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"mutual_type.b./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i1  @"mutual_type.b.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  %"1$$$#0" = xor i1 %"1$tmp$0#0", 1 
  ret i1 %"1$$$#0" 
}


define external fastcc  i1 @"mutual_type.b.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %"2$tmp$9#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"2$tmp$9#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"3$$$#0" 
if.then1:
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"4$tmp$4#0" = icmp eq i64 %3, %10 
  br i1 %"4$tmp$4#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6$$$#0" = tail call fastcc  i1  @"mutual_type.a.=<0>"(i64  %7, i64  %14)  
  ret i1 %"6$$$#0" 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"mutual_type.b.b<0>"(i64  %"bhead#0", i64  %"btail#0")    {
entry:
  %15 = trunc i64 16 to i32  
  %16 = tail call ccc  i8*  @wybe_malloc(i32  %15)  
  %17 = ptrtoint i8* %16 to i64 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  store  i64 %"bhead#0", i64* %19 
  %20 = add   i64 %17, 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"btail#0", i64* %22 
  ret i64 %17 
}


define external fastcc  {i64, i64, i1} @"mutual_type.b.b<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %23 = inttoptr i64 %"$#0" to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"$#0", 8 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = insertvalue {i64, i64, i1} undef, i64 %25, 0 
  %31 = insertvalue {i64, i64, i1} %30, i64 %29, 1 
  %32 = insertvalue {i64, i64, i1} %31, i1 1, 2 
  ret {i64, i64, i1} %32 
if.else:
  %33 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %34 = insertvalue {i64, i64, i1} %33, i64 undef, 1 
  %35 = insertvalue {i64, i64, i1} %34, i1 0, 2 
  ret {i64, i64, i1} %35 
}


define external fastcc  {i64, i1} @"mutual_type.b.bhead<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %36 = inttoptr i64 %"$rec#0" to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %39 = insertvalue {i64, i1} undef, i64 %38, 0 
  %40 = insertvalue {i64, i1} %39, i1 1, 1 
  ret {i64, i1} %40 
if.else:
  %41 = insertvalue {i64, i1} undef, i64 undef, 0 
  %42 = insertvalue {i64, i1} %41, i1 0, 1 
  ret {i64, i1} %42 
}


define external fastcc  {i64, i1} @"mutual_type.b.bhead<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %43 = trunc i64 16 to i32  
  %44 = tail call ccc  i8*  @wybe_malloc(i32  %43)  
  %45 = ptrtoint i8* %44 to i64 
  %46 = inttoptr i64 %45 to i8* 
  %47 = inttoptr i64 %"$rec#0" to i8* 
  %48 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %46, i8*  %47, i32  %48, i32  8, i1  0)  
  %49 = inttoptr i64 %45 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  store  i64 %"$field#0", i64* %50 
  %51 = insertvalue {i64, i1} undef, i64 %45, 0 
  %52 = insertvalue {i64, i1} %51, i1 1, 1 
  ret {i64, i1} %52 
if.else:
  %53 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %54 = insertvalue {i64, i1} %53, i1 0, 1 
  ret {i64, i1} %54 
}


define external fastcc  {i64, i1} @"mutual_type.b.btail<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %55 = add   i64 %"$rec#0", 8 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = insertvalue {i64, i1} undef, i64 %58, 0 
  %60 = insertvalue {i64, i1} %59, i1 1, 1 
  ret {i64, i1} %60 
if.else:
  %61 = insertvalue {i64, i1} undef, i64 undef, 0 
  %62 = insertvalue {i64, i1} %61, i1 0, 1 
  ret {i64, i1} %62 
}


define external fastcc  {i64, i1} @"mutual_type.b.btail<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %63 = trunc i64 16 to i32  
  %64 = tail call ccc  i8*  @wybe_malloc(i32  %63)  
  %65 = ptrtoint i8* %64 to i64 
  %66 = inttoptr i64 %65 to i8* 
  %67 = inttoptr i64 %"$rec#0" to i8* 
  %68 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %66, i8*  %67, i32  %68, i32  8, i1  0)  
  %69 = add   i64 %65, 8 
  %70 = inttoptr i64 %69 to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  store  i64 %"$field#0", i64* %71 
  %72 = insertvalue {i64, i1} undef, i64 %65, 0 
  %73 = insertvalue {i64, i1} %72, i1 1, 1 
  ret {i64, i1} %73 
if.else:
  %74 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %75 = insertvalue {i64, i1} %74, i1 0, 1 
  ret {i64, i1} %75 
}


define external fastcc  i64 @"mutual_type.b.no_b<0>"()    {
entry:
  ret i64 0 
}

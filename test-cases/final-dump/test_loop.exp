======================================================================
AFTER EVERYTHING:
 Module test_loop
  representation  : (not a type)
  public submods  : int_seq -> test_loop.int_seq
  public resources: 
  public procs    : test_loop.<0>
                    test_loop.int_seq.=<0>
                    test_loop.int_seq.high<0>
                    test_loop.int_seq.high<1>
                    test_loop.int_seq.int_seq<0>
                    test_loop.int_seq.int_seq<1>
                    test_loop.int_seq.low<0>
                    test_loop.int_seq.low<1>
                    test_loop.int_seq.seq_next<0>
                    test_loop.int_seq.step<0>
                    test_loop.int_seq.step<1>
                    test_loop.int_seq.~=<0>
  imports         : public use test_loop.int_seq
                    use wybe
  resources       : 
  submodules      : test_loop.int_seq
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: test_loop.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    test_loop.find_test<0>(3:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @test_loop:nn:nn
    test_loop.find_test<0>(7:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @test_loop:nn:nn


find_modulo > {inline} (3 calls)
0: test_loop.find_modulo<0>
find_modulo(seq##0:test_loop.int_seq, modulus##0:wybe.int, ?i##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    test_loop.find_modulo#cont#1<0>(~modulus##0:wybe.int, ~seq##0:test_loop.int_seq, ?i##0:wybe.int, ?#success##0:wybe.bool) #0 @test_loop:nn:nn


find_modulo#cont#1 > (2 calls)
0: test_loop.find_modulo#cont#1<0>[6dacb8fd25]
find_modulo#cont#1(modulus##0:wybe.int, seq##0:test_loop.int_seq, ?i##1:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 1]
  MultiSpeczDepInfo: [(0,(test_loop.int_seq.seq_next<0>,fromList [NonAliasedParamCond 0 [1]])),(3,(test_loop.find_modulo#cont#1<0>,fromList [NonAliasedParamCond 1 [1]]))]
    test_loop.int_seq.seq_next<0>(~seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq, ?i##0:wybe.int, ?tmp#1##0:wybe.bool) #0 @test_loop:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~i##0:wybe.int, ?i##1:wybe.int)

    1:
        foreign llvm srem(i##0:wybe.int, modulus##0:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
        foreign llvm icmp_eq(~tmp#0##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            test_loop.find_modulo#cont#1<0>(~modulus##0:wybe.int, ~seq##1:test_loop.int_seq, ?i##1:wybe.int, ?#success##0:wybe.bool) #3 @test_loop:nn:nn

        1:
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~i##0:wybe.int, ?i##1:wybe.int)


 [6dacb8fd25] [NonAliasedParam 1] :
    test_loop.int_seq.seq_next<0>[410bae77d3](~seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq, ?i##0:wybe.int, ?tmp#1##0:wybe.bool) #0 @test_loop:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~i##0:wybe.int, ?i##1:wybe.int)

    1:
        foreign llvm srem(i##0:wybe.int, modulus##0:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
        foreign llvm icmp_eq(~tmp#0##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            test_loop.find_modulo#cont#1<0>[6dacb8fd25](~modulus##0:wybe.int, ~seq##1:test_loop.int_seq, ?i##1:wybe.int, ?#success##0:wybe.bool) #3 @test_loop:nn:nn

        1:
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~i##0:wybe.int, ?i##1:wybe.int)




find_test > (2 calls)
0: test_loop.find_test<0>
find_test(modulus##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(8,(test_loop.find_modulo#cont#1<0>,fromList [NonAliasedParamCond 1 []]))]
    foreign lpvm alloc(24:wybe.int, ?tmp#5##0:test_loop.int_seq) @test_loop:nn:nn
    foreign lpvm mutate(~tmp#5##0:test_loop.int_seq, ?tmp#6##0:test_loop.int_seq, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 2:wybe.int) @test_loop:nn:nn
    foreign lpvm mutate(~tmp#6##0:test_loop.int_seq, ?tmp#7##0:test_loop.int_seq, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 2:wybe.int) @test_loop:nn:nn
    foreign lpvm mutate(~tmp#7##0:test_loop.int_seq, ?tmp#8##0:test_loop.int_seq, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 10:wybe.int) @test_loop:nn:nn
    test_loop.find_modulo#cont#1<0>[6dacb8fd25](modulus##0:wybe.int, ~tmp#8##0:test_loop.int_seq, ?i##0:wybe.int, ?tmp#1##0:wybe.bool) #8 @test_loop:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        wybe.string.print<0>("Couldn't find even number divisible by ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @test_loop:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~modulus##0:wybe.int, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @int:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

    1:
        wybe.string.print<0>("First even number divisible by ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @test_loop:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~modulus##0:wybe.int, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @int:nn:nn
        foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
        wybe.string.print<0>(" is ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @test_loop:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @int:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#21##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


  LLVM code       :

; ModuleID = 'test_loop'


 


@test_loop.3 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @test_loop.2 to i64) }


@test_loop.1 =    constant {i64, i64} { i64 31, i64 ptrtoint ([?? x i8]* @test_loop.0 to i64) }


@test_loop.5 =    constant {i64, i64} { i64 39, i64 ptrtoint ([?? x i8]* @test_loop.4 to i64) }


@test_loop.2 =    constant [?? x i8] c" is \00"


@test_loop.4 =    constant [?? x i8] c"Couldn't find even number divisible by \00"


@test_loop.0 =    constant [?? x i8] c"First even number divisible by \00"


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"test_loop.<0>"() alwaysinline   {
entry:
  tail call fastcc  void  @"test_loop.find_test<0>"(i64  3)  
  tail call fastcc  void  @"test_loop.find_test<0>"(i64  7)  
  ret void 
}


define external fastcc  {i64, i1} @"test_loop.find_modulo<0>"(i64  %"seq##0", i64  %"modulus##0") alwaysinline   {
entry:
  %0 = tail call fastcc  {i64, i1}  @"test_loop.find_modulo#cont#1<0>"(i64  %"modulus##0", i64  %"seq##0")  
  %1 = extractvalue {i64, i1} %0, 0 
  %2 = extractvalue {i64, i1} %0, 1 
  %3 = insertvalue {i64, i1} undef, i64 %1, 0 
  %4 = insertvalue {i64, i1} %3, i1 %2, 1 
  ret {i64, i1} %4 
}


define external fastcc  {i64, i1} @"test_loop.find_modulo#cont#1<0>"(i64  %"modulus##0", i64  %"seq##0")    {
entry:
  %0 = tail call fastcc  {i64, i64, i1}  @"test_loop.int_seq.seq_next<0>"(i64  %"seq##0")  
  %1 = extractvalue {i64, i64, i1} %0, 0 
  %2 = extractvalue {i64, i64, i1} %0, 1 
  %3 = extractvalue {i64, i64, i1} %0, 2 
  br i1 %3, label %if.then, label %if.else 
if.then:
  %4 = srem i64 %2, %"modulus##0" 
  %5 = icmp eq i64 %4, 0 
  br i1 %5, label %if.then1, label %if.else1 
if.else:
  %13 = insertvalue {i64, i1} undef, i64 %2, 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
if.then1:
  %6 = insertvalue {i64, i1} undef, i64 %2, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = tail call fastcc  {i64, i1}  @"test_loop.find_modulo#cont#1<0>"(i64  %"modulus##0", i64  %1)  
  %9 = extractvalue {i64, i1} %8, 0 
  %10 = extractvalue {i64, i1} %8, 1 
  %11 = insertvalue {i64, i1} undef, i64 %9, 0 
  %12 = insertvalue {i64, i1} %11, i1 %10, 1 
  ret {i64, i1} %12 
}


define external fastcc  {i64, i1} @"test_loop.find_modulo#cont#1<0>[6dacb8fd25]"(i64  %"modulus##0", i64  %"seq##0")    {
entry:
  %0 = tail call fastcc  {i64, i64, i1}  @"test_loop.int_seq.seq_next<0>[410bae77d3]"(i64  %"seq##0")  
  %1 = extractvalue {i64, i64, i1} %0, 0 
  %2 = extractvalue {i64, i64, i1} %0, 1 
  %3 = extractvalue {i64, i64, i1} %0, 2 
  br i1 %3, label %if.then, label %if.else 
if.then:
  %4 = srem i64 %2, %"modulus##0" 
  %5 = icmp eq i64 %4, 0 
  br i1 %5, label %if.then1, label %if.else1 
if.else:
  %13 = insertvalue {i64, i1} undef, i64 %2, 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
if.then1:
  %6 = insertvalue {i64, i1} undef, i64 %2, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = tail call fastcc  {i64, i1}  @"test_loop.find_modulo#cont#1<0>[6dacb8fd25]"(i64  %"modulus##0", i64  %1)  
  %9 = extractvalue {i64, i1} %8, 0 
  %10 = extractvalue {i64, i1} %8, 1 
  %11 = insertvalue {i64, i1} undef, i64 %9, 0 
  %12 = insertvalue {i64, i1} %11, i1 %10, 1 
  ret {i64, i1} %12 
}


define external fastcc  void @"test_loop.find_test<0>"(i64  %"modulus##0")    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 2, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 2, i64* %5 
  %6 = add   i64 %2, 16 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 10, i64* %7 
  %8 = tail call fastcc  {i64, i1}  @"test_loop.find_modulo#cont#1<0>[6dacb8fd25]"(i64  %"modulus##0", i64  %2)  
  %9 = extractvalue {i64, i1} %8, 0 
  %10 = extractvalue {i64, i1} %8, 1 
  br i1 %10, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @test_loop.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %"modulus##0")  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @test_loop.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %9)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @test_loop.5, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %"modulus##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module test_loop.int_seq
  representation  : address
  public submods  : 
  public resources: 
  public procs    : test_loop.int_seq.=<0>
                    test_loop.int_seq.high<0>
                    test_loop.int_seq.high<1>
                    test_loop.int_seq.int_seq<0>
                    test_loop.int_seq.int_seq<1>
                    test_loop.int_seq.low<0>
                    test_loop.int_seq.low<1>
                    test_loop.int_seq.seq_next<0>
                    test_loop.int_seq.step<0>
                    test_loop.int_seq.step<1>
                    test_loop.int_seq.~=<0>
  imports         : use test_loop
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: test_loop.int_seq.=<0>
=(#left##0:test_loop.int_seq, #right##0:test_loop.int_seq, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#low##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#left##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#step##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(~#left##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#high##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#right##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#low##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#right##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#step##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(~#right##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#high##0:wybe.int) @test_loop:nn:nn
    foreign llvm icmp_eq(~#left#low##0:wybe.int, ~#right#low##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#step##0:wybe.int, ~#right#step##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#high##0:wybe.int, ~#right#high##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




high > public {inline} (0 calls)
0: test_loop.int_seq.high<0>
high(#rec##0:test_loop.int_seq, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @test_loop:nn:nn
high > public {inline} (0 calls)
1: test_loop.int_seq.high<1>
high(#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @test_loop:nn:nn


int_seq > public {inline} (0 calls)
0: test_loop.int_seq.int_seq<0>
int_seq(low##0:wybe.int, step##0:wybe.int, high##0:wybe.int, ?#result##0:test_loop.int_seq)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:test_loop.int_seq) @test_loop:nn:nn
    foreign lpvm mutate(~#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~low##0:wybe.int) @test_loop:nn:nn
    foreign lpvm mutate(~#rec##1:test_loop.int_seq, ?#rec##2:test_loop.int_seq, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~step##0:wybe.int) @test_loop:nn:nn
    foreign lpvm mutate(~#rec##2:test_loop.int_seq, ?#result##0:test_loop.int_seq, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~high##0:wybe.int) @test_loop:nn:nn
int_seq > public {inline} (13 calls)
1: test_loop.int_seq.int_seq<1>
int_seq(?low##0:wybe.int, ?step##0:wybe.int, ?high##0:wybe.int, #result##0:test_loop.int_seq)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?low##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#result##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?step##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(~#result##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?high##0:wybe.int) @test_loop:nn:nn


low > public {inline} (0 calls)
0: test_loop.int_seq.low<0>
low(#rec##0:test_loop.int_seq, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @test_loop:nn:nn
low > public {inline} (1 calls)
1: test_loop.int_seq.low<1>
low(#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @test_loop:nn:nn


seq_next > public (0 calls)
0: test_loop.int_seq.seq_next<0>[410bae77d3]
seq_next(seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq, ?elt##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: [(seq##0,seq##1)]
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign lpvm access(seq##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?elt##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(seq##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?step##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(seq##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?limit##0:wybe.int) @test_loop:nn:nn
    foreign llvm icmp_sle(elt##0:wybe.int, ~limit##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq)

    1:
        foreign llvm add(elt##0:wybe.int, ~step##0:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
        foreign lpvm {noalias} mutate(~seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp#0##0:wybe.int) @test_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

 [410bae77d3] [NonAliasedParam 0] :
    foreign lpvm access(seq##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?elt##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(seq##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?step##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(seq##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?limit##0:wybe.int) @test_loop:nn:nn
    foreign llvm icmp_sle(elt##0:wybe.int, ~limit##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq)

    1:
        foreign llvm add(elt##0:wybe.int, ~step##0:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
        foreign lpvm {noalias} mutate(~seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp#0##0:wybe.int) @test_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



step > public {inline} (0 calls)
0: test_loop.int_seq.step<0>
step(#rec##0:test_loop.int_seq, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @test_loop:nn:nn
step > public {inline} (0 calls)
1: test_loop.int_seq.step<1>
step(#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @test_loop:nn:nn


~= > public {inline} (0 calls)
0: test_loop.int_seq.~=<0>
~=(#left##0:test_loop.int_seq, #right##0:test_loop.int_seq, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#left##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(~#left##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#right##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#right##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(~#right##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @test_loop:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#9##0:wybe.bool) @int:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#7##0:wybe.int, ?tmp#10##0:wybe.bool) @int:nn:nn
        case ~tmp#10##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp#5##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)



  LLVM code       :

; ModuleID = 'test_loop.int_seq'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"test_loop.int_seq.=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"#left##0", 16 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = load  i64, i64* %11 
  %13 = add   i64 %"#right##0", 16 
  %14 = inttoptr i64 %13 to i64* 
  %15 = load  i64, i64* %14 
  %16 = icmp eq i64 %1, %9 
  br i1 %16, label %if.then, label %if.else 
if.then:
  %17 = icmp eq i64 %4, %12 
  br i1 %17, label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %18 = icmp eq i64 %7, %15 
  ret i1 %18 
if.else1:
  ret i1 0 
}


define external fastcc  i64 @"test_loop.int_seq.high<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 16 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"test_loop.int_seq.high<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 16 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i64 @"test_loop.int_seq.int_seq<0>"(i64  %"low##0", i64  %"step##0", i64  %"high##0") alwaysinline   {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"low##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"step##0", i64* %5 
  %6 = add   i64 %2, 16 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"high##0", i64* %7 
  ret i64 %2 
}


define external fastcc  {i64, i64, i64} @"test_loop.int_seq.int_seq<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#result##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"#result##0", 16 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  %8 = insertvalue {i64, i64, i64} undef, i64 %1, 0 
  %9 = insertvalue {i64, i64, i64} %8, i64 %4, 1 
  %10 = insertvalue {i64, i64, i64} %9, i64 %7, 2 
  ret {i64, i64, i64} %10 
}


define external fastcc  i64 @"test_loop.int_seq.low<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = load  i64, i64* %0 
  ret i64 %1 
}


define external fastcc  i64 @"test_loop.int_seq.low<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  store  i64 %"#field##0", i64* %6 
  ret i64 %2 
}


define external fastcc  {i64, i64, i1} @"test_loop.int_seq.seq_next<0>"(i64  %"seq##0")    {
entry:
  %0 = inttoptr i64 %"seq##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"seq##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"seq##0", 16 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  %8 = icmp sle i64 %1, %7 
  br i1 %8, label %if.then, label %if.else 
if.then:
  %9 = add   i64 %1, %4 
  %10 = trunc i64 24 to i32  
  %11 = tail call ccc  i8*  @wybe_malloc(i32  %10)  
  %12 = ptrtoint i8* %11 to i64 
  %13 = inttoptr i64 %12 to i8* 
  %14 = inttoptr i64 %"seq##0" to i8* 
  %15 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %13, i8*  %14, i32  %15, i1  0)  
  %16 = inttoptr i64 %12 to i64* 
  store  i64 %9, i64* %16 
  %17 = insertvalue {i64, i64, i1} undef, i64 %12, 0 
  %18 = insertvalue {i64, i64, i1} %17, i64 %1, 1 
  %19 = insertvalue {i64, i64, i1} %18, i1 1, 2 
  ret {i64, i64, i1} %19 
if.else:
  %20 = insertvalue {i64, i64, i1} undef, i64 %"seq##0", 0 
  %21 = insertvalue {i64, i64, i1} %20, i64 %1, 1 
  %22 = insertvalue {i64, i64, i1} %21, i1 0, 2 
  ret {i64, i64, i1} %22 
}


define external fastcc  {i64, i64, i1} @"test_loop.int_seq.seq_next<0>[410bae77d3]"(i64  %"seq##0")    {
entry:
  %0 = inttoptr i64 %"seq##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"seq##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"seq##0", 16 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  %8 = icmp sle i64 %1, %7 
  br i1 %8, label %if.then, label %if.else 
if.then:
  %9 = add   i64 %1, %4 
  %10 = inttoptr i64 %"seq##0" to i64* 
  store  i64 %9, i64* %10 
  %11 = insertvalue {i64, i64, i1} undef, i64 %"seq##0", 0 
  %12 = insertvalue {i64, i64, i1} %11, i64 %1, 1 
  %13 = insertvalue {i64, i64, i1} %12, i1 1, 2 
  ret {i64, i64, i1} %13 
if.else:
  %14 = insertvalue {i64, i64, i1} undef, i64 %"seq##0", 0 
  %15 = insertvalue {i64, i64, i1} %14, i64 %1, 1 
  %16 = insertvalue {i64, i64, i1} %15, i1 0, 2 
  ret {i64, i64, i1} %16 
}


define external fastcc  i64 @"test_loop.int_seq.step<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"test_loop.int_seq.step<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i1 @"test_loop.int_seq.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"#left##0", 16 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = load  i64, i64* %11 
  %13 = add   i64 %"#right##0", 16 
  %14 = inttoptr i64 %13 to i64* 
  %15 = load  i64, i64* %14 
  %16 = icmp eq i64 %1, %9 
  br i1 %16, label %if.then, label %if.else 
if.then:
  %17 = icmp eq i64 %4, %12 
  br i1 %17, label %if.then1, label %if.else1 
if.else:
  %21 = xor i1 0, 1 
  ret i1 %21 
if.then1:
  %18 = icmp eq i64 %7, %15 
  %19 = xor i1 %18, 1 
  ret i1 %19 
if.else1:
  %20 = xor i1 0, 1 
  ret i1 %20 
}
[93mfinal-dump/test_loop.wybe:6:33: Explicit specification of current type int_seq,
  it is recommended to specify type as _
[0m

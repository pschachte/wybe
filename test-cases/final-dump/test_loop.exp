======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module test_loop
  representation  : (not a type)
  public submods  : int_seq -> test_loop.int_seq
  public resources: 
  public procs    : test_loop.<0>
                    test_loop.int_seq.=<0>
                    test_loop.int_seq.high<0>
                    test_loop.int_seq.high<1>
                    test_loop.int_seq.int_seq<0>
                    test_loop.int_seq.int_seq<1>
                    test_loop.int_seq.low<0>
                    test_loop.int_seq.low<1>
                    test_loop.int_seq.seq_next<0>
                    test_loop.int_seq.step<0>
                    test_loop.int_seq.step<1>
                    test_loop.int_seq.~=<0>
  imports         : public use test_loop.int_seq
                    use wybe
  resources       : 
  submodules      : test_loop.int_seq
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: test_loop.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    test_loop.find_test<0>(3:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @test_loop:nn:nn
    test_loop.find_test<0>(7:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @test_loop:nn:nn


proc find_modulo > {inline} (3 calls)
0: test_loop.find_modulo<0>
find_modulo(seq##0:test_loop.int_seq, modulus##0:wybe.int, ?i##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    test_loop.find_modulo#cont#1<0>(~modulus##0:wybe.int, ~seq##0:test_loop.int_seq, ?i##0:wybe.int, ?#success##0:wybe.bool) #0 @test_loop:nn:nn


proc find_modulo#cont#1 > (2 calls)
0: test_loop.find_modulo#cont#1<0>
find_modulo#cont#1(modulus##0:wybe.int, seq##0:test_loop.int_seq, ?i##1:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 1]
  MultiSpeczDepInfo: [(0,(test_loop.int_seq.seq_next<0>,fromList [NonAliasedParamCond 0 [1]])),(3,(test_loop.find_modulo#cont#1<0>,fromList [NonAliasedParamCond 1 [1]]))]
    test_loop.int_seq.seq_next<0>(~seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq, ?i##0:wybe.int, ?tmp#1##0:wybe.bool) #0 @test_loop:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~i##0:wybe.int, ?i##1:wybe.int)

    1:
        foreign llvm srem(i##0:wybe.int, modulus##0:wybe.int, ?tmp#0##0:wybe.int) @test_loop:nn:nn
        foreign llvm icmp_eq(~tmp#0##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool) @test_loop:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            test_loop.find_modulo#cont#1<0>(~modulus##0:wybe.int, ~seq##1:test_loop.int_seq, ?i##1:wybe.int, ?#success##0:wybe.bool) #3 @test_loop:nn:nn

        1:
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~i##0:wybe.int, ?i##1:wybe.int)


 [6dacb8fd25] [NonAliasedParam 1] :
    test_loop.int_seq.seq_next<0>[410bae77d3](~seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq, ?i##0:wybe.int, ?tmp#1##0:wybe.bool) #0 @test_loop:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~i##0:wybe.int, ?i##1:wybe.int)

    1:
        foreign llvm srem(i##0:wybe.int, modulus##0:wybe.int, ?tmp#0##0:wybe.int) @test_loop:nn:nn
        foreign llvm icmp_eq(~tmp#0##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool) @test_loop:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            test_loop.find_modulo#cont#1<0>[6dacb8fd25](~modulus##0:wybe.int, ~seq##1:test_loop.int_seq, ?i##1:wybe.int, ?#success##0:wybe.bool) #3 @test_loop:nn:nn

        1:
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~i##0:wybe.int, ?i##1:wybe.int)




proc find_test > (2 calls)
0: test_loop.find_test<0>
find_test(modulus##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(8,(test_loop.find_modulo#cont#1<0>,fromList [NonAliasedParamCond 1 []]))]
    foreign lpvm alloc(24:wybe.int, ?tmp#5##0:test_loop.int_seq) @test_loop:nn:nn
    foreign lpvm mutate(~tmp#5##0:test_loop.int_seq, ?tmp#6##0:test_loop.int_seq, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 2:wybe.int) @test_loop:nn:nn
    foreign lpvm mutate(~tmp#6##0:test_loop.int_seq, ?tmp#7##0:test_loop.int_seq, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 2:wybe.int) @test_loop:nn:nn
    foreign lpvm mutate(~tmp#7##0:test_loop.int_seq, ?tmp#8##0:test_loop.int_seq, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 10:wybe.int) @test_loop:nn:nn
    test_loop.find_modulo#cont#1<0>[6dacb8fd25](modulus##0:wybe.int, ~tmp#8##0:test_loop.int_seq, ?i##0:wybe.int, ?tmp#1##0:wybe.bool) #8 @test_loop:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        wybe.string.print<0>("Couldn't find even number divisible by ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @test_loop:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @test_loop:nn:nn
        foreign c print_int(~modulus##0:wybe.int, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @test_loop:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @test_loop:nn:nn
        foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @test_loop:nn:nn

    1:
        wybe.string.print<0>("First even number divisible by ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @test_loop:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @test_loop:nn:nn
        foreign c print_int(~modulus##0:wybe.int, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @test_loop:nn:nn
        foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @test_loop:nn:nn
        wybe.string.print<0>(" is ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @test_loop:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @test_loop:nn:nn
        foreign c print_int(~i##0:wybe.int, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @test_loop:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) @test_loop:nn:nn
        foreign lpvm store(~%tmp#21##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @test_loop:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'test_loop'

source_filename = "!ROOT!/final-dump/test_loop.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c" is \00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"Couldn't find even number divisible by \00", align 8
@"cstring#2" = private unnamed_addr constant [ ?? x i8 ] c"First even number divisible by \00", align 8
@"string#3" = private unnamed_addr constant {i64, i64} { i64 4, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#4" = private unnamed_addr constant {i64, i64} { i64 39, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8
@"string#5" = private unnamed_addr constant {i64, i64} { i64 31, i64 ptrtoint( ptr @"cstring#2" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"test_loop.<0>"() {
  tail call fastcc void @"test_loop.find_test<0>"(i64 3)
  tail call fastcc void @"test_loop.find_test<0>"(i64 7)
  ret void
}

define external fastcc {i64, i1} @"test_loop.find_modulo<0>"(i64 %"seq##0", i64 %"modulus##0") {
  %"tmp#3##0" = tail call fastcc {i64, i1} @"test_loop.find_modulo#cont#1<0>"(i64 %"modulus##0", i64 %"seq##0")
  %"tmp#4##0" = extractvalue {i64, i1}%"tmp#3##0", 0
  %"tmp#5##0" = extractvalue {i64, i1}%"tmp#3##0", 1
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 %"tmp#5##0", 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"test_loop.find_modulo#cont#1<0>"(i64 %"modulus##0", i64 %"seq##0") {
  %"tmp#7##0" = tail call fastcc {i64, i64, i1} @"test_loop.int_seq.seq_next<0>"(i64 %"seq##0")
  %"seq##1" = extractvalue {i64, i64, i1}%"tmp#7##0", 0
  %"i##0" = extractvalue {i64, i64, i1}%"tmp#7##0", 1
  %"tmp#1##0" = extractvalue {i64, i64, i1}%"tmp#7##0", 2
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#0##0" = srem i64 %"i##0", %"modulus##0"
  %"tmp#2##0" = icmp eq i64 %"tmp#0##0", 0
  br i1 %"tmp#2##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 %"i##0", 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 1, 1
  ret {i64, i1} %"tmp#9##0"
if.else.1:
  %"tmp#10##0" = tail call fastcc {i64, i1} @"test_loop.find_modulo#cont#1<0>"(i64 %"modulus##0", i64 %"seq##1")
  %"tmp#11##0" = extractvalue {i64, i1}%"tmp#10##0", 0
  %"tmp#12##0" = extractvalue {i64, i1}%"tmp#10##0", 1
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 %"tmp#11##0", 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 %"tmp#12##0", 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 %"i##0", 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc {i64, i1} @"test_loop.find_modulo#cont#1<0>[6dacb8fd25]"(i64 %"modulus##0", i64 %"seq##0") {
  %"tmp#7##0" = tail call fastcc {i64, i64, i1} @"test_loop.int_seq.seq_next<0>[410bae77d3]"(i64 %"seq##0")
  %"seq##1" = extractvalue {i64, i64, i1}%"tmp#7##0", 0
  %"i##0" = extractvalue {i64, i64, i1}%"tmp#7##0", 1
  %"tmp#1##0" = extractvalue {i64, i64, i1}%"tmp#7##0", 2
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#0##0" = srem i64 %"i##0", %"modulus##0"
  %"tmp#2##0" = icmp eq i64 %"tmp#0##0", 0
  br i1 %"tmp#2##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 %"i##0", 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 1, 1
  ret {i64, i1} %"tmp#9##0"
if.else.1:
  %"tmp#10##0" = tail call fastcc {i64, i1} @"test_loop.find_modulo#cont#1<0>[6dacb8fd25]"(i64 %"modulus##0", i64 %"seq##1")
  %"tmp#11##0" = extractvalue {i64, i1}%"tmp#10##0", 0
  %"tmp#12##0" = extractvalue {i64, i1}%"tmp#10##0", 1
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 %"tmp#11##0", 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 %"tmp#12##0", 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 %"i##0", 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc void @"test_loop.find_test<0>"(i64 %"modulus##0") {
  %"tmp#22##0" = call ccc ptr @wybe_malloc(i32 24)
  %"tmp#5##0" = ptrtoint ptr %"tmp#22##0" to i64
  %"tmp#23##0" = inttoptr i64 %"tmp#5##0" to ptr
  store i64 2, ptr %"tmp#23##0"
  %"tmp#24##0" = add i64 %"tmp#5##0", 8
  %"tmp#25##0" = inttoptr i64 %"tmp#24##0" to ptr
  store i64 2, ptr %"tmp#25##0"
  %"tmp#26##0" = add i64 %"tmp#5##0", 16
  %"tmp#27##0" = inttoptr i64 %"tmp#26##0" to ptr
  store i64 10, ptr %"tmp#27##0"
  %"tmp#28##0" = tail call fastcc {i64, i1} @"test_loop.find_modulo#cont#1<0>[6dacb8fd25]"(i64 %"modulus##0", i64 %"tmp#5##0")
  %"i##0" = extractvalue {i64, i1}%"tmp#28##0", 0
  %"tmp#1##0" = extractvalue {i64, i1}%"tmp#28##0", 1
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#5" to i64 ))
  call ccc void @print_int(i64 %"modulus##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#3" to i64 ))
  call ccc void @print_int(i64 %"i##0")
  call ccc void @putchar(i8 10)
  ret void
if.else.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#4" to i64 ))
  call ccc void @print_int(i64 %"modulus##0")
  call ccc void @putchar(i8 10)
  ret void
}

--------------------------------------------------
 Module test_loop.int_seq
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : test_loop.int_seq.=<0>
                    test_loop.int_seq.high<0>
                    test_loop.int_seq.high<1>
                    test_loop.int_seq.int_seq<0>
                    test_loop.int_seq.int_seq<1>
                    test_loop.int_seq.low<0>
                    test_loop.int_seq.low<1>
                    test_loop.int_seq.seq_next<0>
                    test_loop.int_seq.step<0>
                    test_loop.int_seq.step<1>
                    test_loop.int_seq.~=<0>
  imports         : use test_loop
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: test_loop.int_seq.=<0>
=(#left##0:test_loop.int_seq, #right##0:test_loop.int_seq, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#low##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#left##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#step##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(~#left##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#high##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#right##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#low##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#right##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#step##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(~#right##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#high##0:wybe.int) @test_loop:nn:nn
    foreign llvm icmp_eq(~#left#low##0:wybe.int, ~#right#low##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#step##0:wybe.int, ~#right#step##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#high##0:wybe.int, ~#right#high##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc high > public {inline} (0 calls)
0: test_loop.int_seq.high<0>
high(#rec##0:test_loop.int_seq, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @test_loop:nn:nn
proc high > public {inline} (0 calls)
1: test_loop.int_seq.high<1>
high(#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @test_loop:nn:nn


proc int_seq > public {inline} (0 calls)
0: test_loop.int_seq.int_seq<0>
int_seq(low##0:wybe.int, step##0:wybe.int, high##0:wybe.int, ?#result##0:test_loop.int_seq)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:test_loop.int_seq) @test_loop:nn:nn
    foreign lpvm mutate(~#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~low##0:wybe.int) @test_loop:nn:nn
    foreign lpvm mutate(~#rec##1:test_loop.int_seq, ?#rec##2:test_loop.int_seq, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~step##0:wybe.int) @test_loop:nn:nn
    foreign lpvm mutate(~#rec##2:test_loop.int_seq, ?#result##0:test_loop.int_seq, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~high##0:wybe.int) @test_loop:nn:nn
proc int_seq > public {inline} (13 calls)
1: test_loop.int_seq.int_seq<1>
int_seq(?low##0:wybe.int, ?step##0:wybe.int, ?high##0:wybe.int, #result##0:test_loop.int_seq)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?low##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#result##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?step##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(~#result##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?high##0:wybe.int) @test_loop:nn:nn


proc low > public {inline} (0 calls)
0: test_loop.int_seq.low<0>
low(#rec##0:test_loop.int_seq, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @test_loop:nn:nn
proc low > public {inline} (1 calls)
1: test_loop.int_seq.low<1>
low(#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @test_loop:nn:nn


proc seq_next > public (0 calls)
0: test_loop.int_seq.seq_next<0>[410bae77d3]
seq_next(seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq, ?elt##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: [(seq##0,seq##1)]
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign lpvm access(seq##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?elt##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(seq##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?step##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(seq##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?limit##0:wybe.int) @test_loop:nn:nn
    foreign llvm icmp_sle(elt##0:wybe.int, ~limit##0:wybe.int, ?tmp#1##0:wybe.bool) @test_loop:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq)

    1:
        foreign llvm add(elt##0:wybe.int, ~step##0:wybe.int, ?tmp#0##0:wybe.int) @test_loop:nn:nn
        foreign lpvm {noalias} mutate(~seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp#0##0:wybe.int) @test_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

 [410bae77d3] [NonAliasedParam 0] :
    foreign lpvm access(seq##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?elt##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(seq##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?step##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(seq##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?limit##0:wybe.int) @test_loop:nn:nn
    foreign llvm icmp_sle(elt##0:wybe.int, ~limit##0:wybe.int, ?tmp#1##0:wybe.bool) @test_loop:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq)

    1:
        foreign llvm add(elt##0:wybe.int, ~step##0:wybe.int, ?tmp#0##0:wybe.int) @test_loop:nn:nn
        foreign lpvm {noalias} mutate(~seq##0:test_loop.int_seq, ?seq##1:test_loop.int_seq, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tmp#0##0:wybe.int) @test_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc step > public {inline} (0 calls)
0: test_loop.int_seq.step<0>
step(#rec##0:test_loop.int_seq, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @test_loop:nn:nn
proc step > public {inline} (0 calls)
1: test_loop.int_seq.step<1>
step(#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:test_loop.int_seq, ?#rec##1:test_loop.int_seq, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @test_loop:nn:nn


proc ~= > public {inline} (0 calls)
0: test_loop.int_seq.~=<0>
~=(#left##0:test_loop.int_seq, #right##0:test_loop.int_seq, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#left##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(~#left##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#right##0:test_loop.int_seq, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(#right##0:test_loop.int_seq, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @test_loop:nn:nn
    foreign lpvm access(~#right##0:test_loop.int_seq, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @test_loop:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#9##0:wybe.bool) @int:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#7##0:wybe.int, ?tmp#10##0:wybe.bool) @int:nn:nn
        case ~tmp#10##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp#5##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)



  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'test_loop.int_seq'

source_filename = "!ROOT!/final-dump/test_loop.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"test_loop.int_seq.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#12##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#low##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#left##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#left#step##0" = load i64, ptr %"tmp#14##0"
  %"tmp#15##0" = add i64 %"#left##0", 16
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  %"#left#high##0" = load i64, ptr %"tmp#16##0"
  %"tmp#17##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#low##0" = load i64, ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"#right##0", 8
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  %"#right#step##0" = load i64, ptr %"tmp#19##0"
  %"tmp#20##0" = add i64 %"#right##0", 16
  %"tmp#21##0" = inttoptr i64 %"tmp#20##0" to ptr
  %"#right#high##0" = load i64, ptr %"tmp#21##0"
  %"tmp#1##0" = icmp eq i64 %"#left#low##0", %"#right#low##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = icmp eq i64 %"#left#step##0", %"#right#step##0"
  br i1 %"tmp#2##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#22##0" = icmp eq i64 %"#left#high##0", %"#right#high##0"
  ret i1 %"tmp#22##0"
if.else.1:
  ret i1 0
if.else.0:
  ret i1 0
}

define external fastcc i64 @"test_loop.int_seq.high<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 16
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"test_loop.int_seq.high<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 24, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 16
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"test_loop.int_seq.int_seq<0>"(i64 %"low##0", i64 %"step##0", i64 %"high##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 24)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"low##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"step##0", ptr %"tmp#3##0"
  %"tmp#4##0" = add i64 %"#rec##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"high##0", ptr %"tmp#5##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64, i64} @"test_loop.int_seq.int_seq<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = add i64 %"#result##0", 16
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#6##0"
  %"tmp#8##0" = insertvalue {i64, i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#9##0" = insertvalue {i64, i64, i64} %"tmp#8##0", i64 %"tmp#4##0", 1
  %"tmp#10##0" = insertvalue {i64, i64, i64} %"tmp#9##0", i64 %"tmp#7##0", 2
  ret {i64, i64, i64} %"tmp#10##0"
}

define external fastcc i64 @"test_loop.int_seq.low<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"test_loop.int_seq.low<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 24, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc {i64, i64, i1} @"test_loop.int_seq.seq_next<0>"(i64 %"seq##0") {
  %"tmp#9##0" = inttoptr i64 %"seq##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#9##0"
  %"tmp#11##0" = add i64 %"seq##0", 8
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  %"step##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"seq##0", 16
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"limit##0" = load i64, ptr %"tmp#14##0"
  %"tmp#1##0" = icmp sle i64 %"tmp#10##0", %"limit##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#0##0" = add i64 %"tmp#10##0", %"step##0"
  %"tmp#15##0" = inttoptr i64 %"seq##0" to ptr
  %"tmp#16##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#16##0", ptr %"tmp#15##0", i64 24, i1 0)
  %"tmp#17##0" = ptrtoint ptr %"tmp#16##0" to i64
  %"tmp#18##0" = inttoptr i64 %"tmp#17##0" to ptr
  store i64 %"tmp#0##0", ptr %"tmp#18##0"
  %"tmp#19##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#17##0", 0
  %"tmp#20##0" = insertvalue {i64, i64, i1} %"tmp#19##0", i64 %"tmp#10##0", 1
  %"tmp#21##0" = insertvalue {i64, i64, i1} %"tmp#20##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#21##0"
if.else.0:
  %"tmp#22##0" = insertvalue {i64, i64, i1} undef, i64 %"seq##0", 0
  %"tmp#23##0" = insertvalue {i64, i64, i1} %"tmp#22##0", i64 %"tmp#10##0", 1
  %"tmp#24##0" = insertvalue {i64, i64, i1} %"tmp#23##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#24##0"
}

define external fastcc {i64, i64, i1} @"test_loop.int_seq.seq_next<0>[410bae77d3]"(i64 %"seq##0") {
  %"tmp#9##0" = inttoptr i64 %"seq##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#9##0"
  %"tmp#11##0" = add i64 %"seq##0", 8
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  %"step##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"seq##0", 16
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"limit##0" = load i64, ptr %"tmp#14##0"
  %"tmp#1##0" = icmp sle i64 %"tmp#10##0", %"limit##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#0##0" = add i64 %"tmp#10##0", %"step##0"
  %"tmp#15##0" = inttoptr i64 %"seq##0" to ptr
  store i64 %"tmp#0##0", ptr %"tmp#15##0"
  %"tmp#16##0" = insertvalue {i64, i64, i1} undef, i64 %"seq##0", 0
  %"tmp#17##0" = insertvalue {i64, i64, i1} %"tmp#16##0", i64 %"tmp#10##0", 1
  %"tmp#18##0" = insertvalue {i64, i64, i1} %"tmp#17##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#18##0"
if.else.0:
  %"tmp#19##0" = insertvalue {i64, i64, i1} undef, i64 %"seq##0", 0
  %"tmp#20##0" = insertvalue {i64, i64, i1} %"tmp#19##0", i64 %"tmp#10##0", 1
  %"tmp#21##0" = insertvalue {i64, i64, i1} %"tmp#20##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#21##0"
}

define external fastcc i64 @"test_loop.int_seq.step<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"test_loop.int_seq.step<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 24, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i1 @"test_loop.int_seq.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#11##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"#left##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = add i64 %"#left##0", 16
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#16##0"
  %"tmp#17##0" = add i64 %"#right##0", 8
  %"tmp#18##0" = inttoptr i64 %"tmp#17##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#18##0"
  %"tmp#19##0" = add i64 %"#right##0", 16
  %"tmp#20##0" = inttoptr i64 %"tmp#19##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#20##0"
  %"tmp#9##0" = icmp eq i64 %"tmp#3##0", %"tmp#6##0"
  br i1 %"tmp#9##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#10##0" = icmp eq i64 %"tmp#4##0", %"tmp#7##0"
  br i1 %"tmp#10##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#0##0" = icmp eq i64 %"tmp#5##0", %"tmp#8##0"
  %"tmp#21##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#21##0"
if.else.1:
  %"tmp#22##0" = xor i1 0, 1
  ret i1 %"tmp#22##0"
if.else.0:
  %"tmp#23##0" = xor i1 0, 1
  ret i1 %"tmp#23##0"
}

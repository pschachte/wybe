======================================================================
AFTER EVERYTHING:
 Module cases
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use wybe
  resources       : 
  procs           : 

len > (1 calls)
0: cases.len<0>
len(lst##0:wybe.list(T), ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?#result##0:wybe.int) @cases:nn:nn

    1:
        foreign lpvm access(~lst##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:wybe.list(T))
        cases.len<0>(~t##0:wybe.list(T), ?tmp#2##0:wybe.int) #1 @cases:nn:nn
        foreign llvm add(~tmp#2##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @int:nn:nn



len2 > (1 calls)
0: cases.len2<0>
len2(lst##0:wybe.list(T), ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool)
    case ~tmp#6##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?#result##0:wybe.int) @cases:nn:nn

    1:
        foreign lpvm access(~lst##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:wybe.list(T))
        cases.len2<0>(~t##0:wybe.list(T), ?tmp#3##0:wybe.int) #1 @cases:nn:nn
        foreign llvm add(~tmp#3##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @int:nn:nn


  LLVM code       :

; ModuleID = 'cases'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"cases.len<0>"(i64  %"lst##0")    {
entry:
  %"1#tmp#5##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"lst##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %"2#tmp#2##0" = tail call fastcc  i64  @"cases.len<0>"(i64  %4)  
  %"2##result##0" = add   i64 %"2#tmp#2##0", 1 
  ret i64 %"2##result##0" 
if.else:
  ret i64 0 
}


define external fastcc  i64 @"cases.len2<0>"(i64  %"lst##0")    {
entry:
  %"1#tmp#6##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#6##0", label %if.then, label %if.else 
if.then:
  %5 = add   i64 %"lst##0", 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  %8 = load  i64, i64* %7 
  %"2#tmp#3##0" = tail call fastcc  i64  @"cases.len2<0>"(i64  %8)  
  %"2##result##0" = add   i64 %"2#tmp#3##0", 1 
  ret i64 %"2##result##0" 
if.else:
  ret i64 0 
}

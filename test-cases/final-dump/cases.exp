======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module cases
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use wybe
  resources       : 
  procs           : 

proc len > (1 calls)
0: cases.len<0>
len(lst##0:wybe.list(T) <{}; {}; {0}>, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @cases:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?#result##0:wybe.int) @cases:nn:nn

    1:
        foreign lpvm access(~lst##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:wybe.list(T)) @cases:nn:nn
        cases.len<0>(~t##0:wybe.list(T), ?tmp#2##0:wybe.int) #1 @cases:nn:nn
        foreign llvm add(~tmp#2##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @cases:nn:nn



proc len2 > (1 calls)
0: cases.len2<0>
len2(lst##0:wybe.list(T) <{}; {}; {0}>, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool) @cases:nn:nn
    case ~tmp#6##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?#result##0:wybe.int) @cases:nn:nn

    1:
        foreign lpvm access(~lst##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:wybe.list(T)) @cases:nn:nn
        cases.len2<0>(~t##0:wybe.list(T), ?tmp#3##0:wybe.int) #1 @cases:nn:nn
        foreign llvm add(~tmp#3##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @cases:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'cases'

source_filename = "!ROOT!/final-dump/cases.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i64 @"cases.len<0>"(i64 %"lst##0") {
  %"tmp#5##0" = icmp ne i64 %"lst##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#8##0" = add i64 %"lst##0", 8
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  %"t##0" = load i64, ptr %"tmp#9##0"
  %"tmp#2##0" = tail call fastcc i64 @"cases.len<0>"(i64 %"t##0")
  %"tmp#10##0" = add i64 %"tmp#2##0", 1
  ret i64 %"tmp#10##0"
if.else.0:
  ret i64 0
}

define external fastcc i64 @"cases.len2<0>"(i64 %"lst##0") {
  %"tmp#6##0" = icmp ne i64 %"lst##0", 0
  br i1 %"tmp#6##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#9##0" = add i64 %"lst##0", 8
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"t##0" = load i64, ptr %"tmp#10##0"
  %"tmp#3##0" = tail call fastcc i64 @"cases.len2<0>"(i64 %"t##0")
  %"tmp#11##0" = add i64 %"tmp#3##0", 1
  ret i64 %"tmp#11##0"
if.else.0:
  ret i64 0
}

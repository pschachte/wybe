======================================================================
AFTER EVERYTHING:
 Module anon_field_variable(T)
  representation  : address
  public submods  : 
  public resources: 
  public procs    : anon_field_variable.<0>
                    anon_field_variable.bar<0>
                    anon_field_variable.bar<1>
                    anon_field_variable.foo<0>
                    anon_field_variable.foo<1>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: anon_field_variable.<0>
(io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?tmp#5##0:anon_field_variable(T))
    foreign lpvm mutate(~tmp#5##0:anon_field_variable(T), ?tmp#0##0:anon_field_variable(wybe.bool), 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 0:T)
    foreign llvm and(~tmp#0##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int)
    foreign llvm icmp_eq(~tmp#7##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(~io##0:wybe.phantom, ?io##1:wybe.phantom)

    1:
        wybe.string.print_string<0>("foo":wybe.string, ~#io##0:wybe.phantom, ?tmp#11##0:wybe.phantom) #4 @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn



bar > public {inline} (0 calls)
0: anon_field_variable.bar<0>
bar(bar#1##0:wybe.int, field##0:T, bar#3##0:T, ?#result##0:anon_field_variable(T)):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:anon_field_variable(T))
    foreign lpvm mutate(~#rec##0:anon_field_variable(T), ?#rec##1:anon_field_variable(T), 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~bar#1##0:wybe.int)
    foreign lpvm mutate(~#rec##1:anon_field_variable(T), ?#rec##2:anon_field_variable(T), 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~field##0:T)
    foreign lpvm mutate(~#rec##2:anon_field_variable(T), ?#rec##3:anon_field_variable(T), 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~bar#3##0:T)
    foreign llvm or(~#rec##3:anon_field_variable(T), 1:wybe.int, ?#result##0:anon_field_variable(T))
bar > public {inline} (0 calls)
1: anon_field_variable.bar<1>
bar(?bar#1##0:wybe.int, ?field##0:T, ?bar#3##0:T, #result##0:anon_field_variable(T), ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?bar#1##0:wybe.int)
        foreign llvm move(undef:T, ?field##0:T)
        foreign llvm move(undef:T, ?bar#3##0:T)

    1:
        foreign lpvm access(#result##0:anon_field_variable(T), -1:wybe.int, 24:wybe.int, 1:wybe.int, ?bar#1##0:wybe.int)
        foreign lpvm access(#result##0:anon_field_variable(T), 7:wybe.int, 24:wybe.int, 1:wybe.int, ?field##0:T)
        foreign lpvm access(~#result##0:anon_field_variable(T), 15:wybe.int, 24:wybe.int, 1:wybe.int, ?bar#3##0:T)
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



field > {inline} (0 calls)
0: anon_field_variable.field<0>
field(#rec##0:anon_field_variable(T), ?#result##0:T, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?#result##0:T)

    1:
        foreign lpvm access(~#rec##0:anon_field_variable(T), 7:wybe.int, 24:wybe.int, 1:wybe.int, ?#result##0:T)
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

field > {inline} (0 calls)
1: anon_field_variable.field<1>
field(#rec##0:anon_field_variable(T), ?#rec##1:anon_field_variable(T), #field##0:T, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:anon_field_variable(T), ?#rec##1:anon_field_variable(T))

    1:
        foreign lpvm {noalias} mutate(~#rec##0:anon_field_variable(T), ?#rec##1:anon_field_variable(T), 7:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:T)
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



foo > public {inline} (3 calls)
0: anon_field_variable.foo<0>
foo(foo#1##0:T, ?#result##0:anon_field_variable(T)):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:anon_field_variable(T))
    foreign lpvm mutate(~#rec##0:anon_field_variable(T), ?#result##0:anon_field_variable(T), 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~foo#1##0:T)
foo > public {inline} (3 calls)
1: anon_field_variable.foo<1>
foo(?foo#1##0:T, #result##0:anon_field_variable(T), ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?foo#1##0:T)

    1:
        foreign lpvm access(~#result##0:anon_field_variable(T), 0:wybe.int, 8:wybe.int, 0:wybe.int, ?foo#1##0:T)
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'anon_field_variable'


 


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


@anon_field_variable.7 =    constant {i64, i64} { i64 3, i64 ptrtoint ([?? x i8]* @anon_field_variable.6 to i64) }


@anon_field_variable.6 =    constant [?? x i8] c"foo\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"anon_field_variable.<0>"()    {
entry:
  %1 = trunc i64 8 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 0, i64* %5 
  %"1#tmp#7##0" = and i64 %3, 1 
  %"1#tmp#8##0" = icmp eq i64 %"1#tmp#7##0", 0 
  br i1 %"1#tmp#8##0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field_variable.7, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  ret void 
}


define external fastcc  i64 @"anon_field_variable.bar<0>"(i64  %"bar#1##0", i64  %"field##0", i64  %"bar#3##0")    {
entry:
  %8 = trunc i64 24 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 %"bar#1##0", i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 %"field##0", i64* %15 
  %16 = add   i64 %10, 16 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 %"bar#3##0", i64* %18 
  %"1##result##0" = or i64 %10, 1 
  ret i64 %"1##result##0" 
}


define external fastcc  {i64, i64, i64, i1} @"anon_field_variable.bar<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 1 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 1 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %19 = add   i64 %"#result##0", -1 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %23 = add   i64 %"#result##0", 7 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = add   i64 %"#result##0", 15 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %31 = insertvalue {i64, i64, i64, i1} undef, i64 %22, 0 
  %32 = insertvalue {i64, i64, i64, i1} %31, i64 %26, 1 
  %33 = insertvalue {i64, i64, i64, i1} %32, i64 %30, 2 
  %34 = insertvalue {i64, i64, i64, i1} %33, i1 1, 3 
  ret {i64, i64, i64, i1} %34 
if.else:
  %35 = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0 
  %36 = insertvalue {i64, i64, i64, i1} %35, i64 undef, 1 
  %37 = insertvalue {i64, i64, i64, i1} %36, i64 undef, 2 
  %38 = insertvalue {i64, i64, i64, i1} %37, i1 0, 3 
  ret {i64, i64, i64, i1} %38 
}


define external fastcc  {i64, i1} @"anon_field_variable.field<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 1 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 1 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %39 = add   i64 %"#rec##0", 7 
  %40 = inttoptr i64 %39 to i64* 
  %41 = getelementptr  i64, i64* %40, i64 0 
  %42 = load  i64, i64* %41 
  %43 = insertvalue {i64, i1} undef, i64 %42, 0 
  %44 = insertvalue {i64, i1} %43, i1 1, 1 
  ret {i64, i1} %44 
if.else:
  %45 = insertvalue {i64, i1} undef, i64 undef, 0 
  %46 = insertvalue {i64, i1} %45, i1 0, 1 
  ret {i64, i1} %46 
}


define external fastcc  {i64, i1} @"anon_field_variable.field<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 1 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 1 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %47 = trunc i64 24 to i32  
  %48 = tail call ccc  i8*  @wybe_malloc(i32  %47)  
  %49 = ptrtoint i8* %48 to i64 
  %50 = add   i64 %49, 1 
  %51 = sub   i64 %"#rec##0", 1 
  %52 = inttoptr i64 %49 to i8* 
  %53 = inttoptr i64 %51 to i8* 
  %54 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %52, i8*  %53, i32  %54, i1  0)  
  %55 = add   i64 %50, 7 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  store  i64 %"#field##0", i64* %57 
  %58 = insertvalue {i64, i1} undef, i64 %50, 0 
  %59 = insertvalue {i64, i1} %58, i1 1, 1 
  ret {i64, i1} %59 
if.else:
  %60 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %61 = insertvalue {i64, i1} %60, i1 0, 1 
  ret {i64, i1} %61 
}


define external fastcc  i64 @"anon_field_variable.foo<0>"(i64  %"foo#1##0")    {
entry:
  %62 = trunc i64 8 to i32  
  %63 = tail call ccc  i8*  @wybe_malloc(i32  %62)  
  %64 = ptrtoint i8* %63 to i64 
  %65 = inttoptr i64 %64 to i64* 
  %66 = getelementptr  i64, i64* %65, i64 0 
  store  i64 %"foo#1##0", i64* %66 
  ret i64 %64 
}


define external fastcc  {i64, i1} @"anon_field_variable.foo<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 1 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %67 = inttoptr i64 %"#result##0" to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  %69 = load  i64, i64* %68 
  %70 = insertvalue {i64, i1} undef, i64 %69, 0 
  %71 = insertvalue {i64, i1} %70, i1 1, 1 
  ret {i64, i1} %71 
if.else:
  %72 = insertvalue {i64, i1} undef, i64 undef, 0 
  %73 = insertvalue {i64, i1} %72, i1 0, 1 
  ret {i64, i1} %73 
}

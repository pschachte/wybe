======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module anon_field_variable(T)
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : anon_field_variable.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: anon_field_variable.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?tmp#5##0:anon_field_variable(T)) @anon_field_variable:nn:nn
    foreign lpvm mutate(~tmp#5##0:anon_field_variable(T), ?tmp#0##0:anon_field_variable(wybe.bool), 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 0:T) @anon_field_variable:nn:nn
    foreign llvm and(~tmp#0##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int) @anon_field_variable:nn:nn
    foreign llvm icmp_eq(~tmp#7##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool) @anon_field_variable:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:

    1:
        wybe.string.print<0>("foo":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @anon_field_variable:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @anon_field_variable:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @anon_field_variable:nn:nn
        foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @anon_field_variable:nn:nn



proc bar > {inline} (0 calls)
0: anon_field_variable.bar<0>
bar(bar#1##0:wybe.int, field##0:T <{}; {}; {1}>, bar#3##0:T <{}; {}; {2}>, ?#result##0:anon_field_variable(T) <{}; {}; {1, 2}>)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:anon_field_variable(T)) @anon_field_variable:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field_variable(T), ?#rec##1:anon_field_variable(T), 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~bar#1##0:wybe.int) @anon_field_variable:nn:nn
    foreign lpvm mutate(~#rec##1:anon_field_variable(T), ?#rec##2:anon_field_variable(T), 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~field##0:T) @anon_field_variable:nn:nn
    foreign lpvm mutate(~#rec##2:anon_field_variable(T), ?#rec##3:anon_field_variable(T), 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~bar#3##0:T) @anon_field_variable:nn:nn
    foreign llvm or(~#rec##3:anon_field_variable(T), 1:wybe.int, ?#result##0:anon_field_variable(T)) @anon_field_variable:nn:nn
proc bar > {inline} (0 calls)
1: anon_field_variable.bar<1>
bar(?bar#1##0:wybe.int, ?field##0:T <{}; {}; {3}>, ?bar#3##0:T <{}; {}; {3}>, #result##0:anon_field_variable(T) <{}; {}; {3}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?bar#1##0:wybe.int)
        foreign llvm move(undef:T, ?field##0:T)
        foreign llvm move(undef:T, ?bar#3##0:T)

    1:
        foreign lpvm access(#result##0:anon_field_variable(T), -1:wybe.int, 24:wybe.int, 1:wybe.int, ?bar#1##0:wybe.int) @anon_field_variable:nn:nn
        foreign lpvm access(#result##0:anon_field_variable(T), 7:wybe.int, 24:wybe.int, 1:wybe.int, ?field##0:T) @anon_field_variable:nn:nn
        foreign lpvm access(~#result##0:anon_field_variable(T), 15:wybe.int, 24:wybe.int, 1:wybe.int, ?bar#3##0:T) @anon_field_variable:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc field > {inline} (0 calls)
0: anon_field_variable.field<0>
field(#rec##0:anon_field_variable(T) <{}; {}; {0}>, ?#result##0:T <{}; {}; {0}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?#result##0:T)

    1:
        foreign lpvm access(~#rec##0:anon_field_variable(T), 7:wybe.int, 24:wybe.int, 1:wybe.int, ?#result##0:T) @anon_field_variable:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc field > {inline} (0 calls)
1: anon_field_variable.field<1>
field(#rec##0:anon_field_variable(T) <{}; {}; {0}>, ?#rec##1:anon_field_variable(T) <{}; {}; {0, 2}>, #field##0:T <{}; {}; {2}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:anon_field_variable(T), ?#rec##1:anon_field_variable(T))

    1:
        foreign lpvm {noalias} mutate(~#rec##0:anon_field_variable(T), ?#rec##1:anon_field_variable(T), 7:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:T) @anon_field_variable:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc foo > {inline} (3 calls)
0: anon_field_variable.foo<0>
foo(foo#1##0:T <{}; {}; {0}>, ?#result##0:anon_field_variable(T) <{}; {}; {0}>)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:anon_field_variable(T)) @anon_field_variable:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field_variable(T), ?#result##0:anon_field_variable(T), 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~foo#1##0:T) @anon_field_variable:nn:nn
proc foo > {inline} (3 calls)
1: anon_field_variable.foo<1>
foo(?foo#1##0:T <{}; {}; {1}>, #result##0:anon_field_variable(T) <{}; {}; {1}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?foo#1##0:T)

    1:
        foreign lpvm access(~#result##0:anon_field_variable(T), 0:wybe.int, 8:wybe.int, 0:wybe.int, ?foo#1##0:T) @anon_field_variable:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'anon_field_variable'

source_filename = "!ROOT!/final-dump/anon_field_variable.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"foo\00", align 8
@"string#1" = private unnamed_addr constant {i64, i64} { i64 3, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"anon_field_variable.<0>"() {
  %"tmp#12##0" = call ccc ptr @wybe_malloc(i32 8)
  %"tmp#5##0" = ptrtoint ptr %"tmp#12##0" to i64
  %"tmp#13##0" = inttoptr i64 %"tmp#5##0" to ptr
  store i64 0, ptr %"tmp#13##0"
  %"tmp#7##0" = and i64 %"tmp#5##0", 1
  %"tmp#8##0" = icmp eq i64 %"tmp#7##0", 0
  br i1 %"tmp#8##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#1" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
if.else.0:
  ret void
}

define external fastcc i64 @"anon_field_variable.bar<0>"(i64 %"bar#1##0", i64 %"field##0", i64 %"bar#3##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 24)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"bar#1##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"field##0", ptr %"tmp#3##0"
  %"tmp#4##0" = add i64 %"#rec##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"bar#3##0", ptr %"tmp#5##0"
  %"tmp#6##0" = or i64 %"#rec##0", 1
  ret i64 %"tmp#6##0"
}

define external fastcc {i64, i64, i64, i1} @"anon_field_variable.bar<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#result##0", -1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = add i64 %"#result##0", 7
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#6##0"
  %"tmp#8##0" = add i64 %"#result##0", 15
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#9##0"
  %"tmp#11##0" = insertvalue {i64, i64, i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#12##0" = insertvalue {i64, i64, i64, i1} %"tmp#11##0", i64 %"tmp#7##0", 1
  %"tmp#13##0" = insertvalue {i64, i64, i64, i1} %"tmp#12##0", i64 %"tmp#10##0", 2
  %"tmp#14##0" = insertvalue {i64, i64, i64, i1} %"tmp#13##0", i1 1, 3
  ret {i64, i64, i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i64, i64, i1} %"tmp#15##0", i64 undef, 1
  %"tmp#17##0" = insertvalue {i64, i64, i64, i1} %"tmp#16##0", i64 undef, 2
  %"tmp#18##0" = insertvalue {i64, i64, i64, i1} %"tmp#17##0", i1 0, 3
  ret {i64, i64, i64, i1} %"tmp#18##0"
}

define external fastcc {i64, i1} @"anon_field_variable.field<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#rec##0", 7
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc {i64, i1} @"anon_field_variable.field<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = sub i64 %"#rec##0", 1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#4##0", ptr %"tmp#3##0", i64 24, i1 0)
  %"tmp#5##0" = ptrtoint ptr %"tmp#4##0" to i64
  %"tmp#6##0" = add i64 %"tmp#5##0", 1
  %"tmp#7##0" = add i64 %"tmp#6##0", 7
  %"tmp#8##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 %"#field##0", ptr %"tmp#8##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#6##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.0:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
}

define external fastcc i64 @"anon_field_variable.foo<0>"(i64 %"foo#1##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"foo#1##0", ptr %"tmp#1##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i1} @"anon_field_variable.foo<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

======================================================================
AFTER EVERYTHING:
 Module anon_field_variable(T)
  representation  : address
  public submods  : 
  public resources: 
  public procs    : anon_field_variable.<0>
                    anon_field_variable.bar<0>
                    anon_field_variable.bar<1>
                    anon_field_variable.foo<0>
                    anon_field_variable.foo<1>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: anon_field_variable.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?tmp#5##0:anon_field_variable(T)) @anon_field_variable:nn:nn
    foreign lpvm mutate(~tmp#5##0:anon_field_variable(T), ?tmp#0##0:anon_field_variable(wybe.bool), 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 0:T) @anon_field_variable:nn:nn
    foreign llvm and(~tmp#0##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.int)
    foreign llvm icmp_eq(~tmp#7##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:

    1:
        wybe.string.print<0>("foo":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn



bar > public {inline} (0 calls)
0: anon_field_variable.bar<0>
bar(bar#1##0:wybe.int, field##0:T, bar#3##0:T, ?#result##0:anon_field_variable(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:anon_field_variable(T)) @anon_field_variable:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field_variable(T), ?#rec##1:anon_field_variable(T), 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~bar#1##0:wybe.int) @anon_field_variable:nn:nn
    foreign lpvm mutate(~#rec##1:anon_field_variable(T), ?#rec##2:anon_field_variable(T), 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~field##0:T) @anon_field_variable:nn:nn
    foreign lpvm mutate(~#rec##2:anon_field_variable(T), ?#rec##3:anon_field_variable(T), 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~bar#3##0:T) @anon_field_variable:nn:nn
    foreign llvm or(~#rec##3:anon_field_variable(T), 1:wybe.int, ?#result##0:anon_field_variable(T)) @anon_field_variable:nn:nn
bar > public {inline} (0 calls)
1: anon_field_variable.bar<1>
bar(?bar#1##0:wybe.int, ?field##0:T, ?bar#3##0:T, #result##0:anon_field_variable(T), ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?bar#1##0:wybe.int)
        foreign llvm move(undef:T, ?field##0:T)
        foreign llvm move(undef:T, ?bar#3##0:T)

    1:
        foreign lpvm access(#result##0:anon_field_variable(T), -1:wybe.int, 24:wybe.int, 1:wybe.int, ?bar#1##0:wybe.int) @anon_field_variable:nn:nn
        foreign lpvm access(#result##0:anon_field_variable(T), 7:wybe.int, 24:wybe.int, 1:wybe.int, ?field##0:T) @anon_field_variable:nn:nn
        foreign lpvm access(~#result##0:anon_field_variable(T), 15:wybe.int, 24:wybe.int, 1:wybe.int, ?bar#3##0:T) @anon_field_variable:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



field > {inline} (0 calls)
0: anon_field_variable.field<0>
field(#rec##0:anon_field_variable(T), ?#result##0:T, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?#result##0:T)

    1:
        foreign lpvm access(~#rec##0:anon_field_variable(T), 7:wybe.int, 24:wybe.int, 1:wybe.int, ?#result##0:T) @anon_field_variable:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

field > {inline} (0 calls)
1: anon_field_variable.field<1>
field(#rec##0:anon_field_variable(T), ?#rec##1:anon_field_variable(T), #field##0:T, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:anon_field_variable(T), ?#rec##1:anon_field_variable(T))

    1:
        foreign lpvm {noalias} mutate(~#rec##0:anon_field_variable(T), ?#rec##1:anon_field_variable(T), 7:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:T) @anon_field_variable:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



foo > public {inline} (3 calls)
0: anon_field_variable.foo<0>
foo(foo#1##0:T, ?#result##0:anon_field_variable(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:anon_field_variable(T)) @anon_field_variable:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field_variable(T), ?#result##0:anon_field_variable(T), 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~foo#1##0:T) @anon_field_variable:nn:nn
foo > public {inline} (3 calls)
1: anon_field_variable.foo<1>
foo(?foo#1##0:T, #result##0:anon_field_variable(T), ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?foo#1##0:T)

    1:
        foreign lpvm access(~#result##0:anon_field_variable(T), 0:wybe.int, 8:wybe.int, 0:wybe.int, ?foo#1##0:T) @anon_field_variable:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'anon_field_variable'


 


@anon_field_variable.1 =    constant {i64, i64} { i64 3, i64 ptrtoint ([?? x i8]* @anon_field_variable.0 to i64) }


@anon_field_variable.0 =    constant [?? x i8] c"foo\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"anon_field_variable.<0>"()    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 0, i64* %4 
  %5 = and i64 %2, 1 
  %6 = icmp eq i64 %5, 0 
  br i1 %6, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field_variable.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  ret void 
}


define external fastcc  i64 @"anon_field_variable.bar<0>"(i64  %"bar#1##0", i64  %"field##0", i64  %"bar#3##0")    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"bar#1##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"field##0", i64* %7 
  %8 = add   i64 %2, 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"bar#3##0", i64* %10 
  %11 = or i64 %2, 1 
  ret i64 %11 
}


define external fastcc  {i64, i64, i64, i1} @"anon_field_variable.bar<1>"(i64  %"#result##0")    {
entry:
  %0 = and i64 %"#result##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#result##0", -1 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = add   i64 %"#result##0", 7 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#result##0", 15 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = insertvalue {i64, i64, i64, i1} undef, i64 %5, 0 
  %15 = insertvalue {i64, i64, i64, i1} %14, i64 %9, 1 
  %16 = insertvalue {i64, i64, i64, i1} %15, i64 %13, 2 
  %17 = insertvalue {i64, i64, i64, i1} %16, i1 1, 3 
  ret {i64, i64, i64, i1} %17 
if.else:
  %18 = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i64, i64, i1} %18, i64 undef, 1 
  %20 = insertvalue {i64, i64, i64, i1} %19, i64 undef, 2 
  %21 = insertvalue {i64, i64, i64, i1} %20, i1 0, 3 
  ret {i64, i64, i64, i1} %21 
}


define external fastcc  {i64, i1} @"anon_field_variable.field<0>"(i64  %"#rec##0")    {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#rec##0", 7 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"anon_field_variable.field<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 24 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = add   i64 %4, 1 
  %6 = sub   i64 %"#rec##0", 1 
  %7 = inttoptr i64 %4 to i8* 
  %8 = inttoptr i64 %6 to i8* 
  %9 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %7, i8*  %8, i32  %9, i1  0)  
  %10 = add   i64 %5, 7 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 %"#field##0", i64* %12 
  %13 = insertvalue {i64, i1} undef, i64 %5, 0 
  %14 = insertvalue {i64, i1} %13, i1 1, 1 
  ret {i64, i1} %14 
if.else:
  %15 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %16 = insertvalue {i64, i1} %15, i1 0, 1 
  ret {i64, i1} %16 
}


define external fastcc  i64 @"anon_field_variable.foo<0>"(i64  %"foo#1##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"foo#1##0", i64* %4 
  ret i64 %2 
}


define external fastcc  {i64, i1} @"anon_field_variable.foo<1>"(i64  %"#result##0")    {
entry:
  %0 = and i64 %"#result##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#result##0" to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}

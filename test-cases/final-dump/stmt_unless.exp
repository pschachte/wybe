======================================================================
AFTER EVERYTHING:
 Module stmt_unless
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : stmt_unless.<0>
                    stmt_unless.mod<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public {inline} (0 calls)
0: stmt_unless.<0>
(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    stmt_unless.gen$1<0>(~io#0:wybe.phantom, 10:wybe.int, ?io#1:wybe.phantom) #0 @stmt_unless:nn:nn


gen$1 > (3 calls)
0: stmt_unless.gen$1<0>
gen$1(io#0:wybe.phantom, n#0:wybe.int, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_sgt(n#0:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.bool) @int:nn:nn
    case ~tmp$3#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        stmt_unless.gen$2<0>(~io#0:wybe.phantom, ~n#0:wybe.int, ?io#1:wybe.phantom) #1



gen$2 > (1 calls)
0: stmt_unless.gen$2<0>
gen$2(io#0:wybe.phantom, n#0:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm sub(~n#0:wybe.int, 1:wybe.int, ?tmp$0#0:wybe.int) @int:nn:nn
    foreign llvm urem(tmp$0#0:wybe.int, 2:wybe.int, ?tmp$1#0:wybe.int) @stmt_unless:nn:nn
    foreign llvm icmp_eq(~tmp$1#0:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.bool) @int:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign c print_int(tmp$0#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$11#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$11#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        stmt_unless.gen$1<0>(~io#1:wybe.phantom, ~tmp$0#0:wybe.int, ?io#2:wybe.phantom) #5 @stmt_unless:nn:nn

    1:
        stmt_unless.gen$1<0>(~io#0:wybe.phantom, ~tmp$0#0:wybe.int, ?io#2:wybe.phantom) #3 @stmt_unless:nn:nn



mod > public {inline} (3 calls)
0: stmt_unless.mod<0>
mod(x#0:wybe.int, y#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm urem(~x#0:wybe.int, ~y#0:wybe.int, ?$#0:wybe.int) @stmt_unless:nn:nn

  LLVM code       :

; ModuleID = 'stmt_unless'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"stmt_unless.<0>"()    {
entry:
  tail call fastcc  void  @"stmt_unless.gen$1<0>"(i64  10)  
  ret void 
}


define external fastcc  void @"stmt_unless.gen$1<0>"(i64  %"n#0")    {
entry:
  %"1$tmp$3#0" = icmp sgt i64 %"n#0", 0 
  br i1 %"1$tmp$3#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"stmt_unless.gen$2<0>"(i64  %"n#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_unless.gen$2<0>"(i64  %"n#0")    {
entry:
  %"1$tmp$0#0" = sub   i64 %"n#0", 1 
  %"1$tmp$1#0" = urem i64 %"1$tmp$0#0", 2 
  %"1$tmp$2#0" = icmp eq i64 %"1$tmp$1#0", 0 
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"stmt_unless.gen$1<0>"(i64  %"1$tmp$0#0")  
  ret void 
if.else:
  tail call ccc  void  @print_int(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_unless.gen$1<0>"(i64  %"1$tmp$0#0")  
  ret void 
}


define external fastcc  i64 @"stmt_unless.mod<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$$#0" = urem i64 %"x#0", %"y#0" 
  ret i64 %"1$$#0" 
}

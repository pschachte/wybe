======================================================================
AFTER EVERYTHING:
 Module constructors
  representation  : address
  public submods  : 
  public resources: 
  public procs    : constructors./=<0>
                    constructors.=<0>
                    constructors.just<0>
                    constructors.just<1>
                    constructors.nothing<0>
                    constructors.value<0>
                    constructors.value<1>
  imports         : use wybe
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:constructors, $right#0:constructors, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    constructors.=<0>(~$left#0:constructors, ~$right#0:constructors, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (1 calls)
0: =($left#0:constructors, $right#0:constructors, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($left#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp_eq(~$left#0:constructors, ~$right#0:constructors, ?$$#0:!wybe.bool)

    1:
        foreign lpvm access(~$left#0:constructors, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?$left$value#0:wybe.int)
        foreign llvm icmp_ne($right#0:constructors, 0:wybe.int, ?tmp$8#0:wybe.bool)
        case ~tmp$8#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access(~$right#0:constructors, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?$right$value#0:wybe.int)
            foreign llvm icmp_eq(~$left$value#0:wybe.int, ~$right$value#0:wybe.int, ?$$#0:wybe.bool) @int:nn:nn




just > public {inline} (0 calls)
0: just(value#0:wybe.int, ?$#0:constructors):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?$rec#0:constructors)
    foreign lpvm mutate(~%$rec#0:constructors, ?%$#0:constructors, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~value#0:wybe.int)
just > public {inline} (8 calls)
1: just(?value#0:wybe.int, $#0:constructors, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?value#0:wybe.int)

    1:
        foreign lpvm access(~$#0:constructors, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?value#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



nothing > public {inline} (0 calls)
0: nothing(?$#0:constructors):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:constructors, ?$#0:constructors)


value > public {inline} (0 calls)
0: value($rec#0:constructors, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

    1:
        foreign lpvm access(~$rec#0:constructors, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

value > public {inline} (0 calls)
1: value($rec#0:constructors, ?$rec#1:constructors, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:constructors, ?$rec#1:constructors)

    1:
        foreign lpvm {noalias} mutate(~%$rec#0:constructors, ?%$rec#1:constructors, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'constructors'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"constructors./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i1  @"constructors.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  %"1$$$#0" = xor i1 %"1$tmp$0#0", 1 
  ret i1 %"1$$$#0" 
}


define external fastcc  i1 @"constructors.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %"2$tmp$8#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"2$tmp$8#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"3$$$#0" 
if.then1:
  %4 = inttoptr i64 %"$right#0" to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %"4$$$#0" = icmp eq i64 %3, %6 
  ret i1 %"4$$$#0" 
if.else1:
  ret i1 0 
}


define external fastcc  i64 @"constructors.just<0>"(i64  %"value#0")    {
entry:
  %7 = trunc i64 8 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  store  i64 %"value#0", i64* %11 
  ret i64 %9 
}


define external fastcc  {i64, i1} @"constructors.just<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %12 = inttoptr i64 %"$#0" to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %15 = insertvalue {i64, i1} undef, i64 %14, 0 
  %16 = insertvalue {i64, i1} %15, i1 1, 1 
  ret {i64, i1} %16 
if.else:
  %17 = insertvalue {i64, i1} undef, i64 undef, 0 
  %18 = insertvalue {i64, i1} %17, i1 0, 1 
  ret {i64, i1} %18 
}


define external fastcc  i64 @"constructors.nothing<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"constructors.value<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %19 = inttoptr i64 %"$rec#0" to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = insertvalue {i64, i1} undef, i64 %21, 0 
  %23 = insertvalue {i64, i1} %22, i1 1, 1 
  ret {i64, i1} %23 
if.else:
  %24 = insertvalue {i64, i1} undef, i64 undef, 0 
  %25 = insertvalue {i64, i1} %24, i1 0, 1 
  ret {i64, i1} %25 
}


define external fastcc  {i64, i1} @"constructors.value<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %26 = trunc i64 8 to i32  
  %27 = tail call ccc  i8*  @wybe_malloc(i32  %26)  
  %28 = ptrtoint i8* %27 to i64 
  %29 = inttoptr i64 %28 to i8* 
  %30 = inttoptr i64 %"$rec#0" to i8* 
  %31 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %29, i8*  %30, i32  %31, i32  8, i1  0)  
  %32 = inttoptr i64 %28 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  store  i64 %"$field#0", i64* %33 
  %34 = insertvalue {i64, i1} undef, i64 %28, 0 
  %35 = insertvalue {i64, i1} %34, i1 1, 1 
  ret {i64, i1} %35 
if.else:
  %36 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %37 = insertvalue {i64, i1} %36, i1 0, 1 
  ret {i64, i1} %37 
}

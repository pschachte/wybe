======================================================================
AFTER EVERYTHING:
 Module constructors
  representation  : address
  public submods  : 
  public resources: 
  public procs    : constructors.=<0>
                    constructors.just<0>
                    constructors.just<1>
                    constructors.nothing<0>
                    constructors.value<0>
                    constructors.value<1>
                    constructors.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

= > public (1 calls)
0: constructors.=<0>
=(#left##0:constructors, #right##0:constructors, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:constructors, 0:constructors, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(~#left##0:constructors, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#value##0:wybe.int) @constructors:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
        case ~tmp#8##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:constructors, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#value##0:wybe.int) @constructors:nn:nn
            foreign llvm icmp_eq(~#left#value##0:wybe.int, ~#right#value##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




just > public {inline} (0 calls)
0: constructors.just<0>
just(value##0:wybe.int, ?#result##0:constructors)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:constructors) @constructors:nn:nn
    foreign lpvm mutate(~#rec##0:constructors, ?#result##0:constructors, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~value##0:wybe.int) @constructors:nn:nn
just > public {inline} (8 calls)
1: constructors.just<1>
just(?value##0:wybe.int, #result##0:constructors, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?value##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:constructors, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?value##0:wybe.int) @constructors:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



nothing > public {inline} (0 calls)
0: constructors.nothing<0>
nothing(?#result##0:constructors)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:constructors, ?#result##0:constructors)


value > public {inline} (0 calls)
0: constructors.value<0>
value(#rec##0:constructors, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:constructors, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @constructors:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

value > public {inline} (0 calls)
1: constructors.value<1>
value(#rec##0:constructors, ?#rec##1:constructors, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:constructors, ?#rec##1:constructors)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:constructors, ?#rec##1:constructors, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @constructors:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: constructors.~=<0>
~=(#left##0:constructors, #right##0:constructors, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    constructors.=<0>(~#left##0:constructors, ~#right##0:constructors, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'constructors'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"constructors.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp ne i64 %"#left##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = icmp ne i64 %"#right##0", 0 
  br i1 %3, label %if.then1, label %if.else1 
if.else:
  %7 = icmp eq i64 %"#right##0", 0 
  ret i1 %7 
if.then1:
  %4 = inttoptr i64 %"#right##0" to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp eq i64 %2, %5 
  ret i1 %6 
if.else1:
  ret i1 0 
}


define external fastcc  i64 @"constructors.just<0>"(i64  %"value##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"value##0", i64* %3 
  ret i64 %2 
}


define external fastcc  {i64, i1} @"constructors.just<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#result##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = insertvalue {i64, i1} undef, i64 %2, 0 
  %4 = insertvalue {i64, i1} %3, i1 1, 1 
  ret {i64, i1} %4 
if.else:
  %5 = insertvalue {i64, i1} undef, i64 undef, 0 
  %6 = insertvalue {i64, i1} %5, i1 0, 1 
  ret {i64, i1} %6 
}


define external fastcc  i64 @"constructors.nothing<0>"() alwaysinline   {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"constructors.value<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = insertvalue {i64, i1} undef, i64 %2, 0 
  %4 = insertvalue {i64, i1} %3, i1 1, 1 
  ret {i64, i1} %4 
if.else:
  %5 = insertvalue {i64, i1} undef, i64 undef, 0 
  %6 = insertvalue {i64, i1} %5, i1 0, 1 
  ret {i64, i1} %6 
}


define external fastcc  {i64, i1} @"constructors.value<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 8 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  store  i64 %"#field##0", i64* %7 
  %8 = insertvalue {i64, i1} undef, i64 %3, 0 
  %9 = insertvalue {i64, i1} %8, i1 1, 1 
  ret {i64, i1} %9 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 0, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
}


define external fastcc  i1 @"constructors.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i1  @"constructors.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}

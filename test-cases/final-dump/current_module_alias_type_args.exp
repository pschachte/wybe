======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module current_module_alias_type_args(T)
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : current_module_alias_type_args.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: current_module_alias_type_args.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#6##0:current_module_alias_type_args(T)) @current_module_alias_type_args:nn:nn
    foreign lpvm mutate(~tmp#6##0:current_module_alias_type_args(T), ?tmp#7##0:current_module_alias_type_args(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 42:T) @current_module_alias_type_args:nn:nn
    foreign lpvm mutate(~tmp#7##0:current_module_alias_type_args(T), ?tmp#1##0:current_module_alias_type_args(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:current_module_alias_type_args(T)) @current_module_alias_type_args:nn:nn
    foreign llvm icmp_ne(tmp#1##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool) @current_module_alias_type_args:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:

    1:
        foreign lpvm access(~tmp#1##0:current_module_alias_type_args(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @current_module_alias_type_args:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @current_module_alias_type_args:nn:nn
        foreign c print_int(~tmp#2##0:wybe.int, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @current_module_alias_type_args:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @current_module_alias_type_args:nn:nn
        foreign lpvm store(~%tmp#13##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @current_module_alias_type_args:nn:nn



proc cons > {inline} (3 calls)
0: current_module_alias_type_args.cons<0>
cons(head##0:T <{}; {}; {0}>, tail##0:current_module_alias_type_args(T) <{}; {}; {1}>, ?#result##0:current_module_alias_type_args(T) <{}; {}; {0, 1}>)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:current_module_alias_type_args(T)) @current_module_alias_type_args:nn:nn
    foreign lpvm mutate(~#rec##0:current_module_alias_type_args(T), ?#rec##1:current_module_alias_type_args(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head##0:T) @current_module_alias_type_args:nn:nn
    foreign lpvm mutate(~#rec##1:current_module_alias_type_args(T), ?#result##0:current_module_alias_type_args(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail##0:current_module_alias_type_args(T)) @current_module_alias_type_args:nn:nn
proc cons > {inline} (0 calls)
1: current_module_alias_type_args.cons<1>
cons(?head##0:T <{}; {}; {2}>, ?tail##0:current_module_alias_type_args(T) <{}; {}; {2}>, #result##0:current_module_alias_type_args(T) <{}; {}; {2}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?head##0:T)
        foreign llvm move(undef:current_module_alias_type_args(T), ?tail##0:current_module_alias_type_args(T))

    1:
        foreign lpvm access(#result##0:current_module_alias_type_args(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head##0:T) @current_module_alias_type_args:nn:nn
        foreign lpvm access(~#result##0:current_module_alias_type_args(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail##0:current_module_alias_type_args(T)) @current_module_alias_type_args:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc empty > {inline} (3 calls)
0: current_module_alias_type_args.empty<0>
empty(?#result##0:current_module_alias_type_args(T))<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:current_module_alias_type_args(T), ?#result##0:current_module_alias_type_args(T))


proc head > {inline} (3 calls)
0: current_module_alias_type_args.head<0>
head(#rec##0:current_module_alias_type_args(T) <{}; {}; {0}>, ?#result##0:T <{}; {}; {0}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?#result##0:T)

    1:
        foreign lpvm access(~#rec##0:current_module_alias_type_args(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:T) @current_module_alias_type_args:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc head > {inline} (0 calls)
1: current_module_alias_type_args.head<1>
head(#rec##0:current_module_alias_type_args(T) <{}; {}; {0}>, ?#rec##1:current_module_alias_type_args(T) <{}; {}; {0, 2}>, #field##0:T <{}; {}; {2}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:current_module_alias_type_args(T), ?#rec##1:current_module_alias_type_args(T))

    1:
        foreign lpvm mutate(~#rec##0:current_module_alias_type_args(T), ?#rec##1:current_module_alias_type_args(T), 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:T) @current_module_alias_type_args:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc tail > {inline} (0 calls)
0: current_module_alias_type_args.tail<0>
tail(#rec##0:current_module_alias_type_args(T) <{}; {}; {0}>, ?#result##0:current_module_alias_type_args(T) <{}; {}; {0}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:current_module_alias_type_args(T), ?#result##0:current_module_alias_type_args(T))

    1:
        foreign lpvm access(~#rec##0:current_module_alias_type_args(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:current_module_alias_type_args(T)) @current_module_alias_type_args:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc tail > {inline} (0 calls)
1: current_module_alias_type_args.tail<1>
tail(#rec##0:current_module_alias_type_args(T) <{}; {}; {0}>, ?#rec##1:current_module_alias_type_args(T) <{}; {}; {0, 2}>, #field##0:current_module_alias_type_args(T) <{}; {}; {2}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:current_module_alias_type_args(T), ?#rec##1:current_module_alias_type_args(T))

    1:
        foreign lpvm {noalias} mutate(~#rec##0:current_module_alias_type_args(T), ?#rec##1:current_module_alias_type_args(T), 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:current_module_alias_type_args(T)) @current_module_alias_type_args:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'current_module_alias_type_args'

source_filename = "!ROOT!/final-dump/current_module_alias_type_args.wybe"
target triple    ????


declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"current_module_alias_type_args.<0>"() {
  %"tmp#14##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#6##0" = ptrtoint ptr %"tmp#14##0" to i64
  %"tmp#15##0" = inttoptr i64 %"tmp#6##0" to ptr
  store i64 42, ptr %"tmp#15##0"
  %"tmp#16##0" = add i64 %"tmp#6##0", 8
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  store i64 0, ptr %"tmp#17##0"
  %"tmp#9##0" = icmp ne i64 %"tmp#6##0", 0
  br i1 %"tmp#9##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#18##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#18##0"
  call ccc void @print_int(i64 %"tmp#2##0")
  call ccc void @putchar(i8 10)
  ret void
if.else.0:
  ret void
}

define external fastcc i64 @"current_module_alias_type_args.cons<0>"(i64 %"head##0", i64 %"tail##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"head##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"tail##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64, i1} @"current_module_alias_type_args.cons<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = add i64 %"#result##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#7##0" = insertvalue {i64, i64, i1} %"tmp#6##0", i64 %"tmp#5##0", 1
  %"tmp#8##0" = insertvalue {i64, i64, i1} %"tmp#7##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#10##0" = insertvalue {i64, i64, i1} %"tmp#9##0", i64 undef, 1
  %"tmp#11##0" = insertvalue {i64, i64, i1} %"tmp#10##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#11##0"
}

define external fastcc i64 @"current_module_alias_type_args.empty<0>"() {
  ret i64 0
}

define external fastcc {i64, i1} @"current_module_alias_type_args.head<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = insertvalue {i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#4##0" = insertvalue {i64, i1} %"tmp#3##0", i1 1, 1
  ret {i64, i1} %"tmp#4##0"
if.else.0:
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 0, 1
  ret {i64, i1} %"tmp#6##0"
}

define external fastcc {i64, i1} @"current_module_alias_type_args.head<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 16, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc {i64, i1} @"current_module_alias_type_args.tail<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = add i64 %"#rec##0", 8
  %"tmp#2##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"current_module_alias_type_args.tail<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 16, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = add i64 %"tmp#3##0", 8
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

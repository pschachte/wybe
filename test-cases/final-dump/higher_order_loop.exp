======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module higher_order_loop
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : higher_order_loop.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: higher_order_loop.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#10##0:wybe.list(T)) @higher_order_loop:nn:nn
    foreign lpvm mutate(~tmp#10##0:wybe.list(T), ?tmp#11##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, higher_order_loop.#closure#2<0><>:T) @higher_order_loop:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#2##0:wybe.list({resource}(wybe.int)), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @higher_order_loop:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#14##0:wybe.list(T)) @higher_order_loop:nn:nn
    foreign lpvm mutate(~tmp#14##0:wybe.list(T), ?tmp#15##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, higher_order_loop.#closure#1<0><>:T) @higher_order_loop:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#0##0:wybe.list({resource}(wybe.int)), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @higher_order_loop:nn:nn
    higher_order_loop.#cont#1<0>(~tmp#0##0:wybe.list({resource}(wybe.int)))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0}> #3 @higher_order_loop:nn:nn


proc #closure#1 > {inline} (1 calls)
0: higher_order_loop.#closure#1<0>
#closure#1(x##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~x##0:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#3##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn


proc #closure#2 > {inline} (1 calls)
0: higher_order_loop.#closure#2<0>
#closure#2(x##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~x##0:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn


proc #cont#1 > {semipure} (2 calls)
0: higher_order_loop.#cont#1<0>
#cont#1(tmp#5##0:wybe.list({resource}(wybe.int)) <{}; {}; {0}>)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool) @higher_order_loop:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?f##0:{resource}(wybe.int)) @higher_order_loop:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list({resource}(wybe.int))) @higher_order_loop:nn:nn
        ~f##0:{resource}(wybe.int)(10:wybe.int) #1 @higher_order_loop:nn:nn
        higher_order_loop.#cont#1<0>(~tmp#5##1:wybe.list({resource}(wybe.int)))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0}> #2 @higher_order_loop:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'higher_order_loop'

source_filename = "!ROOT!/final-dump/higher_order_loop.wybe"
target triple    ????

@"closure#0" = private unnamed_addr constant {ptr} { ptr @"higher_order_loop.#closure#1<0>" }, align 8
@"closure#1" = private unnamed_addr constant {ptr} { ptr @"higher_order_loop.#closure#2<0>" }, align 8

declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"higher_order_loop.<0>"() {
  %"tmp#16##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#10##0" = ptrtoint ptr %"tmp#16##0" to i64
  %"tmp#17##0" = inttoptr i64 %"tmp#10##0" to ptr
  store ptr @"closure#1", ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"tmp#10##0", 8
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  store i64 0, ptr %"tmp#19##0"
  %"tmp#20##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#14##0" = ptrtoint ptr %"tmp#20##0" to i64
  %"tmp#21##0" = inttoptr i64 %"tmp#14##0" to ptr
  store ptr @"closure#0", ptr %"tmp#21##0"
  %"tmp#22##0" = add i64 %"tmp#14##0", 8
  %"tmp#23##0" = inttoptr i64 %"tmp#22##0" to ptr
  store i64 %"tmp#10##0", ptr %"tmp#23##0"
  tail call fastcc void @"higher_order_loop.#cont#1<0>"(i64 %"tmp#14##0")
  ret void
}

define external fastcc void @"higher_order_loop.#closure#1<0>"(i64 %"#env##0", i64 %"generic#x##0") {
  call ccc void @print_int(i64 %"generic#x##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc void @"higher_order_loop.#closure#2<0>"(i64 %"#env##0", i64 %"generic#x##0") {
  call ccc void @print_int(i64 %"generic#x##0")
  ret void
}

define external fastcc void @"higher_order_loop.#cont#1<0>"(i64 %"tmp#5##0") {
  %"tmp#9##0" = icmp ne i64 %"tmp#5##0", 0
  br i1 %"tmp#9##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#10##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"f##0" = load i64, ptr %"tmp#10##0"
  %"tmp#11##0" = add i64 %"tmp#5##0", 8
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  %"tmp#5##1" = load i64, ptr %"tmp#12##0"
  %"tmp#14##0" = inttoptr i64 %"f##0" to ptr
  %"tmp#13##0" = load ptr, ptr %"tmp#14##0"
  tail call fastcc void %"tmp#13##0"(i64 %"f##0", i64 10)
  tail call fastcc void @"higher_order_loop.#cont#1<0>"(i64 %"tmp#5##1")
  ret void
if.else.0:
  ret void
}

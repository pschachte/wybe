======================================================================
AFTER EVERYTHING:
 Module higher_order_loop
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : higher_order_loop.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: higher_order_loop.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#9##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#9##0:wybe.list(T), ?tmp#10##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, higher_order_loop.#closure#2<0><>:T) @list:nn:nn
    foreign lpvm mutate(~tmp#10##0:wybe.list(T), ?tmp#2##0:wybe.list({resource}(wybe.int)), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#13##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#13##0:wybe.list(T), ?tmp#14##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, higher_order_loop.#closure#1<0><>:T) @list:nn:nn
    foreign lpvm mutate(~tmp#14##0:wybe.list(T), ?tmp#0##0:wybe.list({resource}(wybe.int)), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    higher_order_loop.#cont#1<0>(~tmp#0##0:wybe.list({resource}(wybe.int)))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0}> #3 @higher_order_loop:nn:nn


#closure#1 > {inline} (1 calls)
0: higher_order_loop.#closure#1<0>
#closure#1(x##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~x##0:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#3##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


#closure#2 > {inline} (1 calls)
0: higher_order_loop.#closure#2<0>
#closure#2(x##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~x##0:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn


#cont#1 > (2 calls)
0: higher_order_loop.#cont#1<0>
#cont#1(tmp#5##0:wybe.list({resource}(wybe.int)) <{}; {}; {0}>)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#5##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#5##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?f##0:{resource}(wybe.int)) @list:nn:nn
        foreign lpvm access(~tmp#5##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##1:wybe.list({resource}(wybe.int))) @list:nn:nn
        ~f##0:{resource}(wybe.int)(10:wybe.int) #1 @higher_order_loop:nn:nn
        higher_order_loop.#cont#1<0>(~tmp#5##1:wybe.list({resource}(wybe.int)))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0}> #2 @higher_order_loop:nn:nn


  LLVM code       :

; ModuleID = 'higher_order_loop'


 


@higher_order_loop.1 =    constant [1 x i64] [i64 ptrtoint (void (i64, i64)* @"higher_order_loop.#closure#1<0>" to i64)]


@higher_order_loop.0 =    constant [1 x i64] [i64 ptrtoint (void (i64, i64)* @"higher_order_loop.#closure#2<0>" to i64)]


declare external ccc  void @print_int(i64)    


declare external ccc  void @putchar(i8)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"higher_order_loop.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_loop.0, i32 0, i32 0) to i64), i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_loop.1, i32 0, i32 0) to i64), i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  tail call fastcc  void  @"higher_order_loop.#cont#1<0>"(i64  %8)  
  ret void 
}


define external fastcc  void @"higher_order_loop.#closure#1<0>"(i64  %"#env##0", i64  %"x##0") alwaysinline   {
entry:
  tail call ccc  void  @print_int(i64  %"x##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"higher_order_loop.#closure#2<0>"(i64  %"#env##0", i64  %"x##0") alwaysinline   {
entry:
  tail call ccc  void  @print_int(i64  %"x##0")  
  ret void 
}


define external fastcc  void @"higher_order_loop.#cont#1<0>"(i64  %"tmp#5##0")    {
entry:
  %0 = icmp ne i64 %"tmp#5##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"tmp#5##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"tmp#5##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = inttoptr i64 %2 to i64* 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %7 to void (i64, i64)* 
  tail call fastcc  void  %8(i64  %2, i64  10)  
  musttail call fastcc  void  @"higher_order_loop.#cont#1<0>"(i64  %5)  
  ret void 
if.else:
  ret void 
}

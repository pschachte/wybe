======================================================================
AFTER EVERYTHING:
 Module extern_anon_params_a
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : extern_anon_params_a.need<0>
                    extern_anon_params_a.run<0>
  imports         : use wybe
  resources       : 
  procs           : 

need > public {inline,semipure} (1 calls)
0: extern_anon_params_a.need<0>
need(stmt##0:{impure}())<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~stmt##0:{impure}() #0 @extern_anon_params_a:nn:nn


run > public {inline,impure} (0 calls)
0: extern_anon_params_a.run<0>
run(func##0:{impure}())<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    extern_anon_params_a.run#anon#1<0>(~^func##0:{impure}()) #0 @extern_anon_params_a:nn:nn


run#anon#1 > {inline,impure} (1 calls)
0: extern_anon_params_a.run#anon#1<0>
run#anon#1(^func##0:{impure}())<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~func##0:{impure}() #0 @extern_anon_params_a:nn:nn
run#anon#1 > {inline,impure} (1 calls)
1: extern_anon_params_a.run#anon#1<1>
run#anon#1(^func##0:{impure}())<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~^func##0:{impure}() #0 @extern_anon_params_a:nn:nn

  LLVM code       :

; ModuleID = 'extern_anon_params_a'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"extern_anon_params_a.need<0>"(i64  %"stmt##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"stmt##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to void (i64)* 
  tail call fastcc  void  %2(i64  %"stmt##0")  
  ret void 
}


define external fastcc  void @"extern_anon_params_a.run<0>"(i64  %"func##0") alwaysinline   {
entry:
  musttail call fastcc  void  @"extern_anon_params_a.run#anon#1<0>"(i64  %"func##0")  
  ret void 
}


define external fastcc  void @"extern_anon_params_a.run#anon#1<0>"(i64  %"func##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"func##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to void (i64)* 
  tail call fastcc  void  %2(i64  %"func##0")  
  ret void 
}


define external fastcc  void @"extern_anon_params_a.run#anon#1<1>"(i64  %"#env##0") alwaysinline   {
entry:
  %0 = add   i64 %"#env##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = inttoptr i64 %4 to void (i64)* 
  tail call fastcc  void  %5(i64  %2)  
  ret void 
}
--------------------------------------------------
 Module extern_anon_params_b
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : extern_anon_params_b.<0>
  imports         : use extern_anon_params_a
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: extern_anon_params_b.<0>
()<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    extern_anon_params_a.run#anon#1<0>(extern_anon_params_b.#anon#1<1><>:{impure}()) #1 @extern_anon_params_a:nn:nn


#anon#1 > {inline,impure} (1 calls)
0: extern_anon_params_b.#anon#1<0>
#anon#1()<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
#anon#1 > {inline,impure} (1 calls)
1: extern_anon_params_b.#anon#1<1>
#anon#1()<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []

  LLVM code       :

; ModuleID = 'extern_anon_params_b'


 


@extern_anon_params_b.0 =    constant [1 x i64] [i64 ptrtoint (void (i64)* @"extern_anon_params_b.#anon#1<1>" to i64)]


declare external fastcc  void @"extern_anon_params_a.run#anon#1<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"extern_anon_params_b.<0>"() alwaysinline   {
entry:
  tail call fastcc  void  @"extern_anon_params_a.run#anon#1<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @extern_anon_params_b.0, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  void @"extern_anon_params_b.#anon#1<0>"() alwaysinline   {
entry:
  ret void 
}


define external fastcc  void @"extern_anon_params_b.#anon#1<1>"(i64  %"#env##0") alwaysinline   {
entry:
  ret void 
}

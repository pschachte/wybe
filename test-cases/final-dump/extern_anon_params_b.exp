======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module extern_anon_params_a
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : extern_anon_params_a.need<0>
                    extern_anon_params_a.run<0>
  imports         : use wybe
  resources       : 
  procs           : 

proc need > public {inline,semipure} (1 calls)
0: extern_anon_params_a.need<0>
need(stmt##0:{impure}())<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~stmt##0:{impure}() #0 @extern_anon_params_a:nn:nn


proc run > public {inline,impure} (0 calls)
0: extern_anon_params_a.run<0>
run(func##0:{impure}())<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    extern_anon_params_a.run#anon#1<0>(~^func##0:{impure}()) #0 @extern_anon_params_a:nn:nn


proc run#anon#1 > {inline,impure} (1 calls)
0: extern_anon_params_a.run#anon#1<0>
run#anon#1(^func##0:{impure}())<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~func##0:{impure}() #0 @extern_anon_params_a:nn:nn
proc run#anon#1 > {inline,impure} (1 calls)
1: extern_anon_params_a.run#anon#1<1>
run#anon#1(^func##0:{impure}())<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~^func##0:{impure}() #0 @extern_anon_params_a:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'extern_anon_params_a'

source_filename = "!ROOT!/final-dump/extern_anon_params_a.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"extern_anon_params_a.need<0>"(i64 %"stmt##0") {
  %"tmp#1##0" = inttoptr i64 %"stmt##0" to ptr
  %"tmp#0##0" = load ptr, ptr %"tmp#1##0"
  tail call fastcc void %"tmp#0##0"(i64 %"stmt##0")
  ret void
}

define external fastcc void @"extern_anon_params_a.run<0>"(i64 %"func##0") {
  tail call fastcc void @"extern_anon_params_a.run#anon#1<0>"(i64 %"func##0")
  ret void
}

define external fastcc void @"extern_anon_params_a.run#anon#1<0>"(i64 %"func##0") {
  %"tmp#1##0" = inttoptr i64 %"func##0" to ptr
  %"tmp#0##0" = load ptr, ptr %"tmp#1##0"
  tail call fastcc void %"tmp#0##0"(i64 %"func##0")
  ret void
}

define external fastcc void @"extern_anon_params_a.run#anon#1<1>"(i64 %"#env##0") {
  %"tmp#1##0" = add i64 %"#env##0", 8
  %"tmp#2##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"generic#func##0" = load i64, ptr %"tmp#2##0"
  %"func##0" = bitcast i64 %"generic#func##0" to i64
  %"tmp#4##0" = inttoptr i64 %"func##0" to ptr
  %"tmp#3##0" = load ptr, ptr %"tmp#4##0"
  tail call fastcc void %"tmp#3##0"(i64 %"func##0")
  ret void
}

--------------------------------------------------
 Module extern_anon_params_b
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : extern_anon_params_b.<0>
  imports         : use extern_anon_params_a
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: extern_anon_params_b.<0>
()<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    extern_anon_params_a.run#anon#1<0>(extern_anon_params_b.#anon#1<1><>:{impure}()) #1 @extern_anon_params_b:nn:nn


proc #anon#1 > {inline,impure} (1 calls)
0: extern_anon_params_b.#anon#1<0>
#anon#1()<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
proc #anon#1 > {inline,impure} (1 calls)
1: extern_anon_params_b.#anon#1<1>
#anon#1()<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'extern_anon_params_b'

source_filename = "!ROOT!/final-dump/extern_anon_params_b.wybe"
target triple    ????

@"closure#0" = private unnamed_addr constant {ptr} { ptr @"extern_anon_params_b.#anon#1<1>" }, align 8

declare external fastcc void @"extern_anon_params_a.run#anon#1<0>"(i64)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"extern_anon_params_b.<0>"() {
  tail call fastcc void @"extern_anon_params_a.run#anon#1<0>"(i64 ptrtoint( ptr @"closure#0" to i64 ))
  ret void
}

define external fastcc void @"extern_anon_params_b.#anon#1<0>"() {
  ret void
}

define external fastcc void @"extern_anon_params_b.#anon#1<1>"(i64 %"#env##0") {
  ret void
}

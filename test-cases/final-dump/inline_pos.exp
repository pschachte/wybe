======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    arguments: command_line.arguments
                    argv: command_line.argv
                    command: command_line.command
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:nn:nn)]
                    arguments: fromList [(command_line.arguments,wybe.array(wybe.c_string) = array(argc @command_line:nn:nn, argv @command_line:nn:nn) @command_line:nn:nn @command_line:nn:nn)]
                    argv: fromList [(command_line.argv,wybe.array.raw_array @command_line:nn:nn)]
                    command: fromList [(command_line.command,wybe.c_string = c"" @command_line:nn:nn @command_line:nn:nn)]
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:nn:nn @command_line:nn:nn)]
  procs           : 

module top-level code > public {semipure} (0 calls)
0: command_line.<0>
()<{<<command_line.arguments>>, <<command_line.command>>}; {<<command_line.arguments>>, <<command_line.command>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<command_line.arguments>>:wybe.array(wybe.c_string), ?%arguments##0:wybe.array(wybe.c_string))
    wybe.array.[|]<0>(?command##1:wybe.c_string, ?arguments##2:wybe.array(wybe.c_string), ~arguments##0:wybe.array(wybe.c_string), ?tmp#8##0:wybe.bool) #0 @command_line:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        foreign c {terminal,semipure} error_exit(c"command_line:18:15":wybe.c_string, c"Erroneous program argument vector":wybe.c_string) @command_line:nn:nn

    1:
        foreign lpvm store(~%arguments##2:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
        foreign lpvm store(~%command##1:wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn



proc set_exit_code > public {inline} (0 calls)
0: command_line.set_exit_code<0>
set_exit_code(code##0:wybe.int)<{}; {<<command_line.exit_code>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(~code##0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'command_line'

source_filename = "!ROOT!/../wybelibs/command_line.o"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"Erroneous program argument vector\00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"command_line:18:15\00", align 8

declare external fastcc {i64, i64, i1} @"wybe.array.[|]<0>"(i64)
declare external ccc void @error_exit(i64, i64)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)
@"resource#command_line.argc" = global i64 undef
@"resource#command_line.arguments" = global i64 undef
@"resource#command_line.argv" = global i64 undef
@"resource#command_line.command" = global i64 undef
@"resource#command_line.exit_code" = global i64 undef

define external fastcc void @"command_line.<0>"() {
  %"arguments##0" = load i64, ptr @"resource#command_line.arguments"
  %"tmp#11##0" = tail call fastcc {i64, i64, i1} @"wybe.array.[|]<0>"(i64 %"arguments##0")
  %"command##1" = extractvalue {i64, i64, i1}%"tmp#11##0", 0
  %"arguments##2" = extractvalue {i64, i64, i1}%"tmp#11##0", 1
  %"tmp#8##0" = extractvalue {i64, i64, i1}%"tmp#11##0", 2
  br i1 %"tmp#8##0", label %if.then.0, label %if.else.0
if.then.0:
  store i64 %"arguments##2", ptr @"resource#command_line.arguments"
  store i64 %"command##1", ptr @"resource#command_line.command"
  ret void
if.else.0:
  call ccc void @error_exit(i64 ptrtoint( ptr @"cstring#1" to i64 ), i64 ptrtoint( ptr @"cstring#0" to i64 ))
  ret void
}

define external fastcc void @"command_line.set_exit_code<0>"(i64 %"code##0") {
  store i64 %"code##0", ptr @"resource#command_line.exit_code"
  ret void
}

--------------------------------------------------
 Module inline_pos
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : inline_pos.<0>
  imports         : use command_line
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: inline_pos.<0>
()<{<<command_line.arguments>>, <<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(6,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm load(<<command_line.arguments>>:wybe.array(wybe.c_string), ?%arguments##0:wybe.array(wybe.c_string)) @inline_pos:nn:nn
    foreign lpvm access(~arguments##0:wybe.array(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @inline_pos:nn:nn
    foreign llvm add(~tmp#0##0:wybe.int, 1:wybe.int, ?v##1:wybe.int) @inline_pos:nn:nn
    wybe.int.fmt<2>(~v##1:wybe.int, 0:wybe.int, ' ':wybe.char, ?tmp#2##0:wybe.string) #5 @inline_pos:nn:nn
    wybe.string.,,<0>("v = ":wybe.string, ~tmp#2##0:wybe.string, ?tmp#1##0:wybe.string) #3 @inline_pos:nn:nn
    wybe.string.print<0>[410bae77d3](~tmp#1##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @inline_pos:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#7##0:wybe.phantom) @inline_pos:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @inline_pos:nn:nn
    foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @inline_pos:nn:nn


proc myincr > {inline} (1 calls)
0: inline_pos.myincr<0>
myincr(x##0:wybe.int, ?x##1:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~x##0:wybe.int, 1:wybe.int, ?x##1:wybe.int) @inline_pos:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'inline_pos'

source_filename = "!ROOT!/final-dump/inline_pos.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"v = \00", align 8
@"string#1" = private unnamed_addr constant {i64, i64} { i64 4, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8

@"resource#command_line.arguments" = external global i64
declare external fastcc i64 @"wybe.int.fmt<2>"(i64, i64, i8)
declare external fastcc i64 @"wybe.string.,,<0>"(i64, i64)
declare external fastcc void @"wybe.string.print<0>[410bae77d3]"(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"inline_pos.<0>"() {
  %"arguments##0" = load i64, ptr @"resource#command_line.arguments"
  %"tmp#9##0" = inttoptr i64 %"arguments##0" to ptr
  %"tmp#0##0" = load i64, ptr %"tmp#9##0"
  %"v##1" = add i64 %"tmp#0##0", 1
  %"tmp#2##0" = tail call fastcc i64 @"wybe.int.fmt<2>"(i64 %"v##1", i64 0, i8 32)
  %"tmp#1##0" = tail call fastcc i64 @"wybe.string.,,<0>"(i64 ptrtoint( ptr @"string#1" to i64 ), i64 %"tmp#2##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 %"tmp#1##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i64 @"inline_pos.myincr<0>"(i64 %"x##0") {
  %"tmp#3##0" = add i64 %"x##0", 1
  ret i64 %"tmp#3##0"
}

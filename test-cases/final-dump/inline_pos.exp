======================================================================
AFTER EVERYTHING:
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    arguments: command_line.arguments
                    argv: command_line.argv
                    command: command_line.command
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:nn:nn)]
                    arguments: fromList [(command_line.arguments,wybe.array(wybe.c_string) = array(argc @command_line:nn:nn, argv @command_line:nn:nn) @command_line:nn:nn @command_line:nn:nn)]
                    argv: fromList [(command_line.argv,wybe.array.raw_array @command_line:nn:nn)]
                    command: fromList [(command_line.command,wybe.c_string = c"" @command_line:nn:nn @command_line:nn:nn)]
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:nn:nn @command_line:nn:nn)]
  procs           : 

module top-level code > public {semipure} (0 calls)
0: command_line.<0>
()<{<<command_line.arguments>>, <<command_line.command>>}; {<<command_line.arguments>>, <<command_line.command>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(0,(wybe.array.[|]<0>,fromList [NonAliasedParamCond 2 []]))]
    foreign lpvm load(<<command_line.arguments>>:wybe.array(wybe.c_string), ?%arguments##0:wybe.array(wybe.c_string))
    wybe.array.[|]<0>[785a827a1b](?command##1:wybe.c_string, ?arguments##2:wybe.array(wybe.c_string), ~arguments##0:wybe.array(wybe.c_string), ?tmp#8##0:wybe.bool) #0 @command_line:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        foreign c {terminal,semipure} error_exit(c"command_line:18:15":wybe.c_string, c"Erroneous program argument vector":wybe.c_string) @command_line:nn:nn

    1:
        foreign lpvm store(~%arguments##2:wybe.array(wybe.c_string), <<command_line.arguments>>:wybe.array(wybe.c_string)) @command_line:nn:nn
        foreign lpvm store(~%command##1:wybe.c_string, <<command_line.command>>:wybe.c_string) @command_line:nn:nn



proc set_exit_code > public {inline} (0 calls)
0: command_line.set_exit_code<0>
set_exit_code(code##0:wybe.int)<{}; {<<command_line.exit_code>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(~code##0:wybe.int, <<command_line.exit_code>>:wybe.int) @command_line:nn:nn

  LLVM code       :

; ModuleID = 'command_line'


 


@"resource#command_line.argc" =    global i64 undef


@"resource#command_line.arguments" =    global i64 undef


@"resource#command_line.argv" =    global i64 undef


@"resource#command_line.command" =    global i64 undef


@"resource#command_line.exit_code" =    global i64 undef


@command_line.1 =    constant [?? x i8] c"Erroneous program argument vector\00"


@command_line.0 =    constant [?? x i8] c"command_line:18:15\00"


declare external ccc  void @error_exit(i64, i64)    


declare external fastcc  {i64, i64, i1} @"wybe.array.[|]<0>[785a827a1b]"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"command_line.<0>"()    {
entry:
  %0 = load  i64, i64* @"resource#command_line.arguments" 
  %1 = tail call fastcc  {i64, i64, i1}  @"wybe.array.[|]<0>[785a827a1b]"(i64  %0)  
  %2 = extractvalue {i64, i64, i1} %1, 0 
  %3 = extractvalue {i64, i64, i1} %1, 1 
  %4 = extractvalue {i64, i64, i1} %1, 2 
  br i1 %4, label %if.then, label %if.else 
if.then:
  store  i64 %3, i64* @"resource#command_line.arguments" 
  store  i64 %2, i64* @"resource#command_line.command" 
  ret void 
if.else:
  tail call ccc  void  @error_exit(i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.0, i32 0, i32 0) to i64), i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @command_line.1, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  void @"command_line.set_exit_code<0>"(i64  %"code##0") alwaysinline   {
entry:
  store  i64 %"code##0", i64* @"resource#command_line.exit_code" 
  ret void 
}
--------------------------------------------------
 Module inline_pos
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : inline_pos.<0>
  imports         : use command_line
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: inline_pos.<0>
()<{<<command_line.arguments>>, <<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(5,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm load(<<command_line.arguments>>:wybe.array(wybe.c_string), ?%arguments##0:wybe.array(wybe.c_string)) @inline_pos:nn:nn
    foreign lpvm access(~arguments##0:wybe.array(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @inline_pos:nn:nn
    foreign llvm add(~tmp#0##0:wybe.int, 1:wybe.int, ?v##1:wybe.int) @inline_pos:nn:nn
    wybe.int.fmt<0>(~v##1:wybe.int, ?tmp#2##0:wybe.string) #2 @inline_pos:nn:nn
    wybe.string.,,<0>("v = ":wybe.string, ~tmp#2##0:wybe.string, ?tmp#1##0:wybe.string) #3 @inline_pos:nn:nn
    wybe.string.print<0>[410bae77d3](~tmp#1##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @inline_pos:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @inline_pos:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @inline_pos:nn:nn
    foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @inline_pos:nn:nn


proc myincr > {inline} (1 calls)
0: inline_pos.myincr<0>
myincr(x##0:wybe.int, ?x##1:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~x##0:wybe.int, 1:wybe.int, ?x##1:wybe.int) @inline_pos:nn:nn

  LLVM code       :

; ModuleID = 'inline_pos'


 


@"resource#command_line.arguments" = external   global i64 


@inline_pos.1 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @inline_pos.0 to i64) }


@inline_pos.0 =    constant [?? x i8] c"v = \00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>[410bae77d3]"(i64)    


declare external fastcc  i64 @"wybe.string.,,<0>"(i64, i64)    


declare external fastcc  i64 @"wybe.int.fmt<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"inline_pos.<0>"()    {
entry:
  %0 = load  i64, i64* @"resource#command_line.arguments" 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %2, 1 
  %4 = tail call fastcc  i64  @"wybe.int.fmt<0>"(i64  %3)  
  %5 = tail call fastcc  i64  @"wybe.string.,,<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @inline_pos.1, i32 0, i32 0) to i64), i64  %4)  
  tail call fastcc  void  @"wybe.string.print<0>[410bae77d3]"(i64  %5)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"inline_pos.myincr<0>"(i64  %"x##0") alwaysinline   {
entry:
  %0 = add   i64 %"x##0", 1 
  ret i64 %0 
}

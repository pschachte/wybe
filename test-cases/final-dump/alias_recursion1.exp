======================================================================
AFTER EVERYTHING:
 Module alias_recursion1
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : alias_recursion1.<0>
                    alias_recursion1.if_test<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: alias_recursion1.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#4##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#4##0:position.position, ?tmp#5##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#5##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 101:wybe.int) @position:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#8##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#8##0:position.position, ?tmp#9##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, -200:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#9##0:position.position, ?tmp#1##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, -201:wybe.int) @position:nn:nn
    wybe.string.print<0>("--- before proc call: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #22 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("expect pa(100,101):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @alias_recursion1:nn:nn
    position.printPosition<0>(tmp#0##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @alias_recursion1:nn:nn
    wybe.string.print<0>("expect pb(-200,-201):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @alias_recursion1:nn:nn
    position.printPosition<0>(tmp#1##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6 @alias_recursion1:nn:nn
    alias_recursion1.if_test<0>(tmp#0##0:position.position, tmp#1##0:position.position, ?r##0:position.position) #7 @alias_recursion1:nn:nn
    wybe.string.print<0>("--- after calling if_test, pa and pb should be the same: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #23 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#15##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("expect pa(100,101):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #9 @alias_recursion1:nn:nn
    position.printPosition<0>(tmp#0##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #10 @alias_recursion1:nn:nn
    wybe.string.print<0>("expect pb(-200,-201):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #11 @alias_recursion1:nn:nn
    position.printPosition<0>(~tmp#1##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #12 @alias_recursion1:nn:nn
    wybe.string.print<0>("--- expected result to be same as pb: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #24 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#17##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#17##0:wybe.phantom, ?tmp#18##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#18##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("expect r(-200,-201):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #14 @alias_recursion1:nn:nn
    position.printPosition<0>(r##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #15 @alias_recursion1:nn:nn
    wybe.string.print<0>("--- modify pa^x: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #25 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#20##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#21##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign lpvm {noalias} mutate(~tmp#0##0:position.position, ?pa##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, -1000:wybe.int) @position:nn:nn
    wybe.string.print<0>("expect pa(-1000,101):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #18 @alias_recursion1:nn:nn
    position.printPosition<0>(~pa##1:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #19 @alias_recursion1:nn:nn
    wybe.string.print<0>("expect r still (-200,-201):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #20 @alias_recursion1:nn:nn
    position.printPosition<0>(~r##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #21 @alias_recursion1:nn:nn


if_test > public (2 calls)
0: alias_recursion1.if_test<0>
if_test(a##0:position.position, b##0:position.position, ?r##0:position.position)<{}; {}>:
  AliasPairs: [(a##0,b##0),(a##0,r##0),(b##0,r##0)]
  InterestingCallProperties: []
    foreign lpvm access(a##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @position:nn:nn
    foreign llvm icmp_sgt(~tmp#0##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(~a##0:position.position, ?r##0:position.position) @alias_recursion1:nn:nn

    1:
        alias_recursion1.if_test<0>(~b##0:position.position, ~a##0:position.position, ?r##0:position.position) #2 @alias_recursion1:nn:nn


  LLVM code       :

; ModuleID = 'alias_recursion1'


 


@alias_recursion1.13 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @alias_recursion1.12 to i64) }


@alias_recursion1.3 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @alias_recursion1.2 to i64) }


@alias_recursion1.11 =    constant {i64, i64} { i64 20, i64 ptrtoint ([?? x i8]* @alias_recursion1.10 to i64) }


@alias_recursion1.15 =    constant {i64, i64} { i64 21, i64 ptrtoint ([?? x i8]* @alias_recursion1.14 to i64) }


@alias_recursion1.5 =    constant {i64, i64} { i64 21, i64 ptrtoint ([?? x i8]* @alias_recursion1.4 to i64) }


@alias_recursion1.1 =    constant {i64, i64} { i64 22, i64 ptrtoint ([?? x i8]* @alias_recursion1.0 to i64) }


@alias_recursion1.17 =    constant {i64, i64} { i64 27, i64 ptrtoint ([?? x i8]* @alias_recursion1.16 to i64) }


@alias_recursion1.9 =    constant {i64, i64} { i64 38, i64 ptrtoint ([?? x i8]* @alias_recursion1.8 to i64) }


@alias_recursion1.7 =    constant {i64, i64} { i64 57, i64 ptrtoint ([?? x i8]* @alias_recursion1.6 to i64) }


@alias_recursion1.6 =    constant [?? x i8] c"--- after calling if_test, pa and pb should be the same: \00"


@alias_recursion1.0 =    constant [?? x i8] c"--- before proc call: \00"


@alias_recursion1.8 =    constant [?? x i8] c"--- expected result to be same as pb: \00"


@alias_recursion1.12 =    constant [?? x i8] c"--- modify pa^x: \00"


@alias_recursion1.14 =    constant [?? x i8] c"expect pa(-1000,101):\00"


@alias_recursion1.2 =    constant [?? x i8] c"expect pa(100,101):\00"


@alias_recursion1.4 =    constant [?? x i8] c"expect pb(-200,-201):\00"


@alias_recursion1.16 =    constant [?? x i8] c"expect r still (-200,-201):\00"


@alias_recursion1.10 =    constant [?? x i8] c"expect r(-200,-201):\00"


declare external fastcc  void @"position.printPosition<0>"(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  void @putchar(i8)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"alias_recursion1.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 100, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 101, i64* %7 
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 -200, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 -201, i64* %15 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_recursion1.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_recursion1.3, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %2)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_recursion1.5, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %10)  
  %16 = tail call fastcc  i64  @"alias_recursion1.if_test<0>"(i64  %2, i64  %10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_recursion1.7, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_recursion1.3, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %2)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_recursion1.5, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_recursion1.9, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_recursion1.11, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %16)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_recursion1.13, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %17 = trunc i64 16 to i32  
  %18 = tail call ccc  i8*  @wybe_malloc(i32  %17)  
  %19 = ptrtoint i8* %18 to i64 
  %20 = inttoptr i64 %19 to i8* 
  %21 = inttoptr i64 %2 to i8* 
  %22 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %20, i8*  %21, i32  %22, i1  0)  
  %23 = inttoptr i64 %19 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  store  i64 -1000, i64* %24 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_recursion1.15, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %19)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_recursion1.17, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %16)  
  ret void 
}


define external fastcc  i64 @"alias_recursion1.if_test<0>"(i64  %"a##0", i64  %"b##0")    {
entry:
  %0 = inttoptr i64 %"a##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = icmp sgt i64 %2, 0 
  br i1 %3, label %if.then, label %if.else 
if.then:
  %4 = musttail call fastcc  i64  @"alias_recursion1.if_test<0>"(i64  %"b##0", i64  %"a##0")  
  ret i64 %4 
if.else:
  ret i64 %"a##0" 
}
--------------------------------------------------
 Module position
  representation  : (not a type)
  public submods  : position -> position.position
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : public use position.position
                    use wybe
  resources       : 
  submodules      : position.position
  procs           : 

printPosition > public (0 calls)
0: position.printPosition<0>
printPosition(pos##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>(" (":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @position:nn:nn
    foreign lpvm access(pos##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(",":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @position:nn:nn
    foreign lpvm access(~pos##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#1##0:wybe.int, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'position'


 


@position.3 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.2 to i64) }


@position.5 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.4 to i64) }


@position.1 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @position.0 to i64) }


@position.0 =    constant [?? x i8] c" (\00"


@position.4 =    constant [?? x i8] c")\00"


@position.2 =    constant [?? x i8] c",\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"position.printPosition<0>"(i64  %"pos##0")    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.1, i32 0, i32 0) to i64))  
  %0 = inttoptr i64 %"pos##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  tail call ccc  void  @print_int(i64  %2)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.3, i32 0, i32 0) to i64))  
  %3 = add   i64 %"pos##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  tail call ccc  void  @print_int(i64  %6)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.5, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module position.position
  representation  : address
  public submods  : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: position.position.=<0>
=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



position > public {inline} (0 calls)
0: position.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:position.position) @position:nn:nn
    foreign lpvm mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~#rec##1:position.position, ?#result##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int) @position:nn:nn
position > public {inline} (6 calls)
1: position.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#result##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @position:nn:nn


x > public {inline} (0 calls)
0: position.position.x<0>
x(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
x > public {inline} (0 calls)
1: position.position.x<1>
x(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


y > public {inline} (0 calls)
0: position.position.y<0>
y(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
y > public {inline} (0 calls)
1: position.position.y<1>
y(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


~= > public {inline} (0 calls)
0: position.position.~=<0>
~=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'position.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"position.position.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = icmp eq i64 %2, %9 
  br i1 %14, label %if.then, label %if.else 
if.then:
  %15 = icmp eq i64 %6, %13 
  ret i1 %15 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"position.position.position<0>"(i64  %"x##0", i64  %"y##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"x##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"y##0", i64* %7 
  ret i64 %2 
}


define external fastcc  {i64, i64} @"position.position.position<1>"(i64  %"#result##0")    {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i64} undef, i64 %2, 0 
  %8 = insertvalue {i64, i64} %7, i64 %6, 1 
  ret {i64, i64} %8 
}


define external fastcc  i64 @"position.position.x<0>"(i64  %"#rec##0")    {
entry:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"position.position.x<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i64 @"position.position.y<0>"(i64  %"#rec##0")    {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  ret i64 %3 
}


define external fastcc  i64 @"position.position.y<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"#field##0", i64* %8 
  ret i64 %2 
}


define external fastcc  i1 @"position.position.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = icmp eq i64 %2, %9 
  br i1 %14, label %if.then, label %if.else 
if.then:
  %15 = icmp eq i64 %6, %13 
  %16 = xor i1 %15, 1 
  ret i1 %16 
if.else:
  %17 = xor i1 0, 1 
  ret i1 %17 
}

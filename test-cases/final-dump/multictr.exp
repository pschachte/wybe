======================================================================
AFTER EVERYTHING:
 Module multictr
  representation  : (not a type)
  public submods  : card -> multictr.card
                    complicated -> multictr.complicated
                    length -> multictr.length
                    maybe_int -> multictr.maybe_int
                    number -> multictr.number
                    perhaps -> multictr.perhaps
                    rank -> multictr.rank
                    simple -> multictr.simple
                    suit -> multictr.suit
                    unit -> multictr.unit
  public resources: 
  public procs    : multictr.card.=<0>
                    multictr.card.card<0>
                    multictr.card.card<1>
                    multictr.card.rank<0>
                    multictr.card.rank<1>
                    multictr.card.suit<0>
                    multictr.card.suit<1>
                    multictr.card.~=<0>
                    multictr.complicated.=<0>
                    multictr.complicated.autumn<0>
                    multictr.complicated.c01<0>
                    multictr.complicated.c01<1>
                    multictr.complicated.c02<0>
                    multictr.complicated.c02<1>
                    multictr.complicated.c03<0>
                    multictr.complicated.c03<1>
                    multictr.complicated.c04<0>
                    multictr.complicated.c04<1>
                    multictr.complicated.c05<0>
                    multictr.complicated.c05<1>
                    multictr.complicated.c06<0>
                    multictr.complicated.c06<1>
                    multictr.complicated.c07<0>
                    multictr.complicated.c07<1>
                    multictr.complicated.c08<0>
                    multictr.complicated.c08<1>
                    multictr.complicated.c09<0>
                    multictr.complicated.c09<1>
                    multictr.complicated.c10<0>
                    multictr.complicated.c10<1>
                    multictr.complicated.c11<0>
                    multictr.complicated.c11<1>
                    multictr.complicated.c12<0>
                    multictr.complicated.c12<1>
                    multictr.complicated.c13<0>
                    multictr.complicated.c13<1>
                    multictr.complicated.c14<0>
                    multictr.complicated.c14<1>
                    multictr.complicated.c15<0>
                    multictr.complicated.c15<1>
                    multictr.complicated.c16<0>
                    multictr.complicated.c16<1>
                    multictr.complicated.c17<0>
                    multictr.complicated.c17<1>
                    multictr.complicated.f01<0>
                    multictr.complicated.f01<1>
                    multictr.complicated.f02<0>
                    multictr.complicated.f02<1>
                    multictr.complicated.f03<0>
                    multictr.complicated.f03<1>
                    multictr.complicated.f04<0>
                    multictr.complicated.f04<1>
                    multictr.complicated.f05<0>
                    multictr.complicated.f05<1>
                    multictr.complicated.f06<0>
                    multictr.complicated.f06<1>
                    multictr.complicated.f07<0>
                    multictr.complicated.f07<1>
                    multictr.complicated.f08<0>
                    multictr.complicated.f08<1>
                    multictr.complicated.f09<0>
                    multictr.complicated.f09<1>
                    multictr.complicated.f10<0>
                    multictr.complicated.f10<1>
                    multictr.complicated.f11<0>
                    multictr.complicated.f11<1>
                    multictr.complicated.f12<0>
                    multictr.complicated.f12<1>
                    multictr.complicated.f13<0>
                    multictr.complicated.f13<1>
                    multictr.complicated.f14<0>
                    multictr.complicated.f14<1>
                    multictr.complicated.f15<0>
                    multictr.complicated.f15<1>
                    multictr.complicated.f16<0>
                    multictr.complicated.f16<1>
                    multictr.complicated.f17<0>
                    multictr.complicated.f17<1>
                    multictr.complicated.spring<0>
                    multictr.complicated.summer<0>
                    multictr.complicated.winter<0>
                    multictr.complicated.~=<0>
                    multictr.length.=<0>
                    multictr.length.metres<0>
                    multictr.length.metres<1>
                    multictr.length.value<0>
                    multictr.length.value<1>
                    multictr.length.~=<0>
                    multictr.maybe_int.=<0>
                    multictr.maybe_int.just<0>
                    multictr.maybe_int.just<1>
                    multictr.maybe_int.nothing<0>
                    multictr.maybe_int.value<0>
                    multictr.maybe_int.value<1>
                    multictr.maybe_int.~=<0>
                    multictr.number.=<0>
                    multictr.number.float<0>
                    multictr.number.float<1>
                    multictr.number.float_value<0>
                    multictr.number.float_value<1>
                    multictr.number.int<0>
                    multictr.number.int<1>
                    multictr.number.int_value<0>
                    multictr.number.int_value<1>
                    multictr.number.~=<0>
                    multictr.perhaps.=<0>
                    multictr.perhaps.content<0>
                    multictr.perhaps.content<1>
                    multictr.perhaps.perhaps<0>
                    multictr.perhaps.perhaps<1>
                    multictr.perhaps.~=<0>
                    multictr.rank.=<0>
                    multictr.rank.ace<0>
                    multictr.rank.jack<0>
                    multictr.rank.king<0>
                    multictr.rank.queen<0>
                    multictr.rank.r10<0>
                    multictr.rank.r2<0>
                    multictr.rank.r3<0>
                    multictr.rank.r4<0>
                    multictr.rank.r5<0>
                    multictr.rank.r6<0>
                    multictr.rank.r7<0>
                    multictr.rank.r8<0>
                    multictr.rank.r9<0>
                    multictr.rank.~=<0>
                    multictr.simple.=<0>
                    multictr.simple.one<0>
                    multictr.simple.one<1>
                    multictr.simple.one_field<0>
                    multictr.simple.one_field<1>
                    multictr.simple.two<0>
                    multictr.simple.two<1>
                    multictr.simple.two_field1<0>
                    multictr.simple.two_field1<1>
                    multictr.simple.two_field2<0>
                    multictr.simple.two_field2<1>
                    multictr.simple.zero<0>
                    multictr.simple.~=<0>
                    multictr.suit.=<0>
                    multictr.suit.clubs<0>
                    multictr.suit.diamonds<0>
                    multictr.suit.hearts<0>
                    multictr.suit.spades<0>
                    multictr.suit.~=<0>
                    multictr.unit.=<0>
                    multictr.unit.unit<0>
                    multictr.unit.~=<0>
  imports         : public use multictr.card
                    public use multictr.complicated
                    public use multictr.length
                    public use multictr.maybe_int
                    public use multictr.number
                    public use multictr.perhaps
                    public use multictr.rank
                    public use multictr.simple
                    public use multictr.suit
                    public use multictr.unit
                    use wybe
  resources       : 
  submodules      : multictr.card, multictr.complicated, multictr.length, multictr.maybe_int, multictr.number, multictr.perhaps, multictr.rank, multictr.simple, multictr.suit, multictr.unit
  procs           : 


  LLVM code       :

; ModuleID = 'multictr'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    
--------------------------------------------------
 Module multictr.card
  representation  : 6 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.card.=<0>
                    multictr.card.card<0>
                    multictr.card.card<1>
                    multictr.card.rank<0>
                    multictr.card.rank<1>
                    multictr.card.suit<0>
                    multictr.card.suit<1>
                    multictr.card.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: multictr.card.=<0>
=(#left##0:multictr.card, #right##0:multictr.card, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.card, ~#right##0:multictr.card, ?#success##0:wybe.bool)


card > public {inline} (0 calls)
0: multictr.card.card<0>
card(rank##0:multictr.rank, suit##0:multictr.suit, ?#result##3:multictr.card)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm shl(~rank##0:multictr.card, 2:multictr.card, ?#temp##0:multictr.card) @multictr:nn:nn
    foreign llvm or(~#temp##0:multictr.card, ~suit##0:multictr.card, ?#result##3:multictr.card) @multictr:nn:nn
card > public {inline} (0 calls)
1: multictr.card.card<1>
card(?rank##0:multictr.rank, ?suit##0:multictr.suit, #result##0:multictr.card)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm lshr(#result##0:multictr.card, 2:multictr.card, ?#temp##0:multictr.card) @multictr:nn:nn
    foreign llvm and(~#temp##0:multictr.card, 15:multictr.card, ?#temp2##0:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#temp2##0:multictr.card, ?rank##0:multictr.rank) @multictr:nn:nn
    foreign llvm and(~#result##0:multictr.card, 3:multictr.card, ?#temp2##1:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#temp2##1:multictr.card, ?suit##0:multictr.suit) @multictr:nn:nn


rank > public {inline} (0 calls)
0: multictr.card.rank<0>
rank(#rec##0:multictr.card, ?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm lshr(~#rec##0:multictr.card, 2:multictr.card, ?#rec##1:multictr.card) @multictr:nn:nn
    foreign llvm and(~#rec##1:multictr.card, 15:multictr.card, ?#field##0:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#field##0:multictr.card, ?#result##0:multictr.rank) @multictr:nn:nn
rank > public {inline} (0 calls)
1: multictr.card.rank<1>
rank(#rec##0:multictr.card, ?#rec##2:multictr.card, #field##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(~#rec##0:multictr.card, -61:multictr.card, ?#rec##1:multictr.card) @multictr:nn:nn
    foreign llvm shl(~#field##0:multictr.card, 2:multictr.card, ?#temp##0:multictr.card) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.card, ~#temp##0:multictr.card, ?#rec##2:multictr.card) @multictr:nn:nn


suit > public {inline} (0 calls)
0: multictr.card.suit<0>
suit(#rec##0:multictr.card, ?#result##0:multictr.suit)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(~#rec##0:multictr.card, 3:multictr.card, ?#field##0:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#field##0:multictr.card, ?#result##0:multictr.suit) @multictr:nn:nn
suit > public {inline} (0 calls)
1: multictr.card.suit<1>
suit(#rec##0:multictr.card, ?#rec##2:multictr.card, #field##0:multictr.suit)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(~#rec##0:multictr.card, -4:multictr.card, ?#rec##1:multictr.card) @multictr:nn:nn
    foreign llvm or(~#field##0:multictr.card, ~#rec##1:multictr.card, ?#rec##2:multictr.card) @multictr:nn:nn


~= > public {inline} (0 calls)
0: multictr.card.~=<0>
~=(#left##0:multictr.card, #right##0:multictr.card, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.card, ~#right##0:multictr.card, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.card'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.card.=<0>"(i6  %"#left##0", i6  %"#right##0")    {
entry:
  %0 = icmp eq i6 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i6 @"multictr.card.card<0>"(i4  %"rank##0", i2  %"suit##0")    {
entry:
  %0 = zext i4 %"rank##0" to i6  
  %1 = shl   i6 %0, 2 
  %2 = zext i2 %"suit##0" to i6  
  %3 = or i6 %1, %2 
  ret i6 %3 
}


define external fastcc  {i4, i2} @"multictr.card.card<1>"(i6  %"#result##0")    {
entry:
  %0 = lshr  i6 %"#result##0", 2 
  %1 = and i6 %0, 15 
  %2 = trunc i6 %1 to i4  
  %3 = and i6 %"#result##0", 3 
  %4 = trunc i6 %3 to i2  
  %5 = insertvalue {i4, i2} undef, i4 %2, 0 
  %6 = insertvalue {i4, i2} %5, i2 %4, 1 
  ret {i4, i2} %6 
}


define external fastcc  i4 @"multictr.card.rank<0>"(i6  %"#rec##0")    {
entry:
  %0 = lshr  i6 %"#rec##0", 2 
  %1 = and i6 %0, 15 
  %2 = trunc i6 %1 to i4  
  ret i4 %2 
}


define external fastcc  i6 @"multictr.card.rank<1>"(i6  %"#rec##0", i4  %"#field##0")    {
entry:
  %0 = and i6 %"#rec##0", -61 
  %1 = zext i4 %"#field##0" to i6  
  %2 = shl   i6 %1, 2 
  %3 = or i6 %0, %2 
  ret i6 %3 
}


define external fastcc  i2 @"multictr.card.suit<0>"(i6  %"#rec##0")    {
entry:
  %0 = and i6 %"#rec##0", 3 
  %1 = trunc i6 %0 to i2  
  ret i2 %1 
}


define external fastcc  i6 @"multictr.card.suit<1>"(i6  %"#rec##0", i2  %"#field##0")    {
entry:
  %0 = and i6 %"#rec##0", -4 
  %1 = zext i2 %"#field##0" to i6  
  %2 = or i6 %1, %0 
  ret i6 %2 
}


define external fastcc  i1 @"multictr.card.~=<0>"(i6  %"#left##0", i6  %"#right##0")    {
entry:
  %0 = icmp eq i6 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.complicated
  representation  : address
  public submods  : 
  public resources: 
  public procs    : multictr.complicated.=<0>
                    multictr.complicated.autumn<0>
                    multictr.complicated.c01<0>
                    multictr.complicated.c01<1>
                    multictr.complicated.c02<0>
                    multictr.complicated.c02<1>
                    multictr.complicated.c03<0>
                    multictr.complicated.c03<1>
                    multictr.complicated.c04<0>
                    multictr.complicated.c04<1>
                    multictr.complicated.c05<0>
                    multictr.complicated.c05<1>
                    multictr.complicated.c06<0>
                    multictr.complicated.c06<1>
                    multictr.complicated.c07<0>
                    multictr.complicated.c07<1>
                    multictr.complicated.c08<0>
                    multictr.complicated.c08<1>
                    multictr.complicated.c09<0>
                    multictr.complicated.c09<1>
                    multictr.complicated.c10<0>
                    multictr.complicated.c10<1>
                    multictr.complicated.c11<0>
                    multictr.complicated.c11<1>
                    multictr.complicated.c12<0>
                    multictr.complicated.c12<1>
                    multictr.complicated.c13<0>
                    multictr.complicated.c13<1>
                    multictr.complicated.c14<0>
                    multictr.complicated.c14<1>
                    multictr.complicated.c15<0>
                    multictr.complicated.c15<1>
                    multictr.complicated.c16<0>
                    multictr.complicated.c16<1>
                    multictr.complicated.c17<0>
                    multictr.complicated.c17<1>
                    multictr.complicated.f01<0>
                    multictr.complicated.f01<1>
                    multictr.complicated.f02<0>
                    multictr.complicated.f02<1>
                    multictr.complicated.f03<0>
                    multictr.complicated.f03<1>
                    multictr.complicated.f04<0>
                    multictr.complicated.f04<1>
                    multictr.complicated.f05<0>
                    multictr.complicated.f05<1>
                    multictr.complicated.f06<0>
                    multictr.complicated.f06<1>
                    multictr.complicated.f07<0>
                    multictr.complicated.f07<1>
                    multictr.complicated.f08<0>
                    multictr.complicated.f08<1>
                    multictr.complicated.f09<0>
                    multictr.complicated.f09<1>
                    multictr.complicated.f10<0>
                    multictr.complicated.f10<1>
                    multictr.complicated.f11<0>
                    multictr.complicated.f11<1>
                    multictr.complicated.f12<0>
                    multictr.complicated.f12<1>
                    multictr.complicated.f13<0>
                    multictr.complicated.f13<1>
                    multictr.complicated.f14<0>
                    multictr.complicated.f14<1>
                    multictr.complicated.f15<0>
                    multictr.complicated.f15<1>
                    multictr.complicated.f16<0>
                    multictr.complicated.f16<1>
                    multictr.complicated.f17<0>
                    multictr.complicated.f17<1>
                    multictr.complicated.spring<0>
                    multictr.complicated.summer<0>
                    multictr.complicated.winter<0>
                    multictr.complicated.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

= > public (1 calls)
0: multictr.complicated.=<0>
=(#left##0:multictr.complicated, #right##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#left##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:multictr.complicated, ~#right##0:multictr.complicated, ?#success##0:wybe.bool)

    1:
        foreign llvm and(#left##0:wybe.int, 7:wybe.int, ?tmp#55##0:wybe.int)
        foreign llvm icmp_eq(tmp#55##0:wybe.int, 0:wybe.int, ?tmp#56##0:wybe.bool)
        case ~tmp#56##0:wybe.bool of
        0:
            foreign llvm icmp_eq(tmp#55##0:wybe.int, 1:wybe.int, ?tmp#60##0:wybe.bool)
            case ~tmp#60##0:wybe.bool of
            0:
                foreign llvm icmp_eq(tmp#55##0:wybe.int, 2:wybe.int, ?tmp#64##0:wybe.bool)
                case ~tmp#64##0:wybe.bool of
                0:
                    foreign llvm icmp_eq(tmp#55##0:wybe.int, 3:wybe.int, ?tmp#68##0:wybe.bool)
                    case ~tmp#68##0:wybe.bool of
                    0:
                        foreign llvm icmp_eq(tmp#55##0:wybe.int, 4:wybe.int, ?tmp#72##0:wybe.bool)
                        case ~tmp#72##0:wybe.bool of
                        0:
                            foreign llvm icmp_eq(tmp#55##0:wybe.int, 5:wybe.int, ?tmp#76##0:wybe.bool)
                            case ~tmp#76##0:wybe.bool of
                            0:
                                foreign llvm icmp_eq(tmp#55##0:wybe.int, 6:wybe.int, ?tmp#80##0:wybe.bool)
                                case ~tmp#80##0:wybe.bool of
                                0:
                                    foreign llvm icmp_eq(~tmp#55##0:wybe.int, 7:wybe.int, ?tmp#84##0:wybe.bool)
                                    case ~tmp#84##0:wybe.bool of
                                    0:
                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                    1:
                                        foreign lpvm access(#left##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#85##0:16 bit unsigned)
                                        foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#86##0:wybe.bool)
                                        case ~tmp#86##0:wybe.bool of
                                        0:
                                            foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#92##0:wybe.bool)
                                            case ~tmp#92##0:wybe.bool of
                                            0:
                                                foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#98##0:wybe.bool)
                                                case ~tmp#98##0:wybe.bool of
                                                0:
                                                    foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#104##0:wybe.bool)
                                                    case ~tmp#104##0:wybe.bool of
                                                    0:
                                                        foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#110##0:wybe.bool)
                                                        case ~tmp#110##0:wybe.bool of
                                                        0:
                                                            foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#116##0:wybe.bool)
                                                            case ~tmp#116##0:wybe.bool of
                                                            0:
                                                                foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#122##0:wybe.bool)
                                                                case ~tmp#122##0:wybe.bool of
                                                                0:
                                                                    foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#128##0:wybe.bool)
                                                                    case ~tmp#128##0:wybe.bool of
                                                                    0:
                                                                        foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#134##0:wybe.bool)
                                                                        case ~tmp#134##0:wybe.bool of
                                                                        0:
                                                                            foreign llvm icmp_eq(~tmp#85##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#140##0:wybe.bool)
                                                                            case ~tmp#140##0:wybe.bool of
                                                                            0:
                                                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                            1:
                                                                                foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f17##0:wybe.int) @multictr:nn:nn
                                                                                foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#142##0:wybe.bool)
                                                                                case ~tmp#142##0:wybe.bool of
                                                                                0:
                                                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                                1:
                                                                                    foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#143##0:wybe.int)
                                                                                    foreign llvm icmp_eq(~tmp#143##0:wybe.int, 7:wybe.int, ?tmp#144##0:wybe.bool)
                                                                                    case ~tmp#144##0:wybe.bool of
                                                                                    0:
                                                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                                    1:
                                                                                        foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#145##0:16 bit unsigned)
                                                                                        foreign llvm icmp_eq(~tmp#145##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#146##0:wybe.bool)
                                                                                        case ~tmp#146##0:wybe.bool of
                                                                                        0:
                                                                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                                        1:
                                                                                            foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f17##0:wybe.int) @multictr:nn:nn
                                                                                            foreign llvm icmp_eq(~#left#f17##0:wybe.int, ~#right#f17##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                                                        1:
                                                                            foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f16##0:wybe.int) @multictr:nn:nn
                                                                            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#136##0:wybe.bool)
                                                                            case ~tmp#136##0:wybe.bool of
                                                                            0:
                                                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                            1:
                                                                                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#137##0:wybe.int)
                                                                                foreign llvm icmp_eq(~tmp#137##0:wybe.int, 7:wybe.int, ?tmp#138##0:wybe.bool)
                                                                                case ~tmp#138##0:wybe.bool of
                                                                                0:
                                                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                                1:
                                                                                    foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#139##0:16 bit unsigned)
                                                                                    foreign llvm icmp_eq(~tmp#139##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#140##0:wybe.bool)
                                                                                    case ~tmp#140##0:wybe.bool of
                                                                                    0:
                                                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                                    1:
                                                                                        foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f16##0:wybe.int) @multictr:nn:nn
                                                                                        foreign llvm icmp_eq(~#left#f16##0:wybe.int, ~#right#f16##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                                                    1:
                                                                        foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f15##0:wybe.int) @multictr:nn:nn
                                                                        foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#130##0:wybe.bool)
                                                                        case ~tmp#130##0:wybe.bool of
                                                                        0:
                                                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                        1:
                                                                            foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#131##0:wybe.int)
                                                                            foreign llvm icmp_eq(~tmp#131##0:wybe.int, 7:wybe.int, ?tmp#132##0:wybe.bool)
                                                                            case ~tmp#132##0:wybe.bool of
                                                                            0:
                                                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                            1:
                                                                                foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#133##0:16 bit unsigned)
                                                                                foreign llvm icmp_eq(~tmp#133##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#134##0:wybe.bool)
                                                                                case ~tmp#134##0:wybe.bool of
                                                                                0:
                                                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                                1:
                                                                                    foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f15##0:wybe.int) @multictr:nn:nn
                                                                                    foreign llvm icmp_eq(~#left#f15##0:wybe.int, ~#right#f15##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                                                1:
                                                                    foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f14##0:wybe.int) @multictr:nn:nn
                                                                    foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#124##0:wybe.bool)
                                                                    case ~tmp#124##0:wybe.bool of
                                                                    0:
                                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                    1:
                                                                        foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#125##0:wybe.int)
                                                                        foreign llvm icmp_eq(~tmp#125##0:wybe.int, 7:wybe.int, ?tmp#126##0:wybe.bool)
                                                                        case ~tmp#126##0:wybe.bool of
                                                                        0:
                                                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                        1:
                                                                            foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#127##0:16 bit unsigned)
                                                                            foreign llvm icmp_eq(~tmp#127##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#128##0:wybe.bool)
                                                                            case ~tmp#128##0:wybe.bool of
                                                                            0:
                                                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                            1:
                                                                                foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f14##0:wybe.int) @multictr:nn:nn
                                                                                foreign llvm icmp_eq(~#left#f14##0:wybe.int, ~#right#f14##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                                            1:
                                                                foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f13##0:wybe.int) @multictr:nn:nn
                                                                foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#118##0:wybe.bool)
                                                                case ~tmp#118##0:wybe.bool of
                                                                0:
                                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                1:
                                                                    foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#119##0:wybe.int)
                                                                    foreign llvm icmp_eq(~tmp#119##0:wybe.int, 7:wybe.int, ?tmp#120##0:wybe.bool)
                                                                    case ~tmp#120##0:wybe.bool of
                                                                    0:
                                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                    1:
                                                                        foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#121##0:16 bit unsigned)
                                                                        foreign llvm icmp_eq(~tmp#121##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#122##0:wybe.bool)
                                                                        case ~tmp#122##0:wybe.bool of
                                                                        0:
                                                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                        1:
                                                                            foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f13##0:wybe.int) @multictr:nn:nn
                                                                            foreign llvm icmp_eq(~#left#f13##0:wybe.int, ~#right#f13##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                                        1:
                                                            foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f12##0:wybe.int) @multictr:nn:nn
                                                            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#112##0:wybe.bool)
                                                            case ~tmp#112##0:wybe.bool of
                                                            0:
                                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                            1:
                                                                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#113##0:wybe.int)
                                                                foreign llvm icmp_eq(~tmp#113##0:wybe.int, 7:wybe.int, ?tmp#114##0:wybe.bool)
                                                                case ~tmp#114##0:wybe.bool of
                                                                0:
                                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                1:
                                                                    foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#115##0:16 bit unsigned)
                                                                    foreign llvm icmp_eq(~tmp#115##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#116##0:wybe.bool)
                                                                    case ~tmp#116##0:wybe.bool of
                                                                    0:
                                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                    1:
                                                                        foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f12##0:wybe.int) @multictr:nn:nn
                                                                        foreign llvm icmp_eq(~#left#f12##0:wybe.int, ~#right#f12##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                                    1:
                                                        foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f11##0:wybe.int) @multictr:nn:nn
                                                        foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#106##0:wybe.bool)
                                                        case ~tmp#106##0:wybe.bool of
                                                        0:
                                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                        1:
                                                            foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#107##0:wybe.int)
                                                            foreign llvm icmp_eq(~tmp#107##0:wybe.int, 7:wybe.int, ?tmp#108##0:wybe.bool)
                                                            case ~tmp#108##0:wybe.bool of
                                                            0:
                                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                            1:
                                                                foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#109##0:16 bit unsigned)
                                                                foreign llvm icmp_eq(~tmp#109##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#110##0:wybe.bool)
                                                                case ~tmp#110##0:wybe.bool of
                                                                0:
                                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                1:
                                                                    foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f11##0:wybe.int) @multictr:nn:nn
                                                                    foreign llvm icmp_eq(~#left#f11##0:wybe.int, ~#right#f11##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                                1:
                                                    foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f10##0:wybe.int) @multictr:nn:nn
                                                    foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#100##0:wybe.bool)
                                                    case ~tmp#100##0:wybe.bool of
                                                    0:
                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                    1:
                                                        foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#101##0:wybe.int)
                                                        foreign llvm icmp_eq(~tmp#101##0:wybe.int, 7:wybe.int, ?tmp#102##0:wybe.bool)
                                                        case ~tmp#102##0:wybe.bool of
                                                        0:
                                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                        1:
                                                            foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#103##0:16 bit unsigned)
                                                            foreign llvm icmp_eq(~tmp#103##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#104##0:wybe.bool)
                                                            case ~tmp#104##0:wybe.bool of
                                                            0:
                                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                            1:
                                                                foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f10##0:wybe.int) @multictr:nn:nn
                                                                foreign llvm icmp_eq(~#left#f10##0:wybe.int, ~#right#f10##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                            1:
                                                foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f09##0:wybe.int) @multictr:nn:nn
                                                foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#94##0:wybe.bool)
                                                case ~tmp#94##0:wybe.bool of
                                                0:
                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                1:
                                                    foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#95##0:wybe.int)
                                                    foreign llvm icmp_eq(~tmp#95##0:wybe.int, 7:wybe.int, ?tmp#96##0:wybe.bool)
                                                    case ~tmp#96##0:wybe.bool of
                                                    0:
                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                    1:
                                                        foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#97##0:16 bit unsigned)
                                                        foreign llvm icmp_eq(~tmp#97##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#98##0:wybe.bool)
                                                        case ~tmp#98##0:wybe.bool of
                                                        0:
                                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                        1:
                                                            foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f09##0:wybe.int) @multictr:nn:nn
                                                            foreign llvm icmp_eq(~#left#f09##0:wybe.int, ~#right#f09##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                        1:
                                            foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f08##0:wybe.int) @multictr:nn:nn
                                            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#88##0:wybe.bool)
                                            case ~tmp#88##0:wybe.bool of
                                            0:
                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                            1:
                                                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#89##0:wybe.int)
                                                foreign llvm icmp_eq(~tmp#89##0:wybe.int, 7:wybe.int, ?tmp#90##0:wybe.bool)
                                                case ~tmp#90##0:wybe.bool of
                                                0:
                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                1:
                                                    foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#91##0:16 bit unsigned)
                                                    foreign llvm icmp_eq(~tmp#91##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#92##0:wybe.bool)
                                                    case ~tmp#92##0:wybe.bool of
                                                    0:
                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                    1:
                                                        foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f08##0:wybe.int) @multictr:nn:nn
                                                        foreign llvm icmp_eq(~#left#f08##0:wybe.int, ~#right#f08##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn






                                1:
                                    foreign lpvm access(~#left##0:multictr.complicated, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?#left#f07##0:wybe.int) @multictr:nn:nn
                                    foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#82##0:wybe.bool)
                                    case ~tmp#82##0:wybe.bool of
                                    0:
                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                    1:
                                        foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#83##0:wybe.int)
                                        foreign llvm icmp_eq(~tmp#83##0:wybe.int, 6:wybe.int, ?tmp#84##0:wybe.bool)
                                        case ~tmp#84##0:wybe.bool of
                                        0:
                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                        1:
                                            foreign lpvm access(~#right##0:multictr.complicated, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?#right#f07##0:wybe.int) @multictr:nn:nn
                                            foreign llvm icmp_eq(~#left#f07##0:wybe.int, ~#right#f07##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




                            1:
                                foreign lpvm access(~#left##0:multictr.complicated, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?#left#f06##0:wybe.int) @multictr:nn:nn
                                foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#78##0:wybe.bool)
                                case ~tmp#78##0:wybe.bool of
                                0:
                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                1:
                                    foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#79##0:wybe.int)
                                    foreign llvm icmp_eq(~tmp#79##0:wybe.int, 5:wybe.int, ?tmp#80##0:wybe.bool)
                                    case ~tmp#80##0:wybe.bool of
                                    0:
                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                    1:
                                        foreign lpvm access(~#right##0:multictr.complicated, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?#right#f06##0:wybe.int) @multictr:nn:nn
                                        foreign llvm icmp_eq(~#left#f06##0:wybe.int, ~#right#f06##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




                        1:
                            foreign lpvm access(~#left##0:multictr.complicated, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?#left#f05##0:wybe.int) @multictr:nn:nn
                            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#74##0:wybe.bool)
                            case ~tmp#74##0:wybe.bool of
                            0:
                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                            1:
                                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#75##0:wybe.int)
                                foreign llvm icmp_eq(~tmp#75##0:wybe.int, 4:wybe.int, ?tmp#76##0:wybe.bool)
                                case ~tmp#76##0:wybe.bool of
                                0:
                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                1:
                                    foreign lpvm access(~#right##0:multictr.complicated, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?#right#f05##0:wybe.int) @multictr:nn:nn
                                    foreign llvm icmp_eq(~#left#f05##0:wybe.int, ~#right#f05##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




                    1:
                        foreign lpvm access(~#left##0:multictr.complicated, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?#left#f04##0:wybe.int) @multictr:nn:nn
                        foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#70##0:wybe.bool)
                        case ~tmp#70##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                        1:
                            foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#71##0:wybe.int)
                            foreign llvm icmp_eq(~tmp#71##0:wybe.int, 3:wybe.int, ?tmp#72##0:wybe.bool)
                            case ~tmp#72##0:wybe.bool of
                            0:
                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                            1:
                                foreign lpvm access(~#right##0:multictr.complicated, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?#right#f04##0:wybe.int) @multictr:nn:nn
                                foreign llvm icmp_eq(~#left#f04##0:wybe.int, ~#right#f04##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




                1:
                    foreign lpvm access(~#left##0:multictr.complicated, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#left#f03##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#66##0:wybe.bool)
                    case ~tmp#66##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#67##0:wybe.int)
                        foreign llvm icmp_eq(~tmp#67##0:wybe.int, 2:wybe.int, ?tmp#68##0:wybe.bool)
                        case ~tmp#68##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                        1:
                            foreign lpvm access(~#right##0:multictr.complicated, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#right#f03##0:wybe.int) @multictr:nn:nn
                            foreign llvm icmp_eq(~#left#f03##0:wybe.int, ~#right#f03##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




            1:
                foreign lpvm access(~#left##0:multictr.complicated, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#f02##0:wybe.int) @multictr:nn:nn
                foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#62##0:wybe.bool)
                case ~tmp#62##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#63##0:wybe.int)
                    foreign llvm icmp_eq(~tmp#63##0:wybe.int, 1:wybe.int, ?tmp#64##0:wybe.bool)
                    case ~tmp#64##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign lpvm access(~#right##0:multictr.complicated, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#f02##0:wybe.int) @multictr:nn:nn
                        foreign llvm icmp_eq(~#left#f02##0:wybe.int, ~#right#f02##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




        1:
            foreign lpvm access(~#left##0:multictr.complicated, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#f01##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#58##0:wybe.bool)
            case ~tmp#58##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#59##0:wybe.int)
                foreign llvm icmp_eq(~tmp#59##0:wybe.int, 0:wybe.int, ?tmp#60##0:wybe.bool)
                case ~tmp#60##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#f01##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f01##0:wybe.int, ~#right#f01##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn






autumn > public {inline} (0 calls)
0: multictr.complicated.autumn<0>
autumn(?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(3:multictr.complicated, ?#result##0:multictr.complicated)


c01 > public {inline} (0 calls)
0: multictr.complicated.c01<0>
c01(f01##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#result##0:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f01##0:wybe.int) @multictr:nn:nn
c01 > public {inline} (40 calls)
1: multictr.complicated.c01<1>
c01(?f01##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f01##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f01##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?f01##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




c02 > public {inline} (0 calls)
0: multictr.complicated.c02<0>
c02(f02##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f02##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 1:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c02 > public {inline} (35 calls)
1: multictr.complicated.c02<1>
c02(?f02##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f02##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f02##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?f02##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




c03 > public {inline} (0 calls)
0: multictr.complicated.c03<0>
c03(f03##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f03##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 2:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c03 > public {inline} (33 calls)
1: multictr.complicated.c03<1>
c03(?f03##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f03##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 2:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f03##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?f03##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




c04 > public {inline} (0 calls)
0: multictr.complicated.c04<0>
c04(f04##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f04##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 3:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c04 > public {inline} (31 calls)
1: multictr.complicated.c04<1>
c04(?f04##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f04##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f04##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?f04##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




c05 > public {inline} (0 calls)
0: multictr.complicated.c05<0>
c05(f05##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f05##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 4:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c05 > public {inline} (29 calls)
1: multictr.complicated.c05<1>
c05(?f05##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f05##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 4:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f05##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?f05##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




c06 > public {inline} (0 calls)
0: multictr.complicated.c06<0>
c06(f06##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f06##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 5:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c06 > public {inline} (27 calls)
1: multictr.complicated.c06<1>
c06(?f06##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f06##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 5:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f06##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?f06##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




c07 > public {inline} (0 calls)
0: multictr.complicated.c07<0>
c07(f07##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f07##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 6:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c07 > public {inline} (25 calls)
1: multictr.complicated.c07<1>
c07(?f07##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f07##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 6:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f07##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?f07##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




c08 > public {inline} (0 calls)
0: multictr.complicated.c08<0>
c08(f08##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 7:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f08##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c08 > public {inline} (23 calls)
1: multictr.complicated.c08<1>
c08(?f08##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f08##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f08##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f08##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f08##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





c09 > public {inline} (0 calls)
0: multictr.complicated.c09<0>
c09(f09##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 8:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f09##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c09 > public {inline} (21 calls)
1: multictr.complicated.c09<1>
c09(?f09##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f09##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f09##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f09##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f09##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





c10 > public {inline} (0 calls)
0: multictr.complicated.c10<0>
c10(f10##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 9:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f10##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c10 > public {inline} (19 calls)
1: multictr.complicated.c10<1>
c10(?f10##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f10##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f10##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f10##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f10##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





c11 > public {inline} (0 calls)
0: multictr.complicated.c11<0>
c11(f11##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 10:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f11##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c11 > public {inline} (17 calls)
1: multictr.complicated.c11<1>
c11(?f11##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f11##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f11##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f11##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f11##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





c12 > public {inline} (0 calls)
0: multictr.complicated.c12<0>
c12(f12##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 11:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f12##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c12 > public {inline} (15 calls)
1: multictr.complicated.c12<1>
c12(?f12##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f12##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f12##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f12##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f12##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





c13 > public {inline} (0 calls)
0: multictr.complicated.c13<0>
c13(f13##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 12:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f13##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c13 > public {inline} (13 calls)
1: multictr.complicated.c13<1>
c13(?f13##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f13##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f13##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f13##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f13##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





c14 > public {inline} (0 calls)
0: multictr.complicated.c14<0>
c14(f14##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 13:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f14##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c14 > public {inline} (11 calls)
1: multictr.complicated.c14<1>
c14(?f14##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f14##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f14##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f14##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f14##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





c15 > public {inline} (0 calls)
0: multictr.complicated.c15<0>
c15(f15##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 14:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f15##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c15 > public {inline} (9 calls)
1: multictr.complicated.c15<1>
c15(?f15##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f15##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f15##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f15##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f15##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





c16 > public {inline} (0 calls)
0: multictr.complicated.c16<0>
c16(f16##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 15:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f16##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c16 > public {inline} (7 calls)
1: multictr.complicated.c16<1>
c16(?f16##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f16##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f16##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f16##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f16##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





c17 > public {inline} (0 calls)
0: multictr.complicated.c17<0>
c17(f17##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 16:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f17##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
c17 > public {inline} (5 calls)
1: multictr.complicated.c17<1>
c17(?f17##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f17##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f17##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f17##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f17##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





f01 > public {inline} (0 calls)
0: multictr.complicated.f01<0>
f01(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


f01 > public {inline} (0 calls)
1: multictr.complicated.f01<1>
f01(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




f02 > public {inline} (0 calls)
0: multictr.complicated.f02<0>
f02(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


f02 > public {inline} (0 calls)
1: multictr.complicated.f02<1>
f02(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -1:wybe.int, 0:wybe.int, 8:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




f03 > public {inline} (0 calls)
0: multictr.complicated.f03<0>
f03(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 2:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


f03 > public {inline} (0 calls)
1: multictr.complicated.f03<1>
f03(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 2:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -2:wybe.int, 0:wybe.int, 8:wybe.int, 2:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




f04 > public {inline} (0 calls)
0: multictr.complicated.f04<0>
f04(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


f04 > public {inline} (0 calls)
1: multictr.complicated.f04<1>
f04(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -3:wybe.int, 0:wybe.int, 8:wybe.int, 3:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




f05 > public {inline} (0 calls)
0: multictr.complicated.f05<0>
f05(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 4:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


f05 > public {inline} (0 calls)
1: multictr.complicated.f05<1>
f05(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 4:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -4:wybe.int, 0:wybe.int, 8:wybe.int, 4:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




f06 > public {inline} (0 calls)
0: multictr.complicated.f06<0>
f06(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 5:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


f06 > public {inline} (0 calls)
1: multictr.complicated.f06<1>
f06(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 5:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -5:wybe.int, 0:wybe.int, 8:wybe.int, 5:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




f07 > public {inline} (0 calls)
0: multictr.complicated.f07<0>
f07(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 6:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


f07 > public {inline} (0 calls)
1: multictr.complicated.f07<1>
f07(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 6:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -6:wybe.int, 0:wybe.int, 8:wybe.int, 6:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




f08 > public {inline} (0 calls)
0: multictr.complicated.f08<0>
f08(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f08 > public {inline} (0 calls)
1: multictr.complicated.f08<1>
f08(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





f09 > public {inline} (0 calls)
0: multictr.complicated.f09<0>
f09(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f09 > public {inline} (0 calls)
1: multictr.complicated.f09<1>
f09(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





f10 > public {inline} (0 calls)
0: multictr.complicated.f10<0>
f10(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f10 > public {inline} (0 calls)
1: multictr.complicated.f10<1>
f10(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





f11 > public {inline} (0 calls)
0: multictr.complicated.f11<0>
f11(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f11 > public {inline} (0 calls)
1: multictr.complicated.f11<1>
f11(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





f12 > public {inline} (0 calls)
0: multictr.complicated.f12<0>
f12(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f12 > public {inline} (0 calls)
1: multictr.complicated.f12<1>
f12(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





f13 > public {inline} (0 calls)
0: multictr.complicated.f13<0>
f13(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f13 > public {inline} (0 calls)
1: multictr.complicated.f13<1>
f13(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





f14 > public {inline} (0 calls)
0: multictr.complicated.f14<0>
f14(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f14 > public {inline} (0 calls)
1: multictr.complicated.f14<1>
f14(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





f15 > public {inline} (0 calls)
0: multictr.complicated.f15<0>
f15(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f15 > public {inline} (0 calls)
1: multictr.complicated.f15<1>
f15(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





f16 > public {inline} (0 calls)
0: multictr.complicated.f16<0>
f16(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f16 > public {inline} (0 calls)
1: multictr.complicated.f16<1>
f16(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





f17 > public {inline} (0 calls)
0: multictr.complicated.f17<0>
f17(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f17 > public {inline} (0 calls)
1: multictr.complicated.f17<1>
f17(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned)
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





spring > public {inline} (0 calls)
0: multictr.complicated.spring<0>
spring(?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:multictr.complicated, ?#result##0:multictr.complicated)


summer > public {inline} (0 calls)
0: multictr.complicated.summer<0>
summer(?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(2:multictr.complicated, ?#result##0:multictr.complicated)


winter > public {inline} (0 calls)
0: multictr.complicated.winter<0>
winter(?#result##0:multictr.complicated)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.complicated, ?#result##0:multictr.complicated)


~= > public {inline} (0 calls)
0: multictr.complicated.~=<0>
~=(#left##0:multictr.complicated, #right##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multictr.complicated.=<0>(~#left##0:multictr.complicated, ~#right##0:multictr.complicated, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.complicated'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.complicated.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp uge i64 %"#left##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#left##0", 7 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %276 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %276 
if.then1:
  %3 = inttoptr i64 %"#left##0" to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = icmp uge i64 %"#right##0", 4 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %13 = icmp eq i64 %1, 1 
  br i1 %13, label %if.then4, label %if.else4 
if.then2:
  %7 = and i64 %"#right##0", 7 
  %8 = icmp eq i64 %7, 0 
  br i1 %8, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %9 = inttoptr i64 %"#right##0" to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = icmp eq i64 %5, %11 
  ret i1 %12 
if.else3:
  ret i1 0 
if.then4:
  %14 = add   i64 %"#left##0", -1 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = icmp uge i64 %"#right##0", 4 
  br i1 %18, label %if.then5, label %if.else5 
if.else4:
  %26 = icmp eq i64 %1, 2 
  br i1 %26, label %if.then7, label %if.else7 
if.then5:
  %19 = and i64 %"#right##0", 7 
  %20 = icmp eq i64 %19, 1 
  br i1 %20, label %if.then6, label %if.else6 
if.else5:
  ret i1 0 
if.then6:
  %21 = add   i64 %"#right##0", -1 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %25 = icmp eq i64 %17, %24 
  ret i1 %25 
if.else6:
  ret i1 0 
if.then7:
  %27 = add   i64 %"#left##0", -2 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %31 = icmp uge i64 %"#right##0", 4 
  br i1 %31, label %if.then8, label %if.else8 
if.else7:
  %39 = icmp eq i64 %1, 3 
  br i1 %39, label %if.then10, label %if.else10 
if.then8:
  %32 = and i64 %"#right##0", 7 
  %33 = icmp eq i64 %32, 2 
  br i1 %33, label %if.then9, label %if.else9 
if.else8:
  ret i1 0 
if.then9:
  %34 = add   i64 %"#right##0", -2 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  %37 = load  i64, i64* %36 
  %38 = icmp eq i64 %30, %37 
  ret i1 %38 
if.else9:
  ret i1 0 
if.then10:
  %40 = add   i64 %"#left##0", -3 
  %41 = inttoptr i64 %40 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  %43 = load  i64, i64* %42 
  %44 = icmp uge i64 %"#right##0", 4 
  br i1 %44, label %if.then11, label %if.else11 
if.else10:
  %52 = icmp eq i64 %1, 4 
  br i1 %52, label %if.then13, label %if.else13 
if.then11:
  %45 = and i64 %"#right##0", 7 
  %46 = icmp eq i64 %45, 3 
  br i1 %46, label %if.then12, label %if.else12 
if.else11:
  ret i1 0 
if.then12:
  %47 = add   i64 %"#right##0", -3 
  %48 = inttoptr i64 %47 to i64* 
  %49 = getelementptr  i64, i64* %48, i64 0 
  %50 = load  i64, i64* %49 
  %51 = icmp eq i64 %43, %50 
  ret i1 %51 
if.else12:
  ret i1 0 
if.then13:
  %53 = add   i64 %"#left##0", -4 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  %56 = load  i64, i64* %55 
  %57 = icmp uge i64 %"#right##0", 4 
  br i1 %57, label %if.then14, label %if.else14 
if.else13:
  %65 = icmp eq i64 %1, 5 
  br i1 %65, label %if.then16, label %if.else16 
if.then14:
  %58 = and i64 %"#right##0", 7 
  %59 = icmp eq i64 %58, 4 
  br i1 %59, label %if.then15, label %if.else15 
if.else14:
  ret i1 0 
if.then15:
  %60 = add   i64 %"#right##0", -4 
  %61 = inttoptr i64 %60 to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  %63 = load  i64, i64* %62 
  %64 = icmp eq i64 %56, %63 
  ret i1 %64 
if.else15:
  ret i1 0 
if.then16:
  %66 = add   i64 %"#left##0", -5 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  %69 = load  i64, i64* %68 
  %70 = icmp uge i64 %"#right##0", 4 
  br i1 %70, label %if.then17, label %if.else17 
if.else16:
  %78 = icmp eq i64 %1, 6 
  br i1 %78, label %if.then19, label %if.else19 
if.then17:
  %71 = and i64 %"#right##0", 7 
  %72 = icmp eq i64 %71, 5 
  br i1 %72, label %if.then18, label %if.else18 
if.else17:
  ret i1 0 
if.then18:
  %73 = add   i64 %"#right##0", -5 
  %74 = inttoptr i64 %73 to i64* 
  %75 = getelementptr  i64, i64* %74, i64 0 
  %76 = load  i64, i64* %75 
  %77 = icmp eq i64 %69, %76 
  ret i1 %77 
if.else18:
  ret i1 0 
if.then19:
  %79 = add   i64 %"#left##0", -6 
  %80 = inttoptr i64 %79 to i64* 
  %81 = getelementptr  i64, i64* %80, i64 0 
  %82 = load  i64, i64* %81 
  %83 = icmp uge i64 %"#right##0", 4 
  br i1 %83, label %if.then20, label %if.else20 
if.else19:
  %91 = icmp eq i64 %1, 7 
  br i1 %91, label %if.then22, label %if.else22 
if.then20:
  %84 = and i64 %"#right##0", 7 
  %85 = icmp eq i64 %84, 6 
  br i1 %85, label %if.then21, label %if.else21 
if.else20:
  ret i1 0 
if.then21:
  %86 = add   i64 %"#right##0", -6 
  %87 = inttoptr i64 %86 to i64* 
  %88 = getelementptr  i64, i64* %87, i64 0 
  %89 = load  i64, i64* %88 
  %90 = icmp eq i64 %82, %89 
  ret i1 %90 
if.else21:
  ret i1 0 
if.then22:
  %92 = add   i64 %"#left##0", -7 
  %93 = inttoptr i64 %92 to i16* 
  %94 = getelementptr  i16, i16* %93, i64 0 
  %95 = load  i16, i16* %94 
  %96 = icmp eq i16 %95, 7 
  br i1 %96, label %if.then23, label %if.else23 
if.else22:
  ret i1 0 
if.then23:
  %97 = add   i64 %"#left##0", 1 
  %98 = inttoptr i64 %97 to i64* 
  %99 = getelementptr  i64, i64* %98, i64 0 
  %100 = load  i64, i64* %99 
  %101 = icmp uge i64 %"#right##0", 4 
  br i1 %101, label %if.then24, label %if.else24 
if.else23:
  %114 = icmp eq i16 %95, 8 
  br i1 %114, label %if.then27, label %if.else27 
if.then24:
  %102 = and i64 %"#right##0", 7 
  %103 = icmp eq i64 %102, 7 
  br i1 %103, label %if.then25, label %if.else25 
if.else24:
  ret i1 0 
if.then25:
  %104 = add   i64 %"#right##0", -7 
  %105 = inttoptr i64 %104 to i16* 
  %106 = getelementptr  i16, i16* %105, i64 0 
  %107 = load  i16, i16* %106 
  %108 = icmp eq i16 %107, 7 
  br i1 %108, label %if.then26, label %if.else26 
if.else25:
  ret i1 0 
if.then26:
  %109 = add   i64 %"#right##0", 1 
  %110 = inttoptr i64 %109 to i64* 
  %111 = getelementptr  i64, i64* %110, i64 0 
  %112 = load  i64, i64* %111 
  %113 = icmp eq i64 %100, %112 
  ret i1 %113 
if.else26:
  ret i1 0 
if.then27:
  %115 = add   i64 %"#left##0", 1 
  %116 = inttoptr i64 %115 to i64* 
  %117 = getelementptr  i64, i64* %116, i64 0 
  %118 = load  i64, i64* %117 
  %119 = icmp uge i64 %"#right##0", 4 
  br i1 %119, label %if.then28, label %if.else28 
if.else27:
  %132 = icmp eq i16 %95, 9 
  br i1 %132, label %if.then31, label %if.else31 
if.then28:
  %120 = and i64 %"#right##0", 7 
  %121 = icmp eq i64 %120, 7 
  br i1 %121, label %if.then29, label %if.else29 
if.else28:
  ret i1 0 
if.then29:
  %122 = add   i64 %"#right##0", -7 
  %123 = inttoptr i64 %122 to i16* 
  %124 = getelementptr  i16, i16* %123, i64 0 
  %125 = load  i16, i16* %124 
  %126 = icmp eq i16 %125, 8 
  br i1 %126, label %if.then30, label %if.else30 
if.else29:
  ret i1 0 
if.then30:
  %127 = add   i64 %"#right##0", 1 
  %128 = inttoptr i64 %127 to i64* 
  %129 = getelementptr  i64, i64* %128, i64 0 
  %130 = load  i64, i64* %129 
  %131 = icmp eq i64 %118, %130 
  ret i1 %131 
if.else30:
  ret i1 0 
if.then31:
  %133 = add   i64 %"#left##0", 1 
  %134 = inttoptr i64 %133 to i64* 
  %135 = getelementptr  i64, i64* %134, i64 0 
  %136 = load  i64, i64* %135 
  %137 = icmp uge i64 %"#right##0", 4 
  br i1 %137, label %if.then32, label %if.else32 
if.else31:
  %150 = icmp eq i16 %95, 10 
  br i1 %150, label %if.then35, label %if.else35 
if.then32:
  %138 = and i64 %"#right##0", 7 
  %139 = icmp eq i64 %138, 7 
  br i1 %139, label %if.then33, label %if.else33 
if.else32:
  ret i1 0 
if.then33:
  %140 = add   i64 %"#right##0", -7 
  %141 = inttoptr i64 %140 to i16* 
  %142 = getelementptr  i16, i16* %141, i64 0 
  %143 = load  i16, i16* %142 
  %144 = icmp eq i16 %143, 9 
  br i1 %144, label %if.then34, label %if.else34 
if.else33:
  ret i1 0 
if.then34:
  %145 = add   i64 %"#right##0", 1 
  %146 = inttoptr i64 %145 to i64* 
  %147 = getelementptr  i64, i64* %146, i64 0 
  %148 = load  i64, i64* %147 
  %149 = icmp eq i64 %136, %148 
  ret i1 %149 
if.else34:
  ret i1 0 
if.then35:
  %151 = add   i64 %"#left##0", 1 
  %152 = inttoptr i64 %151 to i64* 
  %153 = getelementptr  i64, i64* %152, i64 0 
  %154 = load  i64, i64* %153 
  %155 = icmp uge i64 %"#right##0", 4 
  br i1 %155, label %if.then36, label %if.else36 
if.else35:
  %168 = icmp eq i16 %95, 11 
  br i1 %168, label %if.then39, label %if.else39 
if.then36:
  %156 = and i64 %"#right##0", 7 
  %157 = icmp eq i64 %156, 7 
  br i1 %157, label %if.then37, label %if.else37 
if.else36:
  ret i1 0 
if.then37:
  %158 = add   i64 %"#right##0", -7 
  %159 = inttoptr i64 %158 to i16* 
  %160 = getelementptr  i16, i16* %159, i64 0 
  %161 = load  i16, i16* %160 
  %162 = icmp eq i16 %161, 10 
  br i1 %162, label %if.then38, label %if.else38 
if.else37:
  ret i1 0 
if.then38:
  %163 = add   i64 %"#right##0", 1 
  %164 = inttoptr i64 %163 to i64* 
  %165 = getelementptr  i64, i64* %164, i64 0 
  %166 = load  i64, i64* %165 
  %167 = icmp eq i64 %154, %166 
  ret i1 %167 
if.else38:
  ret i1 0 
if.then39:
  %169 = add   i64 %"#left##0", 1 
  %170 = inttoptr i64 %169 to i64* 
  %171 = getelementptr  i64, i64* %170, i64 0 
  %172 = load  i64, i64* %171 
  %173 = icmp uge i64 %"#right##0", 4 
  br i1 %173, label %if.then40, label %if.else40 
if.else39:
  %186 = icmp eq i16 %95, 12 
  br i1 %186, label %if.then43, label %if.else43 
if.then40:
  %174 = and i64 %"#right##0", 7 
  %175 = icmp eq i64 %174, 7 
  br i1 %175, label %if.then41, label %if.else41 
if.else40:
  ret i1 0 
if.then41:
  %176 = add   i64 %"#right##0", -7 
  %177 = inttoptr i64 %176 to i16* 
  %178 = getelementptr  i16, i16* %177, i64 0 
  %179 = load  i16, i16* %178 
  %180 = icmp eq i16 %179, 11 
  br i1 %180, label %if.then42, label %if.else42 
if.else41:
  ret i1 0 
if.then42:
  %181 = add   i64 %"#right##0", 1 
  %182 = inttoptr i64 %181 to i64* 
  %183 = getelementptr  i64, i64* %182, i64 0 
  %184 = load  i64, i64* %183 
  %185 = icmp eq i64 %172, %184 
  ret i1 %185 
if.else42:
  ret i1 0 
if.then43:
  %187 = add   i64 %"#left##0", 1 
  %188 = inttoptr i64 %187 to i64* 
  %189 = getelementptr  i64, i64* %188, i64 0 
  %190 = load  i64, i64* %189 
  %191 = icmp uge i64 %"#right##0", 4 
  br i1 %191, label %if.then44, label %if.else44 
if.else43:
  %204 = icmp eq i16 %95, 13 
  br i1 %204, label %if.then47, label %if.else47 
if.then44:
  %192 = and i64 %"#right##0", 7 
  %193 = icmp eq i64 %192, 7 
  br i1 %193, label %if.then45, label %if.else45 
if.else44:
  ret i1 0 
if.then45:
  %194 = add   i64 %"#right##0", -7 
  %195 = inttoptr i64 %194 to i16* 
  %196 = getelementptr  i16, i16* %195, i64 0 
  %197 = load  i16, i16* %196 
  %198 = icmp eq i16 %197, 12 
  br i1 %198, label %if.then46, label %if.else46 
if.else45:
  ret i1 0 
if.then46:
  %199 = add   i64 %"#right##0", 1 
  %200 = inttoptr i64 %199 to i64* 
  %201 = getelementptr  i64, i64* %200, i64 0 
  %202 = load  i64, i64* %201 
  %203 = icmp eq i64 %190, %202 
  ret i1 %203 
if.else46:
  ret i1 0 
if.then47:
  %205 = add   i64 %"#left##0", 1 
  %206 = inttoptr i64 %205 to i64* 
  %207 = getelementptr  i64, i64* %206, i64 0 
  %208 = load  i64, i64* %207 
  %209 = icmp uge i64 %"#right##0", 4 
  br i1 %209, label %if.then48, label %if.else48 
if.else47:
  %222 = icmp eq i16 %95, 14 
  br i1 %222, label %if.then51, label %if.else51 
if.then48:
  %210 = and i64 %"#right##0", 7 
  %211 = icmp eq i64 %210, 7 
  br i1 %211, label %if.then49, label %if.else49 
if.else48:
  ret i1 0 
if.then49:
  %212 = add   i64 %"#right##0", -7 
  %213 = inttoptr i64 %212 to i16* 
  %214 = getelementptr  i16, i16* %213, i64 0 
  %215 = load  i16, i16* %214 
  %216 = icmp eq i16 %215, 13 
  br i1 %216, label %if.then50, label %if.else50 
if.else49:
  ret i1 0 
if.then50:
  %217 = add   i64 %"#right##0", 1 
  %218 = inttoptr i64 %217 to i64* 
  %219 = getelementptr  i64, i64* %218, i64 0 
  %220 = load  i64, i64* %219 
  %221 = icmp eq i64 %208, %220 
  ret i1 %221 
if.else50:
  ret i1 0 
if.then51:
  %223 = add   i64 %"#left##0", 1 
  %224 = inttoptr i64 %223 to i64* 
  %225 = getelementptr  i64, i64* %224, i64 0 
  %226 = load  i64, i64* %225 
  %227 = icmp uge i64 %"#right##0", 4 
  br i1 %227, label %if.then52, label %if.else52 
if.else51:
  %240 = icmp eq i16 %95, 15 
  br i1 %240, label %if.then55, label %if.else55 
if.then52:
  %228 = and i64 %"#right##0", 7 
  %229 = icmp eq i64 %228, 7 
  br i1 %229, label %if.then53, label %if.else53 
if.else52:
  ret i1 0 
if.then53:
  %230 = add   i64 %"#right##0", -7 
  %231 = inttoptr i64 %230 to i16* 
  %232 = getelementptr  i16, i16* %231, i64 0 
  %233 = load  i16, i16* %232 
  %234 = icmp eq i16 %233, 14 
  br i1 %234, label %if.then54, label %if.else54 
if.else53:
  ret i1 0 
if.then54:
  %235 = add   i64 %"#right##0", 1 
  %236 = inttoptr i64 %235 to i64* 
  %237 = getelementptr  i64, i64* %236, i64 0 
  %238 = load  i64, i64* %237 
  %239 = icmp eq i64 %226, %238 
  ret i1 %239 
if.else54:
  ret i1 0 
if.then55:
  %241 = add   i64 %"#left##0", 1 
  %242 = inttoptr i64 %241 to i64* 
  %243 = getelementptr  i64, i64* %242, i64 0 
  %244 = load  i64, i64* %243 
  %245 = icmp uge i64 %"#right##0", 4 
  br i1 %245, label %if.then56, label %if.else56 
if.else55:
  %258 = icmp eq i16 %95, 16 
  br i1 %258, label %if.then59, label %if.else59 
if.then56:
  %246 = and i64 %"#right##0", 7 
  %247 = icmp eq i64 %246, 7 
  br i1 %247, label %if.then57, label %if.else57 
if.else56:
  ret i1 0 
if.then57:
  %248 = add   i64 %"#right##0", -7 
  %249 = inttoptr i64 %248 to i16* 
  %250 = getelementptr  i16, i16* %249, i64 0 
  %251 = load  i16, i16* %250 
  %252 = icmp eq i16 %251, 15 
  br i1 %252, label %if.then58, label %if.else58 
if.else57:
  ret i1 0 
if.then58:
  %253 = add   i64 %"#right##0", 1 
  %254 = inttoptr i64 %253 to i64* 
  %255 = getelementptr  i64, i64* %254, i64 0 
  %256 = load  i64, i64* %255 
  %257 = icmp eq i64 %244, %256 
  ret i1 %257 
if.else58:
  ret i1 0 
if.then59:
  %259 = add   i64 %"#left##0", 1 
  %260 = inttoptr i64 %259 to i64* 
  %261 = getelementptr  i64, i64* %260, i64 0 
  %262 = load  i64, i64* %261 
  %263 = icmp uge i64 %"#right##0", 4 
  br i1 %263, label %if.then60, label %if.else60 
if.else59:
  ret i1 0 
if.then60:
  %264 = and i64 %"#right##0", 7 
  %265 = icmp eq i64 %264, 7 
  br i1 %265, label %if.then61, label %if.else61 
if.else60:
  ret i1 0 
if.then61:
  %266 = add   i64 %"#right##0", -7 
  %267 = inttoptr i64 %266 to i16* 
  %268 = getelementptr  i16, i16* %267, i64 0 
  %269 = load  i16, i16* %268 
  %270 = icmp eq i16 %269, 16 
  br i1 %270, label %if.then62, label %if.else62 
if.else61:
  ret i1 0 
if.then62:
  %271 = add   i64 %"#right##0", 1 
  %272 = inttoptr i64 %271 to i64* 
  %273 = getelementptr  i64, i64* %272, i64 0 
  %274 = load  i64, i64* %273 
  %275 = icmp eq i64 %262, %274 
  ret i1 %275 
if.else62:
  ret i1 0 
}


define external fastcc  i64 @"multictr.complicated.autumn<0>"()    {
entry:
  ret i64 3 
}


define external fastcc  i64 @"multictr.complicated.c01<0>"(i64  %"f01##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f01##0", i64* %4 
  ret i64 %2 
}


define external fastcc  {i64, i1} @"multictr.complicated.c01<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = inttoptr i64 %"#result##0" to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  i64 @"multictr.complicated.c02<0>"(i64  %"f02##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f02##0", i64* %4 
  %5 = or i64 %2, 1 
  ret i64 %5 
}


define external fastcc  {i64, i1} @"multictr.complicated.c02<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#result##0", -1 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  i64 @"multictr.complicated.c03<0>"(i64  %"f03##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f03##0", i64* %4 
  %5 = or i64 %2, 2 
  ret i64 %5 
}


define external fastcc  {i64, i1} @"multictr.complicated.c03<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 2 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#result##0", -2 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  i64 @"multictr.complicated.c04<0>"(i64  %"f04##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f04##0", i64* %4 
  %5 = or i64 %2, 3 
  ret i64 %5 
}


define external fastcc  {i64, i1} @"multictr.complicated.c04<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 3 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#result##0", -3 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  i64 @"multictr.complicated.c05<0>"(i64  %"f05##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f05##0", i64* %4 
  %5 = or i64 %2, 4 
  ret i64 %5 
}


define external fastcc  {i64, i1} @"multictr.complicated.c05<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 4 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#result##0", -4 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  i64 @"multictr.complicated.c06<0>"(i64  %"f06##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f06##0", i64* %4 
  %5 = or i64 %2, 5 
  ret i64 %5 
}


define external fastcc  {i64, i1} @"multictr.complicated.c06<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 5 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#result##0", -5 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  i64 @"multictr.complicated.c07<0>"(i64  %"f07##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f07##0", i64* %4 
  %5 = or i64 %2, 6 
  ret i64 %5 
}


define external fastcc  {i64, i1} @"multictr.complicated.c07<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 6 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#result##0", -6 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  i64 @"multictr.complicated.c08<0>"(i64  %"f08##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 7, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"f08##0", i64* %7 
  %8 = or i64 %2, 7 
  ret i64 %8 
}


define external fastcc  {i64, i1} @"multictr.complicated.c08<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 7 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#result##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  i64 @"multictr.complicated.c09<0>"(i64  %"f09##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 8, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"f09##0", i64* %7 
  %8 = or i64 %2, 7 
  ret i64 %8 
}


define external fastcc  {i64, i1} @"multictr.complicated.c09<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 8 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#result##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  i64 @"multictr.complicated.c10<0>"(i64  %"f10##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 9, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"f10##0", i64* %7 
  %8 = or i64 %2, 7 
  ret i64 %8 
}


define external fastcc  {i64, i1} @"multictr.complicated.c10<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 9 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#result##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  i64 @"multictr.complicated.c11<0>"(i64  %"f11##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 10, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"f11##0", i64* %7 
  %8 = or i64 %2, 7 
  ret i64 %8 
}


define external fastcc  {i64, i1} @"multictr.complicated.c11<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 10 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#result##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  i64 @"multictr.complicated.c12<0>"(i64  %"f12##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 11, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"f12##0", i64* %7 
  %8 = or i64 %2, 7 
  ret i64 %8 
}


define external fastcc  {i64, i1} @"multictr.complicated.c12<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 11 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#result##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  i64 @"multictr.complicated.c13<0>"(i64  %"f13##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 12, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"f13##0", i64* %7 
  %8 = or i64 %2, 7 
  ret i64 %8 
}


define external fastcc  {i64, i1} @"multictr.complicated.c13<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 12 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#result##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  i64 @"multictr.complicated.c14<0>"(i64  %"f14##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 13, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"f14##0", i64* %7 
  %8 = or i64 %2, 7 
  ret i64 %8 
}


define external fastcc  {i64, i1} @"multictr.complicated.c14<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 13 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#result##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  i64 @"multictr.complicated.c15<0>"(i64  %"f15##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 14, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"f15##0", i64* %7 
  %8 = or i64 %2, 7 
  ret i64 %8 
}


define external fastcc  {i64, i1} @"multictr.complicated.c15<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 14 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#result##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  i64 @"multictr.complicated.c16<0>"(i64  %"f16##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 15, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"f16##0", i64* %7 
  %8 = or i64 %2, 7 
  ret i64 %8 
}


define external fastcc  {i64, i1} @"multictr.complicated.c16<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 15 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#result##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  i64 @"multictr.complicated.c17<0>"(i64  %"f17##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 16, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"f17##0", i64* %7 
  %8 = or i64 %2, 7 
  ret i64 %8 
}


define external fastcc  {i64, i1} @"multictr.complicated.c17<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 16 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#result##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  {i64, i1} @"multictr.complicated.f01<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = inttoptr i64 %"#rec##0" to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"multictr.complicated.f01<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %15 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %16 = insertvalue {i64, i1} %15, i1 0, 1 
  ret {i64, i1} %16 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = inttoptr i64 %5 to i8* 
  %7 = inttoptr i64 %"#rec##0" to i8* 
  %8 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %6, i8*  %7, i32  %8, i1  0)  
  %9 = inttoptr i64 %5 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"#field##0", i64* %10 
  %11 = insertvalue {i64, i1} undef, i64 %5, 0 
  %12 = insertvalue {i64, i1} %11, i1 1, 1 
  ret {i64, i1} %12 
if.else1:
  %13 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
}


define external fastcc  {i64, i1} @"multictr.complicated.f02<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#rec##0", -1 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  {i64, i1} @"multictr.complicated.f02<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 1 
  %7 = sub   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -1 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 %"#field##0", i64* %13 
  %14 = insertvalue {i64, i1} undef, i64 %6, 0 
  %15 = insertvalue {i64, i1} %14, i1 1, 1 
  ret {i64, i1} %15 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
}


define external fastcc  {i64, i1} @"multictr.complicated.f03<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 2 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#rec##0", -2 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  {i64, i1} @"multictr.complicated.f03<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 2 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 2 
  %7 = sub   i64 %"#rec##0", 2 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -2 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 %"#field##0", i64* %13 
  %14 = insertvalue {i64, i1} undef, i64 %6, 0 
  %15 = insertvalue {i64, i1} %14, i1 1, 1 
  ret {i64, i1} %15 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
}


define external fastcc  {i64, i1} @"multictr.complicated.f04<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 3 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#rec##0", -3 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  {i64, i1} @"multictr.complicated.f04<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 3 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 3 
  %7 = sub   i64 %"#rec##0", 3 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -3 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 %"#field##0", i64* %13 
  %14 = insertvalue {i64, i1} undef, i64 %6, 0 
  %15 = insertvalue {i64, i1} %14, i1 1, 1 
  ret {i64, i1} %15 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
}


define external fastcc  {i64, i1} @"multictr.complicated.f05<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 4 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#rec##0", -4 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  {i64, i1} @"multictr.complicated.f05<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 4 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 4 
  %7 = sub   i64 %"#rec##0", 4 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -4 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 %"#field##0", i64* %13 
  %14 = insertvalue {i64, i1} undef, i64 %6, 0 
  %15 = insertvalue {i64, i1} %14, i1 1, 1 
  ret {i64, i1} %15 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
}


define external fastcc  {i64, i1} @"multictr.complicated.f06<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 5 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#rec##0", -5 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  {i64, i1} @"multictr.complicated.f06<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 5 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 5 
  %7 = sub   i64 %"#rec##0", 5 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -5 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 %"#field##0", i64* %13 
  %14 = insertvalue {i64, i1} undef, i64 %6, 0 
  %15 = insertvalue {i64, i1} %14, i1 1, 1 
  ret {i64, i1} %15 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
}


define external fastcc  {i64, i1} @"multictr.complicated.f07<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 6 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#rec##0", -6 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  {i64, i1} @"multictr.complicated.f07<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 6 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 6 
  %7 = sub   i64 %"#rec##0", 6 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -6 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 %"#field##0", i64* %13 
  %14 = insertvalue {i64, i1} undef, i64 %6, 0 
  %15 = insertvalue {i64, i1} %14, i1 1, 1 
  ret {i64, i1} %15 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
}


define external fastcc  {i64, i1} @"multictr.complicated.f08<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 7 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#rec##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  {i64, i1} @"multictr.complicated.f08<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %25 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %26 = insertvalue {i64, i1} %25, i1 0, 1 
  ret {i64, i1} %26 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 7 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then2:
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = add   i64 %10, 7 
  %12 = sub   i64 %"#rec##0", 7 
  %13 = inttoptr i64 %10 to i8* 
  %14 = inttoptr i64 %12 to i8* 
  %15 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %13, i8*  %14, i32  %15, i1  0)  
  %16 = add   i64 %11, 1 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 %"#field##0", i64* %18 
  %19 = insertvalue {i64, i1} undef, i64 %11, 0 
  %20 = insertvalue {i64, i1} %19, i1 1, 1 
  ret {i64, i1} %20 
if.else2:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
}


define external fastcc  {i64, i1} @"multictr.complicated.f09<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 8 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#rec##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  {i64, i1} @"multictr.complicated.f09<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %25 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %26 = insertvalue {i64, i1} %25, i1 0, 1 
  ret {i64, i1} %26 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 8 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then2:
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = add   i64 %10, 7 
  %12 = sub   i64 %"#rec##0", 7 
  %13 = inttoptr i64 %10 to i8* 
  %14 = inttoptr i64 %12 to i8* 
  %15 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %13, i8*  %14, i32  %15, i1  0)  
  %16 = add   i64 %11, 1 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 %"#field##0", i64* %18 
  %19 = insertvalue {i64, i1} undef, i64 %11, 0 
  %20 = insertvalue {i64, i1} %19, i1 1, 1 
  ret {i64, i1} %20 
if.else2:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
}


define external fastcc  {i64, i1} @"multictr.complicated.f10<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 9 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#rec##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  {i64, i1} @"multictr.complicated.f10<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %25 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %26 = insertvalue {i64, i1} %25, i1 0, 1 
  ret {i64, i1} %26 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 9 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then2:
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = add   i64 %10, 7 
  %12 = sub   i64 %"#rec##0", 7 
  %13 = inttoptr i64 %10 to i8* 
  %14 = inttoptr i64 %12 to i8* 
  %15 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %13, i8*  %14, i32  %15, i1  0)  
  %16 = add   i64 %11, 1 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 %"#field##0", i64* %18 
  %19 = insertvalue {i64, i1} undef, i64 %11, 0 
  %20 = insertvalue {i64, i1} %19, i1 1, 1 
  ret {i64, i1} %20 
if.else2:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
}


define external fastcc  {i64, i1} @"multictr.complicated.f11<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 10 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#rec##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  {i64, i1} @"multictr.complicated.f11<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %25 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %26 = insertvalue {i64, i1} %25, i1 0, 1 
  ret {i64, i1} %26 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 10 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then2:
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = add   i64 %10, 7 
  %12 = sub   i64 %"#rec##0", 7 
  %13 = inttoptr i64 %10 to i8* 
  %14 = inttoptr i64 %12 to i8* 
  %15 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %13, i8*  %14, i32  %15, i1  0)  
  %16 = add   i64 %11, 1 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 %"#field##0", i64* %18 
  %19 = insertvalue {i64, i1} undef, i64 %11, 0 
  %20 = insertvalue {i64, i1} %19, i1 1, 1 
  ret {i64, i1} %20 
if.else2:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
}


define external fastcc  {i64, i1} @"multictr.complicated.f12<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 11 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#rec##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  {i64, i1} @"multictr.complicated.f12<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %25 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %26 = insertvalue {i64, i1} %25, i1 0, 1 
  ret {i64, i1} %26 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 11 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then2:
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = add   i64 %10, 7 
  %12 = sub   i64 %"#rec##0", 7 
  %13 = inttoptr i64 %10 to i8* 
  %14 = inttoptr i64 %12 to i8* 
  %15 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %13, i8*  %14, i32  %15, i1  0)  
  %16 = add   i64 %11, 1 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 %"#field##0", i64* %18 
  %19 = insertvalue {i64, i1} undef, i64 %11, 0 
  %20 = insertvalue {i64, i1} %19, i1 1, 1 
  ret {i64, i1} %20 
if.else2:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
}


define external fastcc  {i64, i1} @"multictr.complicated.f13<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 12 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#rec##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  {i64, i1} @"multictr.complicated.f13<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %25 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %26 = insertvalue {i64, i1} %25, i1 0, 1 
  ret {i64, i1} %26 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 12 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then2:
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = add   i64 %10, 7 
  %12 = sub   i64 %"#rec##0", 7 
  %13 = inttoptr i64 %10 to i8* 
  %14 = inttoptr i64 %12 to i8* 
  %15 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %13, i8*  %14, i32  %15, i1  0)  
  %16 = add   i64 %11, 1 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 %"#field##0", i64* %18 
  %19 = insertvalue {i64, i1} undef, i64 %11, 0 
  %20 = insertvalue {i64, i1} %19, i1 1, 1 
  ret {i64, i1} %20 
if.else2:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
}


define external fastcc  {i64, i1} @"multictr.complicated.f14<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 13 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#rec##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  {i64, i1} @"multictr.complicated.f14<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %25 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %26 = insertvalue {i64, i1} %25, i1 0, 1 
  ret {i64, i1} %26 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 13 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then2:
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = add   i64 %10, 7 
  %12 = sub   i64 %"#rec##0", 7 
  %13 = inttoptr i64 %10 to i8* 
  %14 = inttoptr i64 %12 to i8* 
  %15 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %13, i8*  %14, i32  %15, i1  0)  
  %16 = add   i64 %11, 1 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 %"#field##0", i64* %18 
  %19 = insertvalue {i64, i1} undef, i64 %11, 0 
  %20 = insertvalue {i64, i1} %19, i1 1, 1 
  ret {i64, i1} %20 
if.else2:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
}


define external fastcc  {i64, i1} @"multictr.complicated.f15<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 14 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#rec##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  {i64, i1} @"multictr.complicated.f15<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %25 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %26 = insertvalue {i64, i1} %25, i1 0, 1 
  ret {i64, i1} %26 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 14 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then2:
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = add   i64 %10, 7 
  %12 = sub   i64 %"#rec##0", 7 
  %13 = inttoptr i64 %10 to i8* 
  %14 = inttoptr i64 %12 to i8* 
  %15 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %13, i8*  %14, i32  %15, i1  0)  
  %16 = add   i64 %11, 1 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 %"#field##0", i64* %18 
  %19 = insertvalue {i64, i1} undef, i64 %11, 0 
  %20 = insertvalue {i64, i1} %19, i1 1, 1 
  ret {i64, i1} %20 
if.else2:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
}


define external fastcc  {i64, i1} @"multictr.complicated.f16<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 15 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#rec##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  {i64, i1} @"multictr.complicated.f16<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %25 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %26 = insertvalue {i64, i1} %25, i1 0, 1 
  ret {i64, i1} %26 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 15 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then2:
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = add   i64 %10, 7 
  %12 = sub   i64 %"#rec##0", 7 
  %13 = inttoptr i64 %10 to i8* 
  %14 = inttoptr i64 %12 to i8* 
  %15 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %13, i8*  %14, i32  %15, i1  0)  
  %16 = add   i64 %11, 1 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 %"#field##0", i64* %18 
  %19 = insertvalue {i64, i1} undef, i64 %11, 0 
  %20 = insertvalue {i64, i1} %19, i1 1, 1 
  ret {i64, i1} %20 
if.else2:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
}


define external fastcc  {i64, i1} @"multictr.complicated.f17<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 16 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then2:
  %8 = add   i64 %"#rec##0", 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else2:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  {i64, i1} @"multictr.complicated.f17<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %25 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %26 = insertvalue {i64, i1} %25, i1 0, 1 
  ret {i64, i1} %26 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = getelementptr  i16, i16* %4, i64 0 
  %6 = load  i16, i16* %5 
  %7 = icmp eq i16 %6, 16 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then2:
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = add   i64 %10, 7 
  %12 = sub   i64 %"#rec##0", 7 
  %13 = inttoptr i64 %10 to i8* 
  %14 = inttoptr i64 %12 to i8* 
  %15 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %13, i8*  %14, i32  %15, i1  0)  
  %16 = add   i64 %11, 1 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 %"#field##0", i64* %18 
  %19 = insertvalue {i64, i1} undef, i64 %11, 0 
  %20 = insertvalue {i64, i1} %19, i1 1, 1 
  ret {i64, i1} %20 
if.else2:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
}


define external fastcc  i64 @"multictr.complicated.spring<0>"()    {
entry:
  ret i64 1 
}


define external fastcc  i64 @"multictr.complicated.summer<0>"()    {
entry:
  ret i64 2 
}


define external fastcc  i64 @"multictr.complicated.winter<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i1 @"multictr.complicated.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = tail call fastcc  i1  @"multictr.complicated.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.length
  representation  : 64 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.length.=<0>
                    multictr.length.metres<0>
                    multictr.length.metres<1>
                    multictr.length.value<0>
                    multictr.length.value<1>
                    multictr.length.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: multictr.length.=<0>
=(#left##0:multictr.length, #right##0:multictr.length, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.length, ~#right##0:multictr.length, ?#success##0:wybe.bool)


metres > public {inline} (0 calls)
0: multictr.length.metres<0>
metres(value##0:wybe.float, ?#result##2:multictr.length)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~value##0:multictr.length, ?#result##2:multictr.length) @multictr:nn:nn
metres > public {inline} (0 calls)
1: multictr.length.metres<1>
metres(?value##0:wybe.float, #result##0:multictr.length)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#result##0:multictr.length, ?value##0:wybe.float) @multictr:nn:nn


value > public {inline} (0 calls)
0: multictr.length.value<0>
value(#rec##0:multictr.length, ?#result##0:wybe.float)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#rec##0:multictr.length, ?#result##0:wybe.float) @multictr:nn:nn
value > public {inline} (0 calls)
1: multictr.length.value<1>
value([#rec##0:multictr.length], ?#rec##2:multictr.length, #field##0:wybe.float)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~#field##0:multictr.length, ?#rec##2:multictr.length) @multictr:nn:nn


~= > public {inline} (0 calls)
0: multictr.length.~=<0>
~=(#left##0:multictr.length, #right##0:multictr.length, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.length, ~#right##0:multictr.length, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.length'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.length.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i64 @"multictr.length.metres<0>"(double  %"value##0")    {
entry:
  %0 = bitcast double %"value##0" to i64 
  ret i64 %0 
}


define external fastcc  double @"multictr.length.metres<1>"(i64  %"#result##0")    {
entry:
  %0 = bitcast i64 %"#result##0" to double 
  ret double %0 
}


define external fastcc  double @"multictr.length.value<0>"(i64  %"#rec##0")    {
entry:
  %0 = bitcast i64 %"#rec##0" to double 
  ret double %0 
}


define external fastcc  i64 @"multictr.length.value<1>"(double  %"#field##0")    {
entry:
  %0 = bitcast double %"#field##0" to i64 
  ret i64 %0 
}


define external fastcc  i1 @"multictr.length.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp eq i64 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.maybe_int
  representation  : address
  public submods  : 
  public resources: 
  public procs    : multictr.maybe_int.=<0>
                    multictr.maybe_int.just<0>
                    multictr.maybe_int.just<1>
                    multictr.maybe_int.nothing<0>
                    multictr.maybe_int.value<0>
                    multictr.maybe_int.value<1>
                    multictr.maybe_int.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

= > public (1 calls)
0: multictr.maybe_int.=<0>
=(#left##0:multictr.maybe_int, #right##0:multictr.maybe_int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:multictr.maybe_int, ~#right##0:multictr.maybe_int, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(~#left##0:multictr.maybe_int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#value##0:wybe.int) @multictr:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
        case ~tmp#8##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:multictr.maybe_int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#value##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_eq(~#left#value##0:wybe.int, ~#right#value##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




just > public {inline} (0 calls)
0: multictr.maybe_int.just<0>
just(value##0:wybe.int, ?#result##0:multictr.maybe_int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.maybe_int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.maybe_int, ?#result##0:multictr.maybe_int, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~value##0:wybe.int) @multictr:nn:nn
just > public {inline} (8 calls)
1: multictr.maybe_int.just<1>
just(?value##0:wybe.int, #result##0:multictr.maybe_int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?value##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:multictr.maybe_int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?value##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



nothing > public {inline} (0 calls)
0: multictr.maybe_int.nothing<0>
nothing(?#result##0:multictr.maybe_int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.maybe_int, ?#result##0:multictr.maybe_int)


value > public {inline} (0 calls)
0: multictr.maybe_int.value<0>
value(#rec##0:multictr.maybe_int, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr.maybe_int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

value > public {inline} (0 calls)
1: multictr.maybe_int.value<1>
value(#rec##0:multictr.maybe_int, ?#rec##1:multictr.maybe_int, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.maybe_int, ?#rec##1:multictr.maybe_int)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr.maybe_int, ?#rec##1:multictr.maybe_int, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: multictr.maybe_int.~=<0>
~=(#left##0:multictr.maybe_int, #right##0:multictr.maybe_int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multictr.maybe_int.=<0>(~#left##0:multictr.maybe_int, ~#right##0:multictr.maybe_int, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.maybe_int'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.maybe_int.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp ne i64 %"#left##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = icmp ne i64 %"#right##0", 0 
  br i1 %4, label %if.then1, label %if.else1 
if.else:
  %9 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %9 
if.then1:
  %5 = inttoptr i64 %"#right##0" to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = icmp eq i64 %3, %7 
  ret i1 %8 
if.else1:
  ret i1 0 
}


define external fastcc  i64 @"multictr.maybe_int.just<0>"(i64  %"value##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"value##0", i64* %4 
  ret i64 %2 
}


define external fastcc  {i64, i1} @"multictr.maybe_int.just<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#result##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  i64 @"multictr.maybe_int.nothing<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"multictr.maybe_int.value<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"multictr.maybe_int.value<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 8 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %3, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  i1 @"multictr.maybe_int.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = tail call fastcc  i1  @"multictr.maybe_int.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.number
  representation  : address
  public submods  : 
  public resources: 
  public procs    : multictr.number.=<0>
                    multictr.number.float<0>
                    multictr.number.float<1>
                    multictr.number.float_value<0>
                    multictr.number.float_value<1>
                    multictr.number.int<0>
                    multictr.number.int<1>
                    multictr.number.int_value<0>
                    multictr.number.int_value<1>
                    multictr.number.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

= > public (1 calls)
0: multictr.number.=<0>
=(#left##0:multictr.number, #right##0:multictr.number, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 1:wybe.int, ?tmp#8##0:wybe.int)
    foreign llvm icmp_eq(tmp#8##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~tmp#8##0:wybe.int, 1:wybe.int, ?tmp#12##0:wybe.bool)
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#left##0:multictr.number, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#float_value##0:wybe.float) @multictr:nn:nn
            foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#14##0:wybe.int)
            foreign llvm icmp_eq(~tmp#14##0:wybe.int, 1:wybe.int, ?tmp#15##0:wybe.bool)
            case ~tmp#15##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#right##0:multictr.number, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#float_value##0:wybe.float) @multictr:nn:nn
                foreign llvm fcmp_eq(~#left#float_value##0:wybe.float, ~#right#float_value##0:wybe.float, ?#success##0:wybe.bool) @float:nn:nn



    1:
        foreign lpvm access(~#left##0:multictr.number, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#int_value##0:wybe.int) @multictr:nn:nn
        foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#11##0:wybe.int)
        foreign llvm icmp_eq(~tmp#11##0:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.bool)
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:multictr.number, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#int_value##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_eq(~#left#int_value##0:wybe.int, ~#right#int_value##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




float > public {inline} (0 calls)
0: multictr.number.float<0>
float(float_value##0:wybe.float, ?#result##0:multictr.number)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.number) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.number, ?#rec##1:multictr.number, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~float_value##0:wybe.float) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.number, 1:wybe.int, ?#result##0:multictr.number) @multictr:nn:nn
float > public {inline} (5 calls)
1: multictr.number.float<1>
float(?float_value##0:wybe.float, #result##0:multictr.number, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.float, ?float_value##0:wybe.float)

    1:
        foreign lpvm access(~#result##0:multictr.number, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?float_value##0:wybe.float) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



float_value > public {inline} (0 calls)
0: multictr.number.float_value<0>
float_value(#rec##0:multictr.number, ?#result##0:wybe.float, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.float, ?#result##0:wybe.float)

    1:
        foreign lpvm access(~#rec##0:multictr.number, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#result##0:wybe.float) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

float_value > public {inline} (0 calls)
1: multictr.number.float_value<1>
float_value(#rec##0:multictr.number, ?#rec##1:multictr.number, #field##0:wybe.float, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.number, ?#rec##1:multictr.number)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr.number, ?#rec##1:multictr.number, -1:wybe.int, 0:wybe.int, 8:wybe.int, 1:wybe.int, ~#field##0:wybe.float) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



int > public {inline} (0 calls)
0: multictr.number.int<0>
int(int_value##0:wybe.int, ?#result##0:multictr.number)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.number) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.number, ?#result##0:multictr.number, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~int_value##0:wybe.int) @multictr:nn:nn
int > public {inline} (10 calls)
1: multictr.number.int<1>
int(?int_value##0:wybe.int, #result##0:multictr.number, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?int_value##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:multictr.number, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?int_value##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



int_value > public {inline} (0 calls)
0: multictr.number.int_value<0>
int_value(#rec##0:multictr.number, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr.number, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

int_value > public {inline} (0 calls)
1: multictr.number.int_value<1>
int_value(#rec##0:multictr.number, ?#rec##1:multictr.number, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.number, ?#rec##1:multictr.number)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr.number, ?#rec##1:multictr.number, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: multictr.number.~=<0>
~=(#left##0:multictr.number, #right##0:multictr.number, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multictr.number.=<0>(~#left##0:multictr.number, ~#right##0:multictr.number, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.number'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.number.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = and i64 %"#left##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#left##0" to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = and i64 %"#right##0", 1 
  %6 = icmp eq i64 %5, 0 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  %11 = icmp eq i64 %0, 1 
  br i1 %11, label %if.then2, label %if.else2 
if.then1:
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = icmp eq i64 %4, %9 
  ret i1 %10 
if.else1:
  ret i1 0 
if.then2:
  %12 = add   i64 %"#left##0", -1 
  %13 = inttoptr i64 %12 to double* 
  %14 = getelementptr  double, double* %13, i64 0 
  %15 = load  double, double* %14 
  %16 = and i64 %"#right##0", 1 
  %17 = icmp eq i64 %16, 1 
  br i1 %17, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %18 = add   i64 %"#right##0", -1 
  %19 = inttoptr i64 %18 to double* 
  %20 = getelementptr  double, double* %19, i64 0 
  %21 = load  double, double* %20 
  %22 = fcmp oeq double %15, %21 
  ret i1 %22 
if.else3:
  ret i1 0 
}


define external fastcc  i64 @"multictr.number.float<0>"(double  %"float_value##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to double* 
  %4 = getelementptr  double, double* %3, i64 0 
  store  double %"float_value##0", double* %4 
  %5 = or i64 %2, 1 
  ret i64 %5 
}


define external fastcc  {double, i1} @"multictr.number.float<1>"(i64  %"#result##0")    {
entry:
  %0 = and i64 %"#result##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#result##0", -1 
  %3 = inttoptr i64 %2 to double* 
  %4 = getelementptr  double, double* %3, i64 0 
  %5 = load  double, double* %4 
  %6 = insertvalue {double, i1} undef, double %5, 0 
  %7 = insertvalue {double, i1} %6, i1 1, 1 
  ret {double, i1} %7 
if.else:
  %8 = insertvalue {double, i1} undef, double undef, 0 
  %9 = insertvalue {double, i1} %8, i1 0, 1 
  ret {double, i1} %9 
}


define external fastcc  {double, i1} @"multictr.number.float_value<0>"(i64  %"#rec##0")    {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#rec##0", -1 
  %3 = inttoptr i64 %2 to double* 
  %4 = getelementptr  double, double* %3, i64 0 
  %5 = load  double, double* %4 
  %6 = insertvalue {double, i1} undef, double %5, 0 
  %7 = insertvalue {double, i1} %6, i1 1, 1 
  ret {double, i1} %7 
if.else:
  %8 = insertvalue {double, i1} undef, double undef, 0 
  %9 = insertvalue {double, i1} %8, i1 0, 1 
  ret {double, i1} %9 
}


define external fastcc  {i64, i1} @"multictr.number.float_value<1>"(i64  %"#rec##0", double  %"#field##0")    {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 8 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = add   i64 %4, 1 
  %6 = sub   i64 %"#rec##0", 1 
  %7 = inttoptr i64 %4 to i8* 
  %8 = inttoptr i64 %6 to i8* 
  %9 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %7, i8*  %8, i32  %9, i1  0)  
  %10 = add   i64 %5, -1 
  %11 = inttoptr i64 %10 to double* 
  %12 = getelementptr  double, double* %11, i64 0 
  store  double %"#field##0", double* %12 
  %13 = insertvalue {i64, i1} undef, i64 %5, 0 
  %14 = insertvalue {i64, i1} %13, i1 1, 1 
  ret {i64, i1} %14 
if.else:
  %15 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %16 = insertvalue {i64, i1} %15, i1 0, 1 
  ret {i64, i1} %16 
}


define external fastcc  i64 @"multictr.number.int<0>"(i64  %"int_value##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"int_value##0", i64* %4 
  ret i64 %2 
}


define external fastcc  {i64, i1} @"multictr.number.int<1>"(i64  %"#result##0")    {
entry:
  %0 = and i64 %"#result##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#result##0" to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"multictr.number.int_value<0>"(i64  %"#rec##0")    {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#rec##0" to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"multictr.number.int_value<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 8 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = inttoptr i64 %4 to i8* 
  %6 = inttoptr i64 %"#rec##0" to i8* 
  %7 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = inttoptr i64 %4 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  store  i64 %"#field##0", i64* %9 
  %10 = insertvalue {i64, i1} undef, i64 %4, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else:
  %12 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i1 @"multictr.number.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = tail call fastcc  i1  @"multictr.number.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.perhaps
  representation  : 64 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.perhaps.=<0>
                    multictr.perhaps.content<0>
                    multictr.perhaps.content<1>
                    multictr.perhaps.perhaps<0>
                    multictr.perhaps.perhaps<1>
                    multictr.perhaps.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: multictr.perhaps.=<0>
=(#left##0:multictr.perhaps, #right##0:multictr.perhaps, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.perhaps, ~#right##0:multictr.perhaps, ?#success##0:wybe.bool)


content > public {inline} (0 calls)
0: multictr.perhaps.content<0>
content(#rec##0:multictr.perhaps, ?#result##0:multictr.maybe_int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#rec##0:multictr.perhaps, ?#result##0:multictr.maybe_int) @multictr:nn:nn
content > public {inline} (0 calls)
1: multictr.perhaps.content<1>
content([#rec##0:multictr.perhaps], ?#rec##2:multictr.perhaps, #field##0:multictr.maybe_int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~#field##0:multictr.perhaps, ?#rec##2:multictr.perhaps) @multictr:nn:nn


perhaps > public {inline} (0 calls)
0: multictr.perhaps.perhaps<0>
perhaps(content##0:multictr.maybe_int, ?#result##2:multictr.perhaps)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~content##0:multictr.perhaps, ?#result##2:multictr.perhaps) @multictr:nn:nn
perhaps > public {inline} (0 calls)
1: multictr.perhaps.perhaps<1>
perhaps(?content##0:multictr.maybe_int, #result##0:multictr.perhaps)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#result##0:multictr.perhaps, ?content##0:multictr.maybe_int) @multictr:nn:nn


~= > public {inline} (0 calls)
0: multictr.perhaps.~=<0>
~=(#left##0:multictr.perhaps, #right##0:multictr.perhaps, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.perhaps, ~#right##0:multictr.perhaps, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.perhaps'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.perhaps.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i64 @"multictr.perhaps.content<0>"(i64  %"#rec##0")    {
entry:
  ret i64 %"#rec##0" 
}


define external fastcc  i64 @"multictr.perhaps.content<1>"(i64  %"#field##0")    {
entry:
  ret i64 %"#field##0" 
}


define external fastcc  i64 @"multictr.perhaps.perhaps<0>"(i64  %"content##0")    {
entry:
  ret i64 %"content##0" 
}


define external fastcc  i64 @"multictr.perhaps.perhaps<1>"(i64  %"#result##0")    {
entry:
  ret i64 %"#result##0" 
}


define external fastcc  i1 @"multictr.perhaps.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp eq i64 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.rank
  representation  : 4 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.rank.=<0>
                    multictr.rank.ace<0>
                    multictr.rank.jack<0>
                    multictr.rank.king<0>
                    multictr.rank.queen<0>
                    multictr.rank.r10<0>
                    multictr.rank.r2<0>
                    multictr.rank.r3<0>
                    multictr.rank.r4<0>
                    multictr.rank.r5<0>
                    multictr.rank.r6<0>
                    multictr.rank.r7<0>
                    multictr.rank.r8<0>
                    multictr.rank.r9<0>
                    multictr.rank.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: multictr.rank.=<0>
=(#left##0:multictr.rank, #right##0:multictr.rank, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.rank, ~#right##0:multictr.rank, ?#success##0:wybe.bool)


ace > public {inline} (0 calls)
0: multictr.rank.ace<0>
ace(?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(12:multictr.rank, ?#result##0:multictr.rank)


jack > public {inline} (0 calls)
0: multictr.rank.jack<0>
jack(?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(9:multictr.rank, ?#result##0:multictr.rank)


king > public {inline} (0 calls)
0: multictr.rank.king<0>
king(?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(11:multictr.rank, ?#result##0:multictr.rank)


queen > public {inline} (0 calls)
0: multictr.rank.queen<0>
queen(?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(10:multictr.rank, ?#result##0:multictr.rank)


r10 > public {inline} (0 calls)
0: multictr.rank.r10<0>
r10(?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(8:multictr.rank, ?#result##0:multictr.rank)


r2 > public {inline} (0 calls)
0: multictr.rank.r2<0>
r2(?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.rank, ?#result##0:multictr.rank)


r3 > public {inline} (0 calls)
0: multictr.rank.r3<0>
r3(?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:multictr.rank, ?#result##0:multictr.rank)


r4 > public {inline} (0 calls)
0: multictr.rank.r4<0>
r4(?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(2:multictr.rank, ?#result##0:multictr.rank)


r5 > public {inline} (0 calls)
0: multictr.rank.r5<0>
r5(?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(3:multictr.rank, ?#result##0:multictr.rank)


r6 > public {inline} (0 calls)
0: multictr.rank.r6<0>
r6(?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(4:multictr.rank, ?#result##0:multictr.rank)


r7 > public {inline} (0 calls)
0: multictr.rank.r7<0>
r7(?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(5:multictr.rank, ?#result##0:multictr.rank)


r8 > public {inline} (0 calls)
0: multictr.rank.r8<0>
r8(?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(6:multictr.rank, ?#result##0:multictr.rank)


r9 > public {inline} (0 calls)
0: multictr.rank.r9<0>
r9(?#result##0:multictr.rank)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(7:multictr.rank, ?#result##0:multictr.rank)


~= > public {inline} (0 calls)
0: multictr.rank.~=<0>
~=(#left##0:multictr.rank, #right##0:multictr.rank, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.rank, ~#right##0:multictr.rank, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.rank'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.rank.=<0>"(i4  %"#left##0", i4  %"#right##0")    {
entry:
  %0 = icmp eq i4 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i4 @"multictr.rank.ace<0>"()    {
entry:
  ret i4 12 
}


define external fastcc  i4 @"multictr.rank.jack<0>"()    {
entry:
  ret i4 9 
}


define external fastcc  i4 @"multictr.rank.king<0>"()    {
entry:
  ret i4 11 
}


define external fastcc  i4 @"multictr.rank.queen<0>"()    {
entry:
  ret i4 10 
}


define external fastcc  i4 @"multictr.rank.r10<0>"()    {
entry:
  ret i4 8 
}


define external fastcc  i4 @"multictr.rank.r2<0>"()    {
entry:
  ret i4 0 
}


define external fastcc  i4 @"multictr.rank.r3<0>"()    {
entry:
  ret i4 1 
}


define external fastcc  i4 @"multictr.rank.r4<0>"()    {
entry:
  ret i4 2 
}


define external fastcc  i4 @"multictr.rank.r5<0>"()    {
entry:
  ret i4 3 
}


define external fastcc  i4 @"multictr.rank.r6<0>"()    {
entry:
  ret i4 4 
}


define external fastcc  i4 @"multictr.rank.r7<0>"()    {
entry:
  ret i4 5 
}


define external fastcc  i4 @"multictr.rank.r8<0>"()    {
entry:
  ret i4 6 
}


define external fastcc  i4 @"multictr.rank.r9<0>"()    {
entry:
  ret i4 7 
}


define external fastcc  i1 @"multictr.rank.~=<0>"(i4  %"#left##0", i4  %"#right##0")    {
entry:
  %0 = icmp eq i4 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.simple
  representation  : address
  public submods  : 
  public resources: 
  public procs    : multictr.simple.=<0>
                    multictr.simple.one<0>
                    multictr.simple.one<1>
                    multictr.simple.one_field<0>
                    multictr.simple.one_field<1>
                    multictr.simple.two<0>
                    multictr.simple.two<1>
                    multictr.simple.two_field1<0>
                    multictr.simple.two_field1<1>
                    multictr.simple.two_field2<0>
                    multictr.simple.two_field2<1>
                    multictr.simple.zero<0>
                    multictr.simple.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

= > public (1 calls)
0: multictr.simple.=<0>
=(#left##0:multictr.simple, #right##0:multictr.simple, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:multictr.simple, ~#right##0:multictr.simple, ?#success##0:wybe.bool)

    1:
        foreign llvm and(#left##0:wybe.int, 1:wybe.int, ?tmp#11##0:wybe.int)
        foreign llvm icmp_eq(tmp#11##0:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.bool)
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm icmp_eq(~tmp#11##0:wybe.int, 1:wybe.int, ?tmp#16##0:wybe.bool)
            case ~tmp#16##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(#left##0:multictr.simple, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#left#two_field1##0:wybe.int) @multictr:nn:nn
                foreign lpvm access(~#left##0:multictr.simple, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#left#two_field2##0:wybe.int) @multictr:nn:nn
                foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#18##0:wybe.bool)
                case ~tmp#18##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#19##0:wybe.int)
                    foreign llvm icmp_eq(~tmp#19##0:wybe.int, 1:wybe.int, ?tmp#20##0:wybe.bool)
                    case ~tmp#20##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign lpvm access(#right##0:multictr.simple, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#right#two_field1##0:wybe.int) @multictr:nn:nn
                        foreign lpvm access(~#right##0:multictr.simple, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#right#two_field2##0:wybe.int) @multictr:nn:nn
                        foreign llvm icmp_eq(~#left#two_field1##0:wybe.int, ~#right#two_field1##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
                        case ~tmp#5##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                        1:
                            foreign llvm icmp_eq(~#left#two_field2##0:wybe.int, ~#right#two_field2##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





        1:
            foreign lpvm access(~#left##0:multictr.simple, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#one_field##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.bool)
            case ~tmp#14##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#15##0:wybe.int)
                foreign llvm icmp_eq(~tmp#15##0:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.bool)
                case ~tmp#16##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.simple, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#one_field##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#one_field##0:wybe.int, ~#right#one_field##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn






one > public {inline} (0 calls)
0: multictr.simple.one<0>
one(one_field##0:wybe.int, ?#result##0:multictr.simple)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.simple) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.simple, ?#result##0:multictr.simple, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~one_field##0:wybe.int) @multictr:nn:nn
one > public {inline} (11 calls)
1: multictr.simple.one<1>
one(?one_field##0:wybe.int, #result##0:multictr.simple, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?one_field##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?one_field##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.simple, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?one_field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




one_field > public {inline} (0 calls)
0: multictr.simple.one_field<0>
one_field(#rec##0:multictr.simple, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.simple, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


one_field > public {inline} (0 calls)
1: multictr.simple.one_field<1>
one_field(#rec##0:multictr.simple, ?#rec##1:multictr.simple, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.simple, ?#rec##1:multictr.simple)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.simple, ?#rec##1:multictr.simple)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.simple, ?#rec##1:multictr.simple, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




two > public {inline} (0 calls)
0: multictr.simple.two<0>
two(two_field1##0:wybe.int, two_field2##0:wybe.int, ?#result##0:multictr.simple)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.simple) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.simple, ?#rec##1:multictr.simple, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~two_field1##0:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.simple, ?#rec##2:multictr.simple, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~two_field2##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.simple, 1:wybe.int, ?#result##0:multictr.simple) @multictr:nn:nn
two > public {inline} (7 calls)
1: multictr.simple.two<1>
two(?two_field1##0:wybe.int, ?two_field2##0:wybe.int, #result##0:multictr.simple, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?two_field1##0:wybe.int)
        foreign llvm move(undef:wybe.int, ?two_field2##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?two_field1##0:wybe.int)
            foreign llvm move(undef:wybe.int, ?two_field2##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.simple, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?two_field1##0:wybe.int) @multictr:nn:nn
            foreign lpvm access(~#result##0:multictr.simple, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?two_field2##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




two_field1 > public {inline} (0 calls)
0: multictr.simple.two_field1<0>
two_field1(#rec##0:multictr.simple, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.simple, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


two_field1 > public {inline} (0 calls)
1: multictr.simple.two_field1<1>
two_field1(#rec##0:multictr.simple, ?#rec##1:multictr.simple, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.simple, ?#rec##1:multictr.simple)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.simple, ?#rec##1:multictr.simple)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.simple, ?#rec##1:multictr.simple, -1:wybe.int, 0:wybe.int, 16:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




two_field2 > public {inline} (0 calls)
0: multictr.simple.two_field2<0>
two_field2(#rec##0:multictr.simple, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.simple, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


two_field2 > public {inline} (0 calls)
1: multictr.simple.two_field2<1>
two_field2(#rec##0:multictr.simple, ?#rec##1:multictr.simple, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.simple, ?#rec##1:multictr.simple)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.simple, ?#rec##1:multictr.simple)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.simple, ?#rec##1:multictr.simple, 7:wybe.int, 0:wybe.int, 16:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




zero > public {inline} (0 calls)
0: multictr.simple.zero<0>
zero(?#result##0:multictr.simple)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.simple, ?#result##0:multictr.simple)


~= > public {inline} (0 calls)
0: multictr.simple.~=<0>
~=(#left##0:multictr.simple, #right##0:multictr.simple, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multictr.simple.=<0>(~#left##0:multictr.simple, ~#right##0:multictr.simple, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.simple'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.simple.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp ne i64 %"#left##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#left##0", 1 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %35 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %35 
if.then1:
  %3 = inttoptr i64 %"#left##0" to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = icmp ne i64 %"#right##0", 0 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %13 = icmp eq i64 %1, 1 
  br i1 %13, label %if.then4, label %if.else4 
if.then2:
  %7 = and i64 %"#right##0", 1 
  %8 = icmp eq i64 %7, 0 
  br i1 %8, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %9 = inttoptr i64 %"#right##0" to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = icmp eq i64 %5, %11 
  ret i1 %12 
if.else3:
  ret i1 0 
if.then4:
  %14 = add   i64 %"#left##0", -1 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = add   i64 %"#left##0", 7 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = icmp ne i64 %"#right##0", 0 
  br i1 %22, label %if.then5, label %if.else5 
if.else4:
  ret i1 0 
if.then5:
  %23 = and i64 %"#right##0", 1 
  %24 = icmp eq i64 %23, 1 
  br i1 %24, label %if.then6, label %if.else6 
if.else5:
  ret i1 0 
if.then6:
  %25 = add   i64 %"#right##0", -1 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %29 = add   i64 %"#right##0", 7 
  %30 = inttoptr i64 %29 to i64* 
  %31 = getelementptr  i64, i64* %30, i64 0 
  %32 = load  i64, i64* %31 
  %33 = icmp eq i64 %17, %28 
  br i1 %33, label %if.then7, label %if.else7 
if.else6:
  ret i1 0 
if.then7:
  %34 = icmp eq i64 %21, %32 
  ret i1 %34 
if.else7:
  ret i1 0 
}


define external fastcc  i64 @"multictr.simple.one<0>"(i64  %"one_field##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"one_field##0", i64* %4 
  ret i64 %2 
}


define external fastcc  {i64, i1} @"multictr.simple.one<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 1 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = inttoptr i64 %"#result##0" to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"multictr.simple.one_field<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 1 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = inttoptr i64 %"#rec##0" to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"multictr.simple.one_field<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 1 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %15 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %16 = insertvalue {i64, i1} %15, i1 0, 1 
  ret {i64, i1} %16 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = inttoptr i64 %5 to i8* 
  %7 = inttoptr i64 %"#rec##0" to i8* 
  %8 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %6, i8*  %7, i32  %8, i1  0)  
  %9 = inttoptr i64 %5 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"#field##0", i64* %10 
  %11 = insertvalue {i64, i1} undef, i64 %5, 0 
  %12 = insertvalue {i64, i1} %11, i1 1, 1 
  ret {i64, i1} %12 
if.else1:
  %13 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
}


define external fastcc  i64 @"multictr.simple.two<0>"(i64  %"two_field1##0", i64  %"two_field2##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"two_field1##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"two_field2##0", i64* %7 
  %8 = or i64 %2, 1 
  ret i64 %8 
}


define external fastcc  {i64, i64, i1} @"multictr.simple.two<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 1 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %17 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %18 = insertvalue {i64, i64, i1} %17, i64 undef, 1 
  %19 = insertvalue {i64, i64, i1} %18, i1 0, 2 
  ret {i64, i64, i1} %19 
if.then1:
  %3 = add   i64 %"#result##0", -1 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = add   i64 %"#result##0", 7 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = insertvalue {i64, i64, i1} undef, i64 %6, 0 
  %12 = insertvalue {i64, i64, i1} %11, i64 %10, 1 
  %13 = insertvalue {i64, i64, i1} %12, i1 1, 2 
  ret {i64, i64, i1} %13 
if.else1:
  %14 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i64, i1} %14, i64 undef, 1 
  %16 = insertvalue {i64, i64, i1} %15, i1 0, 2 
  ret {i64, i64, i1} %16 
}


define external fastcc  {i64, i1} @"multictr.simple.two_field1<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 1 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#rec##0", -1 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  {i64, i1} @"multictr.simple.two_field1<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 1 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = trunc i64 16 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 1 
  %7 = sub   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -1 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 %"#field##0", i64* %13 
  %14 = insertvalue {i64, i1} undef, i64 %6, 0 
  %15 = insertvalue {i64, i1} %14, i1 1, 1 
  ret {i64, i1} %15 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
}


define external fastcc  {i64, i1} @"multictr.simple.two_field2<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 1 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
if.then1:
  %3 = add   i64 %"#rec##0", 7 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i1} undef, i64 %6, 0 
  %8 = insertvalue {i64, i1} %7, i1 1, 1 
  ret {i64, i1} %8 
if.else1:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
}


define external fastcc  {i64, i1} @"multictr.simple.two_field2<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 1 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %18 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %19 = insertvalue {i64, i1} %18, i1 0, 1 
  ret {i64, i1} %19 
if.then1:
  %3 = trunc i64 16 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 1 
  %7 = sub   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, 7 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 %"#field##0", i64* %13 
  %14 = insertvalue {i64, i1} undef, i64 %6, 0 
  %15 = insertvalue {i64, i1} %14, i1 1, 1 
  ret {i64, i1} %15 
if.else1:
  %16 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
}


define external fastcc  i64 @"multictr.simple.zero<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i1 @"multictr.simple.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = tail call fastcc  i1  @"multictr.simple.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.suit
  representation  : 2 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.suit.=<0>
                    multictr.suit.clubs<0>
                    multictr.suit.diamonds<0>
                    multictr.suit.hearts<0>
                    multictr.suit.spades<0>
                    multictr.suit.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: multictr.suit.=<0>
=(#left##0:multictr.suit, #right##0:multictr.suit, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.suit, ~#right##0:multictr.suit, ?#success##0:wybe.bool)


clubs > public {inline} (0 calls)
0: multictr.suit.clubs<0>
clubs(?#result##0:multictr.suit)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.suit, ?#result##0:multictr.suit)


diamonds > public {inline} (0 calls)
0: multictr.suit.diamonds<0>
diamonds(?#result##0:multictr.suit)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:multictr.suit, ?#result##0:multictr.suit)


hearts > public {inline} (0 calls)
0: multictr.suit.hearts<0>
hearts(?#result##0:multictr.suit)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(2:multictr.suit, ?#result##0:multictr.suit)


spades > public {inline} (0 calls)
0: multictr.suit.spades<0>
spades(?#result##0:multictr.suit)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(3:multictr.suit, ?#result##0:multictr.suit)


~= > public {inline} (0 calls)
0: multictr.suit.~=<0>
~=(#left##0:multictr.suit, #right##0:multictr.suit, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.suit, ~#right##0:multictr.suit, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.suit'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.suit.=<0>"(i2  %"#left##0", i2  %"#right##0")    {
entry:
  %0 = icmp eq i2 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i2 @"multictr.suit.clubs<0>"()    {
entry:
  ret i2 0 
}


define external fastcc  i2 @"multictr.suit.diamonds<0>"()    {
entry:
  ret i2 1 
}


define external fastcc  i2 @"multictr.suit.hearts<0>"()    {
entry:
  ret i2 2 
}


define external fastcc  i2 @"multictr.suit.spades<0>"()    {
entry:
  ret i2 3 
}


define external fastcc  i1 @"multictr.suit.~=<0>"(i2  %"#left##0", i2  %"#right##0")    {
entry:
  %0 = icmp eq i2 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.unit
  representation  : 0 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.unit.=<0>
                    multictr.unit.unit<0>
                    multictr.unit.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: multictr.unit.=<0>
=([#left##0:multictr.unit], [#right##0:multictr.unit], ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


unit > public {inline} (0 calls)
0: multictr.unit.unit<0>
unit(?#result##0:multictr.unit)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.unit, ?#result##0:multictr.unit)


~= > public {inline} (0 calls)
0: multictr.unit.~=<0>
~=([#left##0:multictr.unit], [#right##0:multictr.unit], ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.unit'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.unit.=<0>"()    {
entry:
  ret i1 1 
}


define external fastcc  void @"multictr.unit.unit<0>"()    {
entry:
  ret void 
}


define external fastcc  i1 @"multictr.unit.~=<0>"()    {
entry:
  ret i1 0 
}

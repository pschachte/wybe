======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module multictr
  representation  : (not a type)
  public submods  : card -> multictr.card
                    complicated -> multictr.complicated
                    length -> multictr.length
                    maybe_int -> multictr.maybe_int
                    number -> multictr.number
                    perhaps -> multictr.perhaps
                    rank -> multictr.rank
                    simple -> multictr.simple
                    suit -> multictr.suit
                    unit -> multictr.unit
  public resources: 
  public procs    : multictr.card.=<0>
                    multictr.card.card<0>
                    multictr.card.card<1>
                    multictr.card.rank<0>
                    multictr.card.rank<1>
                    multictr.card.suit<0>
                    multictr.card.suit<1>
                    multictr.card.~=<0>
                    multictr.complicated.=<0>
                    multictr.complicated.autumn<0>
                    multictr.complicated.c01<0>
                    multictr.complicated.c01<1>
                    multictr.complicated.c02<0>
                    multictr.complicated.c02<1>
                    multictr.complicated.c03<0>
                    multictr.complicated.c03<1>
                    multictr.complicated.c04<0>
                    multictr.complicated.c04<1>
                    multictr.complicated.c05<0>
                    multictr.complicated.c05<1>
                    multictr.complicated.c06<0>
                    multictr.complicated.c06<1>
                    multictr.complicated.c07<0>
                    multictr.complicated.c07<1>
                    multictr.complicated.c08<0>
                    multictr.complicated.c08<1>
                    multictr.complicated.c09<0>
                    multictr.complicated.c09<1>
                    multictr.complicated.c10<0>
                    multictr.complicated.c10<1>
                    multictr.complicated.c11<0>
                    multictr.complicated.c11<1>
                    multictr.complicated.c12<0>
                    multictr.complicated.c12<1>
                    multictr.complicated.c13<0>
                    multictr.complicated.c13<1>
                    multictr.complicated.c14<0>
                    multictr.complicated.c14<1>
                    multictr.complicated.c15<0>
                    multictr.complicated.c15<1>
                    multictr.complicated.c16<0>
                    multictr.complicated.c16<1>
                    multictr.complicated.c17<0>
                    multictr.complicated.c17<1>
                    multictr.complicated.f01<0>
                    multictr.complicated.f01<1>
                    multictr.complicated.f02<0>
                    multictr.complicated.f02<1>
                    multictr.complicated.f03<0>
                    multictr.complicated.f03<1>
                    multictr.complicated.f04<0>
                    multictr.complicated.f04<1>
                    multictr.complicated.f05<0>
                    multictr.complicated.f05<1>
                    multictr.complicated.f06<0>
                    multictr.complicated.f06<1>
                    multictr.complicated.f07<0>
                    multictr.complicated.f07<1>
                    multictr.complicated.f08<0>
                    multictr.complicated.f08<1>
                    multictr.complicated.f09<0>
                    multictr.complicated.f09<1>
                    multictr.complicated.f10<0>
                    multictr.complicated.f10<1>
                    multictr.complicated.f11<0>
                    multictr.complicated.f11<1>
                    multictr.complicated.f12<0>
                    multictr.complicated.f12<1>
                    multictr.complicated.f13<0>
                    multictr.complicated.f13<1>
                    multictr.complicated.f14<0>
                    multictr.complicated.f14<1>
                    multictr.complicated.f15<0>
                    multictr.complicated.f15<1>
                    multictr.complicated.f16<0>
                    multictr.complicated.f16<1>
                    multictr.complicated.f17<0>
                    multictr.complicated.f17<1>
                    multictr.complicated.spring<0>
                    multictr.complicated.summer<0>
                    multictr.complicated.winter<0>
                    multictr.complicated.~=<0>
                    multictr.length.=<0>
                    multictr.length.metres<0>
                    multictr.length.metres<1>
                    multictr.length.value<0>
                    multictr.length.value<1>
                    multictr.length.~=<0>
                    multictr.maybe_int.=<0>
                    multictr.maybe_int.just<0>
                    multictr.maybe_int.just<1>
                    multictr.maybe_int.nothing<0>
                    multictr.maybe_int.value<0>
                    multictr.maybe_int.value<1>
                    multictr.maybe_int.~=<0>
                    multictr.number.=<0>
                    multictr.number.float<0>
                    multictr.number.float<1>
                    multictr.number.float_value<0>
                    multictr.number.float_value<1>
                    multictr.number.int<0>
                    multictr.number.int<1>
                    multictr.number.int_value<0>
                    multictr.number.int_value<1>
                    multictr.number.~=<0>
                    multictr.perhaps.=<0>
                    multictr.perhaps.content<0>
                    multictr.perhaps.content<1>
                    multictr.perhaps.perhaps<0>
                    multictr.perhaps.perhaps<1>
                    multictr.perhaps.~=<0>
                    multictr.rank.=<0>
                    multictr.rank.ace<0>
                    multictr.rank.jack<0>
                    multictr.rank.king<0>
                    multictr.rank.queen<0>
                    multictr.rank.r10<0>
                    multictr.rank.r2<0>
                    multictr.rank.r3<0>
                    multictr.rank.r4<0>
                    multictr.rank.r5<0>
                    multictr.rank.r6<0>
                    multictr.rank.r7<0>
                    multictr.rank.r8<0>
                    multictr.rank.r9<0>
                    multictr.rank.~=<0>
                    multictr.simple.=<0>
                    multictr.simple.one<0>
                    multictr.simple.one<1>
                    multictr.simple.one_field<0>
                    multictr.simple.one_field<1>
                    multictr.simple.two<0>
                    multictr.simple.two<1>
                    multictr.simple.two_field1<0>
                    multictr.simple.two_field1<1>
                    multictr.simple.two_field2<0>
                    multictr.simple.two_field2<1>
                    multictr.simple.zero<0>
                    multictr.simple.~=<0>
                    multictr.suit.=<0>
                    multictr.suit.clubs<0>
                    multictr.suit.diamonds<0>
                    multictr.suit.hearts<0>
                    multictr.suit.spades<0>
                    multictr.suit.~=<0>
                    multictr.unit.=<0>
                    multictr.unit.unit<0>
                    multictr.unit.~=<0>
  imports         : public use multictr.card
                    public use multictr.complicated
                    public use multictr.length
                    public use multictr.maybe_int
                    public use multictr.number
                    public use multictr.perhaps
                    public use multictr.rank
                    public use multictr.simple
                    public use multictr.suit
                    public use multictr.unit
                    use wybe
  resources       : 
  submodules      : multictr.card, multictr.complicated, multictr.length, multictr.maybe_int, multictr.number, multictr.perhaps, multictr.rank, multictr.simple, multictr.suit, multictr.unit
  procs           : 


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'multictr'

source_filename = "!ROOT!/final-dump/multictr.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

--------------------------------------------------
 Module multictr.card
  representation  : 6 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.card.=<0>
                    multictr.card.card<0>
                    multictr.card.card<1>
                    multictr.card.rank<0>
                    multictr.card.rank<1>
                    multictr.card.suit<0>
                    multictr.card.suit<1>
                    multictr.card.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: multictr.card.=<0>
=(#left##0:multictr.card, #right##0:multictr.card, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.card, ~#right##0:multictr.card, ?#success##0:wybe.bool)


proc card > public {inline} (0 calls)
0: multictr.card.card<0>
card(rank##0:multictr.rank, suit##0:multictr.suit, ?#result##3:multictr.card)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~rank##0:multictr.rank, ?#temp##0:multictr.card) @multictr:nn:nn
    foreign llvm shl(~#temp##0:multictr.card, 2:multictr.card, ?#temp##1:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~suit##0:multictr.suit, ?#temp##2:multictr.card) @multictr:nn:nn
    foreign llvm or(~#temp##1:multictr.card, ~#temp##2:multictr.card, ?#result##3:multictr.card) @multictr:nn:nn
proc card > public {inline} (0 calls)
1: multictr.card.card<1>
card(?rank##0:multictr.rank, ?suit##0:multictr.suit, #result##0:multictr.card)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm lshr(#result##0:multictr.card, 2:multictr.card, ?#temp##0:multictr.card) @multictr:nn:nn
    foreign llvm and(~#temp##0:multictr.card, 15:multictr.card, ?#temp2##0:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#temp2##0:multictr.card, ?rank##0:multictr.rank) @multictr:nn:nn
    foreign llvm and(~#result##0:multictr.card, 3:multictr.card, ?#temp2##1:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#temp2##1:multictr.card, ?suit##0:multictr.suit) @multictr:nn:nn


proc rank > public {inline} (0 calls)
0: multictr.card.rank<0>
rank(#rec##0:multictr.card, ?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm lshr(~#rec##0:multictr.card, 2:multictr.card, ?#rec##1:multictr.card) @multictr:nn:nn
    foreign llvm and(~#rec##1:multictr.card, 15:multictr.card, ?#field##0:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#field##0:multictr.card, ?#result##0:multictr.rank) @multictr:nn:nn
proc rank > public {inline} (0 calls)
1: multictr.card.rank<1>
rank(#rec##0:multictr.card, ?#rec##2:multictr.card, #field##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(~#rec##0:multictr.card, -61:multictr.card, ?#rec##1:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#field##0:multictr.rank, ?#temp##0:multictr.card) @multictr:nn:nn
    foreign llvm shl(~#temp##0:multictr.card, 2:multictr.card, ?#temp##1:multictr.card) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.card, ~#temp##1:multictr.card, ?#rec##2:multictr.card) @multictr:nn:nn


proc suit > public {inline} (0 calls)
0: multictr.card.suit<0>
suit(#rec##0:multictr.card, ?#result##0:multictr.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(~#rec##0:multictr.card, 3:multictr.card, ?#field##0:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#field##0:multictr.card, ?#result##0:multictr.suit) @multictr:nn:nn
proc suit > public {inline} (0 calls)
1: multictr.card.suit<1>
suit(#rec##0:multictr.card, ?#rec##2:multictr.card, #field##0:multictr.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(~#rec##0:multictr.card, -4:multictr.card, ?#rec##1:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#field##0:multictr.suit, ?#temp##0:multictr.card) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.card, ~#temp##0:multictr.card, ?#rec##2:multictr.card) @multictr:nn:nn


proc ~= > public {inline} (0 calls)
0: multictr.card.~=<0>
~=(#left##0:multictr.card, #right##0:multictr.card, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.card, ~#right##0:multictr.card, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'multictr.card'

source_filename = "!ROOT!/final-dump/multictr.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"multictr.card.=<0>"(i6 %"#left##0", i6 %"#right##0") {
  %"tmp#1##0" = icmp eq i6 %"#left##0", %"#right##0"
  ret i1 %"tmp#1##0"
}

define external fastcc i6 @"multictr.card.card<0>"(i4 %"rank##0", i2 %"suit##0") {
  %"#temp##0" = zext i4 %"rank##0" to i6
  %"#temp##1" = shl i6 %"#temp##0", 2
  %"#temp##2" = zext i2 %"suit##0" to i6
  %"tmp#0##0" = or i6 %"#temp##1", %"#temp##2"
  ret i6 %"tmp#0##0"
}

define external fastcc {i4, i2} @"multictr.card.card<1>"(i6 %"#result##0") {
  %"#temp##0" = lshr i6 %"#result##0", 2
  %"#temp2##0" = and i6 %"#temp##0", 15
  %"tmp#0##0" = trunc i6 %"#temp2##0" to i4
  %"#temp2##1" = and i6 %"#result##0", 3
  %"tmp#1##0" = trunc i6 %"#temp2##1" to i2
  %"tmp#2##0" = insertvalue {i4, i2} undef, i4 %"tmp#0##0", 0
  %"tmp#3##0" = insertvalue {i4, i2} %"tmp#2##0", i2 %"tmp#1##0", 1
  ret {i4, i2} %"tmp#3##0"
}

define external fastcc i4 @"multictr.card.rank<0>"(i6 %"#rec##0") {
  %"#rec##1" = lshr i6 %"#rec##0", 2
  %"#field##0" = and i6 %"#rec##1", 15
  %"tmp#0##0" = trunc i6 %"#field##0" to i4
  ret i4 %"tmp#0##0"
}

define external fastcc i6 @"multictr.card.rank<1>"(i6 %"#rec##0", i4 %"#field##0") {
  %"#rec##1" = and i6 %"#rec##0", -61
  %"#temp##0" = zext i4 %"#field##0" to i6
  %"#temp##1" = shl i6 %"#temp##0", 2
  %"tmp#0##0" = or i6 %"#rec##1", %"#temp##1"
  ret i6 %"tmp#0##0"
}

define external fastcc i2 @"multictr.card.suit<0>"(i6 %"#rec##0") {
  %"#field##0" = and i6 %"#rec##0", 3
  %"tmp#0##0" = trunc i6 %"#field##0" to i2
  ret i2 %"tmp#0##0"
}

define external fastcc i6 @"multictr.card.suit<1>"(i6 %"#rec##0", i2 %"#field##0") {
  %"#rec##1" = and i6 %"#rec##0", -4
  %"#temp##0" = zext i2 %"#field##0" to i6
  %"tmp#0##0" = or i6 %"#rec##1", %"#temp##0"
  ret i6 %"tmp#0##0"
}

define external fastcc i1 @"multictr.card.~=<0>"(i6 %"#left##0", i6 %"#right##0") {
  %"tmp#0##0" = icmp eq i6 %"#left##0", %"#right##0"
  %"tmp#3##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#3##0"
}

--------------------------------------------------
 Module multictr.complicated
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : multictr.complicated.=<0>
                    multictr.complicated.autumn<0>
                    multictr.complicated.c01<0>
                    multictr.complicated.c01<1>
                    multictr.complicated.c02<0>
                    multictr.complicated.c02<1>
                    multictr.complicated.c03<0>
                    multictr.complicated.c03<1>
                    multictr.complicated.c04<0>
                    multictr.complicated.c04<1>
                    multictr.complicated.c05<0>
                    multictr.complicated.c05<1>
                    multictr.complicated.c06<0>
                    multictr.complicated.c06<1>
                    multictr.complicated.c07<0>
                    multictr.complicated.c07<1>
                    multictr.complicated.c08<0>
                    multictr.complicated.c08<1>
                    multictr.complicated.c09<0>
                    multictr.complicated.c09<1>
                    multictr.complicated.c10<0>
                    multictr.complicated.c10<1>
                    multictr.complicated.c11<0>
                    multictr.complicated.c11<1>
                    multictr.complicated.c12<0>
                    multictr.complicated.c12<1>
                    multictr.complicated.c13<0>
                    multictr.complicated.c13<1>
                    multictr.complicated.c14<0>
                    multictr.complicated.c14<1>
                    multictr.complicated.c15<0>
                    multictr.complicated.c15<1>
                    multictr.complicated.c16<0>
                    multictr.complicated.c16<1>
                    multictr.complicated.c17<0>
                    multictr.complicated.c17<1>
                    multictr.complicated.f01<0>
                    multictr.complicated.f01<1>
                    multictr.complicated.f02<0>
                    multictr.complicated.f02<1>
                    multictr.complicated.f03<0>
                    multictr.complicated.f03<1>
                    multictr.complicated.f04<0>
                    multictr.complicated.f04<1>
                    multictr.complicated.f05<0>
                    multictr.complicated.f05<1>
                    multictr.complicated.f06<0>
                    multictr.complicated.f06<1>
                    multictr.complicated.f07<0>
                    multictr.complicated.f07<1>
                    multictr.complicated.f08<0>
                    multictr.complicated.f08<1>
                    multictr.complicated.f09<0>
                    multictr.complicated.f09<1>
                    multictr.complicated.f10<0>
                    multictr.complicated.f10<1>
                    multictr.complicated.f11<0>
                    multictr.complicated.f11<1>
                    multictr.complicated.f12<0>
                    multictr.complicated.f12<1>
                    multictr.complicated.f13<0>
                    multictr.complicated.f13<1>
                    multictr.complicated.f14<0>
                    multictr.complicated.f14<1>
                    multictr.complicated.f15<0>
                    multictr.complicated.f15<1>
                    multictr.complicated.f16<0>
                    multictr.complicated.f16<1>
                    multictr.complicated.f17<0>
                    multictr.complicated.f17<1>
                    multictr.complicated.spring<0>
                    multictr.complicated.summer<0>
                    multictr.complicated.winter<0>
                    multictr.complicated.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public (1 calls)
0: multictr.complicated.=<0>
=(#left##0:multictr.complicated, #right##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#left##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:multictr.complicated, ~#right##0:multictr.complicated, ?#success##0:wybe.bool)

    1:
        foreign llvm and(#left##0:wybe.int, 7:wybe.int, ?tmp#55##0:wybe.int)
        foreign llvm icmp_eq(tmp#55##0:wybe.int, 7:wybe.int, ?tmp#84##0:wybe.bool)
        case ~tmp#55##0:wybe.int of
        0:
            foreign lpvm access(~#left##0:multictr.complicated, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#f01##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#258##0:wybe.bool)
            case ~tmp#258##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#259##0:wybe.int)
                foreign llvm icmp_eq(~tmp#259##0:wybe.int, 0:wybe.int, ?tmp#260##0:wybe.bool)
                case ~tmp#260##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#f01##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f01##0:wybe.int, ~#right#f01##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        1:
            foreign lpvm access(~#left##0:multictr.complicated, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#f02##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#252##0:wybe.bool)
            case ~tmp#252##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#253##0:wybe.int)
                foreign llvm icmp_eq(~tmp#253##0:wybe.int, 1:wybe.int, ?tmp#254##0:wybe.bool)
                case ~tmp#254##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#f02##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f02##0:wybe.int, ~#right#f02##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        2:
            foreign lpvm access(~#left##0:multictr.complicated, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#left#f03##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#246##0:wybe.bool)
            case ~tmp#246##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#247##0:wybe.int)
                foreign llvm icmp_eq(~tmp#247##0:wybe.int, 2:wybe.int, ?tmp#248##0:wybe.bool)
                case ~tmp#248##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#right#f03##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f03##0:wybe.int, ~#right#f03##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        3:
            foreign lpvm access(~#left##0:multictr.complicated, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?#left#f04##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#240##0:wybe.bool)
            case ~tmp#240##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#241##0:wybe.int)
                foreign llvm icmp_eq(~tmp#241##0:wybe.int, 3:wybe.int, ?tmp#242##0:wybe.bool)
                case ~tmp#242##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?#right#f04##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f04##0:wybe.int, ~#right#f04##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        4:
            foreign lpvm access(~#left##0:multictr.complicated, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?#left#f05##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#234##0:wybe.bool)
            case ~tmp#234##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#235##0:wybe.int)
                foreign llvm icmp_eq(~tmp#235##0:wybe.int, 4:wybe.int, ?tmp#236##0:wybe.bool)
                case ~tmp#236##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?#right#f05##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f05##0:wybe.int, ~#right#f05##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        5:
            foreign lpvm access(~#left##0:multictr.complicated, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?#left#f06##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#228##0:wybe.bool)
            case ~tmp#228##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#229##0:wybe.int)
                foreign llvm icmp_eq(~tmp#229##0:wybe.int, 5:wybe.int, ?tmp#230##0:wybe.bool)
                case ~tmp#230##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?#right#f06##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f06##0:wybe.int, ~#right#f06##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        6:
            foreign lpvm access(~#left##0:multictr.complicated, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?#left#f07##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#222##0:wybe.bool)
            case ~tmp#222##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#223##0:wybe.int)
                foreign llvm icmp_eq(~tmp#223##0:wybe.int, 6:wybe.int, ?tmp#224##0:wybe.bool)
                case ~tmp#224##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?#right#f07##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f07##0:wybe.int, ~#right#f07##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        7:
            foreign lpvm access(#left##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#85##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#86##0:wybe.bool)
            case ~tmp#86##0:wybe.bool of
            0:
                foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#92##0:wybe.bool)
                case ~tmp#92##0:wybe.bool of
                0:
                    case ~tmp#84##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#98##0:wybe.bool)
                        case ~tmp#98##0:wybe.bool of
                        0:
                            foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#104##0:wybe.bool)
                            case ~tmp#104##0:wybe.bool of
                            0:
                                foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#110##0:wybe.bool)
                                case ~tmp#110##0:wybe.bool of
                                0:
                                    foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#116##0:wybe.bool)
                                    case ~tmp#116##0:wybe.bool of
                                    0:
                                        foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#122##0:wybe.bool)
                                        case ~tmp#122##0:wybe.bool of
                                        0:
                                            foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#128##0:wybe.bool)
                                            case ~tmp#128##0:wybe.bool of
                                            0:
                                                foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#134##0:wybe.bool)
                                                case ~tmp#134##0:wybe.bool of
                                                0:
                                                    foreign llvm icmp_eq(~tmp#85##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#140##0:wybe.bool)
                                                    case ~tmp#140##0:wybe.bool of
                                                    0:
                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                    1:
                                                        foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f17##0:wybe.int) @multictr:nn:nn
                                                        foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#142##0:wybe.bool)
                                                        case ~tmp#142##0:wybe.bool of
                                                        0:
                                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                        1:
                                                            foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#143##0:wybe.int)
                                                            foreign llvm icmp_eq(~tmp#143##0:wybe.int, 7:wybe.int, ?tmp#144##0:wybe.bool)
                                                            case ~tmp#144##0:wybe.bool of
                                                            0:
                                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                            1:
                                                                foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#145##0:16 bit unsigned) @multictr:nn:nn
                                                                foreign llvm icmp_eq(~tmp#145##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#146##0:wybe.bool)
                                                                case ~tmp#146##0:wybe.bool of
                                                                0:
                                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                1:
                                                                    foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f17##0:wybe.int) @multictr:nn:nn
                                                                    foreign llvm icmp_eq(~#left#f17##0:wybe.int, ~#right#f17##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                                1:
                                                    foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f16##0:wybe.int) @multictr:nn:nn
                                                    foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#150##0:wybe.bool)
                                                    case ~tmp#150##0:wybe.bool of
                                                    0:
                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                    1:
                                                        foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#151##0:wybe.int)
                                                        foreign llvm icmp_eq(~tmp#151##0:wybe.int, 7:wybe.int, ?tmp#152##0:wybe.bool)
                                                        case ~tmp#152##0:wybe.bool of
                                                        0:
                                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                        1:
                                                            foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#153##0:16 bit unsigned) @multictr:nn:nn
                                                            foreign llvm icmp_eq(~tmp#153##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#154##0:wybe.bool)
                                                            case ~tmp#154##0:wybe.bool of
                                                            0:
                                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                            1:
                                                                foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f16##0:wybe.int) @multictr:nn:nn
                                                                foreign llvm icmp_eq(~#left#f16##0:wybe.int, ~#right#f16##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                            1:
                                                foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f15##0:wybe.int) @multictr:nn:nn
                                                foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#158##0:wybe.bool)
                                                case ~tmp#158##0:wybe.bool of
                                                0:
                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                1:
                                                    foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#159##0:wybe.int)
                                                    foreign llvm icmp_eq(~tmp#159##0:wybe.int, 7:wybe.int, ?tmp#160##0:wybe.bool)
                                                    case ~tmp#160##0:wybe.bool of
                                                    0:
                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                    1:
                                                        foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#161##0:16 bit unsigned) @multictr:nn:nn
                                                        foreign llvm icmp_eq(~tmp#161##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#162##0:wybe.bool)
                                                        case ~tmp#162##0:wybe.bool of
                                                        0:
                                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                        1:
                                                            foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f15##0:wybe.int) @multictr:nn:nn
                                                            foreign llvm icmp_eq(~#left#f15##0:wybe.int, ~#right#f15##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                        1:
                                            foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f14##0:wybe.int) @multictr:nn:nn
                                            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#166##0:wybe.bool)
                                            case ~tmp#166##0:wybe.bool of
                                            0:
                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                            1:
                                                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#167##0:wybe.int)
                                                foreign llvm icmp_eq(~tmp#167##0:wybe.int, 7:wybe.int, ?tmp#168##0:wybe.bool)
                                                case ~tmp#168##0:wybe.bool of
                                                0:
                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                1:
                                                    foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#169##0:16 bit unsigned) @multictr:nn:nn
                                                    foreign llvm icmp_eq(~tmp#169##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#170##0:wybe.bool)
                                                    case ~tmp#170##0:wybe.bool of
                                                    0:
                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                    1:
                                                        foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f14##0:wybe.int) @multictr:nn:nn
                                                        foreign llvm icmp_eq(~#left#f14##0:wybe.int, ~#right#f14##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                    1:
                                        foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f13##0:wybe.int) @multictr:nn:nn
                                        foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#174##0:wybe.bool)
                                        case ~tmp#174##0:wybe.bool of
                                        0:
                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                        1:
                                            foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#175##0:wybe.int)
                                            foreign llvm icmp_eq(~tmp#175##0:wybe.int, 7:wybe.int, ?tmp#176##0:wybe.bool)
                                            case ~tmp#176##0:wybe.bool of
                                            0:
                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                            1:
                                                foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#177##0:16 bit unsigned) @multictr:nn:nn
                                                foreign llvm icmp_eq(~tmp#177##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#178##0:wybe.bool)
                                                case ~tmp#178##0:wybe.bool of
                                                0:
                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                1:
                                                    foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f13##0:wybe.int) @multictr:nn:nn
                                                    foreign llvm icmp_eq(~#left#f13##0:wybe.int, ~#right#f13##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                1:
                                    foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f12##0:wybe.int) @multictr:nn:nn
                                    foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#182##0:wybe.bool)
                                    case ~tmp#182##0:wybe.bool of
                                    0:
                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                    1:
                                        foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#183##0:wybe.int)
                                        foreign llvm icmp_eq(~tmp#183##0:wybe.int, 7:wybe.int, ?tmp#184##0:wybe.bool)
                                        case ~tmp#184##0:wybe.bool of
                                        0:
                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                        1:
                                            foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#185##0:16 bit unsigned) @multictr:nn:nn
                                            foreign llvm icmp_eq(~tmp#185##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#186##0:wybe.bool)
                                            case ~tmp#186##0:wybe.bool of
                                            0:
                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                            1:
                                                foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f12##0:wybe.int) @multictr:nn:nn
                                                foreign llvm icmp_eq(~#left#f12##0:wybe.int, ~#right#f12##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                            1:
                                foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f11##0:wybe.int) @multictr:nn:nn
                                foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#190##0:wybe.bool)
                                case ~tmp#190##0:wybe.bool of
                                0:
                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                1:
                                    foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#191##0:wybe.int)
                                    foreign llvm icmp_eq(~tmp#191##0:wybe.int, 7:wybe.int, ?tmp#192##0:wybe.bool)
                                    case ~tmp#192##0:wybe.bool of
                                    0:
                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                    1:
                                        foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#193##0:16 bit unsigned) @multictr:nn:nn
                                        foreign llvm icmp_eq(~tmp#193##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#194##0:wybe.bool)
                                        case ~tmp#194##0:wybe.bool of
                                        0:
                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                        1:
                                            foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f11##0:wybe.int) @multictr:nn:nn
                                            foreign llvm icmp_eq(~#left#f11##0:wybe.int, ~#right#f11##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                        1:
                            foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f10##0:wybe.int) @multictr:nn:nn
                            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#198##0:wybe.bool)
                            case ~tmp#198##0:wybe.bool of
                            0:
                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                            1:
                                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#199##0:wybe.int)
                                foreign llvm icmp_eq(~tmp#199##0:wybe.int, 7:wybe.int, ?tmp#200##0:wybe.bool)
                                case ~tmp#200##0:wybe.bool of
                                0:
                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                1:
                                    foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#201##0:16 bit unsigned) @multictr:nn:nn
                                    foreign llvm icmp_eq(~tmp#201##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#202##0:wybe.bool)
                                    case ~tmp#202##0:wybe.bool of
                                    0:
                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                    1:
                                        foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f10##0:wybe.int) @multictr:nn:nn
                                        foreign llvm icmp_eq(~#left#f10##0:wybe.int, ~#right#f10##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn






                1:
                    foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f09##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#206##0:wybe.bool)
                    case ~tmp#206##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#207##0:wybe.int)
                        foreign llvm icmp_eq(~tmp#207##0:wybe.int, 7:wybe.int, ?tmp#208##0:wybe.bool)
                        case ~tmp#208##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                        1:
                            foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#209##0:16 bit unsigned) @multictr:nn:nn
                            foreign llvm icmp_eq(~tmp#209##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#210##0:wybe.bool)
                            case ~tmp#210##0:wybe.bool of
                            0:
                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                            1:
                                foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f09##0:wybe.int) @multictr:nn:nn
                                foreign llvm icmp_eq(~#left#f09##0:wybe.int, ~#right#f09##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





            1:
                foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f08##0:wybe.int) @multictr:nn:nn
                foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#214##0:wybe.bool)
                case ~tmp#214##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#215##0:wybe.int)
                    foreign llvm icmp_eq(~tmp#215##0:wybe.int, 7:wybe.int, ?tmp#216##0:wybe.bool)
                    case ~tmp#216##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#217##0:16 bit unsigned) @multictr:nn:nn
                        foreign llvm icmp_eq(~tmp#217##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#218##0:wybe.bool)
                        case ~tmp#218##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                        1:
                            foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f08##0:wybe.int) @multictr:nn:nn
                            foreign llvm icmp_eq(~#left#f08##0:wybe.int, ~#right#f08##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn








proc autumn > public {inline} (0 calls)
0: multictr.complicated.autumn<0>
autumn(?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(3:multictr.complicated, ?#result##0:multictr.complicated)


proc c01 > public {inline} (0 calls)
0: multictr.complicated.c01<0>
c01(f01##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#result##0:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f01##0:wybe.int) @multictr:nn:nn
proc c01 > public {inline} (40 calls)
1: multictr.complicated.c01<1>
c01(?f01##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f01##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f01##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?f01##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c02 > public {inline} (0 calls)
0: multictr.complicated.c02<0>
c02(f02##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f02##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 1:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c02 > public {inline} (35 calls)
1: multictr.complicated.c02<1>
c02(?f02##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f02##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f02##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?f02##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c03 > public {inline} (0 calls)
0: multictr.complicated.c03<0>
c03(f03##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f03##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 2:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c03 > public {inline} (33 calls)
1: multictr.complicated.c03<1>
c03(?f03##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f03##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 2:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f03##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?f03##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c04 > public {inline} (0 calls)
0: multictr.complicated.c04<0>
c04(f04##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f04##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 3:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c04 > public {inline} (31 calls)
1: multictr.complicated.c04<1>
c04(?f04##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f04##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f04##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?f04##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c05 > public {inline} (0 calls)
0: multictr.complicated.c05<0>
c05(f05##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f05##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 4:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c05 > public {inline} (29 calls)
1: multictr.complicated.c05<1>
c05(?f05##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f05##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 4:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f05##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?f05##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c06 > public {inline} (0 calls)
0: multictr.complicated.c06<0>
c06(f06##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f06##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 5:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c06 > public {inline} (27 calls)
1: multictr.complicated.c06<1>
c06(?f06##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f06##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 5:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f06##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?f06##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c07 > public {inline} (0 calls)
0: multictr.complicated.c07<0>
c07(f07##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f07##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 6:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c07 > public {inline} (25 calls)
1: multictr.complicated.c07<1>
c07(?f07##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f07##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 6:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f07##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?f07##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c08 > public {inline} (0 calls)
0: multictr.complicated.c08<0>
c08(f08##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 7:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f08##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c08 > public {inline} (23 calls)
1: multictr.complicated.c08<1>
c08(?f08##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f08##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f08##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f08##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f08##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c09 > public {inline} (0 calls)
0: multictr.complicated.c09<0>
c09(f09##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 8:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f09##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c09 > public {inline} (21 calls)
1: multictr.complicated.c09<1>
c09(?f09##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f09##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f09##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f09##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f09##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c10 > public {inline} (0 calls)
0: multictr.complicated.c10<0>
c10(f10##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 9:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f10##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c10 > public {inline} (19 calls)
1: multictr.complicated.c10<1>
c10(?f10##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f10##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f10##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f10##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f10##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c11 > public {inline} (0 calls)
0: multictr.complicated.c11<0>
c11(f11##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 10:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f11##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c11 > public {inline} (17 calls)
1: multictr.complicated.c11<1>
c11(?f11##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f11##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f11##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f11##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f11##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c12 > public {inline} (0 calls)
0: multictr.complicated.c12<0>
c12(f12##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 11:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f12##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c12 > public {inline} (15 calls)
1: multictr.complicated.c12<1>
c12(?f12##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f12##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f12##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f12##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f12##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c13 > public {inline} (0 calls)
0: multictr.complicated.c13<0>
c13(f13##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 12:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f13##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c13 > public {inline} (13 calls)
1: multictr.complicated.c13<1>
c13(?f13##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f13##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f13##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f13##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f13##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c14 > public {inline} (0 calls)
0: multictr.complicated.c14<0>
c14(f14##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 13:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f14##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c14 > public {inline} (11 calls)
1: multictr.complicated.c14<1>
c14(?f14##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f14##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f14##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f14##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f14##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c15 > public {inline} (0 calls)
0: multictr.complicated.c15<0>
c15(f15##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 14:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f15##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c15 > public {inline} (9 calls)
1: multictr.complicated.c15<1>
c15(?f15##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f15##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f15##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f15##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f15##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c16 > public {inline} (0 calls)
0: multictr.complicated.c16<0>
c16(f16##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 15:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f16##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c16 > public {inline} (7 calls)
1: multictr.complicated.c16<1>
c16(?f16##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f16##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f16##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f16##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f16##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c17 > public {inline} (0 calls)
0: multictr.complicated.c17<0>
c17(f17##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 16:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f17##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c17 > public {inline} (5 calls)
1: multictr.complicated.c17<1>
c17(?f17##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f17##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f17##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f17##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f17##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f01 > public {inline} (0 calls)
0: multictr.complicated.f01<0>
f01(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f01 > public {inline} (0 calls)
1: multictr.complicated.f01<1>
f01(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f02 > public {inline} (0 calls)
0: multictr.complicated.f02<0>
f02(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f02 > public {inline} (0 calls)
1: multictr.complicated.f02<1>
f02(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -1:wybe.int, 0:wybe.int, 8:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f03 > public {inline} (0 calls)
0: multictr.complicated.f03<0>
f03(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 2:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f03 > public {inline} (0 calls)
1: multictr.complicated.f03<1>
f03(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 2:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -2:wybe.int, 0:wybe.int, 8:wybe.int, 2:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f04 > public {inline} (0 calls)
0: multictr.complicated.f04<0>
f04(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f04 > public {inline} (0 calls)
1: multictr.complicated.f04<1>
f04(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -3:wybe.int, 0:wybe.int, 8:wybe.int, 3:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f05 > public {inline} (0 calls)
0: multictr.complicated.f05<0>
f05(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 4:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f05 > public {inline} (0 calls)
1: multictr.complicated.f05<1>
f05(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 4:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -4:wybe.int, 0:wybe.int, 8:wybe.int, 4:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f06 > public {inline} (0 calls)
0: multictr.complicated.f06<0>
f06(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 5:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f06 > public {inline} (0 calls)
1: multictr.complicated.f06<1>
f06(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 5:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -5:wybe.int, 0:wybe.int, 8:wybe.int, 5:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f07 > public {inline} (0 calls)
0: multictr.complicated.f07<0>
f07(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 6:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f07 > public {inline} (0 calls)
1: multictr.complicated.f07<1>
f07(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 6:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -6:wybe.int, 0:wybe.int, 8:wybe.int, 6:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f08 > public {inline} (0 calls)
0: multictr.complicated.f08<0>
f08(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f08 > public {inline} (0 calls)
1: multictr.complicated.f08<1>
f08(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f09 > public {inline} (0 calls)
0: multictr.complicated.f09<0>
f09(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f09 > public {inline} (0 calls)
1: multictr.complicated.f09<1>
f09(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f10 > public {inline} (0 calls)
0: multictr.complicated.f10<0>
f10(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f10 > public {inline} (0 calls)
1: multictr.complicated.f10<1>
f10(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f11 > public {inline} (0 calls)
0: multictr.complicated.f11<0>
f11(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f11 > public {inline} (0 calls)
1: multictr.complicated.f11<1>
f11(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f12 > public {inline} (0 calls)
0: multictr.complicated.f12<0>
f12(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f12 > public {inline} (0 calls)
1: multictr.complicated.f12<1>
f12(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f13 > public {inline} (0 calls)
0: multictr.complicated.f13<0>
f13(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f13 > public {inline} (0 calls)
1: multictr.complicated.f13<1>
f13(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f14 > public {inline} (0 calls)
0: multictr.complicated.f14<0>
f14(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f14 > public {inline} (0 calls)
1: multictr.complicated.f14<1>
f14(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f15 > public {inline} (0 calls)
0: multictr.complicated.f15<0>
f15(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f15 > public {inline} (0 calls)
1: multictr.complicated.f15<1>
f15(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f16 > public {inline} (0 calls)
0: multictr.complicated.f16<0>
f16(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f16 > public {inline} (0 calls)
1: multictr.complicated.f16<1>
f16(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f17 > public {inline} (0 calls)
0: multictr.complicated.f17<0>
f17(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f17 > public {inline} (0 calls)
1: multictr.complicated.f17<1>
f17(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc spring > public {inline} (0 calls)
0: multictr.complicated.spring<0>
spring(?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:multictr.complicated, ?#result##0:multictr.complicated)


proc summer > public {inline} (0 calls)
0: multictr.complicated.summer<0>
summer(?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(2:multictr.complicated, ?#result##0:multictr.complicated)


proc winter > public {inline} (0 calls)
0: multictr.complicated.winter<0>
winter(?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.complicated, ?#result##0:multictr.complicated)


proc ~= > public {inline} (0 calls)
0: multictr.complicated.~=<0>
~=(#left##0:multictr.complicated, #right##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multictr.complicated.=<0>(~#left##0:multictr.complicated, ~#right##0:multictr.complicated, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'multictr.complicated'

source_filename = "!ROOT!/final-dump/multictr.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"multictr.complicated.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp uge i64 %"#left##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#55##0" = and i64 %"#left##0", 7
  %"tmp#84##0" = icmp eq i64 %"tmp#55##0", 7
  switch i64 %"tmp#55##0", label %case.7.switch.1 [
    i64 0, label %case.0.switch.1
    i64 1, label %case.1.switch.1
    i64 2, label %case.2.switch.1
    i64 3, label %case.3.switch.1
    i64 4, label %case.4.switch.1
    i64 5, label %case.5.switch.1
    i64 6, label %case.6.switch.1
    i64 7, label %case.7.switch.1 ]
case.0.switch.1:
  %"tmp#263##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#f01##0" = load i64, ptr %"tmp#263##0"
  %"tmp#258##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#258##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#259##0" = and i64 %"#right##0", 7
  %"tmp#260##0" = icmp eq i64 %"tmp#259##0", 0
  br i1 %"tmp#260##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#264##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#f01##0" = load i64, ptr %"tmp#264##0"
  %"tmp#265##0" = icmp eq i64 %"#left#f01##0", %"#right#f01##0"
  ret i1 %"tmp#265##0"
if.else.3:
  ret i1 0
if.else.2:
  ret i1 0
case.1.switch.1:
  %"tmp#266##0" = add i64 %"#left##0", -1
  %"tmp#267##0" = inttoptr i64 %"tmp#266##0" to ptr
  %"#left#f02##0" = load i64, ptr %"tmp#267##0"
  %"tmp#252##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#252##0", label %if.then.4, label %if.else.4
if.then.4:
  %"tmp#253##0" = and i64 %"#right##0", 7
  %"tmp#254##0" = icmp eq i64 %"tmp#253##0", 1
  br i1 %"tmp#254##0", label %if.then.5, label %if.else.5
if.then.5:
  %"tmp#268##0" = add i64 %"#right##0", -1
  %"tmp#269##0" = inttoptr i64 %"tmp#268##0" to ptr
  %"#right#f02##0" = load i64, ptr %"tmp#269##0"
  %"tmp#270##0" = icmp eq i64 %"#left#f02##0", %"#right#f02##0"
  ret i1 %"tmp#270##0"
if.else.5:
  ret i1 0
if.else.4:
  ret i1 0
case.2.switch.1:
  %"tmp#271##0" = add i64 %"#left##0", -2
  %"tmp#272##0" = inttoptr i64 %"tmp#271##0" to ptr
  %"#left#f03##0" = load i64, ptr %"tmp#272##0"
  %"tmp#246##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#246##0", label %if.then.6, label %if.else.6
if.then.6:
  %"tmp#247##0" = and i64 %"#right##0", 7
  %"tmp#248##0" = icmp eq i64 %"tmp#247##0", 2
  br i1 %"tmp#248##0", label %if.then.7, label %if.else.7
if.then.7:
  %"tmp#273##0" = add i64 %"#right##0", -2
  %"tmp#274##0" = inttoptr i64 %"tmp#273##0" to ptr
  %"#right#f03##0" = load i64, ptr %"tmp#274##0"
  %"tmp#275##0" = icmp eq i64 %"#left#f03##0", %"#right#f03##0"
  ret i1 %"tmp#275##0"
if.else.7:
  ret i1 0
if.else.6:
  ret i1 0
case.3.switch.1:
  %"tmp#276##0" = add i64 %"#left##0", -3
  %"tmp#277##0" = inttoptr i64 %"tmp#276##0" to ptr
  %"#left#f04##0" = load i64, ptr %"tmp#277##0"
  %"tmp#240##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#240##0", label %if.then.8, label %if.else.8
if.then.8:
  %"tmp#241##0" = and i64 %"#right##0", 7
  %"tmp#242##0" = icmp eq i64 %"tmp#241##0", 3
  br i1 %"tmp#242##0", label %if.then.9, label %if.else.9
if.then.9:
  %"tmp#278##0" = add i64 %"#right##0", -3
  %"tmp#279##0" = inttoptr i64 %"tmp#278##0" to ptr
  %"#right#f04##0" = load i64, ptr %"tmp#279##0"
  %"tmp#280##0" = icmp eq i64 %"#left#f04##0", %"#right#f04##0"
  ret i1 %"tmp#280##0"
if.else.9:
  ret i1 0
if.else.8:
  ret i1 0
case.4.switch.1:
  %"tmp#281##0" = add i64 %"#left##0", -4
  %"tmp#282##0" = inttoptr i64 %"tmp#281##0" to ptr
  %"#left#f05##0" = load i64, ptr %"tmp#282##0"
  %"tmp#234##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#234##0", label %if.then.10, label %if.else.10
if.then.10:
  %"tmp#235##0" = and i64 %"#right##0", 7
  %"tmp#236##0" = icmp eq i64 %"tmp#235##0", 4
  br i1 %"tmp#236##0", label %if.then.11, label %if.else.11
if.then.11:
  %"tmp#283##0" = add i64 %"#right##0", -4
  %"tmp#284##0" = inttoptr i64 %"tmp#283##0" to ptr
  %"#right#f05##0" = load i64, ptr %"tmp#284##0"
  %"tmp#285##0" = icmp eq i64 %"#left#f05##0", %"#right#f05##0"
  ret i1 %"tmp#285##0"
if.else.11:
  ret i1 0
if.else.10:
  ret i1 0
case.5.switch.1:
  %"tmp#286##0" = add i64 %"#left##0", -5
  %"tmp#287##0" = inttoptr i64 %"tmp#286##0" to ptr
  %"#left#f06##0" = load i64, ptr %"tmp#287##0"
  %"tmp#228##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#228##0", label %if.then.12, label %if.else.12
if.then.12:
  %"tmp#229##0" = and i64 %"#right##0", 7
  %"tmp#230##0" = icmp eq i64 %"tmp#229##0", 5
  br i1 %"tmp#230##0", label %if.then.13, label %if.else.13
if.then.13:
  %"tmp#288##0" = add i64 %"#right##0", -5
  %"tmp#289##0" = inttoptr i64 %"tmp#288##0" to ptr
  %"#right#f06##0" = load i64, ptr %"tmp#289##0"
  %"tmp#290##0" = icmp eq i64 %"#left#f06##0", %"#right#f06##0"
  ret i1 %"tmp#290##0"
if.else.13:
  ret i1 0
if.else.12:
  ret i1 0
case.6.switch.1:
  %"tmp#291##0" = add i64 %"#left##0", -6
  %"tmp#292##0" = inttoptr i64 %"tmp#291##0" to ptr
  %"#left#f07##0" = load i64, ptr %"tmp#292##0"
  %"tmp#222##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#222##0", label %if.then.14, label %if.else.14
if.then.14:
  %"tmp#223##0" = and i64 %"#right##0", 7
  %"tmp#224##0" = icmp eq i64 %"tmp#223##0", 6
  br i1 %"tmp#224##0", label %if.then.15, label %if.else.15
if.then.15:
  %"tmp#293##0" = add i64 %"#right##0", -6
  %"tmp#294##0" = inttoptr i64 %"tmp#293##0" to ptr
  %"#right#f07##0" = load i64, ptr %"tmp#294##0"
  %"tmp#295##0" = icmp eq i64 %"#left#f07##0", %"#right#f07##0"
  ret i1 %"tmp#295##0"
if.else.15:
  ret i1 0
if.else.14:
  ret i1 0
case.7.switch.1:
  %"tmp#296##0" = add i64 %"#left##0", -7
  %"tmp#297##0" = inttoptr i64 %"tmp#296##0" to ptr
  %"tmp#85##0" = load i16, ptr %"tmp#297##0"
  %"tmp#86##0" = icmp eq i16 %"tmp#85##0", 7
  br i1 %"tmp#86##0", label %if.then.16, label %if.else.16
if.then.16:
  %"tmp#298##0" = add i64 %"#left##0", 1
  %"tmp#299##0" = inttoptr i64 %"tmp#298##0" to ptr
  %"#left#f08##0" = load i64, ptr %"tmp#299##0"
  %"tmp#214##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#214##0", label %if.then.17, label %if.else.17
if.then.17:
  %"tmp#215##0" = and i64 %"#right##0", 7
  %"tmp#216##0" = icmp eq i64 %"tmp#215##0", 7
  br i1 %"tmp#216##0", label %if.then.18, label %if.else.18
if.then.18:
  %"tmp#300##0" = add i64 %"#right##0", -7
  %"tmp#301##0" = inttoptr i64 %"tmp#300##0" to ptr
  %"tmp#217##0" = load i16, ptr %"tmp#301##0"
  %"tmp#218##0" = icmp eq i16 %"tmp#217##0", 7
  br i1 %"tmp#218##0", label %if.then.19, label %if.else.19
if.then.19:
  %"tmp#302##0" = add i64 %"#right##0", 1
  %"tmp#303##0" = inttoptr i64 %"tmp#302##0" to ptr
  %"#right#f08##0" = load i64, ptr %"tmp#303##0"
  %"tmp#304##0" = icmp eq i64 %"#left#f08##0", %"#right#f08##0"
  ret i1 %"tmp#304##0"
if.else.19:
  ret i1 0
if.else.18:
  ret i1 0
if.else.17:
  ret i1 0
if.else.16:
  %"tmp#92##0" = icmp eq i16 %"tmp#85##0", 8
  br i1 %"tmp#92##0", label %if.then.20, label %if.else.20
if.then.20:
  %"tmp#305##0" = add i64 %"#left##0", 1
  %"tmp#306##0" = inttoptr i64 %"tmp#305##0" to ptr
  %"#left#f09##0" = load i64, ptr %"tmp#306##0"
  %"tmp#206##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#206##0", label %if.then.21, label %if.else.21
if.then.21:
  %"tmp#207##0" = and i64 %"#right##0", 7
  %"tmp#208##0" = icmp eq i64 %"tmp#207##0", 7
  br i1 %"tmp#208##0", label %if.then.22, label %if.else.22
if.then.22:
  %"tmp#307##0" = add i64 %"#right##0", -7
  %"tmp#308##0" = inttoptr i64 %"tmp#307##0" to ptr
  %"tmp#209##0" = load i16, ptr %"tmp#308##0"
  %"tmp#210##0" = icmp eq i16 %"tmp#209##0", 8
  br i1 %"tmp#210##0", label %if.then.23, label %if.else.23
if.then.23:
  %"tmp#309##0" = add i64 %"#right##0", 1
  %"tmp#310##0" = inttoptr i64 %"tmp#309##0" to ptr
  %"#right#f09##0" = load i64, ptr %"tmp#310##0"
  %"tmp#311##0" = icmp eq i64 %"#left#f09##0", %"#right#f09##0"
  ret i1 %"tmp#311##0"
if.else.23:
  ret i1 0
if.else.22:
  ret i1 0
if.else.21:
  ret i1 0
if.else.20:
  br i1 %"tmp#84##0", label %if.then.24, label %if.else.24
if.then.24:
  %"tmp#98##0" = icmp eq i16 %"tmp#85##0", 9
  br i1 %"tmp#98##0", label %if.then.25, label %if.else.25
if.then.25:
  %"tmp#312##0" = add i64 %"#left##0", 1
  %"tmp#313##0" = inttoptr i64 %"tmp#312##0" to ptr
  %"#left#f10##0" = load i64, ptr %"tmp#313##0"
  %"tmp#198##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#198##0", label %if.then.26, label %if.else.26
if.then.26:
  %"tmp#199##0" = and i64 %"#right##0", 7
  %"tmp#200##0" = icmp eq i64 %"tmp#199##0", 7
  br i1 %"tmp#200##0", label %if.then.27, label %if.else.27
if.then.27:
  %"tmp#314##0" = add i64 %"#right##0", -7
  %"tmp#315##0" = inttoptr i64 %"tmp#314##0" to ptr
  %"tmp#201##0" = load i16, ptr %"tmp#315##0"
  %"tmp#202##0" = icmp eq i16 %"tmp#201##0", 9
  br i1 %"tmp#202##0", label %if.then.28, label %if.else.28
if.then.28:
  %"tmp#316##0" = add i64 %"#right##0", 1
  %"tmp#317##0" = inttoptr i64 %"tmp#316##0" to ptr
  %"#right#f10##0" = load i64, ptr %"tmp#317##0"
  %"tmp#318##0" = icmp eq i64 %"#left#f10##0", %"#right#f10##0"
  ret i1 %"tmp#318##0"
if.else.28:
  ret i1 0
if.else.27:
  ret i1 0
if.else.26:
  ret i1 0
if.else.25:
  %"tmp#104##0" = icmp eq i16 %"tmp#85##0", 10
  br i1 %"tmp#104##0", label %if.then.29, label %if.else.29
if.then.29:
  %"tmp#319##0" = add i64 %"#left##0", 1
  %"tmp#320##0" = inttoptr i64 %"tmp#319##0" to ptr
  %"#left#f11##0" = load i64, ptr %"tmp#320##0"
  %"tmp#190##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#190##0", label %if.then.30, label %if.else.30
if.then.30:
  %"tmp#191##0" = and i64 %"#right##0", 7
  %"tmp#192##0" = icmp eq i64 %"tmp#191##0", 7
  br i1 %"tmp#192##0", label %if.then.31, label %if.else.31
if.then.31:
  %"tmp#321##0" = add i64 %"#right##0", -7
  %"tmp#322##0" = inttoptr i64 %"tmp#321##0" to ptr
  %"tmp#193##0" = load i16, ptr %"tmp#322##0"
  %"tmp#194##0" = icmp eq i16 %"tmp#193##0", 10
  br i1 %"tmp#194##0", label %if.then.32, label %if.else.32
if.then.32:
  %"tmp#323##0" = add i64 %"#right##0", 1
  %"tmp#324##0" = inttoptr i64 %"tmp#323##0" to ptr
  %"#right#f11##0" = load i64, ptr %"tmp#324##0"
  %"tmp#325##0" = icmp eq i64 %"#left#f11##0", %"#right#f11##0"
  ret i1 %"tmp#325##0"
if.else.32:
  ret i1 0
if.else.31:
  ret i1 0
if.else.30:
  ret i1 0
if.else.29:
  %"tmp#110##0" = icmp eq i16 %"tmp#85##0", 11
  br i1 %"tmp#110##0", label %if.then.33, label %if.else.33
if.then.33:
  %"tmp#326##0" = add i64 %"#left##0", 1
  %"tmp#327##0" = inttoptr i64 %"tmp#326##0" to ptr
  %"#left#f12##0" = load i64, ptr %"tmp#327##0"
  %"tmp#182##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#182##0", label %if.then.34, label %if.else.34
if.then.34:
  %"tmp#183##0" = and i64 %"#right##0", 7
  %"tmp#184##0" = icmp eq i64 %"tmp#183##0", 7
  br i1 %"tmp#184##0", label %if.then.35, label %if.else.35
if.then.35:
  %"tmp#328##0" = add i64 %"#right##0", -7
  %"tmp#329##0" = inttoptr i64 %"tmp#328##0" to ptr
  %"tmp#185##0" = load i16, ptr %"tmp#329##0"
  %"tmp#186##0" = icmp eq i16 %"tmp#185##0", 11
  br i1 %"tmp#186##0", label %if.then.36, label %if.else.36
if.then.36:
  %"tmp#330##0" = add i64 %"#right##0", 1
  %"tmp#331##0" = inttoptr i64 %"tmp#330##0" to ptr
  %"#right#f12##0" = load i64, ptr %"tmp#331##0"
  %"tmp#332##0" = icmp eq i64 %"#left#f12##0", %"#right#f12##0"
  ret i1 %"tmp#332##0"
if.else.36:
  ret i1 0
if.else.35:
  ret i1 0
if.else.34:
  ret i1 0
if.else.33:
  %"tmp#116##0" = icmp eq i16 %"tmp#85##0", 12
  br i1 %"tmp#116##0", label %if.then.37, label %if.else.37
if.then.37:
  %"tmp#333##0" = add i64 %"#left##0", 1
  %"tmp#334##0" = inttoptr i64 %"tmp#333##0" to ptr
  %"#left#f13##0" = load i64, ptr %"tmp#334##0"
  %"tmp#174##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#174##0", label %if.then.38, label %if.else.38
if.then.38:
  %"tmp#175##0" = and i64 %"#right##0", 7
  %"tmp#176##0" = icmp eq i64 %"tmp#175##0", 7
  br i1 %"tmp#176##0", label %if.then.39, label %if.else.39
if.then.39:
  %"tmp#335##0" = add i64 %"#right##0", -7
  %"tmp#336##0" = inttoptr i64 %"tmp#335##0" to ptr
  %"tmp#177##0" = load i16, ptr %"tmp#336##0"
  %"tmp#178##0" = icmp eq i16 %"tmp#177##0", 12
  br i1 %"tmp#178##0", label %if.then.40, label %if.else.40
if.then.40:
  %"tmp#337##0" = add i64 %"#right##0", 1
  %"tmp#338##0" = inttoptr i64 %"tmp#337##0" to ptr
  %"#right#f13##0" = load i64, ptr %"tmp#338##0"
  %"tmp#339##0" = icmp eq i64 %"#left#f13##0", %"#right#f13##0"
  ret i1 %"tmp#339##0"
if.else.40:
  ret i1 0
if.else.39:
  ret i1 0
if.else.38:
  ret i1 0
if.else.37:
  %"tmp#122##0" = icmp eq i16 %"tmp#85##0", 13
  br i1 %"tmp#122##0", label %if.then.41, label %if.else.41
if.then.41:
  %"tmp#340##0" = add i64 %"#left##0", 1
  %"tmp#341##0" = inttoptr i64 %"tmp#340##0" to ptr
  %"#left#f14##0" = load i64, ptr %"tmp#341##0"
  %"tmp#166##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#166##0", label %if.then.42, label %if.else.42
if.then.42:
  %"tmp#167##0" = and i64 %"#right##0", 7
  %"tmp#168##0" = icmp eq i64 %"tmp#167##0", 7
  br i1 %"tmp#168##0", label %if.then.43, label %if.else.43
if.then.43:
  %"tmp#342##0" = add i64 %"#right##0", -7
  %"tmp#343##0" = inttoptr i64 %"tmp#342##0" to ptr
  %"tmp#169##0" = load i16, ptr %"tmp#343##0"
  %"tmp#170##0" = icmp eq i16 %"tmp#169##0", 13
  br i1 %"tmp#170##0", label %if.then.44, label %if.else.44
if.then.44:
  %"tmp#344##0" = add i64 %"#right##0", 1
  %"tmp#345##0" = inttoptr i64 %"tmp#344##0" to ptr
  %"#right#f14##0" = load i64, ptr %"tmp#345##0"
  %"tmp#346##0" = icmp eq i64 %"#left#f14##0", %"#right#f14##0"
  ret i1 %"tmp#346##0"
if.else.44:
  ret i1 0
if.else.43:
  ret i1 0
if.else.42:
  ret i1 0
if.else.41:
  %"tmp#128##0" = icmp eq i16 %"tmp#85##0", 14
  br i1 %"tmp#128##0", label %if.then.45, label %if.else.45
if.then.45:
  %"tmp#347##0" = add i64 %"#left##0", 1
  %"tmp#348##0" = inttoptr i64 %"tmp#347##0" to ptr
  %"#left#f15##0" = load i64, ptr %"tmp#348##0"
  %"tmp#158##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#158##0", label %if.then.46, label %if.else.46
if.then.46:
  %"tmp#159##0" = and i64 %"#right##0", 7
  %"tmp#160##0" = icmp eq i64 %"tmp#159##0", 7
  br i1 %"tmp#160##0", label %if.then.47, label %if.else.47
if.then.47:
  %"tmp#349##0" = add i64 %"#right##0", -7
  %"tmp#350##0" = inttoptr i64 %"tmp#349##0" to ptr
  %"tmp#161##0" = load i16, ptr %"tmp#350##0"
  %"tmp#162##0" = icmp eq i16 %"tmp#161##0", 14
  br i1 %"tmp#162##0", label %if.then.48, label %if.else.48
if.then.48:
  %"tmp#351##0" = add i64 %"#right##0", 1
  %"tmp#352##0" = inttoptr i64 %"tmp#351##0" to ptr
  %"#right#f15##0" = load i64, ptr %"tmp#352##0"
  %"tmp#353##0" = icmp eq i64 %"#left#f15##0", %"#right#f15##0"
  ret i1 %"tmp#353##0"
if.else.48:
  ret i1 0
if.else.47:
  ret i1 0
if.else.46:
  ret i1 0
if.else.45:
  %"tmp#134##0" = icmp eq i16 %"tmp#85##0", 15
  br i1 %"tmp#134##0", label %if.then.49, label %if.else.49
if.then.49:
  %"tmp#354##0" = add i64 %"#left##0", 1
  %"tmp#355##0" = inttoptr i64 %"tmp#354##0" to ptr
  %"#left#f16##0" = load i64, ptr %"tmp#355##0"
  %"tmp#150##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#150##0", label %if.then.50, label %if.else.50
if.then.50:
  %"tmp#151##0" = and i64 %"#right##0", 7
  %"tmp#152##0" = icmp eq i64 %"tmp#151##0", 7
  br i1 %"tmp#152##0", label %if.then.51, label %if.else.51
if.then.51:
  %"tmp#356##0" = add i64 %"#right##0", -7
  %"tmp#357##0" = inttoptr i64 %"tmp#356##0" to ptr
  %"tmp#153##0" = load i16, ptr %"tmp#357##0"
  %"tmp#154##0" = icmp eq i16 %"tmp#153##0", 15
  br i1 %"tmp#154##0", label %if.then.52, label %if.else.52
if.then.52:
  %"tmp#358##0" = add i64 %"#right##0", 1
  %"tmp#359##0" = inttoptr i64 %"tmp#358##0" to ptr
  %"#right#f16##0" = load i64, ptr %"tmp#359##0"
  %"tmp#360##0" = icmp eq i64 %"#left#f16##0", %"#right#f16##0"
  ret i1 %"tmp#360##0"
if.else.52:
  ret i1 0
if.else.51:
  ret i1 0
if.else.50:
  ret i1 0
if.else.49:
  %"tmp#140##0" = icmp eq i16 %"tmp#85##0", 16
  br i1 %"tmp#140##0", label %if.then.53, label %if.else.53
if.then.53:
  %"tmp#361##0" = add i64 %"#left##0", 1
  %"tmp#362##0" = inttoptr i64 %"tmp#361##0" to ptr
  %"#left#f17##0" = load i64, ptr %"tmp#362##0"
  %"tmp#142##0" = icmp uge i64 %"#right##0", 4
  br i1 %"tmp#142##0", label %if.then.54, label %if.else.54
if.then.54:
  %"tmp#143##0" = and i64 %"#right##0", 7
  %"tmp#144##0" = icmp eq i64 %"tmp#143##0", 7
  br i1 %"tmp#144##0", label %if.then.55, label %if.else.55
if.then.55:
  %"tmp#363##0" = add i64 %"#right##0", -7
  %"tmp#364##0" = inttoptr i64 %"tmp#363##0" to ptr
  %"tmp#145##0" = load i16, ptr %"tmp#364##0"
  %"tmp#146##0" = icmp eq i16 %"tmp#145##0", 16
  br i1 %"tmp#146##0", label %if.then.56, label %if.else.56
if.then.56:
  %"tmp#365##0" = add i64 %"#right##0", 1
  %"tmp#366##0" = inttoptr i64 %"tmp#365##0" to ptr
  %"#right#f17##0" = load i64, ptr %"tmp#366##0"
  %"tmp#367##0" = icmp eq i64 %"#left#f17##0", %"#right#f17##0"
  ret i1 %"tmp#367##0"
if.else.56:
  ret i1 0
if.else.55:
  ret i1 0
if.else.54:
  ret i1 0
if.else.53:
  ret i1 0
if.else.24:
  ret i1 0
if.else.0:
  %"tmp#368##0" = icmp eq i64 %"#left##0", %"#right##0"
  ret i1 %"tmp#368##0"
}

define external fastcc i64 @"multictr.complicated.autumn<0>"() {
  ret i64 3
}

define external fastcc i64 @"multictr.complicated.c01<0>"(i64 %"f01##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"f01##0", ptr %"tmp#1##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c01<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 0
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.1:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 0, 1
  ret {i64, i1} %"tmp#10##0"
}

define external fastcc i64 @"multictr.complicated.c02<0>"(i64 %"f02##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"f02##0", ptr %"tmp#1##0"
  %"tmp#2##0" = or i64 %"#rec##0", 1
  ret i64 %"tmp#2##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c02<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#result##0", -1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc i64 @"multictr.complicated.c03<0>"(i64 %"f03##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"f03##0", ptr %"tmp#1##0"
  %"tmp#2##0" = or i64 %"#rec##0", 2
  ret i64 %"tmp#2##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c03<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 2
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#result##0", -2
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc i64 @"multictr.complicated.c04<0>"(i64 %"f04##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"f04##0", ptr %"tmp#1##0"
  %"tmp#2##0" = or i64 %"#rec##0", 3
  ret i64 %"tmp#2##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c04<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 3
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#result##0", -3
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc i64 @"multictr.complicated.c05<0>"(i64 %"f05##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"f05##0", ptr %"tmp#1##0"
  %"tmp#2##0" = or i64 %"#rec##0", 4
  ret i64 %"tmp#2##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c05<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 4
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#result##0", -4
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc i64 @"multictr.complicated.c06<0>"(i64 %"f06##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"f06##0", ptr %"tmp#1##0"
  %"tmp#2##0" = or i64 %"#rec##0", 5
  ret i64 %"tmp#2##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c06<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 5
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#result##0", -5
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc i64 @"multictr.complicated.c07<0>"(i64 %"f07##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"f07##0", ptr %"tmp#1##0"
  %"tmp#2##0" = or i64 %"#rec##0", 6
  ret i64 %"tmp#2##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c07<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 6
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#result##0", -6
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc i64 @"multictr.complicated.c08<0>"(i64 %"f08##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 7, ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"f08##0", ptr %"tmp#3##0"
  %"tmp#4##0" = or i64 %"#rec##0", 7
  ret i64 %"tmp#4##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c08<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#result##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 7
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#result##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc i64 @"multictr.complicated.c09<0>"(i64 %"f09##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 8, ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"f09##0", ptr %"tmp#3##0"
  %"tmp#4##0" = or i64 %"#rec##0", 7
  ret i64 %"tmp#4##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c09<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#result##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 8
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#result##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc i64 @"multictr.complicated.c10<0>"(i64 %"f10##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 9, ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"f10##0", ptr %"tmp#3##0"
  %"tmp#4##0" = or i64 %"#rec##0", 7
  ret i64 %"tmp#4##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c10<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#result##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 9
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#result##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc i64 @"multictr.complicated.c11<0>"(i64 %"f11##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 10, ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"f11##0", ptr %"tmp#3##0"
  %"tmp#4##0" = or i64 %"#rec##0", 7
  ret i64 %"tmp#4##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c11<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#result##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 10
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#result##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc i64 @"multictr.complicated.c12<0>"(i64 %"f12##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 11, ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"f12##0", ptr %"tmp#3##0"
  %"tmp#4##0" = or i64 %"#rec##0", 7
  ret i64 %"tmp#4##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c12<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#result##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 11
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#result##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc i64 @"multictr.complicated.c13<0>"(i64 %"f13##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 12, ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"f13##0", ptr %"tmp#3##0"
  %"tmp#4##0" = or i64 %"#rec##0", 7
  ret i64 %"tmp#4##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c13<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#result##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 12
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#result##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc i64 @"multictr.complicated.c14<0>"(i64 %"f14##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 13, ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"f14##0", ptr %"tmp#3##0"
  %"tmp#4##0" = or i64 %"#rec##0", 7
  ret i64 %"tmp#4##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c14<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#result##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 13
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#result##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc i64 @"multictr.complicated.c15<0>"(i64 %"f15##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 14, ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"f15##0", ptr %"tmp#3##0"
  %"tmp#4##0" = or i64 %"#rec##0", 7
  ret i64 %"tmp#4##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c15<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#result##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 14
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#result##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc i64 @"multictr.complicated.c16<0>"(i64 %"f16##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 15, ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"f16##0", ptr %"tmp#3##0"
  %"tmp#4##0" = or i64 %"#rec##0", 7
  ret i64 %"tmp#4##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c16<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#result##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 15
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#result##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc i64 @"multictr.complicated.c17<0>"(i64 %"f17##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 16, ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"f17##0", ptr %"tmp#3##0"
  %"tmp#4##0" = or i64 %"#rec##0", 7
  ret i64 %"tmp#4##0"
}

define external fastcc {i64, i1} @"multictr.complicated.c17<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp uge i64 %"#result##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#result##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 16
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#result##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f01<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 0
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.1:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 0, 1
  ret {i64, i1} %"tmp#10##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f01<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 0
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#4##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#4##0", ptr %"tmp#3##0", i64 8, i1 0)
  %"tmp#5##0" = ptrtoint ptr %"tmp#4##0" to i64
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  store i64 %"#field##0", ptr %"tmp#6##0"
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 1, 1
  ret {i64, i1} %"tmp#8##0"
if.else.1:
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 0, 1
  ret {i64, i1} %"tmp#10##0"
if.else.0:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f02<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#rec##0", -1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f02<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = sub i64 %"#rec##0", 1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#5##0", ptr %"tmp#4##0", i64 8, i1 0)
  %"tmp#6##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#7##0" = add i64 %"tmp#6##0", 1
  %"tmp#8##0" = add i64 %"tmp#7##0", -1
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 %"tmp#7##0", 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 1, 1
  ret {i64, i1} %"tmp#11##0"
if.else.1:
  %"tmp#12##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#13##0" = insertvalue {i64, i1} %"tmp#12##0", i1 0, 1
  ret {i64, i1} %"tmp#13##0"
if.else.0:
  %"tmp#14##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#15##0" = insertvalue {i64, i1} %"tmp#14##0", i1 0, 1
  ret {i64, i1} %"tmp#15##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f03<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 2
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#rec##0", -2
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f03<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 2
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = sub i64 %"#rec##0", 2
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#5##0", ptr %"tmp#4##0", i64 8, i1 0)
  %"tmp#6##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#7##0" = add i64 %"tmp#6##0", 2
  %"tmp#8##0" = add i64 %"tmp#7##0", -2
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 %"tmp#7##0", 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 1, 1
  ret {i64, i1} %"tmp#11##0"
if.else.1:
  %"tmp#12##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#13##0" = insertvalue {i64, i1} %"tmp#12##0", i1 0, 1
  ret {i64, i1} %"tmp#13##0"
if.else.0:
  %"tmp#14##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#15##0" = insertvalue {i64, i1} %"tmp#14##0", i1 0, 1
  ret {i64, i1} %"tmp#15##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f04<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 3
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#rec##0", -3
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f04<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 3
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = sub i64 %"#rec##0", 3
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#5##0", ptr %"tmp#4##0", i64 8, i1 0)
  %"tmp#6##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#7##0" = add i64 %"tmp#6##0", 3
  %"tmp#8##0" = add i64 %"tmp#7##0", -3
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 %"tmp#7##0", 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 1, 1
  ret {i64, i1} %"tmp#11##0"
if.else.1:
  %"tmp#12##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#13##0" = insertvalue {i64, i1} %"tmp#12##0", i1 0, 1
  ret {i64, i1} %"tmp#13##0"
if.else.0:
  %"tmp#14##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#15##0" = insertvalue {i64, i1} %"tmp#14##0", i1 0, 1
  ret {i64, i1} %"tmp#15##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f05<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 4
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#rec##0", -4
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f05<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 4
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = sub i64 %"#rec##0", 4
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#5##0", ptr %"tmp#4##0", i64 8, i1 0)
  %"tmp#6##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#7##0" = add i64 %"tmp#6##0", 4
  %"tmp#8##0" = add i64 %"tmp#7##0", -4
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 %"tmp#7##0", 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 1, 1
  ret {i64, i1} %"tmp#11##0"
if.else.1:
  %"tmp#12##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#13##0" = insertvalue {i64, i1} %"tmp#12##0", i1 0, 1
  ret {i64, i1} %"tmp#13##0"
if.else.0:
  %"tmp#14##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#15##0" = insertvalue {i64, i1} %"tmp#14##0", i1 0, 1
  ret {i64, i1} %"tmp#15##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f06<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 5
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#rec##0", -5
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f06<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 5
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = sub i64 %"#rec##0", 5
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#5##0", ptr %"tmp#4##0", i64 8, i1 0)
  %"tmp#6##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#7##0" = add i64 %"tmp#6##0", 5
  %"tmp#8##0" = add i64 %"tmp#7##0", -5
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 %"tmp#7##0", 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 1, 1
  ret {i64, i1} %"tmp#11##0"
if.else.1:
  %"tmp#12##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#13##0" = insertvalue {i64, i1} %"tmp#12##0", i1 0, 1
  ret {i64, i1} %"tmp#13##0"
if.else.0:
  %"tmp#14##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#15##0" = insertvalue {i64, i1} %"tmp#14##0", i1 0, 1
  ret {i64, i1} %"tmp#15##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f07<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 6
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#rec##0", -6
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f07<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 6
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = sub i64 %"#rec##0", 6
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#5##0", ptr %"tmp#4##0", i64 8, i1 0)
  %"tmp#6##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#7##0" = add i64 %"tmp#6##0", 6
  %"tmp#8##0" = add i64 %"tmp#7##0", -6
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 %"tmp#7##0", 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 1, 1
  ret {i64, i1} %"tmp#11##0"
if.else.1:
  %"tmp#12##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#13##0" = insertvalue {i64, i1} %"tmp#12##0", i1 0, 1
  ret {i64, i1} %"tmp#13##0"
if.else.0:
  %"tmp#14##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#15##0" = insertvalue {i64, i1} %"tmp#14##0", i1 0, 1
  ret {i64, i1} %"tmp#15##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f08<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 7
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#rec##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f08<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 7
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = sub i64 %"#rec##0", 7
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#8##0", ptr %"tmp#7##0", i64 16, i1 0)
  %"tmp#9##0" = ptrtoint ptr %"tmp#8##0" to i64
  %"tmp#10##0" = add i64 %"tmp#9##0", 7
  %"tmp#11##0" = add i64 %"tmp#10##0", 1
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"#field##0", ptr %"tmp#12##0"
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 %"tmp#10##0", 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 1, 1
  ret {i64, i1} %"tmp#14##0"
if.else.2:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
if.else.1:
  %"tmp#17##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#18##0" = insertvalue {i64, i1} %"tmp#17##0", i1 0, 1
  ret {i64, i1} %"tmp#18##0"
if.else.0:
  %"tmp#19##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#20##0" = insertvalue {i64, i1} %"tmp#19##0", i1 0, 1
  ret {i64, i1} %"tmp#20##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f09<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 8
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#rec##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f09<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 8
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = sub i64 %"#rec##0", 7
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#8##0", ptr %"tmp#7##0", i64 16, i1 0)
  %"tmp#9##0" = ptrtoint ptr %"tmp#8##0" to i64
  %"tmp#10##0" = add i64 %"tmp#9##0", 7
  %"tmp#11##0" = add i64 %"tmp#10##0", 1
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"#field##0", ptr %"tmp#12##0"
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 %"tmp#10##0", 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 1, 1
  ret {i64, i1} %"tmp#14##0"
if.else.2:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
if.else.1:
  %"tmp#17##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#18##0" = insertvalue {i64, i1} %"tmp#17##0", i1 0, 1
  ret {i64, i1} %"tmp#18##0"
if.else.0:
  %"tmp#19##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#20##0" = insertvalue {i64, i1} %"tmp#19##0", i1 0, 1
  ret {i64, i1} %"tmp#20##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f10<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 9
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#rec##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f10<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 9
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = sub i64 %"#rec##0", 7
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#8##0", ptr %"tmp#7##0", i64 16, i1 0)
  %"tmp#9##0" = ptrtoint ptr %"tmp#8##0" to i64
  %"tmp#10##0" = add i64 %"tmp#9##0", 7
  %"tmp#11##0" = add i64 %"tmp#10##0", 1
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"#field##0", ptr %"tmp#12##0"
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 %"tmp#10##0", 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 1, 1
  ret {i64, i1} %"tmp#14##0"
if.else.2:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
if.else.1:
  %"tmp#17##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#18##0" = insertvalue {i64, i1} %"tmp#17##0", i1 0, 1
  ret {i64, i1} %"tmp#18##0"
if.else.0:
  %"tmp#19##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#20##0" = insertvalue {i64, i1} %"tmp#19##0", i1 0, 1
  ret {i64, i1} %"tmp#20##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f11<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 10
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#rec##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f11<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 10
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = sub i64 %"#rec##0", 7
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#8##0", ptr %"tmp#7##0", i64 16, i1 0)
  %"tmp#9##0" = ptrtoint ptr %"tmp#8##0" to i64
  %"tmp#10##0" = add i64 %"tmp#9##0", 7
  %"tmp#11##0" = add i64 %"tmp#10##0", 1
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"#field##0", ptr %"tmp#12##0"
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 %"tmp#10##0", 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 1, 1
  ret {i64, i1} %"tmp#14##0"
if.else.2:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
if.else.1:
  %"tmp#17##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#18##0" = insertvalue {i64, i1} %"tmp#17##0", i1 0, 1
  ret {i64, i1} %"tmp#18##0"
if.else.0:
  %"tmp#19##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#20##0" = insertvalue {i64, i1} %"tmp#19##0", i1 0, 1
  ret {i64, i1} %"tmp#20##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f12<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 11
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#rec##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f12<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 11
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = sub i64 %"#rec##0", 7
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#8##0", ptr %"tmp#7##0", i64 16, i1 0)
  %"tmp#9##0" = ptrtoint ptr %"tmp#8##0" to i64
  %"tmp#10##0" = add i64 %"tmp#9##0", 7
  %"tmp#11##0" = add i64 %"tmp#10##0", 1
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"#field##0", ptr %"tmp#12##0"
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 %"tmp#10##0", 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 1, 1
  ret {i64, i1} %"tmp#14##0"
if.else.2:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
if.else.1:
  %"tmp#17##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#18##0" = insertvalue {i64, i1} %"tmp#17##0", i1 0, 1
  ret {i64, i1} %"tmp#18##0"
if.else.0:
  %"tmp#19##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#20##0" = insertvalue {i64, i1} %"tmp#19##0", i1 0, 1
  ret {i64, i1} %"tmp#20##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f13<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 12
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#rec##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f13<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 12
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = sub i64 %"#rec##0", 7
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#8##0", ptr %"tmp#7##0", i64 16, i1 0)
  %"tmp#9##0" = ptrtoint ptr %"tmp#8##0" to i64
  %"tmp#10##0" = add i64 %"tmp#9##0", 7
  %"tmp#11##0" = add i64 %"tmp#10##0", 1
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"#field##0", ptr %"tmp#12##0"
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 %"tmp#10##0", 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 1, 1
  ret {i64, i1} %"tmp#14##0"
if.else.2:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
if.else.1:
  %"tmp#17##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#18##0" = insertvalue {i64, i1} %"tmp#17##0", i1 0, 1
  ret {i64, i1} %"tmp#18##0"
if.else.0:
  %"tmp#19##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#20##0" = insertvalue {i64, i1} %"tmp#19##0", i1 0, 1
  ret {i64, i1} %"tmp#20##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f14<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 13
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#rec##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f14<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 13
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = sub i64 %"#rec##0", 7
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#8##0", ptr %"tmp#7##0", i64 16, i1 0)
  %"tmp#9##0" = ptrtoint ptr %"tmp#8##0" to i64
  %"tmp#10##0" = add i64 %"tmp#9##0", 7
  %"tmp#11##0" = add i64 %"tmp#10##0", 1
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"#field##0", ptr %"tmp#12##0"
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 %"tmp#10##0", 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 1, 1
  ret {i64, i1} %"tmp#14##0"
if.else.2:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
if.else.1:
  %"tmp#17##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#18##0" = insertvalue {i64, i1} %"tmp#17##0", i1 0, 1
  ret {i64, i1} %"tmp#18##0"
if.else.0:
  %"tmp#19##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#20##0" = insertvalue {i64, i1} %"tmp#19##0", i1 0, 1
  ret {i64, i1} %"tmp#20##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f15<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 14
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#rec##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f15<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 14
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = sub i64 %"#rec##0", 7
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#8##0", ptr %"tmp#7##0", i64 16, i1 0)
  %"tmp#9##0" = ptrtoint ptr %"tmp#8##0" to i64
  %"tmp#10##0" = add i64 %"tmp#9##0", 7
  %"tmp#11##0" = add i64 %"tmp#10##0", 1
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"#field##0", ptr %"tmp#12##0"
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 %"tmp#10##0", 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 1, 1
  ret {i64, i1} %"tmp#14##0"
if.else.2:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
if.else.1:
  %"tmp#17##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#18##0" = insertvalue {i64, i1} %"tmp#17##0", i1 0, 1
  ret {i64, i1} %"tmp#18##0"
if.else.0:
  %"tmp#19##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#20##0" = insertvalue {i64, i1} %"tmp#19##0", i1 0, 1
  ret {i64, i1} %"tmp#20##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f16<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 15
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#rec##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f16<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 15
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = sub i64 %"#rec##0", 7
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#8##0", ptr %"tmp#7##0", i64 16, i1 0)
  %"tmp#9##0" = ptrtoint ptr %"tmp#8##0" to i64
  %"tmp#10##0" = add i64 %"tmp#9##0", 7
  %"tmp#11##0" = add i64 %"tmp#10##0", 1
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"#field##0", ptr %"tmp#12##0"
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 %"tmp#10##0", 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 1, 1
  ret {i64, i1} %"tmp#14##0"
if.else.2:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
if.else.1:
  %"tmp#17##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#18##0" = insertvalue {i64, i1} %"tmp#17##0", i1 0, 1
  ret {i64, i1} %"tmp#18##0"
if.else.0:
  %"tmp#19##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#20##0" = insertvalue {i64, i1} %"tmp#19##0", i1 0, 1
  ret {i64, i1} %"tmp#20##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f17<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 16
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = add i64 %"#rec##0", 1
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#8##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.2:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
if.else.1:
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 0, 1
  ret {i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
}

define external fastcc {i64, i1} @"multictr.complicated.f17<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp uge i64 %"#rec##0", 4
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 7
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 7
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#4##0" = add i64 %"#rec##0", -7
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"#tag##0" = load i16, ptr %"tmp#5##0"
  %"tmp#3##0" = icmp eq i16 %"#tag##0", 16
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#6##0" = sub i64 %"#rec##0", 7
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#8##0", ptr %"tmp#7##0", i64 16, i1 0)
  %"tmp#9##0" = ptrtoint ptr %"tmp#8##0" to i64
  %"tmp#10##0" = add i64 %"tmp#9##0", 7
  %"tmp#11##0" = add i64 %"tmp#10##0", 1
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"#field##0", ptr %"tmp#12##0"
  %"tmp#13##0" = insertvalue {i64, i1} undef, i64 %"tmp#10##0", 0
  %"tmp#14##0" = insertvalue {i64, i1} %"tmp#13##0", i1 1, 1
  ret {i64, i1} %"tmp#14##0"
if.else.2:
  %"tmp#15##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#16##0" = insertvalue {i64, i1} %"tmp#15##0", i1 0, 1
  ret {i64, i1} %"tmp#16##0"
if.else.1:
  %"tmp#17##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#18##0" = insertvalue {i64, i1} %"tmp#17##0", i1 0, 1
  ret {i64, i1} %"tmp#18##0"
if.else.0:
  %"tmp#19##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#20##0" = insertvalue {i64, i1} %"tmp#19##0", i1 0, 1
  ret {i64, i1} %"tmp#20##0"
}

define external fastcc i64 @"multictr.complicated.spring<0>"() {
  ret i64 1
}

define external fastcc i64 @"multictr.complicated.summer<0>"() {
  ret i64 2
}

define external fastcc i64 @"multictr.complicated.winter<0>"() {
  ret i64 0
}

define external fastcc i1 @"multictr.complicated.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"multictr.complicated.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

--------------------------------------------------
 Module multictr.length
  representation  : 64 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.length.=<0>
                    multictr.length.metres<0>
                    multictr.length.metres<1>
                    multictr.length.value<0>
                    multictr.length.value<1>
                    multictr.length.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: multictr.length.=<0>
=(#left##0:multictr.length, #right##0:multictr.length, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.length, ~#right##0:multictr.length, ?#success##0:wybe.bool)


proc metres > public {inline} (0 calls)
0: multictr.length.metres<0>
metres(value##0:wybe.float, ?#result##2:multictr.length)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~value##0:wybe.float, ?#result##2:multictr.length) @multictr:nn:nn
proc metres > public {inline} (0 calls)
1: multictr.length.metres<1>
metres(?value##0:wybe.float, #result##0:multictr.length)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#result##0:multictr.length, ?value##0:wybe.float) @multictr:nn:nn


proc value > public {inline} (0 calls)
0: multictr.length.value<0>
value(#rec##0:multictr.length, ?#result##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#rec##0:multictr.length, ?#result##0:wybe.float) @multictr:nn:nn
proc value > public {inline} (0 calls)
1: multictr.length.value<1>
value([#rec##0:multictr.length], ?#rec##2:multictr.length, #field##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#field##0:wybe.float, ?#rec##2:multictr.length) @multictr:nn:nn


proc ~= > public {inline} (0 calls)
0: multictr.length.~=<0>
~=(#left##0:multictr.length, #right##0:multictr.length, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.length, ~#right##0:multictr.length, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'multictr.length'

source_filename = "!ROOT!/final-dump/multictr.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"multictr.length.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#1##0" = icmp eq i64 %"#left##0", %"#right##0"
  ret i1 %"tmp#1##0"
}

define external fastcc i64 @"multictr.length.metres<0>"(double %"value##0") {
  %"tmp#0##0" = bitcast double %"value##0" to i64
  ret i64 %"tmp#0##0"
}

define external fastcc double @"multictr.length.metres<1>"(i64 %"#result##0") {
  %"tmp#0##0" = bitcast i64 %"#result##0" to double
  ret double %"tmp#0##0"
}

define external fastcc double @"multictr.length.value<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = bitcast i64 %"#rec##0" to double
  ret double %"tmp#0##0"
}

define external fastcc i64 @"multictr.length.value<1>"(double %"#field##0") {
  %"tmp#0##0" = bitcast double %"#field##0" to i64
  ret i64 %"tmp#0##0"
}

define external fastcc i1 @"multictr.length.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp eq i64 %"#left##0", %"#right##0"
  %"tmp#3##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#3##0"
}

--------------------------------------------------
 Module multictr.maybe_int
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : multictr.maybe_int.=<0>
                    multictr.maybe_int.just<0>
                    multictr.maybe_int.just<1>
                    multictr.maybe_int.nothing<0>
                    multictr.maybe_int.value<0>
                    multictr.maybe_int.value<1>
                    multictr.maybe_int.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public (1 calls)
0: multictr.maybe_int.=<0>
=(#left##0:multictr.maybe_int, #right##0:multictr.maybe_int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:multictr.maybe_int, 0:multictr.maybe_int, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(~#left##0:multictr.maybe_int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#value##0:wybe.int) @multictr:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
        case ~tmp#8##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:multictr.maybe_int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#value##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_eq(~#left#value##0:wybe.int, ~#right#value##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc just > public {inline} (0 calls)
0: multictr.maybe_int.just<0>
just(value##0:wybe.int, ?#result##0:multictr.maybe_int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.maybe_int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.maybe_int, ?#result##0:multictr.maybe_int, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~value##0:wybe.int) @multictr:nn:nn
proc just > public {inline} (8 calls)
1: multictr.maybe_int.just<1>
just(?value##0:wybe.int, #result##0:multictr.maybe_int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?value##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:multictr.maybe_int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?value##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc nothing > public {inline} (0 calls)
0: multictr.maybe_int.nothing<0>
nothing(?#result##0:multictr.maybe_int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.maybe_int, ?#result##0:multictr.maybe_int)


proc value > public {inline} (0 calls)
0: multictr.maybe_int.value<0>
value(#rec##0:multictr.maybe_int, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr.maybe_int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc value > public {inline} (0 calls)
1: multictr.maybe_int.value<1>
value(#rec##0:multictr.maybe_int, ?#rec##1:multictr.maybe_int, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:multictr.maybe_int, ?#rec##1:multictr.maybe_int)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr.maybe_int, ?#rec##1:multictr.maybe_int, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: multictr.maybe_int.~=<0>
~=(#left##0:multictr.maybe_int, #right##0:multictr.maybe_int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multictr.maybe_int.=<0>(~#left##0:multictr.maybe_int, ~#right##0:multictr.maybe_int, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'multictr.maybe_int'

source_filename = "!ROOT!/final-dump/multictr.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"multictr.maybe_int.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp ne i64 %"#left##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#11##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#value##0" = load i64, ptr %"tmp#11##0"
  %"tmp#8##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#8##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#12##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#value##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = icmp eq i64 %"#left#value##0", %"#right#value##0"
  ret i1 %"tmp#13##0"
if.else.1:
  ret i1 0
if.else.0:
  %"tmp#14##0" = icmp eq i64 %"#right##0", 0
  ret i1 %"tmp#14##0"
}

define external fastcc i64 @"multictr.maybe_int.just<0>"(i64 %"value##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"value##0", ptr %"tmp#1##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i1} @"multictr.maybe_int.just<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = insertvalue {i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#4##0" = insertvalue {i64, i1} %"tmp#3##0", i1 1, 1
  ret {i64, i1} %"tmp#4##0"
if.else.0:
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 0, 1
  ret {i64, i1} %"tmp#6##0"
}

define external fastcc i64 @"multictr.maybe_int.nothing<0>"() {
  ret i64 0
}

define external fastcc {i64, i1} @"multictr.maybe_int.value<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = insertvalue {i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#4##0" = insertvalue {i64, i1} %"tmp#3##0", i1 1, 1
  ret {i64, i1} %"tmp#4##0"
if.else.0:
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 0, 1
  ret {i64, i1} %"tmp#6##0"
}

define external fastcc {i64, i1} @"multictr.maybe_int.value<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 8, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc i1 @"multictr.maybe_int.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"multictr.maybe_int.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

--------------------------------------------------
 Module multictr.number
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : multictr.number.=<0>
                    multictr.number.float<0>
                    multictr.number.float<1>
                    multictr.number.float_value<0>
                    multictr.number.float_value<1>
                    multictr.number.int<0>
                    multictr.number.int<1>
                    multictr.number.int_value<0>
                    multictr.number.int_value<1>
                    multictr.number.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public (1 calls)
0: multictr.number.=<0>
=(#left##0:multictr.number, #right##0:multictr.number, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 1:wybe.int, ?tmp#8##0:wybe.int)
    foreign llvm icmp_eq(tmp#8##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~tmp#8##0:wybe.int, 1:wybe.int, ?tmp#12##0:wybe.bool)
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#left##0:multictr.number, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#float_value##0:wybe.float) @multictr:nn:nn
            foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#14##0:wybe.int)
            foreign llvm icmp_eq(~tmp#14##0:wybe.int, 1:wybe.int, ?tmp#15##0:wybe.bool)
            case ~tmp#15##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#right##0:multictr.number, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#float_value##0:wybe.float) @multictr:nn:nn
                foreign llvm fcmp_oeq(~#left#float_value##0:wybe.float, ~#right#float_value##0:wybe.float, ?#success##0:wybe.bool) @float:nn:nn



    1:
        foreign lpvm access(~#left##0:multictr.number, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#int_value##0:wybe.int) @multictr:nn:nn
        foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#19##0:wybe.int)
        foreign llvm icmp_eq(~tmp#19##0:wybe.int, 0:wybe.int, ?tmp#20##0:wybe.bool)
        case ~tmp#20##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:multictr.number, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#int_value##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_eq(~#left#int_value##0:wybe.int, ~#right#int_value##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc float > public {inline} (0 calls)
0: multictr.number.float<0>
float(float_value##0:wybe.float, ?#result##0:multictr.number)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.number) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.number, ?#rec##1:multictr.number, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~float_value##0:wybe.float) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.number, 1:wybe.int, ?#result##0:multictr.number) @multictr:nn:nn
proc float > public {inline} (5 calls)
1: multictr.number.float<1>
float(?float_value##0:wybe.float, #result##0:multictr.number, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.float, ?float_value##0:wybe.float)

    1:
        foreign lpvm access(~#result##0:multictr.number, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?float_value##0:wybe.float) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc float_value > public {inline} (0 calls)
0: multictr.number.float_value<0>
float_value(#rec##0:multictr.number, ?#result##0:wybe.float, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.float, ?#result##0:wybe.float)

    1:
        foreign lpvm access(~#rec##0:multictr.number, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#result##0:wybe.float) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc float_value > public {inline} (0 calls)
1: multictr.number.float_value<1>
float_value(#rec##0:multictr.number, ?#rec##1:multictr.number, #field##0:wybe.float, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.number, ?#rec##1:multictr.number)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr.number, ?#rec##1:multictr.number, -1:wybe.int, 0:wybe.int, 8:wybe.int, 1:wybe.int, ~#field##0:wybe.float) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc int > public {inline} (0 calls)
0: multictr.number.int<0>
int(int_value##0:wybe.int, ?#result##0:multictr.number)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.number) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.number, ?#result##0:multictr.number, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~int_value##0:wybe.int) @multictr:nn:nn
proc int > public {inline} (10 calls)
1: multictr.number.int<1>
int(?int_value##0:wybe.int, #result##0:multictr.number, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?int_value##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:multictr.number, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?int_value##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc int_value > public {inline} (0 calls)
0: multictr.number.int_value<0>
int_value(#rec##0:multictr.number, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr.number, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc int_value > public {inline} (0 calls)
1: multictr.number.int_value<1>
int_value(#rec##0:multictr.number, ?#rec##1:multictr.number, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.number, ?#rec##1:multictr.number)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr.number, ?#rec##1:multictr.number, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: multictr.number.~=<0>
~=(#left##0:multictr.number, #right##0:multictr.number, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multictr.number.=<0>(~#left##0:multictr.number, ~#right##0:multictr.number, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'multictr.number'

source_filename = "!ROOT!/final-dump/multictr.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"multictr.number.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#8##0" = and i64 %"#left##0", 1
  %"tmp#9##0" = icmp eq i64 %"tmp#8##0", 0
  br i1 %"tmp#9##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#23##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#int_value##0" = load i64, ptr %"tmp#23##0"
  %"tmp#19##0" = and i64 %"#right##0", 1
  %"tmp#20##0" = icmp eq i64 %"tmp#19##0", 0
  br i1 %"tmp#20##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#24##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#int_value##0" = load i64, ptr %"tmp#24##0"
  %"tmp#25##0" = icmp eq i64 %"#left#int_value##0", %"#right#int_value##0"
  ret i1 %"tmp#25##0"
if.else.1:
  ret i1 0
if.else.0:
  %"tmp#12##0" = icmp eq i64 %"tmp#8##0", 1
  br i1 %"tmp#12##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#26##0" = add i64 %"#left##0", -1
  %"tmp#27##0" = inttoptr i64 %"tmp#26##0" to ptr
  %"#left#float_value##0" = load double, ptr %"tmp#27##0"
  %"tmp#14##0" = and i64 %"#right##0", 1
  %"tmp#15##0" = icmp eq i64 %"tmp#14##0", 1
  br i1 %"tmp#15##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#28##0" = add i64 %"#right##0", -1
  %"tmp#29##0" = inttoptr i64 %"tmp#28##0" to ptr
  %"#right#float_value##0" = load double, ptr %"tmp#29##0"
  %"tmp#30##0" = fcmp oeq double %"#left#float_value##0", %"#right#float_value##0"
  ret i1 %"tmp#30##0"
if.else.3:
  ret i1 0
if.else.2:
  ret i1 0
}

define external fastcc i64 @"multictr.number.float<0>"(double %"float_value##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store double %"float_value##0", ptr %"tmp#1##0"
  %"tmp#2##0" = or i64 %"#rec##0", 1
  ret i64 %"tmp#2##0"
}

define external fastcc {double, i1} @"multictr.number.float<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#result##0", -1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load double, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {double, i1} undef, double %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {double, i1} %"tmp#5##0", i1 1, 1
  ret {double, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {double, i1} undef, double undef, 0
  %"tmp#8##0" = insertvalue {double, i1} %"tmp#7##0", i1 0, 1
  ret {double, i1} %"tmp#8##0"
}

define external fastcc {double, i1} @"multictr.number.float_value<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#rec##0", -1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load double, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {double, i1} undef, double %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {double, i1} %"tmp#5##0", i1 1, 1
  ret {double, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {double, i1} undef, double undef, 0
  %"tmp#8##0" = insertvalue {double, i1} %"tmp#7##0", i1 0, 1
  ret {double, i1} %"tmp#8##0"
}

define external fastcc {i64, i1} @"multictr.number.float_value<1>"(i64 %"#rec##0", double %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = sub i64 %"#rec##0", 1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#4##0", ptr %"tmp#3##0", i64 8, i1 0)
  %"tmp#5##0" = ptrtoint ptr %"tmp#4##0" to i64
  %"tmp#6##0" = add i64 %"tmp#5##0", 1
  %"tmp#7##0" = add i64 %"tmp#6##0", -1
  %"tmp#8##0" = inttoptr i64 %"tmp#7##0" to ptr
  store double %"#field##0", ptr %"tmp#8##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#6##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.0:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
}

define external fastcc i64 @"multictr.number.int<0>"(i64 %"int_value##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"int_value##0", ptr %"tmp#1##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i1} @"multictr.number.int<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"multictr.number.int_value<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"multictr.number.int_value<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 1
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#3##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#3##0", ptr %"tmp#2##0", i64 8, i1 0)
  %"tmp#4##0" = ptrtoint ptr %"tmp#3##0" to i64
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

define external fastcc i1 @"multictr.number.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"multictr.number.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

--------------------------------------------------
 Module multictr.perhaps
  representation  : 64 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.perhaps.=<0>
                    multictr.perhaps.content<0>
                    multictr.perhaps.content<1>
                    multictr.perhaps.perhaps<0>
                    multictr.perhaps.perhaps<1>
                    multictr.perhaps.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: multictr.perhaps.=<0>
=(#left##0:multictr.perhaps, #right##0:multictr.perhaps, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.perhaps, ~#right##0:multictr.perhaps, ?#success##0:wybe.bool)


proc content > public {inline} (0 calls)
0: multictr.perhaps.content<0>
content(#rec##0:multictr.perhaps, ?#result##0:multictr.maybe_int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#rec##0:multictr.perhaps, ?#result##0:multictr.maybe_int) @multictr:nn:nn
proc content > public {inline} (0 calls)
1: multictr.perhaps.content<1>
content([#rec##0:multictr.perhaps], ?#rec##2:multictr.perhaps, #field##0:multictr.maybe_int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#field##0:multictr.maybe_int, ?#rec##2:multictr.perhaps) @multictr:nn:nn


proc perhaps > public {inline} (0 calls)
0: multictr.perhaps.perhaps<0>
perhaps(content##0:multictr.maybe_int, ?#result##2:multictr.perhaps)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~content##0:multictr.maybe_int, ?#result##2:multictr.perhaps) @multictr:nn:nn
proc perhaps > public {inline} (0 calls)
1: multictr.perhaps.perhaps<1>
perhaps(?content##0:multictr.maybe_int, #result##0:multictr.perhaps)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#result##0:multictr.perhaps, ?content##0:multictr.maybe_int) @multictr:nn:nn


proc ~= > public {inline} (0 calls)
0: multictr.perhaps.~=<0>
~=(#left##0:multictr.perhaps, #right##0:multictr.perhaps, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.perhaps, ~#right##0:multictr.perhaps, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'multictr.perhaps'

source_filename = "!ROOT!/final-dump/multictr.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"multictr.perhaps.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#1##0" = icmp eq i64 %"#left##0", %"#right##0"
  ret i1 %"tmp#1##0"
}

define external fastcc i64 @"multictr.perhaps.content<0>"(i64 %"#rec##0") {
  ret i64 %"#rec##0"
}

define external fastcc i64 @"multictr.perhaps.content<1>"(i64 %"#field##0") {
  ret i64 %"#field##0"
}

define external fastcc i64 @"multictr.perhaps.perhaps<0>"(i64 %"content##0") {
  ret i64 %"content##0"
}

define external fastcc i64 @"multictr.perhaps.perhaps<1>"(i64 %"#result##0") {
  ret i64 %"#result##0"
}

define external fastcc i1 @"multictr.perhaps.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp eq i64 %"#left##0", %"#right##0"
  %"tmp#3##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#3##0"
}

--------------------------------------------------
 Module multictr.rank
  representation  : 4 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.rank.=<0>
                    multictr.rank.ace<0>
                    multictr.rank.jack<0>
                    multictr.rank.king<0>
                    multictr.rank.queen<0>
                    multictr.rank.r10<0>
                    multictr.rank.r2<0>
                    multictr.rank.r3<0>
                    multictr.rank.r4<0>
                    multictr.rank.r5<0>
                    multictr.rank.r6<0>
                    multictr.rank.r7<0>
                    multictr.rank.r8<0>
                    multictr.rank.r9<0>
                    multictr.rank.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: multictr.rank.=<0>
=(#left##0:multictr.rank, #right##0:multictr.rank, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.rank, ~#right##0:multictr.rank, ?#success##0:wybe.bool)


proc ace > public {inline} (0 calls)
0: multictr.rank.ace<0>
ace(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(12:multictr.rank, ?#result##0:multictr.rank)


proc jack > public {inline} (0 calls)
0: multictr.rank.jack<0>
jack(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(9:multictr.rank, ?#result##0:multictr.rank)


proc king > public {inline} (0 calls)
0: multictr.rank.king<0>
king(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(11:multictr.rank, ?#result##0:multictr.rank)


proc queen > public {inline} (0 calls)
0: multictr.rank.queen<0>
queen(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(10:multictr.rank, ?#result##0:multictr.rank)


proc r10 > public {inline} (0 calls)
0: multictr.rank.r10<0>
r10(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(8:multictr.rank, ?#result##0:multictr.rank)


proc r2 > public {inline} (0 calls)
0: multictr.rank.r2<0>
r2(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.rank, ?#result##0:multictr.rank)


proc r3 > public {inline} (0 calls)
0: multictr.rank.r3<0>
r3(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:multictr.rank, ?#result##0:multictr.rank)


proc r4 > public {inline} (0 calls)
0: multictr.rank.r4<0>
r4(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(2:multictr.rank, ?#result##0:multictr.rank)


proc r5 > public {inline} (0 calls)
0: multictr.rank.r5<0>
r5(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(3:multictr.rank, ?#result##0:multictr.rank)


proc r6 > public {inline} (0 calls)
0: multictr.rank.r6<0>
r6(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(4:multictr.rank, ?#result##0:multictr.rank)


proc r7 > public {inline} (0 calls)
0: multictr.rank.r7<0>
r7(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(5:multictr.rank, ?#result##0:multictr.rank)


proc r8 > public {inline} (0 calls)
0: multictr.rank.r8<0>
r8(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(6:multictr.rank, ?#result##0:multictr.rank)


proc r9 > public {inline} (0 calls)
0: multictr.rank.r9<0>
r9(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(7:multictr.rank, ?#result##0:multictr.rank)


proc ~= > public {inline} (0 calls)
0: multictr.rank.~=<0>
~=(#left##0:multictr.rank, #right##0:multictr.rank, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.rank, ~#right##0:multictr.rank, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'multictr.rank'

source_filename = "!ROOT!/final-dump/multictr.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"multictr.rank.=<0>"(i4 %"#left##0", i4 %"#right##0") {
  %"tmp#1##0" = icmp eq i4 %"#left##0", %"#right##0"
  ret i1 %"tmp#1##0"
}

define external fastcc i4 @"multictr.rank.ace<0>"() {
  ret i4 12
}

define external fastcc i4 @"multictr.rank.jack<0>"() {
  ret i4 9
}

define external fastcc i4 @"multictr.rank.king<0>"() {
  ret i4 11
}

define external fastcc i4 @"multictr.rank.queen<0>"() {
  ret i4 10
}

define external fastcc i4 @"multictr.rank.r10<0>"() {
  ret i4 8
}

define external fastcc i4 @"multictr.rank.r2<0>"() {
  ret i4 0
}

define external fastcc i4 @"multictr.rank.r3<0>"() {
  ret i4 1
}

define external fastcc i4 @"multictr.rank.r4<0>"() {
  ret i4 2
}

define external fastcc i4 @"multictr.rank.r5<0>"() {
  ret i4 3
}

define external fastcc i4 @"multictr.rank.r6<0>"() {
  ret i4 4
}

define external fastcc i4 @"multictr.rank.r7<0>"() {
  ret i4 5
}

define external fastcc i4 @"multictr.rank.r8<0>"() {
  ret i4 6
}

define external fastcc i4 @"multictr.rank.r9<0>"() {
  ret i4 7
}

define external fastcc i1 @"multictr.rank.~=<0>"(i4 %"#left##0", i4 %"#right##0") {
  %"tmp#0##0" = icmp eq i4 %"#left##0", %"#right##0"
  %"tmp#3##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#3##0"
}

--------------------------------------------------
 Module multictr.simple
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : multictr.simple.=<0>
                    multictr.simple.one<0>
                    multictr.simple.one<1>
                    multictr.simple.one_field<0>
                    multictr.simple.one_field<1>
                    multictr.simple.two<0>
                    multictr.simple.two<1>
                    multictr.simple.two_field1<0>
                    multictr.simple.two_field1<1>
                    multictr.simple.two_field2<0>
                    multictr.simple.two_field2<1>
                    multictr.simple.zero<0>
                    multictr.simple.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public (1 calls)
0: multictr.simple.=<0>
=(#left##0:multictr.simple, #right##0:multictr.simple, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:multictr.simple, 0:multictr.simple, ?#success##0:wybe.bool)

    1:
        foreign llvm and(#left##0:wybe.int, 1:wybe.int, ?tmp#11##0:wybe.int)
        foreign llvm icmp_eq(tmp#11##0:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.bool)
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm icmp_eq(~tmp#11##0:wybe.int, 1:wybe.int, ?tmp#16##0:wybe.bool)
            case ~tmp#16##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(#left##0:multictr.simple, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#left#two_field1##0:wybe.int) @multictr:nn:nn
                foreign lpvm access(~#left##0:multictr.simple, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#left#two_field2##0:wybe.int) @multictr:nn:nn
                foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#18##0:wybe.bool)
                case ~tmp#18##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#19##0:wybe.int)
                    foreign llvm icmp_eq(~tmp#19##0:wybe.int, 1:wybe.int, ?tmp#20##0:wybe.bool)
                    case ~tmp#20##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign lpvm access(#right##0:multictr.simple, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#right#two_field1##0:wybe.int) @multictr:nn:nn
                        foreign lpvm access(~#right##0:multictr.simple, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#right#two_field2##0:wybe.int) @multictr:nn:nn
                        foreign llvm icmp_eq(~#left#two_field1##0:wybe.int, ~#right#two_field1##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
                        case ~tmp#5##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                        1:
                            foreign llvm icmp_eq(~#left#two_field2##0:wybe.int, ~#right#two_field2##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





        1:
            foreign lpvm access(~#left##0:multictr.simple, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#one_field##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#26##0:wybe.bool)
            case ~tmp#26##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#27##0:wybe.int)
                foreign llvm icmp_eq(~tmp#27##0:wybe.int, 0:wybe.int, ?tmp#28##0:wybe.bool)
                case ~tmp#28##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.simple, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#one_field##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#one_field##0:wybe.int, ~#right#one_field##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn






proc one > public {inline} (0 calls)
0: multictr.simple.one<0>
one(one_field##0:wybe.int, ?#result##0:multictr.simple)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.simple) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.simple, ?#result##0:multictr.simple, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~one_field##0:wybe.int) @multictr:nn:nn
proc one > public {inline} (11 calls)
1: multictr.simple.one<1>
one(?one_field##0:wybe.int, #result##0:multictr.simple, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?one_field##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?one_field##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.simple, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?one_field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc one_field > public {inline} (0 calls)
0: multictr.simple.one_field<0>
one_field(#rec##0:multictr.simple, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.simple, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc one_field > public {inline} (0 calls)
1: multictr.simple.one_field<1>
one_field(#rec##0:multictr.simple, ?#rec##1:multictr.simple, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:multictr.simple, ?#rec##1:multictr.simple)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.simple, ?#rec##1:multictr.simple)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.simple, ?#rec##1:multictr.simple, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc two > public {inline} (0 calls)
0: multictr.simple.two<0>
two(two_field1##0:wybe.int, two_field2##0:wybe.int, ?#result##0:multictr.simple)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.simple) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.simple, ?#rec##1:multictr.simple, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~two_field1##0:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.simple, ?#rec##2:multictr.simple, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~two_field2##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.simple, 1:wybe.int, ?#result##0:multictr.simple) @multictr:nn:nn
proc two > public {inline} (7 calls)
1: multictr.simple.two<1>
two(?two_field1##0:wybe.int, ?two_field2##0:wybe.int, #result##0:multictr.simple, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?two_field1##0:wybe.int)
        foreign llvm move(undef:wybe.int, ?two_field2##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?two_field1##0:wybe.int)
            foreign llvm move(undef:wybe.int, ?two_field2##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.simple, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?two_field1##0:wybe.int) @multictr:nn:nn
            foreign lpvm access(~#result##0:multictr.simple, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?two_field2##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc two_field1 > public {inline} (0 calls)
0: multictr.simple.two_field1<0>
two_field1(#rec##0:multictr.simple, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.simple, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc two_field1 > public {inline} (0 calls)
1: multictr.simple.two_field1<1>
two_field1(#rec##0:multictr.simple, ?#rec##1:multictr.simple, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:multictr.simple, ?#rec##1:multictr.simple)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.simple, ?#rec##1:multictr.simple)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.simple, ?#rec##1:multictr.simple, -1:wybe.int, 0:wybe.int, 16:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc two_field2 > public {inline} (0 calls)
0: multictr.simple.two_field2<0>
two_field2(#rec##0:multictr.simple, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.simple, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc two_field2 > public {inline} (0 calls)
1: multictr.simple.two_field2<1>
two_field2(#rec##0:multictr.simple, ?#rec##1:multictr.simple, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:multictr.simple, ?#rec##1:multictr.simple)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.simple, ?#rec##1:multictr.simple)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.simple, ?#rec##1:multictr.simple, 7:wybe.int, 0:wybe.int, 16:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc zero > public {inline} (0 calls)
0: multictr.simple.zero<0>
zero(?#result##0:multictr.simple)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.simple, ?#result##0:multictr.simple)


proc ~= > public {inline} (0 calls)
0: multictr.simple.~=<0>
~=(#left##0:multictr.simple, #right##0:multictr.simple, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multictr.simple.=<0>(~#left##0:multictr.simple, ~#right##0:multictr.simple, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'multictr.simple'

source_filename = "!ROOT!/final-dump/multictr.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"multictr.simple.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp ne i64 %"#left##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#11##0" = and i64 %"#left##0", 1
  %"tmp#12##0" = icmp eq i64 %"tmp#11##0", 0
  br i1 %"tmp#12##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#31##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#one_field##0" = load i64, ptr %"tmp#31##0"
  %"tmp#26##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#26##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#27##0" = and i64 %"#right##0", 1
  %"tmp#28##0" = icmp eq i64 %"tmp#27##0", 0
  br i1 %"tmp#28##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#32##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#one_field##0" = load i64, ptr %"tmp#32##0"
  %"tmp#33##0" = icmp eq i64 %"#left#one_field##0", %"#right#one_field##0"
  ret i1 %"tmp#33##0"
if.else.3:
  ret i1 0
if.else.2:
  ret i1 0
if.else.1:
  %"tmp#16##0" = icmp eq i64 %"tmp#11##0", 1
  br i1 %"tmp#16##0", label %if.then.4, label %if.else.4
if.then.4:
  %"tmp#34##0" = add i64 %"#left##0", -1
  %"tmp#35##0" = inttoptr i64 %"tmp#34##0" to ptr
  %"#left#two_field1##0" = load i64, ptr %"tmp#35##0"
  %"tmp#36##0" = add i64 %"#left##0", 7
  %"tmp#37##0" = inttoptr i64 %"tmp#36##0" to ptr
  %"#left#two_field2##0" = load i64, ptr %"tmp#37##0"
  %"tmp#18##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#18##0", label %if.then.5, label %if.else.5
if.then.5:
  %"tmp#19##0" = and i64 %"#right##0", 1
  %"tmp#20##0" = icmp eq i64 %"tmp#19##0", 1
  br i1 %"tmp#20##0", label %if.then.6, label %if.else.6
if.then.6:
  %"tmp#38##0" = add i64 %"#right##0", -1
  %"tmp#39##0" = inttoptr i64 %"tmp#38##0" to ptr
  %"#right#two_field1##0" = load i64, ptr %"tmp#39##0"
  %"tmp#40##0" = add i64 %"#right##0", 7
  %"tmp#41##0" = inttoptr i64 %"tmp#40##0" to ptr
  %"#right#two_field2##0" = load i64, ptr %"tmp#41##0"
  %"tmp#5##0" = icmp eq i64 %"#left#two_field1##0", %"#right#two_field1##0"
  br i1 %"tmp#5##0", label %if.then.7, label %if.else.7
if.then.7:
  %"tmp#42##0" = icmp eq i64 %"#left#two_field2##0", %"#right#two_field2##0"
  ret i1 %"tmp#42##0"
if.else.7:
  ret i1 0
if.else.6:
  ret i1 0
if.else.5:
  ret i1 0
if.else.4:
  ret i1 0
if.else.0:
  %"tmp#43##0" = icmp eq i64 %"#right##0", 0
  ret i1 %"tmp#43##0"
}

define external fastcc i64 @"multictr.simple.one<0>"(i64 %"one_field##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"one_field##0", ptr %"tmp#1##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i1} @"multictr.simple.one<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 1
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 0
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.1:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 0, 1
  ret {i64, i1} %"tmp#10##0"
}

define external fastcc {i64, i1} @"multictr.simple.one_field<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 1
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 0
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.1:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 0, 1
  ret {i64, i1} %"tmp#10##0"
}

define external fastcc {i64, i1} @"multictr.simple.one_field<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 1
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 0
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#4##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#4##0", ptr %"tmp#3##0", i64 8, i1 0)
  %"tmp#5##0" = ptrtoint ptr %"tmp#4##0" to i64
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  store i64 %"#field##0", ptr %"tmp#6##0"
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 1, 1
  ret {i64, i1} %"tmp#8##0"
if.else.1:
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 0, 1
  ret {i64, i1} %"tmp#10##0"
if.else.0:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
}

define external fastcc i64 @"multictr.simple.two<0>"(i64 %"two_field1##0", i64 %"two_field2##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"two_field1##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"two_field2##0", ptr %"tmp#3##0"
  %"tmp#4##0" = or i64 %"#rec##0", 1
  ret i64 %"tmp#4##0"
}

define external fastcc {i64, i64, i1} @"multictr.simple.two<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 1
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#result##0", -1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = add i64 %"#result##0", 7
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#10##0" = insertvalue {i64, i64, i1} %"tmp#9##0", i64 %"tmp#8##0", 1
  %"tmp#11##0" = insertvalue {i64, i64, i1} %"tmp#10##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#11##0"
if.else.1:
  %"tmp#12##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#13##0" = insertvalue {i64, i64, i1} %"tmp#12##0", i64 undef, 1
  %"tmp#14##0" = insertvalue {i64, i64, i1} %"tmp#13##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i64, i1} %"tmp#15##0", i64 undef, 1
  %"tmp#17##0" = insertvalue {i64, i64, i1} %"tmp#16##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#17##0"
}

define external fastcc {i64, i1} @"multictr.simple.two_field1<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 1
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#rec##0", -1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"multictr.simple.two_field1<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 1
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = sub i64 %"#rec##0", 1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#5##0", ptr %"tmp#4##0", i64 16, i1 0)
  %"tmp#6##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#7##0" = add i64 %"tmp#6##0", 1
  %"tmp#8##0" = add i64 %"tmp#7##0", -1
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 %"tmp#7##0", 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 1, 1
  ret {i64, i1} %"tmp#11##0"
if.else.1:
  %"tmp#12##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#13##0" = insertvalue {i64, i1} %"tmp#12##0", i1 0, 1
  ret {i64, i1} %"tmp#13##0"
if.else.0:
  %"tmp#14##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#15##0" = insertvalue {i64, i1} %"tmp#14##0", i1 0, 1
  ret {i64, i1} %"tmp#15##0"
}

define external fastcc {i64, i1} @"multictr.simple.two_field2<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 1
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#rec##0", 7
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"multictr.simple.two_field2<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 1
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = sub i64 %"#rec##0", 1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#5##0", ptr %"tmp#4##0", i64 16, i1 0)
  %"tmp#6##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#7##0" = add i64 %"tmp#6##0", 1
  %"tmp#8##0" = add i64 %"tmp#7##0", 7
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 %"tmp#7##0", 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 1, 1
  ret {i64, i1} %"tmp#11##0"
if.else.1:
  %"tmp#12##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#13##0" = insertvalue {i64, i1} %"tmp#12##0", i1 0, 1
  ret {i64, i1} %"tmp#13##0"
if.else.0:
  %"tmp#14##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#15##0" = insertvalue {i64, i1} %"tmp#14##0", i1 0, 1
  ret {i64, i1} %"tmp#15##0"
}

define external fastcc i64 @"multictr.simple.zero<0>"() {
  ret i64 0
}

define external fastcc i1 @"multictr.simple.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"multictr.simple.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

--------------------------------------------------
 Module multictr.suit
  representation  : 2 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.suit.=<0>
                    multictr.suit.clubs<0>
                    multictr.suit.diamonds<0>
                    multictr.suit.hearts<0>
                    multictr.suit.spades<0>
                    multictr.suit.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: multictr.suit.=<0>
=(#left##0:multictr.suit, #right##0:multictr.suit, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.suit, ~#right##0:multictr.suit, ?#success##0:wybe.bool)


proc clubs > public {inline} (0 calls)
0: multictr.suit.clubs<0>
clubs(?#result##0:multictr.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.suit, ?#result##0:multictr.suit)


proc diamonds > public {inline} (0 calls)
0: multictr.suit.diamonds<0>
diamonds(?#result##0:multictr.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:multictr.suit, ?#result##0:multictr.suit)


proc hearts > public {inline} (0 calls)
0: multictr.suit.hearts<0>
hearts(?#result##0:multictr.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(2:multictr.suit, ?#result##0:multictr.suit)


proc spades > public {inline} (0 calls)
0: multictr.suit.spades<0>
spades(?#result##0:multictr.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(3:multictr.suit, ?#result##0:multictr.suit)


proc ~= > public {inline} (0 calls)
0: multictr.suit.~=<0>
~=(#left##0:multictr.suit, #right##0:multictr.suit, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.suit, ~#right##0:multictr.suit, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'multictr.suit'

source_filename = "!ROOT!/final-dump/multictr.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"multictr.suit.=<0>"(i2 %"#left##0", i2 %"#right##0") {
  %"tmp#1##0" = icmp eq i2 %"#left##0", %"#right##0"
  ret i1 %"tmp#1##0"
}

define external fastcc i2 @"multictr.suit.clubs<0>"() {
  ret i2 0
}

define external fastcc i2 @"multictr.suit.diamonds<0>"() {
  ret i2 1
}

define external fastcc i2 @"multictr.suit.hearts<0>"() {
  ret i2 2
}

define external fastcc i2 @"multictr.suit.spades<0>"() {
  ret i2 3
}

define external fastcc i1 @"multictr.suit.~=<0>"(i2 %"#left##0", i2 %"#right##0") {
  %"tmp#0##0" = icmp eq i2 %"#left##0", %"#right##0"
  %"tmp#3##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#3##0"
}

--------------------------------------------------
 Module multictr.unit
  representation  : 0 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.unit.=<0>
                    multictr.unit.unit<0>
                    multictr.unit.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: multictr.unit.=<0>
=([#left##0:multictr.unit], [#right##0:multictr.unit], ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc unit > public {inline} (0 calls)
0: multictr.unit.unit<0>
unit(?#result##0:multictr.unit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.unit, ?#result##0:multictr.unit)


proc ~= > public {inline} (0 calls)
0: multictr.unit.~=<0>
~=([#left##0:multictr.unit], [#right##0:multictr.unit], ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'multictr.unit'

source_filename = "!ROOT!/final-dump/multictr.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"multictr.unit.=<0>"() {
  ret i1 1
}

define external fastcc void @"multictr.unit.unit<0>"() {
  ret void
}

define external fastcc i1 @"multictr.unit.~=<0>"() {
  ret i1 0
}

======================================================================
AFTER EVERYTHING:
 Module multictr
  representation  : (not a type)
  public submods  : card -> multictr.card
                    complicated -> multictr.complicated
                    length -> multictr.length
                    maybe_int -> multictr.maybe_int
                    number -> multictr.number
                    perhaps -> multictr.perhaps
                    rank -> multictr.rank
                    simple -> multictr.simple
                    suit -> multictr.suit
                    unit -> multictr.unit
  public resources: 
  public procs    : multictr.card.=<0>
                    multictr.card.card<0>
                    multictr.card.card<1>
                    multictr.card.rank<0>
                    multictr.card.rank<1>
                    multictr.card.suit<0>
                    multictr.card.suit<1>
                    multictr.card.~=<0>
                    multictr.complicated.=<0>
                    multictr.complicated.autumn<0>
                    multictr.complicated.c01<0>
                    multictr.complicated.c01<1>
                    multictr.complicated.c02<0>
                    multictr.complicated.c02<1>
                    multictr.complicated.c03<0>
                    multictr.complicated.c03<1>
                    multictr.complicated.c04<0>
                    multictr.complicated.c04<1>
                    multictr.complicated.c05<0>
                    multictr.complicated.c05<1>
                    multictr.complicated.c06<0>
                    multictr.complicated.c06<1>
                    multictr.complicated.c07<0>
                    multictr.complicated.c07<1>
                    multictr.complicated.c08<0>
                    multictr.complicated.c08<1>
                    multictr.complicated.c09<0>
                    multictr.complicated.c09<1>
                    multictr.complicated.c10<0>
                    multictr.complicated.c10<1>
                    multictr.complicated.c11<0>
                    multictr.complicated.c11<1>
                    multictr.complicated.c12<0>
                    multictr.complicated.c12<1>
                    multictr.complicated.c13<0>
                    multictr.complicated.c13<1>
                    multictr.complicated.c14<0>
                    multictr.complicated.c14<1>
                    multictr.complicated.c15<0>
                    multictr.complicated.c15<1>
                    multictr.complicated.c16<0>
                    multictr.complicated.c16<1>
                    multictr.complicated.c17<0>
                    multictr.complicated.c17<1>
                    multictr.complicated.f01<0>
                    multictr.complicated.f01<1>
                    multictr.complicated.f02<0>
                    multictr.complicated.f02<1>
                    multictr.complicated.f03<0>
                    multictr.complicated.f03<1>
                    multictr.complicated.f04<0>
                    multictr.complicated.f04<1>
                    multictr.complicated.f05<0>
                    multictr.complicated.f05<1>
                    multictr.complicated.f06<0>
                    multictr.complicated.f06<1>
                    multictr.complicated.f07<0>
                    multictr.complicated.f07<1>
                    multictr.complicated.f08<0>
                    multictr.complicated.f08<1>
                    multictr.complicated.f09<0>
                    multictr.complicated.f09<1>
                    multictr.complicated.f10<0>
                    multictr.complicated.f10<1>
                    multictr.complicated.f11<0>
                    multictr.complicated.f11<1>
                    multictr.complicated.f12<0>
                    multictr.complicated.f12<1>
                    multictr.complicated.f13<0>
                    multictr.complicated.f13<1>
                    multictr.complicated.f14<0>
                    multictr.complicated.f14<1>
                    multictr.complicated.f15<0>
                    multictr.complicated.f15<1>
                    multictr.complicated.f16<0>
                    multictr.complicated.f16<1>
                    multictr.complicated.f17<0>
                    multictr.complicated.f17<1>
                    multictr.complicated.spring<0>
                    multictr.complicated.summer<0>
                    multictr.complicated.winter<0>
                    multictr.complicated.~=<0>
                    multictr.length.=<0>
                    multictr.length.metres<0>
                    multictr.length.metres<1>
                    multictr.length.value<0>
                    multictr.length.value<1>
                    multictr.length.~=<0>
                    multictr.maybe_int.=<0>
                    multictr.maybe_int.just<0>
                    multictr.maybe_int.just<1>
                    multictr.maybe_int.nothing<0>
                    multictr.maybe_int.value<0>
                    multictr.maybe_int.value<1>
                    multictr.maybe_int.~=<0>
                    multictr.number.=<0>
                    multictr.number.float<0>
                    multictr.number.float<1>
                    multictr.number.float_value<0>
                    multictr.number.float_value<1>
                    multictr.number.int<0>
                    multictr.number.int<1>
                    multictr.number.int_value<0>
                    multictr.number.int_value<1>
                    multictr.number.~=<0>
                    multictr.perhaps.=<0>
                    multictr.perhaps.content<0>
                    multictr.perhaps.content<1>
                    multictr.perhaps.perhaps<0>
                    multictr.perhaps.perhaps<1>
                    multictr.perhaps.~=<0>
                    multictr.rank.=<0>
                    multictr.rank.ace<0>
                    multictr.rank.jack<0>
                    multictr.rank.king<0>
                    multictr.rank.queen<0>
                    multictr.rank.r10<0>
                    multictr.rank.r2<0>
                    multictr.rank.r3<0>
                    multictr.rank.r4<0>
                    multictr.rank.r5<0>
                    multictr.rank.r6<0>
                    multictr.rank.r7<0>
                    multictr.rank.r8<0>
                    multictr.rank.r9<0>
                    multictr.rank.~=<0>
                    multictr.simple.=<0>
                    multictr.simple.one<0>
                    multictr.simple.one<1>
                    multictr.simple.one_field<0>
                    multictr.simple.one_field<1>
                    multictr.simple.two<0>
                    multictr.simple.two<1>
                    multictr.simple.two_field1<0>
                    multictr.simple.two_field1<1>
                    multictr.simple.two_field2<0>
                    multictr.simple.two_field2<1>
                    multictr.simple.zero<0>
                    multictr.simple.~=<0>
                    multictr.suit.=<0>
                    multictr.suit.clubs<0>
                    multictr.suit.diamonds<0>
                    multictr.suit.hearts<0>
                    multictr.suit.spades<0>
                    multictr.suit.~=<0>
                    multictr.unit.=<0>
                    multictr.unit.unit<0>
                    multictr.unit.~=<0>
  imports         : public use multictr.card
                    public use multictr.complicated
                    public use multictr.length
                    public use multictr.maybe_int
                    public use multictr.number
                    public use multictr.perhaps
                    public use multictr.rank
                    public use multictr.simple
                    public use multictr.suit
                    public use multictr.unit
                    use wybe
  resources       : 
  submodules      : multictr.card, multictr.complicated, multictr.length, multictr.maybe_int, multictr.number, multictr.perhaps, multictr.rank, multictr.simple, multictr.suit, multictr.unit
  procs           : 


  LLVM code       :

; ModuleID = 'multictr'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    
--------------------------------------------------
 Module multictr.card
  representation  : 6 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.card.=<0>
                    multictr.card.card<0>
                    multictr.card.card<1>
                    multictr.card.rank<0>
                    multictr.card.rank<1>
                    multictr.card.suit<0>
                    multictr.card.suit<1>
                    multictr.card.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: multictr.card.=<0>
=(#left##0:multictr.card, #right##0:multictr.card, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.card, ~#right##0:multictr.card, ?#success##0:wybe.bool)


proc card > public {inline} (0 calls)
0: multictr.card.card<0>
card(rank##0:multictr.rank, suit##0:multictr.suit, ?#result##3:multictr.card)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm shl(~rank##0:multictr.card, 2:multictr.card, ?#temp##0:multictr.card) @multictr:nn:nn
    foreign llvm or(~#temp##0:multictr.card, ~suit##0:multictr.card, ?#result##3:multictr.card) @multictr:nn:nn
proc card > public {inline} (0 calls)
1: multictr.card.card<1>
card(?rank##0:multictr.rank, ?suit##0:multictr.suit, #result##0:multictr.card)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm lshr(#result##0:multictr.card, 2:multictr.card, ?#temp##0:multictr.card) @multictr:nn:nn
    foreign llvm and(~#temp##0:multictr.card, 15:multictr.card, ?#temp2##0:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#temp2##0:multictr.card, ?rank##0:multictr.rank) @multictr:nn:nn
    foreign llvm and(~#result##0:multictr.card, 3:multictr.card, ?#temp2##1:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#temp2##1:multictr.card, ?suit##0:multictr.suit) @multictr:nn:nn


proc rank > public {inline} (0 calls)
0: multictr.card.rank<0>
rank(#rec##0:multictr.card, ?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm lshr(~#rec##0:multictr.card, 2:multictr.card, ?#rec##1:multictr.card) @multictr:nn:nn
    foreign llvm and(~#rec##1:multictr.card, 15:multictr.card, ?#field##0:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#field##0:multictr.card, ?#result##0:multictr.rank) @multictr:nn:nn
proc rank > public {inline} (0 calls)
1: multictr.card.rank<1>
rank(#rec##0:multictr.card, ?#rec##2:multictr.card, #field##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(~#rec##0:multictr.card, -61:multictr.card, ?#rec##1:multictr.card) @multictr:nn:nn
    foreign llvm shl(~#field##0:multictr.card, 2:multictr.card, ?#temp##0:multictr.card) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.card, ~#temp##0:multictr.card, ?#rec##2:multictr.card) @multictr:nn:nn


proc suit > public {inline} (0 calls)
0: multictr.card.suit<0>
suit(#rec##0:multictr.card, ?#result##0:multictr.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(~#rec##0:multictr.card, 3:multictr.card, ?#field##0:multictr.card) @multictr:nn:nn
    foreign lpvm cast(~#field##0:multictr.card, ?#result##0:multictr.suit) @multictr:nn:nn
proc suit > public {inline} (0 calls)
1: multictr.card.suit<1>
suit(#rec##0:multictr.card, ?#rec##2:multictr.card, #field##0:multictr.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(~#rec##0:multictr.card, -4:multictr.card, ?#rec##1:multictr.card) @multictr:nn:nn
    foreign llvm or(~#field##0:multictr.card, ~#rec##1:multictr.card, ?#rec##2:multictr.card) @multictr:nn:nn


proc ~= > public {inline} (0 calls)
0: multictr.card.~=<0>
~=(#left##0:multictr.card, #right##0:multictr.card, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.card, ~#right##0:multictr.card, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.card'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.card.=<0>"(i6  %"#left##0", i6  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i6 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i6 @"multictr.card.card<0>"(i4  %"rank##0", i2  %"suit##0") alwaysinline   {
entry:
  %0 = zext i4 %"rank##0" to i6  
  %1 = shl   i6 %0, 2 
  %2 = zext i2 %"suit##0" to i6  
  %3 = or i6 %1, %2 
  ret i6 %3 
}


define external fastcc  {i4, i2} @"multictr.card.card<1>"(i6  %"#result##0") alwaysinline   {
entry:
  %0 = lshr  i6 %"#result##0", 2 
  %1 = and i6 %0, 15 
  %2 = trunc i6 %1 to i4  
  %3 = and i6 %"#result##0", 3 
  %4 = trunc i6 %3 to i2  
  %5 = insertvalue {i4, i2} undef, i4 %2, 0 
  %6 = insertvalue {i4, i2} %5, i2 %4, 1 
  ret {i4, i2} %6 
}


define external fastcc  i4 @"multictr.card.rank<0>"(i6  %"#rec##0") alwaysinline   {
entry:
  %0 = lshr  i6 %"#rec##0", 2 
  %1 = and i6 %0, 15 
  %2 = trunc i6 %1 to i4  
  ret i4 %2 
}


define external fastcc  i6 @"multictr.card.rank<1>"(i6  %"#rec##0", i4  %"#field##0") alwaysinline   {
entry:
  %0 = and i6 %"#rec##0", -61 
  %1 = zext i4 %"#field##0" to i6  
  %2 = shl   i6 %1, 2 
  %3 = or i6 %0, %2 
  ret i6 %3 
}


define external fastcc  i2 @"multictr.card.suit<0>"(i6  %"#rec##0") alwaysinline   {
entry:
  %0 = and i6 %"#rec##0", 3 
  %1 = trunc i6 %0 to i2  
  ret i2 %1 
}


define external fastcc  i6 @"multictr.card.suit<1>"(i6  %"#rec##0", i2  %"#field##0") alwaysinline   {
entry:
  %0 = and i6 %"#rec##0", -4 
  %1 = zext i2 %"#field##0" to i6  
  %2 = or i6 %1, %0 
  ret i6 %2 
}


define external fastcc  i1 @"multictr.card.~=<0>"(i6  %"#left##0", i6  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i6 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.complicated
  representation  : address
  public submods  : 
  public resources: 
  public procs    : multictr.complicated.=<0>
                    multictr.complicated.autumn<0>
                    multictr.complicated.c01<0>
                    multictr.complicated.c01<1>
                    multictr.complicated.c02<0>
                    multictr.complicated.c02<1>
                    multictr.complicated.c03<0>
                    multictr.complicated.c03<1>
                    multictr.complicated.c04<0>
                    multictr.complicated.c04<1>
                    multictr.complicated.c05<0>
                    multictr.complicated.c05<1>
                    multictr.complicated.c06<0>
                    multictr.complicated.c06<1>
                    multictr.complicated.c07<0>
                    multictr.complicated.c07<1>
                    multictr.complicated.c08<0>
                    multictr.complicated.c08<1>
                    multictr.complicated.c09<0>
                    multictr.complicated.c09<1>
                    multictr.complicated.c10<0>
                    multictr.complicated.c10<1>
                    multictr.complicated.c11<0>
                    multictr.complicated.c11<1>
                    multictr.complicated.c12<0>
                    multictr.complicated.c12<1>
                    multictr.complicated.c13<0>
                    multictr.complicated.c13<1>
                    multictr.complicated.c14<0>
                    multictr.complicated.c14<1>
                    multictr.complicated.c15<0>
                    multictr.complicated.c15<1>
                    multictr.complicated.c16<0>
                    multictr.complicated.c16<1>
                    multictr.complicated.c17<0>
                    multictr.complicated.c17<1>
                    multictr.complicated.f01<0>
                    multictr.complicated.f01<1>
                    multictr.complicated.f02<0>
                    multictr.complicated.f02<1>
                    multictr.complicated.f03<0>
                    multictr.complicated.f03<1>
                    multictr.complicated.f04<0>
                    multictr.complicated.f04<1>
                    multictr.complicated.f05<0>
                    multictr.complicated.f05<1>
                    multictr.complicated.f06<0>
                    multictr.complicated.f06<1>
                    multictr.complicated.f07<0>
                    multictr.complicated.f07<1>
                    multictr.complicated.f08<0>
                    multictr.complicated.f08<1>
                    multictr.complicated.f09<0>
                    multictr.complicated.f09<1>
                    multictr.complicated.f10<0>
                    multictr.complicated.f10<1>
                    multictr.complicated.f11<0>
                    multictr.complicated.f11<1>
                    multictr.complicated.f12<0>
                    multictr.complicated.f12<1>
                    multictr.complicated.f13<0>
                    multictr.complicated.f13<1>
                    multictr.complicated.f14<0>
                    multictr.complicated.f14<1>
                    multictr.complicated.f15<0>
                    multictr.complicated.f15<1>
                    multictr.complicated.f16<0>
                    multictr.complicated.f16<1>
                    multictr.complicated.f17<0>
                    multictr.complicated.f17<1>
                    multictr.complicated.spring<0>
                    multictr.complicated.summer<0>
                    multictr.complicated.winter<0>
                    multictr.complicated.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public (1 calls)
0: multictr.complicated.=<0>
=(#left##0:multictr.complicated, #right##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#left##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:multictr.complicated, ~#right##0:multictr.complicated, ?#success##0:wybe.bool)

    1:
        foreign llvm and(#left##0:wybe.int, 7:wybe.int, ?tmp#55##0:wybe.int)
        foreign llvm icmp_eq(tmp#55##0:wybe.int, 7:wybe.int, ?tmp#84##0:wybe.bool)
        case ~tmp#55##0:wybe.int of
        0:
            foreign lpvm access(~#left##0:multictr.complicated, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#f01##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#258##0:wybe.bool)
            case ~tmp#258##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#259##0:wybe.int)
                foreign llvm icmp_eq(~tmp#259##0:wybe.int, 0:wybe.int, ?tmp#260##0:wybe.bool)
                case ~tmp#260##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#f01##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f01##0:wybe.int, ~#right#f01##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        1:
            foreign lpvm access(~#left##0:multictr.complicated, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#f02##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#252##0:wybe.bool)
            case ~tmp#252##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#253##0:wybe.int)
                foreign llvm icmp_eq(~tmp#253##0:wybe.int, 1:wybe.int, ?tmp#254##0:wybe.bool)
                case ~tmp#254##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#f02##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f02##0:wybe.int, ~#right#f02##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        2:
            foreign lpvm access(~#left##0:multictr.complicated, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#left#f03##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#246##0:wybe.bool)
            case ~tmp#246##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#247##0:wybe.int)
                foreign llvm icmp_eq(~tmp#247##0:wybe.int, 2:wybe.int, ?tmp#248##0:wybe.bool)
                case ~tmp#248##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#right#f03##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f03##0:wybe.int, ~#right#f03##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        3:
            foreign lpvm access(~#left##0:multictr.complicated, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?#left#f04##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#240##0:wybe.bool)
            case ~tmp#240##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#241##0:wybe.int)
                foreign llvm icmp_eq(~tmp#241##0:wybe.int, 3:wybe.int, ?tmp#242##0:wybe.bool)
                case ~tmp#242##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?#right#f04##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f04##0:wybe.int, ~#right#f04##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        4:
            foreign lpvm access(~#left##0:multictr.complicated, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?#left#f05##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#234##0:wybe.bool)
            case ~tmp#234##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#235##0:wybe.int)
                foreign llvm icmp_eq(~tmp#235##0:wybe.int, 4:wybe.int, ?tmp#236##0:wybe.bool)
                case ~tmp#236##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?#right#f05##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f05##0:wybe.int, ~#right#f05##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        5:
            foreign lpvm access(~#left##0:multictr.complicated, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?#left#f06##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#228##0:wybe.bool)
            case ~tmp#228##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#229##0:wybe.int)
                foreign llvm icmp_eq(~tmp#229##0:wybe.int, 5:wybe.int, ?tmp#230##0:wybe.bool)
                case ~tmp#230##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?#right#f06##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f06##0:wybe.int, ~#right#f06##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        6:
            foreign lpvm access(~#left##0:multictr.complicated, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?#left#f07##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#222##0:wybe.bool)
            case ~tmp#222##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#223##0:wybe.int)
                foreign llvm icmp_eq(~tmp#223##0:wybe.int, 6:wybe.int, ?tmp#224##0:wybe.bool)
                case ~tmp#224##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.complicated, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?#right#f07##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#f07##0:wybe.int, ~#right#f07##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        7:
            foreign lpvm access(#left##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#85##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#86##0:wybe.bool)
            case ~tmp#86##0:wybe.bool of
            0:
                foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#92##0:wybe.bool)
                case ~tmp#92##0:wybe.bool of
                0:
                    case ~tmp#84##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#98##0:wybe.bool)
                        case ~tmp#98##0:wybe.bool of
                        0:
                            foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#104##0:wybe.bool)
                            case ~tmp#104##0:wybe.bool of
                            0:
                                foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#110##0:wybe.bool)
                                case ~tmp#110##0:wybe.bool of
                                0:
                                    foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#116##0:wybe.bool)
                                    case ~tmp#116##0:wybe.bool of
                                    0:
                                        foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#122##0:wybe.bool)
                                        case ~tmp#122##0:wybe.bool of
                                        0:
                                            foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#128##0:wybe.bool)
                                            case ~tmp#128##0:wybe.bool of
                                            0:
                                                foreign llvm icmp_eq(tmp#85##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#134##0:wybe.bool)
                                                case ~tmp#134##0:wybe.bool of
                                                0:
                                                    foreign llvm icmp_eq(~tmp#85##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#140##0:wybe.bool)
                                                    case ~tmp#140##0:wybe.bool of
                                                    0:
                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                    1:
                                                        foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f17##0:wybe.int) @multictr:nn:nn
                                                        foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#142##0:wybe.bool)
                                                        case ~tmp#142##0:wybe.bool of
                                                        0:
                                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                        1:
                                                            foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#143##0:wybe.int)
                                                            foreign llvm icmp_eq(~tmp#143##0:wybe.int, 7:wybe.int, ?tmp#144##0:wybe.bool)
                                                            case ~tmp#144##0:wybe.bool of
                                                            0:
                                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                            1:
                                                                foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#145##0:16 bit unsigned) @multictr:nn:nn
                                                                foreign llvm icmp_eq(~tmp#145##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#146##0:wybe.bool)
                                                                case ~tmp#146##0:wybe.bool of
                                                                0:
                                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                                1:
                                                                    foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f17##0:wybe.int) @multictr:nn:nn
                                                                    foreign llvm icmp_eq(~#left#f17##0:wybe.int, ~#right#f17##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                                1:
                                                    foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f16##0:wybe.int) @multictr:nn:nn
                                                    foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#150##0:wybe.bool)
                                                    case ~tmp#150##0:wybe.bool of
                                                    0:
                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                    1:
                                                        foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#151##0:wybe.int)
                                                        foreign llvm icmp_eq(~tmp#151##0:wybe.int, 7:wybe.int, ?tmp#152##0:wybe.bool)
                                                        case ~tmp#152##0:wybe.bool of
                                                        0:
                                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                        1:
                                                            foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#153##0:16 bit unsigned) @multictr:nn:nn
                                                            foreign llvm icmp_eq(~tmp#153##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#154##0:wybe.bool)
                                                            case ~tmp#154##0:wybe.bool of
                                                            0:
                                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                            1:
                                                                foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f16##0:wybe.int) @multictr:nn:nn
                                                                foreign llvm icmp_eq(~#left#f16##0:wybe.int, ~#right#f16##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                            1:
                                                foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f15##0:wybe.int) @multictr:nn:nn
                                                foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#158##0:wybe.bool)
                                                case ~tmp#158##0:wybe.bool of
                                                0:
                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                1:
                                                    foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#159##0:wybe.int)
                                                    foreign llvm icmp_eq(~tmp#159##0:wybe.int, 7:wybe.int, ?tmp#160##0:wybe.bool)
                                                    case ~tmp#160##0:wybe.bool of
                                                    0:
                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                    1:
                                                        foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#161##0:16 bit unsigned) @multictr:nn:nn
                                                        foreign llvm icmp_eq(~tmp#161##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#162##0:wybe.bool)
                                                        case ~tmp#162##0:wybe.bool of
                                                        0:
                                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                        1:
                                                            foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f15##0:wybe.int) @multictr:nn:nn
                                                            foreign llvm icmp_eq(~#left#f15##0:wybe.int, ~#right#f15##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                        1:
                                            foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f14##0:wybe.int) @multictr:nn:nn
                                            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#166##0:wybe.bool)
                                            case ~tmp#166##0:wybe.bool of
                                            0:
                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                            1:
                                                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#167##0:wybe.int)
                                                foreign llvm icmp_eq(~tmp#167##0:wybe.int, 7:wybe.int, ?tmp#168##0:wybe.bool)
                                                case ~tmp#168##0:wybe.bool of
                                                0:
                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                1:
                                                    foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#169##0:16 bit unsigned) @multictr:nn:nn
                                                    foreign llvm icmp_eq(~tmp#169##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#170##0:wybe.bool)
                                                    case ~tmp#170##0:wybe.bool of
                                                    0:
                                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                    1:
                                                        foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f14##0:wybe.int) @multictr:nn:nn
                                                        foreign llvm icmp_eq(~#left#f14##0:wybe.int, ~#right#f14##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                    1:
                                        foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f13##0:wybe.int) @multictr:nn:nn
                                        foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#174##0:wybe.bool)
                                        case ~tmp#174##0:wybe.bool of
                                        0:
                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                        1:
                                            foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#175##0:wybe.int)
                                            foreign llvm icmp_eq(~tmp#175##0:wybe.int, 7:wybe.int, ?tmp#176##0:wybe.bool)
                                            case ~tmp#176##0:wybe.bool of
                                            0:
                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                            1:
                                                foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#177##0:16 bit unsigned) @multictr:nn:nn
                                                foreign llvm icmp_eq(~tmp#177##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#178##0:wybe.bool)
                                                case ~tmp#178##0:wybe.bool of
                                                0:
                                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                                1:
                                                    foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f13##0:wybe.int) @multictr:nn:nn
                                                    foreign llvm icmp_eq(~#left#f13##0:wybe.int, ~#right#f13##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                                1:
                                    foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f12##0:wybe.int) @multictr:nn:nn
                                    foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#182##0:wybe.bool)
                                    case ~tmp#182##0:wybe.bool of
                                    0:
                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                    1:
                                        foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#183##0:wybe.int)
                                        foreign llvm icmp_eq(~tmp#183##0:wybe.int, 7:wybe.int, ?tmp#184##0:wybe.bool)
                                        case ~tmp#184##0:wybe.bool of
                                        0:
                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                        1:
                                            foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#185##0:16 bit unsigned) @multictr:nn:nn
                                            foreign llvm icmp_eq(~tmp#185##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#186##0:wybe.bool)
                                            case ~tmp#186##0:wybe.bool of
                                            0:
                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                            1:
                                                foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f12##0:wybe.int) @multictr:nn:nn
                                                foreign llvm icmp_eq(~#left#f12##0:wybe.int, ~#right#f12##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                            1:
                                foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f11##0:wybe.int) @multictr:nn:nn
                                foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#190##0:wybe.bool)
                                case ~tmp#190##0:wybe.bool of
                                0:
                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                1:
                                    foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#191##0:wybe.int)
                                    foreign llvm icmp_eq(~tmp#191##0:wybe.int, 7:wybe.int, ?tmp#192##0:wybe.bool)
                                    case ~tmp#192##0:wybe.bool of
                                    0:
                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                    1:
                                        foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#193##0:16 bit unsigned) @multictr:nn:nn
                                        foreign llvm icmp_eq(~tmp#193##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#194##0:wybe.bool)
                                        case ~tmp#194##0:wybe.bool of
                                        0:
                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                        1:
                                            foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f11##0:wybe.int) @multictr:nn:nn
                                            foreign llvm icmp_eq(~#left#f11##0:wybe.int, ~#right#f11##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





                        1:
                            foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f10##0:wybe.int) @multictr:nn:nn
                            foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#198##0:wybe.bool)
                            case ~tmp#198##0:wybe.bool of
                            0:
                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                            1:
                                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#199##0:wybe.int)
                                foreign llvm icmp_eq(~tmp#199##0:wybe.int, 7:wybe.int, ?tmp#200##0:wybe.bool)
                                case ~tmp#200##0:wybe.bool of
                                0:
                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                1:
                                    foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#201##0:16 bit unsigned) @multictr:nn:nn
                                    foreign llvm icmp_eq(~tmp#201##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#202##0:wybe.bool)
                                    case ~tmp#202##0:wybe.bool of
                                    0:
                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                    1:
                                        foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f10##0:wybe.int) @multictr:nn:nn
                                        foreign llvm icmp_eq(~#left#f10##0:wybe.int, ~#right#f10##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn






                1:
                    foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f09##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#206##0:wybe.bool)
                    case ~tmp#206##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#207##0:wybe.int)
                        foreign llvm icmp_eq(~tmp#207##0:wybe.int, 7:wybe.int, ?tmp#208##0:wybe.bool)
                        case ~tmp#208##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                        1:
                            foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#209##0:16 bit unsigned) @multictr:nn:nn
                            foreign llvm icmp_eq(~tmp#209##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#210##0:wybe.bool)
                            case ~tmp#210##0:wybe.bool of
                            0:
                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                            1:
                                foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f09##0:wybe.int) @multictr:nn:nn
                                foreign llvm icmp_eq(~#left#f09##0:wybe.int, ~#right#f09##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





            1:
                foreign lpvm access(~#left##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#left#f08##0:wybe.int) @multictr:nn:nn
                foreign llvm icmp_uge(#right##0:wybe.int, 4:wybe.int, ?tmp#214##0:wybe.bool)
                case ~tmp#214##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#215##0:wybe.int)
                    foreign llvm icmp_eq(~tmp#215##0:wybe.int, 7:wybe.int, ?tmp#216##0:wybe.bool)
                    case ~tmp#216##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign lpvm access(#right##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?tmp#217##0:16 bit unsigned) @multictr:nn:nn
                        foreign llvm icmp_eq(~tmp#217##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#218##0:wybe.bool)
                        case ~tmp#218##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                        1:
                            foreign lpvm access(~#right##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#right#f08##0:wybe.int) @multictr:nn:nn
                            foreign llvm icmp_eq(~#left#f08##0:wybe.int, ~#right#f08##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn








proc autumn > public {inline} (0 calls)
0: multictr.complicated.autumn<0>
autumn(?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(3:multictr.complicated, ?#result##0:multictr.complicated)


proc c01 > public {inline} (0 calls)
0: multictr.complicated.c01<0>
c01(f01##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#result##0:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f01##0:wybe.int) @multictr:nn:nn
proc c01 > public {inline} (40 calls)
1: multictr.complicated.c01<1>
c01(?f01##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f01##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f01##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?f01##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c02 > public {inline} (0 calls)
0: multictr.complicated.c02<0>
c02(f02##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f02##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 1:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c02 > public {inline} (35 calls)
1: multictr.complicated.c02<1>
c02(?f02##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f02##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f02##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?f02##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c03 > public {inline} (0 calls)
0: multictr.complicated.c03<0>
c03(f03##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f03##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 2:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c03 > public {inline} (33 calls)
1: multictr.complicated.c03<1>
c03(?f03##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f03##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 2:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f03##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?f03##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c04 > public {inline} (0 calls)
0: multictr.complicated.c04<0>
c04(f04##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f04##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 3:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c04 > public {inline} (31 calls)
1: multictr.complicated.c04<1>
c04(?f04##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f04##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f04##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?f04##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c05 > public {inline} (0 calls)
0: multictr.complicated.c05<0>
c05(f05##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f05##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 4:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c05 > public {inline} (29 calls)
1: multictr.complicated.c05<1>
c05(?f05##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f05##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 4:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f05##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?f05##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c06 > public {inline} (0 calls)
0: multictr.complicated.c06<0>
c06(f06##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f06##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 5:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c06 > public {inline} (27 calls)
1: multictr.complicated.c06<1>
c06(?f06##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f06##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 5:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f06##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?f06##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c07 > public {inline} (0 calls)
0: multictr.complicated.c07<0>
c07(f07##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f07##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.complicated, 6:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c07 > public {inline} (25 calls)
1: multictr.complicated.c07<1>
c07(?f07##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f07##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 6:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f07##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.complicated, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?f07##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc c08 > public {inline} (0 calls)
0: multictr.complicated.c08<0>
c08(f08##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 7:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f08##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c08 > public {inline} (23 calls)
1: multictr.complicated.c08<1>
c08(?f08##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f08##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f08##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f08##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f08##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c09 > public {inline} (0 calls)
0: multictr.complicated.c09<0>
c09(f09##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 8:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f09##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c09 > public {inline} (21 calls)
1: multictr.complicated.c09<1>
c09(?f09##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f09##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f09##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f09##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f09##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c10 > public {inline} (0 calls)
0: multictr.complicated.c10<0>
c10(f10##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 9:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f10##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c10 > public {inline} (19 calls)
1: multictr.complicated.c10<1>
c10(?f10##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f10##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f10##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f10##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f10##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c11 > public {inline} (0 calls)
0: multictr.complicated.c11<0>
c11(f11##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 10:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f11##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c11 > public {inline} (17 calls)
1: multictr.complicated.c11<1>
c11(?f11##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f11##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f11##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f11##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f11##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c12 > public {inline} (0 calls)
0: multictr.complicated.c12<0>
c12(f12##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 11:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f12##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c12 > public {inline} (15 calls)
1: multictr.complicated.c12<1>
c12(?f12##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f12##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f12##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f12##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f12##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c13 > public {inline} (0 calls)
0: multictr.complicated.c13<0>
c13(f13##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 12:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f13##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c13 > public {inline} (13 calls)
1: multictr.complicated.c13<1>
c13(?f13##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f13##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f13##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f13##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f13##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c14 > public {inline} (0 calls)
0: multictr.complicated.c14<0>
c14(f14##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 13:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f14##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c14 > public {inline} (11 calls)
1: multictr.complicated.c14<1>
c14(?f14##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f14##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f14##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f14##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f14##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c15 > public {inline} (0 calls)
0: multictr.complicated.c15<0>
c15(f15##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 14:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f15##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c15 > public {inline} (9 calls)
1: multictr.complicated.c15<1>
c15(?f15##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f15##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f15##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f15##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f15##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c16 > public {inline} (0 calls)
0: multictr.complicated.c16<0>
c16(f16##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 15:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f16##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c16 > public {inline} (7 calls)
1: multictr.complicated.c16<1>
c16(?f16##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f16##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f16##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f16##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f16##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc c17 > public {inline} (0 calls)
0: multictr.complicated.c17<0>
c17(f17##0:wybe.int, ?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.complicated) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 16:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.complicated, ?#rec##2:multictr.complicated, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~f17##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.complicated, 7:wybe.int, ?#result##0:multictr.complicated) @multictr:nn:nn
proc c17 > public {inline} (5 calls)
1: multictr.complicated.c17<1>
c17(?f17##0:wybe.int, #result##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#result##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f17##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?f17##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?f17##0:wybe.int)

            1:
                foreign lpvm access(~#result##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?f17##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f01 > public {inline} (0 calls)
0: multictr.complicated.f01<0>
f01(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f01 > public {inline} (0 calls)
1: multictr.complicated.f01<1>
f01(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f02 > public {inline} (0 calls)
0: multictr.complicated.f02<0>
f02(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f02 > public {inline} (0 calls)
1: multictr.complicated.f02<1>
f02(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -1:wybe.int, 0:wybe.int, 8:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f03 > public {inline} (0 calls)
0: multictr.complicated.f03<0>
f03(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 2:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f03 > public {inline} (0 calls)
1: multictr.complicated.f03<1>
f03(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 2:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -2:wybe.int, 0:wybe.int, 8:wybe.int, 2:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f04 > public {inline} (0 calls)
0: multictr.complicated.f04<0>
f04(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f04 > public {inline} (0 calls)
1: multictr.complicated.f04<1>
f04(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -3:wybe.int, 0:wybe.int, 8:wybe.int, 3:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f05 > public {inline} (0 calls)
0: multictr.complicated.f05<0>
f05(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 4:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f05 > public {inline} (0 calls)
1: multictr.complicated.f05<1>
f05(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 4:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -4:wybe.int, 0:wybe.int, 8:wybe.int, 4:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f06 > public {inline} (0 calls)
0: multictr.complicated.f06<0>
f06(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 5:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f06 > public {inline} (0 calls)
1: multictr.complicated.f06<1>
f06(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 5:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -5:wybe.int, 0:wybe.int, 8:wybe.int, 5:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f07 > public {inline} (0 calls)
0: multictr.complicated.f07<0>
f07(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 6:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.complicated, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc f07 > public {inline} (0 calls)
1: multictr.complicated.f07<1>
f07(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 6:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, -6:wybe.int, 0:wybe.int, 8:wybe.int, 6:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc f08 > public {inline} (0 calls)
0: multictr.complicated.f08<0>
f08(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f08 > public {inline} (0 calls)
1: multictr.complicated.f08<1>
f08(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 7:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f09 > public {inline} (0 calls)
0: multictr.complicated.f09<0>
f09(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f09 > public {inline} (0 calls)
1: multictr.complicated.f09<1>
f09(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 8:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f10 > public {inline} (0 calls)
0: multictr.complicated.f10<0>
f10(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f10 > public {inline} (0 calls)
1: multictr.complicated.f10<1>
f10(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 9:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f11 > public {inline} (0 calls)
0: multictr.complicated.f11<0>
f11(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f11 > public {inline} (0 calls)
1: multictr.complicated.f11<1>
f11(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 10:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f12 > public {inline} (0 calls)
0: multictr.complicated.f12<0>
f12(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f12 > public {inline} (0 calls)
1: multictr.complicated.f12<1>
f12(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 11:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f13 > public {inline} (0 calls)
0: multictr.complicated.f13<0>
f13(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f13 > public {inline} (0 calls)
1: multictr.complicated.f13<1>
f13(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 12:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f14 > public {inline} (0 calls)
0: multictr.complicated.f14<0>
f14(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f14 > public {inline} (0 calls)
1: multictr.complicated.f14<1>
f14(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 13:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f15 > public {inline} (0 calls)
0: multictr.complicated.f15<0>
f15(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f15 > public {inline} (0 calls)
1: multictr.complicated.f15<1>
f15(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 14:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f16 > public {inline} (0 calls)
0: multictr.complicated.f16<0>
f16(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f16 > public {inline} (0 calls)
1: multictr.complicated.f16<1>
f16(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 15:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc f17 > public {inline} (0 calls)
0: multictr.complicated.f17<0>
f17(#rec##0:multictr.complicated, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

            1:
                foreign lpvm access(~#rec##0:multictr.complicated, 1:wybe.int, 16:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc f17 > public {inline} (0 calls)
1: multictr.complicated.f17<1>
f17(#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_uge(#rec##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

    1:
        foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

        1:
            foreign lpvm access(#rec##0:multictr.complicated, -7:wybe.int, 16:wybe.int, 7:wybe.int, ?#tag##0:16 bit unsigned) @multictr:nn:nn
            foreign llvm icmp_eq(~#tag##0:16 bit unsigned, 16:16 bit unsigned, ?tmp#3##0:wybe.bool)
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated)

            1:
                foreign lpvm {noalias} mutate(~#rec##0:multictr.complicated, ?#rec##1:multictr.complicated, 1:wybe.int, 0:wybe.int, 16:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)





proc spring > public {inline} (0 calls)
0: multictr.complicated.spring<0>
spring(?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:multictr.complicated, ?#result##0:multictr.complicated)


proc summer > public {inline} (0 calls)
0: multictr.complicated.summer<0>
summer(?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(2:multictr.complicated, ?#result##0:multictr.complicated)


proc winter > public {inline} (0 calls)
0: multictr.complicated.winter<0>
winter(?#result##0:multictr.complicated)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.complicated, ?#result##0:multictr.complicated)


proc ~= > public {inline} (0 calls)
0: multictr.complicated.~=<0>
~=(#left##0:multictr.complicated, #right##0:multictr.complicated, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multictr.complicated.=<0>(~#left##0:multictr.complicated, ~#right##0:multictr.complicated, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.complicated'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.complicated.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp uge i64 %"#left##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#left##0", 7 
  %2 = icmp eq i64 %1, 7 
  switch i64 %1, label %switch.8.7 [i64 0, label %switch.8.0 i64 1, label %switch.8.1 i64 2, label %switch.8.2 i64 3, label %switch.8.3 i64 4, label %switch.8.4 i64 5, label %switch.8.5 i64 6, label %switch.8.6 i64 7, label %switch.8.7] 
if.else:
  %224 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %224 
switch.8.0:
  %3 = inttoptr i64 %"#left##0" to i64* 
  %4 = load  i64, i64* %3 
  %5 = icmp uge i64 %"#right##0", 4 
  br i1 %5, label %if.then1, label %if.else1 
switch.8.1:
  %11 = add   i64 %"#left##0", -1 
  %12 = inttoptr i64 %11 to i64* 
  %13 = load  i64, i64* %12 
  %14 = icmp uge i64 %"#right##0", 4 
  br i1 %14, label %if.then3, label %if.else3 
switch.8.2:
  %21 = add   i64 %"#left##0", -2 
  %22 = inttoptr i64 %21 to i64* 
  %23 = load  i64, i64* %22 
  %24 = icmp uge i64 %"#right##0", 4 
  br i1 %24, label %if.then5, label %if.else5 
switch.8.3:
  %31 = add   i64 %"#left##0", -3 
  %32 = inttoptr i64 %31 to i64* 
  %33 = load  i64, i64* %32 
  %34 = icmp uge i64 %"#right##0", 4 
  br i1 %34, label %if.then7, label %if.else7 
switch.8.4:
  %41 = add   i64 %"#left##0", -4 
  %42 = inttoptr i64 %41 to i64* 
  %43 = load  i64, i64* %42 
  %44 = icmp uge i64 %"#right##0", 4 
  br i1 %44, label %if.then9, label %if.else9 
switch.8.5:
  %51 = add   i64 %"#left##0", -5 
  %52 = inttoptr i64 %51 to i64* 
  %53 = load  i64, i64* %52 
  %54 = icmp uge i64 %"#right##0", 4 
  br i1 %54, label %if.then11, label %if.else11 
switch.8.6:
  %61 = add   i64 %"#left##0", -6 
  %62 = inttoptr i64 %61 to i64* 
  %63 = load  i64, i64* %62 
  %64 = icmp uge i64 %"#right##0", 4 
  br i1 %64, label %if.then13, label %if.else13 
switch.8.7:
  %71 = add   i64 %"#left##0", -7 
  %72 = inttoptr i64 %71 to i16* 
  %73 = load  i16, i16* %72 
  %74 = icmp eq i16 %73, 7 
  br i1 %74, label %if.then15, label %if.else15 
if.then1:
  %6 = and i64 %"#right##0", 7 
  %7 = icmp eq i64 %6, 0 
  br i1 %7, label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = load  i64, i64* %8 
  %10 = icmp eq i64 %4, %9 
  ret i1 %10 
if.else2:
  ret i1 0 
if.then3:
  %15 = and i64 %"#right##0", 7 
  %16 = icmp eq i64 %15, 1 
  br i1 %16, label %if.then4, label %if.else4 
if.else3:
  ret i1 0 
if.then4:
  %17 = add   i64 %"#right##0", -1 
  %18 = inttoptr i64 %17 to i64* 
  %19 = load  i64, i64* %18 
  %20 = icmp eq i64 %13, %19 
  ret i1 %20 
if.else4:
  ret i1 0 
if.then5:
  %25 = and i64 %"#right##0", 7 
  %26 = icmp eq i64 %25, 2 
  br i1 %26, label %if.then6, label %if.else6 
if.else5:
  ret i1 0 
if.then6:
  %27 = add   i64 %"#right##0", -2 
  %28 = inttoptr i64 %27 to i64* 
  %29 = load  i64, i64* %28 
  %30 = icmp eq i64 %23, %29 
  ret i1 %30 
if.else6:
  ret i1 0 
if.then7:
  %35 = and i64 %"#right##0", 7 
  %36 = icmp eq i64 %35, 3 
  br i1 %36, label %if.then8, label %if.else8 
if.else7:
  ret i1 0 
if.then8:
  %37 = add   i64 %"#right##0", -3 
  %38 = inttoptr i64 %37 to i64* 
  %39 = load  i64, i64* %38 
  %40 = icmp eq i64 %33, %39 
  ret i1 %40 
if.else8:
  ret i1 0 
if.then9:
  %45 = and i64 %"#right##0", 7 
  %46 = icmp eq i64 %45, 4 
  br i1 %46, label %if.then10, label %if.else10 
if.else9:
  ret i1 0 
if.then10:
  %47 = add   i64 %"#right##0", -4 
  %48 = inttoptr i64 %47 to i64* 
  %49 = load  i64, i64* %48 
  %50 = icmp eq i64 %43, %49 
  ret i1 %50 
if.else10:
  ret i1 0 
if.then11:
  %55 = and i64 %"#right##0", 7 
  %56 = icmp eq i64 %55, 5 
  br i1 %56, label %if.then12, label %if.else12 
if.else11:
  ret i1 0 
if.then12:
  %57 = add   i64 %"#right##0", -5 
  %58 = inttoptr i64 %57 to i64* 
  %59 = load  i64, i64* %58 
  %60 = icmp eq i64 %53, %59 
  ret i1 %60 
if.else12:
  ret i1 0 
if.then13:
  %65 = and i64 %"#right##0", 7 
  %66 = icmp eq i64 %65, 6 
  br i1 %66, label %if.then14, label %if.else14 
if.else13:
  ret i1 0 
if.then14:
  %67 = add   i64 %"#right##0", -6 
  %68 = inttoptr i64 %67 to i64* 
  %69 = load  i64, i64* %68 
  %70 = icmp eq i64 %63, %69 
  ret i1 %70 
if.else14:
  ret i1 0 
if.then15:
  %75 = add   i64 %"#left##0", 1 
  %76 = inttoptr i64 %75 to i64* 
  %77 = load  i64, i64* %76 
  %78 = icmp uge i64 %"#right##0", 4 
  br i1 %78, label %if.then16, label %if.else16 
if.else15:
  %89 = icmp eq i16 %73, 8 
  br i1 %89, label %if.then19, label %if.else19 
if.then16:
  %79 = and i64 %"#right##0", 7 
  %80 = icmp eq i64 %79, 7 
  br i1 %80, label %if.then17, label %if.else17 
if.else16:
  ret i1 0 
if.then17:
  %81 = add   i64 %"#right##0", -7 
  %82 = inttoptr i64 %81 to i16* 
  %83 = load  i16, i16* %82 
  %84 = icmp eq i16 %83, 7 
  br i1 %84, label %if.then18, label %if.else18 
if.else17:
  ret i1 0 
if.then18:
  %85 = add   i64 %"#right##0", 1 
  %86 = inttoptr i64 %85 to i64* 
  %87 = load  i64, i64* %86 
  %88 = icmp eq i64 %77, %87 
  ret i1 %88 
if.else18:
  ret i1 0 
if.then19:
  %90 = add   i64 %"#left##0", 1 
  %91 = inttoptr i64 %90 to i64* 
  %92 = load  i64, i64* %91 
  %93 = icmp uge i64 %"#right##0", 4 
  br i1 %93, label %if.then20, label %if.else20 
if.else19:
  br i1 %2, label %if.then23, label %if.else23 
if.then20:
  %94 = and i64 %"#right##0", 7 
  %95 = icmp eq i64 %94, 7 
  br i1 %95, label %if.then21, label %if.else21 
if.else20:
  ret i1 0 
if.then21:
  %96 = add   i64 %"#right##0", -7 
  %97 = inttoptr i64 %96 to i16* 
  %98 = load  i16, i16* %97 
  %99 = icmp eq i16 %98, 8 
  br i1 %99, label %if.then22, label %if.else22 
if.else21:
  ret i1 0 
if.then22:
  %100 = add   i64 %"#right##0", 1 
  %101 = inttoptr i64 %100 to i64* 
  %102 = load  i64, i64* %101 
  %103 = icmp eq i64 %92, %102 
  ret i1 %103 
if.else22:
  ret i1 0 
if.then23:
  %104 = icmp eq i16 %73, 9 
  br i1 %104, label %if.then24, label %if.else24 
if.else23:
  ret i1 0 
if.then24:
  %105 = add   i64 %"#left##0", 1 
  %106 = inttoptr i64 %105 to i64* 
  %107 = load  i64, i64* %106 
  %108 = icmp uge i64 %"#right##0", 4 
  br i1 %108, label %if.then25, label %if.else25 
if.else24:
  %119 = icmp eq i16 %73, 10 
  br i1 %119, label %if.then28, label %if.else28 
if.then25:
  %109 = and i64 %"#right##0", 7 
  %110 = icmp eq i64 %109, 7 
  br i1 %110, label %if.then26, label %if.else26 
if.else25:
  ret i1 0 
if.then26:
  %111 = add   i64 %"#right##0", -7 
  %112 = inttoptr i64 %111 to i16* 
  %113 = load  i16, i16* %112 
  %114 = icmp eq i16 %113, 9 
  br i1 %114, label %if.then27, label %if.else27 
if.else26:
  ret i1 0 
if.then27:
  %115 = add   i64 %"#right##0", 1 
  %116 = inttoptr i64 %115 to i64* 
  %117 = load  i64, i64* %116 
  %118 = icmp eq i64 %107, %117 
  ret i1 %118 
if.else27:
  ret i1 0 
if.then28:
  %120 = add   i64 %"#left##0", 1 
  %121 = inttoptr i64 %120 to i64* 
  %122 = load  i64, i64* %121 
  %123 = icmp uge i64 %"#right##0", 4 
  br i1 %123, label %if.then29, label %if.else29 
if.else28:
  %134 = icmp eq i16 %73, 11 
  br i1 %134, label %if.then32, label %if.else32 
if.then29:
  %124 = and i64 %"#right##0", 7 
  %125 = icmp eq i64 %124, 7 
  br i1 %125, label %if.then30, label %if.else30 
if.else29:
  ret i1 0 
if.then30:
  %126 = add   i64 %"#right##0", -7 
  %127 = inttoptr i64 %126 to i16* 
  %128 = load  i16, i16* %127 
  %129 = icmp eq i16 %128, 10 
  br i1 %129, label %if.then31, label %if.else31 
if.else30:
  ret i1 0 
if.then31:
  %130 = add   i64 %"#right##0", 1 
  %131 = inttoptr i64 %130 to i64* 
  %132 = load  i64, i64* %131 
  %133 = icmp eq i64 %122, %132 
  ret i1 %133 
if.else31:
  ret i1 0 
if.then32:
  %135 = add   i64 %"#left##0", 1 
  %136 = inttoptr i64 %135 to i64* 
  %137 = load  i64, i64* %136 
  %138 = icmp uge i64 %"#right##0", 4 
  br i1 %138, label %if.then33, label %if.else33 
if.else32:
  %149 = icmp eq i16 %73, 12 
  br i1 %149, label %if.then36, label %if.else36 
if.then33:
  %139 = and i64 %"#right##0", 7 
  %140 = icmp eq i64 %139, 7 
  br i1 %140, label %if.then34, label %if.else34 
if.else33:
  ret i1 0 
if.then34:
  %141 = add   i64 %"#right##0", -7 
  %142 = inttoptr i64 %141 to i16* 
  %143 = load  i16, i16* %142 
  %144 = icmp eq i16 %143, 11 
  br i1 %144, label %if.then35, label %if.else35 
if.else34:
  ret i1 0 
if.then35:
  %145 = add   i64 %"#right##0", 1 
  %146 = inttoptr i64 %145 to i64* 
  %147 = load  i64, i64* %146 
  %148 = icmp eq i64 %137, %147 
  ret i1 %148 
if.else35:
  ret i1 0 
if.then36:
  %150 = add   i64 %"#left##0", 1 
  %151 = inttoptr i64 %150 to i64* 
  %152 = load  i64, i64* %151 
  %153 = icmp uge i64 %"#right##0", 4 
  br i1 %153, label %if.then37, label %if.else37 
if.else36:
  %164 = icmp eq i16 %73, 13 
  br i1 %164, label %if.then40, label %if.else40 
if.then37:
  %154 = and i64 %"#right##0", 7 
  %155 = icmp eq i64 %154, 7 
  br i1 %155, label %if.then38, label %if.else38 
if.else37:
  ret i1 0 
if.then38:
  %156 = add   i64 %"#right##0", -7 
  %157 = inttoptr i64 %156 to i16* 
  %158 = load  i16, i16* %157 
  %159 = icmp eq i16 %158, 12 
  br i1 %159, label %if.then39, label %if.else39 
if.else38:
  ret i1 0 
if.then39:
  %160 = add   i64 %"#right##0", 1 
  %161 = inttoptr i64 %160 to i64* 
  %162 = load  i64, i64* %161 
  %163 = icmp eq i64 %152, %162 
  ret i1 %163 
if.else39:
  ret i1 0 
if.then40:
  %165 = add   i64 %"#left##0", 1 
  %166 = inttoptr i64 %165 to i64* 
  %167 = load  i64, i64* %166 
  %168 = icmp uge i64 %"#right##0", 4 
  br i1 %168, label %if.then41, label %if.else41 
if.else40:
  %179 = icmp eq i16 %73, 14 
  br i1 %179, label %if.then44, label %if.else44 
if.then41:
  %169 = and i64 %"#right##0", 7 
  %170 = icmp eq i64 %169, 7 
  br i1 %170, label %if.then42, label %if.else42 
if.else41:
  ret i1 0 
if.then42:
  %171 = add   i64 %"#right##0", -7 
  %172 = inttoptr i64 %171 to i16* 
  %173 = load  i16, i16* %172 
  %174 = icmp eq i16 %173, 13 
  br i1 %174, label %if.then43, label %if.else43 
if.else42:
  ret i1 0 
if.then43:
  %175 = add   i64 %"#right##0", 1 
  %176 = inttoptr i64 %175 to i64* 
  %177 = load  i64, i64* %176 
  %178 = icmp eq i64 %167, %177 
  ret i1 %178 
if.else43:
  ret i1 0 
if.then44:
  %180 = add   i64 %"#left##0", 1 
  %181 = inttoptr i64 %180 to i64* 
  %182 = load  i64, i64* %181 
  %183 = icmp uge i64 %"#right##0", 4 
  br i1 %183, label %if.then45, label %if.else45 
if.else44:
  %194 = icmp eq i16 %73, 15 
  br i1 %194, label %if.then48, label %if.else48 
if.then45:
  %184 = and i64 %"#right##0", 7 
  %185 = icmp eq i64 %184, 7 
  br i1 %185, label %if.then46, label %if.else46 
if.else45:
  ret i1 0 
if.then46:
  %186 = add   i64 %"#right##0", -7 
  %187 = inttoptr i64 %186 to i16* 
  %188 = load  i16, i16* %187 
  %189 = icmp eq i16 %188, 14 
  br i1 %189, label %if.then47, label %if.else47 
if.else46:
  ret i1 0 
if.then47:
  %190 = add   i64 %"#right##0", 1 
  %191 = inttoptr i64 %190 to i64* 
  %192 = load  i64, i64* %191 
  %193 = icmp eq i64 %182, %192 
  ret i1 %193 
if.else47:
  ret i1 0 
if.then48:
  %195 = add   i64 %"#left##0", 1 
  %196 = inttoptr i64 %195 to i64* 
  %197 = load  i64, i64* %196 
  %198 = icmp uge i64 %"#right##0", 4 
  br i1 %198, label %if.then49, label %if.else49 
if.else48:
  %209 = icmp eq i16 %73, 16 
  br i1 %209, label %if.then52, label %if.else52 
if.then49:
  %199 = and i64 %"#right##0", 7 
  %200 = icmp eq i64 %199, 7 
  br i1 %200, label %if.then50, label %if.else50 
if.else49:
  ret i1 0 
if.then50:
  %201 = add   i64 %"#right##0", -7 
  %202 = inttoptr i64 %201 to i16* 
  %203 = load  i16, i16* %202 
  %204 = icmp eq i16 %203, 15 
  br i1 %204, label %if.then51, label %if.else51 
if.else50:
  ret i1 0 
if.then51:
  %205 = add   i64 %"#right##0", 1 
  %206 = inttoptr i64 %205 to i64* 
  %207 = load  i64, i64* %206 
  %208 = icmp eq i64 %197, %207 
  ret i1 %208 
if.else51:
  ret i1 0 
if.then52:
  %210 = add   i64 %"#left##0", 1 
  %211 = inttoptr i64 %210 to i64* 
  %212 = load  i64, i64* %211 
  %213 = icmp uge i64 %"#right##0", 4 
  br i1 %213, label %if.then53, label %if.else53 
if.else52:
  ret i1 0 
if.then53:
  %214 = and i64 %"#right##0", 7 
  %215 = icmp eq i64 %214, 7 
  br i1 %215, label %if.then54, label %if.else54 
if.else53:
  ret i1 0 
if.then54:
  %216 = add   i64 %"#right##0", -7 
  %217 = inttoptr i64 %216 to i16* 
  %218 = load  i16, i16* %217 
  %219 = icmp eq i16 %218, 16 
  br i1 %219, label %if.then55, label %if.else55 
if.else54:
  ret i1 0 
if.then55:
  %220 = add   i64 %"#right##0", 1 
  %221 = inttoptr i64 %220 to i64* 
  %222 = load  i64, i64* %221 
  %223 = icmp eq i64 %212, %222 
  ret i1 %223 
if.else55:
  ret i1 0 
}


define external fastcc  i64 @"multictr.complicated.autumn<0>"() alwaysinline   {
entry:
  ret i64 3 
}


define external fastcc  i64 @"multictr.complicated.c01<0>"(i64  %"f01##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"f01##0", i64* %3 
  ret i64 %2 
}


define external fastcc  {i64, i1} @"multictr.complicated.c01<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
if.then1:
  %3 = inttoptr i64 %"#result##0" to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else1:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  i64 @"multictr.complicated.c02<0>"(i64  %"f02##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"f02##0", i64* %3 
  %4 = or i64 %2, 1 
  ret i64 %4 
}


define external fastcc  {i64, i1} @"multictr.complicated.c02<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#result##0", -1 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  i64 @"multictr.complicated.c03<0>"(i64  %"f03##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"f03##0", i64* %3 
  %4 = or i64 %2, 2 
  ret i64 %4 
}


define external fastcc  {i64, i1} @"multictr.complicated.c03<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 2 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#result##0", -2 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  i64 @"multictr.complicated.c04<0>"(i64  %"f04##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"f04##0", i64* %3 
  %4 = or i64 %2, 3 
  ret i64 %4 
}


define external fastcc  {i64, i1} @"multictr.complicated.c04<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 3 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#result##0", -3 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  i64 @"multictr.complicated.c05<0>"(i64  %"f05##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"f05##0", i64* %3 
  %4 = or i64 %2, 4 
  ret i64 %4 
}


define external fastcc  {i64, i1} @"multictr.complicated.c05<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 4 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#result##0", -4 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  i64 @"multictr.complicated.c06<0>"(i64  %"f06##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"f06##0", i64* %3 
  %4 = or i64 %2, 5 
  ret i64 %4 
}


define external fastcc  {i64, i1} @"multictr.complicated.c06<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 5 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#result##0", -5 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  i64 @"multictr.complicated.c07<0>"(i64  %"f07##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"f07##0", i64* %3 
  %4 = or i64 %2, 6 
  ret i64 %4 
}


define external fastcc  {i64, i1} @"multictr.complicated.c07<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 6 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#result##0", -6 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  i64 @"multictr.complicated.c08<0>"(i64  %"f08##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 7, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"f08##0", i64* %5 
  %6 = or i64 %2, 7 
  ret i64 %6 
}


define external fastcc  {i64, i1} @"multictr.complicated.c08<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 7 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#result##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i64 @"multictr.complicated.c09<0>"(i64  %"f09##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 8, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"f09##0", i64* %5 
  %6 = or i64 %2, 7 
  ret i64 %6 
}


define external fastcc  {i64, i1} @"multictr.complicated.c09<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 8 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#result##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i64 @"multictr.complicated.c10<0>"(i64  %"f10##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 9, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"f10##0", i64* %5 
  %6 = or i64 %2, 7 
  ret i64 %6 
}


define external fastcc  {i64, i1} @"multictr.complicated.c10<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 9 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#result##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i64 @"multictr.complicated.c11<0>"(i64  %"f11##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 10, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"f11##0", i64* %5 
  %6 = or i64 %2, 7 
  ret i64 %6 
}


define external fastcc  {i64, i1} @"multictr.complicated.c11<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 10 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#result##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i64 @"multictr.complicated.c12<0>"(i64  %"f12##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 11, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"f12##0", i64* %5 
  %6 = or i64 %2, 7 
  ret i64 %6 
}


define external fastcc  {i64, i1} @"multictr.complicated.c12<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 11 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#result##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i64 @"multictr.complicated.c13<0>"(i64  %"f13##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 12, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"f13##0", i64* %5 
  %6 = or i64 %2, 7 
  ret i64 %6 
}


define external fastcc  {i64, i1} @"multictr.complicated.c13<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 12 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#result##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i64 @"multictr.complicated.c14<0>"(i64  %"f14##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 13, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"f14##0", i64* %5 
  %6 = or i64 %2, 7 
  ret i64 %6 
}


define external fastcc  {i64, i1} @"multictr.complicated.c14<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 13 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#result##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i64 @"multictr.complicated.c15<0>"(i64  %"f15##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 14, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"f15##0", i64* %5 
  %6 = or i64 %2, 7 
  ret i64 %6 
}


define external fastcc  {i64, i1} @"multictr.complicated.c15<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 14 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#result##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i64 @"multictr.complicated.c16<0>"(i64  %"f16##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 15, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"f16##0", i64* %5 
  %6 = or i64 %2, 7 
  ret i64 %6 
}


define external fastcc  {i64, i1} @"multictr.complicated.c16<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 15 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#result##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i64 @"multictr.complicated.c17<0>"(i64  %"f17##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 16, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"f17##0", i64* %5 
  %6 = or i64 %2, 7 
  ret i64 %6 
}


define external fastcc  {i64, i1} @"multictr.complicated.c17<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#result##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#result##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 16 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#result##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"multictr.complicated.f01<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
if.then1:
  %3 = inttoptr i64 %"#rec##0" to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else1:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"multictr.complicated.f01<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %14 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = inttoptr i64 %5 to i8* 
  %7 = inttoptr i64 %"#rec##0" to i8* 
  %8 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %6, i8*  %7, i32  %8, i1  0)  
  %9 = inttoptr i64 %5 to i64* 
  store  i64 %"#field##0", i64* %9 
  %10 = insertvalue {i64, i1} undef, i64 %5, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else1:
  %12 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"multictr.complicated.f02<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#rec##0", -1 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"multictr.complicated.f02<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %17 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %18 = insertvalue {i64, i1} %17, i1 0, 1 
  ret {i64, i1} %18 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 1 
  %7 = sub   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -1 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 %"#field##0", i64* %12 
  %13 = insertvalue {i64, i1} undef, i64 %6, 0 
  %14 = insertvalue {i64, i1} %13, i1 1, 1 
  ret {i64, i1} %14 
if.else1:
  %15 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %16 = insertvalue {i64, i1} %15, i1 0, 1 
  ret {i64, i1} %16 
}


define external fastcc  {i64, i1} @"multictr.complicated.f03<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 2 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#rec##0", -2 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"multictr.complicated.f03<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 2 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %17 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %18 = insertvalue {i64, i1} %17, i1 0, 1 
  ret {i64, i1} %18 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 2 
  %7 = sub   i64 %"#rec##0", 2 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -2 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 %"#field##0", i64* %12 
  %13 = insertvalue {i64, i1} undef, i64 %6, 0 
  %14 = insertvalue {i64, i1} %13, i1 1, 1 
  ret {i64, i1} %14 
if.else1:
  %15 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %16 = insertvalue {i64, i1} %15, i1 0, 1 
  ret {i64, i1} %16 
}


define external fastcc  {i64, i1} @"multictr.complicated.f04<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 3 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#rec##0", -3 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"multictr.complicated.f04<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 3 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %17 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %18 = insertvalue {i64, i1} %17, i1 0, 1 
  ret {i64, i1} %18 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 3 
  %7 = sub   i64 %"#rec##0", 3 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -3 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 %"#field##0", i64* %12 
  %13 = insertvalue {i64, i1} undef, i64 %6, 0 
  %14 = insertvalue {i64, i1} %13, i1 1, 1 
  ret {i64, i1} %14 
if.else1:
  %15 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %16 = insertvalue {i64, i1} %15, i1 0, 1 
  ret {i64, i1} %16 
}


define external fastcc  {i64, i1} @"multictr.complicated.f05<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 4 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#rec##0", -4 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"multictr.complicated.f05<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 4 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %17 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %18 = insertvalue {i64, i1} %17, i1 0, 1 
  ret {i64, i1} %18 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 4 
  %7 = sub   i64 %"#rec##0", 4 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -4 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 %"#field##0", i64* %12 
  %13 = insertvalue {i64, i1} undef, i64 %6, 0 
  %14 = insertvalue {i64, i1} %13, i1 1, 1 
  ret {i64, i1} %14 
if.else1:
  %15 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %16 = insertvalue {i64, i1} %15, i1 0, 1 
  ret {i64, i1} %16 
}


define external fastcc  {i64, i1} @"multictr.complicated.f06<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 5 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#rec##0", -5 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"multictr.complicated.f06<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 5 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %17 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %18 = insertvalue {i64, i1} %17, i1 0, 1 
  ret {i64, i1} %18 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 5 
  %7 = sub   i64 %"#rec##0", 5 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -5 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 %"#field##0", i64* %12 
  %13 = insertvalue {i64, i1} undef, i64 %6, 0 
  %14 = insertvalue {i64, i1} %13, i1 1, 1 
  ret {i64, i1} %14 
if.else1:
  %15 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %16 = insertvalue {i64, i1} %15, i1 0, 1 
  ret {i64, i1} %16 
}


define external fastcc  {i64, i1} @"multictr.complicated.f07<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 6 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#rec##0", -6 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"multictr.complicated.f07<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 6 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %17 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %18 = insertvalue {i64, i1} %17, i1 0, 1 
  ret {i64, i1} %18 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 6 
  %7 = sub   i64 %"#rec##0", 6 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -6 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 %"#field##0", i64* %12 
  %13 = insertvalue {i64, i1} undef, i64 %6, 0 
  %14 = insertvalue {i64, i1} %13, i1 1, 1 
  ret {i64, i1} %14 
if.else1:
  %15 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %16 = insertvalue {i64, i1} %15, i1 0, 1 
  ret {i64, i1} %16 
}


define external fastcc  {i64, i1} @"multictr.complicated.f08<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 7 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"multictr.complicated.f08<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 7 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
if.then2:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = add   i64 %9, 7 
  %11 = sub   i64 %"#rec##0", 7 
  %12 = inttoptr i64 %9 to i8* 
  %13 = inttoptr i64 %11 to i8* 
  %14 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %12, i8*  %13, i32  %14, i1  0)  
  %15 = add   i64 %10, 1 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %"#field##0", i64* %16 
  %17 = insertvalue {i64, i1} undef, i64 %10, 0 
  %18 = insertvalue {i64, i1} %17, i1 1, 1 
  ret {i64, i1} %18 
if.else2:
  %19 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %20 = insertvalue {i64, i1} %19, i1 0, 1 
  ret {i64, i1} %20 
}


define external fastcc  {i64, i1} @"multictr.complicated.f09<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 8 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"multictr.complicated.f09<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 8 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
if.then2:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = add   i64 %9, 7 
  %11 = sub   i64 %"#rec##0", 7 
  %12 = inttoptr i64 %9 to i8* 
  %13 = inttoptr i64 %11 to i8* 
  %14 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %12, i8*  %13, i32  %14, i1  0)  
  %15 = add   i64 %10, 1 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %"#field##0", i64* %16 
  %17 = insertvalue {i64, i1} undef, i64 %10, 0 
  %18 = insertvalue {i64, i1} %17, i1 1, 1 
  ret {i64, i1} %18 
if.else2:
  %19 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %20 = insertvalue {i64, i1} %19, i1 0, 1 
  ret {i64, i1} %20 
}


define external fastcc  {i64, i1} @"multictr.complicated.f10<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 9 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"multictr.complicated.f10<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 9 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
if.then2:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = add   i64 %9, 7 
  %11 = sub   i64 %"#rec##0", 7 
  %12 = inttoptr i64 %9 to i8* 
  %13 = inttoptr i64 %11 to i8* 
  %14 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %12, i8*  %13, i32  %14, i1  0)  
  %15 = add   i64 %10, 1 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %"#field##0", i64* %16 
  %17 = insertvalue {i64, i1} undef, i64 %10, 0 
  %18 = insertvalue {i64, i1} %17, i1 1, 1 
  ret {i64, i1} %18 
if.else2:
  %19 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %20 = insertvalue {i64, i1} %19, i1 0, 1 
  ret {i64, i1} %20 
}


define external fastcc  {i64, i1} @"multictr.complicated.f11<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 10 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"multictr.complicated.f11<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 10 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
if.then2:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = add   i64 %9, 7 
  %11 = sub   i64 %"#rec##0", 7 
  %12 = inttoptr i64 %9 to i8* 
  %13 = inttoptr i64 %11 to i8* 
  %14 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %12, i8*  %13, i32  %14, i1  0)  
  %15 = add   i64 %10, 1 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %"#field##0", i64* %16 
  %17 = insertvalue {i64, i1} undef, i64 %10, 0 
  %18 = insertvalue {i64, i1} %17, i1 1, 1 
  ret {i64, i1} %18 
if.else2:
  %19 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %20 = insertvalue {i64, i1} %19, i1 0, 1 
  ret {i64, i1} %20 
}


define external fastcc  {i64, i1} @"multictr.complicated.f12<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 11 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"multictr.complicated.f12<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 11 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
if.then2:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = add   i64 %9, 7 
  %11 = sub   i64 %"#rec##0", 7 
  %12 = inttoptr i64 %9 to i8* 
  %13 = inttoptr i64 %11 to i8* 
  %14 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %12, i8*  %13, i32  %14, i1  0)  
  %15 = add   i64 %10, 1 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %"#field##0", i64* %16 
  %17 = insertvalue {i64, i1} undef, i64 %10, 0 
  %18 = insertvalue {i64, i1} %17, i1 1, 1 
  ret {i64, i1} %18 
if.else2:
  %19 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %20 = insertvalue {i64, i1} %19, i1 0, 1 
  ret {i64, i1} %20 
}


define external fastcc  {i64, i1} @"multictr.complicated.f13<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 12 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"multictr.complicated.f13<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 12 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
if.then2:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = add   i64 %9, 7 
  %11 = sub   i64 %"#rec##0", 7 
  %12 = inttoptr i64 %9 to i8* 
  %13 = inttoptr i64 %11 to i8* 
  %14 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %12, i8*  %13, i32  %14, i1  0)  
  %15 = add   i64 %10, 1 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %"#field##0", i64* %16 
  %17 = insertvalue {i64, i1} undef, i64 %10, 0 
  %18 = insertvalue {i64, i1} %17, i1 1, 1 
  ret {i64, i1} %18 
if.else2:
  %19 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %20 = insertvalue {i64, i1} %19, i1 0, 1 
  ret {i64, i1} %20 
}


define external fastcc  {i64, i1} @"multictr.complicated.f14<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 13 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"multictr.complicated.f14<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 13 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
if.then2:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = add   i64 %9, 7 
  %11 = sub   i64 %"#rec##0", 7 
  %12 = inttoptr i64 %9 to i8* 
  %13 = inttoptr i64 %11 to i8* 
  %14 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %12, i8*  %13, i32  %14, i1  0)  
  %15 = add   i64 %10, 1 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %"#field##0", i64* %16 
  %17 = insertvalue {i64, i1} undef, i64 %10, 0 
  %18 = insertvalue {i64, i1} %17, i1 1, 1 
  ret {i64, i1} %18 
if.else2:
  %19 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %20 = insertvalue {i64, i1} %19, i1 0, 1 
  ret {i64, i1} %20 
}


define external fastcc  {i64, i1} @"multictr.complicated.f15<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 14 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"multictr.complicated.f15<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 14 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
if.then2:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = add   i64 %9, 7 
  %11 = sub   i64 %"#rec##0", 7 
  %12 = inttoptr i64 %9 to i8* 
  %13 = inttoptr i64 %11 to i8* 
  %14 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %12, i8*  %13, i32  %14, i1  0)  
  %15 = add   i64 %10, 1 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %"#field##0", i64* %16 
  %17 = insertvalue {i64, i1} undef, i64 %10, 0 
  %18 = insertvalue {i64, i1} %17, i1 1, 1 
  ret {i64, i1} %18 
if.else2:
  %19 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %20 = insertvalue {i64, i1} %19, i1 0, 1 
  ret {i64, i1} %20 
}


define external fastcc  {i64, i1} @"multictr.complicated.f16<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 15 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"multictr.complicated.f16<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 15 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
if.then2:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = add   i64 %9, 7 
  %11 = sub   i64 %"#rec##0", 7 
  %12 = inttoptr i64 %9 to i8* 
  %13 = inttoptr i64 %11 to i8* 
  %14 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %12, i8*  %13, i32  %14, i1  0)  
  %15 = add   i64 %10, 1 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %"#field##0", i64* %16 
  %17 = insertvalue {i64, i1} undef, i64 %10, 0 
  %18 = insertvalue {i64, i1} %17, i1 1, 1 
  ret {i64, i1} %18 
if.else2:
  %19 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %20 = insertvalue {i64, i1} %19, i1 0, 1 
  ret {i64, i1} %20 
}


define external fastcc  {i64, i1} @"multictr.complicated.f17<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i1} %16, i1 0, 1 
  ret {i64, i1} %17 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 16 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then2:
  %7 = add   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else2:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"multictr.complicated.f17<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp uge i64 %"#rec##0", 4 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 7 
  %2 = icmp eq i64 %1, 7 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then1:
  %3 = add   i64 %"#rec##0", -7 
  %4 = inttoptr i64 %3 to i16* 
  %5 = load  i16, i16* %4 
  %6 = icmp eq i16 %5, 16 
  br i1 %6, label %if.then2, label %if.else2 
if.else1:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
if.then2:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = add   i64 %9, 7 
  %11 = sub   i64 %"#rec##0", 7 
  %12 = inttoptr i64 %9 to i8* 
  %13 = inttoptr i64 %11 to i8* 
  %14 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %12, i8*  %13, i32  %14, i1  0)  
  %15 = add   i64 %10, 1 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %"#field##0", i64* %16 
  %17 = insertvalue {i64, i1} undef, i64 %10, 0 
  %18 = insertvalue {i64, i1} %17, i1 1, 1 
  ret {i64, i1} %18 
if.else2:
  %19 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %20 = insertvalue {i64, i1} %19, i1 0, 1 
  ret {i64, i1} %20 
}


define external fastcc  i64 @"multictr.complicated.spring<0>"() alwaysinline   {
entry:
  ret i64 1 
}


define external fastcc  i64 @"multictr.complicated.summer<0>"() alwaysinline   {
entry:
  ret i64 2 
}


define external fastcc  i64 @"multictr.complicated.winter<0>"() alwaysinline   {
entry:
  ret i64 0 
}


define external fastcc  i1 @"multictr.complicated.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i1  @"multictr.complicated.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.length
  representation  : 64 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.length.=<0>
                    multictr.length.metres<0>
                    multictr.length.metres<1>
                    multictr.length.value<0>
                    multictr.length.value<1>
                    multictr.length.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: multictr.length.=<0>
=(#left##0:multictr.length, #right##0:multictr.length, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.length, ~#right##0:multictr.length, ?#success##0:wybe.bool)


proc metres > public {inline} (0 calls)
0: multictr.length.metres<0>
metres(value##0:wybe.float, ?#result##2:multictr.length)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~value##0:multictr.length, ?#result##2:multictr.length) @multictr:nn:nn
proc metres > public {inline} (0 calls)
1: multictr.length.metres<1>
metres(?value##0:wybe.float, #result##0:multictr.length)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#result##0:multictr.length, ?value##0:wybe.float) @multictr:nn:nn


proc value > public {inline} (0 calls)
0: multictr.length.value<0>
value(#rec##0:multictr.length, ?#result##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#rec##0:multictr.length, ?#result##0:wybe.float) @multictr:nn:nn
proc value > public {inline} (0 calls)
1: multictr.length.value<1>
value([#rec##0:multictr.length], ?#rec##2:multictr.length, #field##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~#field##0:multictr.length, ?#rec##2:multictr.length) @multictr:nn:nn


proc ~= > public {inline} (0 calls)
0: multictr.length.~=<0>
~=(#left##0:multictr.length, #right##0:multictr.length, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.length, ~#right##0:multictr.length, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.length'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.length.=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i64 @"multictr.length.metres<0>"(double  %"value##0") alwaysinline   {
entry:
  %0 = bitcast double %"value##0" to i64 
  ret i64 %0 
}


define external fastcc  double @"multictr.length.metres<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = bitcast i64 %"#result##0" to double 
  ret double %0 
}


define external fastcc  double @"multictr.length.value<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = bitcast i64 %"#rec##0" to double 
  ret double %0 
}


define external fastcc  i64 @"multictr.length.value<1>"(double  %"#field##0") alwaysinline   {
entry:
  %0 = bitcast double %"#field##0" to i64 
  ret i64 %0 
}


define external fastcc  i1 @"multictr.length.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i64 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.maybe_int
  representation  : address
  public submods  : 
  public resources: 
  public procs    : multictr.maybe_int.=<0>
                    multictr.maybe_int.just<0>
                    multictr.maybe_int.just<1>
                    multictr.maybe_int.nothing<0>
                    multictr.maybe_int.value<0>
                    multictr.maybe_int.value<1>
                    multictr.maybe_int.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public (1 calls)
0: multictr.maybe_int.=<0>
=(#left##0:multictr.maybe_int, #right##0:multictr.maybe_int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:multictr.maybe_int, 0:multictr.maybe_int, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(~#left##0:multictr.maybe_int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#value##0:wybe.int) @multictr:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
        case ~tmp#8##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:multictr.maybe_int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#value##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_eq(~#left#value##0:wybe.int, ~#right#value##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc just > public {inline} (0 calls)
0: multictr.maybe_int.just<0>
just(value##0:wybe.int, ?#result##0:multictr.maybe_int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.maybe_int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.maybe_int, ?#result##0:multictr.maybe_int, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~value##0:wybe.int) @multictr:nn:nn
proc just > public {inline} (8 calls)
1: multictr.maybe_int.just<1>
just(?value##0:wybe.int, #result##0:multictr.maybe_int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?value##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:multictr.maybe_int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?value##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc nothing > public {inline} (0 calls)
0: multictr.maybe_int.nothing<0>
nothing(?#result##0:multictr.maybe_int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.maybe_int, ?#result##0:multictr.maybe_int)


proc value > public {inline} (0 calls)
0: multictr.maybe_int.value<0>
value(#rec##0:multictr.maybe_int, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr.maybe_int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc value > public {inline} (0 calls)
1: multictr.maybe_int.value<1>
value(#rec##0:multictr.maybe_int, ?#rec##1:multictr.maybe_int, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:multictr.maybe_int, ?#rec##1:multictr.maybe_int)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr.maybe_int, ?#rec##1:multictr.maybe_int, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: multictr.maybe_int.~=<0>
~=(#left##0:multictr.maybe_int, #right##0:multictr.maybe_int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multictr.maybe_int.=<0>(~#left##0:multictr.maybe_int, ~#right##0:multictr.maybe_int, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.maybe_int'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.maybe_int.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp ne i64 %"#left##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = icmp ne i64 %"#right##0", 0 
  br i1 %3, label %if.then1, label %if.else1 
if.else:
  %7 = icmp eq i64 %"#right##0", 0 
  ret i1 %7 
if.then1:
  %4 = inttoptr i64 %"#right##0" to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp eq i64 %2, %5 
  ret i1 %6 
if.else1:
  ret i1 0 
}


define external fastcc  i64 @"multictr.maybe_int.just<0>"(i64  %"value##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"value##0", i64* %3 
  ret i64 %2 
}


define external fastcc  {i64, i1} @"multictr.maybe_int.just<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#result##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = insertvalue {i64, i1} undef, i64 %2, 0 
  %4 = insertvalue {i64, i1} %3, i1 1, 1 
  ret {i64, i1} %4 
if.else:
  %5 = insertvalue {i64, i1} undef, i64 undef, 0 
  %6 = insertvalue {i64, i1} %5, i1 0, 1 
  ret {i64, i1} %6 
}


define external fastcc  i64 @"multictr.maybe_int.nothing<0>"() alwaysinline   {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"multictr.maybe_int.value<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = insertvalue {i64, i1} undef, i64 %2, 0 
  %4 = insertvalue {i64, i1} %3, i1 1, 1 
  ret {i64, i1} %4 
if.else:
  %5 = insertvalue {i64, i1} undef, i64 undef, 0 
  %6 = insertvalue {i64, i1} %5, i1 0, 1 
  ret {i64, i1} %6 
}


define external fastcc  {i64, i1} @"multictr.maybe_int.value<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 8 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  store  i64 %"#field##0", i64* %7 
  %8 = insertvalue {i64, i1} undef, i64 %3, 0 
  %9 = insertvalue {i64, i1} %8, i1 1, 1 
  ret {i64, i1} %9 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 0, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
}


define external fastcc  i1 @"multictr.maybe_int.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i1  @"multictr.maybe_int.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.number
  representation  : address
  public submods  : 
  public resources: 
  public procs    : multictr.number.=<0>
                    multictr.number.float<0>
                    multictr.number.float<1>
                    multictr.number.float_value<0>
                    multictr.number.float_value<1>
                    multictr.number.int<0>
                    multictr.number.int<1>
                    multictr.number.int_value<0>
                    multictr.number.int_value<1>
                    multictr.number.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public (1 calls)
0: multictr.number.=<0>
=(#left##0:multictr.number, #right##0:multictr.number, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 1:wybe.int, ?tmp#8##0:wybe.int)
    foreign llvm icmp_eq(tmp#8##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~tmp#8##0:wybe.int, 1:wybe.int, ?tmp#12##0:wybe.bool)
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#left##0:multictr.number, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#float_value##0:wybe.float) @multictr:nn:nn
            foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#14##0:wybe.int)
            foreign llvm icmp_eq(~tmp#14##0:wybe.int, 1:wybe.int, ?tmp#15##0:wybe.bool)
            case ~tmp#15##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#right##0:multictr.number, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#float_value##0:wybe.float) @multictr:nn:nn
                foreign llvm fcmp_eq(~#left#float_value##0:wybe.float, ~#right#float_value##0:wybe.float, ?#success##0:wybe.bool) @float:nn:nn



    1:
        foreign lpvm access(~#left##0:multictr.number, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#int_value##0:wybe.int) @multictr:nn:nn
        foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#19##0:wybe.int)
        foreign llvm icmp_eq(~tmp#19##0:wybe.int, 0:wybe.int, ?tmp#20##0:wybe.bool)
        case ~tmp#20##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:multictr.number, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#int_value##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_eq(~#left#int_value##0:wybe.int, ~#right#int_value##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc float > public {inline} (0 calls)
0: multictr.number.float<0>
float(float_value##0:wybe.float, ?#result##0:multictr.number)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.number) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.number, ?#rec##1:multictr.number, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~float_value##0:wybe.float) @multictr:nn:nn
    foreign llvm or(~#rec##1:multictr.number, 1:wybe.int, ?#result##0:multictr.number) @multictr:nn:nn
proc float > public {inline} (5 calls)
1: multictr.number.float<1>
float(?float_value##0:wybe.float, #result##0:multictr.number, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.float, ?float_value##0:wybe.float)

    1:
        foreign lpvm access(~#result##0:multictr.number, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?float_value##0:wybe.float) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc float_value > public {inline} (0 calls)
0: multictr.number.float_value<0>
float_value(#rec##0:multictr.number, ?#result##0:wybe.float, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.float, ?#result##0:wybe.float)

    1:
        foreign lpvm access(~#rec##0:multictr.number, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#result##0:wybe.float) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc float_value > public {inline} (0 calls)
1: multictr.number.float_value<1>
float_value(#rec##0:multictr.number, ?#rec##1:multictr.number, #field##0:wybe.float, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.number, ?#rec##1:multictr.number)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr.number, ?#rec##1:multictr.number, -1:wybe.int, 0:wybe.int, 8:wybe.int, 1:wybe.int, ~#field##0:wybe.float) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc int > public {inline} (0 calls)
0: multictr.number.int<0>
int(int_value##0:wybe.int, ?#result##0:multictr.number)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.number) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.number, ?#result##0:multictr.number, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~int_value##0:wybe.int) @multictr:nn:nn
proc int > public {inline} (10 calls)
1: multictr.number.int<1>
int(?int_value##0:wybe.int, #result##0:multictr.number, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?int_value##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:multictr.number, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?int_value##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc int_value > public {inline} (0 calls)
0: multictr.number.int_value<0>
int_value(#rec##0:multictr.number, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr.number, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc int_value > public {inline} (0 calls)
1: multictr.number.int_value<1>
int_value(#rec##0:multictr.number, ?#rec##1:multictr.number, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr.number, ?#rec##1:multictr.number)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr.number, ?#rec##1:multictr.number, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: multictr.number.~=<0>
~=(#left##0:multictr.number, #right##0:multictr.number, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multictr.number.=<0>(~#left##0:multictr.number, ~#right##0:multictr.number, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.number'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.number.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = and i64 %"#left##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#left##0" to i64* 
  %3 = load  i64, i64* %2 
  %4 = and i64 %"#right##0", 1 
  %5 = icmp eq i64 %4, 0 
  br i1 %5, label %if.then1, label %if.else1 
if.else:
  %9 = icmp eq i64 %0, 1 
  br i1 %9, label %if.then2, label %if.else2 
if.then1:
  %6 = inttoptr i64 %"#right##0" to i64* 
  %7 = load  i64, i64* %6 
  %8 = icmp eq i64 %3, %7 
  ret i1 %8 
if.else1:
  ret i1 0 
if.then2:
  %10 = add   i64 %"#left##0", -1 
  %11 = inttoptr i64 %10 to double* 
  %12 = load  double, double* %11 
  %13 = and i64 %"#right##0", 1 
  %14 = icmp eq i64 %13, 1 
  br i1 %14, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %15 = add   i64 %"#right##0", -1 
  %16 = inttoptr i64 %15 to double* 
  %17 = load  double, double* %16 
  %18 = fcmp oeq double %12, %17 
  ret i1 %18 
if.else3:
  ret i1 0 
}


define external fastcc  i64 @"multictr.number.float<0>"(double  %"float_value##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to double* 
  store  double %"float_value##0", double* %3 
  %4 = or i64 %2, 1 
  ret i64 %4 
}


define external fastcc  {double, i1} @"multictr.number.float<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = and i64 %"#result##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#result##0", -1 
  %3 = inttoptr i64 %2 to double* 
  %4 = load  double, double* %3 
  %5 = insertvalue {double, i1} undef, double %4, 0 
  %6 = insertvalue {double, i1} %5, i1 1, 1 
  ret {double, i1} %6 
if.else:
  %7 = insertvalue {double, i1} undef, double undef, 0 
  %8 = insertvalue {double, i1} %7, i1 0, 1 
  ret {double, i1} %8 
}


define external fastcc  {double, i1} @"multictr.number.float_value<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#rec##0", -1 
  %3 = inttoptr i64 %2 to double* 
  %4 = load  double, double* %3 
  %5 = insertvalue {double, i1} undef, double %4, 0 
  %6 = insertvalue {double, i1} %5, i1 1, 1 
  ret {double, i1} %6 
if.else:
  %7 = insertvalue {double, i1} undef, double undef, 0 
  %8 = insertvalue {double, i1} %7, i1 0, 1 
  ret {double, i1} %8 
}


define external fastcc  {i64, i1} @"multictr.number.float_value<1>"(i64  %"#rec##0", double  %"#field##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 8 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = add   i64 %4, 1 
  %6 = sub   i64 %"#rec##0", 1 
  %7 = inttoptr i64 %4 to i8* 
  %8 = inttoptr i64 %6 to i8* 
  %9 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %7, i8*  %8, i32  %9, i1  0)  
  %10 = add   i64 %5, -1 
  %11 = inttoptr i64 %10 to double* 
  store  double %"#field##0", double* %11 
  %12 = insertvalue {i64, i1} undef, i64 %5, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else:
  %14 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  i64 @"multictr.number.int<0>"(i64  %"int_value##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"int_value##0", i64* %3 
  ret i64 %2 
}


define external fastcc  {i64, i1} @"multictr.number.int<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = and i64 %"#result##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#result##0" to i64* 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"multictr.number.int_value<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#rec##0" to i64* 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"multictr.number.int_value<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 1 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 8 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = inttoptr i64 %4 to i8* 
  %6 = inttoptr i64 %"#rec##0" to i8* 
  %7 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = inttoptr i64 %4 to i64* 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %4, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  i1 @"multictr.number.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i1  @"multictr.number.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.perhaps
  representation  : 64 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.perhaps.=<0>
                    multictr.perhaps.content<0>
                    multictr.perhaps.content<1>
                    multictr.perhaps.perhaps<0>
                    multictr.perhaps.perhaps<1>
                    multictr.perhaps.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: multictr.perhaps.=<0>
=(#left##0:multictr.perhaps, #right##0:multictr.perhaps, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.perhaps, ~#right##0:multictr.perhaps, ?#success##0:wybe.bool)


proc content > public {inline} (0 calls)
0: multictr.perhaps.content<0>
content(#rec##0:multictr.perhaps, ?#result##0:multictr.maybe_int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#rec##0:multictr.perhaps, ?#result##0:multictr.maybe_int) @multictr:nn:nn
proc content > public {inline} (0 calls)
1: multictr.perhaps.content<1>
content([#rec##0:multictr.perhaps], ?#rec##2:multictr.perhaps, #field##0:multictr.maybe_int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~#field##0:multictr.perhaps, ?#rec##2:multictr.perhaps) @multictr:nn:nn


proc perhaps > public {inline} (0 calls)
0: multictr.perhaps.perhaps<0>
perhaps(content##0:multictr.maybe_int, ?#result##2:multictr.perhaps)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~content##0:multictr.perhaps, ?#result##2:multictr.perhaps) @multictr:nn:nn
proc perhaps > public {inline} (0 calls)
1: multictr.perhaps.perhaps<1>
perhaps(?content##0:multictr.maybe_int, #result##0:multictr.perhaps)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~#result##0:multictr.perhaps, ?content##0:multictr.maybe_int) @multictr:nn:nn


proc ~= > public {inline} (0 calls)
0: multictr.perhaps.~=<0>
~=(#left##0:multictr.perhaps, #right##0:multictr.perhaps, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.perhaps, ~#right##0:multictr.perhaps, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.perhaps'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.perhaps.=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i64 @"multictr.perhaps.content<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  ret i64 %"#rec##0" 
}


define external fastcc  i64 @"multictr.perhaps.content<1>"(i64  %"#field##0") alwaysinline   {
entry:
  ret i64 %"#field##0" 
}


define external fastcc  i64 @"multictr.perhaps.perhaps<0>"(i64  %"content##0") alwaysinline   {
entry:
  ret i64 %"content##0" 
}


define external fastcc  i64 @"multictr.perhaps.perhaps<1>"(i64  %"#result##0") alwaysinline   {
entry:
  ret i64 %"#result##0" 
}


define external fastcc  i1 @"multictr.perhaps.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i64 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.rank
  representation  : 4 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.rank.=<0>
                    multictr.rank.ace<0>
                    multictr.rank.jack<0>
                    multictr.rank.king<0>
                    multictr.rank.queen<0>
                    multictr.rank.r10<0>
                    multictr.rank.r2<0>
                    multictr.rank.r3<0>
                    multictr.rank.r4<0>
                    multictr.rank.r5<0>
                    multictr.rank.r6<0>
                    multictr.rank.r7<0>
                    multictr.rank.r8<0>
                    multictr.rank.r9<0>
                    multictr.rank.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: multictr.rank.=<0>
=(#left##0:multictr.rank, #right##0:multictr.rank, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.rank, ~#right##0:multictr.rank, ?#success##0:wybe.bool)


proc ace > public {inline} (0 calls)
0: multictr.rank.ace<0>
ace(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(12:multictr.rank, ?#result##0:multictr.rank)


proc jack > public {inline} (0 calls)
0: multictr.rank.jack<0>
jack(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(9:multictr.rank, ?#result##0:multictr.rank)


proc king > public {inline} (0 calls)
0: multictr.rank.king<0>
king(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(11:multictr.rank, ?#result##0:multictr.rank)


proc queen > public {inline} (0 calls)
0: multictr.rank.queen<0>
queen(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(10:multictr.rank, ?#result##0:multictr.rank)


proc r10 > public {inline} (0 calls)
0: multictr.rank.r10<0>
r10(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(8:multictr.rank, ?#result##0:multictr.rank)


proc r2 > public {inline} (0 calls)
0: multictr.rank.r2<0>
r2(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.rank, ?#result##0:multictr.rank)


proc r3 > public {inline} (0 calls)
0: multictr.rank.r3<0>
r3(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:multictr.rank, ?#result##0:multictr.rank)


proc r4 > public {inline} (0 calls)
0: multictr.rank.r4<0>
r4(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(2:multictr.rank, ?#result##0:multictr.rank)


proc r5 > public {inline} (0 calls)
0: multictr.rank.r5<0>
r5(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(3:multictr.rank, ?#result##0:multictr.rank)


proc r6 > public {inline} (0 calls)
0: multictr.rank.r6<0>
r6(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(4:multictr.rank, ?#result##0:multictr.rank)


proc r7 > public {inline} (0 calls)
0: multictr.rank.r7<0>
r7(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(5:multictr.rank, ?#result##0:multictr.rank)


proc r8 > public {inline} (0 calls)
0: multictr.rank.r8<0>
r8(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(6:multictr.rank, ?#result##0:multictr.rank)


proc r9 > public {inline} (0 calls)
0: multictr.rank.r9<0>
r9(?#result##0:multictr.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(7:multictr.rank, ?#result##0:multictr.rank)


proc ~= > public {inline} (0 calls)
0: multictr.rank.~=<0>
~=(#left##0:multictr.rank, #right##0:multictr.rank, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.rank, ~#right##0:multictr.rank, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.rank'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.rank.=<0>"(i4  %"#left##0", i4  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i4 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i4 @"multictr.rank.ace<0>"() alwaysinline   {
entry:
  ret i4 12 
}


define external fastcc  i4 @"multictr.rank.jack<0>"() alwaysinline   {
entry:
  ret i4 9 
}


define external fastcc  i4 @"multictr.rank.king<0>"() alwaysinline   {
entry:
  ret i4 11 
}


define external fastcc  i4 @"multictr.rank.queen<0>"() alwaysinline   {
entry:
  ret i4 10 
}


define external fastcc  i4 @"multictr.rank.r10<0>"() alwaysinline   {
entry:
  ret i4 8 
}


define external fastcc  i4 @"multictr.rank.r2<0>"() alwaysinline   {
entry:
  ret i4 0 
}


define external fastcc  i4 @"multictr.rank.r3<0>"() alwaysinline   {
entry:
  ret i4 1 
}


define external fastcc  i4 @"multictr.rank.r4<0>"() alwaysinline   {
entry:
  ret i4 2 
}


define external fastcc  i4 @"multictr.rank.r5<0>"() alwaysinline   {
entry:
  ret i4 3 
}


define external fastcc  i4 @"multictr.rank.r6<0>"() alwaysinline   {
entry:
  ret i4 4 
}


define external fastcc  i4 @"multictr.rank.r7<0>"() alwaysinline   {
entry:
  ret i4 5 
}


define external fastcc  i4 @"multictr.rank.r8<0>"() alwaysinline   {
entry:
  ret i4 6 
}


define external fastcc  i4 @"multictr.rank.r9<0>"() alwaysinline   {
entry:
  ret i4 7 
}


define external fastcc  i1 @"multictr.rank.~=<0>"(i4  %"#left##0", i4  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i4 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.simple
  representation  : address
  public submods  : 
  public resources: 
  public procs    : multictr.simple.=<0>
                    multictr.simple.one<0>
                    multictr.simple.one<1>
                    multictr.simple.one_field<0>
                    multictr.simple.one_field<1>
                    multictr.simple.two<0>
                    multictr.simple.two<1>
                    multictr.simple.two_field1<0>
                    multictr.simple.two_field1<1>
                    multictr.simple.two_field2<0>
                    multictr.simple.two_field2<1>
                    multictr.simple.zero<0>
                    multictr.simple.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public (1 calls)
0: multictr.simple.=<0>
=(#left##0:multictr.simple, #right##0:multictr.simple, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:multictr.simple, 0:multictr.simple, ?#success##0:wybe.bool)

    1:
        foreign llvm and(#left##0:wybe.int, 1:wybe.int, ?tmp#11##0:wybe.int)
        foreign llvm icmp_eq(tmp#11##0:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.bool)
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm icmp_eq(~tmp#11##0:wybe.int, 1:wybe.int, ?tmp#16##0:wybe.bool)
            case ~tmp#16##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(#left##0:multictr.simple, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#left#two_field1##0:wybe.int) @multictr:nn:nn
                foreign lpvm access(~#left##0:multictr.simple, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#left#two_field2##0:wybe.int) @multictr:nn:nn
                foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#18##0:wybe.bool)
                case ~tmp#18##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#19##0:wybe.int)
                    foreign llvm icmp_eq(~tmp#19##0:wybe.int, 1:wybe.int, ?tmp#20##0:wybe.bool)
                    case ~tmp#20##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign lpvm access(#right##0:multictr.simple, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#right#two_field1##0:wybe.int) @multictr:nn:nn
                        foreign lpvm access(~#right##0:multictr.simple, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#right#two_field2##0:wybe.int) @multictr:nn:nn
                        foreign llvm icmp_eq(~#left#two_field1##0:wybe.int, ~#right#two_field1##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
                        case ~tmp#5##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                        1:
                            foreign llvm icmp_eq(~#left#two_field2##0:wybe.int, ~#right#two_field2##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





        1:
            foreign lpvm access(~#left##0:multictr.simple, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#one_field##0:wybe.int) @multictr:nn:nn
            foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#26##0:wybe.bool)
            case ~tmp#26##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#27##0:wybe.int)
                foreign llvm icmp_eq(~tmp#27##0:wybe.int, 0:wybe.int, ?tmp#28##0:wybe.bool)
                case ~tmp#28##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr.simple, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#one_field##0:wybe.int) @multictr:nn:nn
                    foreign llvm icmp_eq(~#left#one_field##0:wybe.int, ~#right#one_field##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn






proc one > public {inline} (0 calls)
0: multictr.simple.one<0>
one(one_field##0:wybe.int, ?#result##0:multictr.simple)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr.simple) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.simple, ?#result##0:multictr.simple, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~one_field##0:wybe.int) @multictr:nn:nn
proc one > public {inline} (11 calls)
1: multictr.simple.one<1>
one(?one_field##0:wybe.int, #result##0:multictr.simple, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?one_field##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?one_field##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:multictr.simple, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?one_field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc one_field > public {inline} (0 calls)
0: multictr.simple.one_field<0>
one_field(#rec##0:multictr.simple, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.simple, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc one_field > public {inline} (0 calls)
1: multictr.simple.one_field<1>
one_field(#rec##0:multictr.simple, ?#rec##1:multictr.simple, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:multictr.simple, ?#rec##1:multictr.simple)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.simple, ?#rec##1:multictr.simple)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.simple, ?#rec##1:multictr.simple, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc two > public {inline} (0 calls)
0: multictr.simple.two<0>
two(two_field1##0:wybe.int, two_field2##0:wybe.int, ?#result##0:multictr.simple)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multictr.simple) @multictr:nn:nn
    foreign lpvm mutate(~#rec##0:multictr.simple, ?#rec##1:multictr.simple, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~two_field1##0:wybe.int) @multictr:nn:nn
    foreign lpvm mutate(~#rec##1:multictr.simple, ?#rec##2:multictr.simple, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~two_field2##0:wybe.int) @multictr:nn:nn
    foreign llvm or(~#rec##2:multictr.simple, 1:wybe.int, ?#result##0:multictr.simple) @multictr:nn:nn
proc two > public {inline} (7 calls)
1: multictr.simple.two<1>
two(?two_field1##0:wybe.int, ?two_field2##0:wybe.int, #result##0:multictr.simple, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?two_field1##0:wybe.int)
        foreign llvm move(undef:wybe.int, ?two_field2##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?two_field1##0:wybe.int)
            foreign llvm move(undef:wybe.int, ?two_field2##0:wybe.int)

        1:
            foreign lpvm access(#result##0:multictr.simple, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?two_field1##0:wybe.int) @multictr:nn:nn
            foreign lpvm access(~#result##0:multictr.simple, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?two_field2##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc two_field1 > public {inline} (0 calls)
0: multictr.simple.two_field1<0>
two_field1(#rec##0:multictr.simple, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.simple, -1:wybe.int, 16:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc two_field1 > public {inline} (0 calls)
1: multictr.simple.two_field1<1>
two_field1(#rec##0:multictr.simple, ?#rec##1:multictr.simple, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:multictr.simple, ?#rec##1:multictr.simple)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.simple, ?#rec##1:multictr.simple)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.simple, ?#rec##1:multictr.simple, -1:wybe.int, 0:wybe.int, 16:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc two_field2 > public {inline} (0 calls)
0: multictr.simple.two_field2<0>
two_field2(#rec##0:multictr.simple, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:multictr.simple, 7:wybe.int, 16:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc two_field2 > public {inline} (0 calls)
1: multictr.simple.two_field2<1>
two_field2(#rec##0:multictr.simple, ?#rec##1:multictr.simple, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:multictr.simple, ?#rec##1:multictr.simple)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:multictr.simple, ?#rec##1:multictr.simple)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:multictr.simple, ?#rec##1:multictr.simple, 7:wybe.int, 0:wybe.int, 16:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @multictr:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc zero > public {inline} (0 calls)
0: multictr.simple.zero<0>
zero(?#result##0:multictr.simple)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.simple, ?#result##0:multictr.simple)


proc ~= > public {inline} (0 calls)
0: multictr.simple.~=<0>
~=(#left##0:multictr.simple, #right##0:multictr.simple, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multictr.simple.=<0>(~#left##0:multictr.simple, ~#right##0:multictr.simple, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.simple'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.simple.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp ne i64 %"#left##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#left##0", 1 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %29 = icmp eq i64 %"#right##0", 0 
  ret i1 %29 
if.then1:
  %3 = inttoptr i64 %"#left##0" to i64* 
  %4 = load  i64, i64* %3 
  %5 = icmp ne i64 %"#right##0", 0 
  br i1 %5, label %if.then2, label %if.else2 
if.else1:
  %11 = icmp eq i64 %1, 1 
  br i1 %11, label %if.then4, label %if.else4 
if.then2:
  %6 = and i64 %"#right##0", 1 
  %7 = icmp eq i64 %6, 0 
  br i1 %7, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = load  i64, i64* %8 
  %10 = icmp eq i64 %4, %9 
  ret i1 %10 
if.else3:
  ret i1 0 
if.then4:
  %12 = add   i64 %"#left##0", -1 
  %13 = inttoptr i64 %12 to i64* 
  %14 = load  i64, i64* %13 
  %15 = add   i64 %"#left##0", 7 
  %16 = inttoptr i64 %15 to i64* 
  %17 = load  i64, i64* %16 
  %18 = icmp ne i64 %"#right##0", 0 
  br i1 %18, label %if.then5, label %if.else5 
if.else4:
  ret i1 0 
if.then5:
  %19 = and i64 %"#right##0", 1 
  %20 = icmp eq i64 %19, 1 
  br i1 %20, label %if.then6, label %if.else6 
if.else5:
  ret i1 0 
if.then6:
  %21 = add   i64 %"#right##0", -1 
  %22 = inttoptr i64 %21 to i64* 
  %23 = load  i64, i64* %22 
  %24 = add   i64 %"#right##0", 7 
  %25 = inttoptr i64 %24 to i64* 
  %26 = load  i64, i64* %25 
  %27 = icmp eq i64 %14, %23 
  br i1 %27, label %if.then7, label %if.else7 
if.else6:
  ret i1 0 
if.then7:
  %28 = icmp eq i64 %17, %26 
  ret i1 %28 
if.else7:
  ret i1 0 
}


define external fastcc  i64 @"multictr.simple.one<0>"(i64  %"one_field##0") alwaysinline   {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"one_field##0", i64* %3 
  ret i64 %2 
}


define external fastcc  {i64, i1} @"multictr.simple.one<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 1 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
if.then1:
  %3 = inttoptr i64 %"#result##0" to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else1:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"multictr.simple.one_field<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 1 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %9 = insertvalue {i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i1} %9, i1 0, 1 
  ret {i64, i1} %10 
if.then1:
  %3 = inttoptr i64 %"#rec##0" to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else1:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"multictr.simple.one_field<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 1 
  %2 = icmp eq i64 %1, 0 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %14 = insertvalue {i64, i1} undef, i64 0, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
if.then1:
  %3 = trunc i64 8 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = inttoptr i64 %5 to i8* 
  %7 = inttoptr i64 %"#rec##0" to i8* 
  %8 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %6, i8*  %7, i32  %8, i1  0)  
  %9 = inttoptr i64 %5 to i64* 
  store  i64 %"#field##0", i64* %9 
  %10 = insertvalue {i64, i1} undef, i64 %5, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else1:
  %12 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i64 @"multictr.simple.two<0>"(i64  %"two_field1##0", i64  %"two_field2##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"two_field1##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"two_field2##0", i64* %5 
  %6 = or i64 %2, 1 
  ret i64 %6 
}


define external fastcc  {i64, i64, i1} @"multictr.simple.two<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#result##0", 1 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %15 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %16 = insertvalue {i64, i64, i1} %15, i64 undef, 1 
  %17 = insertvalue {i64, i64, i1} %16, i1 0, 2 
  ret {i64, i64, i1} %17 
if.then1:
  %3 = add   i64 %"#result##0", -1 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = add   i64 %"#result##0", 7 
  %7 = inttoptr i64 %6 to i64* 
  %8 = load  i64, i64* %7 
  %9 = insertvalue {i64, i64, i1} undef, i64 %5, 0 
  %10 = insertvalue {i64, i64, i1} %9, i64 %8, 1 
  %11 = insertvalue {i64, i64, i1} %10, i1 1, 2 
  ret {i64, i64, i1} %11 
if.else1:
  %12 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i64, i1} %12, i64 undef, 1 
  %14 = insertvalue {i64, i64, i1} %13, i1 0, 2 
  ret {i64, i64, i1} %14 
}


define external fastcc  {i64, i1} @"multictr.simple.two_field1<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 1 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#rec##0", -1 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"multictr.simple.two_field1<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 1 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %17 = insertvalue {i64, i1} undef, i64 0, 0 
  %18 = insertvalue {i64, i1} %17, i1 0, 1 
  ret {i64, i1} %18 
if.then1:
  %3 = trunc i64 16 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 1 
  %7 = sub   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, -1 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 %"#field##0", i64* %12 
  %13 = insertvalue {i64, i1} undef, i64 %6, 0 
  %14 = insertvalue {i64, i1} %13, i1 1, 1 
  ret {i64, i1} %14 
if.else1:
  %15 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %16 = insertvalue {i64, i1} %15, i1 0, 1 
  ret {i64, i1} %16 
}


define external fastcc  {i64, i1} @"multictr.simple.two_field2<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 1 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
if.then1:
  %3 = add   i64 %"#rec##0", 7 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else1:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"multictr.simple.two_field2<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = and i64 %"#rec##0", 1 
  %2 = icmp eq i64 %1, 1 
  br i1 %2, label %if.then1, label %if.else1 
if.else:
  %17 = insertvalue {i64, i1} undef, i64 0, 0 
  %18 = insertvalue {i64, i1} %17, i1 0, 1 
  ret {i64, i1} %18 
if.then1:
  %3 = trunc i64 16 to i32  
  %4 = tail call ccc  i8*  @wybe_malloc(i32  %3)  
  %5 = ptrtoint i8* %4 to i64 
  %6 = add   i64 %5, 1 
  %7 = sub   i64 %"#rec##0", 1 
  %8 = inttoptr i64 %5 to i8* 
  %9 = inttoptr i64 %7 to i8* 
  %10 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %8, i8*  %9, i32  %10, i1  0)  
  %11 = add   i64 %6, 7 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 %"#field##0", i64* %12 
  %13 = insertvalue {i64, i1} undef, i64 %6, 0 
  %14 = insertvalue {i64, i1} %13, i1 1, 1 
  ret {i64, i1} %14 
if.else1:
  %15 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %16 = insertvalue {i64, i1} %15, i1 0, 1 
  ret {i64, i1} %16 
}


define external fastcc  i64 @"multictr.simple.zero<0>"() alwaysinline   {
entry:
  ret i64 0 
}


define external fastcc  i1 @"multictr.simple.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i1  @"multictr.simple.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.suit
  representation  : 2 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.suit.=<0>
                    multictr.suit.clubs<0>
                    multictr.suit.diamonds<0>
                    multictr.suit.hearts<0>
                    multictr.suit.spades<0>
                    multictr.suit.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: multictr.suit.=<0>
=(#left##0:multictr.suit, #right##0:multictr.suit, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.suit, ~#right##0:multictr.suit, ?#success##0:wybe.bool)


proc clubs > public {inline} (0 calls)
0: multictr.suit.clubs<0>
clubs(?#result##0:multictr.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.suit, ?#result##0:multictr.suit)


proc diamonds > public {inline} (0 calls)
0: multictr.suit.diamonds<0>
diamonds(?#result##0:multictr.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:multictr.suit, ?#result##0:multictr.suit)


proc hearts > public {inline} (0 calls)
0: multictr.suit.hearts<0>
hearts(?#result##0:multictr.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(2:multictr.suit, ?#result##0:multictr.suit)


proc spades > public {inline} (0 calls)
0: multictr.suit.spades<0>
spades(?#result##0:multictr.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(3:multictr.suit, ?#result##0:multictr.suit)


proc ~= > public {inline} (0 calls)
0: multictr.suit.~=<0>
~=(#left##0:multictr.suit, #right##0:multictr.suit, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:multictr.suit, ~#right##0:multictr.suit, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.suit'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.suit.=<0>"(i2  %"#left##0", i2  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i2 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i2 @"multictr.suit.clubs<0>"() alwaysinline   {
entry:
  ret i2 0 
}


define external fastcc  i2 @"multictr.suit.diamonds<0>"() alwaysinline   {
entry:
  ret i2 1 
}


define external fastcc  i2 @"multictr.suit.hearts<0>"() alwaysinline   {
entry:
  ret i2 2 
}


define external fastcc  i2 @"multictr.suit.spades<0>"() alwaysinline   {
entry:
  ret i2 3 
}


define external fastcc  i1 @"multictr.suit.~=<0>"(i2  %"#left##0", i2  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i2 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module multictr.unit
  representation  : 0 bit unsigned
  public submods  : 
  public resources: 
  public procs    : multictr.unit.=<0>
                    multictr.unit.unit<0>
                    multictr.unit.~=<0>
  imports         : use multictr
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: multictr.unit.=<0>
=([#left##0:multictr.unit], [#right##0:multictr.unit], ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc unit > public {inline} (0 calls)
0: multictr.unit.unit<0>
unit(?#result##0:multictr.unit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:multictr.unit, ?#result##0:multictr.unit)


proc ~= > public {inline} (0 calls)
0: multictr.unit.~=<0>
~=([#left##0:multictr.unit], [#right##0:multictr.unit], ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr.unit'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr.unit.=<0>"() alwaysinline   {
entry:
  ret i1 1 
}


define external fastcc  void @"multictr.unit.unit<0>"() alwaysinline   {
entry:
  ret void 
}


define external fastcc  i1 @"multictr.unit.~=<0>"() alwaysinline   {
entry:
  ret i1 0 
}

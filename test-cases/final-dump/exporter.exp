======================================================================
AFTER EVERYTHING:
 Module exporter
  representation  : (not a type)
  public submods  : 
  public resources: res: exporter.res
  public procs    : exporter.<0>
                    exporter.fn<0>
                    exporter.three<0>
  imports         : use wybe
  resources       : res: fromList [(exporter.res,wybe.int = 3 @exporter:nn:nn @exporter:nn:nn)]
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: exporter.<0>
()<{}; {<<exporter.res>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(3:wybe.int, <<exporter.res>>:wybe.int) @exporter:nn:nn


proc fn > public {inline} (0 calls)
0: exporter.fn<0>
fn(i##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c ipow(2:wybe.int, ~i##0:wybe.int, ?#result##0:wybe.int) @int:nn:nn


proc three > public {inline} (0 calls)
0: exporter.three<0>
three(?n##0:wybe.int)<{<<exporter.res>>}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<exporter.res>>:wybe.int, ?%n##0:wybe.int) @exporter:nn:nn

  LLVM code       :

; ModuleID = 'exporter'


 


@"resource#exporter.res" =    global i64 undef


declare external ccc  i64 @ipow(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"exporter.<0>"() alwaysinline   {
entry:
  store  i64 3, i64* @"resource#exporter.res" 
  ret void 
}


define external fastcc  i64 @"exporter.fn<0>"(i64  %"i##0") alwaysinline   {
entry:
  %0 = tail call ccc  i64  @ipow(i64  2, i64  %"i##0")  
  ret i64 %0 
}


define external fastcc  i64 @"exporter.three<0>"() alwaysinline   {
entry:
  %0 = load  i64, i64* @"resource#exporter.res" 
  ret i64 %0 
}

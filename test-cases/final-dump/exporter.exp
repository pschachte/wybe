======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module exporter
  representation  : (not a type)
  public submods  : 
  public resources: res: exporter.res
  public procs    : exporter.fn<0>
                    exporter.three<0>
  imports         : use wybe
  resources       : res: fromList [(exporter.res,wybe.int = 3 @exporter:nn:nn @exporter:nn:nn)]
  procs           : 

proc fn > public {inline} (0 calls)
0: exporter.fn<0>
fn(i##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c ipow(2:wybe.int, ~i##0:wybe.int, ?#result##0:wybe.int) @exporter:nn:nn


proc three > public {inline} (0 calls)
0: exporter.three<0>
three(?n##0:wybe.int)<{<<exporter.res>>}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<exporter.res>>:wybe.int, ?%n##0:wybe.int) @exporter:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'exporter'

source_filename = "!ROOT!/final-dump/exporter.wybe"
target triple    ????


declare external ccc i64 @ipow(i64, i64)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)
@"resource#exporter.res" = global i64 undef

define external fastcc i64 @"exporter.fn<0>"(i64 %"i##0") {
  %"tmp#3##0" = call ccc i64 @ipow(i64 2, i64 %"i##0")
  ret i64 %"tmp#3##0"
}

define external fastcc i64 @"exporter.three<0>"() {
  %"tmp#1##0" = load i64, ptr @"resource#exporter.res"
  ret i64 %"tmp#1##0"
}

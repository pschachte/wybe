pub type intlist { pub [] | [|](head:int, tail:intlist) }

pub def single_generator use !io {
    ?x = [1, 2, 3]

    for i in x {
        !println(i)
    }
}

pub def multiple_generator use !io {
    ?x = [1, 2, 3]
    ?y = [4, 5, 6]

    for i in x, j in y {
        !println(i)
        !println(j)
    }
}

pub def shortest_generator_termination use !io {
    ?x = [1, 2, 3, 4]
    ?y = [4, 5]

    for i in x, j in y {
        !println(i)
        !println(j)
    }
}

pub def using_break use !io {
    ?x = [1, 2, 3, 4]

    for i in x {
        if {
            i = 3 :: break # TODO: Does not break!
        }
        !println(i)
    }
}

pub def using_continue use !io {
    ?x = [1, 2, 3, 4]

    for i in x {
        if {
            i = 3 :: continue
        }
        !println(i)
    }
}

pub def using_while use !io {
    ?x = [1, 2, 3, 4]

    for i in x {
        while i < 3
        !println(i)
    }
}

pub def using_until use !io {
    ?x = [1, 2, 3, 4]

    for i in x {
        until i = 3
        !println(i)
    }
}

pub def using_when use !io {
    ?x = [1, 2, 3, 4]

    for i in x {
        when i < 3
        !println(i)
    }
}

pub def using_unless use !io {
    ?x = [1, 2, 3, 4]

    for i in x {
        unless i < 3
        !println(i)
    }
}

pub type int_sequence {
    pub int_sequence(start: int, stride: int, end: int)

    pub def test `[|]`(?value: int, ?rest: int_sequence, current: int_sequence) {
        int_sequence(?s, ?st, ?en, current)

        if {
            st < 0 :: (s > en)
            | otherwise :: (s < en)
        }

        ?value = s
        ?rest = int_sequence(s + st, st, en)
    }
}

pub def xrange(start: int, stride: int, end: int): int_sequence =
    int_sequence(start, stride, end)

pub def irange(start: int, stride: int, end: int): int_sequence =
    int_sequence(start, stride, if stride < 0 then end - 1 else end+1)

pub def using_xrange use !io {
    for i in xrange(1, 1, 10) {
        !println(i)
    }
}

pub def using_xrange_reverse use !io {
    for i in xrange(10, -1, 1) {
        !println(i)
    }
}

pub def using_irange use !io {
    for i in irange(1, 1, 10) {
        !println(i)
    }
}

pub def using_irange_reverse use !io {
    for i in irange(10, -1, 1) {
        !println(i)
    }
}

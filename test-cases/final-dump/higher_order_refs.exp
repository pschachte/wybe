======================================================================
AFTER EVERYTHING:
 Module higher_order_refs
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : higher_order_refs.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: higher_order_refs.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    higher_order_refs.app<0>(higher_order_refs.gen#1<1><>:(wybe.float, ?wybe.float), 1.0:wybe.float, ?tmp#0##0:wybe.float) #0 @higher_order_refs:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @float:nn:nn
    foreign c print_float(~tmp#0##0:wybe.float, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @float:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @io:nn:nn
    higher_order_refs.app<0>(higher_order_refs.gen#2<1><>:(wybe.float, ?wybe.float), 1.0:wybe.float, ?tmp#1##0:wybe.float) #2 @higher_order_refs:nn:nn
    foreign c print_float(~tmp#1##0:wybe.float, ~tmp#13##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @float:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @io:nn:nn
    higher_order_refs.app<0>(higher_order_refs.gen#3<1><0.5:wybe.float>:(wybe.float, ?wybe.float), 1.0:wybe.float, ?tmp#3##0:wybe.float) #4 @higher_order_refs:nn:nn
    foreign c print_float(~tmp#3##0:wybe.float, ~tmp#17##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @float:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) @io:nn:nn
    higher_order_refs.app<0>(higher_order_refs.gen#4<0><>:(wybe.float, ?wybe.float), 1.0:wybe.float, ?tmp#5##0:wybe.float) #6 @higher_order_refs:nn:nn
    foreign c print_float(~tmp#5##0:wybe.float, ~tmp#21##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @float:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @io:nn:nn
    higher_order_refs.app<0>(higher_order_refs.gen#5<0><>:(wybe.int, ?wybe.int), 1:wybe.int, ?tmp#6##0:wybe.int) #8 @higher_order_refs:nn:nn
    foreign c print_int(~tmp#6##0:wybe.int, ~tmp#25##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#28##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @io:nn:nn
    higher_order_refs.app<0>(higher_order_refs.gen#6<0><_:wybe.int>:(wybe.int, ?wybe.int), 1:wybe.int, ?tmp#8##0:wybe.int) #10 @higher_order_refs:nn:nn
    foreign c print_int(~tmp#8##0:wybe.int, ~tmp#29##0:wybe.phantom, ?tmp#32##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#32##0:wybe.phantom, ?tmp#33##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#33##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


add_one > {inline} (1 calls)
0: higher_order_refs.add_one<0>
add_one(i##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~i##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @int:nn:nn
add_one > {inline} (0 calls)
1: higher_order_refs.add_one<1>
add_one(f##0:wybe.float, ?#result##0:wybe.float)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm fadd(~f##0:wybe.float, 1.0:wybe.float, ?#result##0:wybe.float) @float:nn:nn


app > {noinline} (6 calls)
0: higher_order_refs.app<0>
app(f##0:(I, ?J), i##0:I, ?#result##0:J)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~f##0:(I, ?J)(~i##0:I, ?#result##0:J) #0 @higher_order_refs:nn:nn


gen#1 > {inline} (1 calls)
0: higher_order_refs.gen#1<0>
gen#1(anon#1#1##0:wybe.float, ?anon#1#2##0:wybe.float)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~anon#1#1##0:wybe.float, ?anon#1#2##0:wybe.float) @higher_order_refs:nn:nn
gen#1 > {inline} (1 calls)
1: higher_order_refs.gen#1<1>
gen#1(anon#1#1##0:wybe.float, ?anon#1#2##0:wybe.float)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~anon#1#1##0:wybe.float, ?anon#1#2##0:wybe.float) @higher_order_refs:nn:nn


gen#2 > {inline} (1 calls)
0: higher_order_refs.gen#2<0>
gen#2(anon#2#1##0:wybe.float, ?anon#2#2##0:wybe.float)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~anon#2#1##0:wybe.float, ?anon#2#2##0:wybe.float) @higher_order_refs:nn:nn
gen#2 > {inline} (1 calls)
1: higher_order_refs.gen#2<1>
gen#2(anon#2#1##0:wybe.float, ?anon#2#2##0:wybe.float)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~anon#2#1##0:wybe.float, ?anon#2#2##0:wybe.float) @higher_order_refs:nn:nn


gen#3 > {inline} (1 calls)
0: higher_order_refs.gen#3<0>
gen#3(^y##0:wybe.float, anon#3#1##0:wybe.float, ?anon#3#2##0:wybe.float)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm fsub(~anon#3#1##0:wybe.float, ~y##0:wybe.float, ?anon#3#2##0:wybe.float) @float:nn:nn
gen#3 > {inline} (1 calls)
1: higher_order_refs.gen#3<1>
gen#3(^y##0:wybe.float, anon#3#1##0:wybe.float, ?anon#3#2##0:wybe.float)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm fsub(~anon#3#1##0:wybe.float, ~^y##0:wybe.float, ?anon#3#2##0:wybe.float) @float:nn:nn


gen#4 > {inline} (1 calls)
0: higher_order_refs.gen#4<0>
gen#4(a##0:A, ?#result##0:A)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~a##0:A, ?#result##0:A) @predicate:nn:nn


gen#5 > {inline} (1 calls)
0: higher_order_refs.gen#5<0>
gen#5(i##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~i##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @int:nn:nn


gen#6 > {inline} (1 calls)
0: higher_order_refs.gen#6<0>
gen#6([^x##0:wybe.int], y##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~y##0:wybe.int, 10:wybe.int, ?#result##0:wybe.int) @int:nn:nn

  LLVM code       :

; ModuleID = 'higher_order_refs'


 


@higher_order_refs.0 =    constant [1 x i64] [i64 ptrtoint (i64 (i64, i64)* @"higher_order_refs.gen#1<1>" to i64)]


@higher_order_refs.1 =    constant [1 x i64] [i64 ptrtoint (i64 (i64, i64)* @"higher_order_refs.gen#2<1>" to i64)]


@higher_order_refs.2 =    constant [2 x i64] [i64 ptrtoint (i64 (i64, i64)* @"higher_order_refs.gen#3<1>" to i64), i64 bitcast (double 5.000000e-1 to i64)]


@higher_order_refs.3 =    constant [1 x i64] [i64 ptrtoint (i64 (i64, i64)* @"higher_order_refs.gen#4<0>" to i64)]


@higher_order_refs.4 =    constant [1 x i64] [i64 ptrtoint (i64 (i64, i64)* @"higher_order_refs.gen#5<0>" to i64)]


@higher_order_refs.5 =    constant [1 x i64] [i64 ptrtoint (i64 (i64, i64)* @"higher_order_refs.gen#6<0>" to i64)]


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_float(double)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"higher_order_refs.<0>"()    {
entry:
  %0 = tail call fastcc  i64  @"higher_order_refs.app<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_refs.0, i32 0, i32 0) to i64), i64  bitcast (double 1.000000e0 to i64))  
  %1 = bitcast i64 %0 to double 
  tail call ccc  void  @print_float(double  %1)  
  tail call ccc  void  @putchar(i8  10)  
  %2 = tail call fastcc  i64  @"higher_order_refs.app<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_refs.1, i32 0, i32 0) to i64), i64  bitcast (double 1.000000e0 to i64))  
  %3 = bitcast i64 %2 to double 
  tail call ccc  void  @print_float(double  %3)  
  tail call ccc  void  @putchar(i8  10)  
  %4 = tail call fastcc  i64  @"higher_order_refs.app<0>"(i64  ptrtoint (i64* getelementptr inbounds ([2 x i64], [2 x i64]* @higher_order_refs.2, i32 0, i32 0) to i64), i64  bitcast (double 1.000000e0 to i64))  
  %5 = bitcast i64 %4 to double 
  tail call ccc  void  @print_float(double  %5)  
  tail call ccc  void  @putchar(i8  10)  
  %6 = tail call fastcc  i64  @"higher_order_refs.app<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_refs.3, i32 0, i32 0) to i64), i64  bitcast (double 1.000000e0 to i64))  
  %7 = bitcast i64 %6 to double 
  tail call ccc  void  @print_float(double  %7)  
  tail call ccc  void  @putchar(i8  10)  
  %8 = tail call fastcc  i64  @"higher_order_refs.app<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_refs.4, i32 0, i32 0) to i64), i64  1)  
  tail call ccc  void  @print_int(i64  %8)  
  tail call ccc  void  @putchar(i8  10)  
  %9 = tail call fastcc  i64  @"higher_order_refs.app<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_refs.5, i32 0, i32 0) to i64), i64  1)  
  tail call ccc  void  @print_int(i64  %9)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"higher_order_refs.add_one<0>"(i64  %"i##0")    {
entry:
  %0 = add   i64 %"i##0", 1 
  ret i64 %0 
}


define external fastcc  double @"higher_order_refs.add_one<1>"(double  %"f##0")    {
entry:
  %0 = fadd double %"f##0", 1.000000e0 
  ret double %0 
}


define external fastcc  i64 @"higher_order_refs.app<0>"(i64  %"f##0", i64  %"i##0")    {
entry:
  %0 = inttoptr i64 %"f##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to i64 (i64, i64)* 
  %3 = tail call fastcc  i64  %2(i64  %"f##0", i64  %"i##0")  
  ret i64 %3 
}


define external fastcc  double @"higher_order_refs.gen#1<0>"(double  %"anon#1#1##0")    {
entry:
  ret double %"anon#1#1##0" 
}


define external fastcc  i64 @"higher_order_refs.gen#1<1>"(i64  %"#env##0", i64  %"anon#1#1##0")    {
entry:
  %0 = bitcast i64 %"anon#1#1##0" to double 
  %1 = bitcast double %0 to i64 
  ret i64 %1 
}


define external fastcc  double @"higher_order_refs.gen#2<0>"(double  %"anon#2#1##0")    {
entry:
  ret double %"anon#2#1##0" 
}


define external fastcc  i64 @"higher_order_refs.gen#2<1>"(i64  %"#env##0", i64  %"anon#2#1##0")    {
entry:
  %0 = bitcast i64 %"anon#2#1##0" to double 
  %1 = bitcast double %0 to i64 
  ret i64 %1 
}


define external fastcc  double @"higher_order_refs.gen#3<0>"(double  %"y##0", double  %"anon#3#1##0")    {
entry:
  %0 = fsub double %"anon#3#1##0", %"y##0" 
  ret double %0 
}


define external fastcc  i64 @"higher_order_refs.gen#3<1>"(i64  %"#env##0", i64  %"anon#3#1##0")    {
entry:
  %0 = add   i64 %"#env##0", 8 
  %1 = inttoptr i64 %0 to double* 
  %2 = getelementptr  double, double* %1, i64 0 
  %3 = load  double, double* %2 
  %4 = bitcast i64 %"anon#3#1##0" to double 
  %5 = fsub double %4, %3 
  %6 = bitcast double %5 to i64 
  ret i64 %6 
}


define external fastcc  i64 @"higher_order_refs.gen#4<0>"(i64  %"#env##0", i64  %"a##0")    {
entry:
  ret i64 %"a##0" 
}


define external fastcc  i64 @"higher_order_refs.gen#5<0>"(i64  %"#env##0", i64  %"i##0")    {
entry:
  %0 = add   i64 %"i##0", 1 
  ret i64 %0 
}


define external fastcc  i64 @"higher_order_refs.gen#6<0>"(i64  %"#env##0", i64  %"y##0")    {
entry:
  %0 = add   i64 %"y##0", 10 
  ret i64 %0 
}

resource maximum:int

def take_max(i:int) use !maximum { ?maximum = max(i, maximum) }

# ?matrix = [[1,2,3], [5,1]]

# use maximum in {
#     ?maximum = -1000
#     !map({resource}{
#         !take_max(length(@))
#     }, matrix)
#     !println(maximum)
# }

# !println("*****")

# ?matrix = [[1,2,3], [1,2,1,2], [5,1]]

# use maximum in {
#     ?maximum = -1000
#     !map({resource}{
#         use maximum in {
#             ?maximum = -1000
#             !map(take_max, @1)
#             !print("> "); !println(maximum)
#         }
#         !take_max(length(@1))
#     }, matrix)
#     !println(maximum)
# }

# Test allowing a resourceless argument where a resourceful one is expected,
# and allowing a pure one where an impure one is expected.

def {impure} my_map(f:{resource,impure}(T,?T), lst:list(T)):list(T) =
    if {
        lst = [?h|?t] :: [h2 | t2] where { !f(h, ?h2) ; !my_map(f, t, ?t2) }
    |   else          :: []
    }

def double(x:int):int = x*2

def max_double(x:int,?x2:int) use !maximum {
    ?x2 = 2*x
    !take_max(x2)
}

def {impure} print_double(x:int,?x2:int) {
    ?x2 = 2*x
    foreign c {impure} printf(c"%d\n", x2)
}

use maximum in {
    ?maximum = 0
    ?lst = [1,3,5,3,1]
    !my_map(max_double, lst, ?dbl)
    !println(maximum)
    !my_map(double, lst, ?dbl)
    !println(maximum)
    # !my_map(print_double, lst, ?dbl)
}

======================================================================
AFTER EVERYTHING:
 Module main_hello2
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : main_hello2.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: main_hello2.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("hello, ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @main_hello2:nn:nn
    wybe.string.print<0>("world!":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'main_hello2'


 


@main_hello2.4 =    constant {i64, i64} { i64 6, i64 ptrtoint ([?? x i8]* @main_hello2.3 to i64) }


@main_hello2.2 =    constant {i64, i64} { i64 7, i64 ptrtoint ([?? x i8]* @main_hello2.1 to i64) }


@main_hello2.1 =    constant [?? x i8] c"hello, \00"


@main_hello2.3 =    constant [?? x i8] c"world!\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"main_hello2.<0>"()    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @main_hello2.2, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @main_hello2.4, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

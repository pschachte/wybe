======================================================================
AFTER EVERYTHING:
 Module compute
  public submods  : 
  public types    : 
  public resources: 
  public procs    : compute.<0>
  imports         : use math
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    math.utils.factorial<0>(4:wybe.int, ?tmp$0#0:wybe.int) @compute:3:10
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$4#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$4#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign c print_float(65.55555555555556:wybe.float, ~#io#1:wybe.phantom, ?tmp$9#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$9#0:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'compute'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_float(double)    


declare external ccc  void @print_int(i64)    


declare external fastcc  i64 @"math.utils.factorial<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"compute.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i64  @"math.utils.factorial<0>"(i64  4)  
  tail call ccc  void  @print_int(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_float(double  6.555556e1)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module math
  public submods  : 
  public types    : 
  public resources: 
  public procs    : math.temperature.toCelsius<0>
                    math.utils.<0>
                    math.utils.factorial<0>
  imports         : public use math.temperature
                    public use math.utils
  types           : 
  resources       : 
  submodules      : math.temperature, math.utils
  procs           : 


  LLVM code       :

; ModuleID = 'math'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    
--------------------------------------------------
 Module math.temperature
  public submods  : 
  public types    : 
  public resources: 
  public procs    : math.temperature.toCelsius<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

toCelsius > public inline (0 calls)
0: toCelsius(f#0:wybe.float, ?$#0:wybe.float):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm fsub(~f#0:wybe.float, 32.0:wybe.float, ?tmp$1#0:wybe.float) @wybe:nn:nn
    foreign llvm fdiv(~tmp$1#0:wybe.float, 1.8:wybe.float, ?$#0:wybe.float) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'math.temperature'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  double @"math.temperature.toCelsius<0>"(double  %"f#0")    {
entry:
  %"1$tmp$1#0" = fsub double %"f#0", 3.200000e1 
  %"1$$#0" = fdiv double %"1$tmp$1#0", 1.800000e0 
  ret double %"1$$#0" 
}
--------------------------------------------------
 Module math.utils
  public submods  : 
  public types    : 
  public resources: 
  public procs    : math.utils.<0>
                    math.utils.factorial<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("Utils has been initialised.":wybe.string, ~#io#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn


factorial > public (1 calls)
0: factorial(n#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp sle(n#0:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.bool) @wybe:nn:nn
    case ~tmp$4#0:wybe.bool of
    0:
        foreign llvm sub(n#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.int) @wybe:nn:nn
        math.utils.factorial<0>(~tmp$3#0:wybe.int, ?tmp$2#0:wybe.int) @utils:2:34
        foreign llvm mul(~n#0:wybe.int, ~tmp$2#0:wybe.int, ?$#0:wybe.int) @wybe:nn:nn

    1:
        foreign llvm move(1:wybe.int, ?$#0:wybe.int) @utils:1:5


  LLVM code       :

; ModuleID = 'math.utils'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


@math.utils.1 =    constant [28 x i8] c"Utils has been initialised.\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"math.utils.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([28 x i8], [28 x i8]* @math.utils.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"math.utils.factorial<0>"(i64  %"n#0")    {
entry:
  %"1$tmp$4#0" = icmp sle i64 %"n#0", 0 
  br i1 %"1$tmp$4#0", label %if.then, label %if.else 
if.then:
  ret i64 1 
if.else:
  %"3$tmp$3#0" = sub   i64 %"n#0", 1 
  %"3$tmp$2#0" = tail call fastcc  i64  @"math.utils.factorial<0>"(i64  %"3$tmp$3#0")  
  %"3$$#0" = mul   i64 %"n#0", %"3$tmp$2#0" 
  ret i64 %"3$$#0" 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module compute
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : compute.<0>
  imports         : use math
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: compute.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    math.utils.factorial<0>(4:wybe.int, ?tmp#0##0:wybe.int) #0 @compute:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#3##0:wybe.phantom) @compute:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @compute:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @compute:nn:nn
    foreign c print_float(65.55555555555556:wybe.float, ~tmp#5##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @compute:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @compute:nn:nn
    foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @compute:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'compute'

source_filename = "!ROOT!/final-dump/compute.wybe"
target triple    ????


declare external fastcc i64 @"math.utils.factorial<0>"(i64)
declare external ccc void @print_float(double)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"compute.<0>"() {
  %"tmp#0##0" = tail call fastcc i64 @"math.utils.factorial<0>"(i64 4)
  call ccc void @print_int(i64 %"tmp#0##0")
  call ccc void @putchar(i8 10)
  call ccc void @print_float(double 65.55555555555556)
  call ccc void @putchar(i8 10)
  ret void
}

--------------------------------------------------
 Module math
  representation  : (not a type)
  public submods  : temperature -> math.temperature
                    utils -> math.utils
  public resources: 
  public procs    : math.temperature.toCelsius<0>
                    math.utils.<0>
                    math.utils.factorial<0>
  imports         : public use math.temperature
                    public use math.utils
                    use wybe
  resources       : 
  submodules      : math.temperature, math.utils
  procs           : 


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'math'

source_filename = "!ROOT!/final-dump/math/_.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

--------------------------------------------------
 Module math.temperature
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : math.temperature.toCelsius<0>
  imports         : use wybe
  resources       : 
  procs           : 

proc toCelsius > public {inline} (0 calls)
0: math.temperature.toCelsius<0>
toCelsius(f##0:wybe.float, ?#result##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm fsub(~f##0:wybe.float, 32.0:wybe.float, ?tmp#1##0:wybe.float) @temperature:nn:nn
    foreign llvm fdiv(~tmp#1##0:wybe.float, 1.8:wybe.float, ?#result##0:wybe.float) @temperature:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'math.temperature'

source_filename = "!ROOT!/final-dump/math/temperature.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc double @"math.temperature.toCelsius<0>"(double %"f##0") {
  %"tmp#1##0" = fsub double %"f##0", 32.0
  %"tmp#6##0" = fdiv double %"tmp#1##0", 1.8
  ret double %"tmp#6##0"
}

--------------------------------------------------
 Module math.utils
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : math.utils.<0>
                    math.utils.factorial<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: math.utils.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("Utils has been initialised.":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @utils:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @utils:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @utils:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @utils:nn:nn


proc factorial > public (1 calls)
0: math.utils.factorial<0>
factorial(n##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sle(n##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @utils:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm sub(n##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @utils:nn:nn
        math.utils.factorial<0>(~tmp#3##0:wybe.int, ?tmp#2##0:wybe.int) #2 @utils:nn:nn
        foreign llvm mul(~n##0:wybe.int, ~tmp#2##0:wybe.int, ?#result##0:wybe.int) @utils:nn:nn

    1:
        foreign llvm move(1:wybe.int, ?#result##0:wybe.int) @utils:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'math.utils'

source_filename = "!ROOT!/final-dump/math/utils.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"Utils has been initialised.\00", align 8
@"string#1" = private unnamed_addr constant {i64, i64} { i64 27, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"math.utils.<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#1" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i64 @"math.utils.factorial<0>"(i64 %"n##0") {
  %"tmp#4##0" = icmp sle i64 %"n##0", 0
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  ret i64 1
if.else.0:
  %"tmp#3##0" = sub i64 %"n##0", 1
  %"tmp#2##0" = tail call fastcc i64 @"math.utils.factorial<0>"(i64 %"tmp#3##0")
  %"tmp#11##0" = mul i64 %"n##0", %"tmp#2##0"
  ret i64 %"tmp#11##0"
}

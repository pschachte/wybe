======================================================================
AFTER EVERYTHING:
 Module import_in_sub_mod_lib
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : import_in_sub_mod_lib.foo<0>
  imports         : use wybe
  resources       : 
  procs           : 

foo > public {inline} (0 calls)
0: import_in_sub_mod_lib.foo<0>
foo(v#0:wybe.int, io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_int(~v#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'import_in_sub_mod_lib'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"import_in_sub_mod_lib.foo<0>"(i64  %"v#0")    {
entry:
  tail call ccc  void  @print_int(i64  %"v#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module import_in_sub_mod_main
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : import_in_sub_mod_main.<0>
  imports         : use import_in_sub_mod_main.sub
                    use wybe
  resources       : 
  submodules      : import_in_sub_mod_main.sub
  procs           : 

*main* > public {inline} (0 calls)
0: import_in_sub_mod_main.<0>
(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_int(10:wybe.int, ~#io#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'import_in_sub_mod_main'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"import_in_sub_mod_main.<0>"()    {
entry:
  tail call ccc  void  @print_int(i64  10)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module import_in_sub_mod_main.sub
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : import_in_sub_mod_main.sub.bar<0>
  imports         : use import_in_sub_mod_lib
                    use import_in_sub_mod_main
                    use wybe
  resources       : 
  procs           : 

bar > public {inline} (0 calls)
0: import_in_sub_mod_main.sub.bar<0>
bar(v#0:wybe.int, io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_int(~v#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'import_in_sub_mod_main.sub'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"import_in_sub_mod_main.sub.bar<0>"(i64  %"v#0")    {
entry:
  tail call ccc  void  @print_int(i64  %"v#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

======================================================================
AFTER EVERYTHING:
 Module exp_if
  public submods  : 
  public types    : 
  public resources: 
  public procs    : exp_if.<0>
                    exp_if.if_test<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("expect larger: ":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    exp_if.if_test<0>(3:wybe.int, ?tmp$0#0:wybe.string) @exp_if:5:8
    foreign c print_string(~tmp$0#0:wybe.string, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn


if_test > public (1 calls)
0: if_test(x#0:wybe.int, ?$#0:wybe.string):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp sgt(~x#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move("smaller":wybe.string, ?$#0:wybe.string) @exp_if:2:5

    1:
        foreign llvm move("larger":wybe.string, ?$#0:wybe.string) @exp_if:2:5


  LLVM code       :

; ModuleID = 'exp_if'


 


declare external ccc  void @print_string(i64)    


@exp_if.1 =    constant [16 x i8] c"expect larger: \00"


@exp_if.5 =    constant [8 x i8] c"smaller\00"


@exp_if.3 =    constant [7 x i8] c"larger\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"exp_if.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([16 x i8], [16 x i8]* @exp_if.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  %"tmp$0#0" = tail call fastcc  i64  @"exp_if.if_test<0>"(i64  3)  
  tail call ccc  void  @print_string(i64  %"tmp$0#0")  
  ret void 
}


define external fastcc  i64 @"exp_if.if_test<0>"(i64  %"x#0")    {
entry:
  %"tmp$1#0" = icmp sgt i64 %"x#0", 0 
  br i1 %"tmp$1#0", label %if.then, label %if.else 
if.then:
  %4 = ptrtoint i8* getelementptr inbounds ([7 x i8], [7 x i8]* @exp_if.3, i32 0, i32 0) to i64 
  ret i64 %4 
if.else:
  %6 = ptrtoint i8* getelementptr inbounds ([8 x i8], [8 x i8]* @exp_if.5, i32 0, i32 0) to i64 
  ret i64 %6 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module exp_if
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : exp_if.<0>
                    exp_if.if_test<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: exp_if.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("expect larger: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @exp_if:nn:nn
    exp_if.if_test<0>(3:wybe.int, ?tmp#0##0:wybe.string) #1 @exp_if:nn:nn
    wybe.string.print<0>(~tmp#0##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @exp_if:nn:nn


proc if_test > public (1 calls)
0: exp_if.if_test<0>
if_test(x##0:wybe.int, ?#result##0:wybe.string)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sgt(~x##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool) @exp_if:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move("smaller":wybe.string, ?#result##0:wybe.string) @exp_if:nn:nn

    1:
        foreign llvm move("larger":wybe.string, ?#result##0:wybe.string) @exp_if:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'exp_if'

source_filename = "!ROOT!/final-dump/exp_if.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"expect larger: \00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"larger\00", align 8
@"cstring#2" = private unnamed_addr constant [ ?? x i8 ] c"smaller\00", align 8
@"string#3" = private unnamed_addr constant {i64, i64} { i64 15, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#4" = private unnamed_addr constant {i64, i64} { i64 6, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8
@"string#5" = private unnamed_addr constant {i64, i64} { i64 7, i64 ptrtoint( ptr @"cstring#2" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"exp_if.<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#3" to i64 ))
  %"tmp#0##0" = tail call fastcc i64 @"exp_if.if_test<0>"(i64 3)
  tail call fastcc void @"wybe.string.print<0>"(i64 %"tmp#0##0")
  ret void
}

define external fastcc i64 @"exp_if.if_test<0>"(i64 %"x##0") {
  %"tmp#1##0" = icmp sgt i64 %"x##0", 0
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  ret i64 ptrtoint( ptr @"string#4" to i64 )
if.else.0:
  ret i64 ptrtoint( ptr @"string#5" to i64 )
}

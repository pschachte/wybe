======================================================================
AFTER EVERYTHING:
 Module dont_care_constraint
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : dont_care_constraint.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: dont_care_constraint.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @c_string:nn:nn
    foreign c read_line(?tmp#2##0:wybe.c_string, ~tmp#1##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @c_string:nn:nn
    foreign lpvm store(~%tmp#3##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @c_string:nn:nn

  LLVM code       :

; ModuleID = 'dont_care_constraint'


 


declare external ccc  i64 @read_line()    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"dont_care_constraint.<0>"() alwaysinline   {
entry:
  %0 = tail call ccc  i64  @read_line()  
  ret void 
}

======================================================================
AFTER EVERYTHING:
 Module det_for
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : det_for.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,impure} (0 calls)
0: det_for.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    det_for.gen#1<0>(0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @det_for:nn:nn


[|] > {inline} (1 calls)
0: det_for.[|]<0>
[|](?value##0:wybe.int, ?next##0:wybe.int, current##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(current##0:wybe.int, ?value##0:wybe.int) @det_for:nn:nn
    foreign llvm add(~current##0:wybe.int, 1:wybe.int, ?next##0:wybe.int) @int:nn:nn


gen#1 > (2 calls)
0: det_for.gen#1<0>
gen#1(tmp#0##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(tmp#0##0:wybe.int, 1:wybe.int, ?tmp#0##1:wybe.int) @int:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#3##0:wybe.phantom) @io:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    det_for.gen#1<0>(~tmp#0##1:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @det_for:nn:nn

  LLVM code       :

; ModuleID = 'det_for'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"det_for.<0>"()    {
entry:
  tail call fastcc  void  @"det_for.gen#1<0>"(i64  0)  
  ret void 
}


define external fastcc  {i64, i64} @"det_for.[|]<0>"(i64  %"current##0")    {
entry:
  %"1#next##0" = add   i64 %"current##0", 1 
  %1 = insertvalue {i64, i64} undef, i64 %"current##0", 0 
  %2 = insertvalue {i64, i64} %1, i64 %"1#next##0", 1 
  ret {i64, i64} %2 
}


define external fastcc  void @"det_for.gen#1<0>"(i64  %"tmp#0##0")    {
entry:
  %"1#tmp#0##1" = add   i64 %"tmp#0##0", 1 
  tail call ccc  void  @print_int(i64  %"tmp#0##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"det_for.gen#1<0>"(i64  %"1#tmp#0##1")  
  ret void 
}

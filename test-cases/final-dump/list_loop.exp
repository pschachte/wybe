======================================================================
AFTER EVERYTHING:
 Module list_loop
  representation  : (not a type)
  public submods  : intlist -> list_loop.intlist
  public resources: 
  public procs    : list_loop.<0>
                    list_loop.intlist.=<0>
                    list_loop.intlist.cons<0>
                    list_loop.intlist.cons<1>
                    list_loop.intlist.head<0>
                    list_loop.intlist.head<1>
                    list_loop.intlist.nil<0>
                    list_loop.intlist.tail<0>
                    list_loop.intlist.tail<1>
                    list_loop.intlist.~=<0>
  imports         : public use list_loop.intlist
                    use wybe
  resources       : 
  submodules      : list_loop.intlist
  procs           : 

module top-level code > public {semipure} (0 calls)
0: list_loop.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#8##0:list_loop.intlist) @list_loop:nn:nn
    foreign lpvm mutate(~tmp#8##0:list_loop.intlist, ?tmp#9##0:list_loop.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int) @list_loop:nn:nn
    foreign lpvm mutate(~tmp#9##0:list_loop.intlist, ?tmp#10##0:list_loop.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:list_loop.intlist) @list_loop:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#13##0:list_loop.intlist) @list_loop:nn:nn
    foreign lpvm mutate(~tmp#13##0:list_loop.intlist, ?tmp#14##0:list_loop.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int) @list_loop:nn:nn
    foreign lpvm mutate(~tmp#14##0:list_loop.intlist, ?tmp#15##0:list_loop.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp#10##0:list_loop.intlist) @list_loop:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#18##0:list_loop.intlist) @list_loop:nn:nn
    foreign lpvm mutate(~tmp#18##0:list_loop.intlist, ?tmp#19##0:list_loop.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int) @list_loop:nn:nn
    foreign lpvm mutate(~tmp#19##0:list_loop.intlist, ?tmp#20##0:list_loop.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp#15##0:list_loop.intlist) @list_loop:nn:nn
    list_loop.gen#1<0>(~tmp#20##0:list_loop.intlist, ~tmp#20##0:list_loop.intlist, ~tmp#15##0:list_loop.intlist, ~tmp#10##0:list_loop.intlist, 0:list_loop.intlist, ~tmp#20##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @list_loop:nn:nn


gen#1 > (2 calls)
0: list_loop.gen#1<0>
gen#1(l##0:list_loop.intlist, tmp#0##0:list_loop.intlist, tmp#1##0:list_loop.intlist, tmp#2##0:list_loop.intlist, tmp#3##0:list_loop.intlist, x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(l##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:

    1:
        foreign lpvm access(l##0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @list_loop:nn:nn
        foreign lpvm access(~l##0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?l##1:list_loop.intlist) @list_loop:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @int:nn:nn
        foreign c print_int(h##0:wybe.int, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @int:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        list_loop.gen#3<0>(~h##0:wybe.int, ~l##1:list_loop.intlist, ~x##0:list_loop.intlist, ~tmp#0##0:list_loop.intlist, ~tmp#1##0:list_loop.intlist, ~tmp#2##0:list_loop.intlist, ~tmp#3##0:list_loop.intlist, ~x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @list_loop:nn:nn



gen#2 > {inline} (1 calls)
0: list_loop.gen#2<0>
gen#2(h##0:wybe.int, l##0:list_loop.intlist, tmp#0##0:list_loop.intlist, tmp#1##0:list_loop.intlist, tmp#2##0:list_loop.intlist, tmp#3##0:list_loop.intlist, x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @int:nn:nn
    foreign c print_int(h##0:wybe.int, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    list_loop.gen#3<0>(~h##0:wybe.int, ~l##0:list_loop.intlist, ~x##0:list_loop.intlist, ~tmp#0##0:list_loop.intlist, ~tmp#1##0:list_loop.intlist, ~tmp#2##0:list_loop.intlist, ~tmp#3##0:list_loop.intlist, ~x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @list_loop:nn:nn


gen#3 > (2 calls)
0: list_loop.gen#3<0>
gen#3(h##0:wybe.int, l##0:list_loop.intlist, l2##0:list_loop.intlist, tmp#0##0:list_loop.intlist, tmp#1##0:list_loop.intlist, tmp#2##0:list_loop.intlist, tmp#3##0:list_loop.intlist, x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(l2##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool)
    case ~tmp#6##0:wybe.bool of
    0:
        list_loop.gen#1<0>(~l##0:list_loop.intlist, ~tmp#0##0:list_loop.intlist, ~tmp#1##0:list_loop.intlist, ~tmp#2##0:list_loop.intlist, ~tmp#3##0:list_loop.intlist, ~x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @list_loop:nn:nn

    1:
        foreign lpvm access(l2##0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h2##0:wybe.int) @list_loop:nn:nn
        foreign lpvm access(~l2##0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?l2##1:list_loop.intlist) @list_loop:nn:nn
        wybe.string.print<0>("    ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @list_loop:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @int:nn:nn
        foreign c print_int(h##0:wybe.int, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @int:nn:nn
        foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
        wybe.string.print<0>(" ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @list_loop:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~h2##0:wybe.int, ~tmp#18##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @int:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        list_loop.gen#3<0>(~h##0:wybe.int, ~l##0:list_loop.intlist, ~l2##1:list_loop.intlist, ~tmp#0##0:list_loop.intlist, ~tmp#1##0:list_loop.intlist, ~tmp#2##0:list_loop.intlist, ~tmp#3##0:list_loop.intlist, ~x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @list_loop:nn:nn



gen#4 > {inline} (1 calls)
0: list_loop.gen#4<0>
gen#4(h##0:wybe.int, h2##0:wybe.int, l##0:list_loop.intlist, l2##0:list_loop.intlist, tmp#0##0:list_loop.intlist, tmp#1##0:list_loop.intlist, tmp#2##0:list_loop.intlist, tmp#3##0:list_loop.intlist, x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("    ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @list_loop:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @int:nn:nn
    foreign c print_int(h##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(" ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @list_loop:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~h2##0:wybe.int, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    list_loop.gen#3<0>(~h##0:wybe.int, ~l##0:list_loop.intlist, ~l2##0:list_loop.intlist, ~tmp#0##0:list_loop.intlist, ~tmp#1##0:list_loop.intlist, ~tmp#2##0:list_loop.intlist, ~tmp#3##0:list_loop.intlist, ~x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @list_loop:nn:nn

  LLVM code       :

; ModuleID = 'list_loop'


 


@list_loop.3 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @list_loop.2 to i64) }


@list_loop.1 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @list_loop.0 to i64) }


@list_loop.2 =    constant [?? x i8] c" \00"


@list_loop.0 =    constant [?? x i8] c"    \00"


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"list_loop.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 3, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 2, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 1, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %8, i64* %17 
  tail call fastcc  void  @"list_loop.gen#1<0>"(i64  %14, i64  %14, i64  %8, i64  %2, i64  0, i64  %14)  
  ret void 
}


define external fastcc  void @"list_loop.gen#1<0>"(i64  %"l##0", i64  %"tmp#0##0", i64  %"tmp#1##0", i64  %"tmp#2##0", i64  %"tmp#3##0", i64  %"x##0")    {
entry:
  %0 = icmp ne i64 %"l##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"l##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"l##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"list_loop.gen#3<0>"(i64  %2, i64  %5, i64  %"x##0", i64  %"tmp#0##0", i64  %"tmp#1##0", i64  %"tmp#2##0", i64  %"tmp#3##0", i64  %"x##0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"list_loop.gen#2<0>"(i64  %"h##0", i64  %"l##0", i64  %"tmp#0##0", i64  %"tmp#1##0", i64  %"tmp#2##0", i64  %"tmp#3##0", i64  %"x##0") alwaysinline   {
entry:
  tail call ccc  void  @print_int(i64  %"h##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"list_loop.gen#3<0>"(i64  %"h##0", i64  %"l##0", i64  %"x##0", i64  %"tmp#0##0", i64  %"tmp#1##0", i64  %"tmp#2##0", i64  %"tmp#3##0", i64  %"x##0")  
  ret void 
}


define external fastcc  void @"list_loop.gen#3<0>"(i64  %"h##0", i64  %"l##0", i64  %"l2##0", i64  %"tmp#0##0", i64  %"tmp#1##0", i64  %"tmp#2##0", i64  %"tmp#3##0", i64  %"x##0")    {
entry:
  %0 = icmp ne i64 %"l2##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"l2##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"l2##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @list_loop.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %"h##0")  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @list_loop.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"list_loop.gen#3<0>"(i64  %"h##0", i64  %"l##0", i64  %5, i64  %"tmp#0##0", i64  %"tmp#1##0", i64  %"tmp#2##0", i64  %"tmp#3##0", i64  %"x##0")  
  ret void 
if.else:
  tail call fastcc  void  @"list_loop.gen#1<0>"(i64  %"l##0", i64  %"tmp#0##0", i64  %"tmp#1##0", i64  %"tmp#2##0", i64  %"tmp#3##0", i64  %"x##0")  
  ret void 
}


define external fastcc  void @"list_loop.gen#4<0>"(i64  %"h##0", i64  %"h2##0", i64  %"l##0", i64  %"l2##0", i64  %"tmp#0##0", i64  %"tmp#1##0", i64  %"tmp#2##0", i64  %"tmp#3##0", i64  %"x##0") alwaysinline   {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @list_loop.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %"h##0")  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @list_loop.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %"h2##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"list_loop.gen#3<0>"(i64  %"h##0", i64  %"l##0", i64  %"l2##0", i64  %"tmp#0##0", i64  %"tmp#1##0", i64  %"tmp#2##0", i64  %"tmp#3##0", i64  %"x##0")  
  ret void 
}
--------------------------------------------------
 Module list_loop.intlist
  representation  : address
  public submods  : 
  public resources: 
  public procs    : list_loop.intlist.=<0>
                    list_loop.intlist.cons<0>
                    list_loop.intlist.cons<1>
                    list_loop.intlist.head<0>
                    list_loop.intlist.head<1>
                    list_loop.intlist.nil<0>
                    list_loop.intlist.tail<0>
                    list_loop.intlist.tail<1>
                    list_loop.intlist.~=<0>
  imports         : use list_loop
                    use wybe
  resources       : 
  procs           : 

= > public (2 calls)
0: list_loop.intlist.=<0>
=(#left##0:list_loop.intlist, #right##0:list_loop.intlist, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:list_loop.intlist, ~#right##0:list_loop.intlist, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#head##0:wybe.int) @list_loop:nn:nn
        foreign lpvm access(~#left##0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#tail##0:list_loop.intlist) @list_loop:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
        case ~tmp#9##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#head##0:wybe.int) @list_loop:nn:nn
            foreign lpvm access(~#right##0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#tail##0:list_loop.intlist) @list_loop:nn:nn
            foreign llvm icmp_eq(~#left#head##0:wybe.int, ~#right#head##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                list_loop.intlist.=<0>(~#left#tail##0:list_loop.intlist, ~#right#tail##0:list_loop.intlist, ?#success##0:wybe.bool) #3





cons > public {inline} (0 calls)
0: list_loop.intlist.cons<0>
cons(head##0:wybe.int, tail##0:list_loop.intlist, ?#result##0:list_loop.intlist)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:list_loop.intlist) @list_loop:nn:nn
    foreign lpvm mutate(~#rec##0:list_loop.intlist, ?#rec##1:list_loop.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head##0:wybe.int) @list_loop:nn:nn
    foreign lpvm mutate(~#rec##1:list_loop.intlist, ?#result##0:list_loop.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail##0:list_loop.intlist) @list_loop:nn:nn
cons > public {inline} (12 calls)
1: list_loop.intlist.cons<1>
cons(?head##0:wybe.int, ?tail##0:list_loop.intlist, #result##0:list_loop.intlist, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head##0:wybe.int)
        foreign llvm move(undef:list_loop.intlist, ?tail##0:list_loop.intlist)

    1:
        foreign lpvm access(#result##0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head##0:wybe.int) @list_loop:nn:nn
        foreign lpvm access(~#result##0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail##0:list_loop.intlist) @list_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



head > public {inline} (0 calls)
0: list_loop.intlist.head<0>
head(#rec##0:list_loop.intlist, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @list_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

head > public {inline} (0 calls)
1: list_loop.intlist.head<1>
head(#rec##0:list_loop.intlist, ?#rec##1:list_loop.intlist, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:list_loop.intlist, ?#rec##1:list_loop.intlist)

    1:
        foreign lpvm mutate(~#rec##0:list_loop.intlist, ?#rec##1:list_loop.intlist, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @list_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



nil > public {inline} (0 calls)
0: list_loop.intlist.nil<0>
nil(?#result##0:list_loop.intlist)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:list_loop.intlist, ?#result##0:list_loop.intlist)


tail > public {inline} (0 calls)
0: list_loop.intlist.tail<0>
tail(#rec##0:list_loop.intlist, ?#result##0:list_loop.intlist, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:list_loop.intlist, ?#result##0:list_loop.intlist)

    1:
        foreign lpvm access(~#rec##0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:list_loop.intlist) @list_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

tail > public {inline} (0 calls)
1: list_loop.intlist.tail<1>
tail(#rec##0:list_loop.intlist, ?#rec##1:list_loop.intlist, #field##0:list_loop.intlist, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:list_loop.intlist, ?#rec##1:list_loop.intlist)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:list_loop.intlist, ?#rec##1:list_loop.intlist, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:list_loop.intlist) @list_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: list_loop.intlist.~=<0>
~=(#left##0:list_loop.intlist, #right##0:list_loop.intlist, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    list_loop.intlist.=<0>(~#left##0:list_loop.intlist, ~#right##0:list_loop.intlist, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'list_loop.intlist'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"list_loop.intlist.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp ne i64 %"#left##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp ne i64 %"#right##0", 0 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  %14 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %14 
if.then1:
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = load  i64, i64* %7 
  %9 = add   i64 %"#right##0", 8 
  %10 = inttoptr i64 %9 to i64* 
  %11 = load  i64, i64* %10 
  %12 = icmp eq i64 %2, %8 
  br i1 %12, label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %13 = musttail call fastcc  i1  @"list_loop.intlist.=<0>"(i64  %5, i64  %11)  
  ret i1 %13 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"list_loop.intlist.cons<0>"(i64  %"head##0", i64  %"tail##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"head##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"tail##0", i64* %5 
  ret i64 %2 
}


define external fastcc  {i64, i64, i1} @"list_loop.intlist.cons<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#result##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i64, i1} undef, i64 %2, 0 
  %7 = insertvalue {i64, i64, i1} %6, i64 %5, 1 
  %8 = insertvalue {i64, i64, i1} %7, i1 1, 2 
  ret {i64, i64, i1} %8 
if.else:
  %9 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i64, i1} %9, i64 undef, 1 
  %11 = insertvalue {i64, i64, i1} %10, i1 0, 2 
  ret {i64, i64, i1} %11 
}


define external fastcc  {i64, i1} @"list_loop.intlist.head<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = insertvalue {i64, i1} undef, i64 %2, 0 
  %4 = insertvalue {i64, i1} %3, i1 1, 1 
  ret {i64, i1} %4 
if.else:
  %5 = insertvalue {i64, i1} undef, i64 undef, 0 
  %6 = insertvalue {i64, i1} %5, i1 0, 1 
  ret {i64, i1} %6 
}


define external fastcc  {i64, i1} @"list_loop.intlist.head<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  store  i64 %"#field##0", i64* %7 
  %8 = insertvalue {i64, i1} undef, i64 %3, 0 
  %9 = insertvalue {i64, i1} %8, i1 1, 1 
  ret {i64, i1} %9 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
}


define external fastcc  i64 @"list_loop.intlist.nil<0>"() alwaysinline   {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"list_loop.intlist.tail<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"list_loop.intlist.tail<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 8 
  %8 = inttoptr i64 %7 to i64* 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %3, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  i1 @"list_loop.intlist.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i1  @"list_loop.intlist.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}

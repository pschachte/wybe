======================================================================
AFTER EVERYTHING:
 Module list_loop
  public submods  : 
  public types    : intlist: (list_loop.intlist,Just address)
  public resources: 
  public procs    : list_loop.<0>
                    list_loop.intlist./=<0>
                    list_loop.intlist.=<0>
                    list_loop.intlist.[]<0>
                    list_loop.intlist.[|]<0>
                    list_loop.intlist.[|]<1>
                    list_loop.intlist.head<0>
                    list_loop.intlist.head<1>
                    list_loop.intlist.tail<0>
                    list_loop.intlist.tail<1>
  imports         : public use list_loop.intlist
                    use wybe
  types           : intlist/public  is address { []() @list_loop:1:24 | [|](head:int, tail:intlist) @list_loop:1:29  }  @list_loop:1:5
  resources       : 
  submodules      : list_loop.intlist
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, ?argc#1:wybe.int, argv#0:wybe.int, ?argv#1:wybe.int, exit_code#0:wybe.int, ?exit_code#1:wybe.int, io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$8#0:list_loop.intlist)
    foreign lpvm mutate(~tmp$8#0:list_loop.intlist, ?tmp$9#0:list_loop.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int)
    foreign lpvm mutate(~tmp$9#0:list_loop.intlist, ?tmp$10#0:list_loop.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:list_loop.intlist)
    foreign lpvm alloc(16:wybe.int, ?tmp$13#0:list_loop.intlist)
    foreign lpvm mutate(~tmp$13#0:list_loop.intlist, ?tmp$14#0:list_loop.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$14#0:list_loop.intlist, ?tmp$15#0:list_loop.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$10#0:list_loop.intlist)
    foreign lpvm alloc(16:wybe.int, ?tmp$18#0:list_loop.intlist)
    foreign lpvm mutate(~tmp$18#0:list_loop.intlist, ?tmp$19#0:list_loop.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$19#0:list_loop.intlist, ?tmp$20#0:list_loop.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$15#0:list_loop.intlist)
    list_loop.gen$1<0>(~argc#0:wybe.int, ~argv#0:wybe.int, ~exit_code#0:wybe.int, ~io#0:wybe.phantom, ~tmp$20#0:list_loop.intlist, ~tmp$20#0:list_loop.intlist, ~tmp$15#0:list_loop.intlist, ~tmp$10#0:list_loop.intlist, 0:list_loop.intlist, ~tmp$20#0:list_loop.intlist, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#1:wybe.phantom) #4 @list_loop:5:1


gen$1 > (2 calls)
0: gen$1(argc#0:wybe.int, argv#0:wybe.int, exit_code#0:wybe.int, io#0:wybe.phantom, l#0:list_loop.intlist, tmp$0#0:list_loop.intlist, tmp$1#0:list_loop.intlist, tmp$2#0:list_loop.intlist, tmp$3#0:list_loop.intlist, x#0:list_loop.intlist, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne(l#0:list_loop.intlist, 0:wybe.int, ?tmp$7#0:wybe.bool)
    case ~tmp$7#0:wybe.bool of
    0:
        foreign llvm move(~argc#0:wybe.int, ?argc#1:wybe.int)
        foreign llvm move(~argv#0:wybe.int, ?argv#1:wybe.int)
        foreign llvm move(~exit_code#0:wybe.int, ?exit_code#1:wybe.int)
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        foreign lpvm access(l#0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~l#0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?l#1:list_loop.intlist)
        list_loop.gen$2<0>(~argc#0:wybe.int, ~argv#0:wybe.int, ~exit_code#0:wybe.int, ~h#0:wybe.int, ~io#0:wybe.phantom, ~l#1:list_loop.intlist, ~tmp$0#0:list_loop.intlist, ~tmp$1#0:list_loop.intlist, ~tmp$2#0:list_loop.intlist, ~tmp$3#0:list_loop.intlist, ~x#0:list_loop.intlist, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#1:wybe.phantom) #1



gen$2 > inline (1 calls)
0: gen$2(argc#0:wybe.int, argv#0:wybe.int, exit_code#0:wybe.int, h#0:wybe.int, io#0:wybe.phantom, l#0:list_loop.intlist, tmp$0#0:list_loop.intlist, tmp$1#0:list_loop.intlist, tmp$2#0:list_loop.intlist, tmp$3#0:list_loop.intlist, x#0:list_loop.intlist, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_int(h#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$7#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$7#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    list_loop.gen$3<0>(~argc#0:wybe.int, ~argv#0:wybe.int, ~exit_code#0:wybe.int, ~h#0:wybe.int, ~io#1:wybe.phantom, ~l#0:list_loop.intlist, ~x#0:list_loop.intlist, ~tmp$0#0:list_loop.intlist, ~tmp$1#0:list_loop.intlist, ~tmp$2#0:list_loop.intlist, ~tmp$3#0:list_loop.intlist, ~x#0:list_loop.intlist, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#2:wybe.phantom) #1 @list_loop:8:5


gen$3 > (2 calls)
0: gen$3(argc#0:wybe.int, argv#0:wybe.int, exit_code#0:wybe.int, h#0:wybe.int, io#0:wybe.phantom, l#0:list_loop.intlist, l2#0:list_loop.intlist, tmp$0#0:list_loop.intlist, tmp$1#0:list_loop.intlist, tmp$2#0:list_loop.intlist, tmp$3#0:list_loop.intlist, x#0:list_loop.intlist, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne(l2#0:list_loop.intlist, 0:wybe.int, ?tmp$6#0:wybe.bool)
    case ~tmp$6#0:wybe.bool of
    0:
        list_loop.gen$1<0>(~argc#0:wybe.int, ~argv#0:wybe.int, ~exit_code#0:wybe.int, ~io#0:wybe.phantom, ~l#0:list_loop.intlist, ~tmp$0#0:list_loop.intlist, ~tmp$1#0:list_loop.intlist, ~tmp$2#0:list_loop.intlist, ~tmp$3#0:list_loop.intlist, ~x#0:list_loop.intlist, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#1:wybe.phantom) #2 @list_loop:5:1

    1:
        foreign lpvm access(l2#0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h2#0:wybe.int)
        foreign lpvm access(~l2#0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?l2#1:list_loop.intlist)
        list_loop.gen$4<0>(~argc#0:wybe.int, ~argv#0:wybe.int, ~exit_code#0:wybe.int, ~h#0:wybe.int, ~h2#0:wybe.int, ~io#0:wybe.phantom, ~l#0:list_loop.intlist, ~l2#1:list_loop.intlist, ~tmp$0#0:list_loop.intlist, ~tmp$1#0:list_loop.intlist, ~tmp$2#0:list_loop.intlist, ~tmp$3#0:list_loop.intlist, ~x#0:list_loop.intlist, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#1:wybe.phantom) #1



gen$4 > inline (1 calls)
0: gen$4(argc#0:wybe.int, argv#0:wybe.int, exit_code#0:wybe.int, h#0:wybe.int, h2#0:wybe.int, io#0:wybe.phantom, l#0:list_loop.intlist, l2#0:list_loop.intlist, tmp$0#0:list_loop.intlist, tmp$1#0:list_loop.intlist, tmp$2#0:list_loop.intlist, tmp$3#0:list_loop.intlist, x#0:list_loop.intlist, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#5:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("    ":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign c print_int(h#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign c print_string(" ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    foreign c print_int(~h2#0:wybe.int, ~#io#3:wybe.phantom, ?tmp$12#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$12#0:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
    list_loop.gen$3<0>(~argc#0:wybe.int, ~argv#0:wybe.int, ~exit_code#0:wybe.int, ~h#0:wybe.int, ~io#4:wybe.phantom, ~l#0:list_loop.intlist, ~l2#0:list_loop.intlist, ~tmp$0#0:list_loop.intlist, ~tmp$1#0:list_loop.intlist, ~tmp$2#0:list_loop.intlist, ~tmp$3#0:list_loop.intlist, ~x#0:list_loop.intlist, ?argc#1:wybe.int, ?argv#1:wybe.int, ?exit_code#1:wybe.int, ?io#5:wybe.phantom) #4 @list_loop:8:5

  LLVM code       :

; ModuleID = 'list_loop'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_string(i64)    


@list_loop.79 =    constant [2 x i8] c" \00"


@list_loop.77 =    constant [5 x i8] c"    \00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  {i64, i64, i64} @"list_loop.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 3, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 0, i64* %8 
  %9 = trunc i64 16 to i32  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  %9)  
  %11 = ptrtoint i8* %10 to i64 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 2, i64* %13 
  %14 = add   i64 %11, 8 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 %3, i64* %16 
  %17 = trunc i64 16 to i32  
  %18 = tail call ccc  i8*  @wybe_malloc(i32  %17)  
  %19 = ptrtoint i8* %18 to i64 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  store  i64 1, i64* %21 
  %22 = add   i64 %19, 8 
  %23 = inttoptr i64 %22 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  store  i64 %11, i64* %24 
  %25 = tail call fastcc  {i64, i64, i64}  @"list_loop.gen$1<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0", i64  %19, i64  %19, i64  %11, i64  %3, i64  0, i64  %19)  
  %26 = extractvalue {i64, i64, i64} %25, 0 
  %27 = extractvalue {i64, i64, i64} %25, 1 
  %28 = extractvalue {i64, i64, i64} %25, 2 
  %29 = insertvalue {i64, i64, i64} undef, i64 %26, 0 
  %30 = insertvalue {i64, i64, i64} %29, i64 %27, 1 
  %31 = insertvalue {i64, i64, i64} %30, i64 %28, 2 
  ret {i64, i64, i64} %31 
}


define external fastcc  {i64, i64, i64} @"list_loop.gen$1<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0", i64  %"l#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"x#0")    {
entry:
  %"1$tmp$7#0" = icmp ne i64 %"l#0", 0 
  br i1 %"1$tmp$7#0", label %if.then, label %if.else 
if.then:
  %32 = inttoptr i64 %"l#0" to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  %35 = add   i64 %"l#0", 8 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %39 = tail call fastcc  {i64, i64, i64}  @"list_loop.gen$2<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0", i64  %34, i64  %38, i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"x#0")  
  %40 = extractvalue {i64, i64, i64} %39, 0 
  %41 = extractvalue {i64, i64, i64} %39, 1 
  %42 = extractvalue {i64, i64, i64} %39, 2 
  %43 = insertvalue {i64, i64, i64} undef, i64 %40, 0 
  %44 = insertvalue {i64, i64, i64} %43, i64 %41, 1 
  %45 = insertvalue {i64, i64, i64} %44, i64 %42, 2 
  ret {i64, i64, i64} %45 
if.else:
  %46 = insertvalue {i64, i64, i64} undef, i64 %"argc#0", 0 
  %47 = insertvalue {i64, i64, i64} %46, i64 %"argv#0", 1 
  %48 = insertvalue {i64, i64, i64} %47, i64 %"exit_code#0", 2 
  ret {i64, i64, i64} %48 
}


define external fastcc  {i64, i64, i64} @"list_loop.gen$2<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0", i64  %"h#0", i64  %"l#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"x#0")    {
entry:
  tail call ccc  void  @print_int(i64  %"h#0")  
  tail call ccc  void  @putchar(i8  10)  
  %49 = tail call fastcc  {i64, i64, i64}  @"list_loop.gen$3<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0", i64  %"h#0", i64  %"l#0", i64  %"x#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"x#0")  
  %50 = extractvalue {i64, i64, i64} %49, 0 
  %51 = extractvalue {i64, i64, i64} %49, 1 
  %52 = extractvalue {i64, i64, i64} %49, 2 
  %53 = insertvalue {i64, i64, i64} undef, i64 %50, 0 
  %54 = insertvalue {i64, i64, i64} %53, i64 %51, 1 
  %55 = insertvalue {i64, i64, i64} %54, i64 %52, 2 
  ret {i64, i64, i64} %55 
}


define external fastcc  {i64, i64, i64} @"list_loop.gen$3<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0", i64  %"h#0", i64  %"l#0", i64  %"l2#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"x#0")    {
entry:
  %"1$tmp$6#0" = icmp ne i64 %"l2#0", 0 
  br i1 %"1$tmp$6#0", label %if.then, label %if.else 
if.then:
  %56 = inttoptr i64 %"l2#0" to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = add   i64 %"l2#0", 8 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  %62 = load  i64, i64* %61 
  %63 = tail call fastcc  {i64, i64, i64}  @"list_loop.gen$4<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0", i64  %"h#0", i64  %58, i64  %"l#0", i64  %62, i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"x#0")  
  %64 = extractvalue {i64, i64, i64} %63, 0 
  %65 = extractvalue {i64, i64, i64} %63, 1 
  %66 = extractvalue {i64, i64, i64} %63, 2 
  %67 = insertvalue {i64, i64, i64} undef, i64 %64, 0 
  %68 = insertvalue {i64, i64, i64} %67, i64 %65, 1 
  %69 = insertvalue {i64, i64, i64} %68, i64 %66, 2 
  ret {i64, i64, i64} %69 
if.else:
  %70 = tail call fastcc  {i64, i64, i64}  @"list_loop.gen$1<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0", i64  %"l#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"x#0")  
  %71 = extractvalue {i64, i64, i64} %70, 0 
  %72 = extractvalue {i64, i64, i64} %70, 1 
  %73 = extractvalue {i64, i64, i64} %70, 2 
  %74 = insertvalue {i64, i64, i64} undef, i64 %71, 0 
  %75 = insertvalue {i64, i64, i64} %74, i64 %72, 1 
  %76 = insertvalue {i64, i64, i64} %75, i64 %73, 2 
  ret {i64, i64, i64} %76 
}


define external fastcc  {i64, i64, i64} @"list_loop.gen$4<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0", i64  %"h#0", i64  %"h2#0", i64  %"l#0", i64  %"l2#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"x#0")    {
entry:
  %78 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @list_loop.77, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %78)  
  tail call ccc  void  @print_int(i64  %"h#0")  
  %80 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @list_loop.79, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %80)  
  tail call ccc  void  @print_int(i64  %"h2#0")  
  tail call ccc  void  @putchar(i8  10)  
  %81 = tail call fastcc  {i64, i64, i64}  @"list_loop.gen$3<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0", i64  %"h#0", i64  %"l#0", i64  %"l2#0", i64  %"tmp$0#0", i64  %"tmp$1#0", i64  %"tmp$2#0", i64  %"tmp$3#0", i64  %"x#0")  
  %82 = extractvalue {i64, i64, i64} %81, 0 
  %83 = extractvalue {i64, i64, i64} %81, 1 
  %84 = extractvalue {i64, i64, i64} %81, 2 
  %85 = insertvalue {i64, i64, i64} undef, i64 %82, 0 
  %86 = insertvalue {i64, i64, i64} %85, i64 %83, 1 
  %87 = insertvalue {i64, i64, i64} %86, i64 %84, 2 
  ret {i64, i64, i64} %87 
}
--------------------------------------------------
 Module list_loop.intlist
  public submods  : 
  public types    : 
  public resources: 
  public procs    : list_loop.intlist./=<0>
                    list_loop.intlist.=<0>
                    list_loop.intlist.[]<0>
                    list_loop.intlist.[|]<0>
                    list_loop.intlist.[|]<1>
                    list_loop.intlist.head<0>
                    list_loop.intlist.head<1>
                    list_loop.intlist.tail<0>
                    list_loop.intlist.tail<1>
  imports         : use list_loop
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline (0 calls)
0: /=($left#0:list_loop.intlist, $right#0:list_loop.intlist, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    list_loop.intlist.=<0>(~$left#0:list_loop.intlist, ~$right#0:list_loop.intlist, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (5 calls)
0: =($left#0:list_loop.intlist, $right#0:list_loop.intlist, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($left#0:!wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp eq(~$left#0:list_loop.intlist, ~$right#0:list_loop.intlist, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($left#0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$head#0:wybe.int)
        foreign lpvm access(~$left#0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$tail#0:list_loop.intlist)
        foreign llvm icmp ne($right#0:list_loop.intlist, 0:wybe.int, ?tmp$9#0:wybe.bool)
        case ~tmp$9#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access($right#0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$head#0:wybe.int)
            foreign lpvm access(~$right#0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$tail#0:list_loop.intlist)
            foreign llvm icmp eq(~$left$head#0:wybe.int, ~$right$head#0:wybe.int, ?tmp$4#0:wybe.bool) @wybe:nn:nn
            case ~tmp$4#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                list_loop.intlist.=<0>(~$left$tail#0:list_loop.intlist, ~$right$tail#0:list_loop.intlist, ?$$#0:wybe.bool) #3





[] > public inline (0 calls)
0: [](?$#0:list_loop.intlist):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:list_loop.intlist, ?$#0:list_loop.intlist)


[|] > public inline (0 calls)
0: [|](head#0:wybe.int, tail#0:list_loop.intlist, ?$#0:list_loop.intlist):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!list_loop.intlist)
    foreign lpvm mutate(~%$rec#0:list_loop.intlist, ?%$rec#1:list_loop.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:list_loop.intlist, ?%$#0:list_loop.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail#0:list_loop.intlist)
[|] > public inline (12 calls)
1: [|](?head#0:wybe.int, ?tail#0:list_loop.intlist, $#0:list_loop.intlist, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($#0:list_loop.intlist, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($#0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head#0:wybe.int)
        foreign lpvm access(~$#0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail#0:list_loop.intlist)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



head > public inline (0 calls)
0: head($rec#0:list_loop.intlist, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($rec#0:list_loop.intlist, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

head > public inline (0 calls)
1: head($rec#0:list_loop.intlist, ?$rec#1:list_loop.intlist, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($rec#0:list_loop.intlist, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:list_loop.intlist, ?$rec#1:list_loop.intlist)

    1:
        foreign lpvm mutate(~%$rec#0:list_loop.intlist, ?%$rec#1:list_loop.intlist, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



tail > public inline (0 calls)
0: tail($rec#0:list_loop.intlist, ?$#0:list_loop.intlist, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($rec#0:list_loop.intlist, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:list_loop.intlist)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

tail > public inline (0 calls)
1: tail($rec#0:list_loop.intlist, ?$rec#1:list_loop.intlist, $field#0:list_loop.intlist, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp ne($rec#0:list_loop.intlist, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:list_loop.intlist, ?$rec#1:list_loop.intlist)

    1:
        foreign lpvm mutate noalias(~%$rec#0:list_loop.intlist, ?%$rec#1:list_loop.intlist, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:list_loop.intlist)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'list_loop.intlist'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"list_loop.intlist./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i1  @"list_loop.intlist.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  %"1$$$#0" = xor i1 %"1$tmp$0#0", 1 
  ret i1 %"1$$$#0" 
}


define external fastcc  i1 @"list_loop.intlist.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %"2$tmp$9#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"2$tmp$9#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"3$$$#0" 
if.then1:
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"4$tmp$4#0" = icmp eq i64 %3, %10 
  br i1 %"4$tmp$4#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6$$$#0" = tail call fastcc  i1  @"list_loop.intlist.=<0>"(i64  %7, i64  %14)  
  ret i1 %"6$$$#0" 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"list_loop.intlist.[]<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i64 @"list_loop.intlist.[|]<0>"(i64  %"head#0", i64  %"tail#0")    {
entry:
  %15 = trunc i64 16 to i32  
  %16 = tail call ccc  i8*  @wybe_malloc(i32  %15)  
  %17 = ptrtoint i8* %16 to i64 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  store  i64 %"head#0", i64* %19 
  %20 = add   i64 %17, 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"tail#0", i64* %22 
  ret i64 %17 
}


define external fastcc  {i64, i64, i1} @"list_loop.intlist.[|]<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %23 = inttoptr i64 %"$#0" to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"$#0", 8 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = insertvalue {i64, i64, i1} undef, i64 %25, 0 
  %31 = insertvalue {i64, i64, i1} %30, i64 %29, 1 
  %32 = insertvalue {i64, i64, i1} %31, i1 1, 2 
  ret {i64, i64, i1} %32 
if.else:
  %33 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %34 = insertvalue {i64, i64, i1} %33, i64 undef, 1 
  %35 = insertvalue {i64, i64, i1} %34, i1 0, 2 
  ret {i64, i64, i1} %35 
}


define external fastcc  {i64, i1} @"list_loop.intlist.head<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %36 = inttoptr i64 %"$rec#0" to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %39 = insertvalue {i64, i1} undef, i64 %38, 0 
  %40 = insertvalue {i64, i1} %39, i1 1, 1 
  ret {i64, i1} %40 
if.else:
  %41 = insertvalue {i64, i1} undef, i64 undef, 0 
  %42 = insertvalue {i64, i1} %41, i1 0, 1 
  ret {i64, i1} %42 
}


define external fastcc  {i64, i1} @"list_loop.intlist.head<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %43 = trunc i64 16 to i32  
  %44 = tail call ccc  i8*  @wybe_malloc(i32  %43)  
  %45 = ptrtoint i8* %44 to i64 
  %46 = inttoptr i64 %45 to i8* 
  %47 = inttoptr i64 %"$rec#0" to i8* 
  %48 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %46, i8*  %47, i32  %48, i32  8, i1  0)  
  %49 = inttoptr i64 %45 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  store  i64 %"$field#0", i64* %50 
  %51 = insertvalue {i64, i1} undef, i64 %45, 0 
  %52 = insertvalue {i64, i1} %51, i1 1, 1 
  ret {i64, i1} %52 
if.else:
  %53 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %54 = insertvalue {i64, i1} %53, i1 0, 1 
  ret {i64, i1} %54 
}


define external fastcc  {i64, i1} @"list_loop.intlist.tail<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %55 = add   i64 %"$rec#0", 8 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = insertvalue {i64, i1} undef, i64 %58, 0 
  %60 = insertvalue {i64, i1} %59, i1 1, 1 
  ret {i64, i1} %60 
if.else:
  %61 = insertvalue {i64, i1} undef, i64 undef, 0 
  %62 = insertvalue {i64, i1} %61, i1 0, 1 
  ret {i64, i1} %62 
}


define external fastcc  {i64, i1} @"list_loop.intlist.tail<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %63 = trunc i64 16 to i32  
  %64 = tail call ccc  i8*  @wybe_malloc(i32  %63)  
  %65 = ptrtoint i8* %64 to i64 
  %66 = inttoptr i64 %65 to i8* 
  %67 = inttoptr i64 %"$rec#0" to i8* 
  %68 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %66, i8*  %67, i32  %68, i32  8, i1  0)  
  %69 = add   i64 %65, 8 
  %70 = inttoptr i64 %69 to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  store  i64 %"$field#0", i64* %71 
  %72 = insertvalue {i64, i1} undef, i64 %65, 0 
  %73 = insertvalue {i64, i1} %72, i1 1, 1 
  ret {i64, i1} %73 
if.else:
  %74 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %75 = insertvalue {i64, i1} %74, i1 0, 1 
  ret {i64, i1} %75 
}

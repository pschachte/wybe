======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module list_loop
  representation  : (not a type)
  public submods  : intlist -> list_loop.intlist
  public resources: 
  public procs    : list_loop.<0>
                    list_loop.intlist.=<0>
                    list_loop.intlist.cons<0>
                    list_loop.intlist.cons<1>
                    list_loop.intlist.head<0>
                    list_loop.intlist.head<1>
                    list_loop.intlist.nil<0>
                    list_loop.intlist.tail<0>
                    list_loop.intlist.tail<1>
                    list_loop.intlist.~=<0>
  imports         : public use list_loop.intlist
                    use wybe
  resources       : 
  submodules      : list_loop.intlist
  procs           : 

module top-level code > public {semipure} (0 calls)
0: list_loop.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#10##0:list_loop.intlist) @list_loop:nn:nn
    foreign lpvm mutate(~tmp#10##0:list_loop.intlist, ?tmp#11##0:list_loop.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int) @list_loop:nn:nn
    foreign lpvm mutate(~tmp#11##0:list_loop.intlist, ?tmp#12##0:list_loop.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:list_loop.intlist) @list_loop:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:list_loop.intlist) @list_loop:nn:nn
    foreign lpvm mutate(~tmp#15##0:list_loop.intlist, ?tmp#16##0:list_loop.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int) @list_loop:nn:nn
    foreign lpvm mutate(~tmp#16##0:list_loop.intlist, ?tmp#17##0:list_loop.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#12##0:list_loop.intlist) @list_loop:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#20##0:list_loop.intlist) @list_loop:nn:nn
    foreign lpvm mutate(~tmp#20##0:list_loop.intlist, ?tmp#21##0:list_loop.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int) @list_loop:nn:nn
    foreign lpvm mutate(~tmp#21##0:list_loop.intlist, ?tmp#22##0:list_loop.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#17##0:list_loop.intlist) @list_loop:nn:nn
    list_loop.#cont#1<0>(~tmp#22##0:list_loop.intlist, ~tmp#22##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @list_loop:nn:nn


proc #cont#1 > {semipure} (2 calls)
0: list_loop.#cont#1<0>
#cont#1(l##0:list_loop.intlist, x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(l##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool) @list_loop:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:

    1:
        foreign lpvm access(l##0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @list_loop:nn:nn
        foreign lpvm access(~l##0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?l##1:list_loop.intlist) @list_loop:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#13##0:wybe.phantom) @list_loop:nn:nn
        foreign c print_int(h##0:wybe.int, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @list_loop:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @list_loop:nn:nn
        foreign lpvm store(~%tmp#15##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @list_loop:nn:nn
        list_loop.#cont#3<0>(~h##0:wybe.int, ~l##1:list_loop.intlist, ~x##0:list_loop.intlist, ~x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @list_loop:nn:nn



proc #cont#2 > {inline,semipure} (1 calls)
0: list_loop.#cont#2<0>
#cont#2(h##0:wybe.int, l##0:list_loop.intlist, x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @list_loop:nn:nn
    foreign c print_int(h##0:wybe.int, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @list_loop:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @list_loop:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @list_loop:nn:nn
    list_loop.#cont#3<0>(~h##0:wybe.int, ~l##0:list_loop.intlist, ~x##0:list_loop.intlist, ~x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @list_loop:nn:nn


proc #cont#3 > {semipure} (2 calls)
0: list_loop.#cont#3<0>
#cont#3(h##0:wybe.int, l##0:list_loop.intlist, l2##0:list_loop.intlist, x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(4,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(l2##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool) @list_loop:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        list_loop.#cont#1<0>(~l##0:list_loop.intlist, ~x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @list_loop:nn:nn

    1:
        foreign lpvm access(l2##0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h2##0:wybe.int) @list_loop:nn:nn
        foreign lpvm access(~l2##0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?l2##1:list_loop.intlist) @list_loop:nn:nn
        wybe.string.print<0>("    ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @list_loop:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @list_loop:nn:nn
        foreign c print_int(h##0:wybe.int, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @list_loop:nn:nn
        foreign lpvm store(~%tmp#15##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @list_loop:nn:nn
        wybe.string.print<0>[410bae77d3](1155:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @list_loop:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @list_loop:nn:nn
        foreign c print_int(~h2##0:wybe.int, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @list_loop:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#17##0:wybe.phantom, ?tmp#18##0:wybe.phantom) @list_loop:nn:nn
        foreign lpvm store(~%tmp#18##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @list_loop:nn:nn
        list_loop.#cont#3<0>(~h##0:wybe.int, ~l##0:list_loop.intlist, ~l2##1:list_loop.intlist, ~x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @list_loop:nn:nn



proc #cont#4 > {inline,semipure} (1 calls)
0: list_loop.#cont#4<0>
#cont#4(h##0:wybe.int, h2##0:wybe.int, l##0:list_loop.intlist, l2##0:list_loop.intlist, x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("    ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @list_loop:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#7##0:wybe.phantom) @list_loop:nn:nn
    foreign c print_int(h##0:wybe.int, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @list_loop:nn:nn
    foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @list_loop:nn:nn
    wybe.string.print<0>(1155:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @list_loop:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @list_loop:nn:nn
    foreign c print_int(~h2##0:wybe.int, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @list_loop:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @list_loop:nn:nn
    foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @list_loop:nn:nn
    list_loop.#cont#3<0>(~h##0:wybe.int, ~l##0:list_loop.intlist, ~l2##0:list_loop.intlist, ~x##0:list_loop.intlist)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @list_loop:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'list_loop'

source_filename = "!ROOT!/final-dump/list_loop.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"    \00", align 8
@"string#1" = private unnamed_addr constant {i64, i64} { i64 4, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external fastcc void @"wybe.string.print<0>[410bae77d3]"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"list_loop.<0>"() {
  %"tmp#23##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#10##0" = ptrtoint ptr %"tmp#23##0" to i64
  %"tmp#24##0" = inttoptr i64 %"tmp#10##0" to ptr
  store i64 3, ptr %"tmp#24##0"
  %"tmp#25##0" = add i64 %"tmp#10##0", 8
  %"tmp#26##0" = inttoptr i64 %"tmp#25##0" to ptr
  store i64 0, ptr %"tmp#26##0"
  %"tmp#27##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#15##0" = ptrtoint ptr %"tmp#27##0" to i64
  %"tmp#28##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 2, ptr %"tmp#28##0"
  %"tmp#29##0" = add i64 %"tmp#15##0", 8
  %"tmp#30##0" = inttoptr i64 %"tmp#29##0" to ptr
  store i64 %"tmp#10##0", ptr %"tmp#30##0"
  %"tmp#31##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#20##0" = ptrtoint ptr %"tmp#31##0" to i64
  %"tmp#32##0" = inttoptr i64 %"tmp#20##0" to ptr
  store i64 1, ptr %"tmp#32##0"
  %"tmp#33##0" = add i64 %"tmp#20##0", 8
  %"tmp#34##0" = inttoptr i64 %"tmp#33##0" to ptr
  store i64 %"tmp#15##0", ptr %"tmp#34##0"
  tail call fastcc void @"list_loop.#cont#1<0>"(i64 %"tmp#20##0", i64 %"tmp#20##0")
  ret void
}

define external fastcc void @"list_loop.#cont#1<0>"(i64 %"l##0", i64 %"x##0") {
  %"tmp#9##0" = icmp ne i64 %"l##0", 0
  br i1 %"tmp#9##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#16##0" = inttoptr i64 %"l##0" to ptr
  %"h##0" = load i64, ptr %"tmp#16##0"
  %"tmp#17##0" = add i64 %"l##0", 8
  %"tmp#18##0" = inttoptr i64 %"tmp#17##0" to ptr
  %"l##1" = load i64, ptr %"tmp#18##0"
  call ccc void @print_int(i64 %"h##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"list_loop.#cont#3<0>"(i64 %"h##0", i64 %"l##1", i64 %"x##0", i64 %"x##0")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"list_loop.#cont#2<0>"(i64 %"h##0", i64 %"l##0", i64 %"x##0") {
  call ccc void @print_int(i64 %"h##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"list_loop.#cont#3<0>"(i64 %"h##0", i64 %"l##0", i64 %"x##0", i64 %"x##0")
  ret void
}

define external fastcc void @"list_loop.#cont#3<0>"(i64 %"h##0", i64 %"l##0", i64 %"l2##0", i64 %"x##0") {
  %"tmp#8##0" = icmp ne i64 %"l2##0", 0
  br i1 %"tmp#8##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#19##0" = inttoptr i64 %"l2##0" to ptr
  %"h2##0" = load i64, ptr %"tmp#19##0"
  %"tmp#20##0" = add i64 %"l2##0", 8
  %"tmp#21##0" = inttoptr i64 %"tmp#20##0" to ptr
  %"l2##1" = load i64, ptr %"tmp#21##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#1" to i64 ))
  call ccc void @print_int(i64 %"h##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1155)
  call ccc void @print_int(i64 %"h2##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"list_loop.#cont#3<0>"(i64 %"h##0", i64 %"l##0", i64 %"l2##1", i64 %"x##0")
  ret void
if.else.0:
  tail call fastcc void @"list_loop.#cont#1<0>"(i64 %"l##0", i64 %"x##0")
  ret void
}

define external fastcc void @"list_loop.#cont#4<0>"(i64 %"h##0", i64 %"h2##0", i64 %"l##0", i64 %"l2##0", i64 %"x##0") {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#1" to i64 ))
  call ccc void @print_int(i64 %"h##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 1155)
  call ccc void @print_int(i64 %"h2##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"list_loop.#cont#3<0>"(i64 %"h##0", i64 %"l##0", i64 %"l2##0", i64 %"x##0")
  ret void
}

--------------------------------------------------
 Module list_loop.intlist
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : list_loop.intlist.=<0>
                    list_loop.intlist.cons<0>
                    list_loop.intlist.cons<1>
                    list_loop.intlist.head<0>
                    list_loop.intlist.head<1>
                    list_loop.intlist.nil<0>
                    list_loop.intlist.tail<0>
                    list_loop.intlist.tail<1>
                    list_loop.intlist.~=<0>
  imports         : use list_loop
                    use wybe
  resources       : 
  procs           : 

proc = > public (2 calls)
0: list_loop.intlist.=<0>
=(#left##0:list_loop.intlist, #right##0:list_loop.intlist, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:list_loop.intlist, 0:list_loop.intlist, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#head##0:wybe.int) @list_loop:nn:nn
        foreign lpvm access(~#left##0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#tail##0:list_loop.intlist) @list_loop:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
        case ~tmp#9##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#head##0:wybe.int) @list_loop:nn:nn
            foreign lpvm access(~#right##0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#tail##0:list_loop.intlist) @list_loop:nn:nn
            foreign llvm icmp_eq(~#left#head##0:wybe.int, ~#right#head##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                list_loop.intlist.=<0>(~#left#tail##0:list_loop.intlist, ~#right#tail##0:list_loop.intlist, ?#success##0:wybe.bool) #3





proc cons > public {inline} (0 calls)
0: list_loop.intlist.cons<0>
cons(head##0:wybe.int, tail##0:list_loop.intlist, ?#result##0:list_loop.intlist)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:list_loop.intlist) @list_loop:nn:nn
    foreign lpvm mutate(~#rec##0:list_loop.intlist, ?#rec##1:list_loop.intlist, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head##0:wybe.int) @list_loop:nn:nn
    foreign lpvm mutate(~#rec##1:list_loop.intlist, ?#result##0:list_loop.intlist, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail##0:list_loop.intlist) @list_loop:nn:nn
proc cons > public {inline} (12 calls)
1: list_loop.intlist.cons<1>
cons(?head##0:wybe.int, ?tail##0:list_loop.intlist, #result##0:list_loop.intlist, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head##0:wybe.int)
        foreign llvm move(undef:list_loop.intlist, ?tail##0:list_loop.intlist)

    1:
        foreign lpvm access(#result##0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head##0:wybe.int) @list_loop:nn:nn
        foreign lpvm access(~#result##0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail##0:list_loop.intlist) @list_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc head > public {inline} (0 calls)
0: list_loop.intlist.head<0>
head(#rec##0:list_loop.intlist, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:list_loop.intlist, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @list_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc head > public {inline} (0 calls)
1: list_loop.intlist.head<1>
head(#rec##0:list_loop.intlist, ?#rec##1:list_loop.intlist, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:list_loop.intlist, ?#rec##1:list_loop.intlist)

    1:
        foreign lpvm mutate(~#rec##0:list_loop.intlist, ?#rec##1:list_loop.intlist, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @list_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc nil > public {inline} (0 calls)
0: list_loop.intlist.nil<0>
nil(?#result##0:list_loop.intlist)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:list_loop.intlist, ?#result##0:list_loop.intlist)


proc tail > public {inline} (0 calls)
0: list_loop.intlist.tail<0>
tail(#rec##0:list_loop.intlist, ?#result##0:list_loop.intlist, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:list_loop.intlist, ?#result##0:list_loop.intlist)

    1:
        foreign lpvm access(~#rec##0:list_loop.intlist, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:list_loop.intlist) @list_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc tail > public {inline} (0 calls)
1: list_loop.intlist.tail<1>
tail(#rec##0:list_loop.intlist, ?#rec##1:list_loop.intlist, #field##0:list_loop.intlist, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:list_loop.intlist, ?#rec##1:list_loop.intlist)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:list_loop.intlist, ?#rec##1:list_loop.intlist, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:list_loop.intlist) @list_loop:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: list_loop.intlist.~=<0>
~=(#left##0:list_loop.intlist, #right##0:list_loop.intlist, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    list_loop.intlist.=<0>(~#left##0:list_loop.intlist, ~#right##0:list_loop.intlist, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'list_loop.intlist'

source_filename = "!ROOT!/final-dump/list_loop.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"list_loop.intlist.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp ne i64 %"#left##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#12##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#head##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#left##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#left#tail##0" = load i64, ptr %"tmp#14##0"
  %"tmp#9##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#9##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#15##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#head##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = add i64 %"#right##0", 8
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  %"#right#tail##0" = load i64, ptr %"tmp#17##0"
  %"tmp#4##0" = icmp eq i64 %"#left#head##0", %"#right#head##0"
  br i1 %"tmp#4##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#18##0" = tail call fastcc i1 @"list_loop.intlist.=<0>"(i64 %"#left#tail##0", i64 %"#right#tail##0")
  ret i1 %"tmp#18##0"
if.else.2:
  ret i1 0
if.else.1:
  ret i1 0
if.else.0:
  %"tmp#19##0" = icmp eq i64 %"#right##0", 0
  ret i1 %"tmp#19##0"
}

define external fastcc i64 @"list_loop.intlist.cons<0>"(i64 %"head##0", i64 %"tail##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"head##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"tail##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64, i1} @"list_loop.intlist.cons<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = add i64 %"#result##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#7##0" = insertvalue {i64, i64, i1} %"tmp#6##0", i64 %"tmp#5##0", 1
  %"tmp#8##0" = insertvalue {i64, i64, i1} %"tmp#7##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#10##0" = insertvalue {i64, i64, i1} %"tmp#9##0", i64 undef, 1
  %"tmp#11##0" = insertvalue {i64, i64, i1} %"tmp#10##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"list_loop.intlist.head<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = insertvalue {i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#4##0" = insertvalue {i64, i1} %"tmp#3##0", i1 1, 1
  ret {i64, i1} %"tmp#4##0"
if.else.0:
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 0, 1
  ret {i64, i1} %"tmp#6##0"
}

define external fastcc {i64, i1} @"list_loop.intlist.head<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 16, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc i64 @"list_loop.intlist.nil<0>"() {
  ret i64 0
}

define external fastcc {i64, i1} @"list_loop.intlist.tail<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = add i64 %"#rec##0", 8
  %"tmp#2##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"list_loop.intlist.tail<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 16, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = add i64 %"tmp#3##0", 8
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

define external fastcc i1 @"list_loop.intlist.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"list_loop.intlist.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

======================================================================
AFTER EVERYTHING:
 Module card
  representation  : 6 bit unsigned
  public submods  : rank -> card.rank
                    suit -> card.suit
  public resources: 
  public procs    : card.<0>
                    card.=<0>
                    card.card<0>
                    card.card<1>
                    card.print<0>
                    card.rank<0>
                    card.rank<1>
                    card.suit<0>
                    card.suit<1>
                    card.~=<0>
                    card.rank.=<0>
                    card.rank.ace<0>
                    card.rank.char<0>
                    card.rank.jack<0>
                    card.rank.king<0>
                    card.rank.print<0>
                    card.rank.queen<0>
                    card.rank.r10<0>
                    card.rank.r2<0>
                    card.rank.r3<0>
                    card.rank.r4<0>
                    card.rank.r5<0>
                    card.rank.r6<0>
                    card.rank.r7<0>
                    card.rank.r8<0>
                    card.rank.r9<0>
                    card.rank.ranks<0>
                    card.rank.~=<0>
                    card.suit.=<0>
                    card.suit.char<0>
                    card.suit.clubs<0>
                    card.suit.diamonds<0>
                    card.suit.hearts<0>
                    card.suit.print<0>
                    card.suit.spades<0>
                    card.suit.suits<0>
                    card.suit.~=<0>
  imports         : public use card.rank
                    public use card.suit
                    use wybe
  resources       : 
  submodules      : card.rank, card.suit
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: card.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    card.suit.suits<0>(?tmp#1##0:wybe.list(card.suit)) #0 @card:nn:nn
    card.#cont#1<0>(~tmp#1##0:wybe.list(card.suit))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @card:nn:nn


#cont#1 > (2 calls)
0: card.#cont#1<0>
#cont#1(tmp#0##0:wybe.list(card.suit))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#0##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:

    1:
        foreign lpvm access(tmp#0##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?s##0:card.suit) @list:nn:nn
        foreign lpvm access(~tmp#0##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##1:wybe.list(card.suit)) @list:nn:nn
        card.rank.ranks<0>(?tmp#3##0:wybe.list(card.rank)) #1 @card:nn:nn
        card.#cont#2<0>(~s##0:card.suit, ~tmp#0##1:wybe.list(card.suit), ~tmp#3##0:wybe.list(card.rank))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @card:nn:nn



#cont#2 > (2 calls)
0: card.#cont#2<0>
#cont#2(s##0:card.suit, tmp#0##0:wybe.list(card.suit), tmp#2##0:wybe.list(card.rank))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#2##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:
        card.#cont#1<0>(~tmp#0##0:wybe.list(card.suit))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @card:nn:nn

    1:
        foreign lpvm access(tmp#2##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?r##0:card.rank) @list:nn:nn
        foreign lpvm access(~tmp#2##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##1:wybe.list(card.rank)) @list:nn:nn
        foreign llvm shl(~r##0:card, 2:card, ?tmp#10##0:card) @card:nn:nn
        foreign llvm or(s##0:card, ~tmp#10##0:card, ?tmp#4##0:card) @card:nn:nn
        card.print<0>(~tmp#4##0:card)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @card:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        card.#cont#2<0>(~s##0:card.suit, ~tmp#0##0:wybe.list(card.suit), ~tmp#2##1:wybe.list(card.rank))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @card:nn:nn



= > public {inline} (1 calls)
0: card.=<0>
=(#left##0:card, #right##0:card, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:card, ~#right##0:card, ?#success##0:wybe.bool)


card > public {inline} (1 calls)
0: card.card<0>
card(rank##0:card.rank, suit##0:card.suit, ?#result##3:card)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm shl(~rank##0:card, 2:card, ?#temp##0:card) @card:nn:nn
    foreign llvm or(~#temp##0:card, ~suit##0:card, ?#result##3:card) @card:nn:nn
card > public {inline} (0 calls)
1: card.card<1>
card(?rank##0:card.rank, ?suit##0:card.suit, #result##0:card)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm lshr(#result##0:card, 2:card, ?#temp##0:card) @card:nn:nn
    foreign llvm and(~#temp##0:card, 15:card, ?#temp2##0:card) @card:nn:nn
    foreign lpvm cast(~#temp2##0:card, ?rank##0:card.rank) @card:nn:nn
    foreign llvm and(~#result##0:card, 3:card, ?#temp2##1:card) @card:nn:nn
    foreign lpvm cast(~#temp2##1:card, ?suit##0:card.suit) @card:nn:nn


print > public (1 calls)
0: card.print<0>
print(c##0:card)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm lshr(c##0:card, 2:card, ?tmp#3##0:card) @card:nn:nn
    foreign llvm and(~tmp#3##0:card, 15:card, ?tmp#4##0:card) @card:nn:nn
    foreign lpvm cast(~tmp#4##0:card, ?tmp#0##0:card.rank) @card:nn:nn
    card.rank.print<0>(~tmp#0##0:card.rank)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @card:nn:nn
    foreign llvm and(~c##0:card, 3:card, ?tmp#6##0:card) @card:nn:nn
    foreign lpvm cast(~tmp#6##0:card, ?tmp#1##0:card.suit) @card:nn:nn
    card.suit.print<0>(~tmp#1##0:card.suit)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @card:nn:nn


rank > public {inline} (1 calls)
0: card.rank<0>
rank(#rec##0:card, ?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm lshr(~#rec##0:card, 2:card, ?#rec##1:card) @card:nn:nn
    foreign llvm and(~#rec##1:card, 15:card, ?#field##0:card) @card:nn:nn
    foreign lpvm cast(~#field##0:card, ?#result##0:card.rank) @card:nn:nn
rank > public {inline} (0 calls)
1: card.rank<1>
rank(#rec##0:card, ?#rec##2:card, #field##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(~#rec##0:card, -61:card, ?#rec##1:card) @card:nn:nn
    foreign llvm shl(~#field##0:card, 2:card, ?#temp##0:card) @card:nn:nn
    foreign llvm or(~#rec##1:card, ~#temp##0:card, ?#rec##2:card) @card:nn:nn


suit > public {inline} (1 calls)
0: card.suit<0>
suit(#rec##0:card, ?#result##0:card.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(~#rec##0:card, 3:card, ?#field##0:card) @card:nn:nn
    foreign lpvm cast(~#field##0:card, ?#result##0:card.suit) @card:nn:nn
suit > public {inline} (0 calls)
1: card.suit<1>
suit(#rec##0:card, ?#rec##2:card, #field##0:card.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(~#rec##0:card, -4:card, ?#rec##1:card) @card:nn:nn
    foreign llvm or(~#field##0:card, ~#rec##1:card, ?#rec##2:card) @card:nn:nn


~= > public {inline} (0 calls)
0: card.~=<0>
~=(#left##0:card, #right##0:card, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:card, ~#right##0:card, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'card'


 


declare external ccc  void @putchar(i8)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"card.<0>"() alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"card.suit.suits<0>"()  
  tail call fastcc  void  @"card.#cont#1<0>"(i64  %0)  
  ret void 
}


define external fastcc  void @"card.#cont#1<0>"(i64  %"tmp#0##0")    {
entry:
  %0 = icmp ne i64 %"tmp#0##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"tmp#0##0" to i2* 
  %2 = load  i2, i2* %1 
  %3 = add   i64 %"tmp#0##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = tail call fastcc  i64  @"card.rank.ranks<0>"()  
  tail call fastcc  void  @"card.#cont#2<0>"(i2  %2, i64  %5, i64  %6)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"card.#cont#2<0>"(i2  %"s##0", i64  %"tmp#0##0", i64  %"tmp#2##0")    {
entry:
  %0 = icmp ne i64 %"tmp#2##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"tmp#2##0" to i4* 
  %2 = load  i4, i4* %1 
  %3 = add   i64 %"tmp#2##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = zext i4 %2 to i6  
  %7 = shl   i6 %6, 2 
  %8 = zext i2 %"s##0" to i6  
  %9 = or i6 %8, %7 
  tail call fastcc  void  @"card.print<0>"(i6  %9)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"card.#cont#2<0>"(i2  %"s##0", i64  %"tmp#0##0", i64  %5)  
  ret void 
if.else:
  tail call fastcc  void  @"card.#cont#1<0>"(i64  %"tmp#0##0")  
  ret void 
}


define external fastcc  i1 @"card.=<0>"(i6  %"#left##0", i6  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i6 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i6 @"card.card<0>"(i4  %"rank##0", i2  %"suit##0") alwaysinline   {
entry:
  %0 = zext i4 %"rank##0" to i6  
  %1 = shl   i6 %0, 2 
  %2 = zext i2 %"suit##0" to i6  
  %3 = or i6 %1, %2 
  ret i6 %3 
}


define external fastcc  {i4, i2} @"card.card<1>"(i6  %"#result##0") alwaysinline   {
entry:
  %0 = lshr  i6 %"#result##0", 2 
  %1 = and i6 %0, 15 
  %2 = trunc i6 %1 to i4  
  %3 = and i6 %"#result##0", 3 
  %4 = trunc i6 %3 to i2  
  %5 = insertvalue {i4, i2} undef, i4 %2, 0 
  %6 = insertvalue {i4, i2} %5, i2 %4, 1 
  ret {i4, i2} %6 
}


define external fastcc  void @"card.print<0>"(i6  %"c##0")    {
entry:
  %0 = lshr  i6 %"c##0", 2 
  %1 = and i6 %0, 15 
  %2 = trunc i6 %1 to i4  
  tail call fastcc  void  @"card.rank.print<0>"(i4  %2)  
  %3 = and i6 %"c##0", 3 
  %4 = trunc i6 %3 to i2  
  tail call fastcc  void  @"card.suit.print<0>"(i2  %4)  
  ret void 
}


define external fastcc  i4 @"card.rank<0>"(i6  %"#rec##0") alwaysinline   {
entry:
  %0 = lshr  i6 %"#rec##0", 2 
  %1 = and i6 %0, 15 
  %2 = trunc i6 %1 to i4  
  ret i4 %2 
}


define external fastcc  i6 @"card.rank<1>"(i6  %"#rec##0", i4  %"#field##0") alwaysinline   {
entry:
  %0 = and i6 %"#rec##0", -61 
  %1 = zext i4 %"#field##0" to i6  
  %2 = shl   i6 %1, 2 
  %3 = or i6 %0, %2 
  ret i6 %3 
}


define external fastcc  i2 @"card.suit<0>"(i6  %"#rec##0") alwaysinline   {
entry:
  %0 = and i6 %"#rec##0", 3 
  %1 = trunc i6 %0 to i2  
  ret i2 %1 
}


define external fastcc  i6 @"card.suit<1>"(i6  %"#rec##0", i2  %"#field##0") alwaysinline   {
entry:
  %0 = and i6 %"#rec##0", -4 
  %1 = zext i2 %"#field##0" to i6  
  %2 = or i6 %1, %0 
  ret i6 %2 
}


define external fastcc  i1 @"card.~=<0>"(i6  %"#left##0", i6  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i6 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module card.rank
  representation  : 4 bit unsigned
  public submods  : 
  public resources: 
  public procs    : card.rank.=<0>
                    card.rank.ace<0>
                    card.rank.char<0>
                    card.rank.jack<0>
                    card.rank.king<0>
                    card.rank.print<0>
                    card.rank.queen<0>
                    card.rank.r10<0>
                    card.rank.r2<0>
                    card.rank.r3<0>
                    card.rank.r4<0>
                    card.rank.r5<0>
                    card.rank.r6<0>
                    card.rank.r7<0>
                    card.rank.r8<0>
                    card.rank.r9<0>
                    card.rank.ranks<0>
                    card.rank.~=<0>
  imports         : use card
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (106 calls)
0: card.rank.=<0>
=(#left##0:card.rank, #right##0:card.rank, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:card.rank, ~#right##0:card.rank, ?#success##0:wybe.bool)


ace > public {inline} (3 calls)
0: card.rank.ace<0>
ace(?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(12:card.rank, ?#result##0:card.rank)


char > public (1 calls)
0: card.rank.char<0>
char(r##0:card.rank, ?#result##0:wybe.char)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~r##0:card.rank of
    0:
        foreign llvm move('2':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    1:
        foreign llvm move('3':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    2:
        foreign llvm move('4':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    3:
        foreign llvm move('5':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    4:
        foreign llvm move('6':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    5:
        foreign llvm move('7':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    6:
        foreign llvm move('8':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    7:
        foreign llvm move('9':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    8:
        foreign llvm move('T':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    9:
        foreign llvm move('J':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    10:
        foreign llvm move('Q':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    11:
        foreign llvm move('K':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    12:
        foreign llvm move('A':wybe.char, ?#result##0:wybe.char) @card:nn:nn



jack > public {inline} (6 calls)
0: card.rank.jack<0>
jack(?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(9:card.rank, ?#result##0:card.rank)


king > public {inline} (4 calls)
0: card.rank.king<0>
king(?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(11:card.rank, ?#result##0:card.rank)


print > public {inline} (0 calls)
0: card.rank.print<0>
print(r##0:card.rank)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    card.rank.char<0>(~r##0:card.rank, ?tmp#0##0:wybe.char) #0 @card:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom) @char:nn:nn
    foreign c putchar(~tmp#0##0:wybe.char, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @char:nn:nn
    foreign lpvm store(~%tmp#3##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn


queen > public {inline} (5 calls)
0: card.rank.queen<0>
queen(?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(10:card.rank, ?#result##0:card.rank)


r10 > public {inline} (7 calls)
0: card.rank.r10<0>
r10(?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(8:card.rank, ?#result##0:card.rank)


r2 > public {inline} (16 calls)
0: card.rank.r2<0>
r2(?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:card.rank, ?#result##0:card.rank)


r3 > public {inline} (14 calls)
0: card.rank.r3<0>
r3(?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:card.rank, ?#result##0:card.rank)


r4 > public {inline} (13 calls)
0: card.rank.r4<0>
r4(?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(2:card.rank, ?#result##0:card.rank)


r5 > public {inline} (12 calls)
0: card.rank.r5<0>
r5(?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(3:card.rank, ?#result##0:card.rank)


r6 > public {inline} (11 calls)
0: card.rank.r6<0>
r6(?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(4:card.rank, ?#result##0:card.rank)


r7 > public {inline} (10 calls)
0: card.rank.r7<0>
r7(?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(5:card.rank, ?#result##0:card.rank)


r8 > public {inline} (9 calls)
0: card.rank.r8<0>
r8(?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(6:card.rank, ?#result##0:card.rank)


r9 > public {inline} (8 calls)
0: card.rank.r9<0>
r9(?#result##0:card.rank)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(7:card.rank, ?#result##0:card.rank)


ranks > public (0 calls)
0: card.rank.ranks<0>
ranks(?#result##0:wybe.list(card.rank))<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#29##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#29##0:wybe.list(T), ?tmp#30##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 12:T) @list:nn:nn
    foreign lpvm mutate(~tmp#30##0:wybe.list(T), ?tmp#24##0:wybe.list(card.rank), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#33##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#33##0:wybe.list(T), ?tmp#34##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 11:T) @list:nn:nn
    foreign lpvm mutate(~tmp#34##0:wybe.list(T), ?tmp#22##0:wybe.list(card.rank), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#24##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#37##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#37##0:wybe.list(T), ?tmp#38##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 10:T) @list:nn:nn
    foreign lpvm mutate(~tmp#38##0:wybe.list(T), ?tmp#20##0:wybe.list(card.rank), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#22##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#41##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#41##0:wybe.list(T), ?tmp#42##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 9:T) @list:nn:nn
    foreign lpvm mutate(~tmp#42##0:wybe.list(T), ?tmp#18##0:wybe.list(card.rank), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#20##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#45##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#45##0:wybe.list(T), ?tmp#46##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 8:T) @list:nn:nn
    foreign lpvm mutate(~tmp#46##0:wybe.list(T), ?tmp#16##0:wybe.list(card.rank), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#18##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#49##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#49##0:wybe.list(T), ?tmp#50##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 7:T) @list:nn:nn
    foreign lpvm mutate(~tmp#50##0:wybe.list(T), ?tmp#14##0:wybe.list(card.rank), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#16##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#53##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#53##0:wybe.list(T), ?tmp#54##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 6:T) @list:nn:nn
    foreign lpvm mutate(~tmp#54##0:wybe.list(T), ?tmp#12##0:wybe.list(card.rank), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#14##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#57##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#57##0:wybe.list(T), ?tmp#58##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 5:T) @list:nn:nn
    foreign lpvm mutate(~tmp#58##0:wybe.list(T), ?tmp#10##0:wybe.list(card.rank), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#12##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#61##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#61##0:wybe.list(T), ?tmp#62##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#62##0:wybe.list(T), ?tmp#8##0:wybe.list(card.rank), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#10##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#65##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#65##0:wybe.list(T), ?tmp#66##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#66##0:wybe.list(T), ?tmp#6##0:wybe.list(card.rank), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#8##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#69##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#69##0:wybe.list(T), ?tmp#70##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#70##0:wybe.list(T), ?tmp#4##0:wybe.list(card.rank), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#73##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#73##0:wybe.list(T), ?tmp#74##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#74##0:wybe.list(T), ?tmp#2##0:wybe.list(card.rank), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#4##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#77##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#77##0:wybe.list(T), ?tmp#78##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:T) @list:nn:nn
    foreign lpvm mutate(~tmp#78##0:wybe.list(T), ?#result##0:wybe.list(card.rank), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn


~= > public {inline} (0 calls)
0: card.rank.~=<0>
~=(#left##0:card.rank, #right##0:card.rank, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:card.rank, ~#right##0:card.rank, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'card.rank'


 


declare external ccc  void @putchar(i8)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"card.rank.=<0>"(i4  %"#left##0", i4  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i4 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i4 @"card.rank.ace<0>"() alwaysinline   {
entry:
  ret i4 12 
}


define external fastcc  i8 @"card.rank.char<0>"(i4  %"r##0")    {
entry:
  switch i4 %"r##0", label %switch.13.12 [i4 0, label %switch.13.0 i4 1, label %switch.13.1 i4 2, label %switch.13.2 i4 3, label %switch.13.3 i4 4, label %switch.13.4 i4 5, label %switch.13.5 i4 6, label %switch.13.6 i4 7, label %switch.13.7 i4 8, label %switch.13.8 i4 9, label %switch.13.9 i4 10, label %switch.13.10 i4 11, label %switch.13.11 i4 12, label %switch.13.12] 
switch.13.0:
  ret i8 50 
switch.13.1:
  ret i8 51 
switch.13.2:
  ret i8 52 
switch.13.3:
  ret i8 53 
switch.13.4:
  ret i8 54 
switch.13.5:
  ret i8 55 
switch.13.6:
  ret i8 56 
switch.13.7:
  ret i8 57 
switch.13.8:
  ret i8 84 
switch.13.9:
  ret i8 74 
switch.13.10:
  ret i8 81 
switch.13.11:
  ret i8 75 
switch.13.12:
  ret i8 65 
}


define external fastcc  i4 @"card.rank.jack<0>"() alwaysinline   {
entry:
  ret i4 9 
}


define external fastcc  i4 @"card.rank.king<0>"() alwaysinline   {
entry:
  ret i4 11 
}


define external fastcc  void @"card.rank.print<0>"(i4  %"r##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i8  @"card.rank.char<0>"(i4  %"r##0")  
  tail call ccc  void  @putchar(i8  %0)  
  ret void 
}


define external fastcc  i4 @"card.rank.queen<0>"() alwaysinline   {
entry:
  ret i4 10 
}


define external fastcc  i4 @"card.rank.r10<0>"() alwaysinline   {
entry:
  ret i4 8 
}


define external fastcc  i4 @"card.rank.r2<0>"() alwaysinline   {
entry:
  ret i4 0 
}


define external fastcc  i4 @"card.rank.r3<0>"() alwaysinline   {
entry:
  ret i4 1 
}


define external fastcc  i4 @"card.rank.r4<0>"() alwaysinline   {
entry:
  ret i4 2 
}


define external fastcc  i4 @"card.rank.r5<0>"() alwaysinline   {
entry:
  ret i4 3 
}


define external fastcc  i4 @"card.rank.r6<0>"() alwaysinline   {
entry:
  ret i4 4 
}


define external fastcc  i4 @"card.rank.r7<0>"() alwaysinline   {
entry:
  ret i4 5 
}


define external fastcc  i4 @"card.rank.r8<0>"() alwaysinline   {
entry:
  ret i4 6 
}


define external fastcc  i4 @"card.rank.r9<0>"() alwaysinline   {
entry:
  ret i4 7 
}


define external fastcc  i64 @"card.rank.ranks<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 12, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 11, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 10, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %8, i64* %17 
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 9, i64* %21 
  %22 = add   i64 %20, 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 %14, i64* %23 
  %24 = trunc i64 16 to i32  
  %25 = tail call ccc  i8*  @wybe_malloc(i32  %24)  
  %26 = ptrtoint i8* %25 to i64 
  %27 = inttoptr i64 %26 to i64* 
  store  i64 8, i64* %27 
  %28 = add   i64 %26, 8 
  %29 = inttoptr i64 %28 to i64* 
  store  i64 %20, i64* %29 
  %30 = trunc i64 16 to i32  
  %31 = tail call ccc  i8*  @wybe_malloc(i32  %30)  
  %32 = ptrtoint i8* %31 to i64 
  %33 = inttoptr i64 %32 to i64* 
  store  i64 7, i64* %33 
  %34 = add   i64 %32, 8 
  %35 = inttoptr i64 %34 to i64* 
  store  i64 %26, i64* %35 
  %36 = trunc i64 16 to i32  
  %37 = tail call ccc  i8*  @wybe_malloc(i32  %36)  
  %38 = ptrtoint i8* %37 to i64 
  %39 = inttoptr i64 %38 to i64* 
  store  i64 6, i64* %39 
  %40 = add   i64 %38, 8 
  %41 = inttoptr i64 %40 to i64* 
  store  i64 %32, i64* %41 
  %42 = trunc i64 16 to i32  
  %43 = tail call ccc  i8*  @wybe_malloc(i32  %42)  
  %44 = ptrtoint i8* %43 to i64 
  %45 = inttoptr i64 %44 to i64* 
  store  i64 5, i64* %45 
  %46 = add   i64 %44, 8 
  %47 = inttoptr i64 %46 to i64* 
  store  i64 %38, i64* %47 
  %48 = trunc i64 16 to i32  
  %49 = tail call ccc  i8*  @wybe_malloc(i32  %48)  
  %50 = ptrtoint i8* %49 to i64 
  %51 = inttoptr i64 %50 to i64* 
  store  i64 4, i64* %51 
  %52 = add   i64 %50, 8 
  %53 = inttoptr i64 %52 to i64* 
  store  i64 %44, i64* %53 
  %54 = trunc i64 16 to i32  
  %55 = tail call ccc  i8*  @wybe_malloc(i32  %54)  
  %56 = ptrtoint i8* %55 to i64 
  %57 = inttoptr i64 %56 to i64* 
  store  i64 3, i64* %57 
  %58 = add   i64 %56, 8 
  %59 = inttoptr i64 %58 to i64* 
  store  i64 %50, i64* %59 
  %60 = trunc i64 16 to i32  
  %61 = tail call ccc  i8*  @wybe_malloc(i32  %60)  
  %62 = ptrtoint i8* %61 to i64 
  %63 = inttoptr i64 %62 to i64* 
  store  i64 2, i64* %63 
  %64 = add   i64 %62, 8 
  %65 = inttoptr i64 %64 to i64* 
  store  i64 %56, i64* %65 
  %66 = trunc i64 16 to i32  
  %67 = tail call ccc  i8*  @wybe_malloc(i32  %66)  
  %68 = ptrtoint i8* %67 to i64 
  %69 = inttoptr i64 %68 to i64* 
  store  i64 1, i64* %69 
  %70 = add   i64 %68, 8 
  %71 = inttoptr i64 %70 to i64* 
  store  i64 %62, i64* %71 
  %72 = trunc i64 16 to i32  
  %73 = tail call ccc  i8*  @wybe_malloc(i32  %72)  
  %74 = ptrtoint i8* %73 to i64 
  %75 = inttoptr i64 %74 to i64* 
  store  i64 0, i64* %75 
  %76 = add   i64 %74, 8 
  %77 = inttoptr i64 %76 to i64* 
  store  i64 %68, i64* %77 
  ret i64 %74 
}


define external fastcc  i1 @"card.rank.~=<0>"(i4  %"#left##0", i4  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i4 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module card.suit
  representation  : 2 bit unsigned
  public submods  : 
  public resources: 
  public procs    : card.suit.=<0>
                    card.suit.char<0>
                    card.suit.clubs<0>
                    card.suit.diamonds<0>
                    card.suit.hearts<0>
                    card.suit.print<0>
                    card.suit.spades<0>
                    card.suit.suits<0>
                    card.suit.~=<0>
  imports         : use card
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (16 calls)
0: card.suit.=<0>
=(#left##0:card.suit, #right##0:card.suit, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:card.suit, ~#right##0:card.suit, ?#success##0:wybe.bool)


char > public (1 calls)
0: card.suit.char<0>
char(s##0:card.suit, ?#result##0:wybe.char)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~s##0:card.suit of
    0:
        foreign llvm move('C':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    1:
        foreign llvm move('D':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    2:
        foreign llvm move('H':wybe.char, ?#result##0:wybe.char) @card:nn:nn

    3:
        foreign llvm move('S':wybe.char, ?#result##0:wybe.char) @card:nn:nn



clubs > public {inline} (7 calls)
0: card.suit.clubs<0>
clubs(?#result##0:card.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:card.suit, ?#result##0:card.suit)


diamonds > public {inline} (5 calls)
0: card.suit.diamonds<0>
diamonds(?#result##0:card.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:card.suit, ?#result##0:card.suit)


hearts > public {inline} (4 calls)
0: card.suit.hearts<0>
hearts(?#result##0:card.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(2:card.suit, ?#result##0:card.suit)


print > public {inline} (0 calls)
0: card.suit.print<0>
print(r##0:card.suit)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    card.suit.char<0>(~r##0:card.suit, ?tmp#0##0:wybe.char) #0 @card:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom) @char:nn:nn
    foreign c putchar(~tmp#0##0:wybe.char, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @char:nn:nn
    foreign lpvm store(~%tmp#3##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn


spades > public {inline} (3 calls)
0: card.suit.spades<0>
spades(?#result##0:card.suit)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(3:card.suit, ?#result##0:card.suit)


suits > public (0 calls)
0: card.suit.suits<0>
suits(?#result##0:wybe.list(card.suit))<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#12##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#6##0:wybe.list(card.suit), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#4##0:wybe.list(card.suit), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#2##0:wybe.list(card.suit), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#4##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:T) @list:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?#result##0:wybe.list(card.suit), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn


~= > public {inline} (0 calls)
0: card.suit.~=<0>
~=(#left##0:card.suit, #right##0:card.suit, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:card.suit, ~#right##0:card.suit, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'card.suit'


 


declare external ccc  void @putchar(i8)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"card.suit.=<0>"(i2  %"#left##0", i2  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i2 %"#left##0", %"#right##0" 
  ret i1 %0 
}


define external fastcc  i8 @"card.suit.char<0>"(i2  %"s##0")    {
entry:
  switch i2 %"s##0", label %switch.4.3 [i2 0, label %switch.4.0 i2 1, label %switch.4.1 i2 2, label %switch.4.2 i2 3, label %switch.4.3] 
switch.4.0:
  ret i8 67 
switch.4.1:
  ret i8 68 
switch.4.2:
  ret i8 72 
switch.4.3:
  ret i8 83 
}


define external fastcc  i2 @"card.suit.clubs<0>"() alwaysinline   {
entry:
  ret i2 0 
}


define external fastcc  i2 @"card.suit.diamonds<0>"() alwaysinline   {
entry:
  ret i2 1 
}


define external fastcc  i2 @"card.suit.hearts<0>"() alwaysinline   {
entry:
  ret i2 2 
}


define external fastcc  void @"card.suit.print<0>"(i2  %"r##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i8  @"card.suit.char<0>"(i2  %"r##0")  
  tail call ccc  void  @putchar(i8  %0)  
  ret void 
}


define external fastcc  i2 @"card.suit.spades<0>"() alwaysinline   {
entry:
  ret i2 3 
}


define external fastcc  i64 @"card.suit.suits<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 3, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 2, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 1, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %8, i64* %17 
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 0, i64* %21 
  %22 = add   i64 %20, 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 %14, i64* %23 
  ret i64 %20 
}


define external fastcc  i1 @"card.suit.~=<0>"(i2  %"#left##0", i2  %"#right##0") alwaysinline   {
entry:
  %0 = icmp eq i2 %"#left##0", %"#right##0" 
  %1 = xor i1 %0, 1 
  ret i1 %1 
}

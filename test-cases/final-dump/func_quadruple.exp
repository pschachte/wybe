======================================================================
AFTER EVERYTHING:
 Module func_quadruple
  public submods  : 
  public types    : 
  public resources: 
  public procs    : func_quadruple.double<0>
                    func_quadruple.quadruple<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

double > public inline (2 calls)
0: double(a#0:wybe.int, ?$#0:wybe.int): AliasPairs: []
    foreign llvm add(~a#0:wybe.int, ~a#0:wybe.int, ?$#0:wybe.int) @wybe:nn:nn


quadruple > public inline (0 calls)
0: quadruple(a#0:wybe.int, ?$#0:wybe.int): AliasPairs: []
    foreign llvm add(~a#0:wybe.int, ~a#0:wybe.int, ?tmp$1#0:wybe.int) @wybe:nn:nn
    foreign llvm add(~tmp$1#0:wybe.int, ~tmp$1#0:wybe.int, ?$#0:wybe.int) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'func_quadruple'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"func_quadruple.double<0>"(i64  %"a#0")    {
entry:
  %"$#0" = add   i64 %"a#0", %"a#0" 
  ret i64 %"$#0" 
}


define external fastcc  i64 @"func_quadruple.quadruple<0>"(i64  %"a#0")    {
entry:
  %"tmp$1#0" = add   i64 %"a#0", %"a#0" 
  %"$#0" = add   i64 %"tmp$1#0", %"tmp$1#0" 
  ret i64 %"$#0" 
}

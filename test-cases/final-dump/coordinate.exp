======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module coordinate
  representation  : (not a type)
  public submods  : Coordinate -> coordinate.Coordinate
  public resources: 
  public procs    : coordinate.<0>
                    coordinate.fcopy<0>
                    coordinate.Coordinate.=<0>
                    coordinate.Coordinate.Coordinate<0>
                    coordinate.Coordinate.Coordinate<1>
                    coordinate.Coordinate.x<0>
                    coordinate.Coordinate.x<1>
                    coordinate.Coordinate.y<0>
                    coordinate.Coordinate.y<1>
                    coordinate.Coordinate.z<0>
                    coordinate.Coordinate.z<1>
                    coordinate.Coordinate.~=<0>
  imports         : public use coordinate.Coordinate
                    use wybe
  resources       : 
  submodules      : coordinate.Coordinate
  procs           : 

module top-level code > public {semipure} (0 calls)
0: coordinate.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#7##0:coordinate.Coordinate) @coordinate:nn:nn
    foreign lpvm mutate(~tmp#7##0:coordinate.Coordinate, ?tmp#8##0:coordinate.Coordinate, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1000:wybe.int) @coordinate:nn:nn
    foreign lpvm mutate(~tmp#8##0:coordinate.Coordinate, ?tmp#9##0:coordinate.Coordinate, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1000:wybe.int) @coordinate:nn:nn
    foreign lpvm mutate(~tmp#9##0:coordinate.Coordinate, ?tmp#19##0:coordinate.Coordinate, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1000:wybe.int) @coordinate:nn:nn
    foreign lpvm {noalias} mutate(~tmp#19##0:coordinate.Coordinate, ?crd1##1:coordinate.Coordinate, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 8000:wybe.int) @coordinate:nn:nn
    wybe.string.print<0>("expect crd1^z=8000: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @coordinate:nn:nn
    foreign lpvm access(~crd1##1:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @coordinate:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @coordinate:nn:nn
    foreign c print_int(~tmp#2##0:wybe.int, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @coordinate:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#17##0:wybe.phantom, ?tmp#18##0:wybe.phantom) @coordinate:nn:nn
    foreign lpvm store(~%tmp#18##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @coordinate:nn:nn
    wybe.string.print<0>("expect crd2^z=1000: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @coordinate:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @coordinate:nn:nn
    foreign c print_int(1000:wybe.int, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @coordinate:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @coordinate:nn:nn
    foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @coordinate:nn:nn


proc fcopy > public {inline} (1 calls)
0: coordinate.fcopy<0>
fcopy(crd1##0:coordinate.Coordinate, ?#result##0:coordinate.Coordinate)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~crd1##0:coordinate.Coordinate, ?#result##0:coordinate.Coordinate) @coordinate:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'coordinate'

source_filename = "!ROOT!/final-dump/coordinate.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"expect crd1^z=8000: \00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"expect crd2^z=1000: \00", align 8
@"string#2" = private unnamed_addr constant {i64, i64} { i64 20, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#3" = private unnamed_addr constant {i64, i64} { i64 20, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"coordinate.<0>"() {
  %"tmp#24##0" = call ccc ptr @wybe_malloc(i32 24)
  %"tmp#7##0" = ptrtoint ptr %"tmp#24##0" to i64
  %"tmp#25##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 1000, ptr %"tmp#25##0"
  %"tmp#26##0" = add i64 %"tmp#7##0", 8
  %"tmp#27##0" = inttoptr i64 %"tmp#26##0" to ptr
  store i64 1000, ptr %"tmp#27##0"
  %"tmp#28##0" = add i64 %"tmp#7##0", 16
  %"tmp#29##0" = inttoptr i64 %"tmp#28##0" to ptr
  store i64 1000, ptr %"tmp#29##0"
  %"tmp#30##0" = add i64 %"tmp#7##0", 16
  %"tmp#31##0" = inttoptr i64 %"tmp#30##0" to ptr
  store i64 8000, ptr %"tmp#31##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#2" to i64 ))
  %"tmp#32##0" = add i64 %"tmp#7##0", 16
  %"tmp#33##0" = inttoptr i64 %"tmp#32##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#33##0"
  call ccc void @print_int(i64 %"tmp#2##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#3" to i64 ))
  call ccc void @print_int(i64 1000)
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i64 @"coordinate.fcopy<0>"(i64 %"crd1##0") {
  ret i64 %"crd1##0"
}

--------------------------------------------------
 Module coordinate.Coordinate
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : coordinate.Coordinate.=<0>
                    coordinate.Coordinate.Coordinate<0>
                    coordinate.Coordinate.Coordinate<1>
                    coordinate.Coordinate.x<0>
                    coordinate.Coordinate.x<1>
                    coordinate.Coordinate.y<0>
                    coordinate.Coordinate.y<1>
                    coordinate.Coordinate.z<0>
                    coordinate.Coordinate.z<1>
                    coordinate.Coordinate.~=<0>
  imports         : use coordinate
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: coordinate.Coordinate.=<0>
=(#left##0:coordinate.Coordinate, #right##0:coordinate.Coordinate, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:coordinate.Coordinate, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @coordinate:nn:nn
    foreign lpvm access(#left##0:coordinate.Coordinate, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @coordinate:nn:nn
    foreign lpvm access(~#left##0:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#z##0:wybe.int) @coordinate:nn:nn
    foreign lpvm access(#right##0:coordinate.Coordinate, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @coordinate:nn:nn
    foreign lpvm access(#right##0:coordinate.Coordinate, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @coordinate:nn:nn
    foreign lpvm access(~#right##0:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#z##0:wybe.int) @coordinate:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#z##0:wybe.int, ~#right#z##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc Coordinate > public {inline} (0 calls)
0: coordinate.Coordinate.Coordinate<0>
Coordinate(x##0:wybe.int, y##0:wybe.int, z##0:wybe.int, ?#result##0:coordinate.Coordinate)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:coordinate.Coordinate) @coordinate:nn:nn
    foreign lpvm mutate(~#rec##0:coordinate.Coordinate, ?#rec##1:coordinate.Coordinate, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~x##0:wybe.int) @coordinate:nn:nn
    foreign lpvm mutate(~#rec##1:coordinate.Coordinate, ?#rec##2:coordinate.Coordinate, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~y##0:wybe.int) @coordinate:nn:nn
    foreign lpvm mutate(~#rec##2:coordinate.Coordinate, ?#result##0:coordinate.Coordinate, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~z##0:wybe.int) @coordinate:nn:nn
proc Coordinate > public {inline} (10 calls)
1: coordinate.Coordinate.Coordinate<1>
Coordinate(?x##0:wybe.int, ?y##0:wybe.int, ?z##0:wybe.int, #result##0:coordinate.Coordinate)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:coordinate.Coordinate, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?x##0:wybe.int) @coordinate:nn:nn
    foreign lpvm access(#result##0:coordinate.Coordinate, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?y##0:wybe.int) @coordinate:nn:nn
    foreign lpvm access(~#result##0:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?z##0:wybe.int) @coordinate:nn:nn


proc x > public {inline} (0 calls)
0: coordinate.Coordinate.x<0>
x(#rec##0:coordinate.Coordinate, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:coordinate.Coordinate, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @coordinate:nn:nn
proc x > public {inline} (0 calls)
1: coordinate.Coordinate.x<1>
x(#rec##0:coordinate.Coordinate, ?#rec##1:coordinate.Coordinate, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:coordinate.Coordinate, ?#rec##1:coordinate.Coordinate, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @coordinate:nn:nn


proc y > public {inline} (0 calls)
0: coordinate.Coordinate.y<0>
y(#rec##0:coordinate.Coordinate, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:coordinate.Coordinate, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @coordinate:nn:nn
proc y > public {inline} (0 calls)
1: coordinate.Coordinate.y<1>
y(#rec##0:coordinate.Coordinate, ?#rec##1:coordinate.Coordinate, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:coordinate.Coordinate, ?#rec##1:coordinate.Coordinate, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @coordinate:nn:nn


proc z > public {inline} (0 calls)
0: coordinate.Coordinate.z<0>
z(#rec##0:coordinate.Coordinate, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @coordinate:nn:nn
proc z > public {inline} (0 calls)
1: coordinate.Coordinate.z<1>
z(#rec##0:coordinate.Coordinate, ?#rec##1:coordinate.Coordinate, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:coordinate.Coordinate, ?#rec##1:coordinate.Coordinate, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @coordinate:nn:nn


proc ~= > public {inline} (0 calls)
0: coordinate.Coordinate.~=<0>
~=(#left##0:coordinate.Coordinate, #right##0:coordinate.Coordinate, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:coordinate.Coordinate, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @coordinate:nn:nn
    foreign lpvm access(#left##0:coordinate.Coordinate, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @coordinate:nn:nn
    foreign lpvm access(~#left##0:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @coordinate:nn:nn
    foreign lpvm access(#right##0:coordinate.Coordinate, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @coordinate:nn:nn
    foreign lpvm access(#right##0:coordinate.Coordinate, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @coordinate:nn:nn
    foreign lpvm access(~#right##0:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @coordinate:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#9##0:wybe.bool) @int:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#7##0:wybe.int, ?tmp#10##0:wybe.bool) @int:nn:nn
        case ~tmp#10##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp#5##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)



  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'coordinate.Coordinate'

source_filename = "!ROOT!/final-dump/coordinate.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"coordinate.Coordinate.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#12##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#x##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#left##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#left#y##0" = load i64, ptr %"tmp#14##0"
  %"tmp#15##0" = add i64 %"#left##0", 16
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  %"#left#z##0" = load i64, ptr %"tmp#16##0"
  %"tmp#17##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#x##0" = load i64, ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"#right##0", 8
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  %"#right#y##0" = load i64, ptr %"tmp#19##0"
  %"tmp#20##0" = add i64 %"#right##0", 16
  %"tmp#21##0" = inttoptr i64 %"tmp#20##0" to ptr
  %"#right#z##0" = load i64, ptr %"tmp#21##0"
  %"tmp#1##0" = icmp eq i64 %"#left#x##0", %"#right#x##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = icmp eq i64 %"#left#y##0", %"#right#y##0"
  br i1 %"tmp#2##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#22##0" = icmp eq i64 %"#left#z##0", %"#right#z##0"
  ret i1 %"tmp#22##0"
if.else.1:
  ret i1 0
if.else.0:
  ret i1 0
}

define external fastcc i64 @"coordinate.Coordinate.Coordinate<0>"(i64 %"x##0", i64 %"y##0", i64 %"z##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 24)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"x##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"y##0", ptr %"tmp#3##0"
  %"tmp#4##0" = add i64 %"#rec##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"z##0", ptr %"tmp#5##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64, i64} @"coordinate.Coordinate.Coordinate<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = add i64 %"#result##0", 16
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#6##0"
  %"tmp#8##0" = insertvalue {i64, i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#9##0" = insertvalue {i64, i64, i64} %"tmp#8##0", i64 %"tmp#4##0", 1
  %"tmp#10##0" = insertvalue {i64, i64, i64} %"tmp#9##0", i64 %"tmp#7##0", 2
  ret {i64, i64, i64} %"tmp#10##0"
}

define external fastcc i64 @"coordinate.Coordinate.x<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"coordinate.Coordinate.x<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 24, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"coordinate.Coordinate.y<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"coordinate.Coordinate.y<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 24, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"coordinate.Coordinate.z<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 16
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"coordinate.Coordinate.z<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 24, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 16
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i1 @"coordinate.Coordinate.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#11##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"#left##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = add i64 %"#left##0", 16
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#16##0"
  %"tmp#17##0" = add i64 %"#right##0", 8
  %"tmp#18##0" = inttoptr i64 %"tmp#17##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#18##0"
  %"tmp#19##0" = add i64 %"#right##0", 16
  %"tmp#20##0" = inttoptr i64 %"tmp#19##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#20##0"
  %"tmp#9##0" = icmp eq i64 %"tmp#3##0", %"tmp#6##0"
  br i1 %"tmp#9##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#10##0" = icmp eq i64 %"tmp#4##0", %"tmp#7##0"
  br i1 %"tmp#10##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#0##0" = icmp eq i64 %"tmp#5##0", %"tmp#8##0"
  %"tmp#21##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#21##0"
if.else.1:
  %"tmp#22##0" = xor i1 0, 1
  ret i1 %"tmp#22##0"
if.else.0:
  %"tmp#23##0" = xor i1 0, 1
  ret i1 %"tmp#23##0"
}

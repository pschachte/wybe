======================================================================
AFTER EVERYTHING:
 Module coordinate
  public submods  : 
  public types    : Coordinate: (coordinate.Coordinate,Just address)
  public resources: 
  public procs    : coordinate.<0>
                    coordinate.fcopy<0>
                    coordinate.Coordinate./=<0>
                    coordinate.Coordinate.=<0>
                    coordinate.Coordinate.Coordinate<0>
                    coordinate.Coordinate.Coordinate<1>
                    coordinate.Coordinate.x<0>
                    coordinate.Coordinate.x<1>
                    coordinate.Coordinate.y<0>
                    coordinate.Coordinate.y<1>
                    coordinate.Coordinate.z<0>
                    coordinate.Coordinate.z<1>
  imports         : public use coordinate.Coordinate
                    use wybe
  types           : Coordinate/public  is address { Coordinate(x:int, y:int, z:int) @coordinate:1:27  }  @coordinate:1:5
  resources       : 
  submodules      : coordinate.Coordinate
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#4:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp$7#0:coordinate.Coordinate)
    foreign lpvm mutate(~tmp$7#0:coordinate.Coordinate, ?tmp$8#0:coordinate.Coordinate, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1000:wybe.int)
    foreign lpvm mutate(~tmp$8#0:coordinate.Coordinate, ?tmp$9#0:coordinate.Coordinate, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1000:wybe.int)
    foreign lpvm mutate(~tmp$9#0:coordinate.Coordinate, ?tmp$22#0:coordinate.Coordinate, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1000:wybe.int)
    foreign lpvm {noalias} mutate(~tmp$22#0:coordinate.Coordinate, ?%crd1#1:coordinate.Coordinate, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 8000:wybe.int)
    foreign c print_string("expect crd1.z=8000: ":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign lpvm access(~crd1#1:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.int)
    foreign c print_int(~tmp$2#0:wybe.int, ~#io#1:wybe.phantom, ?tmp$19#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$19#0:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign c print_string("expect crd2.z=1000: ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    foreign c print_int(1000:wybe.int, ~#io#3:wybe.phantom, ?tmp$25#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$25#0:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn


fcopy > public {inline} (1 calls)
0: fcopy(crd1#0:coordinate.Coordinate, ?$#0:coordinate.Coordinate):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(~crd1#0:coordinate.Coordinate, ?$#0:coordinate.Coordinate) @coordinate:6:5

  LLVM code       :

; ModuleID = 'coordinate'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_string(i64)    


@coordinate.21 =    constant [21 x i8] c"expect crd2.z=1000: \00"


@coordinate.15 =    constant [21 x i8] c"expect crd1.z=8000: \00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"coordinate.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 1000, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 1000, i64* %8 
  %9 = add   i64 %3, 16 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  store  i64 1000, i64* %11 
  %12 = add   i64 %3, 16 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  store  i64 8000, i64* %14 
  %16 = ptrtoint i8* getelementptr inbounds ([21 x i8], [21 x i8]* @coordinate.15, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %16)  
  %17 = add   i64 %3, 16 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  %20 = load  i64, i64* %19 
  tail call ccc  void  @print_int(i64  %20)  
  tail call ccc  void  @putchar(i8  10)  
  %22 = ptrtoint i8* getelementptr inbounds ([21 x i8], [21 x i8]* @coordinate.21, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %22)  
  tail call ccc  void  @print_int(i64  1000)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"coordinate.fcopy<0>"(i64  %"crd1#0")    {
entry:
  ret i64 %"crd1#0" 
}
--------------------------------------------------
 Module coordinate.Coordinate
  public submods  : 
  public types    : 
  public resources: 
  public procs    : coordinate.Coordinate./=<0>
                    coordinate.Coordinate.=<0>
                    coordinate.Coordinate.Coordinate<0>
                    coordinate.Coordinate.Coordinate<1>
                    coordinate.Coordinate.x<0>
                    coordinate.Coordinate.x<1>
                    coordinate.Coordinate.y<0>
                    coordinate.Coordinate.y<1>
                    coordinate.Coordinate.z<0>
                    coordinate.Coordinate.z<1>
  imports         : use coordinate
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:coordinate.Coordinate, $right#0:coordinate.Coordinate, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:coordinate.Coordinate, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign lpvm access($left#0:coordinate.Coordinate, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign lpvm access(~$left#0:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.int)
    foreign lpvm access($right#0:coordinate.Coordinate, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
    foreign lpvm access($right#0:coordinate.Coordinate, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$7#0:wybe.int)
    foreign lpvm access(~$right#0:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.int)
    foreign llvm icmp_eq(~tmp$3#0:wybe.int, ~tmp$6#0:wybe.int, ?tmp$9#0:wybe.bool) @wybe:nn:nn
    case ~tmp$9#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
        foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp$4#0:wybe.int, ~tmp$7#0:wybe.int, ?tmp$10#0:wybe.bool) @wybe:nn:nn
        case ~tmp$10#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
            foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp$5#0:wybe.int, ~tmp$8#0:wybe.int, ?tmp$0#0:wybe.bool) @wybe:nn:nn
            foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)




= > public {inline} (1 calls)
0: =($left#0:coordinate.Coordinate, $right#0:coordinate.Coordinate, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:coordinate.Coordinate, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access($left#0:coordinate.Coordinate, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access(~$left#0:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?$left$z#0:wybe.int)
    foreign lpvm access($right#0:coordinate.Coordinate, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access($right#0:coordinate.Coordinate, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?$right$y#0:wybe.int)
    foreign lpvm access(~$right#0:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?$right$z#0:wybe.int)
    foreign llvm icmp_eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp_eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
        case ~tmp$2#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp_eq(~$left$z#0:wybe.int, ~$right$z#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn




Coordinate > public {inline} (0 calls)
0: Coordinate(x#0:wybe.int, y#0:wybe.int, z#0:wybe.int, ?$#0:coordinate.Coordinate):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?$rec#0:!coordinate.Coordinate)
    foreign lpvm mutate(~%$rec#0:coordinate.Coordinate, ?%$rec#1:coordinate.Coordinate, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:coordinate.Coordinate, ?%$rec#2:coordinate.Coordinate, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~y#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:coordinate.Coordinate, ?%$#0:coordinate.Coordinate, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~z#0:wybe.int)
Coordinate > public {inline} (10 calls)
1: Coordinate(?x#0:wybe.int, ?y#0:wybe.int, ?z#0:wybe.int, $#0:coordinate.Coordinate):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($#0:coordinate.Coordinate, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access($#0:coordinate.Coordinate, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?y#0:wybe.int)
    foreign lpvm access(~$#0:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?z#0:wybe.int)


x > public {inline} (0 calls)
0: x($rec#0:coordinate.Coordinate, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:coordinate.Coordinate, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?$#0:wybe.int)
x > public {inline} (0 calls)
1: x($rec#0:coordinate.Coordinate, ?$rec#1:coordinate.Coordinate, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:coordinate.Coordinate, ?%$rec#1:coordinate.Coordinate, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public {inline} (0 calls)
0: y($rec#0:coordinate.Coordinate, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:coordinate.Coordinate, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?$#0:wybe.int)
y > public {inline} (0 calls)
1: y($rec#0:coordinate.Coordinate, ?$rec#1:coordinate.Coordinate, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:coordinate.Coordinate, ?%$rec#1:coordinate.Coordinate, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


z > public {inline} (0 calls)
0: z($rec#0:coordinate.Coordinate, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:coordinate.Coordinate, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?$#0:wybe.int)
z > public {inline} (0 calls)
1: z($rec#0:coordinate.Coordinate, ?$rec#1:coordinate.Coordinate, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:coordinate.Coordinate, ?%$rec#1:coordinate.Coordinate, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'coordinate.Coordinate'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"coordinate.Coordinate./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"$left#0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = inttoptr i64 %"$right#0" to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %15 = add   i64 %"$right#0", 8 
  %16 = inttoptr i64 %15 to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %19 = add   i64 %"$right#0", 16 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %"1$tmp$9#0" = icmp eq i64 %3, %14 
  br i1 %"1$tmp$9#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$10#0" = icmp eq i64 %7, %18 
  br i1 %"2$tmp$10#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = xor i1 0, 1 
  ret i1 %"3$$$#0" 
if.then1:
  %"4$tmp$0#0" = icmp eq i64 %11, %22 
  %"4$$$#0" = xor i1 %"4$tmp$0#0", 1 
  ret i1 %"4$$$#0" 
if.else1:
  %"5$$$#0" = xor i1 0, 1 
  ret i1 %"5$$$#0" 
}


define external fastcc  i1 @"coordinate.Coordinate.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %23 = inttoptr i64 %"$left#0" to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"$left#0", 8 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = add   i64 %"$left#0", 16 
  %31 = inttoptr i64 %30 to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  %33 = load  i64, i64* %32 
  %34 = inttoptr i64 %"$right#0" to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  %36 = load  i64, i64* %35 
  %37 = add   i64 %"$right#0", 8 
  %38 = inttoptr i64 %37 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  %40 = load  i64, i64* %39 
  %41 = add   i64 %"$right#0", 16 
  %42 = inttoptr i64 %41 to i64* 
  %43 = getelementptr  i64, i64* %42, i64 0 
  %44 = load  i64, i64* %43 
  %"1$tmp$1#0" = icmp eq i64 %25, %36 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = icmp eq i64 %29, %40 
  br i1 %"2$tmp$2#0", label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %"4$$$#0" = icmp eq i64 %33, %44 
  ret i1 %"4$$$#0" 
if.else1:
  ret i1 0 
}


define external fastcc  i64 @"coordinate.Coordinate.Coordinate<0>"(i64  %"x#0", i64  %"y#0", i64  %"z#0")    {
entry:
  %45 = trunc i64 24 to i32  
  %46 = tail call ccc  i8*  @wybe_malloc(i32  %45)  
  %47 = ptrtoint i8* %46 to i64 
  %48 = inttoptr i64 %47 to i64* 
  %49 = getelementptr  i64, i64* %48, i64 0 
  store  i64 %"x#0", i64* %49 
  %50 = add   i64 %47, 8 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  store  i64 %"y#0", i64* %52 
  %53 = add   i64 %47, 16 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  store  i64 %"z#0", i64* %55 
  ret i64 %47 
}


define external fastcc  {i64, i64, i64} @"coordinate.Coordinate.Coordinate<1>"(i64  %"$#0")    {
entry:
  %56 = inttoptr i64 %"$#0" to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = add   i64 %"$#0", 8 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  %62 = load  i64, i64* %61 
  %63 = add   i64 %"$#0", 16 
  %64 = inttoptr i64 %63 to i64* 
  %65 = getelementptr  i64, i64* %64, i64 0 
  %66 = load  i64, i64* %65 
  %67 = insertvalue {i64, i64, i64} undef, i64 %58, 0 
  %68 = insertvalue {i64, i64, i64} %67, i64 %62, 1 
  %69 = insertvalue {i64, i64, i64} %68, i64 %66, 2 
  ret {i64, i64, i64} %69 
}


define external fastcc  i64 @"coordinate.Coordinate.x<0>"(i64  %"$rec#0")    {
entry:
  %70 = inttoptr i64 %"$rec#0" to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  %72 = load  i64, i64* %71 
  ret i64 %72 
}


define external fastcc  i64 @"coordinate.Coordinate.x<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %73 = trunc i64 24 to i32  
  %74 = tail call ccc  i8*  @wybe_malloc(i32  %73)  
  %75 = ptrtoint i8* %74 to i64 
  %76 = inttoptr i64 %75 to i8* 
  %77 = inttoptr i64 %"$rec#0" to i8* 
  %78 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %76, i8*  %77, i32  %78, i32  8, i1  0)  
  %79 = inttoptr i64 %75 to i64* 
  %80 = getelementptr  i64, i64* %79, i64 0 
  store  i64 %"$field#0", i64* %80 
  ret i64 %75 
}


define external fastcc  i64 @"coordinate.Coordinate.y<0>"(i64  %"$rec#0")    {
entry:
  %81 = add   i64 %"$rec#0", 8 
  %82 = inttoptr i64 %81 to i64* 
  %83 = getelementptr  i64, i64* %82, i64 0 
  %84 = load  i64, i64* %83 
  ret i64 %84 
}


define external fastcc  i64 @"coordinate.Coordinate.y<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %85 = trunc i64 24 to i32  
  %86 = tail call ccc  i8*  @wybe_malloc(i32  %85)  
  %87 = ptrtoint i8* %86 to i64 
  %88 = inttoptr i64 %87 to i8* 
  %89 = inttoptr i64 %"$rec#0" to i8* 
  %90 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %88, i8*  %89, i32  %90, i32  8, i1  0)  
  %91 = add   i64 %87, 8 
  %92 = inttoptr i64 %91 to i64* 
  %93 = getelementptr  i64, i64* %92, i64 0 
  store  i64 %"$field#0", i64* %93 
  ret i64 %87 
}


define external fastcc  i64 @"coordinate.Coordinate.z<0>"(i64  %"$rec#0")    {
entry:
  %94 = add   i64 %"$rec#0", 16 
  %95 = inttoptr i64 %94 to i64* 
  %96 = getelementptr  i64, i64* %95, i64 0 
  %97 = load  i64, i64* %96 
  ret i64 %97 
}


define external fastcc  i64 @"coordinate.Coordinate.z<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %98 = trunc i64 24 to i32  
  %99 = tail call ccc  i8*  @wybe_malloc(i32  %98)  
  %100 = ptrtoint i8* %99 to i64 
  %101 = inttoptr i64 %100 to i8* 
  %102 = inttoptr i64 %"$rec#0" to i8* 
  %103 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %101, i8*  %102, i32  %103, i32  8, i1  0)  
  %104 = add   i64 %100, 16 
  %105 = inttoptr i64 %104 to i64* 
  %106 = getelementptr  i64, i64* %105, i64 0 
  store  i64 %"$field#0", i64* %106 
  ret i64 %100 
}

======================================================================
AFTER EVERYTHING:
 Module multictr2
  public submods  : 
  public types    : t: (multictr2.t,Just address)
  public resources: 
  public procs    : multictr2.print_t<0>
                    multictr2.t./=<0>
                    multictr2.t.=<0>
                    multictr2.t.c01<0>
                    multictr2.t.c01<1>
                    multictr2.t.c02<0>
                    multictr2.t.c02<1>
                    multictr2.t.c03<0>
                    multictr2.t.c03<1>
                    multictr2.t.c04<0>
                    multictr2.t.c04<1>
                    multictr2.t.c05<0>
                    multictr2.t.c05<1>
                    multictr2.t.c06<0>
                    multictr2.t.c06<1>
                    multictr2.t.c07<0>
                    multictr2.t.c07<1>
                    multictr2.t.c08<0>
                    multictr2.t.c08<1>
                    multictr2.t.f01<0>
                    multictr2.t.f01<1>
                    multictr2.t.f02<0>
                    multictr2.t.f02<1>
                    multictr2.t.f03<0>
                    multictr2.t.f03<1>
                    multictr2.t.f04<0>
                    multictr2.t.f04<1>
                    multictr2.t.f05<0>
                    multictr2.t.f05<1>
                    multictr2.t.f06<0>
                    multictr2.t.f06<1>
                    multictr2.t.f07<0>
                    multictr2.t.f07<1>
                    multictr2.t.f08_a<0>
                    multictr2.t.f08_a<1>
                    multictr2.t.f08_b<0>
                    multictr2.t.f08_b<1>
                    multictr2.t.f08_c<0>
                    multictr2.t.f08_c<1>
  imports         : public use multictr2.t
                    use wybe
  types           : t/public  is address { c01(f01:int) @multictr2:3:8 | c02(f02:int) @multictr2:4:8 | c03(f03:int) @multictr2:5:8 | c04(f04:int) @multictr2:6:8 | c05(f05:int) @multictr2:7:8 | c06(f06:int) @multictr2:8:8 | c07(f07:int) @multictr2:9:8 | c08(f08_a:int, f08_b:int, f08_c:float) @multictr2:10:8  }  @multictr2:2:5
  resources       : 
  submodules      : multictr2.t
  procs           : 

print_t > public (0 calls)
0: print_t(x#0:multictr2.t, io#0:wybe.phantom, ?io#8:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and(x#0:multictr2.t, 7:wybe.int, ?tmp$9#0:wybe.int)
    foreign llvm icmp eq(tmp$9#0:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.bool)
    case ~tmp$10#0:wybe.bool of
    0:
        foreign llvm icmp eq(tmp$9#0:wybe.int, 1:wybe.int, ?tmp$13#0:wybe.bool)
        case ~tmp$13#0:wybe.bool of
        0:
            foreign llvm icmp eq(tmp$9#0:wybe.int, 2:wybe.int, ?tmp$16#0:wybe.bool)
            case ~tmp$16#0:wybe.bool of
            0:
                foreign llvm icmp eq(tmp$9#0:wybe.int, 3:wybe.int, ?tmp$19#0:wybe.bool)
                case ~tmp$19#0:wybe.bool of
                0:
                    foreign llvm icmp eq(tmp$9#0:wybe.int, 4:wybe.int, ?tmp$22#0:wybe.bool)
                    case ~tmp$22#0:wybe.bool of
                    0:
                        foreign llvm icmp eq(tmp$9#0:wybe.int, 5:wybe.int, ?tmp$25#0:wybe.bool)
                        case ~tmp$25#0:wybe.bool of
                        0:
                            foreign llvm icmp eq(tmp$9#0:wybe.int, 6:wybe.int, ?tmp$28#0:wybe.bool)
                            case ~tmp$28#0:wybe.bool of
                            0:
                                foreign llvm icmp eq(~tmp$9#0:wybe.int, 7:wybe.int, ?tmp$31#0:wybe.bool)
                                case ~tmp$31#0:wybe.bool of
                                0:
                                    foreign c putchar('\n':wybe.char, ~#io#0:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn

                                1:
                                    foreign lpvm access(x#0:multictr2.t, -7:wybe.int, 24:wybe.int, 7:wybe.int, ?a#7:wybe.int)
                                    foreign lpvm access(x#0:multictr2.t, 1:wybe.int, 24:wybe.int, 7:wybe.int, ?b#0:wybe.int)
                                    foreign lpvm access(~x#0:multictr2.t, 9:wybe.int, 24:wybe.int, 7:wybe.int, ?c#0:wybe.float)
                                    foreign c print_string("c08(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
                                    foreign c print_int(~a#7:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
                                    foreign c print_string(", ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
                                    foreign c print_int(~b#0:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
                                    foreign c print_string(", ":wybe.string, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @wybe:nn:nn
                                    foreign c print_float(~c#0:wybe.float, ~#io#5:wybe.phantom, ?#io#6:wybe.phantom) @wybe:nn:nn
                                    foreign c print_string(")":wybe.string, ~#io#6:wybe.phantom, ?#io#7:wybe.phantom) @wybe:nn:nn
                                    foreign c putchar('\n':wybe.char, ~#io#7:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn


                            1:
                                foreign lpvm access(~x#0:multictr2.t, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?a#6:wybe.int)
                                foreign c print_string("c07(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
                                foreign c print_int(~a#6:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
                                foreign c print_string(")":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
                                foreign c putchar('\n':wybe.char, ~#io#3:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn


                        1:
                            foreign lpvm access(~x#0:multictr2.t, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?a#5:wybe.int)
                            foreign c print_string("c06(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
                            foreign c print_int(~a#5:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
                            foreign c print_string(")":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
                            foreign c putchar('\n':wybe.char, ~#io#3:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn


                    1:
                        foreign lpvm access(~x#0:multictr2.t, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?a#4:wybe.int)
                        foreign c print_string("c05(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
                        foreign c print_int(~a#4:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
                        foreign c print_string(")":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
                        foreign c putchar('\n':wybe.char, ~#io#3:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn


                1:
                    foreign lpvm access(~x#0:multictr2.t, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?a#3:wybe.int)
                    foreign c print_string("c04(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
                    foreign c print_int(~a#3:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
                    foreign c print_string(")":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
                    foreign c putchar('\n':wybe.char, ~#io#3:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn


            1:
                foreign lpvm access(~x#0:multictr2.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?a#2:wybe.int)
                foreign c print_string("c03(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
                foreign c print_int(~a#2:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
                foreign c print_string(")":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
                foreign c putchar('\n':wybe.char, ~#io#3:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn


        1:
            foreign lpvm access(~x#0:multictr2.t, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?a#1:wybe.int)
            foreign c print_string("c03(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
            foreign c print_int(~a#1:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
            foreign c print_string(")":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
            foreign c putchar('\n':wybe.char, ~#io#3:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn


    1:
        foreign lpvm access(~x#0:multictr2.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a#0:wybe.int)
        foreign c print_string("c01(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
        foreign c print_int(~a#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
        foreign c print_string(")":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~#io#3:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn


  LLVM code       :

; ModuleID = 'multictr2'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external ccc  void @print_float(double)    


declare external ccc  void @print_int(i64)    


@multictr2.74 =    constant [2 x i8] c")\00"


@multictr2.72 =    constant [3 x i8] c", \00"


@multictr2.70 =    constant [3 x i8] c", \00"


@multictr2.68 =    constant [5 x i8] c"c08(\00"


@multictr2.54 =    constant [2 x i8] c")\00"


@multictr2.52 =    constant [5 x i8] c"c07(\00"


@multictr2.46 =    constant [2 x i8] c")\00"


@multictr2.44 =    constant [5 x i8] c"c06(\00"


@multictr2.38 =    constant [2 x i8] c")\00"


@multictr2.36 =    constant [5 x i8] c"c05(\00"


@multictr2.30 =    constant [2 x i8] c")\00"


@multictr2.28 =    constant [5 x i8] c"c04(\00"


@multictr2.22 =    constant [2 x i8] c")\00"


@multictr2.20 =    constant [5 x i8] c"c03(\00"


@multictr2.14 =    constant [2 x i8] c")\00"


@multictr2.12 =    constant [5 x i8] c"c03(\00"


@multictr2.6 =    constant [2 x i8] c")\00"


@multictr2.4 =    constant [5 x i8] c"c01(\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"multictr2.print_t<0>"(i64  %"x#0")    {
entry:
  %"1$tmp$9#0" = and i64 %"x#0", 7 
  %"1$tmp$10#0" = icmp eq i64 %"1$tmp$9#0", 0 
  br i1 %"1$tmp$10#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"x#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %5 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @multictr2.4, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %5)  
  tail call ccc  void  @print_int(i64  %3)  
  %7 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @multictr2.6, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %7)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  %"3$tmp$13#0" = icmp eq i64 %"1$tmp$9#0", 1 
  br i1 %"3$tmp$13#0", label %if.then1, label %if.else1 
if.then1:
  %8 = add   i64 %"x#0", -1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %13 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @multictr2.12, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %13)  
  tail call ccc  void  @print_int(i64  %11)  
  %15 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @multictr2.14, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %15)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else1:
  %"5$tmp$16#0" = icmp eq i64 %"1$tmp$9#0", 2 
  br i1 %"5$tmp$16#0", label %if.then2, label %if.else2 
if.then2:
  %16 = add   i64 %"x#0", -2 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  %19 = load  i64, i64* %18 
  %21 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @multictr2.20, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %21)  
  tail call ccc  void  @print_int(i64  %19)  
  %23 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @multictr2.22, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %23)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else2:
  %"7$tmp$19#0" = icmp eq i64 %"1$tmp$9#0", 3 
  br i1 %"7$tmp$19#0", label %if.then3, label %if.else3 
if.then3:
  %24 = add   i64 %"x#0", -3 
  %25 = inttoptr i64 %24 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  %27 = load  i64, i64* %26 
  %29 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @multictr2.28, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %29)  
  tail call ccc  void  @print_int(i64  %27)  
  %31 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @multictr2.30, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %31)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else3:
  %"9$tmp$22#0" = icmp eq i64 %"1$tmp$9#0", 4 
  br i1 %"9$tmp$22#0", label %if.then4, label %if.else4 
if.then4:
  %32 = add   i64 %"x#0", -4 
  %33 = inttoptr i64 %32 to i64* 
  %34 = getelementptr  i64, i64* %33, i64 0 
  %35 = load  i64, i64* %34 
  %37 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @multictr2.36, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %37)  
  tail call ccc  void  @print_int(i64  %35)  
  %39 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @multictr2.38, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %39)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else4:
  %"11$tmp$25#0" = icmp eq i64 %"1$tmp$9#0", 5 
  br i1 %"11$tmp$25#0", label %if.then5, label %if.else5 
if.then5:
  %40 = add   i64 %"x#0", -5 
  %41 = inttoptr i64 %40 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  %43 = load  i64, i64* %42 
  %45 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @multictr2.44, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %45)  
  tail call ccc  void  @print_int(i64  %43)  
  %47 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @multictr2.46, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %47)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else5:
  %"13$tmp$28#0" = icmp eq i64 %"1$tmp$9#0", 6 
  br i1 %"13$tmp$28#0", label %if.then6, label %if.else6 
if.then6:
  %48 = add   i64 %"x#0", -6 
  %49 = inttoptr i64 %48 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  %51 = load  i64, i64* %50 
  %53 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @multictr2.52, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %53)  
  tail call ccc  void  @print_int(i64  %51)  
  %55 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @multictr2.54, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %55)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else6:
  %"15$tmp$31#0" = icmp eq i64 %"1$tmp$9#0", 7 
  br i1 %"15$tmp$31#0", label %if.then7, label %if.else7 
if.then7:
  %56 = add   i64 %"x#0", -7 
  %57 = inttoptr i64 %56 to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  %59 = load  i64, i64* %58 
  %60 = add   i64 %"x#0", 1 
  %61 = inttoptr i64 %60 to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  %63 = load  i64, i64* %62 
  %64 = add   i64 %"x#0", 9 
  %65 = inttoptr i64 %64 to double* 
  %66 = getelementptr  double, double* %65, i64 0 
  %67 = load  double, double* %66 
  %69 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @multictr2.68, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %69)  
  tail call ccc  void  @print_int(i64  %59)  
  %71 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @multictr2.70, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %71)  
  tail call ccc  void  @print_int(i64  %63)  
  %73 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @multictr2.72, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %73)  
  tail call ccc  void  @print_float(double  %67)  
  %75 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @multictr2.74, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %75)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else7:
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module multictr2.t
  public submods  : 
  public types    : 
  public resources: 
  public procs    : multictr2.t./=<0>
                    multictr2.t.=<0>
                    multictr2.t.c01<0>
                    multictr2.t.c01<1>
                    multictr2.t.c02<0>
                    multictr2.t.c02<1>
                    multictr2.t.c03<0>
                    multictr2.t.c03<1>
                    multictr2.t.c04<0>
                    multictr2.t.c04<1>
                    multictr2.t.c05<0>
                    multictr2.t.c05<1>
                    multictr2.t.c06<0>
                    multictr2.t.c06<1>
                    multictr2.t.c07<0>
                    multictr2.t.c07<1>
                    multictr2.t.c08<0>
                    multictr2.t.c08<1>
                    multictr2.t.f01<0>
                    multictr2.t.f01<1>
                    multictr2.t.f02<0>
                    multictr2.t.f02<1>
                    multictr2.t.f03<0>
                    multictr2.t.f03<1>
                    multictr2.t.f04<0>
                    multictr2.t.f04<1>
                    multictr2.t.f05<0>
                    multictr2.t.f05<1>
                    multictr2.t.f06<0>
                    multictr2.t.f06<1>
                    multictr2.t.f07<0>
                    multictr2.t.f07<1>
                    multictr2.t.f08_a<0>
                    multictr2.t.f08_a<1>
                    multictr2.t.f08_b<0>
                    multictr2.t.f08_b<1>
                    multictr2.t.f08_c<0>
                    multictr2.t.f08_c<1>
  imports         : use multictr2
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline (0 calls)
0: /=($left#0:multictr2.t, $right#0:multictr2.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    multictr2.t.=<0>(~$left#0:multictr2.t, ~$right#0:multictr2.t, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (14 calls)
0: =($left#0:multictr2.t, $right#0:multictr2.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($left#0:multictr2.t, 7:wybe.int, ?tmp$28#0:wybe.int)
    foreign llvm icmp eq(tmp$28#0:wybe.int, 0:wybe.int, ?tmp$29#0:wybe.bool)
    case ~tmp$29#0:wybe.bool of
    0:
        foreign llvm icmp eq(tmp$28#0:wybe.int, 1:wybe.int, ?tmp$32#0:wybe.bool)
        case ~tmp$32#0:wybe.bool of
        0:
            foreign llvm icmp eq(tmp$28#0:wybe.int, 2:wybe.int, ?tmp$35#0:wybe.bool)
            case ~tmp$35#0:wybe.bool of
            0:
                foreign llvm icmp eq(tmp$28#0:wybe.int, 3:wybe.int, ?tmp$38#0:wybe.bool)
                case ~tmp$38#0:wybe.bool of
                0:
                    foreign llvm icmp eq(tmp$28#0:wybe.int, 4:wybe.int, ?tmp$41#0:wybe.bool)
                    case ~tmp$41#0:wybe.bool of
                    0:
                        foreign llvm icmp eq(tmp$28#0:wybe.int, 5:wybe.int, ?tmp$44#0:wybe.bool)
                        case ~tmp$44#0:wybe.bool of
                        0:
                            foreign llvm icmp eq(tmp$28#0:wybe.int, 6:wybe.int, ?tmp$47#0:wybe.bool)
                            case ~tmp$47#0:wybe.bool of
                            0:
                                foreign llvm icmp eq(~tmp$28#0:wybe.int, 7:wybe.int, ?tmp$50#0:wybe.bool)
                                case ~tmp$50#0:wybe.bool of
                                0:
                                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                                1:
                                    foreign lpvm access($left#0:multictr2.t, -7:wybe.int, 24:wybe.int, 7:wybe.int, ?$left$f08_a#0:wybe.int)
                                    foreign lpvm access($left#0:multictr2.t, 1:wybe.int, 24:wybe.int, 7:wybe.int, ?$left$f08_b#0:wybe.int)
                                    foreign lpvm access(~$left#0:multictr2.t, 9:wybe.int, 24:wybe.int, 7:wybe.int, ?$left$f08_c#0:wybe.float)
                                    foreign llvm and($right#0:multictr2.t, 7:wybe.int, ?tmp$52#0:wybe.int)
                                    foreign llvm icmp eq(~tmp$52#0:wybe.int, 7:wybe.int, ?tmp$53#0:wybe.bool)
                                    case ~tmp$53#0:wybe.bool of
                                    0:
                                        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                                    1:
                                        foreign lpvm access($right#0:multictr2.t, -7:wybe.int, 24:wybe.int, 7:wybe.int, ?$right$f08_a#0:wybe.int)
                                        foreign lpvm access($right#0:multictr2.t, 1:wybe.int, 24:wybe.int, 7:wybe.int, ?$right$f08_b#0:wybe.int)
                                        foreign lpvm access(~$right#0:multictr2.t, 9:wybe.int, 24:wybe.int, 7:wybe.int, ?$right$f08_c#0:wybe.float)
                                        foreign llvm icmp eq(~$left$f08_a#0:wybe.int, ~$right$f08_a#0:wybe.int, ?tmp$16#0:wybe.bool) @wybe:nn:nn
                                        case ~tmp$16#0:wybe.bool of
                                        0:
                                            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                                        1:
                                            foreign llvm icmp eq(~$left$f08_b#0:wybe.int, ~$right$f08_b#0:wybe.int, ?tmp$17#0:wybe.bool) @wybe:nn:nn
                                            case ~tmp$17#0:wybe.bool of
                                            0:
                                                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                                            1:
                                                foreign llvm fcmp eq(~$left$f08_c#0:wybe.float, ~$right$f08_c#0:wybe.float, ?$$#0:wybe.bool) @wybe:nn:nn





                            1:
                                foreign lpvm access(~$left#0:multictr2.t, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?$left$f07#0:wybe.int)
                                foreign llvm and($right#0:multictr2.t, 7:wybe.int, ?tmp$49#0:wybe.int)
                                foreign llvm icmp eq(~tmp$49#0:wybe.int, 6:wybe.int, ?tmp$50#0:wybe.bool)
                                case ~tmp$50#0:wybe.bool of
                                0:
                                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                                1:
                                    foreign lpvm access(~$right#0:multictr2.t, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?$right$f07#0:wybe.int)
                                    foreign llvm icmp eq(~$left$f07#0:wybe.int, ~$right$f07#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



                        1:
                            foreign lpvm access(~$left#0:multictr2.t, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?$left$f06#0:wybe.int)
                            foreign llvm and($right#0:multictr2.t, 7:wybe.int, ?tmp$46#0:wybe.int)
                            foreign llvm icmp eq(~tmp$46#0:wybe.int, 5:wybe.int, ?tmp$47#0:wybe.bool)
                            case ~tmp$47#0:wybe.bool of
                            0:
                                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                            1:
                                foreign lpvm access(~$right#0:multictr2.t, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?$right$f06#0:wybe.int)
                                foreign llvm icmp eq(~$left$f06#0:wybe.int, ~$right$f06#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



                    1:
                        foreign lpvm access(~$left#0:multictr2.t, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?$left$f05#0:wybe.int)
                        foreign llvm and($right#0:multictr2.t, 7:wybe.int, ?tmp$43#0:wybe.int)
                        foreign llvm icmp eq(~tmp$43#0:wybe.int, 4:wybe.int, ?tmp$44#0:wybe.bool)
                        case ~tmp$44#0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                        1:
                            foreign lpvm access(~$right#0:multictr2.t, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?$right$f05#0:wybe.int)
                            foreign llvm icmp eq(~$left$f05#0:wybe.int, ~$right$f05#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



                1:
                    foreign lpvm access(~$left#0:multictr2.t, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?$left$f04#0:wybe.int)
                    foreign llvm and($right#0:multictr2.t, 7:wybe.int, ?tmp$40#0:wybe.int)
                    foreign llvm icmp eq(~tmp$40#0:wybe.int, 3:wybe.int, ?tmp$41#0:wybe.bool)
                    case ~tmp$41#0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                    1:
                        foreign lpvm access(~$right#0:multictr2.t, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?$right$f04#0:wybe.int)
                        foreign llvm icmp eq(~$left$f04#0:wybe.int, ~$right$f04#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



            1:
                foreign lpvm access(~$left#0:multictr2.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?$left$f03#0:wybe.int)
                foreign llvm and($right#0:multictr2.t, 7:wybe.int, ?tmp$37#0:wybe.int)
                foreign llvm icmp eq(~tmp$37#0:wybe.int, 2:wybe.int, ?tmp$38#0:wybe.bool)
                case ~tmp$38#0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                1:
                    foreign lpvm access(~$right#0:multictr2.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?$right$f03#0:wybe.int)
                    foreign llvm icmp eq(~$left$f03#0:wybe.int, ~$right$f03#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



        1:
            foreign lpvm access(~$left#0:multictr2.t, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?$left$f02#0:wybe.int)
            foreign llvm and($right#0:multictr2.t, 7:wybe.int, ?tmp$34#0:wybe.int)
            foreign llvm icmp eq(~tmp$34#0:wybe.int, 1:wybe.int, ?tmp$35#0:wybe.bool)
            case ~tmp$35#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign lpvm access(~$right#0:multictr2.t, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?$right$f02#0:wybe.int)
                foreign llvm icmp eq(~$left$f02#0:wybe.int, ~$right$f02#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



    1:
        foreign lpvm access(~$left#0:multictr2.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?$left$f01#0:wybe.int)
        foreign llvm and($right#0:multictr2.t, 7:wybe.int, ?tmp$31#0:wybe.int)
        foreign llvm icmp eq(~tmp$31#0:wybe.int, 0:wybe.int, ?tmp$32#0:wybe.bool)
        case ~tmp$32#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access(~$right#0:multictr2.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?$right$f01#0:wybe.int)
            foreign llvm icmp eq(~$left$f01#0:wybe.int, ~$right$f01#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn




c01 > public inline (0 calls)
0: c01(f01#0:wybe.int, ?$#0:multictr2.t):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?$rec#0:!multictr2.t)
    foreign lpvm mutate(~%$rec#0:multictr2.t, ?%$#0:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f01#0:wybe.int)
c01 > public inline (24 calls)
1: c01(?f01#0:wybe.int, $#0:multictr2.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$#0:multictr2.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?f01#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



c02 > public inline (0 calls)
0: c02(f02#0:wybe.int, ?$#0:multictr2.t):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?$rec#0:!multictr2.t)
    foreign lpvm mutate(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f02#0:wybe.int)
    foreign llvm or(~$rec#1, 1:wybe.int, ?$#0:multictr2.t)
c02 > public inline (19 calls)
1: c02(?f02#0:wybe.int, $#0:multictr2.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 1:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$#0:multictr2.t, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?f02#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



c03 > public inline (0 calls)
0: c03(f03#0:wybe.int, ?$#0:multictr2.t):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?$rec#0:!multictr2.t)
    foreign lpvm mutate(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f03#0:wybe.int)
    foreign llvm or(~$rec#1, 2:wybe.int, ?$#0:multictr2.t)
c03 > public inline (17 calls)
1: c03(?f03#0:wybe.int, $#0:multictr2.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 2:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$#0:multictr2.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?f03#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



c04 > public inline (0 calls)
0: c04(f04#0:wybe.int, ?$#0:multictr2.t):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?$rec#0:!multictr2.t)
    foreign lpvm mutate(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f04#0:wybe.int)
    foreign llvm or(~$rec#1, 3:wybe.int, ?$#0:multictr2.t)
c04 > public inline (15 calls)
1: c04(?f04#0:wybe.int, $#0:multictr2.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 3:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$#0:multictr2.t, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?f04#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



c05 > public inline (0 calls)
0: c05(f05#0:wybe.int, ?$#0:multictr2.t):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?$rec#0:!multictr2.t)
    foreign lpvm mutate(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f05#0:wybe.int)
    foreign llvm or(~$rec#1, 4:wybe.int, ?$#0:multictr2.t)
c05 > public inline (13 calls)
1: c05(?f05#0:wybe.int, $#0:multictr2.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 4:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$#0:multictr2.t, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?f05#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



c06 > public inline (0 calls)
0: c06(f06#0:wybe.int, ?$#0:multictr2.t):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?$rec#0:!multictr2.t)
    foreign lpvm mutate(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f06#0:wybe.int)
    foreign llvm or(~$rec#1, 5:wybe.int, ?$#0:multictr2.t)
c06 > public inline (11 calls)
1: c06(?f06#0:wybe.int, $#0:multictr2.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 5:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$#0:multictr2.t, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?f06#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



c07 > public inline (0 calls)
0: c07(f07#0:wybe.int, ?$#0:multictr2.t):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?$rec#0:!multictr2.t)
    foreign lpvm mutate(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f07#0:wybe.int)
    foreign llvm or(~$rec#1, 6:wybe.int, ?$#0:multictr2.t)
c07 > public inline (9 calls)
1: c07(?f07#0:wybe.int, $#0:multictr2.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 6:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$#0:multictr2.t, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?f07#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



c08 > public inline (0 calls)
0: c08(f08_a#0:wybe.int, f08_b#0:wybe.int, f08_c#0:wybe.float, ?$#0:multictr2.t):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?$rec#0:!multictr2.t)
    foreign lpvm mutate(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~f08_a#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:multictr2.t, ?%$rec#2:multictr2.t, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~f08_b#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:multictr2.t, ?%$rec#3:multictr2.t, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~f08_c#0:wybe.float)
    foreign llvm or(~$rec#3, 7:wybe.int, ?$#0:multictr2.t)
c08 > public inline (9 calls)
1: c08(?f08_a#0:wybe.int, ?f08_b#0:wybe.int, ?f08_c#0:wybe.float, $#0:multictr2.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 7:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($#0:multictr2.t, -7:wybe.int, 24:wybe.int, 7:wybe.int, ?f08_a#0:wybe.int)
        foreign lpvm access($#0:multictr2.t, 1:wybe.int, 24:wybe.int, 7:wybe.int, ?f08_b#0:wybe.int)
        foreign lpvm access(~$#0:multictr2.t, 9:wybe.int, 24:wybe.int, 7:wybe.int, ?f08_c#0:wybe.float)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



f01 > public inline (0 calls)
0: f01($rec#0:multictr2.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:multictr2.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

f01 > public inline (0 calls)
1: f01($rec#0:multictr2.t, ?$rec#1:multictr2.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:multictr2.t, ?$rec#1:multictr2.t)

    1:
        foreign lpvm mutate noalias(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



f02 > public inline (0 calls)
0: f02($rec#0:multictr2.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 1:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:multictr2.t, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

f02 > public inline (0 calls)
1: f02($rec#0:multictr2.t, ?$rec#1:multictr2.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 1:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:multictr2.t, ?$rec#1:multictr2.t)

    1:
        foreign lpvm mutate noalias(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, -1:wybe.int, 0:wybe.int, 8:wybe.int, 1:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



f03 > public inline (0 calls)
0: f03($rec#0:multictr2.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 2:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:multictr2.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

f03 > public inline (0 calls)
1: f03($rec#0:multictr2.t, ?$rec#1:multictr2.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 2:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:multictr2.t, ?$rec#1:multictr2.t)

    1:
        foreign lpvm mutate noalias(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, -2:wybe.int, 0:wybe.int, 8:wybe.int, 2:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



f04 > public inline (0 calls)
0: f04($rec#0:multictr2.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 3:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:multictr2.t, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

f04 > public inline (0 calls)
1: f04($rec#0:multictr2.t, ?$rec#1:multictr2.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 3:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:multictr2.t, ?$rec#1:multictr2.t)

    1:
        foreign lpvm mutate noalias(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, -3:wybe.int, 0:wybe.int, 8:wybe.int, 3:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



f05 > public inline (0 calls)
0: f05($rec#0:multictr2.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 4:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:multictr2.t, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

f05 > public inline (0 calls)
1: f05($rec#0:multictr2.t, ?$rec#1:multictr2.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 4:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:multictr2.t, ?$rec#1:multictr2.t)

    1:
        foreign lpvm mutate noalias(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, -4:wybe.int, 0:wybe.int, 8:wybe.int, 4:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



f06 > public inline (0 calls)
0: f06($rec#0:multictr2.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 5:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:multictr2.t, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

f06 > public inline (0 calls)
1: f06($rec#0:multictr2.t, ?$rec#1:multictr2.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 5:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:multictr2.t, ?$rec#1:multictr2.t)

    1:
        foreign lpvm mutate noalias(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, -5:wybe.int, 0:wybe.int, 8:wybe.int, 5:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



f07 > public inline (0 calls)
0: f07($rec#0:multictr2.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 6:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:multictr2.t, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

f07 > public inline (0 calls)
1: f07($rec#0:multictr2.t, ?$rec#1:multictr2.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 6:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:multictr2.t, ?$rec#1:multictr2.t)

    1:
        foreign lpvm mutate noalias(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, -6:wybe.int, 0:wybe.int, 8:wybe.int, 6:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



f08_a > public inline (0 calls)
0: f08_a($rec#0:multictr2.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 7:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:multictr2.t, -7:wybe.int, 24:wybe.int, 7:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

f08_a > public inline (0 calls)
1: f08_a($rec#0:multictr2.t, ?$rec#1:multictr2.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 7:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:multictr2.t, ?$rec#1:multictr2.t)

    1:
        foreign lpvm mutate noalias(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, -7:wybe.int, 0:wybe.int, 24:wybe.int, 7:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



f08_b > public inline (0 calls)
0: f08_b($rec#0:multictr2.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 7:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:multictr2.t, 1:wybe.int, 24:wybe.int, 7:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

f08_b > public inline (0 calls)
1: f08_b($rec#0:multictr2.t, ?$rec#1:multictr2.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 7:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:multictr2.t, ?$rec#1:multictr2.t)

    1:
        foreign lpvm mutate noalias(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, 1:wybe.int, 0:wybe.int, 24:wybe.int, 7:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



f08_c > public inline (0 calls)
0: f08_c($rec#0:multictr2.t, ?$#0:wybe.float, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 7:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:multictr2.t, 9:wybe.int, 24:wybe.int, 7:wybe.int, ?$#0:wybe.float)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

f08_c > public inline (0 calls)
1: f08_c($rec#0:multictr2.t, ?$rec#1:multictr2.t, $field#0:wybe.float, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and($rec#0:multictr2.t, 7:wybe.int, ?tmp$0#0:!wybe.int)
    foreign llvm icmp eq(~tmp$0#0:!wybe.int, 7:wybe.int, ?tmp$1#0:wybe.bool)
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:multictr2.t, ?$rec#1:multictr2.t)

    1:
        foreign lpvm mutate noalias(~%$rec#0:multictr2.t, ?%$rec#1:multictr2.t, 9:wybe.int, 0:wybe.int, 24:wybe.int, 7:wybe.int, ~$field#0:wybe.float)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'multictr2.t'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"multictr2.t./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i1  @"multictr2.t.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  %"1$$$#0" = xor i1 %"1$tmp$0#0", 1 
  ret i1 %"1$$$#0" 
}


define external fastcc  i1 @"multictr2.t.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$28#0" = and i64 %"$left#0", 7 
  %"1$tmp$29#0" = icmp eq i64 %"1$tmp$28#0", 0 
  br i1 %"1$tmp$29#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %"2$tmp$31#0" = and i64 %"$right#0", 7 
  %"2$tmp$32#0" = icmp eq i64 %"2$tmp$31#0", 0 
  br i1 %"2$tmp$32#0", label %if.then1, label %if.else1 
if.else:
  %"3$tmp$32#0" = icmp eq i64 %"1$tmp$28#0", 1 
  br i1 %"3$tmp$32#0", label %if.then2, label %if.else2 
if.then1:
  %4 = inttoptr i64 %"$right#0" to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %"4$$$#0" = icmp eq i64 %3, %6 
  ret i1 %"4$$$#0" 
if.else1:
  ret i1 0 
if.then2:
  %7 = add   i64 %"$left#0", -1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %"6$tmp$34#0" = and i64 %"$right#0", 7 
  %"6$tmp$35#0" = icmp eq i64 %"6$tmp$34#0", 1 
  br i1 %"6$tmp$35#0", label %if.then3, label %if.else3 
if.else2:
  %"7$tmp$35#0" = icmp eq i64 %"1$tmp$28#0", 2 
  br i1 %"7$tmp$35#0", label %if.then4, label %if.else4 
if.then3:
  %11 = add   i64 %"$right#0", -1 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"8$$$#0" = icmp eq i64 %10, %14 
  ret i1 %"8$$$#0" 
if.else3:
  ret i1 0 
if.then4:
  %15 = add   i64 %"$left#0", -2 
  %16 = inttoptr i64 %15 to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %"10$tmp$37#0" = and i64 %"$right#0", 7 
  %"10$tmp$38#0" = icmp eq i64 %"10$tmp$37#0", 2 
  br i1 %"10$tmp$38#0", label %if.then5, label %if.else5 
if.else4:
  %"11$tmp$38#0" = icmp eq i64 %"1$tmp$28#0", 3 
  br i1 %"11$tmp$38#0", label %if.then6, label %if.else6 
if.then5:
  %19 = add   i64 %"$right#0", -2 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %"12$$$#0" = icmp eq i64 %18, %22 
  ret i1 %"12$$$#0" 
if.else5:
  ret i1 0 
if.then6:
  %23 = add   i64 %"$left#0", -3 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %"14$tmp$40#0" = and i64 %"$right#0", 7 
  %"14$tmp$41#0" = icmp eq i64 %"14$tmp$40#0", 3 
  br i1 %"14$tmp$41#0", label %if.then7, label %if.else7 
if.else6:
  %"15$tmp$41#0" = icmp eq i64 %"1$tmp$28#0", 4 
  br i1 %"15$tmp$41#0", label %if.then8, label %if.else8 
if.then7:
  %27 = add   i64 %"$right#0", -3 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %"16$$$#0" = icmp eq i64 %26, %30 
  ret i1 %"16$$$#0" 
if.else7:
  ret i1 0 
if.then8:
  %31 = add   i64 %"$left#0", -4 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  %"18$tmp$43#0" = and i64 %"$right#0", 7 
  %"18$tmp$44#0" = icmp eq i64 %"18$tmp$43#0", 4 
  br i1 %"18$tmp$44#0", label %if.then9, label %if.else9 
if.else8:
  %"19$tmp$44#0" = icmp eq i64 %"1$tmp$28#0", 5 
  br i1 %"19$tmp$44#0", label %if.then10, label %if.else10 
if.then9:
  %35 = add   i64 %"$right#0", -4 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %"20$$$#0" = icmp eq i64 %34, %38 
  ret i1 %"20$$$#0" 
if.else9:
  ret i1 0 
if.then10:
  %39 = add   i64 %"$left#0", -5 
  %40 = inttoptr i64 %39 to i64* 
  %41 = getelementptr  i64, i64* %40, i64 0 
  %42 = load  i64, i64* %41 
  %"22$tmp$46#0" = and i64 %"$right#0", 7 
  %"22$tmp$47#0" = icmp eq i64 %"22$tmp$46#0", 5 
  br i1 %"22$tmp$47#0", label %if.then11, label %if.else11 
if.else10:
  %"23$tmp$47#0" = icmp eq i64 %"1$tmp$28#0", 6 
  br i1 %"23$tmp$47#0", label %if.then12, label %if.else12 
if.then11:
  %43 = add   i64 %"$right#0", -5 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  %46 = load  i64, i64* %45 
  %"24$$$#0" = icmp eq i64 %42, %46 
  ret i1 %"24$$$#0" 
if.else11:
  ret i1 0 
if.then12:
  %47 = add   i64 %"$left#0", -6 
  %48 = inttoptr i64 %47 to i64* 
  %49 = getelementptr  i64, i64* %48, i64 0 
  %50 = load  i64, i64* %49 
  %"26$tmp$49#0" = and i64 %"$right#0", 7 
  %"26$tmp$50#0" = icmp eq i64 %"26$tmp$49#0", 6 
  br i1 %"26$tmp$50#0", label %if.then13, label %if.else13 
if.else12:
  %"27$tmp$50#0" = icmp eq i64 %"1$tmp$28#0", 7 
  br i1 %"27$tmp$50#0", label %if.then14, label %if.else14 
if.then13:
  %51 = add   i64 %"$right#0", -6 
  %52 = inttoptr i64 %51 to i64* 
  %53 = getelementptr  i64, i64* %52, i64 0 
  %54 = load  i64, i64* %53 
  %"28$$$#0" = icmp eq i64 %50, %54 
  ret i1 %"28$$$#0" 
if.else13:
  ret i1 0 
if.then14:
  %55 = add   i64 %"$left#0", -7 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = add   i64 %"$left#0", 1 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  %62 = load  i64, i64* %61 
  %63 = add   i64 %"$left#0", 9 
  %64 = inttoptr i64 %63 to double* 
  %65 = getelementptr  double, double* %64, i64 0 
  %66 = load  double, double* %65 
  %"30$tmp$52#0" = and i64 %"$right#0", 7 
  %"30$tmp$53#0" = icmp eq i64 %"30$tmp$52#0", 7 
  br i1 %"30$tmp$53#0", label %if.then15, label %if.else15 
if.else14:
  ret i1 0 
if.then15:
  %67 = add   i64 %"$right#0", -7 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  %70 = load  i64, i64* %69 
  %71 = add   i64 %"$right#0", 1 
  %72 = inttoptr i64 %71 to i64* 
  %73 = getelementptr  i64, i64* %72, i64 0 
  %74 = load  i64, i64* %73 
  %75 = add   i64 %"$right#0", 9 
  %76 = inttoptr i64 %75 to double* 
  %77 = getelementptr  double, double* %76, i64 0 
  %78 = load  double, double* %77 
  %"32$tmp$16#0" = icmp eq i64 %58, %70 
  br i1 %"32$tmp$16#0", label %if.then16, label %if.else16 
if.else15:
  ret i1 0 
if.then16:
  %"34$tmp$17#0" = icmp eq i64 %62, %74 
  br i1 %"34$tmp$17#0", label %if.then17, label %if.else17 
if.else16:
  ret i1 0 
if.then17:
  %"36$$$#0" = fcmp oeq double %66, %78 
  ret i1 %"36$$$#0" 
if.else17:
  ret i1 0 
}


define external fastcc  i64 @"multictr2.t.c01<0>"(i64  %"f01#0")    {
entry:
  %79 = trunc i64 8 to i32  
  %80 = tail call ccc  i8*  @wybe_malloc(i32  %79)  
  %81 = ptrtoint i8* %80 to i64 
  %82 = inttoptr i64 %81 to i64* 
  %83 = getelementptr  i64, i64* %82, i64 0 
  store  i64 %"f01#0", i64* %83 
  ret i64 %81 
}


define external fastcc  {i64, i1} @"multictr2.t.c01<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 0 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %84 = inttoptr i64 %"$#0" to i64* 
  %85 = getelementptr  i64, i64* %84, i64 0 
  %86 = load  i64, i64* %85 
  %87 = insertvalue {i64, i1} undef, i64 %86, 0 
  %88 = insertvalue {i64, i1} %87, i1 1, 1 
  ret {i64, i1} %88 
if.else:
  %89 = insertvalue {i64, i1} undef, i64 undef, 0 
  %90 = insertvalue {i64, i1} %89, i1 0, 1 
  ret {i64, i1} %90 
}


define external fastcc  i64 @"multictr2.t.c02<0>"(i64  %"f02#0")    {
entry:
  %91 = trunc i64 8 to i32  
  %92 = tail call ccc  i8*  @wybe_malloc(i32  %91)  
  %93 = ptrtoint i8* %92 to i64 
  %94 = inttoptr i64 %93 to i64* 
  %95 = getelementptr  i64, i64* %94, i64 0 
  store  i64 %"f02#0", i64* %95 
  %"1$$#0" = or i64 %93, 1 
  ret i64 %"1$$#0" 
}


define external fastcc  {i64, i1} @"multictr2.t.c02<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 1 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %96 = add   i64 %"$#0", -1 
  %97 = inttoptr i64 %96 to i64* 
  %98 = getelementptr  i64, i64* %97, i64 0 
  %99 = load  i64, i64* %98 
  %100 = insertvalue {i64, i1} undef, i64 %99, 0 
  %101 = insertvalue {i64, i1} %100, i1 1, 1 
  ret {i64, i1} %101 
if.else:
  %102 = insertvalue {i64, i1} undef, i64 undef, 0 
  %103 = insertvalue {i64, i1} %102, i1 0, 1 
  ret {i64, i1} %103 
}


define external fastcc  i64 @"multictr2.t.c03<0>"(i64  %"f03#0")    {
entry:
  %104 = trunc i64 8 to i32  
  %105 = tail call ccc  i8*  @wybe_malloc(i32  %104)  
  %106 = ptrtoint i8* %105 to i64 
  %107 = inttoptr i64 %106 to i64* 
  %108 = getelementptr  i64, i64* %107, i64 0 
  store  i64 %"f03#0", i64* %108 
  %"1$$#0" = or i64 %106, 2 
  ret i64 %"1$$#0" 
}


define external fastcc  {i64, i1} @"multictr2.t.c03<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 2 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %109 = add   i64 %"$#0", -2 
  %110 = inttoptr i64 %109 to i64* 
  %111 = getelementptr  i64, i64* %110, i64 0 
  %112 = load  i64, i64* %111 
  %113 = insertvalue {i64, i1} undef, i64 %112, 0 
  %114 = insertvalue {i64, i1} %113, i1 1, 1 
  ret {i64, i1} %114 
if.else:
  %115 = insertvalue {i64, i1} undef, i64 undef, 0 
  %116 = insertvalue {i64, i1} %115, i1 0, 1 
  ret {i64, i1} %116 
}


define external fastcc  i64 @"multictr2.t.c04<0>"(i64  %"f04#0")    {
entry:
  %117 = trunc i64 8 to i32  
  %118 = tail call ccc  i8*  @wybe_malloc(i32  %117)  
  %119 = ptrtoint i8* %118 to i64 
  %120 = inttoptr i64 %119 to i64* 
  %121 = getelementptr  i64, i64* %120, i64 0 
  store  i64 %"f04#0", i64* %121 
  %"1$$#0" = or i64 %119, 3 
  ret i64 %"1$$#0" 
}


define external fastcc  {i64, i1} @"multictr2.t.c04<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 3 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %122 = add   i64 %"$#0", -3 
  %123 = inttoptr i64 %122 to i64* 
  %124 = getelementptr  i64, i64* %123, i64 0 
  %125 = load  i64, i64* %124 
  %126 = insertvalue {i64, i1} undef, i64 %125, 0 
  %127 = insertvalue {i64, i1} %126, i1 1, 1 
  ret {i64, i1} %127 
if.else:
  %128 = insertvalue {i64, i1} undef, i64 undef, 0 
  %129 = insertvalue {i64, i1} %128, i1 0, 1 
  ret {i64, i1} %129 
}


define external fastcc  i64 @"multictr2.t.c05<0>"(i64  %"f05#0")    {
entry:
  %130 = trunc i64 8 to i32  
  %131 = tail call ccc  i8*  @wybe_malloc(i32  %130)  
  %132 = ptrtoint i8* %131 to i64 
  %133 = inttoptr i64 %132 to i64* 
  %134 = getelementptr  i64, i64* %133, i64 0 
  store  i64 %"f05#0", i64* %134 
  %"1$$#0" = or i64 %132, 4 
  ret i64 %"1$$#0" 
}


define external fastcc  {i64, i1} @"multictr2.t.c05<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 4 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %135 = add   i64 %"$#0", -4 
  %136 = inttoptr i64 %135 to i64* 
  %137 = getelementptr  i64, i64* %136, i64 0 
  %138 = load  i64, i64* %137 
  %139 = insertvalue {i64, i1} undef, i64 %138, 0 
  %140 = insertvalue {i64, i1} %139, i1 1, 1 
  ret {i64, i1} %140 
if.else:
  %141 = insertvalue {i64, i1} undef, i64 undef, 0 
  %142 = insertvalue {i64, i1} %141, i1 0, 1 
  ret {i64, i1} %142 
}


define external fastcc  i64 @"multictr2.t.c06<0>"(i64  %"f06#0")    {
entry:
  %143 = trunc i64 8 to i32  
  %144 = tail call ccc  i8*  @wybe_malloc(i32  %143)  
  %145 = ptrtoint i8* %144 to i64 
  %146 = inttoptr i64 %145 to i64* 
  %147 = getelementptr  i64, i64* %146, i64 0 
  store  i64 %"f06#0", i64* %147 
  %"1$$#0" = or i64 %145, 5 
  ret i64 %"1$$#0" 
}


define external fastcc  {i64, i1} @"multictr2.t.c06<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 5 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %148 = add   i64 %"$#0", -5 
  %149 = inttoptr i64 %148 to i64* 
  %150 = getelementptr  i64, i64* %149, i64 0 
  %151 = load  i64, i64* %150 
  %152 = insertvalue {i64, i1} undef, i64 %151, 0 
  %153 = insertvalue {i64, i1} %152, i1 1, 1 
  ret {i64, i1} %153 
if.else:
  %154 = insertvalue {i64, i1} undef, i64 undef, 0 
  %155 = insertvalue {i64, i1} %154, i1 0, 1 
  ret {i64, i1} %155 
}


define external fastcc  i64 @"multictr2.t.c07<0>"(i64  %"f07#0")    {
entry:
  %156 = trunc i64 8 to i32  
  %157 = tail call ccc  i8*  @wybe_malloc(i32  %156)  
  %158 = ptrtoint i8* %157 to i64 
  %159 = inttoptr i64 %158 to i64* 
  %160 = getelementptr  i64, i64* %159, i64 0 
  store  i64 %"f07#0", i64* %160 
  %"1$$#0" = or i64 %158, 6 
  ret i64 %"1$$#0" 
}


define external fastcc  {i64, i1} @"multictr2.t.c07<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 6 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %161 = add   i64 %"$#0", -6 
  %162 = inttoptr i64 %161 to i64* 
  %163 = getelementptr  i64, i64* %162, i64 0 
  %164 = load  i64, i64* %163 
  %165 = insertvalue {i64, i1} undef, i64 %164, 0 
  %166 = insertvalue {i64, i1} %165, i1 1, 1 
  ret {i64, i1} %166 
if.else:
  %167 = insertvalue {i64, i1} undef, i64 undef, 0 
  %168 = insertvalue {i64, i1} %167, i1 0, 1 
  ret {i64, i1} %168 
}


define external fastcc  i64 @"multictr2.t.c08<0>"(i64  %"f08_a#0", i64  %"f08_b#0", double  %"f08_c#0")    {
entry:
  %169 = trunc i64 24 to i32  
  %170 = tail call ccc  i8*  @wybe_malloc(i32  %169)  
  %171 = ptrtoint i8* %170 to i64 
  %172 = inttoptr i64 %171 to i64* 
  %173 = getelementptr  i64, i64* %172, i64 0 
  store  i64 %"f08_a#0", i64* %173 
  %174 = add   i64 %171, 8 
  %175 = inttoptr i64 %174 to i64* 
  %176 = getelementptr  i64, i64* %175, i64 0 
  store  i64 %"f08_b#0", i64* %176 
  %177 = add   i64 %171, 16 
  %178 = inttoptr i64 %177 to double* 
  %179 = getelementptr  double, double* %178, i64 0 
  store  double %"f08_c#0", double* %179 
  %"1$$#0" = or i64 %171, 7 
  ret i64 %"1$$#0" 
}


define external fastcc  {i64, i64, double, i1} @"multictr2.t.c08<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 7 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %180 = add   i64 %"$#0", -7 
  %181 = inttoptr i64 %180 to i64* 
  %182 = getelementptr  i64, i64* %181, i64 0 
  %183 = load  i64, i64* %182 
  %184 = add   i64 %"$#0", 1 
  %185 = inttoptr i64 %184 to i64* 
  %186 = getelementptr  i64, i64* %185, i64 0 
  %187 = load  i64, i64* %186 
  %188 = add   i64 %"$#0", 9 
  %189 = inttoptr i64 %188 to double* 
  %190 = getelementptr  double, double* %189, i64 0 
  %191 = load  double, double* %190 
  %192 = insertvalue {i64, i64, double, i1} undef, i64 %183, 0 
  %193 = insertvalue {i64, i64, double, i1} %192, i64 %187, 1 
  %194 = insertvalue {i64, i64, double, i1} %193, double %191, 2 
  %195 = insertvalue {i64, i64, double, i1} %194, i1 1, 3 
  ret {i64, i64, double, i1} %195 
if.else:
  %196 = insertvalue {i64, i64, double, i1} undef, i64 undef, 0 
  %197 = insertvalue {i64, i64, double, i1} %196, i64 undef, 1 
  %198 = insertvalue {i64, i64, double, i1} %197, double undef, 2 
  %199 = insertvalue {i64, i64, double, i1} %198, i1 0, 3 
  ret {i64, i64, double, i1} %199 
}


define external fastcc  {i64, i1} @"multictr2.t.f01<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 0 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %200 = inttoptr i64 %"$rec#0" to i64* 
  %201 = getelementptr  i64, i64* %200, i64 0 
  %202 = load  i64, i64* %201 
  %203 = insertvalue {i64, i1} undef, i64 %202, 0 
  %204 = insertvalue {i64, i1} %203, i1 1, 1 
  ret {i64, i1} %204 
if.else:
  %205 = insertvalue {i64, i1} undef, i64 undef, 0 
  %206 = insertvalue {i64, i1} %205, i1 0, 1 
  ret {i64, i1} %206 
}


define external fastcc  {i64, i1} @"multictr2.t.f01<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 0 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %207 = trunc i64 8 to i32  
  %208 = tail call ccc  i8*  @wybe_malloc(i32  %207)  
  %209 = ptrtoint i8* %208 to i64 
  %210 = inttoptr i64 %209 to i8* 
  %211 = inttoptr i64 %"$rec#0" to i8* 
  %212 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %210, i8*  %211, i32  %212, i32  8, i1  0)  
  %213 = inttoptr i64 %209 to i64* 
  %214 = getelementptr  i64, i64* %213, i64 0 
  store  i64 %"$field#0", i64* %214 
  %215 = insertvalue {i64, i1} undef, i64 %209, 0 
  %216 = insertvalue {i64, i1} %215, i1 1, 1 
  ret {i64, i1} %216 
if.else:
  %217 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %218 = insertvalue {i64, i1} %217, i1 0, 1 
  ret {i64, i1} %218 
}


define external fastcc  {i64, i1} @"multictr2.t.f02<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 1 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %219 = add   i64 %"$rec#0", -1 
  %220 = inttoptr i64 %219 to i64* 
  %221 = getelementptr  i64, i64* %220, i64 0 
  %222 = load  i64, i64* %221 
  %223 = insertvalue {i64, i1} undef, i64 %222, 0 
  %224 = insertvalue {i64, i1} %223, i1 1, 1 
  ret {i64, i1} %224 
if.else:
  %225 = insertvalue {i64, i1} undef, i64 undef, 0 
  %226 = insertvalue {i64, i1} %225, i1 0, 1 
  ret {i64, i1} %226 
}


define external fastcc  {i64, i1} @"multictr2.t.f02<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 1 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %227 = trunc i64 8 to i32  
  %228 = tail call ccc  i8*  @wybe_malloc(i32  %227)  
  %229 = ptrtoint i8* %228 to i64 
  %230 = add   i64 %229, 1 
  %231 = sub   i64 %"$rec#0", 1 
  %232 = inttoptr i64 %229 to i8* 
  %233 = inttoptr i64 %231 to i8* 
  %234 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %232, i8*  %233, i32  %234, i32  8, i1  0)  
  %235 = add   i64 %230, -1 
  %236 = inttoptr i64 %235 to i64* 
  %237 = getelementptr  i64, i64* %236, i64 0 
  store  i64 %"$field#0", i64* %237 
  %238 = insertvalue {i64, i1} undef, i64 %230, 0 
  %239 = insertvalue {i64, i1} %238, i1 1, 1 
  ret {i64, i1} %239 
if.else:
  %240 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %241 = insertvalue {i64, i1} %240, i1 0, 1 
  ret {i64, i1} %241 
}


define external fastcc  {i64, i1} @"multictr2.t.f03<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 2 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %242 = add   i64 %"$rec#0", -2 
  %243 = inttoptr i64 %242 to i64* 
  %244 = getelementptr  i64, i64* %243, i64 0 
  %245 = load  i64, i64* %244 
  %246 = insertvalue {i64, i1} undef, i64 %245, 0 
  %247 = insertvalue {i64, i1} %246, i1 1, 1 
  ret {i64, i1} %247 
if.else:
  %248 = insertvalue {i64, i1} undef, i64 undef, 0 
  %249 = insertvalue {i64, i1} %248, i1 0, 1 
  ret {i64, i1} %249 
}


define external fastcc  {i64, i1} @"multictr2.t.f03<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 2 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %250 = trunc i64 8 to i32  
  %251 = tail call ccc  i8*  @wybe_malloc(i32  %250)  
  %252 = ptrtoint i8* %251 to i64 
  %253 = add   i64 %252, 2 
  %254 = sub   i64 %"$rec#0", 2 
  %255 = inttoptr i64 %252 to i8* 
  %256 = inttoptr i64 %254 to i8* 
  %257 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %255, i8*  %256, i32  %257, i32  8, i1  0)  
  %258 = add   i64 %253, -2 
  %259 = inttoptr i64 %258 to i64* 
  %260 = getelementptr  i64, i64* %259, i64 0 
  store  i64 %"$field#0", i64* %260 
  %261 = insertvalue {i64, i1} undef, i64 %253, 0 
  %262 = insertvalue {i64, i1} %261, i1 1, 1 
  ret {i64, i1} %262 
if.else:
  %263 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %264 = insertvalue {i64, i1} %263, i1 0, 1 
  ret {i64, i1} %264 
}


define external fastcc  {i64, i1} @"multictr2.t.f04<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 3 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %265 = add   i64 %"$rec#0", -3 
  %266 = inttoptr i64 %265 to i64* 
  %267 = getelementptr  i64, i64* %266, i64 0 
  %268 = load  i64, i64* %267 
  %269 = insertvalue {i64, i1} undef, i64 %268, 0 
  %270 = insertvalue {i64, i1} %269, i1 1, 1 
  ret {i64, i1} %270 
if.else:
  %271 = insertvalue {i64, i1} undef, i64 undef, 0 
  %272 = insertvalue {i64, i1} %271, i1 0, 1 
  ret {i64, i1} %272 
}


define external fastcc  {i64, i1} @"multictr2.t.f04<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 3 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %273 = trunc i64 8 to i32  
  %274 = tail call ccc  i8*  @wybe_malloc(i32  %273)  
  %275 = ptrtoint i8* %274 to i64 
  %276 = add   i64 %275, 3 
  %277 = sub   i64 %"$rec#0", 3 
  %278 = inttoptr i64 %275 to i8* 
  %279 = inttoptr i64 %277 to i8* 
  %280 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %278, i8*  %279, i32  %280, i32  8, i1  0)  
  %281 = add   i64 %276, -3 
  %282 = inttoptr i64 %281 to i64* 
  %283 = getelementptr  i64, i64* %282, i64 0 
  store  i64 %"$field#0", i64* %283 
  %284 = insertvalue {i64, i1} undef, i64 %276, 0 
  %285 = insertvalue {i64, i1} %284, i1 1, 1 
  ret {i64, i1} %285 
if.else:
  %286 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %287 = insertvalue {i64, i1} %286, i1 0, 1 
  ret {i64, i1} %287 
}


define external fastcc  {i64, i1} @"multictr2.t.f05<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 4 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %288 = add   i64 %"$rec#0", -4 
  %289 = inttoptr i64 %288 to i64* 
  %290 = getelementptr  i64, i64* %289, i64 0 
  %291 = load  i64, i64* %290 
  %292 = insertvalue {i64, i1} undef, i64 %291, 0 
  %293 = insertvalue {i64, i1} %292, i1 1, 1 
  ret {i64, i1} %293 
if.else:
  %294 = insertvalue {i64, i1} undef, i64 undef, 0 
  %295 = insertvalue {i64, i1} %294, i1 0, 1 
  ret {i64, i1} %295 
}


define external fastcc  {i64, i1} @"multictr2.t.f05<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 4 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %296 = trunc i64 8 to i32  
  %297 = tail call ccc  i8*  @wybe_malloc(i32  %296)  
  %298 = ptrtoint i8* %297 to i64 
  %299 = add   i64 %298, 4 
  %300 = sub   i64 %"$rec#0", 4 
  %301 = inttoptr i64 %298 to i8* 
  %302 = inttoptr i64 %300 to i8* 
  %303 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %301, i8*  %302, i32  %303, i32  8, i1  0)  
  %304 = add   i64 %299, -4 
  %305 = inttoptr i64 %304 to i64* 
  %306 = getelementptr  i64, i64* %305, i64 0 
  store  i64 %"$field#0", i64* %306 
  %307 = insertvalue {i64, i1} undef, i64 %299, 0 
  %308 = insertvalue {i64, i1} %307, i1 1, 1 
  ret {i64, i1} %308 
if.else:
  %309 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %310 = insertvalue {i64, i1} %309, i1 0, 1 
  ret {i64, i1} %310 
}


define external fastcc  {i64, i1} @"multictr2.t.f06<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 5 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %311 = add   i64 %"$rec#0", -5 
  %312 = inttoptr i64 %311 to i64* 
  %313 = getelementptr  i64, i64* %312, i64 0 
  %314 = load  i64, i64* %313 
  %315 = insertvalue {i64, i1} undef, i64 %314, 0 
  %316 = insertvalue {i64, i1} %315, i1 1, 1 
  ret {i64, i1} %316 
if.else:
  %317 = insertvalue {i64, i1} undef, i64 undef, 0 
  %318 = insertvalue {i64, i1} %317, i1 0, 1 
  ret {i64, i1} %318 
}


define external fastcc  {i64, i1} @"multictr2.t.f06<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 5 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %319 = trunc i64 8 to i32  
  %320 = tail call ccc  i8*  @wybe_malloc(i32  %319)  
  %321 = ptrtoint i8* %320 to i64 
  %322 = add   i64 %321, 5 
  %323 = sub   i64 %"$rec#0", 5 
  %324 = inttoptr i64 %321 to i8* 
  %325 = inttoptr i64 %323 to i8* 
  %326 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %324, i8*  %325, i32  %326, i32  8, i1  0)  
  %327 = add   i64 %322, -5 
  %328 = inttoptr i64 %327 to i64* 
  %329 = getelementptr  i64, i64* %328, i64 0 
  store  i64 %"$field#0", i64* %329 
  %330 = insertvalue {i64, i1} undef, i64 %322, 0 
  %331 = insertvalue {i64, i1} %330, i1 1, 1 
  ret {i64, i1} %331 
if.else:
  %332 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %333 = insertvalue {i64, i1} %332, i1 0, 1 
  ret {i64, i1} %333 
}


define external fastcc  {i64, i1} @"multictr2.t.f07<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 6 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %334 = add   i64 %"$rec#0", -6 
  %335 = inttoptr i64 %334 to i64* 
  %336 = getelementptr  i64, i64* %335, i64 0 
  %337 = load  i64, i64* %336 
  %338 = insertvalue {i64, i1} undef, i64 %337, 0 
  %339 = insertvalue {i64, i1} %338, i1 1, 1 
  ret {i64, i1} %339 
if.else:
  %340 = insertvalue {i64, i1} undef, i64 undef, 0 
  %341 = insertvalue {i64, i1} %340, i1 0, 1 
  ret {i64, i1} %341 
}


define external fastcc  {i64, i1} @"multictr2.t.f07<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 6 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %342 = trunc i64 8 to i32  
  %343 = tail call ccc  i8*  @wybe_malloc(i32  %342)  
  %344 = ptrtoint i8* %343 to i64 
  %345 = add   i64 %344, 6 
  %346 = sub   i64 %"$rec#0", 6 
  %347 = inttoptr i64 %344 to i8* 
  %348 = inttoptr i64 %346 to i8* 
  %349 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %347, i8*  %348, i32  %349, i32  8, i1  0)  
  %350 = add   i64 %345, -6 
  %351 = inttoptr i64 %350 to i64* 
  %352 = getelementptr  i64, i64* %351, i64 0 
  store  i64 %"$field#0", i64* %352 
  %353 = insertvalue {i64, i1} undef, i64 %345, 0 
  %354 = insertvalue {i64, i1} %353, i1 1, 1 
  ret {i64, i1} %354 
if.else:
  %355 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %356 = insertvalue {i64, i1} %355, i1 0, 1 
  ret {i64, i1} %356 
}


define external fastcc  {i64, i1} @"multictr2.t.f08_a<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 7 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %357 = add   i64 %"$rec#0", -7 
  %358 = inttoptr i64 %357 to i64* 
  %359 = getelementptr  i64, i64* %358, i64 0 
  %360 = load  i64, i64* %359 
  %361 = insertvalue {i64, i1} undef, i64 %360, 0 
  %362 = insertvalue {i64, i1} %361, i1 1, 1 
  ret {i64, i1} %362 
if.else:
  %363 = insertvalue {i64, i1} undef, i64 undef, 0 
  %364 = insertvalue {i64, i1} %363, i1 0, 1 
  ret {i64, i1} %364 
}


define external fastcc  {i64, i1} @"multictr2.t.f08_a<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 7 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %365 = trunc i64 24 to i32  
  %366 = tail call ccc  i8*  @wybe_malloc(i32  %365)  
  %367 = ptrtoint i8* %366 to i64 
  %368 = add   i64 %367, 7 
  %369 = sub   i64 %"$rec#0", 7 
  %370 = inttoptr i64 %367 to i8* 
  %371 = inttoptr i64 %369 to i8* 
  %372 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %370, i8*  %371, i32  %372, i32  8, i1  0)  
  %373 = add   i64 %368, -7 
  %374 = inttoptr i64 %373 to i64* 
  %375 = getelementptr  i64, i64* %374, i64 0 
  store  i64 %"$field#0", i64* %375 
  %376 = insertvalue {i64, i1} undef, i64 %368, 0 
  %377 = insertvalue {i64, i1} %376, i1 1, 1 
  ret {i64, i1} %377 
if.else:
  %378 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %379 = insertvalue {i64, i1} %378, i1 0, 1 
  ret {i64, i1} %379 
}


define external fastcc  {i64, i1} @"multictr2.t.f08_b<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 7 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %380 = add   i64 %"$rec#0", 1 
  %381 = inttoptr i64 %380 to i64* 
  %382 = getelementptr  i64, i64* %381, i64 0 
  %383 = load  i64, i64* %382 
  %384 = insertvalue {i64, i1} undef, i64 %383, 0 
  %385 = insertvalue {i64, i1} %384, i1 1, 1 
  ret {i64, i1} %385 
if.else:
  %386 = insertvalue {i64, i1} undef, i64 undef, 0 
  %387 = insertvalue {i64, i1} %386, i1 0, 1 
  ret {i64, i1} %387 
}


define external fastcc  {i64, i1} @"multictr2.t.f08_b<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 7 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %388 = trunc i64 24 to i32  
  %389 = tail call ccc  i8*  @wybe_malloc(i32  %388)  
  %390 = ptrtoint i8* %389 to i64 
  %391 = add   i64 %390, 7 
  %392 = sub   i64 %"$rec#0", 7 
  %393 = inttoptr i64 %390 to i8* 
  %394 = inttoptr i64 %392 to i8* 
  %395 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %393, i8*  %394, i32  %395, i32  8, i1  0)  
  %396 = add   i64 %391, 1 
  %397 = inttoptr i64 %396 to i64* 
  %398 = getelementptr  i64, i64* %397, i64 0 
  store  i64 %"$field#0", i64* %398 
  %399 = insertvalue {i64, i1} undef, i64 %391, 0 
  %400 = insertvalue {i64, i1} %399, i1 1, 1 
  ret {i64, i1} %400 
if.else:
  %401 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %402 = insertvalue {i64, i1} %401, i1 0, 1 
  ret {i64, i1} %402 
}


define external fastcc  {double, i1} @"multictr2.t.f08_c<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 7 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %403 = add   i64 %"$rec#0", 9 
  %404 = inttoptr i64 %403 to double* 
  %405 = getelementptr  double, double* %404, i64 0 
  %406 = load  double, double* %405 
  %407 = insertvalue {double, i1} undef, double %406, 0 
  %408 = insertvalue {double, i1} %407, i1 1, 1 
  ret {double, i1} %408 
if.else:
  %409 = insertvalue {double, i1} undef, double undef, 0 
  %410 = insertvalue {double, i1} %409, i1 0, 1 
  ret {double, i1} %410 
}


define external fastcc  {i64, i1} @"multictr2.t.f08_c<1>"(i64  %"$rec#0", double  %"$field#0")    {
entry:
  %"1$tmp$0#0" = and i64 %"$rec#0", 7 
  %"1$tmp$1#0" = icmp eq i64 %"1$tmp$0#0", 7 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %411 = trunc i64 24 to i32  
  %412 = tail call ccc  i8*  @wybe_malloc(i32  %411)  
  %413 = ptrtoint i8* %412 to i64 
  %414 = add   i64 %413, 7 
  %415 = sub   i64 %"$rec#0", 7 
  %416 = inttoptr i64 %413 to i8* 
  %417 = inttoptr i64 %415 to i8* 
  %418 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %416, i8*  %417, i32  %418, i32  8, i1  0)  
  %419 = add   i64 %414, 9 
  %420 = inttoptr i64 %419 to double* 
  %421 = getelementptr  double, double* %420, i64 0 
  store  double %"$field#0", double* %421 
  %422 = insertvalue {i64, i1} undef, i64 %414, 0 
  %423 = insertvalue {i64, i1} %422, i1 1, 1 
  ret {i64, i1} %423 
if.else:
  %424 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %425 = insertvalue {i64, i1} %424, i1 0, 1 
  ret {i64, i1} %425 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module explicit_type_warning
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : explicit_type_warning.=<0>
                    explicit_type_warning.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

proc = > public (2 calls)
0: explicit_type_warning.=<0>
=(#left##0:explicit_type_warning, #right##0:explicit_type_warning, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:explicit_type_warning, 0:explicit_type_warning, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:explicit_type_warning, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#h##0:wybe.int) @explicit_type_warning:nn:nn
        foreign lpvm access(~#left##0:explicit_type_warning, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#t##0:explicit_type_warning) @explicit_type_warning:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
        case ~tmp#9##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:explicit_type_warning, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#h##0:wybe.int) @explicit_type_warning:nn:nn
            foreign lpvm access(~#right##0:explicit_type_warning, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#t##0:explicit_type_warning) @explicit_type_warning:nn:nn
            foreign llvm icmp_eq(~#left#h##0:wybe.int, ~#right#h##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                explicit_type_warning.=<0>(~#left#t##0:explicit_type_warning, ~#right#t##0:explicit_type_warning, ?#success##0:wybe.bool) #3





proc h > {inline} (0 calls)
0: explicit_type_warning.h<0>
h(#rec##0:explicit_type_warning, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:explicit_type_warning, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @explicit_type_warning:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc h > {inline} (0 calls)
1: explicit_type_warning.h<1>
h(#rec##0:explicit_type_warning, ?#rec##1:explicit_type_warning, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:explicit_type_warning, ?#rec##1:explicit_type_warning)

    1:
        foreign lpvm mutate(~#rec##0:explicit_type_warning, ?#rec##1:explicit_type_warning, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @explicit_type_warning:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc mt > {inline} (0 calls)
0: explicit_type_warning.mt<0>
mt(?#result##0:explicit_type_warning)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:explicit_type_warning, ?#result##0:explicit_type_warning)


proc oops > {inline} (0 calls)
0: explicit_type_warning.oops<0>
oops(h##0:wybe.int, t##0:explicit_type_warning, ?#result##0:explicit_type_warning)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:explicit_type_warning) @explicit_type_warning:nn:nn
    foreign lpvm mutate(~#rec##0:explicit_type_warning, ?#rec##1:explicit_type_warning, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @explicit_type_warning:nn:nn
    foreign lpvm mutate(~#rec##1:explicit_type_warning, ?#result##0:explicit_type_warning, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~t##0:explicit_type_warning) @explicit_type_warning:nn:nn
proc oops > {inline} (15 calls)
1: explicit_type_warning.oops<1>
oops(?h##0:wybe.int, ?t##0:explicit_type_warning, #result##0:explicit_type_warning, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?h##0:wybe.int)
        foreign llvm move(undef:explicit_type_warning, ?t##0:explicit_type_warning)

    1:
        foreign lpvm access(#result##0:explicit_type_warning, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @explicit_type_warning:nn:nn
        foreign lpvm access(~#result##0:explicit_type_warning, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:explicit_type_warning) @explicit_type_warning:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc oops2 > (1 calls)
0: explicit_type_warning.oops2<0>
oops2(l##0:explicit_type_warning, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(l##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool) @explicit_type_warning:nn:nn
    case ~tmp#6##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?#result##0:wybe.int) @explicit_type_warning:nn:nn

    1:
        foreign lpvm access(~l##0:explicit_type_warning, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:explicit_type_warning) @explicit_type_warning:nn:nn
        explicit_type_warning.oops2<0>(~t##0:explicit_type_warning, ?tmp#3##0:wybe.int) #1 @explicit_type_warning:nn:nn
        foreign llvm add(~tmp#3##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @explicit_type_warning:nn:nn



proc t > {inline} (0 calls)
0: explicit_type_warning.t<0>
t(#rec##0:explicit_type_warning, ?#result##0:explicit_type_warning, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:explicit_type_warning, ?#result##0:explicit_type_warning)

    1:
        foreign lpvm access(~#rec##0:explicit_type_warning, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:explicit_type_warning) @explicit_type_warning:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc t > {inline} (0 calls)
1: explicit_type_warning.t<1>
t(#rec##0:explicit_type_warning, ?#rec##1:explicit_type_warning, #field##0:explicit_type_warning, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:explicit_type_warning, ?#rec##1:explicit_type_warning)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:explicit_type_warning, ?#rec##1:explicit_type_warning, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:explicit_type_warning) @explicit_type_warning:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: explicit_type_warning.~=<0>
~=(#left##0:explicit_type_warning, #right##0:explicit_type_warning, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    explicit_type_warning.=<0>(~#left##0:explicit_type_warning, ~#right##0:explicit_type_warning, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'explicit_type_warning'

source_filename = "!ROOT!/final-dump/explicit_type_warning.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"explicit_type_warning.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp ne i64 %"#left##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#12##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#h##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#left##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#left#t##0" = load i64, ptr %"tmp#14##0"
  %"tmp#9##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#9##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#15##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#h##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = add i64 %"#right##0", 8
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  %"#right#t##0" = load i64, ptr %"tmp#17##0"
  %"tmp#4##0" = icmp eq i64 %"#left#h##0", %"#right#h##0"
  br i1 %"tmp#4##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#18##0" = tail call fastcc i1 @"explicit_type_warning.=<0>"(i64 %"#left#t##0", i64 %"#right#t##0")
  ret i1 %"tmp#18##0"
if.else.2:
  ret i1 0
if.else.1:
  ret i1 0
if.else.0:
  %"tmp#19##0" = icmp eq i64 %"#right##0", 0
  ret i1 %"tmp#19##0"
}

define external fastcc {i64, i1} @"explicit_type_warning.h<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = insertvalue {i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#4##0" = insertvalue {i64, i1} %"tmp#3##0", i1 1, 1
  ret {i64, i1} %"tmp#4##0"
if.else.0:
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 0, 1
  ret {i64, i1} %"tmp#6##0"
}

define external fastcc {i64, i1} @"explicit_type_warning.h<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 16, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc i64 @"explicit_type_warning.mt<0>"() {
  ret i64 0
}

define external fastcc i64 @"explicit_type_warning.oops<0>"(i64 %"h##0", i64 %"t##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"h##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"t##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64, i1} @"explicit_type_warning.oops<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = add i64 %"#result##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#7##0" = insertvalue {i64, i64, i1} %"tmp#6##0", i64 %"tmp#5##0", 1
  %"tmp#8##0" = insertvalue {i64, i64, i1} %"tmp#7##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#10##0" = insertvalue {i64, i64, i1} %"tmp#9##0", i64 undef, 1
  %"tmp#11##0" = insertvalue {i64, i64, i1} %"tmp#10##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#11##0"
}

define external fastcc i64 @"explicit_type_warning.oops2<0>"(i64 %"l##0") {
  %"tmp#6##0" = icmp ne i64 %"l##0", 0
  br i1 %"tmp#6##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#9##0" = add i64 %"l##0", 8
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"t##0" = load i64, ptr %"tmp#10##0"
  %"tmp#3##0" = tail call fastcc i64 @"explicit_type_warning.oops2<0>"(i64 %"t##0")
  %"tmp#11##0" = add i64 %"tmp#3##0", 1
  ret i64 %"tmp#11##0"
if.else.0:
  ret i64 0
}

define external fastcc {i64, i1} @"explicit_type_warning.t<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = add i64 %"#rec##0", 8
  %"tmp#2##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"explicit_type_warning.t<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 16, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = add i64 %"tmp#3##0", 8
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

define external fastcc i1 @"explicit_type_warning.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"explicit_type_warning.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}
final-dump/explicit_type_warning.wybe:3:31: Explicit specification of current type explicit_type_warning,
  it is recommended to specify type as _
final-dump/explicit_type_warning.wybe:5:11: Explicit specification of current type explicit_type_warning,
  it is recommended to specify type as _

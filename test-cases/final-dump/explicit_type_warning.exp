======================================================================
AFTER EVERYTHING:
 Module explicit_type_warning
  representation  : address
  public submods  : 
  public resources: 
  public procs    : explicit_type_warning.=<0>
                    explicit_type_warning.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

proc = > public (2 calls)
0: explicit_type_warning.=<0>
=(#left##0:explicit_type_warning, #right##0:explicit_type_warning, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:explicit_type_warning, 0:explicit_type_warning, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:explicit_type_warning, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#h##0:wybe.int) @explicit_type_warning:nn:nn
        foreign lpvm access(~#left##0:explicit_type_warning, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#t##0:explicit_type_warning) @explicit_type_warning:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
        case ~tmp#9##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:explicit_type_warning, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#h##0:wybe.int) @explicit_type_warning:nn:nn
            foreign lpvm access(~#right##0:explicit_type_warning, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#t##0:explicit_type_warning) @explicit_type_warning:nn:nn
            foreign llvm icmp_eq(~#left#h##0:wybe.int, ~#right#h##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                explicit_type_warning.=<0>(~#left#t##0:explicit_type_warning, ~#right#t##0:explicit_type_warning, ?#success##0:wybe.bool) #3





proc h > {inline} (0 calls)
0: explicit_type_warning.h<0>
h(#rec##0:explicit_type_warning, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:explicit_type_warning, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @explicit_type_warning:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc h > {inline} (0 calls)
1: explicit_type_warning.h<1>
h(#rec##0:explicit_type_warning, ?#rec##1:explicit_type_warning, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:explicit_type_warning, ?#rec##1:explicit_type_warning)

    1:
        foreign lpvm mutate(~#rec##0:explicit_type_warning, ?#rec##1:explicit_type_warning, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @explicit_type_warning:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc mt > {inline} (0 calls)
0: explicit_type_warning.mt<0>
mt(?#result##0:explicit_type_warning)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:explicit_type_warning, ?#result##0:explicit_type_warning)


proc oops > {inline} (0 calls)
0: explicit_type_warning.oops<0>
oops(h##0:wybe.int, t##0:explicit_type_warning, ?#result##0:explicit_type_warning)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:explicit_type_warning) @explicit_type_warning:nn:nn
    foreign lpvm mutate(~#rec##0:explicit_type_warning, ?#rec##1:explicit_type_warning, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @explicit_type_warning:nn:nn
    foreign lpvm mutate(~#rec##1:explicit_type_warning, ?#result##0:explicit_type_warning, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~t##0:explicit_type_warning) @explicit_type_warning:nn:nn
proc oops > {inline} (15 calls)
1: explicit_type_warning.oops<1>
oops(?h##0:wybe.int, ?t##0:explicit_type_warning, #result##0:explicit_type_warning, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?h##0:wybe.int)
        foreign llvm move(undef:explicit_type_warning, ?t##0:explicit_type_warning)

    1:
        foreign lpvm access(#result##0:explicit_type_warning, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @explicit_type_warning:nn:nn
        foreign lpvm access(~#result##0:explicit_type_warning, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:explicit_type_warning) @explicit_type_warning:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc oops2 > (1 calls)
0: explicit_type_warning.oops2<0>
oops2(l##0:explicit_type_warning, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(l##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool)
    case ~tmp#6##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?#result##0:wybe.int) @explicit_type_warning:nn:nn

    1:
        foreign lpvm access(~l##0:explicit_type_warning, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:explicit_type_warning) @explicit_type_warning:nn:nn
        explicit_type_warning.oops2<0>(~t##0:explicit_type_warning, ?tmp#3##0:wybe.int) #1 @explicit_type_warning:nn:nn
        foreign llvm add(~tmp#3##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @int:nn:nn



proc t > {inline} (0 calls)
0: explicit_type_warning.t<0>
t(#rec##0:explicit_type_warning, ?#result##0:explicit_type_warning, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:explicit_type_warning, ?#result##0:explicit_type_warning)

    1:
        foreign lpvm access(~#rec##0:explicit_type_warning, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:explicit_type_warning) @explicit_type_warning:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc t > {inline} (0 calls)
1: explicit_type_warning.t<1>
t(#rec##0:explicit_type_warning, ?#rec##1:explicit_type_warning, #field##0:explicit_type_warning, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:explicit_type_warning, ?#rec##1:explicit_type_warning)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:explicit_type_warning, ?#rec##1:explicit_type_warning, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:explicit_type_warning) @explicit_type_warning:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: explicit_type_warning.~=<0>
~=(#left##0:explicit_type_warning, #right##0:explicit_type_warning, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    explicit_type_warning.=<0>(~#left##0:explicit_type_warning, ~#right##0:explicit_type_warning, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'explicit_type_warning'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"explicit_type_warning.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp ne i64 %"#left##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = icmp ne i64 %"#right##0", 0 
  br i1 %6, label %if.then1, label %if.else1 
if.else:
  %14 = icmp eq i64 %"#right##0", 0 
  ret i1 %14 
if.then1:
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = load  i64, i64* %7 
  %9 = add   i64 %"#right##0", 8 
  %10 = inttoptr i64 %9 to i64* 
  %11 = load  i64, i64* %10 
  %12 = icmp eq i64 %2, %8 
  br i1 %12, label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %13 = musttail call fastcc  i1  @"explicit_type_warning.=<0>"(i64  %5, i64  %11)  
  ret i1 %13 
if.else2:
  ret i1 0 
}


define external fastcc  {i64, i1} @"explicit_type_warning.h<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = insertvalue {i64, i1} undef, i64 %2, 0 
  %4 = insertvalue {i64, i1} %3, i1 1, 1 
  ret {i64, i1} %4 
if.else:
  %5 = insertvalue {i64, i1} undef, i64 undef, 0 
  %6 = insertvalue {i64, i1} %5, i1 0, 1 
  ret {i64, i1} %6 
}


define external fastcc  {i64, i1} @"explicit_type_warning.h<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  store  i64 %"#field##0", i64* %7 
  %8 = insertvalue {i64, i1} undef, i64 %3, 0 
  %9 = insertvalue {i64, i1} %8, i1 1, 1 
  ret {i64, i1} %9 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 0, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
}


define external fastcc  i64 @"explicit_type_warning.mt<0>"() alwaysinline   {
entry:
  ret i64 0 
}


define external fastcc  i64 @"explicit_type_warning.oops<0>"(i64  %"h##0", i64  %"t##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"h##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"t##0", i64* %5 
  ret i64 %2 
}


define external fastcc  {i64, i64, i1} @"explicit_type_warning.oops<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#result##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i64, i1} undef, i64 %2, 0 
  %7 = insertvalue {i64, i64, i1} %6, i64 %5, 1 
  %8 = insertvalue {i64, i64, i1} %7, i1 1, 2 
  ret {i64, i64, i1} %8 
if.else:
  %9 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i64, i1} %9, i64 undef, 1 
  %11 = insertvalue {i64, i64, i1} %10, i1 0, 2 
  ret {i64, i64, i1} %11 
}


define external fastcc  i64 @"explicit_type_warning.oops2<0>"(i64  %"l##0")    {
entry:
  %0 = icmp ne i64 %"l##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"l##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = tail call fastcc  i64  @"explicit_type_warning.oops2<0>"(i64  %3)  
  %5 = add   i64 %4, 1 
  ret i64 %5 
if.else:
  ret i64 0 
}


define external fastcc  {i64, i1} @"explicit_type_warning.t<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"explicit_type_warning.t<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 8 
  %8 = inttoptr i64 %7 to i64* 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %3, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 0, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  i1 @"explicit_type_warning.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i1  @"explicit_type_warning.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
[93mfinal-dump/explicit_type_warning.wybe:3:31: Explicit specification of current type explicit_type_warning,
  it is recommended to specify type as _
[0m[93mfinal-dump/explicit_type_warning.wybe:5:11: Explicit specification of current type explicit_type_warning,
  it is recommended to specify type as _
[0m

pub type tree { pub empty | node(left:tree, key:int, right:tree) }

# resource prefix:string

pub def printTree(t:tree) use !io {
    # use prefix in {
        ?prefix = "{"
        !printTree1(t, !prefix)
        !print("}")
    # }
}

pub def printTree1(t:tree, !prefix:string) use !io {
    if { t = node(?l, ?k, ?r) ::
           !printTree1(l, !prefix)
           !print(prefix)
           ?prefix = ", "
           !print(k)
           !printTree1(r, !prefix)
    }
}

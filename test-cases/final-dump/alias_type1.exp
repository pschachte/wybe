======================================================================
AFTER EVERYTHING:
 Module alias_type1
  public submods  : 
  public types    : position: (alias_type1.position,Just address)
                    posrec: (alias_type1.posrec,Just address)
  public resources: 
  public procs    : alias_type1.<0>
                    alias_type1.position./=<0>
                    alias_type1.position.=<0>
                    alias_type1.position.position<0>
                    alias_type1.position.position<1>
                    alias_type1.position.x<0>
                    alias_type1.position.x<1>
                    alias_type1.position.y<0>
                    alias_type1.position.y<1>
                    alias_type1.posrec./=<0>
                    alias_type1.posrec.=<0>
                    alias_type1.posrec.a<0>
                    alias_type1.posrec.a<1>
                    alias_type1.posrec.p<0>
                    alias_type1.posrec.p<1>
                    alias_type1.posrec.posrec<0>
                    alias_type1.posrec.posrec<1>
  imports         : public use alias_type1.position
                    public use alias_type1.posrec
                    use wybe
  types           : position/public  is address { position(x:int, y:int) @alias_type1:6:25  }  @alias_type1:6:5, posrec/public  is address { posrec(a:int, p:position) @alias_type1:8:23  }  @alias_type1:8:5
  resources       : 
  submodules      : alias_type1.position, alias_type1.posrec
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$6#0:alias_type1.position)
    foreign lpvm mutate(~tmp$6#0:alias_type1.position, ?tmp$7#0:alias_type1.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int)
    foreign lpvm mutate(~tmp$7#0:alias_type1.position, ?tmp$8#0:alias_type1.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int)
    foreign lpvm alloc(16:wybe.int, ?tmp$11#0:alias_type1.posrec)
    foreign lpvm mutate(~tmp$11#0:alias_type1.posrec, ?tmp$12#0:alias_type1.posrec, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$12#0:alias_type1.posrec, ?tmp$13#0:alias_type1.posrec, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp$8#0:alias_type1.position)
    foreign lpvm {noalias} mutate(~tmp$8#0:alias_type1.position, ?%pos#1:alias_type1.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 200:wybe.int)
    foreign lpvm access(~pos#1:alias_type1.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.int)
    foreign c print_int(~tmp$2#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$19#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$19#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign lpvm access(~tmp$13#0:alias_type1.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign c print_int(~tmp$3#0:wybe.int, ~#io#1:wybe.phantom, ?tmp$23#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$23#0:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'alias_type1'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"alias_type1.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 100, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 100, i64* %8 
  %9 = trunc i64 16 to i32  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  %9)  
  %11 = ptrtoint i8* %10 to i64 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 1, i64* %13 
  %14 = add   i64 %11, 8 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 %3, i64* %16 
  %17 = trunc i64 16 to i32  
  %18 = tail call ccc  i8*  @wybe_malloc(i32  %17)  
  %19 = ptrtoint i8* %18 to i64 
  %20 = inttoptr i64 %19 to i8* 
  %21 = inttoptr i64 %3 to i8* 
  %22 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %20, i8*  %21, i32  %22, i32  8, i1  0)  
  %23 = inttoptr i64 %19 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  store  i64 200, i64* %24 
  %25 = inttoptr i64 %19 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  %27 = load  i64, i64* %26 
  tail call ccc  void  @print_int(i64  %27)  
  tail call ccc  void  @putchar(i8  10)  
  %28 = inttoptr i64 %11 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  tail call ccc  void  @print_int(i64  %30)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module alias_type1.position
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias_type1.position./=<0>
                    alias_type1.position.=<0>
                    alias_type1.position.position<0>
                    alias_type1.position.position<1>
                    alias_type1.position.x<0>
                    alias_type1.position.x<1>
                    alias_type1.position.y<0>
                    alias_type1.position.y<1>
  imports         : use alias_type1
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:alias_type1.position, $right#0:alias_type1.position, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:alias_type1.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign lpvm access(~$left#0:alias_type1.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign lpvm access($right#0:alias_type1.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.int)
    foreign lpvm access(~$right#0:alias_type1.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
    foreign llvm icmp_eq(~tmp$3#0:wybe.int, ~tmp$5#0:wybe.int, ?tmp$7#0:wybe.bool) @wybe:nn:nn
    case ~tmp$7#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
        foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp$4#0:wybe.int, ~tmp$6#0:wybe.int, ?tmp$0#0:wybe.bool) @wybe:nn:nn
        foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)



= > public {inline} (1 calls)
0: =($left#0:alias_type1.position, $right#0:alias_type1.position, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:alias_type1.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access(~$left#0:alias_type1.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($right#0:alias_type1.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access(~$right#0:alias_type1.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$y#0:wybe.int)
    foreign llvm icmp_eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp_eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



position > public {inline} (0 calls)
0: position(x#0:wybe.int, y#0:wybe.int, ?$#0:alias_type1.position):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!alias_type1.position)
    foreign lpvm mutate(~%$rec#0:alias_type1.position, ?%$rec#1:alias_type1.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:alias_type1.position, ?%$#0:alias_type1.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y#0:wybe.int)
position > public {inline} (6 calls)
1: position(?x#0:wybe.int, ?y#0:wybe.int, $#0:alias_type1.position):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($#0:alias_type1.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access(~$#0:alias_type1.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y#0:wybe.int)


x > public {inline} (0 calls)
0: x($rec#0:alias_type1.position, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:alias_type1.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.int)
x > public {inline} (0 calls)
1: x($rec#0:alias_type1.position, ?$rec#1:alias_type1.position, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:alias_type1.position, ?%$rec#1:alias_type1.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public {inline} (0 calls)
0: y($rec#0:alias_type1.position, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:alias_type1.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.int)
y > public {inline} (0 calls)
1: y($rec#0:alias_type1.position, ?$rec#1:alias_type1.position, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:alias_type1.position, ?%$rec#1:alias_type1.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'alias_type1.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"alias_type1.position./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"1$tmp$7#0" = icmp eq i64 %3, %10 
  br i1 %"1$tmp$7#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$0#0" = icmp eq i64 %7, %14 
  %"2$$$#0" = xor i1 %"2$tmp$0#0", 1 
  ret i1 %"2$$$#0" 
if.else:
  %"3$$$#0" = xor i1 0, 1 
  ret i1 %"3$$$#0" 
}


define external fastcc  i1 @"alias_type1.position.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %15 = inttoptr i64 %"$left#0" to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = add   i64 %"$left#0", 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = inttoptr i64 %"$right#0" to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %25 = add   i64 %"$right#0", 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %"1$tmp$1#0" = icmp eq i64 %17, %24 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %"2$$$#0" = icmp eq i64 %21, %28 
  ret i1 %"2$$$#0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"alias_type1.position.position<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %29 = trunc i64 16 to i32  
  %30 = tail call ccc  i8*  @wybe_malloc(i32  %29)  
  %31 = ptrtoint i8* %30 to i64 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  store  i64 %"x#0", i64* %33 
  %34 = add   i64 %31, 8 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  store  i64 %"y#0", i64* %36 
  ret i64 %31 
}


define external fastcc  {i64, i64} @"alias_type1.position.position<1>"(i64  %"$#0")    {
entry:
  %37 = inttoptr i64 %"$#0" to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  %39 = load  i64, i64* %38 
  %40 = add   i64 %"$#0", 8 
  %41 = inttoptr i64 %40 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  %43 = load  i64, i64* %42 
  %44 = insertvalue {i64, i64} undef, i64 %39, 0 
  %45 = insertvalue {i64, i64} %44, i64 %43, 1 
  ret {i64, i64} %45 
}


define external fastcc  i64 @"alias_type1.position.x<0>"(i64  %"$rec#0")    {
entry:
  %46 = inttoptr i64 %"$rec#0" to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  %48 = load  i64, i64* %47 
  ret i64 %48 
}


define external fastcc  i64 @"alias_type1.position.x<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %49 = trunc i64 16 to i32  
  %50 = tail call ccc  i8*  @wybe_malloc(i32  %49)  
  %51 = ptrtoint i8* %50 to i64 
  %52 = inttoptr i64 %51 to i8* 
  %53 = inttoptr i64 %"$rec#0" to i8* 
  %54 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %52, i8*  %53, i32  %54, i32  8, i1  0)  
  %55 = inttoptr i64 %51 to i64* 
  %56 = getelementptr  i64, i64* %55, i64 0 
  store  i64 %"$field#0", i64* %56 
  ret i64 %51 
}


define external fastcc  i64 @"alias_type1.position.y<0>"(i64  %"$rec#0")    {
entry:
  %57 = add   i64 %"$rec#0", 8 
  %58 = inttoptr i64 %57 to i64* 
  %59 = getelementptr  i64, i64* %58, i64 0 
  %60 = load  i64, i64* %59 
  ret i64 %60 
}


define external fastcc  i64 @"alias_type1.position.y<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %61 = trunc i64 16 to i32  
  %62 = tail call ccc  i8*  @wybe_malloc(i32  %61)  
  %63 = ptrtoint i8* %62 to i64 
  %64 = inttoptr i64 %63 to i8* 
  %65 = inttoptr i64 %"$rec#0" to i8* 
  %66 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %64, i8*  %65, i32  %66, i32  8, i1  0)  
  %67 = add   i64 %63, 8 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  store  i64 %"$field#0", i64* %69 
  ret i64 %63 
}
--------------------------------------------------
 Module alias_type1.posrec
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias_type1.posrec./=<0>
                    alias_type1.posrec.=<0>
                    alias_type1.posrec.a<0>
                    alias_type1.posrec.a<1>
                    alias_type1.posrec.p<0>
                    alias_type1.posrec.p<1>
                    alias_type1.posrec.posrec<0>
                    alias_type1.posrec.posrec<1>
  imports         : use alias_type1
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:alias_type1.posrec, $right#0:alias_type1.posrec, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:alias_type1.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign lpvm access(~$left#0:alias_type1.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$4#0:alias_type1.position)
    foreign lpvm access($right#0:alias_type1.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.int)
    foreign lpvm access(~$right#0:alias_type1.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$6#0:alias_type1.position)
    foreign llvm icmp_eq(~tmp$3#0:wybe.int, ~tmp$5#0:wybe.int, ?tmp$7#0:wybe.bool) @wybe:nn:nn
    case ~tmp$7#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
        foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(tmp$4#0:alias_type1.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.int)
        foreign lpvm access(~tmp$4#0:alias_type1.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$9#0:wybe.int)
        foreign lpvm access(tmp$6#0:alias_type1.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.int)
        foreign lpvm access(~tmp$6#0:alias_type1.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$11#0:wybe.int)
        foreign llvm icmp_eq(~tmp$10#0:wybe.int, ~tmp$8#0:wybe.int, ?tmp$12#0:wybe.bool) @wybe:nn:nn
        case ~tmp$12#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
            foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp$11#0:wybe.int, ~tmp$9#0:wybe.int, ?tmp$0#0:wybe.bool) @wybe:nn:nn
            foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)




= > public {inline} (1 calls)
0: =($left#0:alias_type1.posrec, $right#0:alias_type1.posrec, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:alias_type1.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$a#0:wybe.int)
    foreign lpvm access(~$left#0:alias_type1.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$p#0:alias_type1.position)
    foreign lpvm access($right#0:alias_type1.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$a#0:wybe.int)
    foreign lpvm access(~$right#0:alias_type1.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$p#0:alias_type1.position)
    foreign llvm icmp_eq(~$left$a#0:wybe.int, ~$right$a#0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($left$p#0:alias_type1.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$9#0:wybe.int)
        foreign lpvm access(~$left$p#0:alias_type1.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$10#0:wybe.int)
        foreign lpvm access($right$p#0:alias_type1.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$11#0:wybe.int)
        foreign lpvm access(~$right$p#0:alias_type1.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$12#0:wybe.int)
        foreign llvm icmp_eq(~tmp$11#0:wybe.int, ~tmp$9#0:wybe.int, ?tmp$13#0:wybe.bool) @wybe:nn:nn
        case ~tmp$13#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp$10#0:wybe.int, ~tmp$12#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn




a > public {inline} (0 calls)
0: a($rec#0:alias_type1.posrec, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:alias_type1.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.int)
a > public {inline} (0 calls)
1: a($rec#0:alias_type1.posrec, ?$rec#1:alias_type1.posrec, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate(~%$rec#0:alias_type1.posrec, ?%$rec#1:alias_type1.posrec, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


p > public {inline} (0 calls)
0: p($rec#0:alias_type1.posrec, ?$#0:alias_type1.position):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:alias_type1.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:alias_type1.position)
p > public {inline} (0 calls)
1: p($rec#0:alias_type1.posrec, ?$rec#1:alias_type1.posrec, $field#0:alias_type1.position):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:alias_type1.posrec, ?%$rec#1:alias_type1.posrec, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:alias_type1.position)


posrec > public {inline} (0 calls)
0: posrec(a#0:wybe.int, p#0:alias_type1.position, ?$#0:alias_type1.posrec):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!alias_type1.posrec)
    foreign lpvm mutate(~%$rec#0:alias_type1.posrec, ?%$rec#1:alias_type1.posrec, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~a#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:alias_type1.posrec, ?%$#0:alias_type1.posrec, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~p#0:alias_type1.position)
posrec > public {inline} (6 calls)
1: posrec(?a#0:wybe.int, ?p#0:alias_type1.position, $#0:alias_type1.posrec):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($#0:alias_type1.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?a#0:wybe.int)
    foreign lpvm access(~$#0:alias_type1.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?p#0:alias_type1.position)

  LLVM code       :

; ModuleID = 'alias_type1.posrec'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"alias_type1.posrec./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"1$tmp$7#0" = icmp eq i64 %3, %10 
  br i1 %"1$tmp$7#0", label %if.then, label %if.else 
if.then:
  %15 = inttoptr i64 %7 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = add   i64 %7, 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = inttoptr i64 %14 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %25 = add   i64 %14, 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %"2$tmp$12#0" = icmp eq i64 %24, %17 
  br i1 %"2$tmp$12#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = xor i1 0, 1 
  ret i1 %"3$$$#0" 
if.then1:
  %"4$tmp$0#0" = icmp eq i64 %28, %21 
  %"4$$$#0" = xor i1 %"4$tmp$0#0", 1 
  ret i1 %"4$$$#0" 
if.else1:
  %"5$$$#0" = xor i1 0, 1 
  ret i1 %"5$$$#0" 
}


define external fastcc  i1 @"alias_type1.posrec.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %29 = inttoptr i64 %"$left#0" to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  %31 = load  i64, i64* %30 
  %32 = add   i64 %"$left#0", 8 
  %33 = inttoptr i64 %32 to i64* 
  %34 = getelementptr  i64, i64* %33, i64 0 
  %35 = load  i64, i64* %34 
  %36 = inttoptr i64 %"$right#0" to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %39 = add   i64 %"$right#0", 8 
  %40 = inttoptr i64 %39 to i64* 
  %41 = getelementptr  i64, i64* %40, i64 0 
  %42 = load  i64, i64* %41 
  %"1$tmp$1#0" = icmp eq i64 %31, %38 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %43 = inttoptr i64 %35 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  %45 = load  i64, i64* %44 
  %46 = add   i64 %35, 8 
  %47 = inttoptr i64 %46 to i64* 
  %48 = getelementptr  i64, i64* %47, i64 0 
  %49 = load  i64, i64* %48 
  %50 = inttoptr i64 %42 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  %52 = load  i64, i64* %51 
  %53 = add   i64 %42, 8 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  %56 = load  i64, i64* %55 
  %"2$tmp$13#0" = icmp eq i64 %52, %45 
  br i1 %"2$tmp$13#0", label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %"4$$$#0" = icmp eq i64 %49, %56 
  ret i1 %"4$$$#0" 
if.else1:
  ret i1 0 
}


define external fastcc  i64 @"alias_type1.posrec.a<0>"(i64  %"$rec#0")    {
entry:
  %57 = inttoptr i64 %"$rec#0" to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  %59 = load  i64, i64* %58 
  ret i64 %59 
}


define external fastcc  i64 @"alias_type1.posrec.a<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %60 = trunc i64 16 to i32  
  %61 = tail call ccc  i8*  @wybe_malloc(i32  %60)  
  %62 = ptrtoint i8* %61 to i64 
  %63 = inttoptr i64 %62 to i8* 
  %64 = inttoptr i64 %"$rec#0" to i8* 
  %65 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %63, i8*  %64, i32  %65, i32  8, i1  0)  
  %66 = inttoptr i64 %62 to i64* 
  %67 = getelementptr  i64, i64* %66, i64 0 
  store  i64 %"$field#0", i64* %67 
  ret i64 %62 
}


define external fastcc  i64 @"alias_type1.posrec.p<0>"(i64  %"$rec#0")    {
entry:
  %68 = add   i64 %"$rec#0", 8 
  %69 = inttoptr i64 %68 to i64* 
  %70 = getelementptr  i64, i64* %69, i64 0 
  %71 = load  i64, i64* %70 
  ret i64 %71 
}


define external fastcc  i64 @"alias_type1.posrec.p<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %72 = trunc i64 16 to i32  
  %73 = tail call ccc  i8*  @wybe_malloc(i32  %72)  
  %74 = ptrtoint i8* %73 to i64 
  %75 = inttoptr i64 %74 to i8* 
  %76 = inttoptr i64 %"$rec#0" to i8* 
  %77 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %75, i8*  %76, i32  %77, i32  8, i1  0)  
  %78 = add   i64 %74, 8 
  %79 = inttoptr i64 %78 to i64* 
  %80 = getelementptr  i64, i64* %79, i64 0 
  store  i64 %"$field#0", i64* %80 
  ret i64 %74 
}


define external fastcc  i64 @"alias_type1.posrec.posrec<0>"(i64  %"a#0", i64  %"p#0")    {
entry:
  %81 = trunc i64 16 to i32  
  %82 = tail call ccc  i8*  @wybe_malloc(i32  %81)  
  %83 = ptrtoint i8* %82 to i64 
  %84 = inttoptr i64 %83 to i64* 
  %85 = getelementptr  i64, i64* %84, i64 0 
  store  i64 %"a#0", i64* %85 
  %86 = add   i64 %83, 8 
  %87 = inttoptr i64 %86 to i64* 
  %88 = getelementptr  i64, i64* %87, i64 0 
  store  i64 %"p#0", i64* %88 
  ret i64 %83 
}


define external fastcc  {i64, i64} @"alias_type1.posrec.posrec<1>"(i64  %"$#0")    {
entry:
  %89 = inttoptr i64 %"$#0" to i64* 
  %90 = getelementptr  i64, i64* %89, i64 0 
  %91 = load  i64, i64* %90 
  %92 = add   i64 %"$#0", 8 
  %93 = inttoptr i64 %92 to i64* 
  %94 = getelementptr  i64, i64* %93, i64 0 
  %95 = load  i64, i64* %94 
  %96 = insertvalue {i64, i64} undef, i64 %91, 0 
  %97 = insertvalue {i64, i64} %96, i64 %95, 1 
  ret {i64, i64} %97 
}

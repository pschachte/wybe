======================================================================
AFTER EVERYTHING:
 Module multi_out
  public submods  : 
  public types    : 
  public resources: 
  public procs    : multi_out.<0>
                    multi_out.onetwothree<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public {inline} (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, [?io#0:wybe.phantom]):
 AliasPairs: []
 InterestingCallProperties: []


onetwothree > public {inline} (1 calls)
0: onetwothree(?x#0:wybe.int, ?y#0:wybe.int, ?z#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(1:wybe.int, ?x#0:wybe.int) @multi_out:2:9
    foreign llvm move(2:wybe.int, ?y#0:wybe.int) @multi_out:3:9
    foreign llvm move(3:wybe.int, ?z#0:wybe.int) @multi_out:4:9

  LLVM code       :

; ModuleID = 'multi_out'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"multi_out.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  ret void 
}


define external fastcc  {i64, i64, i64} @"multi_out.onetwothree<0>"()    {
entry:
  %1 = insertvalue {i64, i64, i64} undef, i64 1, 0 
  %2 = insertvalue {i64, i64, i64} %1, i64 2, 1 
  %3 = insertvalue {i64, i64, i64} %2, i64 3, 2 
  ret {i64, i64, i64} %3 
}

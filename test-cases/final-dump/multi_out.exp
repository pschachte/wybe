======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module multi_out
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : multi_out.<0>
                    multi_out.onetwothree<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: multi_out.<0>
()<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []


proc onetwothree > public {inline} (1 calls)
0: multi_out.onetwothree<0>
onetwothree(?x##0:wybe.int, ?y##0:wybe.int, ?z##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:wybe.int, ?x##0:wybe.int) @multi_out:nn:nn
    foreign llvm move(2:wybe.int, ?y##0:wybe.int) @multi_out:nn:nn
    foreign llvm move(3:wybe.int, ?z##0:wybe.int) @multi_out:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'multi_out'

source_filename = "!ROOT!/final-dump/multi_out.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"multi_out.<0>"() {
  ret void
}

define external fastcc {i64, i64, i64} @"multi_out.onetwothree<0>"() {
  %"tmp#0##0" = insertvalue {i64, i64, i64} undef, i64 1, 0
  %"tmp#1##0" = insertvalue {i64, i64, i64} %"tmp#0##0", i64 2, 1
  %"tmp#2##0" = insertvalue {i64, i64, i64} %"tmp#1##0", i64 3, 2
  ret {i64, i64, i64} %"tmp#2##0"
}

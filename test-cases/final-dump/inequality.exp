======================================================================
AFTER EVERYTHING:
 Module inequality
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : inequality.<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.io.print<5>(1:wybe.bool, ~#io#0:wybe.phantom, ?tmp$6#0:wybe.phantom) #4 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$6#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    wybe.io.print<5>(0:wybe.bool, ~#io#1:wybe.phantom, ?tmp$11#0:wybe.phantom) #5 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$11#0:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'inequality'


 


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.io.print<5>"(i1)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"inequality.<0>"()    {
entry:
  tail call fastcc  void  @"wybe.io.print<5>"(i1  1)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.io.print<5>"(i1  0)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

======================================================================
AFTER EVERYTHING:
 Module inequality
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : inequality.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: inequality.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.bool.print<0>(1:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @bool:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.bool.print<0>(0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @bool:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'inequality'


 


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.bool.print<0>"(i1)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"inequality.<0>"()    {
entry:
  tail call fastcc  void  @"wybe.bool.print<0>"(i1  1)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.bool.print<0>"(i1  0)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

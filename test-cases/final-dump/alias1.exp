======================================================================
AFTER EVERYTHING:
 Module alias1
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : alias1.<0>
                    alias1.bar<0>
                    alias1.baz<0>
                    alias1.foo<0>
                    alias1.replicate<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

*main* > public {impure} (0 calls)
0: alias1.<0>
(io##0:wybe.phantom, ?io##6:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.string.print_string<0>("-------------- Calling foo: ":wybe.string, ~#io##0:wybe.phantom, ?tmp#2##0:wybe.phantom) #6 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#2##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
    alias1.foo<0>(~#io##1:wybe.phantom, ?#io##2:wybe.phantom) #1 @alias1:74:2
    wybe.string.print_string<0>("-------------- Calling bar: ":wybe.string, ~#io##2:wybe.phantom, ?tmp#5##0:wybe.phantom) #7 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?#io##3:wybe.phantom) @io:nn:nn
    alias1.bar<0>(~#io##3:wybe.phantom, ?#io##4:wybe.phantom) #3 @alias1:76:2
    wybe.string.print_string<0>("-------------- Calling baz: ":wybe.string, ~#io##4:wybe.phantom, ?tmp#8##0:wybe.phantom) #8 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#8##0:wybe.phantom, ?#io##5:wybe.phantom) @io:nn:nn
    alias1.baz<0>(~#io##5:wybe.phantom, ?#io##6:wybe.phantom) #5 @alias1:78:2


bar > public (1 calls)
0: alias1.bar<0>
bar(io##0:wybe.phantom, ?io##11:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#3##0:position.position)
    foreign lpvm mutate(~tmp#3##0:position.position, ?tmp#4##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 101:wybe.int)
    foreign lpvm mutate(~tmp#4##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 102:wybe.int)
    alias1.replicate<0>(tmp#0##0:position.position, ?p2##0:position.position, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #1 @alias1:31:4
    wybe.string.print_string<0>("--- Inside bar: ":wybe.string, ~#io##1:wybe.phantom, ?tmp#7##0:wybe.phantom) #13 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect p1(101,102):":wybe.string, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #14 @io:nn:nn
    position.printPosition<0>(tmp#0##0:position.position, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) #4 @alias1:35:4
    wybe.string.print_string<0>("expect p2(101,102):":wybe.string, ~#io##4:wybe.phantom, ?#io##5:wybe.phantom) #15 @io:nn:nn
    position.printPosition<0>(p2##0:position.position, ~#io##5:wybe.phantom, ?#io##6:wybe.phantom) #6 @alias1:37:4
    foreign lpvm {noalias} mutate(~%p2##0:position.position, ?%p2##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 555:wybe.int)
    wybe.string.print_string<0>("--- Inside bar, after calling x(!p2, 555): ":wybe.string, ~#io##6:wybe.phantom, ?tmp#16##0:wybe.phantom) #16 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?#io##7:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect p1(101,102):":wybe.string, ~#io##7:wybe.phantom, ?#io##8:wybe.phantom) #17 @io:nn:nn
    position.printPosition<0>(~tmp#0##0:position.position, ~#io##8:wybe.phantom, ?#io##9:wybe.phantom) #10 @alias1:43:4
    wybe.string.print_string<0>("expect p2(555,102):":wybe.string, ~#io##9:wybe.phantom, ?#io##10:wybe.phantom) #18 @io:nn:nn
    position.printPosition<0>(~p2##1:position.position, ~#io##10:wybe.phantom, ?#io##11:wybe.phantom) #12 @alias1:45:4


baz > public (1 calls)
0: alias1.baz<0>
baz(io##0:wybe.phantom, ?io##15:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:position.position)
    foreign lpvm mutate(~tmp#5##0:position.position, ?tmp#6##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 101:wybe.int)
    foreign lpvm mutate(~tmp#6##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 102:wybe.int)
    alias1.replicate<0>(tmp#0##0:position.position, ?p2##0:position.position, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #1 @alias1:50:4
    wybe.string.print_string<0>("--- Inside baz: ":wybe.string, ~#io##1:wybe.phantom, ?tmp#9##0:wybe.phantom) #19 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect p1(101,102):":wybe.string, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #20 @io:nn:nn
    position.printPosition<0>(tmp#0##0:position.position, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) #4 @alias1:54:4
    wybe.string.print_string<0>("expect p2(101,102):":wybe.string, ~#io##4:wybe.phantom, ?#io##5:wybe.phantom) #21 @io:nn:nn
    position.printPosition<0>(p2##0:position.position, ~#io##5:wybe.phantom, ?#io##6:wybe.phantom) #6 @alias1:56:4
    foreign lpvm access(p2##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int)
    foreign lpvm alloc(16:wybe.int, ?tmp#17##0:position.position)
    foreign lpvm mutate(~tmp#17##0:position.position, ?tmp#18##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 33333333:wybe.int)
    foreign lpvm mutate(~tmp#18##0:position.position, ?tmp#1##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.int)
    wybe.string.print_string<0>("expect p3(33333333,102):":wybe.string, ~#io##6:wybe.phantom, ?#io##7:wybe.phantom) #22 @io:nn:nn
    position.printPosition<0>(tmp#1##0:position.position, ~#io##7:wybe.phantom, ?#io##8:wybe.phantom) #10 @alias1:60:4
    foreign lpvm {noalias} mutate(~tmp#0##0:position.position, ?%p1##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 555:wybe.int)
    wybe.string.print_string<0>("--- Inside baz, after calling x(!p1, 555): ":wybe.string, ~#io##8:wybe.phantom, ?tmp#25##0:wybe.phantom) #23 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#25##0:wybe.phantom, ?#io##9:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect p1(555,102):":wybe.string, ~#io##9:wybe.phantom, ?#io##10:wybe.phantom) #24 @io:nn:nn
    position.printPosition<0>(~p1##1:position.position, ~#io##10:wybe.phantom, ?#io##11:wybe.phantom) #14 @alias1:66:4
    wybe.string.print_string<0>("expect p2(101,102):":wybe.string, ~#io##11:wybe.phantom, ?#io##12:wybe.phantom) #25 @io:nn:nn
    position.printPosition<0>(~p2##0:position.position, ~#io##12:wybe.phantom, ?#io##13:wybe.phantom) #16 @alias1:68:4
    wybe.string.print_string<0>("expect p3(33333333,102):":wybe.string, ~#io##13:wybe.phantom, ?#io##14:wybe.phantom) #26 @io:nn:nn
    position.printPosition<0>(~tmp#1##0:position.position, ~#io##14:wybe.phantom, ?#io##15:wybe.phantom) #18 @alias1:70:4


foo > public (1 calls)
0: alias1.foo<0>
foo(io##0:wybe.phantom, ?io##11:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#3##0:position.position)
    foreign lpvm mutate(~tmp#3##0:position.position, ?tmp#4##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 101:wybe.int)
    foreign lpvm mutate(~tmp#4##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 102:wybe.int)
    alias1.replicate<0>(tmp#0##0:position.position, ?p2##0:position.position, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #1 @alias1:12:4
    wybe.string.print_string<0>("--- Inside foo: ":wybe.string, ~#io##1:wybe.phantom, ?tmp#7##0:wybe.phantom) #13 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect p1(101,102):":wybe.string, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #14 @io:nn:nn
    position.printPosition<0>(tmp#0##0:position.position, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) #4 @alias1:16:4
    wybe.string.print_string<0>("expect p2(101,102):":wybe.string, ~#io##4:wybe.phantom, ?#io##5:wybe.phantom) #15 @io:nn:nn
    position.printPosition<0>(p2##0:position.position, ~#io##5:wybe.phantom, ?#io##6:wybe.phantom) #6 @alias1:18:4
    foreign lpvm {noalias} mutate(~tmp#0##0:position.position, ?%p1##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 555:wybe.int)
    wybe.string.print_string<0>("--- Inside foo, after calling x(!p1, 555): ":wybe.string, ~#io##6:wybe.phantom, ?tmp#16##0:wybe.phantom) #16 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?#io##7:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect p1(555,102):":wybe.string, ~#io##7:wybe.phantom, ?#io##8:wybe.phantom) #17 @io:nn:nn
    position.printPosition<0>(~p1##1:position.position, ~#io##8:wybe.phantom, ?#io##9:wybe.phantom) #10 @alias1:24:4
    wybe.string.print_string<0>("expect p2(101,102):":wybe.string, ~#io##9:wybe.phantom, ?#io##10:wybe.phantom) #18 @io:nn:nn
    position.printPosition<0>(~p2##0:position.position, ~#io##10:wybe.phantom, ?#io##11:wybe.phantom) #12 @alias1:26:4


replicate > public (3 calls)
0: alias1.replicate<0>
replicate(p1##0:position.position, ?p2##0:position.position, io##0:wybe.phantom, ?io##2:wybe.phantom):
 AliasPairs: [(p1##0,p2##0)]
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#4##0:position.position)
    foreign lpvm mutate(~tmp#4##0:position.position, ?tmp#5##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp#5##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int)
    wybe.string.print_string<0>("random print":wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #4 @io:nn:nn
    foreign lpvm access(~tmp#0##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int)
    foreign c print_int(~tmp#1##0:wybe.int, ~#io##1:wybe.phantom, ?tmp#11##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    foreign llvm move(~p1##0:position.position, ?p2##0:position.position) @alias1:7:4

  LLVM code       :

; ModuleID = 'alias1'


 


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


@alias1.8 =    constant {i64, i64} { i64 28, i64 ptrtoint ([?? x i8]* @alias1.7 to i64) }


@alias1.7 =    constant [?? x i8] c"-------------- Calling baz: \00"


@alias1.5 =    constant {i64, i64} { i64 28, i64 ptrtoint ([?? x i8]* @alias1.4 to i64) }


@alias1.4 =    constant [?? x i8] c"-------------- Calling bar: \00"


@alias1.2 =    constant {i64, i64} { i64 28, i64 ptrtoint ([?? x i8]* @alias1.1 to i64) }


@alias1.1 =    constant [?? x i8] c"-------------- Calling foo: \00"


declare external fastcc  void @"position.printPosition<0>"(i64)    


@alias1.42 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @alias1.41 to i64) }


@alias1.41 =    constant [?? x i8] c"expect p2(555,102):\00"


@alias1.39 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @alias1.38 to i64) }


@alias1.38 =    constant [?? x i8] c"expect p1(101,102):\00"


@alias1.36 =    constant {i64, i64} { i64 43, i64 ptrtoint ([?? x i8]* @alias1.35 to i64) }


@alias1.35 =    constant [?? x i8] c"--- Inside bar, after calling x(!p2, 555): \00"


@alias1.25 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @alias1.24 to i64) }


@alias1.24 =    constant [?? x i8] c"expect p2(101,102):\00"


@alias1.22 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @alias1.21 to i64) }


@alias1.21 =    constant [?? x i8] c"expect p1(101,102):\00"


@alias1.19 =    constant {i64, i64} { i64 16, i64 ptrtoint ([?? x i8]* @alias1.18 to i64) }


@alias1.18 =    constant [?? x i8] c"--- Inside bar: \00"


@alias1.94 =    constant {i64, i64} { i64 24, i64 ptrtoint ([?? x i8]* @alias1.93 to i64) }


@alias1.93 =    constant [?? x i8] c"expect p3(33333333,102):\00"


@alias1.91 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @alias1.90 to i64) }


@alias1.90 =    constant [?? x i8] c"expect p2(101,102):\00"


@alias1.88 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @alias1.87 to i64) }


@alias1.87 =    constant [?? x i8] c"expect p1(555,102):\00"


@alias1.85 =    constant {i64, i64} { i64 43, i64 ptrtoint ([?? x i8]* @alias1.84 to i64) }


@alias1.84 =    constant [?? x i8] c"--- Inside baz, after calling x(!p1, 555): \00"


@alias1.74 =    constant {i64, i64} { i64 24, i64 ptrtoint ([?? x i8]* @alias1.73 to i64) }


@alias1.73 =    constant [?? x i8] c"expect p3(33333333,102):\00"


@alias1.59 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @alias1.58 to i64) }


@alias1.58 =    constant [?? x i8] c"expect p2(101,102):\00"


@alias1.56 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @alias1.55 to i64) }


@alias1.55 =    constant [?? x i8] c"expect p1(101,102):\00"


@alias1.53 =    constant {i64, i64} { i64 16, i64 ptrtoint ([?? x i8]* @alias1.52 to i64) }


@alias1.52 =    constant [?? x i8] c"--- Inside baz: \00"


@alias1.128 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @alias1.127 to i64) }


@alias1.127 =    constant [?? x i8] c"expect p2(101,102):\00"


@alias1.125 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @alias1.124 to i64) }


@alias1.124 =    constant [?? x i8] c"expect p1(555,102):\00"


@alias1.122 =    constant {i64, i64} { i64 43, i64 ptrtoint ([?? x i8]* @alias1.121 to i64) }


@alias1.121 =    constant [?? x i8] c"--- Inside foo, after calling x(!p1, 555): \00"


@alias1.111 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @alias1.110 to i64) }


@alias1.110 =    constant [?? x i8] c"expect p2(101,102):\00"


@alias1.108 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @alias1.107 to i64) }


@alias1.107 =    constant [?? x i8] c"expect p1(101,102):\00"


@alias1.105 =    constant {i64, i64} { i64 16, i64 ptrtoint ([?? x i8]* @alias1.104 to i64) }


@alias1.104 =    constant [?? x i8] c"--- Inside foo: \00"


declare external ccc  void @print_int(i64)    


@alias1.139 =    constant {i64, i64} { i64 12, i64 ptrtoint ([?? x i8]* @alias1.138 to i64) }


@alias1.138 =    constant [?? x i8] c"random print\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"alias1.<0>"()    {
entry:
  %3 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.2, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %3)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"alias1.foo<0>"()  
  %6 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.5, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"alias1.bar<0>"()  
  %9 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.8, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %9)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"alias1.baz<0>"()  
  ret void 
}


define external fastcc  void @"alias1.bar<0>"()    {
entry:
  %10 = trunc i64 16 to i32  
  %11 = tail call ccc  i8*  @wybe_malloc(i32  %10)  
  %12 = ptrtoint i8* %11 to i64 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  store  i64 101, i64* %14 
  %15 = add   i64 %12, 8 
  %16 = inttoptr i64 %15 to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  store  i64 102, i64* %17 
  %"1#p2##0" = tail call fastcc  i64  @"alias1.replicate<0>"(i64  %12)  
  %20 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.19, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %20)  
  tail call ccc  void  @putchar(i8  10)  
  %23 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.22, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %23)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %12)  
  %26 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.25, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %26)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"1#p2##0")  
  %27 = trunc i64 16 to i32  
  %28 = tail call ccc  i8*  @wybe_malloc(i32  %27)  
  %29 = ptrtoint i8* %28 to i64 
  %30 = inttoptr i64 %29 to i8* 
  %31 = inttoptr i64 %"1#p2##0" to i8* 
  %32 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %30, i8*  %31, i32  %32, i32  8, i1  0)  
  %33 = inttoptr i64 %29 to i64* 
  %34 = getelementptr  i64, i64* %33, i64 0 
  store  i64 555, i64* %34 
  %37 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.36, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %37)  
  tail call ccc  void  @putchar(i8  10)  
  %40 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.39, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %40)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %12)  
  %43 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.42, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %43)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %29)  
  ret void 
}


define external fastcc  void @"alias1.baz<0>"()    {
entry:
  %44 = trunc i64 16 to i32  
  %45 = tail call ccc  i8*  @wybe_malloc(i32  %44)  
  %46 = ptrtoint i8* %45 to i64 
  %47 = inttoptr i64 %46 to i64* 
  %48 = getelementptr  i64, i64* %47, i64 0 
  store  i64 101, i64* %48 
  %49 = add   i64 %46, 8 
  %50 = inttoptr i64 %49 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  store  i64 102, i64* %51 
  %"1#p2##0" = tail call fastcc  i64  @"alias1.replicate<0>"(i64  %46)  
  %54 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.53, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %54)  
  tail call ccc  void  @putchar(i8  10)  
  %57 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.56, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %57)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %46)  
  %60 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.59, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %60)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"1#p2##0")  
  %61 = add   i64 %"1#p2##0", 8 
  %62 = inttoptr i64 %61 to i64* 
  %63 = getelementptr  i64, i64* %62, i64 0 
  %64 = load  i64, i64* %63 
  %65 = trunc i64 16 to i32  
  %66 = tail call ccc  i8*  @wybe_malloc(i32  %65)  
  %67 = ptrtoint i8* %66 to i64 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  store  i64 33333333, i64* %69 
  %70 = add   i64 %67, 8 
  %71 = inttoptr i64 %70 to i64* 
  %72 = getelementptr  i64, i64* %71, i64 0 
  store  i64 %64, i64* %72 
  %75 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.74, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %75)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %67)  
  %76 = trunc i64 16 to i32  
  %77 = tail call ccc  i8*  @wybe_malloc(i32  %76)  
  %78 = ptrtoint i8* %77 to i64 
  %79 = inttoptr i64 %78 to i8* 
  %80 = inttoptr i64 %46 to i8* 
  %81 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %79, i8*  %80, i32  %81, i32  8, i1  0)  
  %82 = inttoptr i64 %78 to i64* 
  %83 = getelementptr  i64, i64* %82, i64 0 
  store  i64 555, i64* %83 
  %86 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.85, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %86)  
  tail call ccc  void  @putchar(i8  10)  
  %89 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.88, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %89)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %78)  
  %92 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.91, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %92)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"1#p2##0")  
  %95 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.94, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %95)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %67)  
  ret void 
}


define external fastcc  void @"alias1.foo<0>"()    {
entry:
  %96 = trunc i64 16 to i32  
  %97 = tail call ccc  i8*  @wybe_malloc(i32  %96)  
  %98 = ptrtoint i8* %97 to i64 
  %99 = inttoptr i64 %98 to i64* 
  %100 = getelementptr  i64, i64* %99, i64 0 
  store  i64 101, i64* %100 
  %101 = add   i64 %98, 8 
  %102 = inttoptr i64 %101 to i64* 
  %103 = getelementptr  i64, i64* %102, i64 0 
  store  i64 102, i64* %103 
  %"1#p2##0" = tail call fastcc  i64  @"alias1.replicate<0>"(i64  %98)  
  %106 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.105, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %106)  
  tail call ccc  void  @putchar(i8  10)  
  %109 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.108, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %109)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %98)  
  %112 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.111, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %112)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"1#p2##0")  
  %113 = trunc i64 16 to i32  
  %114 = tail call ccc  i8*  @wybe_malloc(i32  %113)  
  %115 = ptrtoint i8* %114 to i64 
  %116 = inttoptr i64 %115 to i8* 
  %117 = inttoptr i64 %98 to i8* 
  %118 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %116, i8*  %117, i32  %118, i32  8, i1  0)  
  %119 = inttoptr i64 %115 to i64* 
  %120 = getelementptr  i64, i64* %119, i64 0 
  store  i64 555, i64* %120 
  %123 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.122, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %123)  
  tail call ccc  void  @putchar(i8  10)  
  %126 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.125, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %126)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %115)  
  %129 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.128, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %129)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"1#p2##0")  
  ret void 
}


define external fastcc  i64 @"alias1.replicate<0>"(i64  %"p1##0")    {
entry:
  %130 = trunc i64 16 to i32  
  %131 = tail call ccc  i8*  @wybe_malloc(i32  %130)  
  %132 = ptrtoint i8* %131 to i64 
  %133 = inttoptr i64 %132 to i64* 
  %134 = getelementptr  i64, i64* %133, i64 0 
  store  i64 0, i64* %134 
  %135 = add   i64 %132, 8 
  %136 = inttoptr i64 %135 to i64* 
  %137 = getelementptr  i64, i64* %136, i64 0 
  store  i64 0, i64* %137 
  %140 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias1.139, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %140)  
  %141 = inttoptr i64 %132 to i64* 
  %142 = getelementptr  i64, i64* %141, i64 0 
  %143 = load  i64, i64* %142 
  tail call ccc  void  @print_int(i64  %143)  
  tail call ccc  void  @putchar(i8  10)  
  ret i64 %"p1##0" 
}
--------------------------------------------------
 Module position
  representation  : (not a type)
  public submods  : position -> position.position
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : public use position.position
                    use wybe
  resources       : 
  submodules      : position.position
  procs           : 

printPosition > public (0 calls)
0: position.printPosition<0>
printPosition(pos##0:position.position, io##0:wybe.phantom, ?io##5:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.string.print_string<0>(" (":wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #7 @io:nn:nn
    foreign lpvm access(pos##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int)
    foreign c print_int(~tmp#0##0:wybe.int, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>(",":wybe.string, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #8 @io:nn:nn
    foreign lpvm access(~pos##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int)
    foreign c print_int(~tmp#1##0:wybe.int, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>(")":wybe.string, ~#io##4:wybe.phantom, ?tmp#14##0:wybe.phantom) #9 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#14##0:wybe.phantom, ?#io##5:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'position'


 


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


declare external ccc  void @print_int(i64)    


@position.15 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.14 to i64) }


@position.14 =    constant [?? x i8] c")\00"


@position.8 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.7 to i64) }


@position.7 =    constant [?? x i8] c",\00"


@position.2 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @position.1 to i64) }


@position.1 =    constant [?? x i8] c" (\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"position.printPosition<0>"(i64  %"pos##0")    {
entry:
  %3 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.2, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %3)  
  %4 = inttoptr i64 %"pos##0" to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  tail call ccc  void  @print_int(i64  %6)  
  %9 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.8, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %9)  
  %10 = add   i64 %"pos##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  tail call ccc  void  @print_int(i64  %13)  
  %16 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.15, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %16)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module position.position
  representation  : address
  public submods  : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: position.position.=<0>
=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int)
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int)
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int)
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int)
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



position > public {inline} (0 calls)
0: position.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:position.position):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:position.position)
    foreign lpvm mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int)
    foreign lpvm mutate(~#rec##1:position.position, ?#result##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int)
position > public {inline} (6 calls)
1: position.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:position.position):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#result##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int)
    foreign lpvm access(~#result##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int)


x > public {inline} (0 calls)
0: position.position.x<0>
x(#rec##0:position.position, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
x > public {inline} (0 calls)
1: position.position.x<1>
x(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


y > public {inline} (0 calls)
0: position.position.y<0>
y(#rec##0:position.position, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
y > public {inline} (0 calls)
1: position.position.y<1>
y(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


~= > public {inline} (0 calls)
0: position.position.~=<0>
~=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int)
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int)
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int)
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int)
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'position.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"position.position.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#left##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"#right##0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"1#tmp#1##0" = icmp eq i64 %3, %10 
  br i1 %"1#tmp#1##0", label %if.then, label %if.else 
if.then:
  %"2##success##0" = icmp eq i64 %7, %14 
  ret i1 %"2##success##0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"position.position.position<0>"(i64  %"x##0", i64  %"y##0")    {
entry:
  %15 = trunc i64 16 to i32  
  %16 = tail call ccc  i8*  @wybe_malloc(i32  %15)  
  %17 = ptrtoint i8* %16 to i64 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  store  i64 %"x##0", i64* %19 
  %20 = add   i64 %17, 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"y##0", i64* %22 
  ret i64 %17 
}


define external fastcc  {i64, i64} @"position.position.position<1>"(i64  %"#result##0")    {
entry:
  %23 = inttoptr i64 %"#result##0" to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"#result##0", 8 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = insertvalue {i64, i64} undef, i64 %25, 0 
  %31 = insertvalue {i64, i64} %30, i64 %29, 1 
  ret {i64, i64} %31 
}


define external fastcc  i64 @"position.position.x<0>"(i64  %"#rec##0")    {
entry:
  %32 = inttoptr i64 %"#rec##0" to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  ret i64 %34 
}


define external fastcc  i64 @"position.position.x<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %35 = trunc i64 16 to i32  
  %36 = tail call ccc  i8*  @wybe_malloc(i32  %35)  
  %37 = ptrtoint i8* %36 to i64 
  %38 = inttoptr i64 %37 to i8* 
  %39 = inttoptr i64 %"#rec##0" to i8* 
  %40 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %38, i8*  %39, i32  %40, i32  8, i1  0)  
  %41 = inttoptr i64 %37 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  store  i64 %"#field##0", i64* %42 
  ret i64 %37 
}


define external fastcc  i64 @"position.position.y<0>"(i64  %"#rec##0")    {
entry:
  %43 = add   i64 %"#rec##0", 8 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  %46 = load  i64, i64* %45 
  ret i64 %46 
}


define external fastcc  i64 @"position.position.y<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %47 = trunc i64 16 to i32  
  %48 = tail call ccc  i8*  @wybe_malloc(i32  %47)  
  %49 = ptrtoint i8* %48 to i64 
  %50 = inttoptr i64 %49 to i8* 
  %51 = inttoptr i64 %"#rec##0" to i8* 
  %52 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %50, i8*  %51, i32  %52, i32  8, i1  0)  
  %53 = add   i64 %49, 8 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  store  i64 %"#field##0", i64* %55 
  ret i64 %49 
}


define external fastcc  i1 @"position.position.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %56 = inttoptr i64 %"#left##0" to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = add   i64 %"#left##0", 8 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  %62 = load  i64, i64* %61 
  %63 = inttoptr i64 %"#right##0" to i64* 
  %64 = getelementptr  i64, i64* %63, i64 0 
  %65 = load  i64, i64* %64 
  %66 = add   i64 %"#right##0", 8 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  %69 = load  i64, i64* %68 
  %"1#tmp#7##0" = icmp eq i64 %58, %65 
  br i1 %"1#tmp#7##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#0##0" = icmp eq i64 %62, %69 
  %"2##success##0" = xor i1 %"2#tmp#0##0", 1 
  ret i1 %"2##success##0" 
if.else:
  %"3##success##0" = xor i1 0, 1 
  ret i1 %"3##success##0" 
}

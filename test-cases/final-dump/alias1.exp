======================================================================
AFTER EVERYTHING:
 Module alias1
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : alias1.<0>
                    alias1.bar<0>
                    alias1.baz<0>
                    alias1.foo<0>
                    alias1.replicate<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (io#0:wybe.phantom, ?io#6:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("-------------- Calling foo: ":wybe.string, ~#io#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    alias1.foo<0>(~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #1 @alias1:74:2
    foreign c print_string("-------------- Calling bar: ":wybe.string, ~#io#2:wybe.phantom, ?tmp$5#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$5#0:wybe.phantom, ?#io#3:wybe.phantom) @io:nn:nn
    alias1.bar<0>(~#io#3:wybe.phantom, ?#io#4:wybe.phantom) #3 @alias1:76:2
    foreign c print_string("-------------- Calling baz: ":wybe.string, ~#io#4:wybe.phantom, ?tmp$8#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$8#0:wybe.phantom, ?#io#5:wybe.phantom) @io:nn:nn
    alias1.baz<0>(~#io#5:wybe.phantom, ?#io#6:wybe.phantom) #5 @alias1:78:2


bar > public (1 calls)
0: bar(io#0:wybe.phantom, ?io#11:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$3#0:position.position)
    foreign lpvm mutate(~tmp$3#0:position.position, ?tmp$4#0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 101:wybe.int)
    foreign lpvm mutate(~tmp$4#0:position.position, ?tmp$0#0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 102:wybe.int)
    alias1.replicate<0>(tmp$0#0:position.position, ?p2#0:position.position, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #1 @alias1:31:4
    foreign c print_string("--- Inside bar: ":wybe.string, ~#io#1:wybe.phantom, ?tmp$7#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$7#0:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn
    foreign c print_string("expect p1(101,102):":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @io:nn:nn
    position.printPosition<0>(tmp$0#0:position.position, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) #4 @alias1:35:4
    foreign c print_string("expect p2(101,102):":wybe.string, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @io:nn:nn
    position.printPosition<0>(p2#0:position.position, ~#io#5:wybe.phantom, ?#io#6:wybe.phantom) #6 @alias1:37:4
    foreign lpvm {noalias} mutate(~%p2#0:position.position, ?%p2#1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 555:wybe.int)
    foreign c print_string("--- Inside bar, after calling x(!p2, 555): ":wybe.string, ~#io#6:wybe.phantom, ?tmp$16#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$16#0:wybe.phantom, ?#io#7:wybe.phantom) @io:nn:nn
    foreign c print_string("expect p1(101,102):":wybe.string, ~#io#7:wybe.phantom, ?#io#8:wybe.phantom) @io:nn:nn
    position.printPosition<0>(~tmp$0#0:position.position, ~#io#8:wybe.phantom, ?#io#9:wybe.phantom) #10 @alias1:43:4
    foreign c print_string("expect p2(555,102):":wybe.string, ~#io#9:wybe.phantom, ?#io#10:wybe.phantom) @io:nn:nn
    position.printPosition<0>(~p2#1:position.position, ~#io#10:wybe.phantom, ?#io#11:wybe.phantom) #12 @alias1:45:4


baz > public (1 calls)
0: baz(io#0:wybe.phantom, ?io#15:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:position.position)
    foreign lpvm mutate(~tmp$5#0:position.position, ?tmp$6#0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 101:wybe.int)
    foreign lpvm mutate(~tmp$6#0:position.position, ?tmp$0#0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 102:wybe.int)
    alias1.replicate<0>(tmp$0#0:position.position, ?p2#0:position.position, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #1 @alias1:50:4
    foreign c print_string("--- Inside baz: ":wybe.string, ~#io#1:wybe.phantom, ?tmp$9#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$9#0:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn
    foreign c print_string("expect p1(101,102):":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @io:nn:nn
    position.printPosition<0>(tmp$0#0:position.position, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) #4 @alias1:54:4
    foreign c print_string("expect p2(101,102):":wybe.string, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @io:nn:nn
    position.printPosition<0>(p2#0:position.position, ~#io#5:wybe.phantom, ?#io#6:wybe.phantom) #6 @alias1:56:4
    foreign lpvm access(p2#0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$2#0:wybe.int)
    foreign lpvm alloc(16:wybe.int, ?tmp$17#0:position.position)
    foreign lpvm mutate(~tmp$17#0:position.position, ?tmp$18#0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 33333333:wybe.int)
    foreign lpvm mutate(~tmp$18#0:position.position, ?tmp$1#0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:wybe.int)
    foreign c print_string("expect p3(33333333,102):":wybe.string, ~#io#6:wybe.phantom, ?#io#7:wybe.phantom) @io:nn:nn
    position.printPosition<0>(tmp$1#0:position.position, ~#io#7:wybe.phantom, ?#io#8:wybe.phantom) #10 @alias1:60:4
    foreign lpvm {noalias} mutate(~tmp$0#0:position.position, ?%p1#1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 555:wybe.int)
    foreign c print_string("--- Inside baz, after calling x(!p1, 555): ":wybe.string, ~#io#8:wybe.phantom, ?tmp$25#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$25#0:wybe.phantom, ?#io#9:wybe.phantom) @io:nn:nn
    foreign c print_string("expect p1(555,102):":wybe.string, ~#io#9:wybe.phantom, ?#io#10:wybe.phantom) @io:nn:nn
    position.printPosition<0>(~p1#1:position.position, ~#io#10:wybe.phantom, ?#io#11:wybe.phantom) #14 @alias1:66:4
    foreign c print_string("expect p2(101,102):":wybe.string, ~#io#11:wybe.phantom, ?#io#12:wybe.phantom) @io:nn:nn
    position.printPosition<0>(~p2#0:position.position, ~#io#12:wybe.phantom, ?#io#13:wybe.phantom) #16 @alias1:68:4
    foreign c print_string("expect p3(33333333,102):":wybe.string, ~#io#13:wybe.phantom, ?#io#14:wybe.phantom) @io:nn:nn
    position.printPosition<0>(~tmp$1#0:position.position, ~#io#14:wybe.phantom, ?#io#15:wybe.phantom) #18 @alias1:70:4


foo > public (1 calls)
0: foo(io#0:wybe.phantom, ?io#11:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$3#0:position.position)
    foreign lpvm mutate(~tmp$3#0:position.position, ?tmp$4#0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 101:wybe.int)
    foreign lpvm mutate(~tmp$4#0:position.position, ?tmp$0#0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 102:wybe.int)
    alias1.replicate<0>(tmp$0#0:position.position, ?p2#0:position.position, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #1 @alias1:12:4
    foreign c print_string("--- Inside foo: ":wybe.string, ~#io#1:wybe.phantom, ?tmp$7#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$7#0:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn
    foreign c print_string("expect p1(101,102):":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @io:nn:nn
    position.printPosition<0>(tmp$0#0:position.position, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) #4 @alias1:16:4
    foreign c print_string("expect p2(101,102):":wybe.string, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @io:nn:nn
    position.printPosition<0>(p2#0:position.position, ~#io#5:wybe.phantom, ?#io#6:wybe.phantom) #6 @alias1:18:4
    foreign lpvm {noalias} mutate(~tmp$0#0:position.position, ?%p1#1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 555:wybe.int)
    foreign c print_string("--- Inside foo, after calling x(!p1, 555): ":wybe.string, ~#io#6:wybe.phantom, ?tmp$16#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$16#0:wybe.phantom, ?#io#7:wybe.phantom) @io:nn:nn
    foreign c print_string("expect p1(555,102):":wybe.string, ~#io#7:wybe.phantom, ?#io#8:wybe.phantom) @io:nn:nn
    position.printPosition<0>(~p1#1:position.position, ~#io#8:wybe.phantom, ?#io#9:wybe.phantom) #10 @alias1:24:4
    foreign c print_string("expect p2(101,102):":wybe.string, ~#io#9:wybe.phantom, ?#io#10:wybe.phantom) @io:nn:nn
    position.printPosition<0>(~p2#0:position.position, ~#io#10:wybe.phantom, ?#io#11:wybe.phantom) #12 @alias1:26:4


replicate > public (3 calls)
0: replicate(p1#0:position.position, ?p2#0:position.position, io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: [(p1#0,p2#0)]
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$4#0:position.position)
    foreign lpvm mutate(~tmp$4#0:position.position, ?tmp$5#0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$5#0:position.position, ?tmp$0#0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign c print_string("random print":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    foreign lpvm access(~tmp$0#0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#1:wybe.phantom, ?tmp$11#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$11#0:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn
    foreign llvm move(~p1#0:position.position, ?p2#0:position.position) @alias1:7:3

  LLVM code       :

; ModuleID = 'alias1'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


@alias1.5 =    constant [29 x i8] c"-------------- Calling baz: \00"


@alias1.3 =    constant [29 x i8] c"-------------- Calling bar: \00"


@alias1.1 =    constant [29 x i8] c"-------------- Calling foo: \00"


declare external fastcc  void @"position.printPosition<0>"(i64)    


@alias1.33 =    constant [20 x i8] c"expect p2(555,102):\00"


@alias1.31 =    constant [20 x i8] c"expect p1(101,102):\00"


@alias1.29 =    constant [44 x i8] c"--- Inside bar, after calling x(!p2, 555): \00"


@alias1.19 =    constant [20 x i8] c"expect p2(101,102):\00"


@alias1.17 =    constant [20 x i8] c"expect p1(101,102):\00"


@alias1.15 =    constant [17 x i8] c"--- Inside bar: \00"


@alias1.77 =    constant [25 x i8] c"expect p3(33333333,102):\00"


@alias1.75 =    constant [20 x i8] c"expect p2(101,102):\00"


@alias1.73 =    constant [20 x i8] c"expect p1(555,102):\00"


@alias1.71 =    constant [44 x i8] c"--- Inside baz, after calling x(!p1, 555): \00"


@alias1.61 =    constant [25 x i8] c"expect p3(33333333,102):\00"


@alias1.47 =    constant [20 x i8] c"expect p2(101,102):\00"


@alias1.45 =    constant [20 x i8] c"expect p1(101,102):\00"


@alias1.43 =    constant [17 x i8] c"--- Inside baz: \00"


@alias1.105 =    constant [20 x i8] c"expect p2(101,102):\00"


@alias1.103 =    constant [20 x i8] c"expect p1(555,102):\00"


@alias1.101 =    constant [44 x i8] c"--- Inside foo, after calling x(!p1, 555): \00"


@alias1.91 =    constant [20 x i8] c"expect p2(101,102):\00"


@alias1.89 =    constant [20 x i8] c"expect p1(101,102):\00"


@alias1.87 =    constant [17 x i8] c"--- Inside foo: \00"


declare external ccc  void @print_int(i64)    


@alias1.115 =    constant [13 x i8] c"random print\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"alias1.<0>"()    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([29 x i8], [29 x i8]* @alias1.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"alias1.foo<0>"()  
  %4 = ptrtoint i8* getelementptr inbounds ([29 x i8], [29 x i8]* @alias1.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"alias1.bar<0>"()  
  %6 = ptrtoint i8* getelementptr inbounds ([29 x i8], [29 x i8]* @alias1.5, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"alias1.baz<0>"()  
  ret void 
}


define external fastcc  void @"alias1.bar<0>"()    {
entry:
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  store  i64 101, i64* %11 
  %12 = add   i64 %9, 8 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  store  i64 102, i64* %14 
  %"1$p2#0" = tail call fastcc  i64  @"alias1.replicate<0>"(i64  %9)  
  %16 = ptrtoint i8* getelementptr inbounds ([17 x i8], [17 x i8]* @alias1.15, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %16)  
  tail call ccc  void  @putchar(i8  10)  
  %18 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @alias1.17, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %18)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %9)  
  %20 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @alias1.19, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %20)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"1$p2#0")  
  %21 = trunc i64 16 to i32  
  %22 = tail call ccc  i8*  @wybe_malloc(i32  %21)  
  %23 = ptrtoint i8* %22 to i64 
  %24 = inttoptr i64 %23 to i8* 
  %25 = inttoptr i64 %"1$p2#0" to i8* 
  %26 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %24, i8*  %25, i32  %26, i32  8, i1  0)  
  %27 = inttoptr i64 %23 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  store  i64 555, i64* %28 
  %30 = ptrtoint i8* getelementptr inbounds ([44 x i8], [44 x i8]* @alias1.29, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %30)  
  tail call ccc  void  @putchar(i8  10)  
  %32 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @alias1.31, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %32)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %9)  
  %34 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @alias1.33, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %34)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %23)  
  ret void 
}


define external fastcc  void @"alias1.baz<0>"()    {
entry:
  %35 = trunc i64 16 to i32  
  %36 = tail call ccc  i8*  @wybe_malloc(i32  %35)  
  %37 = ptrtoint i8* %36 to i64 
  %38 = inttoptr i64 %37 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  store  i64 101, i64* %39 
  %40 = add   i64 %37, 8 
  %41 = inttoptr i64 %40 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  store  i64 102, i64* %42 
  %"1$p2#0" = tail call fastcc  i64  @"alias1.replicate<0>"(i64  %37)  
  %44 = ptrtoint i8* getelementptr inbounds ([17 x i8], [17 x i8]* @alias1.43, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %44)  
  tail call ccc  void  @putchar(i8  10)  
  %46 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @alias1.45, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %46)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %37)  
  %48 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @alias1.47, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %48)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"1$p2#0")  
  %49 = add   i64 %"1$p2#0", 8 
  %50 = inttoptr i64 %49 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  %52 = load  i64, i64* %51 
  %53 = trunc i64 16 to i32  
  %54 = tail call ccc  i8*  @wybe_malloc(i32  %53)  
  %55 = ptrtoint i8* %54 to i64 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  store  i64 33333333, i64* %57 
  %58 = add   i64 %55, 8 
  %59 = inttoptr i64 %58 to i64* 
  %60 = getelementptr  i64, i64* %59, i64 0 
  store  i64 %52, i64* %60 
  %62 = ptrtoint i8* getelementptr inbounds ([25 x i8], [25 x i8]* @alias1.61, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %62)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %55)  
  %63 = trunc i64 16 to i32  
  %64 = tail call ccc  i8*  @wybe_malloc(i32  %63)  
  %65 = ptrtoint i8* %64 to i64 
  %66 = inttoptr i64 %65 to i8* 
  %67 = inttoptr i64 %37 to i8* 
  %68 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %66, i8*  %67, i32  %68, i32  8, i1  0)  
  %69 = inttoptr i64 %65 to i64* 
  %70 = getelementptr  i64, i64* %69, i64 0 
  store  i64 555, i64* %70 
  %72 = ptrtoint i8* getelementptr inbounds ([44 x i8], [44 x i8]* @alias1.71, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %72)  
  tail call ccc  void  @putchar(i8  10)  
  %74 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @alias1.73, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %74)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %65)  
  %76 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @alias1.75, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %76)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"1$p2#0")  
  %78 = ptrtoint i8* getelementptr inbounds ([25 x i8], [25 x i8]* @alias1.77, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %78)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %55)  
  ret void 
}


define external fastcc  void @"alias1.foo<0>"()    {
entry:
  %79 = trunc i64 16 to i32  
  %80 = tail call ccc  i8*  @wybe_malloc(i32  %79)  
  %81 = ptrtoint i8* %80 to i64 
  %82 = inttoptr i64 %81 to i64* 
  %83 = getelementptr  i64, i64* %82, i64 0 
  store  i64 101, i64* %83 
  %84 = add   i64 %81, 8 
  %85 = inttoptr i64 %84 to i64* 
  %86 = getelementptr  i64, i64* %85, i64 0 
  store  i64 102, i64* %86 
  %"1$p2#0" = tail call fastcc  i64  @"alias1.replicate<0>"(i64  %81)  
  %88 = ptrtoint i8* getelementptr inbounds ([17 x i8], [17 x i8]* @alias1.87, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %88)  
  tail call ccc  void  @putchar(i8  10)  
  %90 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @alias1.89, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %90)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %81)  
  %92 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @alias1.91, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %92)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"1$p2#0")  
  %93 = trunc i64 16 to i32  
  %94 = tail call ccc  i8*  @wybe_malloc(i32  %93)  
  %95 = ptrtoint i8* %94 to i64 
  %96 = inttoptr i64 %95 to i8* 
  %97 = inttoptr i64 %81 to i8* 
  %98 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %96, i8*  %97, i32  %98, i32  8, i1  0)  
  %99 = inttoptr i64 %95 to i64* 
  %100 = getelementptr  i64, i64* %99, i64 0 
  store  i64 555, i64* %100 
  %102 = ptrtoint i8* getelementptr inbounds ([44 x i8], [44 x i8]* @alias1.101, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %102)  
  tail call ccc  void  @putchar(i8  10)  
  %104 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @alias1.103, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %104)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %95)  
  %106 = ptrtoint i8* getelementptr inbounds ([20 x i8], [20 x i8]* @alias1.105, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %106)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"1$p2#0")  
  ret void 
}


define external fastcc  i64 @"alias1.replicate<0>"(i64  %"p1#0")    {
entry:
  %107 = trunc i64 16 to i32  
  %108 = tail call ccc  i8*  @wybe_malloc(i32  %107)  
  %109 = ptrtoint i8* %108 to i64 
  %110 = inttoptr i64 %109 to i64* 
  %111 = getelementptr  i64, i64* %110, i64 0 
  store  i64 0, i64* %111 
  %112 = add   i64 %109, 8 
  %113 = inttoptr i64 %112 to i64* 
  %114 = getelementptr  i64, i64* %113, i64 0 
  store  i64 0, i64* %114 
  %116 = ptrtoint i8* getelementptr inbounds ([13 x i8], [13 x i8]* @alias1.115, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %116)  
  %117 = inttoptr i64 %109 to i64* 
  %118 = getelementptr  i64, i64* %117, i64 0 
  %119 = load  i64, i64* %118 
  tail call ccc  void  @print_int(i64  %119)  
  tail call ccc  void  @putchar(i8  10)  
  ret i64 %"p1#0" 
}
--------------------------------------------------
 Module position
  representation  : (not a type)
  public submods  : position -> position.position
  public resources: 
  public procs    : position.printPosition<0>
                    position.position./=<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : public use position.position
                    use wybe
  resources       : 
  submodules      : position.position
  procs           : 

printPosition > public (0 calls)
0: printPosition(pos#0:position.position, io#0:wybe.phantom, ?io#5:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string(" (":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    foreign lpvm access(pos#0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn
    foreign c print_string(",":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @io:nn:nn
    foreign lpvm access(~pos#0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @io:nn:nn
    foreign c print_string(")":wybe.string, ~#io#4:wybe.phantom, ?tmp$14#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$14#0:wybe.phantom, ?#io#5:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'position'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external ccc  void @print_int(i64)    


@position.12 =    constant [2 x i8] c")\00"


@position.6 =    constant [2 x i8] c",\00"


@position.1 =    constant [3 x i8] c" (\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"position.printPosition<0>"(i64  %"pos#0")    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @position.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  %3 = inttoptr i64 %"pos#0" to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  tail call ccc  void  @print_int(i64  %5)  
  %7 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @position.6, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %7)  
  %8 = add   i64 %"pos#0", 8 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  tail call ccc  void  @print_int(i64  %11)  
  %13 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @position.12, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %13)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module position.position
  representation  : address
  public submods  : 
  public resources: 
  public procs    : position.position./=<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:position.position, $right#0:position.position, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.int)
    foreign lpvm access(~$left#0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign lpvm access($right#0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.int)
    foreign lpvm access(~$right#0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$6#0:wybe.int)
    foreign llvm icmp_eq(~tmp$3#0:wybe.int, ~tmp$5#0:wybe.int, ?tmp$7#0:wybe.bool) @int:nn:nn
    case ~tmp$7#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp$0#0:wybe.bool)
        foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp$4#0:wybe.int, ~tmp$6#0:wybe.int, ?tmp$0#0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)



= > public {inline} (1 calls)
0: =($left#0:position.position, $right#0:position.position, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access(~$left#0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($right#0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access(~$right#0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$y#0:wybe.int)
    foreign llvm icmp_eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$1#0:wybe.bool) @int:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp_eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?$$#0:wybe.bool) @int:nn:nn



position > public {inline} (0 calls)
0: position(x#0:wybe.int, y#0:wybe.int, ?$#0:position.position):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:position.position)
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:position.position, ?%$#0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y#0:wybe.int)
position > public {inline} (6 calls)
1: position(?x#0:wybe.int, ?y#0:wybe.int, $#0:position.position):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($#0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access(~$#0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y#0:wybe.int)


x > public {inline} (0 calls)
0: x($rec#0:position.position, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.int)
x > public {inline} (0 calls)
1: x($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public {inline} (0 calls)
0: y($rec#0:position.position, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.int)
y > public {inline} (0 calls)
1: y($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'position.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"position.position./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"1$tmp$7#0" = icmp eq i64 %3, %10 
  br i1 %"1$tmp$7#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$0#0" = icmp eq i64 %7, %14 
  %"2$$$#0" = xor i1 %"2$tmp$0#0", 1 
  ret i1 %"2$$$#0" 
if.else:
  %"3$$$#0" = xor i1 0, 1 
  ret i1 %"3$$$#0" 
}


define external fastcc  i1 @"position.position.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %15 = inttoptr i64 %"$left#0" to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = add   i64 %"$left#0", 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = inttoptr i64 %"$right#0" to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %25 = add   i64 %"$right#0", 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %"1$tmp$1#0" = icmp eq i64 %17, %24 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %"2$$$#0" = icmp eq i64 %21, %28 
  ret i1 %"2$$$#0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"position.position.position<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %29 = trunc i64 16 to i32  
  %30 = tail call ccc  i8*  @wybe_malloc(i32  %29)  
  %31 = ptrtoint i8* %30 to i64 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  store  i64 %"x#0", i64* %33 
  %34 = add   i64 %31, 8 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  store  i64 %"y#0", i64* %36 
  ret i64 %31 
}


define external fastcc  {i64, i64} @"position.position.position<1>"(i64  %"$#0")    {
entry:
  %37 = inttoptr i64 %"$#0" to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  %39 = load  i64, i64* %38 
  %40 = add   i64 %"$#0", 8 
  %41 = inttoptr i64 %40 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  %43 = load  i64, i64* %42 
  %44 = insertvalue {i64, i64} undef, i64 %39, 0 
  %45 = insertvalue {i64, i64} %44, i64 %43, 1 
  ret {i64, i64} %45 
}


define external fastcc  i64 @"position.position.x<0>"(i64  %"$rec#0")    {
entry:
  %46 = inttoptr i64 %"$rec#0" to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  %48 = load  i64, i64* %47 
  ret i64 %48 
}


define external fastcc  i64 @"position.position.x<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %49 = trunc i64 16 to i32  
  %50 = tail call ccc  i8*  @wybe_malloc(i32  %49)  
  %51 = ptrtoint i8* %50 to i64 
  %52 = inttoptr i64 %51 to i8* 
  %53 = inttoptr i64 %"$rec#0" to i8* 
  %54 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %52, i8*  %53, i32  %54, i32  8, i1  0)  
  %55 = inttoptr i64 %51 to i64* 
  %56 = getelementptr  i64, i64* %55, i64 0 
  store  i64 %"$field#0", i64* %56 
  ret i64 %51 
}


define external fastcc  i64 @"position.position.y<0>"(i64  %"$rec#0")    {
entry:
  %57 = add   i64 %"$rec#0", 8 
  %58 = inttoptr i64 %57 to i64* 
  %59 = getelementptr  i64, i64* %58, i64 0 
  %60 = load  i64, i64* %59 
  ret i64 %60 
}


define external fastcc  i64 @"position.position.y<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %61 = trunc i64 16 to i32  
  %62 = tail call ccc  i8*  @wybe_malloc(i32  %61)  
  %63 = ptrtoint i8* %62 to i64 
  %64 = inttoptr i64 %63 to i8* 
  %65 = inttoptr i64 %"$rec#0" to i8* 
  %66 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %64, i8*  %65, i32  %66, i32  8, i1  0)  
  %67 = add   i64 %63, 8 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  store  i64 %"$field#0", i64* %69 
  ret i64 %63 
}

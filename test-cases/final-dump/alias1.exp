======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module alias1
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : alias1.<0>
                    alias1.bar<0>
                    alias1.baz<0>
                    alias1.foo<0>
                    alias1.replicate<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: alias1.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("-------------- Calling foo: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @alias1:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @alias1:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @alias1:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @alias1:nn:nn
    alias1.foo<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @alias1:nn:nn
    wybe.string.print<0>("-------------- Calling bar: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @alias1:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @alias1:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @alias1:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @alias1:nn:nn
    alias1.bar<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @alias1:nn:nn
    wybe.string.print<0>("-------------- Calling baz: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @alias1:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#7##0:wybe.phantom) @alias1:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @alias1:nn:nn
    foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @alias1:nn:nn
    alias1.baz<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @alias1:nn:nn


proc bar > public (1 calls)
0: alias1.bar<0>
bar()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#3##0:position.position) @alias1:nn:nn
    foreign lpvm mutate(~tmp#3##0:position.position, ?tmp#4##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 101:wybe.int) @alias1:nn:nn
    foreign lpvm mutate(~tmp#4##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 102:wybe.int) @alias1:nn:nn
    alias1.replicate<0>(tmp#0##0:position.position, ?p2##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @alias1:nn:nn
    wybe.string.print<0>("--- Inside bar: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #13 @alias1:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @alias1:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @alias1:nn:nn
    foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @alias1:nn:nn
    wybe.string.print<0>("expect p1(101,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @alias1:nn:nn
    position.printPosition<0>(tmp#0##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @alias1:nn:nn
    wybe.string.print<0>("expect p2(101,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @alias1:nn:nn
    position.printPosition<0>(p2##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @alias1:nn:nn
    foreign lpvm {noalias} mutate(~p2##0:position.position, ?p2##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 555:wybe.int) @alias1:nn:nn
    wybe.string.print<0>("--- Inside bar, after calling x(!p2, 555): ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #14 @alias1:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @alias1:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @alias1:nn:nn
    foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @alias1:nn:nn
    wybe.string.print<0>("expect p1(101,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9 @alias1:nn:nn
    position.printPosition<0>(~tmp#0##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10 @alias1:nn:nn
    wybe.string.print<0>("expect p2(555,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #11 @alias1:nn:nn
    position.printPosition<0>(~p2##1:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #12 @alias1:nn:nn


proc baz > public (1 calls)
0: alias1.baz<0>
baz()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:position.position) @alias1:nn:nn
    foreign lpvm mutate(~tmp#5##0:position.position, ?tmp#6##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 101:wybe.int) @alias1:nn:nn
    foreign lpvm mutate(~tmp#6##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 102:wybe.int) @alias1:nn:nn
    alias1.replicate<0>(tmp#0##0:position.position, ?p2##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @alias1:nn:nn
    wybe.string.print<0>("--- Inside baz: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #19 @alias1:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @alias1:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @alias1:nn:nn
    foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @alias1:nn:nn
    wybe.string.print<0>("expect p1(101,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @alias1:nn:nn
    position.printPosition<0>(tmp#0##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @alias1:nn:nn
    wybe.string.print<0>("expect p2(101,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @alias1:nn:nn
    position.printPosition<0>(p2##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @alias1:nn:nn
    foreign lpvm access(p2##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @alias1:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#13##0:position.position) @alias1:nn:nn
    foreign lpvm mutate(~tmp#13##0:position.position, ?tmp#14##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 33333333:wybe.int) @alias1:nn:nn
    foreign lpvm mutate(~tmp#14##0:position.position, ?tmp#1##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.int) @alias1:nn:nn
    wybe.string.print<0>("expect p3(33333333,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9 @alias1:nn:nn
    position.printPosition<0>(tmp#1##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10 @alias1:nn:nn
    foreign lpvm {noalias} mutate(~tmp#0##0:position.position, ?p1##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 555:wybe.int) @alias1:nn:nn
    wybe.string.print<0>("--- Inside baz, after calling x(!p1, 555): ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #20 @alias1:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom) @alias1:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#18##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @alias1:nn:nn
    foreign lpvm store(~%tmp#19##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @alias1:nn:nn
    wybe.string.print<0>("expect p1(555,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #13 @alias1:nn:nn
    position.printPosition<0>(~p1##1:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #14 @alias1:nn:nn
    wybe.string.print<0>("expect p2(101,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #15 @alias1:nn:nn
    position.printPosition<0>(~p2##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #16 @alias1:nn:nn
    wybe.string.print<0>("expect p3(33333333,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #17 @alias1:nn:nn
    position.printPosition<0>(~tmp#1##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #18 @alias1:nn:nn


proc foo > public (1 calls)
0: alias1.foo<0>
foo()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#3##0:position.position) @alias1:nn:nn
    foreign lpvm mutate(~tmp#3##0:position.position, ?tmp#4##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 101:wybe.int) @alias1:nn:nn
    foreign lpvm mutate(~tmp#4##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 102:wybe.int) @alias1:nn:nn
    alias1.replicate<0>(tmp#0##0:position.position, ?p2##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @alias1:nn:nn
    wybe.string.print<0>("--- Inside foo: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #13 @alias1:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @alias1:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @alias1:nn:nn
    foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @alias1:nn:nn
    wybe.string.print<0>("expect p1(101,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @alias1:nn:nn
    position.printPosition<0>(tmp#0##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @alias1:nn:nn
    wybe.string.print<0>("expect p2(101,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @alias1:nn:nn
    position.printPosition<0>(p2##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @alias1:nn:nn
    foreign lpvm {noalias} mutate(~tmp#0##0:position.position, ?p1##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 555:wybe.int) @alias1:nn:nn
    wybe.string.print<0>("--- Inside foo, after calling x(!p1, 555): ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #14 @alias1:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @alias1:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @alias1:nn:nn
    foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @alias1:nn:nn
    wybe.string.print<0>("expect p1(555,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9 @alias1:nn:nn
    position.printPosition<0>(~p1##1:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10 @alias1:nn:nn
    wybe.string.print<0>("expect p2(101,102):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #11 @alias1:nn:nn
    position.printPosition<0>(~p2##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #12 @alias1:nn:nn


proc replicate > public (3 calls)
0: alias1.replicate<0>
replicate(p1##0:position.position, ?p2##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: [(p1##0,p2##0)]
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#4##0:position.position) @alias1:nn:nn
    foreign lpvm mutate(~tmp#4##0:position.position, ?tmp#5##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @alias1:nn:nn
    foreign lpvm mutate(~tmp#5##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @alias1:nn:nn
    wybe.string.print<0>("random print":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @alias1:nn:nn
    foreign lpvm access(~tmp#0##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @alias1:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @alias1:nn:nn
    foreign c print_int(~tmp#1##0:wybe.int, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @alias1:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @alias1:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @alias1:nn:nn
    foreign llvm move(~p1##0:position.position, ?p2##0:position.position) @alias1:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'alias1'

source_filename = "!ROOT!/final-dump/alias1.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"--- Inside bar, after calling x(!p2, 555): \00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"--- Inside bar: \00", align 8
@"cstring#2" = private unnamed_addr constant [ ?? x i8 ] c"--- Inside baz, after calling x(!p1, 555): \00", align 8
@"cstring#3" = private unnamed_addr constant [ ?? x i8 ] c"--- Inside baz: \00", align 8
@"cstring#4" = private unnamed_addr constant [ ?? x i8 ] c"--- Inside foo, after calling x(!p1, 555): \00", align 8
@"cstring#5" = private unnamed_addr constant [ ?? x i8 ] c"--- Inside foo: \00", align 8
@"cstring#6" = private unnamed_addr constant [ ?? x i8 ] c"-------------- Calling bar: \00", align 8
@"cstring#7" = private unnamed_addr constant [ ?? x i8 ] c"-------------- Calling baz: \00", align 8
@"cstring#8" = private unnamed_addr constant [ ?? x i8 ] c"-------------- Calling foo: \00", align 8
@"cstring#9" = private unnamed_addr constant [ ?? x i8 ] c"expect p1(101,102):\00", align 8
@"cstring#10" = private unnamed_addr constant [ ?? x i8 ] c"expect p1(555,102):\00", align 8
@"cstring#11" = private unnamed_addr constant [ ?? x i8 ] c"expect p2(101,102):\00", align 8
@"cstring#12" = private unnamed_addr constant [ ?? x i8 ] c"expect p2(555,102):\00", align 8
@"cstring#13" = private unnamed_addr constant [ ?? x i8 ] c"expect p3(33333333,102):\00", align 8
@"cstring#14" = private unnamed_addr constant [ ?? x i8 ] c"random print\00", align 8
@"string#15" = private unnamed_addr constant {i64, i64} { i64 43, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#16" = private unnamed_addr constant {i64, i64} { i64 16, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8
@"string#17" = private unnamed_addr constant {i64, i64} { i64 43, i64 ptrtoint( ptr @"cstring#2" to i64 ) }, align 8
@"string#18" = private unnamed_addr constant {i64, i64} { i64 16, i64 ptrtoint( ptr @"cstring#3" to i64 ) }, align 8
@"string#19" = private unnamed_addr constant {i64, i64} { i64 43, i64 ptrtoint( ptr @"cstring#4" to i64 ) }, align 8
@"string#20" = private unnamed_addr constant {i64, i64} { i64 16, i64 ptrtoint( ptr @"cstring#5" to i64 ) }, align 8
@"string#21" = private unnamed_addr constant {i64, i64} { i64 28, i64 ptrtoint( ptr @"cstring#6" to i64 ) }, align 8
@"string#22" = private unnamed_addr constant {i64, i64} { i64 28, i64 ptrtoint( ptr @"cstring#7" to i64 ) }, align 8
@"string#23" = private unnamed_addr constant {i64, i64} { i64 28, i64 ptrtoint( ptr @"cstring#8" to i64 ) }, align 8
@"string#24" = private unnamed_addr constant {i64, i64} { i64 19, i64 ptrtoint( ptr @"cstring#9" to i64 ) }, align 8
@"string#25" = private unnamed_addr constant {i64, i64} { i64 19, i64 ptrtoint( ptr @"cstring#10" to i64 ) }, align 8
@"string#26" = private unnamed_addr constant {i64, i64} { i64 19, i64 ptrtoint( ptr @"cstring#11" to i64 ) }, align 8
@"string#27" = private unnamed_addr constant {i64, i64} { i64 19, i64 ptrtoint( ptr @"cstring#12" to i64 ) }, align 8
@"string#28" = private unnamed_addr constant {i64, i64} { i64 24, i64 ptrtoint( ptr @"cstring#13" to i64 ) }, align 8
@"string#29" = private unnamed_addr constant {i64, i64} { i64 12, i64 ptrtoint( ptr @"cstring#14" to i64 ) }, align 8

declare external fastcc void @"position.printPosition<0>"(i64)
declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"alias1.<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#23" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"alias1.foo<0>"()
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#21" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"alias1.bar<0>"()
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#22" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"alias1.baz<0>"()
  ret void
}

define external fastcc void @"alias1.bar<0>"() {
  %"tmp#13##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#3##0" = ptrtoint ptr %"tmp#13##0" to i64
  %"tmp#14##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 101, ptr %"tmp#14##0"
  %"tmp#15##0" = add i64 %"tmp#3##0", 8
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 102, ptr %"tmp#16##0"
  %"p2##0" = tail call fastcc i64 @"alias1.replicate<0>"(i64 %"tmp#3##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#16" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#24" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"tmp#3##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#26" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"p2##0")
  %"tmp#17##0" = inttoptr i64 %"p2##0" to ptr
  %"tmp#18##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#18##0", ptr %"tmp#17##0", i64 16, i1 0)
  %"tmp#19##0" = ptrtoint ptr %"tmp#18##0" to i64
  %"tmp#20##0" = inttoptr i64 %"tmp#19##0" to ptr
  store i64 555, ptr %"tmp#20##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#15" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#24" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"tmp#3##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#27" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"tmp#19##0")
  ret void
}

define external fastcc void @"alias1.baz<0>"() {
  %"tmp#20##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#5##0" = ptrtoint ptr %"tmp#20##0" to i64
  %"tmp#21##0" = inttoptr i64 %"tmp#5##0" to ptr
  store i64 101, ptr %"tmp#21##0"
  %"tmp#22##0" = add i64 %"tmp#5##0", 8
  %"tmp#23##0" = inttoptr i64 %"tmp#22##0" to ptr
  store i64 102, ptr %"tmp#23##0"
  %"p2##0" = tail call fastcc i64 @"alias1.replicate<0>"(i64 %"tmp#5##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#18" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#24" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"tmp#5##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#26" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"p2##0")
  %"tmp#24##0" = add i64 %"p2##0", 8
  %"tmp#25##0" = inttoptr i64 %"tmp#24##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#25##0"
  %"tmp#26##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#13##0" = ptrtoint ptr %"tmp#26##0" to i64
  %"tmp#27##0" = inttoptr i64 %"tmp#13##0" to ptr
  store i64 33333333, ptr %"tmp#27##0"
  %"tmp#28##0" = add i64 %"tmp#13##0", 8
  %"tmp#29##0" = inttoptr i64 %"tmp#28##0" to ptr
  store i64 %"tmp#2##0", ptr %"tmp#29##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#28" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"tmp#13##0")
  %"tmp#30##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#31##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#31##0", ptr %"tmp#30##0", i64 16, i1 0)
  %"tmp#32##0" = ptrtoint ptr %"tmp#31##0" to i64
  %"tmp#33##0" = inttoptr i64 %"tmp#32##0" to ptr
  store i64 555, ptr %"tmp#33##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#17" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#25" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"tmp#32##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#26" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"p2##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#28" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"tmp#13##0")
  ret void
}

define external fastcc void @"alias1.foo<0>"() {
  %"tmp#13##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#3##0" = ptrtoint ptr %"tmp#13##0" to i64
  %"tmp#14##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 101, ptr %"tmp#14##0"
  %"tmp#15##0" = add i64 %"tmp#3##0", 8
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 102, ptr %"tmp#16##0"
  %"p2##0" = tail call fastcc i64 @"alias1.replicate<0>"(i64 %"tmp#3##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#20" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#24" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"tmp#3##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#26" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"p2##0")
  %"tmp#17##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#18##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#18##0", ptr %"tmp#17##0", i64 16, i1 0)
  %"tmp#19##0" = ptrtoint ptr %"tmp#18##0" to i64
  %"tmp#20##0" = inttoptr i64 %"tmp#19##0" to ptr
  store i64 555, ptr %"tmp#20##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#19" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#25" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"tmp#19##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#26" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 %"p2##0")
  ret void
}

define external fastcc i64 @"alias1.replicate<0>"(i64 %"p1##0") {
  %"tmp#11##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#4##0" = ptrtoint ptr %"tmp#11##0" to i64
  %"tmp#12##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 0, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"tmp#4##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  store i64 0, ptr %"tmp#14##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#29" to i64 ))
  %"tmp#15##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#15##0"
  call ccc void @print_int(i64 %"tmp#1##0")
  call ccc void @putchar(i8 10)
  ret i64 %"p1##0"
}

--------------------------------------------------
 Module position
  representation  : (not a type)
  public submods  : position -> position.position
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : public use position.position
                    use wybe
  resources       : 
  submodules      : position.position
  procs           : 

proc printPosition > public (0 calls)
0: position.printPosition<0>
printPosition(pos##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(3,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []])),(9,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    wybe.string.print<0>(" (":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @position:nn:nn
    foreign lpvm access(pos##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @position:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @position:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @position:nn:nn
    wybe.string.print<0>[410bae77d3](1203:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @position:nn:nn
    foreign lpvm access(~pos##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#13##0:wybe.phantom) @position:nn:nn
    foreign c print_int(~tmp#1##0:wybe.int, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @position:nn:nn
    foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @position:nn:nn
    wybe.string.print<0>[410bae77d3](1191:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9 @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @position:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @position:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @position:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'position'

source_filename = "!ROOT!/final-dump/position.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c" (\00", align 8
@"string#1" = private unnamed_addr constant {i64, i64} { i64 2, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external fastcc void @"wybe.string.print<0>[410bae77d3]"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"position.printPosition<0>"(i64 %"pos##0") {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#1" to i64 ))
  %"tmp#23##0" = inttoptr i64 %"pos##0" to ptr
  %"tmp#0##0" = load i64, ptr %"tmp#23##0"
  call ccc void @print_int(i64 %"tmp#0##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1203)
  %"tmp#24##0" = add i64 %"pos##0", 8
  %"tmp#25##0" = inttoptr i64 %"tmp#24##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#25##0"
  call ccc void @print_int(i64 %"tmp#1##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1191)
  call ccc void @putchar(i8 10)
  ret void
}

--------------------------------------------------
 Module position.position
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: position.position.=<0>
=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



proc position > public {inline} (0 calls)
0: position.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:position.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:position.position) @position:nn:nn
    foreign lpvm mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~#rec##1:position.position, ?#result##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int) @position:nn:nn
proc position > public {inline} (6 calls)
1: position.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:position.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#result##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @position:nn:nn


proc x > public {inline} (0 calls)
0: position.position.x<0>
x(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
proc x > public {inline} (0 calls)
1: position.position.x<1>
x(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


proc y > public {inline} (0 calls)
0: position.position.y<0>
y(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
proc y > public {inline} (0 calls)
1: position.position.y<1>
y(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


proc ~= > public {inline} (0 calls)
0: position.position.~=<0>
~=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'position.position'

source_filename = "!ROOT!/final-dump/position.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"position.position.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#9##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#x##0" = load i64, ptr %"tmp#9##0"
  %"tmp#10##0" = add i64 %"#left##0", 8
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"#left#y##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#x##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#right##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#right#y##0" = load i64, ptr %"tmp#14##0"
  %"tmp#1##0" = icmp eq i64 %"#left#x##0", %"#right#x##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#15##0" = icmp eq i64 %"#left#y##0", %"#right#y##0"
  ret i1 %"tmp#15##0"
if.else.0:
  ret i1 0
}

define external fastcc i64 @"position.position.position<0>"(i64 %"x##0", i64 %"y##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"x##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"y##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64} @"position.position.position<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#6##0" = insertvalue {i64, i64} %"tmp#5##0", i64 %"tmp#4##0", 1
  ret {i64, i64} %"tmp#6##0"
}

define external fastcc i64 @"position.position.x<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"position.position.x<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"position.position.y<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"position.position.y<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i1 @"position.position.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#8##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#8##0"
  %"tmp#9##0" = add i64 %"#left##0", 8
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#10##0"
  %"tmp#11##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"#right##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#13##0"
  %"tmp#7##0" = icmp eq i64 %"tmp#3##0", %"tmp#5##0"
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#0##0" = icmp eq i64 %"tmp#4##0", %"tmp#6##0"
  %"tmp#14##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = xor i1 0, 1
  ret i1 %"tmp#15##0"
}

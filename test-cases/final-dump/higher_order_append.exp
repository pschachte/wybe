======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module higher_order_append
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : higher_order_append.<0>
  constants       : 0:: StructInfo {structSize = 8, structData = [FnPointerStructMember higher_order_append.print_list_of_ints#closure#1<0>]}
                    1:: StructInfo {structSize = 16, structData = [IntStructMember 3 8,IntStructMember 0 8]}
                    2:: StructInfo {structSize = 16, structData = [IntStructMember 2 8,IntStructMember 0 8]}
                    3:: StructInfo {structSize = 16, structData = [PointerStructMember higher_order_append#constant#1,IntStructMember 0 8]}
                    4:: StructInfo {structSize = 16, structData = [IntStructMember 1 8,IntStructMember 0 8]}
                    5:: StructInfo {structSize = 16, structData = [PointerStructMember higher_order_append#constant#2,PointerStructMember higher_order_append#constant#3]}
                    6:: StructInfo {structSize = 16, structData = [PointerStructMember higher_order_append#constant#4,PointerStructMember higher_order_append#constant#5]}
                    7:: StructInfo {structSize = 16, structData = [IntStructMember 6 8,IntStructMember 0 8]}
                    8:: StructInfo {structSize = 16, structData = [IntStructMember 4 8,PointerStructMember higher_order_append#constant#7]}
                    9:: StructInfo {structSize = 16, structData = [FnPointerStructMember higher_order_append.#anon#1<1>,GenericStructMember (PointerStructMember higher_order_append#constant#8)]}
                    10:: StructInfo {structSize = 8, structData = [FnPointerStructMember higher_order_append.#closure#1<0>]}
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: higher_order_append.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.list.map<1>(higher_order_append.#anon#1<1><higher_order_append#constant#8>:(wybe.list(wybe.int), ?wybe.list(wybe.int)), higher_order_append#constant#6:wybe.list(wybe.list(wybe.int)), outByReference y##0:wybe.list(wybe.list(wybe.int))) #13 @higher_order_append:nn:nn
    wybe.list.print<0>(higher_order_append.#closure#1<0><>:{resource}(T), higher_order_append#constant#6:wybe.list(T))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0, 1}> #16 @higher_order_append:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#49##0:wybe.phantom) @higher_order_append:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#49##0:wybe.phantom, ?tmp#50##0:wybe.phantom) @higher_order_append:nn:nn
    foreign lpvm store(~%tmp#50##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @higher_order_append:nn:nn
    wybe.list.print<0>(higher_order_append.#closure#1<0><>:{resource}(T), ~y##0:wybe.list(T))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0, 1}> #17 @higher_order_append:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#53##0:wybe.phantom) @higher_order_append:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#53##0:wybe.phantom, ?tmp#54##0:wybe.phantom) @higher_order_append:nn:nn
    foreign lpvm store(~%tmp#54##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @higher_order_append:nn:nn


proc #anon#1 > {inline} (1 calls)
0: higher_order_append.#anon#1<0>
#anon#1(^cons##0:wybe.list(wybe.int), anon#1#1##0:wybe.list(wybe.int), ?anon#1#2##0:wybe.list(wybe.int))<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    higher_order_append.append<0>(~anon#1#1##0:wybe.list(wybe.int), ~cons##0:wybe.list(wybe.int), outByReference anon#1#2##0:wybe.list(wybe.int)) #0 @higher_order_append:nn:nn
proc #anon#1 > {inline} (1 calls)
1: higher_order_append.#anon#1<1>
#anon#1(^cons##0:wybe.list(wybe.int), anon#1#1##0:wybe.list(wybe.int), ?anon#1#2##0:wybe.list(wybe.int))<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    higher_order_append.append<0>(~anon#1#1##0:wybe.list(wybe.int), ~^cons##0:wybe.list(wybe.int), outByReference anon#1#2##0:wybe.list(wybe.int)) #1 @higher_order_append:nn:nn


proc #closure#1 > {inline} (2 calls)
0: higher_order_append.#closure#1<0>
#closure#1(l##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.list.print<0>(higher_order_append.print_list_of_ints#closure#1<0><>:{resource}(wybe.int), ~l##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0, 1}> #1 @higher_order_append:nn:nn


proc append > (2 calls)
0: higher_order_append.append<0>
append(front##0:wybe.list(wybe.int), back##0:wybe.list(wybe.int), outByReference result##0:wybe.list(wybe.int))<{}; {}; {}>:
  AliasPairs: [(back##0,result##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(higher_order_append.append<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(front##0:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.bool) @higher_order_append:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        foreign llvm move(~back##0:wybe.list(wybe.int), ?result##0:wybe.list(wybe.int)) @higher_order_append:nn:nn

    1:
        foreign lpvm access(front##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @higher_order_append:nn:nn
        foreign lpvm access(~front##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:wybe.list(wybe.int)) @higher_order_append:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#6##0:wybe.list(T)) @higher_order_append:nn:nn
        foreign lpvm mutate(~tmp#6##0:wybe.list(T), ?tmp#7##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @higher_order_append:nn:nn
        higher_order_append.append<0>(~t##0:wybe.list(wybe.int), ~back##0:wybe.list(wybe.int), outByReference tail##0:wybe.list(wybe.int)) #1 @higher_order_append:nn:nn
        foreign lpvm mutate(~tmp#7##0:wybe.list(T), ?result##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail##0:wybe.list(T)) @higher_order_append:nn:nn



proc print_list_of_ints > {inline} (1 calls)
0: higher_order_append.print_list_of_ints<0>
print_list_of_ints(l##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.list.print<0>(higher_order_append.print_list_of_ints#closure#1<0><>:{resource}(wybe.int), ~l##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0, 1}> #0 @higher_order_append:nn:nn


proc print_list_of_ints#closure#1 > {inline} (1 calls)
0: higher_order_append.print_list_of_ints#closure#1<0>
print_list_of_ints#closure#1(x##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~x##0:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'higher_order_append'

source_filename = "!ROOT!/final-dump/higher_order_append.wybe"
target triple    ????

@"higher_order_append#constant#0" = private unnamed_addr constant {ptr} { ptr @"higher_order_append.print_list_of_ints#closure#1<0>" }, align 8
@"higher_order_append#constant#1" = private unnamed_addr constant {i64, i64} { i64 3, i64 0 }, align 8
@"higher_order_append#constant#2" = private unnamed_addr constant {i64, i64} { i64 2, i64 0 }, align 8
@"higher_order_append#constant#3" = private unnamed_addr constant {ptr, i64} { ptr @"higher_order_append#constant#1", i64 0 }, align 8
@"higher_order_append#constant#4" = private unnamed_addr constant {i64, i64} { i64 1, i64 0 }, align 8
@"higher_order_append#constant#5" = private unnamed_addr constant {ptr, ptr} { ptr @"higher_order_append#constant#2", ptr @"higher_order_append#constant#3" }, align 8
@"higher_order_append#constant#6" = private unnamed_addr constant {ptr, ptr} { ptr @"higher_order_append#constant#4", ptr @"higher_order_append#constant#5" }, align 8
@"higher_order_append#constant#7" = private unnamed_addr constant {i64, i64} { i64 6, i64 0 }, align 8
@"higher_order_append#constant#8" = private unnamed_addr constant {i64, ptr} { i64 4, ptr @"higher_order_append#constant#7" }, align 8
@"higher_order_append#constant#9" = private unnamed_addr constant {ptr, i64} { ptr @"higher_order_append.#anon#1<1>", i64 ptrtoint( ptr @"higher_order_append#constant#8" to i64 ) }, align 8
@"higher_order_append#constant#10" = private unnamed_addr constant {ptr} { ptr @"higher_order_append.#closure#1<0>" }, align 8

declare external fastcc void @"wybe.list.map<1>"(i64, i64, ptr)
declare external fastcc void @"wybe.list.print<0>"(i64, i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"higher_order_append.<0>"() {
  %"tmp#55##0" = alloca i8, i64 8, align 8
  call fastcc void @"wybe.list.map<1>"(i64 ptrtoint( ptr @"higher_order_append#constant#9" to i64 ), i64 ptrtoint( ptr @"higher_order_append#constant#6" to i64 ), ptr %"tmp#55##0")
  %"y##0" = load i64, ptr %"tmp#55##0"
  call fastcc void @"wybe.list.print<0>"(i64 ptrtoint( ptr @"higher_order_append#constant#10" to i64 ), i64 ptrtoint( ptr @"higher_order_append#constant#6" to i64 ))
  call ccc void @putchar(i8 10)
  call fastcc void @"wybe.list.print<0>"(i64 ptrtoint( ptr @"higher_order_append#constant#10" to i64 ), i64 %"y##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i64 @"higher_order_append.#anon#1<0>"(i64 %"cons##0", i64 %"anon#1#1##0") {
  %"tmp#15##0" = alloca i8, i64 8, align 8
  call fastcc void @"higher_order_append.append<0>"(i64 %"anon#1#1##0", i64 %"cons##0", ptr %"tmp#15##0")
  %"tmp#16##0" = load i64, ptr %"tmp#15##0"
  ret i64 %"tmp#16##0"
}

define external fastcc i64 @"higher_order_append.#anon#1<1>"(i64 %"#env##0", i64 %"generic#anon#1#1##0") {
  %"tmp#2##0" = add i64 %"#env##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"generic#cons##0" = load i64, ptr %"tmp#3##0"
  %"tmp#4##0" = alloca i8, i64 8, align 8
  call fastcc void @"higher_order_append.append<0>"(i64 %"generic#anon#1#1##0", i64 %"generic#cons##0", ptr %"tmp#4##0")
  %"anon#1#2##0" = load i64, ptr %"tmp#4##0"
  ret i64 %"anon#1#2##0"
}

define external fastcc void @"higher_order_append.#closure#1<0>"(i64 %"#env##0", i64 %"generic#l##0") {
  tail call fastcc void @"wybe.list.print<0>"(i64 ptrtoint( ptr @"higher_order_append#constant#0" to i64 ), i64 %"generic#l##0")
  ret void
}

define external fastcc void @"higher_order_append.append<0>"(i64 %"front##0", i64 %"back##0", ptr %"tmp#8##0") {
  %"tmp#3##0" = icmp ne i64 %"front##0", 0
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#9##0" = inttoptr i64 %"front##0" to ptr
  %"h##0" = load i64, ptr %"tmp#9##0"
  %"tmp#10##0" = add i64 %"front##0", 8
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"t##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#6##0" = ptrtoint ptr %"tmp#12##0" to i64
  %"tmp#13##0" = inttoptr i64 %"tmp#6##0" to ptr
  store i64 %"h##0", ptr %"tmp#13##0"
  store i64 %"tmp#6##0", ptr %"tmp#8##0"
  %"tmp#14##0" = add i64 %"tmp#6##0", 8
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  musttail call fastcc void @"higher_order_append.append<0>"(i64 %"t##0", i64 %"back##0", ptr %"tmp#15##0")
  ret void
if.else.0:
  store i64 %"back##0", ptr %"tmp#8##0"
  ret void
}

define external fastcc void @"higher_order_append.print_list_of_ints<0>"(i64 %"l##0") {
  tail call fastcc void @"wybe.list.print<0>"(i64 ptrtoint( ptr @"higher_order_append#constant#0" to i64 ), i64 %"l##0")
  ret void
}

define external fastcc void @"higher_order_append.print_list_of_ints#closure#1<0>"(i64 %"#env##0", i64 %"generic#x##0") {
  call ccc void @print_int(i64 %"generic#x##0")
  ret void
}

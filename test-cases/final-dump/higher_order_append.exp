======================================================================
AFTER EVERYTHING:
 Module higher_order_append
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : higher_order_append.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: higher_order_append.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#17##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#17##0:wybe.list(T), ?tmp#18##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#18##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#21##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#21##0:wybe.list(T), ?tmp#22##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#22##0:wybe.list(T), ?tmp#4##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#25##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#25##0:wybe.list(T), ?tmp#26##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#26##0:wybe.list(T), ?tmp#7##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#29##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#29##0:wybe.list(T), ?tmp#30##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#7##0:T) @list:nn:nn
    foreign lpvm mutate(~tmp#30##0:wybe.list(T), ?tmp#6##0:wybe.list(wybe.list(wybe.int)), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#33##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#33##0:wybe.list(T), ?tmp#34##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#4##0:T) @list:nn:nn
    foreign lpvm mutate(~tmp#34##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.list(wybe.int)), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#37##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#37##0:wybe.list(T), ?tmp#38##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:T) @list:nn:nn
    foreign lpvm mutate(~tmp#38##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.list(wybe.int)), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#41##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#41##0:wybe.list(T), ?tmp#42##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 6:T) @list:nn:nn
    foreign lpvm mutate(~tmp#42##0:wybe.list(T), ?tmp#11##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#45##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#45##0:wybe.list(T), ?tmp#46##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#46##0:wybe.list(T), ?tmp#10##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#11##0:wybe.list(T)) @list:nn:nn
    wybe.list.map<1>(higher_order_append.#anon#1<1><tmp#10##0:wybe.list(wybe.int)>:(wybe.list(wybe.int), ?wybe.list(wybe.int)), tmp#0##0:wybe.list(wybe.list(wybe.int)), outByReference y##0:wybe.list(wybe.list(wybe.int))) #13 @higher_order_append:nn:nn
    wybe.list.print<0>(higher_order_append.#closure#1<0><>:{resource}(T), ~tmp#0##0:wybe.list(T))<Everything; Everything> #16 @list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#49##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#49##0:wybe.phantom, ?tmp#50##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#50##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.list.print<0>(higher_order_append.#closure#1<0><>:{resource}(T), ~y##0:wybe.list(T))<Everything; Everything> #17 @list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#53##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#53##0:wybe.phantom, ?tmp#54##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#54##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


#anon#1 > {inline} (1 calls)
0: higher_order_append.#anon#1<0>
#anon#1(^cons##0:wybe.list(wybe.int), anon#1#1##0:wybe.list(wybe.int), ?anon#1#2##0:wybe.list(wybe.int))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    higher_order_append.append<0>(~anon#1#1##0:wybe.list(wybe.int), ~cons##0:wybe.list(wybe.int), outByReference anon#1#2##0:wybe.list(wybe.int)) #0 @higher_order_append:nn:nn
#anon#1 > {inline} (1 calls)
1: higher_order_append.#anon#1<1>
#anon#1(^cons##0:wybe.list(wybe.int), anon#1#1##0:wybe.list(wybe.int), ?anon#1#2##0:wybe.list(wybe.int))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    higher_order_append.append<0>(~anon#1#1##0:wybe.list(wybe.int), ~^cons##0:wybe.list(wybe.int), outByReference anon#1#2##0:wybe.list(wybe.int)) #1 @higher_order_append:nn:nn


#closure#1 > {inline} (2 calls)
0: higher_order_append.#closure#1<0>
#closure#1(l##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.list.print<0>(higher_order_append.print_list_of_ints#closure#1<0><>:{resource}(wybe.int), ~l##0:wybe.list(wybe.int))<Everything; Everything> #1 @higher_order_append:nn:nn


append > (2 calls)
0: higher_order_append.append<0>
append(front##0:wybe.list(wybe.int), back##0:wybe.list(wybe.int), outByReference result##0:wybe.list(wybe.int))<{}; {}>:
  AliasPairs: [(back##0,result##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(higher_order_append.append<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(front##0:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.bool)
    case ~tmp#3##0:wybe.bool of
    0:
        foreign llvm move(~back##0:wybe.list(wybe.int), ?result##0:wybe.list(wybe.int)) @higher_order_append:nn:nn

    1:
        foreign lpvm access(front##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @list:nn:nn
        foreign lpvm access(~front##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:wybe.list(wybe.int)) @list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#6##0:wybe.list(T)) @list:nn:nn
        foreign lpvm mutate(~tmp#6##0:wybe.list(T), ?tmp#7##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @list:nn:nn
        higher_order_append.append<0>(~t##0:wybe.list(wybe.int), ~back##0:wybe.list(wybe.int), outByReference tail##0:wybe.list(wybe.int)) #1 @higher_order_append:nn:nn
        foreign lpvm mutate(~tmp#7##0:wybe.list(T), ?result##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail##0:wybe.list(T)) @list:nn:nn



print_list_of_ints > {inline} (1 calls)
0: higher_order_append.print_list_of_ints<0>
print_list_of_ints(l##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.list.print<0>(higher_order_append.print_list_of_ints#closure#1<0><>:{resource}(wybe.int), ~l##0:wybe.list(wybe.int))<Everything; Everything> #0 @higher_order_append:nn:nn


print_list_of_ints#closure#1 > {inline} (1 calls)
0: higher_order_append.print_list_of_ints#closure#1<0>
print_list_of_ints#closure#1(x##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~x##0:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn

  LLVM code       :

; ModuleID = 'higher_order_append'


 


@higher_order_append.0 =    constant [1 x i64] [i64 ptrtoint (void (i64, i64)* @"higher_order_append.#closure#1<0>" to i64)]


@higher_order_append.1 =    constant [1 x i64] [i64 ptrtoint (void (i64, i64)* @"higher_order_append.print_list_of_ints#closure#1<0>" to i64)]


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.list.print<0>"(i64, i64)    


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.list.map<1>"(i64, i64, i64*)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"higher_order_append.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 1, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 0, i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 2, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 0, i64* %11 
  %12 = trunc i64 16 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 3, i64* %15 
  %16 = add   i64 %14, 8 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 0, i64* %17 
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 %14, i64* %21 
  %22 = add   i64 %20, 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 0, i64* %23 
  %24 = trunc i64 16 to i32  
  %25 = tail call ccc  i8*  @wybe_malloc(i32  %24)  
  %26 = ptrtoint i8* %25 to i64 
  %27 = inttoptr i64 %26 to i64* 
  store  i64 %8, i64* %27 
  %28 = add   i64 %26, 8 
  %29 = inttoptr i64 %28 to i64* 
  store  i64 %20, i64* %29 
  %30 = trunc i64 16 to i32  
  %31 = tail call ccc  i8*  @wybe_malloc(i32  %30)  
  %32 = ptrtoint i8* %31 to i64 
  %33 = inttoptr i64 %32 to i64* 
  store  i64 %2, i64* %33 
  %34 = add   i64 %32, 8 
  %35 = inttoptr i64 %34 to i64* 
  store  i64 %26, i64* %35 
  %36 = trunc i64 16 to i32  
  %37 = tail call ccc  i8*  @wybe_malloc(i32  %36)  
  %38 = ptrtoint i8* %37 to i64 
  %39 = inttoptr i64 %38 to i64* 
  store  i64 6, i64* %39 
  %40 = add   i64 %38, 8 
  %41 = inttoptr i64 %40 to i64* 
  store  i64 0, i64* %41 
  %42 = trunc i64 16 to i32  
  %43 = tail call ccc  i8*  @wybe_malloc(i32  %42)  
  %44 = ptrtoint i8* %43 to i64 
  %45 = inttoptr i64 %44 to i64* 
  store  i64 4, i64* %45 
  %46 = add   i64 %44, 8 
  %47 = inttoptr i64 %46 to i64* 
  store  i64 %38, i64* %47 
  %48 = trunc i64 16 to i32  
  %49 = tail call ccc  i8*  @wybe_malloc(i32  %48)  
  %50 = ptrtoint i8* %49 to i64 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  store  i64 ptrtoint (i64 (i64, i64)* @"higher_order_append.#anon#1<1>" to i64), i64* %52 
  %53 = getelementptr  i64, i64* %51, i64 1 
  store  i64 %44, i64* %53 
  %54 = alloca i64 
   call fastcc  void  @"wybe.list.map<1>"(i64  %50, i64  %32, i64*  %54)  
  %55 = load  i64, i64* %54 
  tail call fastcc  void  @"wybe.list.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_append.0, i32 0, i32 0) to i64), i64  %32)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.list.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_append.0, i32 0, i32 0) to i64), i64  %55)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"higher_order_append.#anon#1<0>"(i64  %"cons##0", i64  %"anon#1#1##0") alwaysinline   {
entry:
  %0 = alloca i64 
   call fastcc  void  @"higher_order_append.append<0>"(i64  %"anon#1#1##0", i64  %"cons##0", i64*  %0)  
  %1 = load  i64, i64* %0 
  ret i64 %1 
}


define external fastcc  i64 @"higher_order_append.#anon#1<1>"(i64  %"#env##0", i64  %"anon#1#1##0") alwaysinline   {
entry:
  %0 = add   i64 %"#env##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  %3 = alloca i64 
   call fastcc  void  @"higher_order_append.append<0>"(i64  %"anon#1#1##0", i64  %2, i64*  %3)  
  %4 = load  i64, i64* %3 
  ret i64 %4 
}


define external fastcc  void @"higher_order_append.#closure#1<0>"(i64  %"#env##0", i64  %"l##0") alwaysinline   {
entry:
  musttail call fastcc  void  @"wybe.list.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_append.1, i32 0, i32 0) to i64), i64  %"l##0")  
  ret void 
}


define external fastcc  void @"higher_order_append.append<0>"(i64  %"front##0", i64  %"back##0", i64*  %"result##0")    {
entry:
  %0 = icmp ne i64 %"front##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"front##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"front##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %2, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %8, i64* %"result##0" 
  musttail call fastcc  void  @"higher_order_append.append<0>"(i64  %5, i64  %"back##0", i64*  %11)  
  ret void 
if.else:
  store  i64 %"back##0", i64* %"result##0" 
  ret void 
}


define external fastcc  void @"higher_order_append.print_list_of_ints<0>"(i64  %"l##0") alwaysinline   {
entry:
  tail call fastcc  void  @"wybe.list.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_append.1, i32 0, i32 0) to i64), i64  %"l##0")  
  ret void 
}


define external fastcc  void @"higher_order_append.print_list_of_ints#closure#1<0>"(i64  %"#env##0", i64  %"x##0") alwaysinline   {
entry:
  tail call ccc  void  @print_int(i64  %"x##0")  
  ret void 
}

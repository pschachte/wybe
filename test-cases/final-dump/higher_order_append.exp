======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module higher_order_append
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : higher_order_append.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: higher_order_append.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#17##0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#17##0:wybe.list(T), ?tmp#18##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#18##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#21##0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#21##0:wybe.list(T), ?tmp#22##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#22##0:wybe.list(T), ?tmp#4##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#25##0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#25##0:wybe.list(T), ?tmp#26##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#26##0:wybe.list(T), ?tmp#7##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#29##0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#29##0:wybe.list(T), ?tmp#30##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#7##0:T) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#30##0:wybe.list(T), ?tmp#6##0:wybe.list(wybe.list(wybe.int)), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#33##0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#33##0:wybe.list(T), ?tmp#34##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#4##0:T) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#34##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.list(wybe.int)), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#37##0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#37##0:wybe.list(T), ?tmp#38##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:T) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#38##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.list(wybe.int)), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#41##0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#41##0:wybe.list(T), ?tmp#42##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 6:T) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#42##0:wybe.list(T), ?tmp#11##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#45##0:wybe.list(T)) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#45##0:wybe.list(T), ?tmp#46##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @higher_order_append:nn:nn
    foreign lpvm mutate(~tmp#46##0:wybe.list(T), ?tmp#10##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#11##0:wybe.list(T)) @higher_order_append:nn:nn
    wybe.list.map<1>(higher_order_append.#anon#1<1><tmp#10##0:wybe.list(wybe.int)>:(wybe.list(wybe.int), ?wybe.list(wybe.int)), tmp#0##0:wybe.list(wybe.list(wybe.int)), outByReference y##0:wybe.list(wybe.list(wybe.int))) #13 @higher_order_append:nn:nn
    wybe.list.print<0>(higher_order_append.#closure#1<0><>:{resource}(T), ~tmp#0##0:wybe.list(T))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0, 1}> #16 @higher_order_append:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#49##0:wybe.phantom) @higher_order_append:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#49##0:wybe.phantom, ?tmp#50##0:wybe.phantom) @higher_order_append:nn:nn
    foreign lpvm store(~%tmp#50##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @higher_order_append:nn:nn
    wybe.list.print<0>(higher_order_append.#closure#1<0><>:{resource}(T), ~y##0:wybe.list(T))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0, 1}> #17 @higher_order_append:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#53##0:wybe.phantom) @higher_order_append:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#53##0:wybe.phantom, ?tmp#54##0:wybe.phantom) @higher_order_append:nn:nn
    foreign lpvm store(~%tmp#54##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @higher_order_append:nn:nn


proc #anon#1 > {inline} (1 calls)
0: higher_order_append.#anon#1<0>
#anon#1(^cons##0:wybe.list(wybe.int), anon#1#1##0:wybe.list(wybe.int), ?anon#1#2##0:wybe.list(wybe.int))<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    higher_order_append.append<0>(~anon#1#1##0:wybe.list(wybe.int), ~cons##0:wybe.list(wybe.int), outByReference anon#1#2##0:wybe.list(wybe.int)) #0 @higher_order_append:nn:nn
proc #anon#1 > {inline} (1 calls)
1: higher_order_append.#anon#1<1>
#anon#1(^cons##0:wybe.list(wybe.int), anon#1#1##0:wybe.list(wybe.int), ?anon#1#2##0:wybe.list(wybe.int))<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    higher_order_append.append<0>(~anon#1#1##0:wybe.list(wybe.int), ~^cons##0:wybe.list(wybe.int), outByReference anon#1#2##0:wybe.list(wybe.int)) #1 @higher_order_append:nn:nn


proc #closure#1 > {inline} (2 calls)
0: higher_order_append.#closure#1<0>
#closure#1(l##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.list.print<0>(higher_order_append.print_list_of_ints#closure#1<0><>:{resource}(wybe.int), ~l##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0, 1}> #1 @higher_order_append:nn:nn


proc append > (2 calls)
0: higher_order_append.append<0>
append(front##0:wybe.list(wybe.int), back##0:wybe.list(wybe.int), outByReference result##0:wybe.list(wybe.int))<{}; {}; {}>:
  AliasPairs: [(back##0,result##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(higher_order_append.append<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(front##0:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.bool) @higher_order_append:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        foreign llvm move(~back##0:wybe.list(wybe.int), ?result##0:wybe.list(wybe.int)) @higher_order_append:nn:nn

    1:
        foreign lpvm access(front##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @higher_order_append:nn:nn
        foreign lpvm access(~front##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:wybe.list(wybe.int)) @higher_order_append:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#6##0:wybe.list(T)) @higher_order_append:nn:nn
        foreign lpvm mutate(~tmp#6##0:wybe.list(T), ?tmp#7##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @higher_order_append:nn:nn
        higher_order_append.append<0>(~t##0:wybe.list(wybe.int), ~back##0:wybe.list(wybe.int), outByReference tail##0:wybe.list(wybe.int)) #1 @higher_order_append:nn:nn
        foreign lpvm mutate(~tmp#7##0:wybe.list(T), ?result##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail##0:wybe.list(T)) @higher_order_append:nn:nn



proc print_list_of_ints > {inline} (1 calls)
0: higher_order_append.print_list_of_ints<0>
print_list_of_ints(l##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.list.print<0>(higher_order_append.print_list_of_ints#closure#1<0><>:{resource}(wybe.int), ~l##0:wybe.list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {0, 1}> #0 @higher_order_append:nn:nn


proc print_list_of_ints#closure#1 > {inline} (1 calls)
0: higher_order_append.print_list_of_ints#closure#1<0>
print_list_of_ints#closure#1(x##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~x##0:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'higher_order_append'

source_filename = "!ROOT!/final-dump/higher_order_append.wybe"
target triple    ????

@"closure#0" = private unnamed_addr constant {ptr} { ptr @"higher_order_append.#closure#1<0>" }, align 8
@"closure#1" = private unnamed_addr constant {ptr} { ptr @"higher_order_append.print_list_of_ints#closure#1<0>" }, align 8

declare external fastcc void @"wybe.list.map<1>"(i64, i64, ptr)
declare external fastcc void @"wybe.list.print<0>"(i64, i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"higher_order_append.<0>"() {
  %"tmp#55##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#17##0" = ptrtoint ptr %"tmp#55##0" to i64
  %"tmp#56##0" = inttoptr i64 %"tmp#17##0" to ptr
  store i64 1, ptr %"tmp#56##0"
  %"tmp#57##0" = add i64 %"tmp#17##0", 8
  %"tmp#58##0" = inttoptr i64 %"tmp#57##0" to ptr
  store i64 0, ptr %"tmp#58##0"
  %"tmp#59##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#21##0" = ptrtoint ptr %"tmp#59##0" to i64
  %"tmp#60##0" = inttoptr i64 %"tmp#21##0" to ptr
  store i64 2, ptr %"tmp#60##0"
  %"tmp#61##0" = add i64 %"tmp#21##0", 8
  %"tmp#62##0" = inttoptr i64 %"tmp#61##0" to ptr
  store i64 0, ptr %"tmp#62##0"
  %"tmp#63##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#25##0" = ptrtoint ptr %"tmp#63##0" to i64
  %"tmp#64##0" = inttoptr i64 %"tmp#25##0" to ptr
  store i64 3, ptr %"tmp#64##0"
  %"tmp#65##0" = add i64 %"tmp#25##0", 8
  %"tmp#66##0" = inttoptr i64 %"tmp#65##0" to ptr
  store i64 0, ptr %"tmp#66##0"
  %"tmp#67##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#29##0" = ptrtoint ptr %"tmp#67##0" to i64
  %"tmp#68##0" = inttoptr i64 %"tmp#29##0" to ptr
  store i64 %"tmp#25##0", ptr %"tmp#68##0"
  %"tmp#69##0" = add i64 %"tmp#29##0", 8
  %"tmp#70##0" = inttoptr i64 %"tmp#69##0" to ptr
  store i64 0, ptr %"tmp#70##0"
  %"tmp#71##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#33##0" = ptrtoint ptr %"tmp#71##0" to i64
  %"tmp#72##0" = inttoptr i64 %"tmp#33##0" to ptr
  store i64 %"tmp#21##0", ptr %"tmp#72##0"
  %"tmp#73##0" = add i64 %"tmp#33##0", 8
  %"tmp#74##0" = inttoptr i64 %"tmp#73##0" to ptr
  store i64 %"tmp#29##0", ptr %"tmp#74##0"
  %"tmp#75##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#37##0" = ptrtoint ptr %"tmp#75##0" to i64
  %"tmp#76##0" = inttoptr i64 %"tmp#37##0" to ptr
  store i64 %"tmp#17##0", ptr %"tmp#76##0"
  %"tmp#77##0" = add i64 %"tmp#37##0", 8
  %"tmp#78##0" = inttoptr i64 %"tmp#77##0" to ptr
  store i64 %"tmp#33##0", ptr %"tmp#78##0"
  %"tmp#79##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#41##0" = ptrtoint ptr %"tmp#79##0" to i64
  %"tmp#80##0" = inttoptr i64 %"tmp#41##0" to ptr
  store i64 6, ptr %"tmp#80##0"
  %"tmp#81##0" = add i64 %"tmp#41##0", 8
  %"tmp#82##0" = inttoptr i64 %"tmp#81##0" to ptr
  store i64 0, ptr %"tmp#82##0"
  %"tmp#83##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#45##0" = ptrtoint ptr %"tmp#83##0" to i64
  %"tmp#84##0" = inttoptr i64 %"tmp#45##0" to ptr
  store i64 4, ptr %"tmp#84##0"
  %"tmp#85##0" = add i64 %"tmp#45##0", 8
  %"tmp#86##0" = inttoptr i64 %"tmp#85##0" to ptr
  store i64 %"tmp#41##0", ptr %"tmp#86##0"
  %"tmp#87##0" = alloca i8, i64 8, align 8
  %"tmp#89##0" = call ccc ptr @wybe_malloc(i32 16)
  store ptr @"higher_order_append.#anon#1<1>", ptr %"tmp#89##0"
  %"tmp#90##0" = ptrtoint ptr %"tmp#89##0" to i64
  %"tmp#91##0" = add i64 %"tmp#90##0", 8
  %"tmp#92##0" = inttoptr i64 %"tmp#91##0" to ptr
  store ptr @"higher_order_append.#anon#1<1>", ptr %"tmp#92##0"
  %"tmp#88##0" = ptrtoint ptr %"tmp#89##0" to i64
  call fastcc void @"wybe.list.map<1>"(i64 %"tmp#88##0", i64 %"tmp#37##0", ptr %"tmp#87##0")
  %"y##0" = load i64, ptr %"tmp#87##0"
  call fastcc void @"wybe.list.print<0>"(i64 ptrtoint( ptr @"closure#0" to i64 ), i64 %"tmp#37##0")
  call ccc void @putchar(i8 10)
  call fastcc void @"wybe.list.print<0>"(i64 ptrtoint( ptr @"closure#0" to i64 ), i64 %"y##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i64 @"higher_order_append.#anon#1<0>"(i64 %"cons##0", i64 %"anon#1#1##0") {
  %"tmp#15##0" = alloca i8, i64 8, align 8
  call fastcc void @"higher_order_append.append<0>"(i64 %"anon#1#1##0", i64 %"cons##0", ptr %"tmp#15##0")
  %"tmp#16##0" = load i64, ptr %"tmp#15##0"
  ret i64 %"tmp#16##0"
}

define external fastcc i64 @"higher_order_append.#anon#1<1>"(i64 %"#env##0", i64 %"generic#anon#1#1##0") {
  %"tmp#2##0" = add i64 %"#env##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"generic#cons##0" = load i64, ptr %"tmp#3##0"
  %"tmp#4##0" = alloca i8, i64 8, align 8
  call fastcc void @"higher_order_append.append<0>"(i64 %"generic#anon#1#1##0", i64 %"generic#cons##0", ptr %"tmp#4##0")
  %"anon#1#2##0" = load i64, ptr %"tmp#4##0"
  ret i64 %"anon#1#2##0"
}

define external fastcc void @"higher_order_append.#closure#1<0>"(i64 %"#env##0", i64 %"generic#l##0") {
  tail call fastcc void @"wybe.list.print<0>"(i64 ptrtoint( ptr @"closure#1" to i64 ), i64 %"generic#l##0")
  ret void
}

define external fastcc void @"higher_order_append.append<0>"(i64 %"front##0", i64 %"back##0", ptr %"tmp#8##0") {
  %"tmp#3##0" = icmp ne i64 %"front##0", 0
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#9##0" = inttoptr i64 %"front##0" to ptr
  %"h##0" = load i64, ptr %"tmp#9##0"
  %"tmp#10##0" = add i64 %"front##0", 8
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"t##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#6##0" = ptrtoint ptr %"tmp#12##0" to i64
  %"tmp#13##0" = inttoptr i64 %"tmp#6##0" to ptr
  store i64 %"h##0", ptr %"tmp#13##0"
  store i64 %"tmp#6##0", ptr %"tmp#8##0"
  %"tmp#14##0" = add i64 %"tmp#6##0", 8
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  musttail call fastcc void @"higher_order_append.append<0>"(i64 %"t##0", i64 %"back##0", ptr %"tmp#15##0")
  ret void
if.else.0:
  store i64 %"back##0", ptr %"tmp#8##0"
  ret void
}

define external fastcc void @"higher_order_append.print_list_of_ints<0>"(i64 %"l##0") {
  tail call fastcc void @"wybe.list.print<0>"(i64 ptrtoint( ptr @"closure#1" to i64 ), i64 %"l##0")
  ret void
}

define external fastcc void @"higher_order_append.print_list_of_ints#closure#1<0>"(i64 %"#env##0", i64 %"generic#x##0") {
  call ccc void @print_int(i64 %"generic#x##0")
  ret void
}

# transitive aliasing data structures in recursive def calls {

use position

# Expected Alias Pairs: [(0,1))]
pub def updateY(p1:position, ?p2:position) use !io {
    if { p1^y > 901 :: ?p2 = p1
       | else      :: ?tmp = p1^y
                 y(!p1, tmp + 1)
                 !updateX(p1, ?p2)
    }
}

# Expected Alias Pairs: [(0,1))]
pub def updateX(p1:position, ?p2:position) use !io {
    if { p1^x > 101 :: ?p2 = p1
       | else      :: ?tmp = p1^x
              x(!p1, tmp + 1)
              !updateY(p1, ?p2)
    }
}

pub def bar use !io {
  ?p1 = position(100,900)
  !updateX(p1, ?p2)

  !print("p1(100,900):")
  !printPosition(p1)
  !print("p2(102,900):")
  !printPosition(p2)
}

!bar

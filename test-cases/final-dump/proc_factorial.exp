======================================================================
AFTER EVERYTHING:
 Module proc_factorial
  public submods  : 
  public types    : 
  public resources: 
  public procs    : proc_factorial.<0>
                    proc_factorial.factorial<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    proc_factorial.gen$1<0>(5:wybe.int, 1:wybe.int, ?tmp$0#0:wybe.int) @proc_factorial:3:5
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$4#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$4#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn


factorial > public inline (1 calls)
0: factorial(n#0:wybe.int, ?result#1:wybe.int):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    proc_factorial.gen$1<0>(~n#0:wybe.int, 1:wybe.int, ?result#1:wybe.int) @proc_factorial:3:5


gen$1 > (2 calls)
0: gen$1(n#0:wybe.int, result#0:wybe.int, ?result#2:wybe.int):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign llvm icmp sgt(n#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.bool) @wybe:nn:nn
    case ~tmp$3#0:wybe.bool of
    0:
        foreign llvm move(~result#0:wybe.int, ?result#2:wybe.int)

    1:
        foreign llvm mul(n#0:wybe.int, ~result#0:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
        foreign llvm sub(~n#0:wybe.int, 1:wybe.int, ?tmp$1#0:wybe.int) @wybe:nn:nn
        proc_factorial.gen$1<0>(~tmp$1#0:wybe.int, ~tmp$0#0:wybe.int, ?result#2:wybe.int) @proc_factorial:3:5



gen$2 > inline (1 calls)
0: gen$2([n#0:wybe.int], result#0:wybe.int, [?result#0:wybe.int]):
 AliasPairs: []
 AliasMultiSpeczInfo: []

  LLVM code       :

; ModuleID = 'proc_factorial'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"proc_factorial.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %"tmp$0#0" = tail call fastcc  i64  @"proc_factorial.gen$1<0>"(i64  5, i64  1)  
  tail call ccc  void  @print_int(i64  %"tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"proc_factorial.factorial<0>"(i64  %"n#0")    {
entry:
  %"result#1" = tail call fastcc  i64  @"proc_factorial.gen$1<0>"(i64  %"n#0", i64  1)  
  ret i64 %"result#1" 
}


define external fastcc  i64 @"proc_factorial.gen$1<0>"(i64  %"n#0", i64  %"result#0")    {
entry:
  %"tmp$3#0" = icmp sgt i64 %"n#0", 1 
  br i1 %"tmp$3#0", label %if.then, label %if.else 
if.then:
  %"tmp$0#0" = mul   i64 %"n#0", %"result#0" 
  %"tmp$1#0" = sub   i64 %"n#0", 1 
  %"result#2" = tail call fastcc  i64  @"proc_factorial.gen$1<0>"(i64  %"tmp$1#0", i64  %"tmp$0#0")  
  ret i64 %"result#2" 
if.else:
  ret i64 %"result#0" 
}

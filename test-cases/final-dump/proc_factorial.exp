======================================================================
AFTER EVERYTHING:
 Module proc_factorial
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : proc_factorial.<0>
                    proc_factorial.factorial<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: proc_factorial.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    proc_factorial.factorial#cont#1<0>(5:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.int) #2 @proc_factorial:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#3##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


factorial > public {inline} (1 calls)
0: proc_factorial.factorial<0>
factorial(n##0:wybe.int, ?result##1:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    proc_factorial.factorial#cont#1<0>(~n##0:wybe.int, 1:wybe.int, ?result##1:wybe.int) #0 @proc_factorial:nn:nn


factorial#cont#1 > (2 calls)
0: proc_factorial.factorial#cont#1<0>
factorial#cont#1(n##0:wybe.int, result##0:wybe.int, ?result##1:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sgt(n##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
    case ~tmp#2##0:wybe.bool of
    0:
        foreign llvm move(~result##0:wybe.int, ?result##1:wybe.int)

    1:
        foreign llvm mul(n##0:wybe.int, ~result##0:wybe.int, ?tmp#7##0:wybe.int) @int:nn:nn
        foreign llvm sub(~n##0:wybe.int, 1:wybe.int, ?tmp#8##0:wybe.int) @int:nn:nn
        proc_factorial.factorial#cont#1<0>(~tmp#8##0:wybe.int, ~tmp#7##0:wybe.int, ?result##1:wybe.int) #2 @proc_factorial:nn:nn



factorial#cont#2 > {inline} (1 calls)
0: proc_factorial.factorial#cont#2<0>
factorial#cont#2(n##0:wybe.int, result##0:wybe.int, ?result##2:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm mul(n##0:wybe.int, ~result##0:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
    foreign llvm sub(~n##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.int) @int:nn:nn
    proc_factorial.factorial#cont#1<0>(~tmp#1##0:wybe.int, ~tmp#0##0:wybe.int, ?result##2:wybe.int) #2 @proc_factorial:nn:nn

  LLVM code       :

; ModuleID = 'proc_factorial'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"proc_factorial.<0>"()    {
entry:
  %0 = tail call fastcc  i64  @"proc_factorial.factorial#cont#1<0>"(i64  5, i64  1)  
  tail call ccc  void  @print_int(i64  %0)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"proc_factorial.factorial<0>"(i64  %"n##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"proc_factorial.factorial#cont#1<0>"(i64  %"n##0", i64  1)  
  ret i64 %0 
}


define external fastcc  i64 @"proc_factorial.factorial#cont#1<0>"(i64  %"n##0", i64  %"result##0")    {
entry:
  %0 = icmp sgt i64 %"n##0", 1 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = mul   i64 %"n##0", %"result##0" 
  %2 = sub   i64 %"n##0", 1 
  %3 = musttail call fastcc  i64  @"proc_factorial.factorial#cont#1<0>"(i64  %2, i64  %1)  
  ret i64 %3 
if.else:
  ret i64 %"result##0" 
}


define external fastcc  i64 @"proc_factorial.factorial#cont#2<0>"(i64  %"n##0", i64  %"result##0") alwaysinline   {
entry:
  %0 = mul   i64 %"n##0", %"result##0" 
  %1 = sub   i64 %"n##0", 1 
  %2 = musttail call fastcc  i64  @"proc_factorial.factorial#cont#1<0>"(i64  %1, i64  %0)  
  ret i64 %2 
}

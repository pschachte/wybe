======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module exporter
  representation  : (not a type)
  public submods  : 
  public resources: res: exporter.res
  public procs    : exporter.fn<0>
                    exporter.three<0>
  imports         : use wybe
  resources       : res: fromList [(exporter.res,wybe.int = 3 @exporter:nn:nn @exporter:nn:nn)]
  procs           : 

proc fn > public {inline} (0 calls)
0: exporter.fn<0>
fn(i##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c ipow(2:wybe.int, ~i##0:wybe.int, ?#result##0:wybe.int) @exporter:nn:nn


proc three > public {inline} (0 calls)
0: exporter.three<0>
three(?n##0:wybe.int)<{<<exporter.res>>}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<exporter.res>>:wybe.int, ?%n##0:wybe.int) @exporter:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'exporter'

source_filename = "!ROOT!/final-dump/exporter.wybe"
target triple    ????


declare external ccc i64 @ipow(i64, i64)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)
@"resource#exporter.res" = global i64 undef

define external fastcc i64 @"exporter.fn<0>"(i64 %"i##0") {
  %"tmp#3##0" = call ccc i64 @ipow(i64 2, i64 %"i##0")
  ret i64 %"tmp#3##0"
}

define external fastcc i64 @"exporter.three<0>"() {
  %"tmp#1##0" = load i64, ptr @"resource#exporter.res"
  ret i64 %"tmp#1##0"
}

--------------------------------------------------
 Module importer
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : importer.<0>
  imports         : use pub_importer
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: importer.<0>
()<{<<exporter.res>>, <<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(20,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm load(<<exporter.res>>:wybe.int, ?tmp#19##0:wybe.int) @importer:nn:nn
    foreign c ipow(2:wybe.int, tmp#19##0:wybe.int, ?tmp#20##0:wybe.int) @importer:nn:nn
    wybe.int.fmt<2>(~tmp#19##0:wybe.int, 0:wybe.int, ' ':wybe.char, ?tmp#3##0:wybe.string) #15 @importer:nn:nn
    wybe.int.fmt<2>(~tmp#20##0:wybe.int, 0:wybe.int, ' ':wybe.char, ?tmp#5##0:wybe.string) #16 @importer:nn:nn
    wybe.string.,,<0>(" = ":wybe.string, tmp#5##0:wybe.string, ?tmp#4##0:wybe.string) #4 @importer:nn:nn
    wybe.string.,,<0>(tmp#3##0:wybe.string, ~tmp#4##0:wybe.string, ?tmp#2##0:wybe.string) #5 @importer:nn:nn
    wybe.string.,,<0>("2^":wybe.string, ~tmp#2##0:wybe.string, ?tmp#1##0:wybe.string) #6 @importer:nn:nn
    wybe.string.print<0>(~tmp#1##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #17 @importer:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @importer:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @importer:nn:nn
    foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @importer:nn:nn
    wybe.string.,,<0>(" = ":wybe.string, ~tmp#5##0:wybe.string, ?tmp#10##0:wybe.string) #11 @importer:nn:nn
    wybe.string.,,<0>(~tmp#3##0:wybe.string, ~tmp#10##0:wybe.string, ?tmp#8##0:wybe.string) #12 @importer:nn:nn
    wybe.string.,,<0>("2^":wybe.string, ~tmp#8##0:wybe.string, ?tmp#7##0:wybe.string) #13 @importer:nn:nn
    wybe.string.print<0>[410bae77d3](~tmp#7##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #20 @importer:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#22##0:wybe.phantom) @importer:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @importer:nn:nn
    foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @importer:nn:nn


proc my_three > {inline} (1 calls)
0: importer.my_three<0>
my_three(?n##0:wybe.int)<{<<exporter.res>>}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<exporter.res>>:wybe.int, ?%n##0:wybe.int) @importer:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'importer'

source_filename = "!ROOT!/final-dump/importer.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c" = \00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"2^\00", align 8
@"string#2" = private unnamed_addr constant {i64, i64} { i64 3, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#3" = private unnamed_addr constant {i64, i64} { i64 2, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8

@"resource#exporter.res" = external global i64
declare external fastcc i64 @"wybe.int.fmt<2>"(i64, i64, i8)
declare external fastcc i64 @"wybe.string.,,<0>"(i64, i64)
declare external fastcc void @"wybe.string.print<0>"(i64)
declare external fastcc void @"wybe.string.print<0>[410bae77d3]"(i64)
declare external ccc i64 @ipow(i64, i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"importer.<0>"() {
  %"tmp#19##0" = load i64, ptr @"resource#exporter.res"
  %"tmp#20##0" = call ccc i64 @ipow(i64 2, i64 %"tmp#19##0")
  %"tmp#3##0" = tail call fastcc i64 @"wybe.int.fmt<2>"(i64 %"tmp#19##0", i64 0, i8 32)
  %"tmp#5##0" = tail call fastcc i64 @"wybe.int.fmt<2>"(i64 %"tmp#20##0", i64 0, i8 32)
  %"tmp#4##0" = tail call fastcc i64 @"wybe.string.,,<0>"(i64 ptrtoint( ptr @"string#2" to i64 ), i64 %"tmp#5##0")
  %"tmp#2##0" = tail call fastcc i64 @"wybe.string.,,<0>"(i64 %"tmp#3##0", i64 %"tmp#4##0")
  %"tmp#1##0" = tail call fastcc i64 @"wybe.string.,,<0>"(i64 ptrtoint( ptr @"string#3" to i64 ), i64 %"tmp#2##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 %"tmp#1##0")
  call ccc void @putchar(i8 10)
  %"tmp#10##0" = tail call fastcc i64 @"wybe.string.,,<0>"(i64 ptrtoint( ptr @"string#2" to i64 ), i64 %"tmp#5##0")
  %"tmp#8##0" = tail call fastcc i64 @"wybe.string.,,<0>"(i64 %"tmp#3##0", i64 %"tmp#10##0")
  %"tmp#7##0" = tail call fastcc i64 @"wybe.string.,,<0>"(i64 ptrtoint( ptr @"string#3" to i64 ), i64 %"tmp#8##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 %"tmp#7##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i64 @"importer.my_three<0>"() {
  %"tmp#1##0" = load i64, ptr @"resource#exporter.res"
  ret i64 %"tmp#1##0"
}

--------------------------------------------------
 Module pub_importer
  representation  : (not a type)
  public submods  : exporter -> exporter
  public resources: res: exporter.res
  public procs    : exporter.fn<0>
                    exporter.three<0>
  imports         : public use exporter
                    use wybe
  resources       : 
  procs           : 


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'pub_importer'

source_filename = "!ROOT!/final-dump/pub_importer.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

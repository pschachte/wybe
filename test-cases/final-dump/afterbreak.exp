======================================================================
AFTER EVERYTHING:
 Module afterbreak
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : afterbreak.<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public {inline} (0 calls)
0: afterbreak.<0>
(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    afterbreak.gen$1<0>(~io#0:wybe.phantom, 1:wybe.int, ?io#1:wybe.phantom) #0 @afterbreak:nn:nn


gen$1 > (2 calls)
0: afterbreak.gen$1<0>
gen$1(io#0:wybe.phantom, x#0:wybe.int, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_sgt(x#0:wybe.int, 10:wybe.int, ?tmp$1#0:wybe.bool) @int:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm add(~x#0:wybe.int, 1:wybe.int, ?tmp$0#0:wybe.int) @int:nn:nn
        foreign c print_int(tmp$0#0:wybe.int, ~io#0:wybe.phantom, ?tmp$10#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?tmp$11#0:wybe.phantom) @io:nn:nn
        afterbreak.gen$1<0>(~tmp$11#0:wybe.phantom, ~tmp$0#0:wybe.int, ?io#1:wybe.phantom) #4 @afterbreak:nn:nn

    1:
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)



gen$2 > {inline} (1 calls)
0: afterbreak.gen$2<0>
gen$2(io#0:wybe.phantom, [tmp$0#0:wybe.int], [x#0:wybe.int], y#0:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_int(y#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$3#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$3#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    afterbreak.gen$1<0>(~io#1:wybe.phantom, ~y#0:wybe.int, ?io#2:wybe.phantom) #1 @afterbreak:nn:nn

  LLVM code       :

; ModuleID = 'afterbreak'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"afterbreak.<0>"()    {
entry:
  tail call fastcc  void  @"afterbreak.gen$1<0>"(i64  1)  
  ret void 
}


define external fastcc  void @"afterbreak.gen$1<0>"(i64  %"x#0")    {
entry:
  %"1$tmp$1#0" = icmp sgt i64 %"x#0", 10 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  ret void 
if.else:
  %"3$tmp$0#0" = add   i64 %"x#0", 1 
  tail call ccc  void  @print_int(i64  %"3$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"afterbreak.gen$1<0>"(i64  %"3$tmp$0#0")  
  ret void 
}


define external fastcc  void @"afterbreak.gen$2<0>"(i64  %"y#0")    {
entry:
  tail call ccc  void  @print_int(i64  %"y#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"afterbreak.gen$1<0>"(i64  %"y#0")  
  ret void 
}

======================================================================
AFTER EVERYTHING:
 Module multi_specz
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : multi_specz.<0>
                    multi_specz.bar1<0>
                    multi_specz.bar2<0>
                    multi_specz.foo<0>
                    multi_specz.modifyAndPrint<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,impure} (0 calls)
0: multi_specz.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    multi_specz.bar1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @multi_specz:nn:nn
    multi_specz.bar2<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @multi_specz:nn:nn


bar1 > public (1 calls)
0: multi_specz.bar1<0>
bar1()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(5,(multi_specz.foo<0>,fromList [NonAliasedParamCond 0 [],NonAliasedParamCond 1 []]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#6##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#6##0:position.position, ?tmp#7##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#7##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int) @position:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#10##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#10##0:position.position, ?tmp#11##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#11##0:position.position, ?tmp#1##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int) @position:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#14##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#14##0:position.position, ?tmp#15##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#15##0:position.position, ?tmp#2##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int) @position:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#18##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#18##0:position.position, ?tmp#19##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#19##0:position.position, ?tmp#3##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:wybe.int) @position:nn:nn
    wybe.string.print<0>("=============":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #10 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    multi_specz.foo<0>[7477e50a09](~tmp#0##0:position.position, ~tmp#1##0:position.position, tmp#2##0:position.position, tmp#3##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @multi_specz:nn:nn
    wybe.string.print<0>("-------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #11 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#24##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    position.printPosition<0>(~tmp#2##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @multi_specz:nn:nn
    position.printPosition<0>(~tmp#3##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @multi_specz:nn:nn
    wybe.string.print<0>("=============":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #12 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#28##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


bar2 > public (1 calls)
0: multi_specz.bar2<0>
bar2()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#6##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#6##0:position.position, ?tmp#7##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#7##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int) @position:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#10##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#10##0:position.position, ?tmp#11##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#11##0:position.position, ?tmp#1##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int) @position:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#14##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#14##0:position.position, ?tmp#15##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#15##0:position.position, ?tmp#2##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int) @position:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#18##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#18##0:position.position, ?tmp#19##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#19##0:position.position, ?tmp#3##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:wybe.int) @position:nn:nn
    wybe.string.print<0>("=============":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #12 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    multi_specz.foo<0>(tmp#0##0:position.position, tmp#1##0:position.position, tmp#2##0:position.position, tmp#3##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @multi_specz:nn:nn
    wybe.string.print<0>("-------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #13 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#24##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    position.printPosition<0>(~tmp#0##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @multi_specz:nn:nn
    position.printPosition<0>(~tmp#1##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @multi_specz:nn:nn
    position.printPosition<0>(~tmp#2##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #9 @multi_specz:nn:nn
    position.printPosition<0>(~tmp#3##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #10 @multi_specz:nn:nn
    wybe.string.print<0>("=============":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #14 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#28##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


foo > public (2 calls)
0: multi_specz.foo<0>
foo(x1##0:position.position, x2##0:position.position, x3##0:position.position, x4##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 1,InterestingUnaliased 2,InterestingUnaliased 3]
  MultiSpeczDepInfo: [(0,(multi_specz.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [0]])),(1,(multi_specz.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [1]])),(2,(multi_specz.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [2]])),(3,(multi_specz.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [3]]))]
    multi_specz.modifyAndPrint<0>(~x1##0:position.position, 111:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @multi_specz:nn:nn
    multi_specz.modifyAndPrint<0>(~x2##0:position.position, 222:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @multi_specz:nn:nn
    multi_specz.modifyAndPrint<0>(~x3##0:position.position, 333:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @multi_specz:nn:nn
    multi_specz.modifyAndPrint<0>(~x4##0:position.position, 444:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @multi_specz:nn:nn
 [7477e50a09] [NonAliasedParam 0,NonAliasedParam 1] :
    multi_specz.modifyAndPrint<0>[410bae77d3](~x1##0:position.position, 111:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @multi_specz:nn:nn
    multi_specz.modifyAndPrint<0>[410bae77d3](~x2##0:position.position, 222:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @multi_specz:nn:nn
    multi_specz.modifyAndPrint<0>(~x3##0:position.position, 333:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @multi_specz:nn:nn
    multi_specz.modifyAndPrint<0>(~x4##0:position.position, 444:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @multi_specz:nn:nn


modifyAndPrint > public (4 calls)
0: multi_specz.modifyAndPrint<0>
modifyAndPrint(pos##0:position.position, v##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign lpvm {noalias} mutate(~pos##0:position.position, ?pos##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @position:nn:nn
    position.printPosition<0>(~pos##1:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @multi_specz:nn:nn
 [410bae77d3] [NonAliasedParam 0] :
    foreign lpvm {noalias} mutate(~pos##0:position.position, ?pos##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @position:nn:nn
    position.printPosition<0>(~pos##1:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @multi_specz:nn:nn

  LLVM code       :

; ModuleID = 'multi_specz'


 


@multi_specz.34 =    constant {i64, i64} { i64 13, i64 ptrtoint ([?? x i8]* @multi_specz.33 to i64) }


@multi_specz.36 =    constant {i64, i64} { i64 13, i64 ptrtoint ([?? x i8]* @multi_specz.35 to i64) }


@multi_specz.35 =    constant [?? x i8] c"-------------\00"


@multi_specz.33 =    constant [?? x i8] c"=============\00"


declare external fastcc  void @"position.printPosition<0>"(i64)    


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"multi_specz.<0>"()    {
entry:
  tail call fastcc  void  @"multi_specz.bar1<0>"()  
  tail call fastcc  void  @"multi_specz.bar2<0>"()  
  ret void 
}


define external fastcc  void @"multi_specz.bar1<0>"()    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 0, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 1, i64* %8 
  %9 = trunc i64 16 to i32  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  %9)  
  %11 = ptrtoint i8* %10 to i64 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 0, i64* %13 
  %14 = add   i64 %11, 8 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 2, i64* %16 
  %17 = trunc i64 16 to i32  
  %18 = tail call ccc  i8*  @wybe_malloc(i32  %17)  
  %19 = ptrtoint i8* %18 to i64 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  store  i64 0, i64* %21 
  %22 = add   i64 %19, 8 
  %23 = inttoptr i64 %22 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  store  i64 3, i64* %24 
  %25 = trunc i64 16 to i32  
  %26 = tail call ccc  i8*  @wybe_malloc(i32  %25)  
  %27 = ptrtoint i8* %26 to i64 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  store  i64 0, i64* %29 
  %30 = add   i64 %27, 8 
  %31 = inttoptr i64 %30 to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  store  i64 4, i64* %32 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multi_specz.34, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"multi_specz.foo<0>[7477e50a09]"(i64  %3, i64  %11, i64  %19, i64  %27)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multi_specz.36, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %19)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %27)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multi_specz.34, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"multi_specz.bar2<0>"()    {
entry:
  %37 = trunc i64 16 to i32  
  %38 = tail call ccc  i8*  @wybe_malloc(i32  %37)  
  %39 = ptrtoint i8* %38 to i64 
  %40 = inttoptr i64 %39 to i64* 
  %41 = getelementptr  i64, i64* %40, i64 0 
  store  i64 0, i64* %41 
  %42 = add   i64 %39, 8 
  %43 = inttoptr i64 %42 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  store  i64 1, i64* %44 
  %45 = trunc i64 16 to i32  
  %46 = tail call ccc  i8*  @wybe_malloc(i32  %45)  
  %47 = ptrtoint i8* %46 to i64 
  %48 = inttoptr i64 %47 to i64* 
  %49 = getelementptr  i64, i64* %48, i64 0 
  store  i64 0, i64* %49 
  %50 = add   i64 %47, 8 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  store  i64 2, i64* %52 
  %53 = trunc i64 16 to i32  
  %54 = tail call ccc  i8*  @wybe_malloc(i32  %53)  
  %55 = ptrtoint i8* %54 to i64 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  store  i64 0, i64* %57 
  %58 = add   i64 %55, 8 
  %59 = inttoptr i64 %58 to i64* 
  %60 = getelementptr  i64, i64* %59, i64 0 
  store  i64 3, i64* %60 
  %61 = trunc i64 16 to i32  
  %62 = tail call ccc  i8*  @wybe_malloc(i32  %61)  
  %63 = ptrtoint i8* %62 to i64 
  %64 = inttoptr i64 %63 to i64* 
  %65 = getelementptr  i64, i64* %64, i64 0 
  store  i64 0, i64* %65 
  %66 = add   i64 %63, 8 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  store  i64 4, i64* %68 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multi_specz.34, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"multi_specz.foo<0>"(i64  %39, i64  %47, i64  %55, i64  %63)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multi_specz.36, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %39)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %47)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %55)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %63)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multi_specz.34, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"multi_specz.foo<0>"(i64  %"x1##0", i64  %"x2##0", i64  %"x3##0", i64  %"x4##0")    {
entry:
  tail call fastcc  void  @"multi_specz.modifyAndPrint<0>"(i64  %"x1##0", i64  111)  
  tail call fastcc  void  @"multi_specz.modifyAndPrint<0>"(i64  %"x2##0", i64  222)  
  tail call fastcc  void  @"multi_specz.modifyAndPrint<0>"(i64  %"x3##0", i64  333)  
  tail call fastcc  void  @"multi_specz.modifyAndPrint<0>"(i64  %"x4##0", i64  444)  
  ret void 
}


define external fastcc  void @"multi_specz.foo<0>[7477e50a09]"(i64  %"x1##0", i64  %"x2##0", i64  %"x3##0", i64  %"x4##0")    {
entry:
  tail call fastcc  void  @"multi_specz.modifyAndPrint<0>[410bae77d3]"(i64  %"x1##0", i64  111)  
  tail call fastcc  void  @"multi_specz.modifyAndPrint<0>[410bae77d3]"(i64  %"x2##0", i64  222)  
  tail call fastcc  void  @"multi_specz.modifyAndPrint<0>"(i64  %"x3##0", i64  333)  
  tail call fastcc  void  @"multi_specz.modifyAndPrint<0>"(i64  %"x4##0", i64  444)  
  ret void 
}


define external fastcc  void @"multi_specz.modifyAndPrint<0>"(i64  %"pos##0", i64  %"v##0")    {
entry:
  %69 = trunc i64 16 to i32  
  %70 = tail call ccc  i8*  @wybe_malloc(i32  %69)  
  %71 = ptrtoint i8* %70 to i64 
  %72 = inttoptr i64 %71 to i8* 
  %73 = inttoptr i64 %"pos##0" to i8* 
  %74 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %72, i8*  %73, i32  %74, i1  0)  
  %75 = inttoptr i64 %71 to i64* 
  %76 = getelementptr  i64, i64* %75, i64 0 
  store  i64 %"v##0", i64* %76 
  tail call fastcc  void  @"position.printPosition<0>"(i64  %71)  
  ret void 
}


define external fastcc  void @"multi_specz.modifyAndPrint<0>[410bae77d3]"(i64  %"pos##0", i64  %"v##0")    {
entry:
  %77 = inttoptr i64 %"pos##0" to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  store  i64 %"v##0", i64* %78 
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"pos##0")  
  ret void 
}
--------------------------------------------------
 Module position
  representation  : (not a type)
  public submods  : position -> position.position
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : public use position.position
                    use wybe
  resources       : 
  submodules      : position.position
  procs           : 

printPosition > public (0 calls)
0: position.printPosition<0>
printPosition(pos##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>(" (":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @position:nn:nn
    foreign lpvm access(pos##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(",":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @position:nn:nn
    foreign lpvm access(~pos##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#1##0:wybe.int, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'position'


 


@position.13 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.12 to i64) }


@position.7 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.6 to i64) }


@position.2 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @position.1 to i64) }


@position.1 =    constant [?? x i8] c" (\00"


@position.12 =    constant [?? x i8] c")\00"


@position.6 =    constant [?? x i8] c",\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"position.printPosition<0>"(i64  %"pos##0")    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.2, i32 0, i32 0) to i64))  
  %3 = inttoptr i64 %"pos##0" to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  tail call ccc  void  @print_int(i64  %5)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.7, i32 0, i32 0) to i64))  
  %8 = add   i64 %"pos##0", 8 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  tail call ccc  void  @print_int(i64  %11)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.13, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module position.position
  representation  : address
  public submods  : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: position.position.=<0>
=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



position > public {inline} (0 calls)
0: position.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:position.position) @position:nn:nn
    foreign lpvm mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~#rec##1:position.position, ?#result##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int) @position:nn:nn
position > public {inline} (6 calls)
1: position.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#result##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @position:nn:nn


x > public {inline} (0 calls)
0: position.position.x<0>
x(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
x > public {inline} (0 calls)
1: position.position.x<1>
x(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


y > public {inline} (0 calls)
0: position.position.y<0>
y(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
y > public {inline} (0 calls)
1: position.position.y<1>
y(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


~= > public {inline} (0 calls)
0: position.position.~=<0>
~=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'position.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"position.position.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#left##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"#right##0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"1#tmp#1##0" = icmp eq i64 %3, %10 
  br i1 %"1#tmp#1##0", label %if.then, label %if.else 
if.then:
  %"2##success##0" = icmp eq i64 %7, %14 
  ret i1 %"2##success##0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"position.position.position<0>"(i64  %"x##0", i64  %"y##0")    {
entry:
  %15 = trunc i64 16 to i32  
  %16 = tail call ccc  i8*  @wybe_malloc(i32  %15)  
  %17 = ptrtoint i8* %16 to i64 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  store  i64 %"x##0", i64* %19 
  %20 = add   i64 %17, 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"y##0", i64* %22 
  ret i64 %17 
}


define external fastcc  {i64, i64} @"position.position.position<1>"(i64  %"#result##0")    {
entry:
  %23 = inttoptr i64 %"#result##0" to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"#result##0", 8 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = insertvalue {i64, i64} undef, i64 %25, 0 
  %31 = insertvalue {i64, i64} %30, i64 %29, 1 
  ret {i64, i64} %31 
}


define external fastcc  i64 @"position.position.x<0>"(i64  %"#rec##0")    {
entry:
  %32 = inttoptr i64 %"#rec##0" to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  ret i64 %34 
}


define external fastcc  i64 @"position.position.x<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %35 = trunc i64 16 to i32  
  %36 = tail call ccc  i8*  @wybe_malloc(i32  %35)  
  %37 = ptrtoint i8* %36 to i64 
  %38 = inttoptr i64 %37 to i8* 
  %39 = inttoptr i64 %"#rec##0" to i8* 
  %40 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %38, i8*  %39, i32  %40, i1  0)  
  %41 = inttoptr i64 %37 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  store  i64 %"#field##0", i64* %42 
  ret i64 %37 
}


define external fastcc  i64 @"position.position.y<0>"(i64  %"#rec##0")    {
entry:
  %43 = add   i64 %"#rec##0", 8 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  %46 = load  i64, i64* %45 
  ret i64 %46 
}


define external fastcc  i64 @"position.position.y<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %47 = trunc i64 16 to i32  
  %48 = tail call ccc  i8*  @wybe_malloc(i32  %47)  
  %49 = ptrtoint i8* %48 to i64 
  %50 = inttoptr i64 %49 to i8* 
  %51 = inttoptr i64 %"#rec##0" to i8* 
  %52 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %50, i8*  %51, i32  %52, i1  0)  
  %53 = add   i64 %49, 8 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  store  i64 %"#field##0", i64* %55 
  ret i64 %49 
}


define external fastcc  i1 @"position.position.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %56 = inttoptr i64 %"#left##0" to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = add   i64 %"#left##0", 8 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  %62 = load  i64, i64* %61 
  %63 = inttoptr i64 %"#right##0" to i64* 
  %64 = getelementptr  i64, i64* %63, i64 0 
  %65 = load  i64, i64* %64 
  %66 = add   i64 %"#right##0", 8 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  %69 = load  i64, i64* %68 
  %"1#tmp#7##0" = icmp eq i64 %58, %65 
  br i1 %"1#tmp#7##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#0##0" = icmp eq i64 %62, %69 
  %"2##success##0" = xor i1 %"2#tmp#0##0", 1 
  ret i1 %"2##success##0" 
if.else:
  %"3##success##0" = xor i1 0, 1 
  ret i1 %"3##success##0" 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module multi_specz
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : multi_specz.<0>
                    multi_specz.bar1<0>
                    multi_specz.bar2<0>
                    multi_specz.foo<0>
                    multi_specz.modifyAndPrint<0>
  constants       : 0:: StructInfo {structSize = 16, structData = [IntStructMember 0 8,IntStructMember 1 8]}
                    1:: StructInfo {structSize = 16, structData = [IntStructMember 0 8,IntStructMember 2 8]}
                    2:: StructInfo {structSize = 16, structData = [IntStructMember 0 8,IntStructMember 3 8]}
                    3:: StructInfo {structSize = 16, structData = [IntStructMember 0 8,IntStructMember 4 8]}
                    4:: CStringInfo {cstringChars = "============="}
                    5:: StructInfo {structSize = 16, structData = [IntStructMember 13 8,PointerStructMember multi_specz#constant#4]}
                    6:: CStringInfo {cstringChars = "-------------"}
                    7:: StructInfo {structSize = 16, structData = [IntStructMember 13 8,PointerStructMember multi_specz#constant#6]}
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: multi_specz.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multi_specz.bar1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @multi_specz:nn:nn
    multi_specz.bar2<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @multi_specz:nn:nn


proc bar1 > public (1 calls)
0: multi_specz.bar1<0>
bar1()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("=============":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10 @multi_specz:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @multi_specz:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @multi_specz:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @multi_specz:nn:nn
    multi_specz.foo<0>(multi_specz#constant#0:position.position, multi_specz#constant#1:position.position, multi_specz#constant#2:position.position, multi_specz#constant#3:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @multi_specz:nn:nn
    wybe.string.print<0>("-------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #11 @multi_specz:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#24##0:wybe.phantom) @multi_specz:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @multi_specz:nn:nn
    foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @multi_specz:nn:nn
    position.printPosition<0>(multi_specz#constant#2:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @multi_specz:nn:nn
    position.printPosition<0>(multi_specz#constant#3:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @multi_specz:nn:nn
    wybe.string.print<0>("=============":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #12 @multi_specz:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @multi_specz:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @multi_specz:nn:nn
    foreign lpvm store(~%tmp#28##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @multi_specz:nn:nn


proc bar2 > public (1 calls)
0: multi_specz.bar2<0>
bar2()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("=============":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #12 @multi_specz:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @multi_specz:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @multi_specz:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @multi_specz:nn:nn
    multi_specz.foo<0>(multi_specz#constant#0:position.position, multi_specz#constant#1:position.position, multi_specz#constant#2:position.position, multi_specz#constant#3:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @multi_specz:nn:nn
    wybe.string.print<0>("-------------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #13 @multi_specz:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#24##0:wybe.phantom) @multi_specz:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @multi_specz:nn:nn
    foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @multi_specz:nn:nn
    position.printPosition<0>(multi_specz#constant#0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @multi_specz:nn:nn
    position.printPosition<0>(multi_specz#constant#1:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @multi_specz:nn:nn
    position.printPosition<0>(multi_specz#constant#2:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9 @multi_specz:nn:nn
    position.printPosition<0>(multi_specz#constant#3:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10 @multi_specz:nn:nn
    wybe.string.print<0>("=============":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #14 @multi_specz:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @multi_specz:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @multi_specz:nn:nn
    foreign lpvm store(~%tmp#28##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @multi_specz:nn:nn


proc foo > public (2 calls)
0: multi_specz.foo<0>
foo(x1##0:position.position, x2##0:position.position, x3##0:position.position, x4##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 1,InterestingUnaliased 2,InterestingUnaliased 3]
  MultiSpeczDepInfo: [(0,(multi_specz.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [0]])),(1,(multi_specz.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [1]])),(2,(multi_specz.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [2]])),(3,(multi_specz.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [3]]))]
    multi_specz.modifyAndPrint<0>(~x1##0:position.position, 111:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @multi_specz:nn:nn
    multi_specz.modifyAndPrint<0>(~x2##0:position.position, 222:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @multi_specz:nn:nn
    multi_specz.modifyAndPrint<0>(~x3##0:position.position, 333:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @multi_specz:nn:nn
    multi_specz.modifyAndPrint<0>(~x4##0:position.position, 444:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @multi_specz:nn:nn


proc modifyAndPrint > public (4 calls)
0: multi_specz.modifyAndPrint<0>
modifyAndPrint(pos##0:position.position, v##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign lpvm {noalias} mutate(~pos##0:position.position, ?pos##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @multi_specz:nn:nn
    position.printPosition<0>(~pos##1:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @multi_specz:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'multi_specz'

source_filename = "!ROOT!/final-dump/multi_specz.wybe"
target triple    ????

@"multi_specz#constant#0" = private unnamed_addr constant {i64, i64} { i64 0, i64 1 }, align 8
@"multi_specz#constant#1" = private unnamed_addr constant {i64, i64} { i64 0, i64 2 }, align 8
@"multi_specz#constant#2" = private unnamed_addr constant {i64, i64} { i64 0, i64 3 }, align 8
@"multi_specz#constant#3" = private unnamed_addr constant {i64, i64} { i64 0, i64 4 }, align 8
@"multi_specz#constant#4" = private unnamed_addr constant [ ?? x i8 ] c"=============\00", align 8
@"multi_specz#constant#5" = private unnamed_addr constant {i64, ptr} { i64 13, ptr @"multi_specz#constant#4" }, align 8
@"multi_specz#constant#6" = private unnamed_addr constant [ ?? x i8 ] c"-------------\00", align 8
@"multi_specz#constant#7" = private unnamed_addr constant {i64, ptr} { i64 13, ptr @"multi_specz#constant#6" }, align 8

declare external fastcc void @"position.printPosition<0>"(i64)
declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"multi_specz.<0>"() {
  tail call fastcc void @"multi_specz.bar1<0>"()
  tail call fastcc void @"multi_specz.bar2<0>"()
  ret void
}

define external fastcc void @"multi_specz.bar1<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"multi_specz#constant#5" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"multi_specz.foo<0>"(i64 ptrtoint( ptr @"multi_specz#constant#0" to i64 ), i64 ptrtoint( ptr @"multi_specz#constant#1" to i64 ), i64 ptrtoint( ptr @"multi_specz#constant#2" to i64 ), i64 ptrtoint( ptr @"multi_specz#constant#3" to i64 ))
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"multi_specz#constant#7" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"position.printPosition<0>"(i64 ptrtoint( ptr @"multi_specz#constant#2" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 ptrtoint( ptr @"multi_specz#constant#3" to i64 ))
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"multi_specz#constant#5" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc void @"multi_specz.bar2<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"multi_specz#constant#5" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"multi_specz.foo<0>"(i64 ptrtoint( ptr @"multi_specz#constant#0" to i64 ), i64 ptrtoint( ptr @"multi_specz#constant#1" to i64 ), i64 ptrtoint( ptr @"multi_specz#constant#2" to i64 ), i64 ptrtoint( ptr @"multi_specz#constant#3" to i64 ))
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"multi_specz#constant#7" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"position.printPosition<0>"(i64 ptrtoint( ptr @"multi_specz#constant#0" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 ptrtoint( ptr @"multi_specz#constant#1" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 ptrtoint( ptr @"multi_specz#constant#2" to i64 ))
  tail call fastcc void @"position.printPosition<0>"(i64 ptrtoint( ptr @"multi_specz#constant#3" to i64 ))
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"multi_specz#constant#5" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc void @"multi_specz.foo<0>"(i64 %"x1##0", i64 %"x2##0", i64 %"x3##0", i64 %"x4##0") {
  tail call fastcc void @"multi_specz.modifyAndPrint<0>"(i64 %"x1##0", i64 111)
  tail call fastcc void @"multi_specz.modifyAndPrint<0>"(i64 %"x2##0", i64 222)
  tail call fastcc void @"multi_specz.modifyAndPrint<0>"(i64 %"x3##0", i64 333)
  tail call fastcc void @"multi_specz.modifyAndPrint<0>"(i64 %"x4##0", i64 444)
  ret void
}

define external fastcc void @"multi_specz.modifyAndPrint<0>"(i64 %"pos##0", i64 %"v##0") {
  %"tmp#2##0" = inttoptr i64 %"pos##0" to ptr
  %"tmp#3##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#3##0", ptr %"tmp#2##0", i64 16, i1 0)
  %"tmp#4##0" = ptrtoint ptr %"tmp#3##0" to i64
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"v##0", ptr %"tmp#5##0"
  tail call fastcc void @"position.printPosition<0>"(i64 %"tmp#4##0")
  ret void
}

--------------------------------------------------
 Module position
  representation  : (not a type)
  public submods  : position -> position.position
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  constants       : 0:: CStringInfo {cstringChars = " ("}
                    1:: StructInfo {structSize = 16, structData = [IntStructMember 2 8,PointerStructMember position#constant#0]}
  imports         : public use position.position
                    use wybe
  resources       : 
  submodules      : position.position
  procs           : 

proc printPosition > public (0 calls)
0: position.printPosition<0>
printPosition(pos##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(3,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []])),(9,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    wybe.string.print<0>(" (":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @position:nn:nn
    foreign lpvm access(pos##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @position:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @position:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @position:nn:nn
    wybe.string.print<0>[410bae77d3](1203:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @position:nn:nn
    foreign lpvm access(~pos##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#13##0:wybe.phantom) @position:nn:nn
    foreign c print_int(~tmp#1##0:wybe.int, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @position:nn:nn
    foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @position:nn:nn
    wybe.string.print<0>[410bae77d3](1191:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9 @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @position:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @position:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @position:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'position'

source_filename = "!ROOT!/final-dump/position.wybe"
target triple    ????

@"position#constant#0" = private unnamed_addr constant [ ?? x i8 ] c" (\00", align 8
@"position#constant#1" = private unnamed_addr constant {i64, ptr} { i64 2, ptr @"position#constant#0" }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external fastcc void @"wybe.string.print<0>[410bae77d3]"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"position.printPosition<0>"(i64 %"pos##0") {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"position#constant#1" to i64 ))
  %"tmp#23##0" = inttoptr i64 %"pos##0" to ptr
  %"tmp#0##0" = load i64, ptr %"tmp#23##0"
  call ccc void @print_int(i64 %"tmp#0##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1203)
  %"tmp#24##0" = add i64 %"pos##0", 8
  %"tmp#25##0" = inttoptr i64 %"tmp#24##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#25##0"
  call ccc void @print_int(i64 %"tmp#1##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1191)
  call ccc void @putchar(i8 10)
  ret void
}

--------------------------------------------------
 Module position.position
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  constants       : 
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: position.position.=<0>
=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



proc position > public {inline} (0 calls)
0: position.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:position.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:position.position) @position:nn:nn
    foreign lpvm mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~#rec##1:position.position, ?#result##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int) @position:nn:nn
proc position > public {inline} (6 calls)
1: position.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:position.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#result##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @position:nn:nn


proc x > public {inline} (0 calls)
0: position.position.x<0>
x(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
proc x > public {inline} (0 calls)
1: position.position.x<1>
x(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


proc y > public {inline} (0 calls)
0: position.position.y<0>
y(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
proc y > public {inline} (0 calls)
1: position.position.y<1>
y(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


proc ~= > public {inline} (0 calls)
0: position.position.~=<0>
~=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'position.position'

source_filename = "!ROOT!/final-dump/position.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"position.position.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#9##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#x##0" = load i64, ptr %"tmp#9##0"
  %"tmp#10##0" = add i64 %"#left##0", 8
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"#left#y##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#x##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#right##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#right#y##0" = load i64, ptr %"tmp#14##0"
  %"tmp#1##0" = icmp eq i64 %"#left#x##0", %"#right#x##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#15##0" = icmp eq i64 %"#left#y##0", %"#right#y##0"
  ret i1 %"tmp#15##0"
if.else.0:
  ret i1 0
}

define external fastcc i64 @"position.position.position<0>"(i64 %"x##0", i64 %"y##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"x##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"y##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64} @"position.position.position<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#6##0" = insertvalue {i64, i64} %"tmp#5##0", i64 %"tmp#4##0", 1
  ret {i64, i64} %"tmp#6##0"
}

define external fastcc i64 @"position.position.x<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"position.position.x<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"position.position.y<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"position.position.y<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i1 @"position.position.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#8##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#8##0"
  %"tmp#9##0" = add i64 %"#left##0", 8
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#10##0"
  %"tmp#11##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"#right##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#13##0"
  %"tmp#7##0" = icmp eq i64 %"tmp#3##0", %"tmp#5##0"
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#0##0" = icmp eq i64 %"tmp#4##0", %"tmp#6##0"
  %"tmp#14##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = xor i1 0, 1
  ret i1 %"tmp#15##0"
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module caret
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : caret.<0>
                    caret.expand_region<0>
  imports         : use caret.region
                    use position
                    use wybe
  resources       : 
  submodules      : caret.region
  procs           : 

module top-level code > public {semipure} (0 calls)
0: caret.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(8,(caret.#cont#1<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:position.position) @caret:nn:nn
    foreign lpvm mutate(~tmp#15##0:position.position, ?tmp#16##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @caret:nn:nn
    foreign lpvm mutate(~tmp#16##0:position.position, ?tmp#1##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int) @caret:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:position.position) @caret:nn:nn
    foreign lpvm mutate(~tmp#19##0:position.position, ?tmp#20##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 10:wybe.int) @caret:nn:nn
    foreign lpvm mutate(~tmp#20##0:position.position, ?tmp#2##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 12:wybe.int) @caret:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:caret.region) @caret:nn:nn
    foreign lpvm mutate(~tmp#23##0:caret.region, ?tmp#24##0:caret.region, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:position.position) @caret:nn:nn
    foreign lpvm mutate(~tmp#24##0:caret.region, ?tmp#25##0:caret.region, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp#2##0:position.position) @caret:nn:nn
    foreign lpvm access(~tmp#2##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?ten##0:wybe.int) @caret:nn:nn
    wybe.string.print<0>("ten = ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @caret:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#31##0:wybe.phantom) @caret:nn:nn
    foreign c print_int(~ten##0:wybe.int, ~tmp#31##0:wybe.phantom, ?tmp#32##0:wybe.phantom) @caret:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#32##0:wybe.phantom, ?tmp#33##0:wybe.phantom) @caret:nn:nn
    foreign lpvm store(~%tmp#33##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @caret:nn:nn
    caret.#cont#1<0>[410bae77d3](~tmp#25##0:caret.region)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8


proc #cont#1 > {semipure} (2 calls)
0: caret.#cont#1<0>
#cont#1(reg##0:caret.region)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign lpvm access(~reg##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:position.position) @caret:nn:nn
    foreign lpvm access(tmp#6##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @caret:nn:nn
    foreign llvm add(~tmp#5##0:wybe.int, 1:wybe.int, ?tmp#5##1:wybe.int) @caret:nn:nn
    foreign lpvm {noalias} mutate(~tmp#6##0:position.position, ?tmp#6##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##1:wybe.int) @caret:nn:nn
    foreign lpvm access(~tmp#6##1:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?ten##0:wybe.int) @caret:nn:nn
    wybe.string.print<0>("now ten = ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @caret:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#22##0:wybe.phantom) @caret:nn:nn
    foreign c print_int(~ten##0:wybe.int, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @caret:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @caret:nn:nn
    foreign lpvm store(~%tmp#24##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @caret:nn:nn
 [410bae77d3] [NonAliasedParam 0] :
    foreign lpvm access(~reg##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:position.position) @caret:nn:nn
    foreign lpvm access(tmp#6##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @caret:nn:nn
    foreign llvm add(~tmp#5##0:wybe.int, 1:wybe.int, ?tmp#5##1:wybe.int) @caret:nn:nn
    foreign lpvm {noalias} mutate(~tmp#6##0:position.position, ?tmp#6##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##1:wybe.int) @caret:nn:nn
    foreign lpvm access(~tmp#6##1:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?ten##0:wybe.int) @caret:nn:nn
    wybe.string.print<0>("now ten = ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @caret:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#22##0:wybe.phantom) @caret:nn:nn
    foreign c print_int(~ten##0:wybe.int, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @caret:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @caret:nn:nn
    foreign lpvm store(~%tmp#24##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @caret:nn:nn


proc expand_region > public (0 calls)
0: caret.expand_region<0>
expand_region(reg##0:caret.region, ?reg##4:caret.region, point##0:position.position)<{}; {}; {}>:
  AliasPairs: [(reg##0,reg##4)]
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign lpvm access(reg##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:position.position) @caret:nn:nn
    foreign lpvm access(tmp#0##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @caret:nn:nn
    foreign lpvm access(point##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @caret:nn:nn
    wybe.int.min<0>(~tmp#2##0:wybe.int, tmp#4##0:wybe.int, ?tmp#1##0:wybe.int) #4 @caret:nn:nn
    foreign lpvm {noalias} mutate(~tmp#0##0:position.position, ?tmp#0##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @caret:nn:nn
    foreign lpvm mutate(~reg##0:caret.region, ?reg##1:caret.region, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, tmp#0##1:position.position) @caret:nn:nn
    foreign lpvm access(tmp#0##1:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @caret:nn:nn
    foreign lpvm access(~point##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int) @caret:nn:nn
    wybe.int.min<0>(~tmp#7##0:wybe.int, tmp#9##0:wybe.int, ?tmp#6##0:wybe.int) #11 @caret:nn:nn
    foreign lpvm {noalias} mutate(~tmp#0##1:position.position, ?tmp#5##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.int) @caret:nn:nn
    foreign lpvm mutate(~reg##1:caret.region, ?reg##2:caret.region, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##1:position.position) @caret:nn:nn
    foreign lpvm access(reg##2:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:position.position) @caret:nn:nn
    foreign lpvm access(tmp#10##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.int) @caret:nn:nn
    wybe.int.max<0>(~tmp#12##0:wybe.int, ~tmp#4##0:wybe.int, ?tmp#11##0:wybe.int) #18 @caret:nn:nn
    foreign lpvm {noalias} mutate(~tmp#10##0:position.position, ?tmp#10##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#11##0:wybe.int) @caret:nn:nn
    foreign lpvm mutate(~reg##2:caret.region, ?reg##3:caret.region, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, tmp#10##1:position.position) @caret:nn:nn
    foreign lpvm access(tmp#10##1:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#17##0:wybe.int) @caret:nn:nn
    wybe.int.max<0>(~tmp#17##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#16##0:wybe.int) #25 @caret:nn:nn
    foreign lpvm {noalias} mutate(~tmp#10##1:position.position, ?tmp#15##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#16##0:wybe.int) @caret:nn:nn
    foreign lpvm mutate(~reg##3:caret.region, ?reg##4:caret.region, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#15##1:position.position) @caret:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'caret'

source_filename = "!ROOT!/final-dump/caret.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"now ten = \00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"ten = \00", align 8
@"string#2" = private unnamed_addr constant {i64, i64} { i64 10, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#3" = private unnamed_addr constant {i64, i64} { i64 6, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8

declare external fastcc i64 @"wybe.int.max<0>"(i64, i64)
declare external fastcc i64 @"wybe.int.min<0>"(i64, i64)
declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"caret.<0>"() {
  %"tmp#34##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#15##0" = ptrtoint ptr %"tmp#34##0" to i64
  %"tmp#35##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 0, ptr %"tmp#35##0"
  %"tmp#36##0" = add i64 %"tmp#15##0", 8
  %"tmp#37##0" = inttoptr i64 %"tmp#36##0" to ptr
  store i64 1, ptr %"tmp#37##0"
  %"tmp#38##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#19##0" = ptrtoint ptr %"tmp#38##0" to i64
  %"tmp#39##0" = inttoptr i64 %"tmp#19##0" to ptr
  store i64 10, ptr %"tmp#39##0"
  %"tmp#40##0" = add i64 %"tmp#19##0", 8
  %"tmp#41##0" = inttoptr i64 %"tmp#40##0" to ptr
  store i64 12, ptr %"tmp#41##0"
  %"tmp#42##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#23##0" = ptrtoint ptr %"tmp#42##0" to i64
  %"tmp#43##0" = inttoptr i64 %"tmp#23##0" to ptr
  store i64 %"tmp#15##0", ptr %"tmp#43##0"
  %"tmp#44##0" = add i64 %"tmp#23##0", 8
  %"tmp#45##0" = inttoptr i64 %"tmp#44##0" to ptr
  store i64 %"tmp#19##0", ptr %"tmp#45##0"
  %"tmp#46##0" = inttoptr i64 %"tmp#19##0" to ptr
  %"ten##0" = load i64, ptr %"tmp#46##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#3" to i64 ))
  call ccc void @print_int(i64 %"ten##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"caret.#cont#1<0>[410bae77d3]"(i64 %"tmp#23##0")
  ret void
}

define external fastcc void @"caret.#cont#1<0>"(i64 %"reg##0") {
  %"tmp#25##0" = add i64 %"reg##0", 8
  %"tmp#26##0" = inttoptr i64 %"tmp#25##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#26##0"
  %"tmp#27##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#27##0"
  %"tmp#5##1" = add i64 %"tmp#5##0", 1
  %"tmp#28##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#29##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#29##0", ptr %"tmp#28##0", i64 16, i1 0)
  %"tmp#30##0" = ptrtoint ptr %"tmp#29##0" to i64
  %"tmp#31##0" = inttoptr i64 %"tmp#30##0" to ptr
  store i64 %"tmp#5##1", ptr %"tmp#31##0"
  %"tmp#32##0" = inttoptr i64 %"tmp#30##0" to ptr
  %"ten##0" = load i64, ptr %"tmp#32##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#2" to i64 ))
  call ccc void @print_int(i64 %"ten##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc void @"caret.#cont#1<0>[410bae77d3]"(i64 %"reg##0") {
  %"tmp#25##0" = add i64 %"reg##0", 8
  %"tmp#26##0" = inttoptr i64 %"tmp#25##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#26##0"
  %"tmp#27##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#27##0"
  %"tmp#5##1" = add i64 %"tmp#5##0", 1
  %"tmp#28##0" = inttoptr i64 %"tmp#6##0" to ptr
  store i64 %"tmp#5##1", ptr %"tmp#28##0"
  %"tmp#29##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"ten##0" = load i64, ptr %"tmp#29##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#2" to i64 ))
  call ccc void @print_int(i64 %"ten##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i64 @"caret.expand_region<0>"(i64 %"reg##0", i64 %"point##0") {
  %"tmp#52##0" = inttoptr i64 %"reg##0" to ptr
  %"tmp#0##0" = load i64, ptr %"tmp#52##0"
  %"tmp#53##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#53##0"
  %"tmp#54##0" = inttoptr i64 %"point##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#54##0"
  %"tmp#1##0" = tail call fastcc i64 @"wybe.int.min<0>"(i64 %"tmp#2##0", i64 %"tmp#4##0")
  %"tmp#55##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#56##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#56##0", ptr %"tmp#55##0", i64 16, i1 0)
  %"tmp#57##0" = ptrtoint ptr %"tmp#56##0" to i64
  %"tmp#58##0" = inttoptr i64 %"tmp#57##0" to ptr
  store i64 %"tmp#1##0", ptr %"tmp#58##0"
  %"tmp#59##0" = inttoptr i64 %"reg##0" to ptr
  %"tmp#60##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#60##0", ptr %"tmp#59##0", i64 16, i1 0)
  %"tmp#61##0" = ptrtoint ptr %"tmp#60##0" to i64
  %"tmp#62##0" = inttoptr i64 %"tmp#61##0" to ptr
  store i64 %"tmp#57##0", ptr %"tmp#62##0"
  %"tmp#63##0" = add i64 %"tmp#57##0", 8
  %"tmp#64##0" = inttoptr i64 %"tmp#63##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#64##0"
  %"tmp#65##0" = add i64 %"point##0", 8
  %"tmp#66##0" = inttoptr i64 %"tmp#65##0" to ptr
  %"tmp#9##0" = load i64, ptr %"tmp#66##0"
  %"tmp#6##0" = tail call fastcc i64 @"wybe.int.min<0>"(i64 %"tmp#7##0", i64 %"tmp#9##0")
  %"tmp#67##0" = inttoptr i64 %"tmp#57##0" to ptr
  %"tmp#68##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#68##0", ptr %"tmp#67##0", i64 16, i1 0)
  %"tmp#69##0" = ptrtoint ptr %"tmp#68##0" to i64
  %"tmp#70##0" = add i64 %"tmp#69##0", 8
  %"tmp#71##0" = inttoptr i64 %"tmp#70##0" to ptr
  store i64 %"tmp#6##0", ptr %"tmp#71##0"
  %"tmp#72##0" = inttoptr i64 %"tmp#61##0" to ptr
  %"tmp#73##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#73##0", ptr %"tmp#72##0", i64 16, i1 0)
  %"tmp#74##0" = ptrtoint ptr %"tmp#73##0" to i64
  %"tmp#75##0" = inttoptr i64 %"tmp#74##0" to ptr
  store i64 %"tmp#69##0", ptr %"tmp#75##0"
  %"tmp#76##0" = add i64 %"tmp#74##0", 8
  %"tmp#77##0" = inttoptr i64 %"tmp#76##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#77##0"
  %"tmp#78##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"tmp#12##0" = load i64, ptr %"tmp#78##0"
  %"tmp#11##0" = tail call fastcc i64 @"wybe.int.max<0>"(i64 %"tmp#12##0", i64 %"tmp#4##0")
  %"tmp#79##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"tmp#80##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#80##0", ptr %"tmp#79##0", i64 16, i1 0)
  %"tmp#81##0" = ptrtoint ptr %"tmp#80##0" to i64
  %"tmp#82##0" = inttoptr i64 %"tmp#81##0" to ptr
  store i64 %"tmp#11##0", ptr %"tmp#82##0"
  %"tmp#83##0" = inttoptr i64 %"tmp#74##0" to ptr
  %"tmp#84##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#84##0", ptr %"tmp#83##0", i64 16, i1 0)
  %"tmp#85##0" = ptrtoint ptr %"tmp#84##0" to i64
  %"tmp#86##0" = add i64 %"tmp#85##0", 8
  %"tmp#87##0" = inttoptr i64 %"tmp#86##0" to ptr
  store i64 %"tmp#81##0", ptr %"tmp#87##0"
  %"tmp#88##0" = add i64 %"tmp#81##0", 8
  %"tmp#89##0" = inttoptr i64 %"tmp#88##0" to ptr
  %"tmp#17##0" = load i64, ptr %"tmp#89##0"
  %"tmp#16##0" = tail call fastcc i64 @"wybe.int.max<0>"(i64 %"tmp#17##0", i64 %"tmp#9##0")
  %"tmp#90##0" = inttoptr i64 %"tmp#81##0" to ptr
  %"tmp#91##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#91##0", ptr %"tmp#90##0", i64 16, i1 0)
  %"tmp#92##0" = ptrtoint ptr %"tmp#91##0" to i64
  %"tmp#93##0" = add i64 %"tmp#92##0", 8
  %"tmp#94##0" = inttoptr i64 %"tmp#93##0" to ptr
  store i64 %"tmp#16##0", ptr %"tmp#94##0"
  %"tmp#95##0" = inttoptr i64 %"tmp#85##0" to ptr
  %"tmp#96##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#96##0", ptr %"tmp#95##0", i64 16, i1 0)
  %"tmp#97##0" = ptrtoint ptr %"tmp#96##0" to i64
  %"tmp#98##0" = add i64 %"tmp#97##0", 8
  %"tmp#99##0" = inttoptr i64 %"tmp#98##0" to ptr
  store i64 %"tmp#92##0", ptr %"tmp#99##0"
  ret i64 %"tmp#97##0"
}

--------------------------------------------------
 Module caret.region
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : caret.region.=<0>
                    caret.region.lower_left<0>
                    caret.region.lower_left<1>
                    caret.region.region<0>
                    caret.region.region<1>
                    caret.region.upper_right<0>
                    caret.region.upper_right<1>
                    caret.region.~=<0>
  imports         : use caret
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: caret.region.=<0>
=(#left##0:caret.region, #right##0:caret.region, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#lower_left##0:position.position) @caret:nn:nn
    foreign lpvm access(~#left##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#upper_right##0:position.position) @caret:nn:nn
    foreign lpvm access(#right##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#lower_left##0:position.position) @caret:nn:nn
    foreign lpvm access(~#right##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#upper_right##0:position.position) @caret:nn:nn
    foreign lpvm access(#left#lower_left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left#lower_left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right#lower_left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right#lower_left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~tmp#7##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
    case ~tmp#11##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#left#upper_right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.int) @position:nn:nn
            foreign lpvm access(~#left#upper_right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.int) @position:nn:nn
            foreign lpvm access(#right#upper_right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.int) @position:nn:nn
            foreign lpvm access(~#right#upper_right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#17##0:wybe.int) @position:nn:nn
            foreign llvm icmp_eq(~tmp#14##0:wybe.int, ~tmp#16##0:wybe.int, ?tmp#18##0:wybe.bool) @int:nn:nn
            case ~tmp#18##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~tmp#15##0:wybe.int, ~tmp#17##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





proc lower_left > public {inline} (0 calls)
0: caret.region.lower_left<0>
lower_left(#rec##0:caret.region, ?#result##0:position.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:position.position) @caret:nn:nn
proc lower_left > public {inline} (0 calls)
1: caret.region.lower_left<1>
lower_left(#rec##0:caret.region, ?#rec##1:caret.region, #field##0:position.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:caret.region, ?#rec##1:caret.region, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:position.position) @caret:nn:nn


proc region > public {inline} (0 calls)
0: caret.region.region<0>
region(lower_left##0:position.position, upper_right##0:position.position, ?#result##0:caret.region)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:caret.region) @caret:nn:nn
    foreign lpvm mutate(~#rec##0:caret.region, ?#rec##1:caret.region, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lower_left##0:position.position) @caret:nn:nn
    foreign lpvm mutate(~#rec##1:caret.region, ?#result##0:caret.region, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~upper_right##0:position.position) @caret:nn:nn
proc region > public {inline} (6 calls)
1: caret.region.region<1>
region(?lower_left##0:position.position, ?upper_right##0:position.position, #result##0:caret.region)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?lower_left##0:position.position) @caret:nn:nn
    foreign lpvm access(~#result##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?upper_right##0:position.position) @caret:nn:nn


proc upper_right > public {inline} (0 calls)
0: caret.region.upper_right<0>
upper_right(#rec##0:caret.region, ?#result##0:position.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:position.position) @caret:nn:nn
proc upper_right > public {inline} (0 calls)
1: caret.region.upper_right<1>
upper_right(#rec##0:caret.region, ?#rec##1:caret.region, #field##0:position.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:caret.region, ?#rec##1:caret.region, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:position.position) @caret:nn:nn


proc ~= > public {inline} (0 calls)
0: caret.region.~=<0>
~=(#left##0:caret.region, #right##0:caret.region, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:position.position) @caret:nn:nn
    foreign lpvm access(~#left##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:position.position) @caret:nn:nn
    foreign lpvm access(#right##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:position.position) @caret:nn:nn
    foreign lpvm access(~#right##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:position.position) @caret:nn:nn
    foreign lpvm access(tmp#3##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @position:nn:nn
    foreign lpvm access(~tmp#3##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @position:nn:nn
    foreign lpvm access(tmp#5##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int) @position:nn:nn
    foreign lpvm access(~tmp#5##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~tmp#7##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
    case ~tmp#11##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#12##0:wybe.bool) @int:nn:nn
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(tmp#4##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#13##0:wybe.int) @position:nn:nn
            foreign lpvm access(~tmp#4##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.int) @position:nn:nn
            foreign lpvm access(tmp#6##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.int) @position:nn:nn
            foreign lpvm access(~tmp#6##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.int) @position:nn:nn
            foreign llvm icmp_eq(~tmp#13##0:wybe.int, ~tmp#15##0:wybe.int, ?tmp#17##0:wybe.bool) @int:nn:nn
            case ~tmp#17##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
                foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~tmp#14##0:wybe.int, ~tmp#16##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
                foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)




  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'caret.region'

source_filename = "!ROOT!/final-dump/caret.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"caret.region.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#19##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#lower_left##0" = load i64, ptr %"tmp#19##0"
  %"tmp#20##0" = add i64 %"#left##0", 8
  %"tmp#21##0" = inttoptr i64 %"tmp#20##0" to ptr
  %"#left#upper_right##0" = load i64, ptr %"tmp#21##0"
  %"tmp#22##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#lower_left##0" = load i64, ptr %"tmp#22##0"
  %"tmp#23##0" = add i64 %"#right##0", 8
  %"tmp#24##0" = inttoptr i64 %"tmp#23##0" to ptr
  %"#right#upper_right##0" = load i64, ptr %"tmp#24##0"
  %"tmp#25##0" = inttoptr i64 %"#left#lower_left##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#25##0"
  %"tmp#26##0" = add i64 %"#left#lower_left##0", 8
  %"tmp#27##0" = inttoptr i64 %"tmp#26##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#27##0"
  %"tmp#28##0" = inttoptr i64 %"#right#lower_left##0" to ptr
  %"tmp#9##0" = load i64, ptr %"tmp#28##0"
  %"tmp#29##0" = add i64 %"#right#lower_left##0", 8
  %"tmp#30##0" = inttoptr i64 %"tmp#29##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#30##0"
  %"tmp#11##0" = icmp eq i64 %"tmp#7##0", %"tmp#9##0"
  br i1 %"tmp#11##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = icmp eq i64 %"tmp#10##0", %"tmp#8##0"
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#31##0" = inttoptr i64 %"#left#upper_right##0" to ptr
  %"tmp#14##0" = load i64, ptr %"tmp#31##0"
  %"tmp#32##0" = add i64 %"#left#upper_right##0", 8
  %"tmp#33##0" = inttoptr i64 %"tmp#32##0" to ptr
  %"tmp#15##0" = load i64, ptr %"tmp#33##0"
  %"tmp#34##0" = inttoptr i64 %"#right#upper_right##0" to ptr
  %"tmp#16##0" = load i64, ptr %"tmp#34##0"
  %"tmp#35##0" = add i64 %"#right#upper_right##0", 8
  %"tmp#36##0" = inttoptr i64 %"tmp#35##0" to ptr
  %"tmp#17##0" = load i64, ptr %"tmp#36##0"
  %"tmp#18##0" = icmp eq i64 %"tmp#14##0", %"tmp#16##0"
  br i1 %"tmp#18##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#37##0" = icmp eq i64 %"tmp#15##0", %"tmp#17##0"
  ret i1 %"tmp#37##0"
if.else.2:
  ret i1 0
if.else.1:
  ret i1 0
if.else.0:
  ret i1 0
}

define external fastcc i64 @"caret.region.lower_left<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"caret.region.lower_left<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"caret.region.region<0>"(i64 %"lower_left##0", i64 %"upper_right##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"lower_left##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"upper_right##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64} @"caret.region.region<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#6##0" = insertvalue {i64, i64} %"tmp#5##0", i64 %"tmp#4##0", 1
  ret {i64, i64} %"tmp#6##0"
}

define external fastcc i64 @"caret.region.upper_right<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"caret.region.upper_right<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i1 @"caret.region.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#18##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#18##0"
  %"tmp#19##0" = add i64 %"#left##0", 8
  %"tmp#20##0" = inttoptr i64 %"tmp#19##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#20##0"
  %"tmp#21##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#21##0"
  %"tmp#22##0" = add i64 %"#right##0", 8
  %"tmp#23##0" = inttoptr i64 %"tmp#22##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#23##0"
  %"tmp#24##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#24##0"
  %"tmp#25##0" = add i64 %"tmp#3##0", 8
  %"tmp#26##0" = inttoptr i64 %"tmp#25##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#26##0"
  %"tmp#27##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#9##0" = load i64, ptr %"tmp#27##0"
  %"tmp#28##0" = add i64 %"tmp#5##0", 8
  %"tmp#29##0" = inttoptr i64 %"tmp#28##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#29##0"
  %"tmp#11##0" = icmp eq i64 %"tmp#7##0", %"tmp#9##0"
  br i1 %"tmp#11##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#12##0" = icmp eq i64 %"tmp#10##0", %"tmp#8##0"
  br i1 %"tmp#12##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#30##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"tmp#13##0" = load i64, ptr %"tmp#30##0"
  %"tmp#31##0" = add i64 %"tmp#4##0", 8
  %"tmp#32##0" = inttoptr i64 %"tmp#31##0" to ptr
  %"tmp#14##0" = load i64, ptr %"tmp#32##0"
  %"tmp#33##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#15##0" = load i64, ptr %"tmp#33##0"
  %"tmp#34##0" = add i64 %"tmp#6##0", 8
  %"tmp#35##0" = inttoptr i64 %"tmp#34##0" to ptr
  %"tmp#16##0" = load i64, ptr %"tmp#35##0"
  %"tmp#17##0" = icmp eq i64 %"tmp#13##0", %"tmp#15##0"
  br i1 %"tmp#17##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#0##0" = icmp eq i64 %"tmp#14##0", %"tmp#16##0"
  %"tmp#36##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#36##0"
if.else.2:
  %"tmp#37##0" = xor i1 0, 1
  ret i1 %"tmp#37##0"
if.else.1:
  %"tmp#38##0" = xor i1 0, 1
  ret i1 %"tmp#38##0"
if.else.0:
  %"tmp#39##0" = xor i1 0, 1
  ret i1 %"tmp#39##0"
}

--------------------------------------------------
 Module position
  representation  : (not a type)
  public submods  : position -> position.position
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : public use position.position
                    use wybe
  resources       : 
  submodules      : position.position
  procs           : 

proc printPosition > public (0 calls)
0: position.printPosition<0>
printPosition(pos##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(3,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []])),(9,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    wybe.string.print<0>(" (":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @position:nn:nn
    foreign lpvm access(pos##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @position:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @position:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @position:nn:nn
    wybe.string.print<0>[410bae77d3](1203:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @position:nn:nn
    foreign lpvm access(~pos##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#13##0:wybe.phantom) @position:nn:nn
    foreign c print_int(~tmp#1##0:wybe.int, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @position:nn:nn
    foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @position:nn:nn
    wybe.string.print<0>[410bae77d3](1191:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9 @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @position:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @position:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @position:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'position'

source_filename = "!ROOT!/final-dump/position.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c" (\00", align 8
@"string#1" = private unnamed_addr constant {i64, i64} { i64 2, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external fastcc void @"wybe.string.print<0>[410bae77d3]"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"position.printPosition<0>"(i64 %"pos##0") {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#1" to i64 ))
  %"tmp#23##0" = inttoptr i64 %"pos##0" to ptr
  %"tmp#0##0" = load i64, ptr %"tmp#23##0"
  call ccc void @print_int(i64 %"tmp#0##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1203)
  %"tmp#24##0" = add i64 %"pos##0", 8
  %"tmp#25##0" = inttoptr i64 %"tmp#24##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#25##0"
  call ccc void @print_int(i64 %"tmp#1##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1191)
  call ccc void @putchar(i8 10)
  ret void
}

--------------------------------------------------
 Module position.position
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: position.position.=<0>
=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



proc position > public {inline} (0 calls)
0: position.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:position.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:position.position) @position:nn:nn
    foreign lpvm mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~#rec##1:position.position, ?#result##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int) @position:nn:nn
proc position > public {inline} (6 calls)
1: position.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:position.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#result##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @position:nn:nn


proc x > public {inline} (0 calls)
0: position.position.x<0>
x(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
proc x > public {inline} (0 calls)
1: position.position.x<1>
x(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


proc y > public {inline} (0 calls)
0: position.position.y<0>
y(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
proc y > public {inline} (0 calls)
1: position.position.y<1>
y(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


proc ~= > public {inline} (0 calls)
0: position.position.~=<0>
~=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'position.position'

source_filename = "!ROOT!/final-dump/position.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"position.position.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#9##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#x##0" = load i64, ptr %"tmp#9##0"
  %"tmp#10##0" = add i64 %"#left##0", 8
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"#left#y##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#x##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#right##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#right#y##0" = load i64, ptr %"tmp#14##0"
  %"tmp#1##0" = icmp eq i64 %"#left#x##0", %"#right#x##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#15##0" = icmp eq i64 %"#left#y##0", %"#right#y##0"
  ret i1 %"tmp#15##0"
if.else.0:
  ret i1 0
}

define external fastcc i64 @"position.position.position<0>"(i64 %"x##0", i64 %"y##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"x##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"y##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64} @"position.position.position<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#6##0" = insertvalue {i64, i64} %"tmp#5##0", i64 %"tmp#4##0", 1
  ret {i64, i64} %"tmp#6##0"
}

define external fastcc i64 @"position.position.x<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"position.position.x<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"position.position.y<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"position.position.y<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i1 @"position.position.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#8##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#8##0"
  %"tmp#9##0" = add i64 %"#left##0", 8
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#10##0"
  %"tmp#11##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"#right##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#13##0"
  %"tmp#7##0" = icmp eq i64 %"tmp#3##0", %"tmp#5##0"
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#0##0" = icmp eq i64 %"tmp#4##0", %"tmp#6##0"
  %"tmp#14##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = xor i1 0, 1
  ret i1 %"tmp#15##0"
}

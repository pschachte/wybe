======================================================================
AFTER EVERYTHING:
 Module alias5
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias5.<0>
                    alias5.bar<0>
                    alias5.replicate1<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    alias5.bar<0>(~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @alias5:28:2


bar > public (1 calls)
0: bar(io#0:wybe.phantom, ?io#10:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    alias5.replicate1<0>(100:wybe.int, ?p2#0:wybe.int, 800:wybe.int, ?p4#0:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @alias5:14:4
    alias5.replicate1<0>(100:wybe.int, ?p3#0:wybe.int, 800:wybe.int, ?p4#1:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @alias5:15:4
    foreign c print_string("expect p1=111: ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    foreign c print_int(111:wybe.int, ~#io#3:wybe.phantom, ?tmp$4#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$4#0:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
    foreign c print_string("expect p2=100: ":wybe.string, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @wybe:nn:nn
    foreign c print_int(~p2#0:wybe.int, ~#io#5:wybe.phantom, ?tmp$9#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$9#0:wybe.phantom, ?#io#6:wybe.phantom) @wybe:nn:nn
    foreign c print_string("expect p3=100: ":wybe.string, ~#io#6:wybe.phantom, ?#io#7:wybe.phantom) @wybe:nn:nn
    foreign c print_int(~p3#0:wybe.int, ~#io#7:wybe.phantom, ?tmp$14#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$14#0:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn
    foreign c print_string("expect p4=45000: ":wybe.string, ~#io#8:wybe.phantom, ?#io#9:wybe.phantom) @wybe:nn:nn
    foreign c print_int(~p4#1:wybe.int, ~#io#9:wybe.phantom, ?tmp$19#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$19#0:wybe.phantom, ?#io#10:wybe.phantom) @wybe:nn:nn


replicate1 > public (2 calls)
0: replicate1(v1#0:wybe.int, ?v2#0:wybe.int, v3#0:wybe.int, ?v4#1:wybe.int, io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("random replicate1":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign c print_int(2:wybe.int, ~#io#1:wybe.phantom, ?tmp$7#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$7#0:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign llvm add(~v3#0:wybe.int, 100:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
    foreign llvm mul(~tmp$0#0:wybe.int, 200:wybe.int, ?tmp$2#0:wybe.int) @wybe:nn:nn
    foreign llvm sdiv(~tmp$2#0:wybe.int, 4:wybe.int, ?v4#1:wybe.int) @wybe:nn:nn
    foreign llvm move(~v1#0:wybe.int, ?v2#0:wybe.int) @alias5:9:3

  LLVM code       :

; ModuleID = 'alias5'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_string(i64)    


@alias5.13 =    constant [18 x i8] c"expect p4=45000: \00"


@alias5.11 =    constant [16 x i8] c"expect p3=100: \00"


@alias5.9 =    constant [16 x i8] c"expect p2=100: \00"


@alias5.7 =    constant [16 x i8] c"expect p1=111: \00"


@alias5.15 =    constant [18 x i8] c"random replicate1\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"alias5.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  tail call fastcc  void  @"alias5.bar<0>"()  
  ret void 
}


define external fastcc  void @"alias5.bar<0>"()    {
entry:
  %1 = tail call fastcc  {i64, i64}  @"alias5.replicate1<0>"(i64  100, i64  800)  
  %2 = extractvalue {i64, i64} %1, 0 
  %3 = extractvalue {i64, i64} %1, 1 
  %4 = tail call fastcc  {i64, i64}  @"alias5.replicate1<0>"(i64  100, i64  800)  
  %5 = extractvalue {i64, i64} %4, 0 
  %6 = extractvalue {i64, i64} %4, 1 
  %8 = ptrtoint i8* getelementptr inbounds ([16 x i8], [16 x i8]* @alias5.7, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %8)  
  tail call ccc  void  @print_int(i64  111)  
  tail call ccc  void  @putchar(i8  10)  
  %10 = ptrtoint i8* getelementptr inbounds ([16 x i8], [16 x i8]* @alias5.9, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %10)  
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  %12 = ptrtoint i8* getelementptr inbounds ([16 x i8], [16 x i8]* @alias5.11, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %12)  
  tail call ccc  void  @print_int(i64  %5)  
  tail call ccc  void  @putchar(i8  10)  
  %14 = ptrtoint i8* getelementptr inbounds ([18 x i8], [18 x i8]* @alias5.13, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %14)  
  tail call ccc  void  @print_int(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  {i64, i64} @"alias5.replicate1<0>"(i64  %"v1#0", i64  %"v3#0")    {
entry:
  %16 = ptrtoint i8* getelementptr inbounds ([18 x i8], [18 x i8]* @alias5.15, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %16)  
  tail call ccc  void  @print_int(i64  2)  
  tail call ccc  void  @putchar(i8  10)  
  %"tmp$0#0" = add   i64 %"v3#0", 100 
  %"tmp$2#0" = mul   i64 %"tmp$0#0", 200 
  %"v4#1" = sdiv exact i64 %"tmp$2#0", 4 
  %17 = insertvalue {i64, i64} undef, i64 %"v1#0", 0 
  %18 = insertvalue {i64, i64} %17, i64 %"v4#1", 1 
  ret {i64, i64} %18 
}

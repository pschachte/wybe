======================================================================
AFTER EVERYTHING:
 Module alias5
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : alias5.<0>
                    alias5.bar<0>
                    alias5.replicate1<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,impure} (0 calls)
0: alias5.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    alias5.bar<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @alias5:nn:nn


bar > public (1 calls)
0: alias5.bar<0>
bar()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    alias5.replicate1<0>(100:wybe.int, ?p2##0:wybe.int, 800:wybe.int, ?p4##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @alias5:nn:nn
    alias5.replicate1<0>(100:wybe.int, ?p3##0:wybe.int, 800:wybe.int, ?p4##1:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @alias5:nn:nn
    wybe.string.print<0>("expect p1=111: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @alias5:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(111:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#3##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("expect p2=100: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @alias5:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~p2##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("expect p3=100: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6 @alias5:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~p3##0:wybe.int, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("expect p4=45000: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @alias5:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#13##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~p4##1:wybe.int, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#15##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


replicate1 > public (2 calls)
0: alias5.replicate1<0>
replicate1(v1##0:wybe.int, ?v2##0:wybe.int, v3##0:wybe.int, ?v4##1:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("random replicate1":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @alias5:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
    foreign c print_int(2:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign llvm add(~v3##0:wybe.int, 100:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
    foreign llvm mul(~tmp#0##0:wybe.int, 200:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
    foreign llvm sdiv(~tmp#2##0:wybe.int, 4:wybe.int, ?v4##1:wybe.int) @int:nn:nn
    foreign llvm move(~v1##0:wybe.int, ?v2##0:wybe.int) @alias5:nn:nn

  LLVM code       :

; ModuleID = 'alias5'


 


@alias5.12 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @alias5.11 to i64) }


@alias5.8 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @alias5.7 to i64) }


@alias5.10 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @alias5.9 to i64) }


@alias5.14 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @alias5.13 to i64) }


@alias5.16 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @alias5.15 to i64) }


@alias5.7 =    constant [?? x i8] c"expect p1=111: \00"


@alias5.9 =    constant [?? x i8] c"expect p2=100: \00"


@alias5.11 =    constant [?? x i8] c"expect p3=100: \00"


@alias5.13 =    constant [?? x i8] c"expect p4=45000: \00"


@alias5.15 =    constant [?? x i8] c"random replicate1\00"


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"alias5.<0>"()    {
entry:
  musttail call fastcc  void  @"alias5.bar<0>"()  
  ret void 
}


define external fastcc  void @"alias5.bar<0>"()    {
entry:
  %1 = tail call fastcc  {i64, i64}  @"alias5.replicate1<0>"(i64  100, i64  800)  
  %2 = extractvalue {i64, i64} %1, 0 
  %3 = extractvalue {i64, i64} %1, 1 
  %4 = tail call fastcc  {i64, i64}  @"alias5.replicate1<0>"(i64  100, i64  800)  
  %5 = extractvalue {i64, i64} %4, 0 
  %6 = extractvalue {i64, i64} %4, 1 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias5.8, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  111)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias5.10, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias5.12, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %5)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias5.14, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  {i64, i64} @"alias5.replicate1<0>"(i64  %"v1##0", i64  %"v3##0")    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias5.16, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  2)  
  tail call ccc  void  @putchar(i8  10)  
  %"1#tmp#0##0" = add   i64 %"v3##0", 100 
  %"1#tmp#2##0" = mul   i64 %"1#tmp#0##0", 200 
  %"1#v4##1" = sdiv exact i64 %"1#tmp#2##0", 4 
  %17 = insertvalue {i64, i64} undef, i64 %"v1##0", 0 
  %18 = insertvalue {i64, i64} %17, i64 %"1#v4##1", 1 
  ret {i64, i64} %18 
}

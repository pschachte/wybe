======================================================================
AFTER EVERYTHING:
 Module alias5
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : alias5.<0>
                    alias5.bar<0>
                    alias5.replicate1<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public {inline,impure} (0 calls)
0: alias5.<0>
(io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    alias5.bar<0>(~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #0 @alias5:28:2


bar > public (1 calls)
0: alias5.bar<0>
bar(io##0:wybe.phantom, ?io##10:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    alias5.replicate1<0>(100:wybe.int, ?p2##0:wybe.int, 800:wybe.int, ?p4##0:wybe.int, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #0 @alias5:14:4
    alias5.replicate1<0>(100:wybe.int, ?p3##0:wybe.int, 800:wybe.int, ?p4##1:wybe.int, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) #1 @alias5:15:4
    wybe.string.print_string<0>("expect p1=111: ":wybe.string, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #10 @io:nn:nn
    foreign c print_int(111:wybe.int, ~#io##3:wybe.phantom, ?tmp#4##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?#io##4:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect p2=100: ":wybe.string, ~#io##4:wybe.phantom, ?#io##5:wybe.phantom) #11 @io:nn:nn
    foreign c print_int(~p2##0:wybe.int, ~#io##5:wybe.phantom, ?tmp#9##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?#io##6:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect p3=100: ":wybe.string, ~#io##6:wybe.phantom, ?#io##7:wybe.phantom) #12 @io:nn:nn
    foreign c print_int(~p3##0:wybe.int, ~#io##7:wybe.phantom, ?tmp#14##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#14##0:wybe.phantom, ?#io##8:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect p4=45000: ":wybe.string, ~#io##8:wybe.phantom, ?#io##9:wybe.phantom) #13 @io:nn:nn
    foreign c print_int(~p4##1:wybe.int, ~#io##9:wybe.phantom, ?tmp#19##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?#io##10:wybe.phantom) @io:nn:nn


replicate1 > public (2 calls)
0: alias5.replicate1<0>
replicate1(v1##0:wybe.int, ?v2##0:wybe.int, v3##0:wybe.int, ?v4##1:wybe.int, io##0:wybe.phantom, ?io##2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.string.print_string<0>("random replicate1":wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #5 @io:nn:nn
    foreign c print_int(2:wybe.int, ~#io##1:wybe.phantom, ?tmp#7##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    foreign llvm add(~v3##0:wybe.int, 100:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
    foreign llvm mul(~tmp#0##0:wybe.int, 200:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
    foreign llvm sdiv(~tmp#2##0:wybe.int, 4:wybe.int, ?v4##1:wybe.int) @int:nn:nn
    foreign llvm move(~v1##0:wybe.int, ?v2##0:wybe.int) @alias5:9:4

  LLVM code       :

; ModuleID = 'alias5'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


@alias5.17 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @alias5.16 to i64) }


@alias5.16 =    constant [?? x i8] c"expect p4=45000: \00"


@alias5.14 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @alias5.13 to i64) }


@alias5.13 =    constant [?? x i8] c"expect p3=100: \00"


@alias5.11 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @alias5.10 to i64) }


@alias5.10 =    constant [?? x i8] c"expect p2=100: \00"


@alias5.8 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @alias5.7 to i64) }


@alias5.7 =    constant [?? x i8] c"expect p1=111: \00"


@alias5.20 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @alias5.19 to i64) }


@alias5.19 =    constant [?? x i8] c"random replicate1\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"alias5.<0>"()    {
entry:
  tail call fastcc  void  @"alias5.bar<0>"()  
  ret void 
}


define external fastcc  void @"alias5.bar<0>"()    {
entry:
  %1 = tail call fastcc  {i64, i64}  @"alias5.replicate1<0>"(i64  100, i64  800)  
  %2 = extractvalue {i64, i64} %1, 0 
  %3 = extractvalue {i64, i64} %1, 1 
  %4 = tail call fastcc  {i64, i64}  @"alias5.replicate1<0>"(i64  100, i64  800)  
  %5 = extractvalue {i64, i64} %4, 0 
  %6 = extractvalue {i64, i64} %4, 1 
  %9 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias5.8, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %9)  
  tail call ccc  void  @print_int(i64  111)  
  tail call ccc  void  @putchar(i8  10)  
  %12 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias5.11, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %12)  
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  %15 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias5.14, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %15)  
  tail call ccc  void  @print_int(i64  %5)  
  tail call ccc  void  @putchar(i8  10)  
  %18 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias5.17, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %18)  
  tail call ccc  void  @print_int(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  {i64, i64} @"alias5.replicate1<0>"(i64  %"v1##0", i64  %"v3##0")    {
entry:
  %21 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias5.20, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %21)  
  tail call ccc  void  @print_int(i64  2)  
  tail call ccc  void  @putchar(i8  10)  
  %"1#tmp#0##0" = add   i64 %"v3##0", 100 
  %"1#tmp#2##0" = mul   i64 %"1#tmp#0##0", 200 
  %"1#v4##1" = sdiv exact i64 %"1#tmp#2##0", 4 
  %22 = insertvalue {i64, i64} undef, i64 %"v1##0", 0 
  %23 = insertvalue {i64, i64} %22, i64 %"1#v4##1", 1 
  ret {i64, i64} %23 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module disjunctive-cond
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : disjunctive-cond.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: disjunctive-cond.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("all good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #13 @disjunctive-cond:4:19
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @disjunctive-cond:4:19
    foreign c putchar('\n':wybe.char, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @disjunctive-cond:4:19
    foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:4:19
    disjunctive-cond.#cont#1<0>(1:wybe.bool, 0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9


proc #cont#1 > {semipure} (5 calls)
0: disjunctive-cond.#cont#1<0>
#cont#1(a##0:wybe.bool, b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~a##0:wybe.bool of
    0:
        case ~b##0:wybe.bool of
        0:
            wybe.string.print<0>("no good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @disjunctive-cond:9:16
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @disjunctive-cond:9:16
            foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @disjunctive-cond:9:16
            foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:9:16
            disjunctive-cond.#cont#2<0>(0:wybe.bool, 0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5

        1:
            wybe.string.print<0>("also good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @disjunctive-cond:8:18
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#7##0:wybe.phantom) @disjunctive-cond:8:18
            foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @disjunctive-cond:8:18
            foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:8:18
            disjunctive-cond.#cont#2<0>(0:wybe.bool, 1:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3


    1:
        wybe.string.print<0>("also good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @disjunctive-cond:8:18
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @disjunctive-cond:8:18
        foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @disjunctive-cond:8:18
        foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:8:18
        disjunctive-cond.#cont#2<0>(1:wybe.bool, ~b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1



proc #cont#2 > {semipure} (3 calls)
0: disjunctive-cond.#cont#2<0>
#cont#2(a##0:wybe.bool, b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~a##0:wybe.bool of
    0:
        foreign llvm xor(b##0:wybe.bool, 1:wybe.bool, ?tmp#2##0:wybe.bool) @disjunctive-cond:13:7
        case ~tmp#2##0:wybe.bool of
        0:
            disjunctive-cond.#cont#3<0>(0:wybe.bool, ~b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #11

        1:
            disjunctive-cond.#cont#3<0>(0:wybe.bool, ~b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10


    1:
        case ~b##0:wybe.bool of
        0:
            wybe.string.print<0>("more good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #12 @disjunctive-cond:13:19
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @disjunctive-cond:13:19
            foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @disjunctive-cond:13:19
            foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:13:19
            disjunctive-cond.#cont#3<0>(1:wybe.bool, 0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4

        1:
            wybe.string.print<0>("no good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #13 @disjunctive-cond:12:19
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @disjunctive-cond:12:19
            foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @disjunctive-cond:12:19
            foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:12:19
            disjunctive-cond.#cont#3<0>(1:wybe.bool, 1:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1




proc #cont#3 > {semipure} (7 calls)
0: disjunctive-cond.#cont#3<0>
#cont#3(a##0:wybe.bool, b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~a##0:wybe.bool of
    0:
        wybe.string.print<0>("still good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @disjunctive-cond:17:15
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#3##0:wybe.phantom) @disjunctive-cond:17:15
        foreign c putchar('\n':wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @disjunctive-cond:17:15
        foreign lpvm store(~%tmp#4##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:17:15

    1:
        case ~b##0:wybe.bool of
        0:
            wybe.string.print<0>("still good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @disjunctive-cond:17:15
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @disjunctive-cond:17:15
            foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @disjunctive-cond:17:15
            foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:17:15

        1:
            wybe.string.print<0>("no good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @disjunctive-cond:16:18
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @disjunctive-cond:16:18
            foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @disjunctive-cond:16:18
            foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:16:18



  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'disjunctive-cond'

source_filename = "!ROOT!/final-dump/disjunctive-cond.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"all good\00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"also good\00", align 8
@"cstring#2" = private unnamed_addr constant [ ?? x i8 ] c"more good\00", align 8
@"cstring#3" = private unnamed_addr constant [ ?? x i8 ] c"no good\00", align 8
@"cstring#4" = private unnamed_addr constant [ ?? x i8 ] c"still good\00", align 8
@"string#5" = private unnamed_addr constant {i64, i64} { i64 8, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#6" = private unnamed_addr constant {i64, i64} { i64 9, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8
@"string#7" = private unnamed_addr constant {i64, i64} { i64 9, i64 ptrtoint( ptr @"cstring#2" to i64 ) }, align 8
@"string#8" = private unnamed_addr constant {i64, i64} { i64 7, i64 ptrtoint( ptr @"cstring#3" to i64 ) }, align 8
@"string#9" = private unnamed_addr constant {i64, i64} { i64 10, i64 ptrtoint( ptr @"cstring#4" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"disjunctive-cond.<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#5" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#1<0>"(i1 1, i1 0)
  ret void
}

define external fastcc void @"disjunctive-cond.#cont#1<0>"(i1 %"a##0", i1 %"b##0") {
  br i1 %"a##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#6" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#2<0>"(i1 1, i1 %"b##0")
  ret void
if.else.0:
  br i1 %"b##0", label %if.then.1, label %if.else.1
if.then.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#6" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#2<0>"(i1 0, i1 1)
  ret void
if.else.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#8" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#2<0>"(i1 0, i1 0)
  ret void
}

define external fastcc void @"disjunctive-cond.#cont#2<0>"(i1 %"a##0", i1 %"b##0") {
  br i1 %"a##0", label %if.then.0, label %if.else.0
if.then.0:
  br i1 %"b##0", label %if.then.1, label %if.else.1
if.then.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#8" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#3<0>"(i1 1, i1 1)
  ret void
if.else.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#7" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#3<0>"(i1 1, i1 0)
  ret void
if.else.0:
  %"tmp#2##0" = xor i1 %"b##0", 1
  br i1 %"tmp#2##0", label %if.then.2, label %if.else.2
if.then.2:
  tail call fastcc void @"disjunctive-cond.#cont#3<0>"(i1 0, i1 %"b##0")
  ret void
if.else.2:
  tail call fastcc void @"disjunctive-cond.#cont#3<0>"(i1 0, i1 %"b##0")
  ret void
}

define external fastcc void @"disjunctive-cond.#cont#3<0>"(i1 %"a##0", i1 %"b##0") {
  br i1 %"a##0", label %if.then.0, label %if.else.0
if.then.0:
  br i1 %"b##0", label %if.then.1, label %if.else.1
if.then.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#8" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
if.else.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#9" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
if.else.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#9" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
}

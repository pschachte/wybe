======================================================================
AFTER EVERYTHING:
 Module disjunctive-cond
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : disjunctive-cond.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: disjunctive-cond.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("all good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #13 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    disjunctive-cond.gen#1<0>(1:wybe.bool, 0:wybe.bool, _:wybe.bool, _:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #9


gen#1 > (5 calls)
0: disjunctive-cond.gen#1<0>
gen#1(a##0:wybe.bool, b##0:wybe.bool, [tmp#0##0:wybe.bool], [tmp#1##0:wybe.bool])<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~a##0:wybe.bool of
    0:
        case ~b##0:wybe.bool of
        0:
            wybe.string.print<0>("no good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6 @string:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
            disjunctive-cond.gen#2<0>(0:wybe.bool, 0:wybe.bool, _:wybe.bool, _:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5

        1:
            wybe.string.print<0>("also good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @string:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
            disjunctive-cond.gen#2<0>(0:wybe.bool, 1:wybe.bool, _:wybe.bool, _:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3


    1:
        wybe.string.print<0>("also good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        disjunctive-cond.gen#2<0>(1:wybe.bool, ~b##0:wybe.bool, _:wybe.bool, _:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1



gen#2 > (3 calls)
0: disjunctive-cond.gen#2<0>
gen#2(a##0:wybe.bool, b##0:wybe.bool, [tmp#0##0:wybe.bool], [tmp#1##0:wybe.bool])<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~a##0:wybe.bool of
    0:
        foreign llvm xor(b##0:wybe.bool, 1:wybe.bool, ?tmp#2##0:wybe.bool) @bool:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            disjunctive-cond.gen#3<0>(0:wybe.bool, ~b##0:wybe.bool, _:wybe.bool, _:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #11

        1:
            disjunctive-cond.gen#3<0>(0:wybe.bool, ~b##0:wybe.bool, _:wybe.bool, _:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #10


    1:
        case ~b##0:wybe.bool of
        0:
            wybe.string.print<0>("more good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #12 @string:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
            disjunctive-cond.gen#3<0>(1:wybe.bool, 0:wybe.bool, _:wybe.bool, _:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4

        1:
            wybe.string.print<0>("no good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #13 @string:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
            disjunctive-cond.gen#3<0>(1:wybe.bool, 1:wybe.bool, _:wybe.bool, _:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1




gen#3 > (7 calls)
0: disjunctive-cond.gen#3<0>
gen#3(a##0:wybe.bool, b##0:wybe.bool, [tmp#0##0:wybe.bool], [tmp#1##0:wybe.bool])<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~a##0:wybe.bool of
    0:
        wybe.string.print<0>("still good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#3##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#4##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

    1:
        case ~b##0:wybe.bool of
        0:
            wybe.string.print<0>("still good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @string:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#3##0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#4##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

        1:
            wybe.string.print<0>("no good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @string:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#3##0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#4##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn



  LLVM code       :

; ModuleID = 'disjunctive-cond'


 


@disjunctive-cond.6 =    constant {i64, i64} { i64 7, i64 ptrtoint ([?? x i8]* @disjunctive-cond.5 to i64) }


@disjunctive-cond.2 =    constant {i64, i64} { i64 8, i64 ptrtoint ([?? x i8]* @disjunctive-cond.1 to i64) }


@disjunctive-cond.4 =    constant {i64, i64} { i64 9, i64 ptrtoint ([?? x i8]* @disjunctive-cond.3 to i64) }


@disjunctive-cond.8 =    constant {i64, i64} { i64 9, i64 ptrtoint ([?? x i8]* @disjunctive-cond.7 to i64) }


@disjunctive-cond.10 =    constant {i64, i64} { i64 10, i64 ptrtoint ([?? x i8]* @disjunctive-cond.9 to i64) }


@disjunctive-cond.1 =    constant [?? x i8] c"all good\00"


@disjunctive-cond.3 =    constant [?? x i8] c"also good\00"


@disjunctive-cond.7 =    constant [?? x i8] c"more good\00"


@disjunctive-cond.5 =    constant [?? x i8] c"no good\00"


@disjunctive-cond.9 =    constant [?? x i8] c"still good\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"disjunctive-cond.<0>"()    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @disjunctive-cond.2, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"disjunctive-cond.gen#1<0>"(i1  1, i1  0)  
  ret void 
}


define external fastcc  void @"disjunctive-cond.gen#1<0>"(i1  %"a##0", i1  %"b##0")    {
entry:
  br i1 %"a##0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @disjunctive-cond.4, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"disjunctive-cond.gen#2<0>"(i1  1, i1  %"b##0")  
  ret void 
if.else:
  br i1 %"b##0", label %if.then1, label %if.else1 
if.then1:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @disjunctive-cond.4, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"disjunctive-cond.gen#2<0>"(i1  0, i1  1)  
  ret void 
if.else1:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @disjunctive-cond.6, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"disjunctive-cond.gen#2<0>"(i1  0, i1  0)  
  ret void 
}


define external fastcc  void @"disjunctive-cond.gen#2<0>"(i1  %"a##0", i1  %"b##0")    {
entry:
  br i1 %"a##0", label %if.then, label %if.else 
if.then:
  br i1 %"b##0", label %if.then1, label %if.else1 
if.else:
  %"3#tmp#2##0" = xor i1 %"b##0", 1 
  br i1 %"3#tmp#2##0", label %if.then2, label %if.else2 
if.then1:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @disjunctive-cond.6, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"disjunctive-cond.gen#3<0>"(i1  1, i1  1)  
  ret void 
if.else1:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @disjunctive-cond.8, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"disjunctive-cond.gen#3<0>"(i1  1, i1  0)  
  ret void 
if.then2:
  tail call fastcc  void  @"disjunctive-cond.gen#3<0>"(i1  0, i1  %"b##0")  
  ret void 
if.else2:
  tail call fastcc  void  @"disjunctive-cond.gen#3<0>"(i1  0, i1  %"b##0")  
  ret void 
}


define external fastcc  void @"disjunctive-cond.gen#3<0>"(i1  %"a##0", i1  %"b##0")    {
entry:
  br i1 %"a##0", label %if.then, label %if.else 
if.then:
  br i1 %"b##0", label %if.then1, label %if.else1 
if.else:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @disjunctive-cond.10, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.then1:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @disjunctive-cond.6, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else1:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @disjunctive-cond.10, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

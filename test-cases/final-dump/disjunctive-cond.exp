======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module disjunctive-cond
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : disjunctive-cond.<0>
  constants       : 0:: CStringInfo {cstringChars = "no good"}
                    1:: CStringInfo {cstringChars = "all good"}
                    2:: CStringInfo {cstringChars = "also good"}
                    3:: CStringInfo {cstringChars = "more good"}
                    4:: CStringInfo {cstringChars = "still good"}
                    5:: StructInfo {structSize = 16, structData = [IntStructMember 10 8,PointerStructMember c"still good"]}
                    6:: StructInfo {structSize = 16, structData = [IntStructMember 7 8,PointerStructMember c"no good"]}
                    7:: StructInfo {structSize = 16, structData = [IntStructMember 9 8,PointerStructMember c"more good"]}
                    8:: StructInfo {structSize = 16, structData = [IntStructMember 9 8,PointerStructMember c"also good"]}
                    9:: StructInfo {structSize = 16, structData = [IntStructMember 8 8,PointerStructMember c"all good"]}
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: disjunctive-cond.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("all good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9 @disjunctive-cond:4:19
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#17##0:wybe.phantom) @disjunctive-cond:4:19
    foreign c putchar(10:wybe.char, ~tmp#17##0:wybe.phantom, ?tmp#18##0:wybe.phantom) @disjunctive-cond:4:19
    foreign lpvm store(~%tmp#18##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:4:19
    disjunctive-cond.#cont#1<0>(1:wybe.bool, 0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10


proc #cont#1 > {semipure} (3 calls)
0: disjunctive-cond.#cont#1<0>
#cont#1(a##0:wybe.bool, b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~a##0:wybe.bool of
    0:
        case ~b##0:wybe.bool of
        0:
            wybe.string.print<0>("no good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @disjunctive-cond:9:16
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @disjunctive-cond:9:16
            foreign c putchar(10:wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @disjunctive-cond:9:16
            foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:9:16
            disjunctive-cond.#cont#2<0>(0:wybe.bool, 0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4

        1:
            wybe.string.print<0>("also good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @disjunctive-cond:8:18
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#20##0:wybe.phantom) @disjunctive-cond:8:18
            foreign c putchar(10:wybe.char, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) @disjunctive-cond:8:18
            foreign lpvm store(~%tmp#21##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:8:18
            disjunctive-cond.#cont#2<0>(0:wybe.bool, 1:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7


    1:
        wybe.string.print<0>("also good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @disjunctive-cond:8:18
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#24##0:wybe.phantom) @disjunctive-cond:8:18
        foreign c putchar(10:wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @disjunctive-cond:8:18
        foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:8:18
        disjunctive-cond.#cont#2<0>(1:wybe.bool, ~b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9



proc #cont#2 > {semipure} (2 calls)
0: disjunctive-cond.#cont#2<0>
#cont#2(a##0:wybe.bool, b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~a##0:wybe.bool of
    0:
        foreign llvm xor(b##0:wybe.bool, 1:wybe.bool, ?tmp#10##0:wybe.bool) @disjunctive-cond:13:7
        case ~tmp#10##0:wybe.bool of
        0:
            disjunctive-cond.#cont#3<0>(0:wybe.bool, ~b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #14

        1:
            disjunctive-cond.#cont#3<0>(0:wybe.bool, ~b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #13


    1:
        case ~b##0:wybe.bool of
        0:
            wybe.string.print<0>("more good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #15 @disjunctive-cond:13:19
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom) @disjunctive-cond:13:19
            foreign c putchar(10:wybe.char, ~tmp#18##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @disjunctive-cond:13:19
            foreign lpvm store(~%tmp#19##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:13:19
            disjunctive-cond.#cont#3<0>(1:wybe.bool, 0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6

        1:
            wybe.string.print<0>("no good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #16 @disjunctive-cond:12:19
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#25##0:wybe.phantom) @disjunctive-cond:12:19
            foreign c putchar(10:wybe.char, ~tmp#25##0:wybe.phantom, ?tmp#26##0:wybe.phantom) @disjunctive-cond:12:19
            foreign lpvm store(~%tmp#26##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:12:19
            disjunctive-cond.#cont#3<0>(1:wybe.bool, 1:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2




proc #cont#3 > {semipure} (7 calls)
0: disjunctive-cond.#cont#3<0>
#cont#3(a##0:wybe.bool, b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~a##0:wybe.bool of
    0:
        wybe.string.print<0>("still good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @disjunctive-cond:17:15
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @disjunctive-cond:17:15
        foreign c putchar(10:wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @disjunctive-cond:17:15
        foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:17:15

    1:
        case ~b##0:wybe.bool of
        0:
            wybe.string.print<0>("still good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @disjunctive-cond:17:15
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#22##0:wybe.phantom) @disjunctive-cond:17:15
            foreign c putchar(10:wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @disjunctive-cond:17:15
            foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:17:15

        1:
            wybe.string.print<0>("no good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @disjunctive-cond:16:18
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#29##0:wybe.phantom) @disjunctive-cond:16:18
            foreign c putchar(10:wybe.char, ~tmp#29##0:wybe.phantom, ?tmp#30##0:wybe.phantom) @disjunctive-cond:16:18
            foreign lpvm store(~%tmp#30##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:16:18




proc #cont#4 > {inline,semipure} (2 calls)
0: disjunctive-cond.#cont#4<0>
#cont#4(a##0:wybe.bool, b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("also good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @disjunctive-cond:8:18
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @disjunctive-cond:8:18
    foreign c putchar(10:wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @disjunctive-cond:8:18
    foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:8:18
    disjunctive-cond.#cont#2<0>(~a##0:wybe.bool, ~b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2


proc #cont#5 > {inline,semipure} (2 calls)
0: disjunctive-cond.#cont#5<0>
#cont#5(a##0:wybe.bool, b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("all good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @disjunctive-cond:4:19
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @disjunctive-cond:4:19
    foreign c putchar(10:wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @disjunctive-cond:4:19
    foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:4:19
    disjunctive-cond.#cont#1<0>(~a##0:wybe.bool, ~b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2


proc #cont#6 > {inline,semipure} (2 calls)
0: disjunctive-cond.#cont#6<0>
#cont#6(a##0:wybe.bool, b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("no good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @disjunctive-cond:3:19
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#17##0:wybe.phantom) @disjunctive-cond:3:19
    foreign c putchar(10:wybe.char, ~tmp#17##0:wybe.phantom, ?tmp#18##0:wybe.phantom) @disjunctive-cond:3:19
    foreign lpvm store(~%tmp#18##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @disjunctive-cond:3:19
    disjunctive-cond.#cont#1<0>(~a##0:wybe.bool, ~b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'disjunctive-cond'

source_filename = "!ROOT!/final-dump/disjunctive-cond.wybe"
target triple    ????

@"disjunctive-cond#constant#0" = private unnamed_addr constant [ ?? x i8 ] c"no good\00", align 8
@"disjunctive-cond#constant#1" = private unnamed_addr constant [ ?? x i8 ] c"all good\00", align 8
@"disjunctive-cond#constant#2" = private unnamed_addr constant [ ?? x i8 ] c"also good\00", align 8
@"disjunctive-cond#constant#3" = private unnamed_addr constant [ ?? x i8 ] c"more good\00", align 8
@"disjunctive-cond#constant#4" = private unnamed_addr constant [ ?? x i8 ] c"still good\00", align 8
@"disjunctive-cond#constant#5" = private unnamed_addr constant {i64, ptr} { i64 10, ptr @"disjunctive-cond#constant#4" }, align 8
@"disjunctive-cond#constant#6" = private unnamed_addr constant {i64, ptr} { i64 7, ptr @"disjunctive-cond#constant#0" }, align 8
@"disjunctive-cond#constant#7" = private unnamed_addr constant {i64, ptr} { i64 9, ptr @"disjunctive-cond#constant#3" }, align 8
@"disjunctive-cond#constant#8" = private unnamed_addr constant {i64, ptr} { i64 9, ptr @"disjunctive-cond#constant#2" }, align 8
@"disjunctive-cond#constant#9" = private unnamed_addr constant {i64, ptr} { i64 8, ptr @"disjunctive-cond#constant#1" }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"disjunctive-cond.<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"disjunctive-cond#constant#9" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#1<0>"(i1 1, i1 0)
  ret void
}

define external fastcc void @"disjunctive-cond.#cont#1<0>"(i1 %"a##0", i1 %"b##0") {
  br i1 %"a##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"disjunctive-cond#constant#8" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#2<0>"(i1 1, i1 %"b##0")
  ret void
if.else.0:
  br i1 %"b##0", label %if.then.1, label %if.else.1
if.then.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"disjunctive-cond#constant#8" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#2<0>"(i1 0, i1 1)
  ret void
if.else.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"disjunctive-cond#constant#6" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#2<0>"(i1 0, i1 0)
  ret void
}

define external fastcc void @"disjunctive-cond.#cont#2<0>"(i1 %"a##0", i1 %"b##0") {
  br i1 %"a##0", label %if.then.0, label %if.else.0
if.then.0:
  br i1 %"b##0", label %if.then.1, label %if.else.1
if.then.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"disjunctive-cond#constant#6" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#3<0>"(i1 1, i1 1)
  ret void
if.else.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"disjunctive-cond#constant#7" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#3<0>"(i1 1, i1 0)
  ret void
if.else.0:
  %"tmp#10##0" = xor i1 %"b##0", 1
  br i1 %"tmp#10##0", label %if.then.2, label %if.else.2
if.then.2:
  tail call fastcc void @"disjunctive-cond.#cont#3<0>"(i1 0, i1 %"b##0")
  ret void
if.else.2:
  tail call fastcc void @"disjunctive-cond.#cont#3<0>"(i1 0, i1 %"b##0")
  ret void
}

define external fastcc void @"disjunctive-cond.#cont#3<0>"(i1 %"a##0", i1 %"b##0") {
  br i1 %"a##0", label %if.then.0, label %if.else.0
if.then.0:
  br i1 %"b##0", label %if.then.1, label %if.else.1
if.then.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"disjunctive-cond#constant#6" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
if.else.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"disjunctive-cond#constant#5" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
if.else.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"disjunctive-cond#constant#5" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc void @"disjunctive-cond.#cont#4<0>"(i1 %"a##0", i1 %"b##0") {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"disjunctive-cond#constant#8" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#2<0>"(i1 %"a##0", i1 %"b##0")
  ret void
}

define external fastcc void @"disjunctive-cond.#cont#5<0>"(i1 %"a##0", i1 %"b##0") {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"disjunctive-cond#constant#9" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#1<0>"(i1 %"a##0", i1 %"b##0")
  ret void
}

define external fastcc void @"disjunctive-cond.#cont#6<0>"(i1 %"a##0", i1 %"b##0") {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"disjunctive-cond#constant#6" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"disjunctive-cond.#cont#1<0>"(i1 %"a##0", i1 %"b##0")
  ret void
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module ctor_char
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : ctor_char.<0>
                    ctor_char.=<0>
                    ctor_char.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: ctor_char.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ctor_char.foo<0>(706:ctor_char, ?tmp#0##0:wybe.char) #1 @ctor_char:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @ctor_char:nn:nn
    foreign c putchar(~tmp#0##0:wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @ctor_char:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @ctor_char:nn:nn
    foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @ctor_char:nn:nn


proc = > public (2 calls)
0: ctor_char.=<0>
=(#left##0:ctor_char, #right##0:ctor_char, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:ctor_char, 0:ctor_char, ?#success##0:wybe.bool)

    1:
        foreign llvm and(#left##0:wybe.int, 1:wybe.int, ?tmp#10##0:wybe.int)
        foreign llvm icmp_eq(tmp#10##0:wybe.int, 0:wybe.int, ?tmp#11##0:wybe.bool)
        case ~tmp#11##0:wybe.bool of
        0:
            foreign llvm icmp_eq(~tmp#10##0:wybe.int, 1:wybe.int, ?tmp#17##0:wybe.bool)
            case ~tmp#17##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#left##0:ctor_char, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#other_ctor#1##0:ctor_char) @ctor_char:nn:nn
                foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#19##0:wybe.bool)
                case ~tmp#19##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#20##0:wybe.int)
                    foreign llvm icmp_eq(~tmp#20##0:wybe.int, 1:wybe.int, ?tmp#21##0:wybe.bool)
                    case ~tmp#21##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign lpvm access(~#right##0:ctor_char, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#other_ctor#1##0:ctor_char) @ctor_char:nn:nn
                        ctor_char.=<0>(~#left#other_ctor#1##0:ctor_char, ~#right#other_ctor#1##0:ctor_char, ?#success##0:wybe.bool) #5




        1:
            foreign llvm lshr(~#left##0:ctor_char, 1:ctor_char, ?tmp#12##0:ctor_char) @ctor_char:nn:nn
            foreign llvm and(~tmp#12##0:ctor_char, 255:ctor_char, ?tmp#13##0:ctor_char) @ctor_char:nn:nn
            foreign lpvm cast(~tmp#13##0:ctor_char, ?#left#c##0:wybe.char) @ctor_char:nn:nn
            foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#23##0:wybe.bool)
            case ~tmp#23##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#24##0:wybe.int)
                foreign llvm icmp_eq(~tmp#24##0:wybe.int, 0:wybe.int, ?tmp#25##0:wybe.bool)
                case ~tmp#25##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm lshr(~#right##0:ctor_char, 1:ctor_char, ?tmp#26##0:ctor_char) @ctor_char:nn:nn
                    foreign llvm and(~tmp#26##0:ctor_char, 255:ctor_char, ?tmp#27##0:ctor_char) @ctor_char:nn:nn
                    foreign lpvm cast(~tmp#27##0:ctor_char, ?#right#c##0:wybe.char) @ctor_char:nn:nn
                    foreign llvm icmp_eq(~#left#c##0:wybe.char, ~#right#c##0:wybe.char, ?#success##0:wybe.bool) @char:nn:nn






proc c > {inline} (0 calls)
0: ctor_char.c<0>
c(#rec##0:ctor_char, ?#result##0:wybe.char, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.char, ?#result##0:wybe.char)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.char, ?#result##0:wybe.char)

        1:
            foreign llvm lshr(~#rec##0:ctor_char, 1:ctor_char, ?#rec##1:ctor_char) @ctor_char:nn:nn
            foreign llvm and(~#rec##1:ctor_char, 255:ctor_char, ?#field##0:ctor_char) @ctor_char:nn:nn
            foreign lpvm cast(~#field##0:ctor_char, ?#result##0:wybe.char) @ctor_char:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc c > {inline} (0 calls)
1: ctor_char.c<1>
c(#rec##0:ctor_char, ?#rec##2:ctor_char, #field##0:wybe.char, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:ctor_char, ?#rec##2:ctor_char)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:ctor_char, ?#rec##2:ctor_char)

        1:
            foreign llvm and(~#rec##0:ctor_char, -511:ctor_char, ?#rec##1:ctor_char) @ctor_char:nn:nn
            foreign lpvm cast(~#field##0:wybe.char, ?#temp##0:ctor_char) @ctor_char:nn:nn
            foreign llvm shl(~#temp##0:ctor_char, 1:ctor_char, ?#temp##1:ctor_char) @ctor_char:nn:nn
            foreign llvm or(~#rec##1:ctor_char, ~#temp##1:ctor_char, ?#rec##2:ctor_char) @ctor_char:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc const > {inline} (0 calls)
0: ctor_char.const<0>
const(?#result##0:ctor_char)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:ctor_char, ?#result##0:ctor_char)


proc ctor > {inline} (1 calls)
0: ctor_char.ctor<0>
ctor(c##0:wybe.char, ?#result##3:ctor_char)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm cast(~c##0:wybe.char, ?#temp##0:ctor_char) @ctor_char:nn:nn
    foreign llvm shl(~#temp##0:ctor_char, 1:ctor_char, ?#temp##1:ctor_char) @ctor_char:nn:nn
    foreign llvm or(~#temp##1:ctor_char, 512:ctor_char, ?#result##3:ctor_char) @ctor_char:nn:nn
proc ctor > {inline} (13 calls)
1: ctor_char.ctor<1>
ctor(?c##0:wybe.char, #result##0:ctor_char, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.char, ?c##0:wybe.char)

    1:
        foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.char, ?c##0:wybe.char)

        1:
            foreign llvm lshr(~#result##0:ctor_char, 1:ctor_char, ?#temp##0:ctor_char) @ctor_char:nn:nn
            foreign llvm and(~#temp##0:ctor_char, 255:ctor_char, ?#temp2##0:ctor_char) @ctor_char:nn:nn
            foreign lpvm cast(~#temp2##0:ctor_char, ?c##0:wybe.char) @ctor_char:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc foo > (1 calls)
0: ctor_char.foo<0>
foo(this##0:ctor_char, ?#result##0:wybe.char)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(this##0:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.bool) @ctor_char:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        foreign llvm move('0':wybe.char, ?#result##0:wybe.char) @ctor_char:nn:nn

    1:
        foreign llvm and(this##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @ctor_char:nn:nn
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @ctor_char:nn:nn
        case ~tmp#5##0:wybe.bool of
        0:
            foreign llvm move('0':wybe.char, ?#result##0:wybe.char) @ctor_char:nn:nn

        1:
            foreign llvm lshr(~this##0:ctor_char, 1:ctor_char, ?tmp#6##0:ctor_char) @ctor_char:nn:nn
            foreign llvm and(~tmp#6##0:ctor_char, 255:ctor_char, ?tmp#7##0:ctor_char) @ctor_char:nn:nn
            foreign lpvm cast(~tmp#7##0:ctor_char, ?#result##0:wybe.char) @ctor_char:nn:nn




proc other_ctor > {inline} (0 calls)
0: ctor_char.other_ctor<0>
other_ctor(other_ctor#1##0:ctor_char, ?#result##0:ctor_char)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:ctor_char) @ctor_char:nn:nn
    foreign lpvm mutate(~#rec##0:ctor_char, ?#rec##1:ctor_char, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~other_ctor#1##0:ctor_char) @ctor_char:nn:nn
    foreign llvm or(~#rec##1:ctor_char, 1:wybe.int, ?#result##0:ctor_char) @ctor_char:nn:nn
proc other_ctor > {inline} (5 calls)
1: ctor_char.other_ctor<1>
other_ctor(?other_ctor#1##0:ctor_char, #result##0:ctor_char, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:ctor_char, ?other_ctor#1##0:ctor_char)

    1:
        foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:ctor_char, ?other_ctor#1##0:ctor_char)

        1:
            foreign lpvm access(~#result##0:ctor_char, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?other_ctor#1##0:ctor_char) @ctor_char:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc ~= > public {inline} (0 calls)
0: ctor_char.~=<0>
~=(#left##0:ctor_char, #right##0:ctor_char, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ctor_char.=<0>(~#left##0:ctor_char, ~#right##0:ctor_char, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'ctor_char'

source_filename = "!ROOT!/final-dump/ctor_char.wybe"
target triple    ????


declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"ctor_char.<0>"() {
  %"tmp#0##0" = tail call fastcc i8 @"ctor_char.foo<0>"(i64 706)
  call ccc void @putchar(i8 %"tmp#0##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i1 @"ctor_char.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp ne i64 %"#left##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#10##0" = and i64 %"#left##0", 1
  %"tmp#11##0" = icmp eq i64 %"tmp#10##0", 0
  br i1 %"tmp#11##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#12##0" = lshr i64 %"#left##0", 1
  %"tmp#13##0" = and i64 %"tmp#12##0", 255
  %"#left#c##0" = trunc i64 %"tmp#13##0" to i8
  %"tmp#23##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#23##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#24##0" = and i64 %"#right##0", 1
  %"tmp#25##0" = icmp eq i64 %"tmp#24##0", 0
  br i1 %"tmp#25##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#26##0" = lshr i64 %"#right##0", 1
  %"tmp#27##0" = and i64 %"tmp#26##0", 255
  %"#right#c##0" = trunc i64 %"tmp#27##0" to i8
  %"tmp#30##0" = icmp eq i8 %"#left#c##0", %"#right#c##0"
  ret i1 %"tmp#30##0"
if.else.3:
  ret i1 0
if.else.2:
  ret i1 0
if.else.1:
  %"tmp#17##0" = icmp eq i64 %"tmp#10##0", 1
  br i1 %"tmp#17##0", label %if.then.4, label %if.else.4
if.then.4:
  %"tmp#31##0" = add i64 %"#left##0", -1
  %"tmp#32##0" = inttoptr i64 %"tmp#31##0" to ptr
  %"#left#other_ctor#1##0" = load i64, ptr %"tmp#32##0"
  %"tmp#19##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#19##0", label %if.then.5, label %if.else.5
if.then.5:
  %"tmp#20##0" = and i64 %"#right##0", 1
  %"tmp#21##0" = icmp eq i64 %"tmp#20##0", 1
  br i1 %"tmp#21##0", label %if.then.6, label %if.else.6
if.then.6:
  %"tmp#33##0" = add i64 %"#right##0", -1
  %"tmp#34##0" = inttoptr i64 %"tmp#33##0" to ptr
  %"#right#other_ctor#1##0" = load i64, ptr %"tmp#34##0"
  %"tmp#35##0" = tail call fastcc i1 @"ctor_char.=<0>"(i64 %"#left#other_ctor#1##0", i64 %"#right#other_ctor#1##0")
  ret i1 %"tmp#35##0"
if.else.6:
  ret i1 0
if.else.5:
  ret i1 0
if.else.4:
  ret i1 0
if.else.0:
  %"tmp#36##0" = icmp eq i64 %"#right##0", 0
  ret i1 %"tmp#36##0"
}

define external fastcc {i8, i1} @"ctor_char.c<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 1
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 0
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"#rec##1" = lshr i64 %"#rec##0", 1
  %"#field##0" = and i64 %"#rec##1", 255
  %"tmp#3##0" = trunc i64 %"#field##0" to i8
  %"tmp#4##0" = insertvalue {i8, i1} undef, i8 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i8, i1} %"tmp#4##0", i1 1, 1
  ret {i8, i1} %"tmp#5##0"
if.else.1:
  %"tmp#6##0" = insertvalue {i8, i1} undef, i8 undef, 0
  %"tmp#7##0" = insertvalue {i8, i1} %"tmp#6##0", i1 0, 1
  ret {i8, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i8, i1} undef, i8 undef, 0
  %"tmp#9##0" = insertvalue {i8, i1} %"tmp#8##0", i1 0, 1
  ret {i8, i1} %"tmp#9##0"
}

define external fastcc {i64, i1} @"ctor_char.c<1>"(i64 %"#rec##0", i8 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 1
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 0
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"#rec##1" = and i64 %"#rec##0", -511
  %"#temp##0" = zext i8 %"#field##0" to i64
  %"#temp##1" = shl i64 %"#temp##0", 1
  %"tmp#3##0" = or i64 %"#rec##1", %"#temp##1"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.1:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

define external fastcc i64 @"ctor_char.const<0>"() {
  ret i64 0
}

define external fastcc i64 @"ctor_char.ctor<0>"(i8 %"c##0") {
  %"#temp##0" = zext i8 %"c##0" to i64
  %"#temp##1" = shl i64 %"#temp##0", 1
  %"tmp#0##0" = or i64 %"#temp##1", 512
  ret i64 %"tmp#0##0"
}

define external fastcc {i8, i1} @"ctor_char.ctor<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 1
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 0
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"#temp##0" = lshr i64 %"#result##0", 1
  %"#temp2##0" = and i64 %"#temp##0", 255
  %"tmp#3##0" = trunc i64 %"#temp2##0" to i8
  %"tmp#4##0" = insertvalue {i8, i1} undef, i8 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i8, i1} %"tmp#4##0", i1 1, 1
  ret {i8, i1} %"tmp#5##0"
if.else.1:
  %"tmp#6##0" = insertvalue {i8, i1} undef, i8 undef, 0
  %"tmp#7##0" = insertvalue {i8, i1} %"tmp#6##0", i1 0, 1
  ret {i8, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i8, i1} undef, i8 undef, 0
  %"tmp#9##0" = insertvalue {i8, i1} %"tmp#8##0", i1 0, 1
  ret {i8, i1} %"tmp#9##0"
}

define external fastcc i8 @"ctor_char.foo<0>"(i64 %"this##0") {
  %"tmp#3##0" = icmp ne i64 %"this##0", 0
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#4##0" = and i64 %"this##0", 1
  %"tmp#5##0" = icmp eq i64 %"tmp#4##0", 0
  br i1 %"tmp#5##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#6##0" = lshr i64 %"this##0", 1
  %"tmp#7##0" = and i64 %"tmp#6##0", 255
  %"tmp#8##0" = trunc i64 %"tmp#7##0" to i8
  ret i8 %"tmp#8##0"
if.else.1:
  ret i8 48
if.else.0:
  ret i8 48
}

define external fastcc i64 @"ctor_char.other_ctor<0>"(i64 %"other_ctor#1##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"other_ctor#1##0", ptr %"tmp#1##0"
  %"tmp#2##0" = or i64 %"#rec##0", 1
  ret i64 %"tmp#2##0"
}

define external fastcc {i64, i1} @"ctor_char.other_ctor<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 1
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#result##0", -1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc i1 @"ctor_char.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"ctor_char.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

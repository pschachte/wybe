======================================================================
AFTER EVERYTHING:
 Module ctor_char
  representation  : address
  public submods  : 
  public resources: 
  public procs    : ctor_char.<0>
                    ctor_char.=<0>
                    ctor_char.other_ctor<0>
                    ctor_char.other_ctor<1>
                    ctor_char.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: ctor_char.<0>
(io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm shl('a':ctor_char, 1:ctor_char, ?tmp#3##0:ctor_char)
    foreign llvm or(~tmp#3##0:ctor_char, 512:ctor_char, ?tmp#1##0:ctor_char)
    ctor_char.foo<0>(~tmp#1##0:ctor_char, ?tmp#0##0:wybe.char) #1 @ctor_char:nn:nn
    foreign c putchar(~tmp#0##0:wybe.char, ~#io##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn


= > public (2 calls)
0: ctor_char.=<0>
=(#left##0:ctor_char, #right##0:ctor_char, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:ctor_char, ~#right##0:ctor_char, ?#success##0:wybe.bool)

    1:
        foreign llvm and(#left##0:wybe.int, 1:wybe.int, ?tmp#10##0:wybe.int)
        foreign llvm icmp_eq(tmp#10##0:wybe.int, 0:wybe.int, ?tmp#11##0:wybe.bool)
        case ~tmp#11##0:wybe.bool of
        0:
            foreign llvm icmp_eq(~tmp#10##0:wybe.int, 1:wybe.int, ?tmp#17##0:wybe.bool)
            case ~tmp#17##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#left##0:ctor_char, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#other_ctor#1##0:ctor_char)
                foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#19##0:wybe.bool)
                case ~tmp#19##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#20##0:wybe.int)
                    foreign llvm icmp_eq(~tmp#20##0:wybe.int, 1:wybe.int, ?tmp#21##0:wybe.bool)
                    case ~tmp#21##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign lpvm access(~#right##0:ctor_char, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#other_ctor#1##0:ctor_char)
                        ctor_char.=<0>(~#left#other_ctor#1##0:ctor_char, ~#right#other_ctor#1##0:ctor_char, ?#success##0:wybe.bool) #5




        1:
            foreign llvm lshr(~#left##0:ctor_char, 1:ctor_char, ?tmp#12##0:ctor_char)
            foreign llvm and(~tmp#12##0:ctor_char, 255:ctor_char, ?tmp#13##0:ctor_char)
            foreign lpvm cast(~tmp#13##0:ctor_char, ?#left#c##0:wybe.char)
            foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.bool)
            case ~tmp#15##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 1:wybe.int, ?tmp#16##0:wybe.int)
                foreign llvm icmp_eq(~tmp#16##0:wybe.int, 0:wybe.int, ?tmp#17##0:wybe.bool)
                case ~tmp#17##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm lshr(~#right##0:ctor_char, 1:ctor_char, ?tmp#18##0:ctor_char)
                    foreign llvm and(~tmp#18##0:ctor_char, 255:ctor_char, ?tmp#19##0:ctor_char)
                    foreign lpvm cast(~tmp#19##0:ctor_char, ?#right#c##0:wybe.char)
                    foreign llvm icmp_eq(~#left#c##0:wybe.char, ~#right#c##0:wybe.char, ?#success##0:wybe.bool) @char:nn:nn






c > {inline} (0 calls)
0: ctor_char.c<0>
c(#rec##0:ctor_char, ?#result##0:wybe.char, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.char, ?#result##0:wybe.char)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.char, ?#result##0:wybe.char)

        1:
            foreign llvm lshr(~#rec##0:ctor_char, 1:ctor_char, ?#rec##1:ctor_char)
            foreign llvm and(~#rec##1:ctor_char, 255:ctor_char, ?#field##0:ctor_char)
            foreign lpvm cast(~#field##0:ctor_char, ?#result##0:wybe.char)
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


c > {inline} (0 calls)
1: ctor_char.c<1>
c(#rec##0:ctor_char, ?#rec##2:ctor_char, #field##0:wybe.char, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:ctor_char, ?#rec##2:ctor_char)

    1:
        foreign llvm and(#rec##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:ctor_char, ?#rec##2:ctor_char)

        1:
            foreign llvm and(~#rec##0:ctor_char, -511:ctor_char, ?#rec##1:ctor_char)
            foreign llvm shl(~#field##0:ctor_char, 1:ctor_char, ?#temp##0:ctor_char)
            foreign llvm or(~#rec##1:ctor_char, ~#temp##0:ctor_char, ?#rec##2:ctor_char)
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




const > {inline} (0 calls)
0: ctor_char.const<0>
const(?#result##0:ctor_char):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:ctor_char, ?#result##0:ctor_char)


ctor > {inline} (1 calls)
0: ctor_char.ctor<0>
ctor(c##0:wybe.char, ?#result##3:ctor_char):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm shl(~c##0:ctor_char, 1:ctor_char, ?#temp##0:ctor_char)
    foreign llvm or(~#temp##0:ctor_char, 512:ctor_char, ?#result##3:ctor_char)
ctor > {inline} (13 calls)
1: ctor_char.ctor<1>
ctor(?c##0:wybe.char, #result##0:ctor_char, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.char, ?c##0:wybe.char)

    1:
        foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.char, ?c##0:wybe.char)

        1:
            foreign llvm lshr(~#result##0:ctor_char, 1:ctor_char, ?#temp##0:ctor_char)
            foreign llvm and(~#temp##0:ctor_char, 255:ctor_char, ?#temp2##0:ctor_char)
            foreign lpvm cast(~#temp2##0:ctor_char, ?c##0:wybe.char)
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




foo > (1 calls)
0: ctor_char.foo<0>
foo(this##0:ctor_char, ?#result##0:wybe.char):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(this##0:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.bool)
    case ~tmp#3##0:wybe.bool of
    0:
        foreign llvm move('0':wybe.char, ?#result##0:wybe.char) @ctor_char:nn:nn

    1:
        foreign llvm and(this##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int)
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
        case ~tmp#5##0:wybe.bool of
        0:
            foreign llvm move('0':wybe.char, ?#result##0:wybe.char) @ctor_char:nn:nn

        1:
            foreign llvm lshr(~this##0:ctor_char, 1:ctor_char, ?tmp#6##0:ctor_char)
            foreign llvm and(~tmp#6##0:ctor_char, 255:ctor_char, ?tmp#7##0:ctor_char)
            foreign lpvm cast(~tmp#7##0:ctor_char, ?#result##0:wybe.char)




other_ctor > public {inline} (0 calls)
0: ctor_char.other_ctor<0>
other_ctor(other_ctor#1##0:ctor_char, ?#result##0:ctor_char):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:ctor_char)
    foreign lpvm mutate(~#rec##0:ctor_char, ?#rec##1:ctor_char, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~other_ctor#1##0:ctor_char)
    foreign llvm or(~#rec##1:ctor_char, 1:wybe.int, ?#result##0:ctor_char)
other_ctor > public {inline} (5 calls)
1: ctor_char.other_ctor<1>
other_ctor(?other_ctor#1##0:ctor_char, #result##0:ctor_char, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:ctor_char, ?other_ctor#1##0:ctor_char)

    1:
        foreign llvm and(#result##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:ctor_char, ?other_ctor#1##0:ctor_char)

        1:
            foreign lpvm access(~#result##0:ctor_char, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?other_ctor#1##0:ctor_char)
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




~= > public {inline} (0 calls)
0: ctor_char.~=<0>
~=(#left##0:ctor_char, #right##0:ctor_char, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    ctor_char.=<0>(~#left##0:ctor_char, ~#right##0:ctor_char, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'ctor_char'


 


declare external ccc  void @putchar(i8)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"ctor_char.<0>"()    {
entry:
  %"1#tmp#3##0" = shl   i64 97, 1 
  %"1#tmp#1##0" = or i64 %"1#tmp#3##0", 512 
  %"1#tmp#0##0" = tail call fastcc  i8  @"ctor_char.foo<0>"(i64  %"1#tmp#1##0")  
  tail call ccc  void  @putchar(i8  %"1#tmp#0##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i1 @"ctor_char.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#left##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#10##0" = and i64 %"#left##0", 1 
  %"2#tmp#11##0" = icmp eq i64 %"2#tmp#10##0", 0 
  br i1 %"2#tmp#11##0", label %if.then1, label %if.else1 
if.else:
  %"3##success##0" = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %"3##success##0" 
if.then1:
  %"4#tmp#12##0" = lshr  i64 %"#left##0", 1 
  %"4#tmp#13##0" = and i64 %"4#tmp#12##0", 255 
  %1 = trunc i64 %"4#tmp#13##0" to i8  
  %"4#tmp#15##0" = icmp ne i64 %"#right##0", 0 
  br i1 %"4#tmp#15##0", label %if.then2, label %if.else2 
if.else1:
  %"5#tmp#17##0" = icmp eq i64 %"2#tmp#10##0", 1 
  br i1 %"5#tmp#17##0", label %if.then4, label %if.else4 
if.then2:
  %"6#tmp#16##0" = and i64 %"#right##0", 1 
  %"6#tmp#17##0" = icmp eq i64 %"6#tmp#16##0", 0 
  br i1 %"6#tmp#17##0", label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %"8#tmp#18##0" = lshr  i64 %"#right##0", 1 
  %"8#tmp#19##0" = and i64 %"8#tmp#18##0", 255 
  %2 = trunc i64 %"8#tmp#19##0" to i8  
  %"8##success##0" = icmp eq i8 %1, %2 
  ret i1 %"8##success##0" 
if.else3:
  ret i1 0 
if.then4:
  %3 = add   i64 %"#left##0", -1 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %"10#tmp#19##0" = icmp ne i64 %"#right##0", 0 
  br i1 %"10#tmp#19##0", label %if.then5, label %if.else5 
if.else4:
  ret i1 0 
if.then5:
  %"12#tmp#20##0" = and i64 %"#right##0", 1 
  %"12#tmp#21##0" = icmp eq i64 %"12#tmp#20##0", 1 
  br i1 %"12#tmp#21##0", label %if.then6, label %if.else6 
if.else5:
  ret i1 0 
if.then6:
  %7 = add   i64 %"#right##0", -1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %"14##success##0" = tail call fastcc  i1  @"ctor_char.=<0>"(i64  %6, i64  %10)  
  ret i1 %"14##success##0" 
if.else6:
  ret i1 0 
}


define external fastcc  {i8, i1} @"ctor_char.c<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#2##0" = and i64 %"#rec##0", 1 
  %"2#tmp#1##0" = icmp eq i64 %"2#tmp#2##0", 0 
  br i1 %"2#tmp#1##0", label %if.then1, label %if.else1 
if.else:
  %16 = insertvalue {i8, i1} undef, i8 undef, 0 
  %17 = insertvalue {i8, i1} %16, i1 0, 1 
  ret {i8, i1} %17 
if.then1:
  %"4##rec##1" = lshr  i64 %"#rec##0", 1 
  %"4##field##0" = and i64 %"4##rec##1", 255 
  %11 = trunc i64 %"4##field##0" to i8  
  %12 = insertvalue {i8, i1} undef, i8 %11, 0 
  %13 = insertvalue {i8, i1} %12, i1 1, 1 
  ret {i8, i1} %13 
if.else1:
  %14 = insertvalue {i8, i1} undef, i8 undef, 0 
  %15 = insertvalue {i8, i1} %14, i1 0, 1 
  ret {i8, i1} %15 
}


define external fastcc  {i64, i1} @"ctor_char.c<1>"(i64  %"#rec##0", i8  %"#field##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#2##0" = and i64 %"#rec##0", 1 
  %"2#tmp#1##0" = icmp eq i64 %"2#tmp#2##0", 0 
  br i1 %"2#tmp#1##0", label %if.then1, label %if.else1 
if.else:
  %23 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %24 = insertvalue {i64, i1} %23, i1 0, 1 
  ret {i64, i1} %24 
if.then1:
  %"4##rec##1" = and i64 %"#rec##0", -511 
  %18 = zext i8 %"#field##0" to i64  
  %"4##temp##0" = shl   i64 %18, 1 
  %"4##rec##2" = or i64 %"4##rec##1", %"4##temp##0" 
  %19 = insertvalue {i64, i1} undef, i64 %"4##rec##2", 0 
  %20 = insertvalue {i64, i1} %19, i1 1, 1 
  ret {i64, i1} %20 
if.else1:
  %21 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
}


define external fastcc  i64 @"ctor_char.const<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i64 @"ctor_char.ctor<0>"(i8  %"c##0")    {
entry:
  %25 = zext i8 %"c##0" to i64  
  %"1##temp##0" = shl   i64 %25, 1 
  %"1##result##3" = or i64 %"1##temp##0", 512 
  ret i64 %"1##result##3" 
}


define external fastcc  {i8, i1} @"ctor_char.ctor<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#result##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#2##0" = and i64 %"#result##0", 1 
  %"2#tmp#1##0" = icmp eq i64 %"2#tmp#2##0", 0 
  br i1 %"2#tmp#1##0", label %if.then1, label %if.else1 
if.else:
  %31 = insertvalue {i8, i1} undef, i8 undef, 0 
  %32 = insertvalue {i8, i1} %31, i1 0, 1 
  ret {i8, i1} %32 
if.then1:
  %"4##temp##0" = lshr  i64 %"#result##0", 1 
  %"4##temp2##0" = and i64 %"4##temp##0", 255 
  %26 = trunc i64 %"4##temp2##0" to i8  
  %27 = insertvalue {i8, i1} undef, i8 %26, 0 
  %28 = insertvalue {i8, i1} %27, i1 1, 1 
  ret {i8, i1} %28 
if.else1:
  %29 = insertvalue {i8, i1} undef, i8 undef, 0 
  %30 = insertvalue {i8, i1} %29, i1 0, 1 
  ret {i8, i1} %30 
}


define external fastcc  i8 @"ctor_char.foo<0>"(i64  %"this##0")    {
entry:
  %"1#tmp#3##0" = icmp ne i64 %"this##0", 0 
  br i1 %"1#tmp#3##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#4##0" = and i64 %"this##0", 1 
  %"2#tmp#5##0" = icmp eq i64 %"2#tmp#4##0", 0 
  br i1 %"2#tmp#5##0", label %if.then1, label %if.else1 
if.else:
  ret i8 48 
if.then1:
  %"4#tmp#6##0" = lshr  i64 %"this##0", 1 
  %"4#tmp#7##0" = and i64 %"4#tmp#6##0", 255 
  %33 = trunc i64 %"4#tmp#7##0" to i8  
  ret i8 %33 
if.else1:
  ret i8 48 
}


define external fastcc  i64 @"ctor_char.other_ctor<0>"(i64  %"other_ctor#1##0")    {
entry:
  %34 = trunc i64 8 to i32  
  %35 = tail call ccc  i8*  @wybe_malloc(i32  %34)  
  %36 = ptrtoint i8* %35 to i64 
  %37 = inttoptr i64 %36 to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  store  i64 %"other_ctor#1##0", i64* %38 
  %"1##result##0" = or i64 %36, 1 
  ret i64 %"1##result##0" 
}


define external fastcc  {i64, i1} @"ctor_char.other_ctor<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#result##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#2##0" = and i64 %"#result##0", 1 
  %"2#tmp#1##0" = icmp eq i64 %"2#tmp#2##0", 1 
  br i1 %"2#tmp#1##0", label %if.then1, label %if.else1 
if.else:
  %47 = insertvalue {i64, i1} undef, i64 undef, 0 
  %48 = insertvalue {i64, i1} %47, i1 0, 1 
  ret {i64, i1} %48 
if.then1:
  %39 = add   i64 %"#result##0", -1 
  %40 = inttoptr i64 %39 to i64* 
  %41 = getelementptr  i64, i64* %40, i64 0 
  %42 = load  i64, i64* %41 
  %43 = insertvalue {i64, i1} undef, i64 %42, 0 
  %44 = insertvalue {i64, i1} %43, i1 1, 1 
  ret {i64, i1} %44 
if.else1:
  %45 = insertvalue {i64, i1} undef, i64 undef, 0 
  %46 = insertvalue {i64, i1} %45, i1 0, 1 
  ret {i64, i1} %46 
}


define external fastcc  i1 @"ctor_char.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %"1#tmp#0##0" = tail call fastcc  i1  @"ctor_char.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %"1##success##0" = xor i1 %"1#tmp#0##0", 1 
  ret i1 %"1##success##0" 
}

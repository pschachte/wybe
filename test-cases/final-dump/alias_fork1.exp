======================================================================
AFTER EVERYTHING:
 Module alias_fork1
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : alias_fork1.<0>
                    alias_fork1.simpleMerge<0>
  imports         : use mytree
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: alias_fork1.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#10##0:mytree.tree) @mytree:nn:nn
    foreign lpvm mutate(~tmp#10##0:mytree.tree, ?tmp#11##0:mytree.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:mytree.tree) @mytree:nn:nn
    foreign lpvm mutate(~tmp#11##0:mytree.tree, ?tmp#12##0:mytree.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 222:wybe.int) @mytree:nn:nn
    foreign lpvm mutate(~tmp#12##0:mytree.tree, ?tmp#0##0:mytree.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:mytree.tree) @mytree:nn:nn
    foreign lpvm alloc(24:wybe.int, ?tmp#16##0:mytree.tree) @mytree:nn:nn
    foreign lpvm mutate(~tmp#16##0:mytree.tree, ?tmp#17##0:mytree.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:mytree.tree) @mytree:nn:nn
    foreign lpvm mutate(~tmp#17##0:mytree.tree, ?tmp#18##0:mytree.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 111:wybe.int) @mytree:nn:nn
    foreign lpvm mutate(~tmp#18##0:mytree.tree, ?tmp#3##0:mytree.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:mytree.tree) @mytree:nn:nn
    alias_fork1.simpleMerge<0>(~tmp#0##0:mytree.tree, ~tmp#3##0:mytree.tree, ?tmp#6##0:mytree.tree) #6 @alias_fork1:nn:nn
    mytree.printTree1<0>(~tmp#6##0:mytree.tree, "{":wybe.string, ?tmp#20##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #9 @mytree:nn:nn
    wybe.string.print<0>("}":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #10 @mytree:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


gen#1 > {inline} (2 calls)
0: alias_fork1.gen#1<0>
gen#1([k1##0:wybe.int], [k2##0:wybe.int], [l1##0:mytree.tree], [l2##0:mytree.tree], [r1##0:mytree.tree], [r2##0:mytree.tree], [tl##0:mytree.tree], tmp#2##0:mytree.tree, [tr##0:mytree.tree], ?#result##0:mytree.tree)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(~tmp#2##0:mytree.tree, ?#result##0:mytree.tree) @alias_fork1:nn:nn


simpleMerge > public (1 calls)
0: alias_fork1.simpleMerge<0>
simpleMerge(tl##0:mytree.tree, tr##0:mytree.tree, ?#result##0:mytree.tree)<{}; {}>:
  AliasPairs: [(#result##0,tl##0),(#result##0,tr##0),(tl##0,tr##0)]
  InterestingCallProperties: []
    foreign llvm icmp_ne(tl##0:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.bool)
    case ~tmp#15##0:wybe.bool of
    0:
        foreign lpvm alloc(24:wybe.int, ?tmp#19##0:mytree.tree) @mytree:nn:nn
        foreign lpvm mutate(~tmp#19##0:mytree.tree, ?tmp#20##0:mytree.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:mytree.tree) @mytree:nn:nn
        foreign lpvm mutate(~tmp#20##0:mytree.tree, ?tmp#21##0:mytree.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.int) @mytree:nn:nn
        foreign lpvm mutate(~tmp#21##0:mytree.tree, ?#result##0:mytree.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:mytree.tree) @mytree:nn:nn

    1:
        foreign lpvm access(tl##0:mytree.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?k1##0:wybe.int) @mytree:nn:nn
        foreign lpvm access(tl##0:mytree.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?r1##0:mytree.tree) @mytree:nn:nn
        foreign llvm icmp_ne(tr##0:wybe.int, 0:wybe.int, ?tmp#17##0:wybe.bool)
        case ~tmp#17##0:wybe.bool of
        0:
            foreign lpvm alloc(24:wybe.int, ?tmp#21##0:mytree.tree) @mytree:nn:nn
            foreign lpvm mutate(~tmp#21##0:mytree.tree, ?tmp#22##0:mytree.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:mytree.tree) @mytree:nn:nn
            foreign lpvm mutate(~tmp#22##0:mytree.tree, ?tmp#23##0:mytree.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.int) @mytree:nn:nn
            foreign lpvm mutate(~tmp#23##0:mytree.tree, ?#result##0:mytree.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:mytree.tree) @mytree:nn:nn

        1:
            foreign lpvm access(tr##0:mytree.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?k2##0:wybe.int) @mytree:nn:nn
            foreign lpvm access(tr##0:mytree.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?r2##0:mytree.tree) @mytree:nn:nn
            foreign llvm icmp_slt(k1##0:wybe.int, k2##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
            case ~tmp#11##0:wybe.bool of
            0:
                foreign lpvm alloc(24:wybe.int, ?tmp#23##0:mytree.tree) @mytree:nn:nn
                foreign lpvm mutate(~tmp#23##0:mytree.tree, ?tmp#24##0:mytree.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tr##0:mytree.tree) @mytree:nn:nn
                foreign lpvm mutate(~tmp#24##0:mytree.tree, ?tmp#25##0:mytree.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~k1##0:wybe.int) @mytree:nn:nn
                foreign lpvm mutate(~tmp#25##0:mytree.tree, ?#result##0:mytree.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~r1##0:mytree.tree) @mytree:nn:nn

            1:
                foreign lpvm alloc(24:wybe.int, ?tmp#23##0:mytree.tree) @mytree:nn:nn
                foreign lpvm mutate(~tmp#23##0:mytree.tree, ?tmp#24##0:mytree.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tl##0:mytree.tree) @mytree:nn:nn
                foreign lpvm mutate(~tmp#24##0:mytree.tree, ?tmp#25##0:mytree.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~k2##0:wybe.int) @mytree:nn:nn
                foreign lpvm mutate(~tmp#25##0:mytree.tree, ?#result##0:mytree.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~r2##0:mytree.tree) @mytree:nn:nn




  LLVM code       :

; ModuleID = 'alias_fork1'


 


@alias_fork1.1 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @alias_fork1.0 to i64) }


@alias_fork1.3 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @alias_fork1.2 to i64) }


@alias_fork1.0 =    constant [?? x i8] c"{\00"


@alias_fork1.2 =    constant [?? x i8] c"}\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external fastcc  i64 @"mytree.printTree1<0>"(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"alias_fork1.<0>"()    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 0, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 222, i64* %7 
  %8 = add   i64 %2, 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 0, i64* %10 
  %11 = trunc i64 24 to i32  
  %12 = tail call ccc  i8*  @wybe_malloc(i32  %11)  
  %13 = ptrtoint i8* %12 to i64 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 0, i64* %15 
  %16 = add   i64 %13, 8 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 111, i64* %18 
  %19 = add   i64 %13, 16 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  store  i64 0, i64* %21 
  %22 = tail call fastcc  i64  @"alias_fork1.simpleMerge<0>"(i64  %2, i64  %13)  
  %23 = tail call fastcc  i64  @"mytree.printTree1<0>"(i64  %22, i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_fork1.1, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_fork1.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"alias_fork1.gen#1<0>"(i64  %"tmp#2##0")    {
entry:
  ret i64 %"tmp#2##0" 
}


define external fastcc  i64 @"alias_fork1.simpleMerge<0>"(i64  %"tl##0", i64  %"tr##0")    {
entry:
  %0 = icmp ne i64 %"tl##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"tl##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"tl##0", 16 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  %8 = load  i64, i64* %7 
  %9 = icmp ne i64 %"tr##0", 0 
  br i1 %9, label %if.then1, label %if.else1 
if.else:
  %52 = trunc i64 24 to i32  
  %53 = tail call ccc  i8*  @wybe_malloc(i32  %52)  
  %54 = ptrtoint i8* %53 to i64 
  %55 = inttoptr i64 %54 to i64* 
  %56 = getelementptr  i64, i64* %55, i64 0 
  store  i64 0, i64* %56 
  %57 = add   i64 %54, 8 
  %58 = inttoptr i64 %57 to i64* 
  %59 = getelementptr  i64, i64* %58, i64 0 
  store  i64 0, i64* %59 
  %60 = add   i64 %54, 16 
  %61 = inttoptr i64 %60 to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  store  i64 0, i64* %62 
  ret i64 %54 
if.then1:
  %10 = add   i64 %"tr##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = add   i64 %"tr##0", 16 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = icmp slt i64 %4, %13 
  br i1 %18, label %if.then2, label %if.else2 
if.else1:
  %41 = trunc i64 24 to i32  
  %42 = tail call ccc  i8*  @wybe_malloc(i32  %41)  
  %43 = ptrtoint i8* %42 to i64 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  store  i64 0, i64* %45 
  %46 = add   i64 %43, 8 
  %47 = inttoptr i64 %46 to i64* 
  %48 = getelementptr  i64, i64* %47, i64 0 
  store  i64 0, i64* %48 
  %49 = add   i64 %43, 16 
  %50 = inttoptr i64 %49 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  store  i64 0, i64* %51 
  ret i64 %43 
if.then2:
  %19 = trunc i64 24 to i32  
  %20 = tail call ccc  i8*  @wybe_malloc(i32  %19)  
  %21 = ptrtoint i8* %20 to i64 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  store  i64 %"tl##0", i64* %23 
  %24 = add   i64 %21, 8 
  %25 = inttoptr i64 %24 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  store  i64 %13, i64* %26 
  %27 = add   i64 %21, 16 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  store  i64 %17, i64* %29 
  ret i64 %21 
if.else2:
  %30 = trunc i64 24 to i32  
  %31 = tail call ccc  i8*  @wybe_malloc(i32  %30)  
  %32 = ptrtoint i8* %31 to i64 
  %33 = inttoptr i64 %32 to i64* 
  %34 = getelementptr  i64, i64* %33, i64 0 
  store  i64 %"tr##0", i64* %34 
  %35 = add   i64 %32, 8 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  store  i64 %4, i64* %37 
  %38 = add   i64 %32, 16 
  %39 = inttoptr i64 %38 to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  store  i64 %8, i64* %40 
  ret i64 %32 
}
--------------------------------------------------
 Module mytree
  representation  : (not a type)
  public submods  : tree -> mytree.tree
  public resources: 
  public procs    : mytree.printTree<0>
                    mytree.printTree1<0>
                    mytree.tree.=<0>
                    mytree.tree.empty<0>
                    mytree.tree.key<0>
                    mytree.tree.key<1>
                    mytree.tree.left<0>
                    mytree.tree.left<1>
                    mytree.tree.node<0>
                    mytree.tree.node<1>
                    mytree.tree.right<0>
                    mytree.tree.right<1>
                    mytree.tree.~=<0>
  imports         : public use mytree.tree
                    use wybe
  resources       : 
  submodules      : mytree.tree
  procs           : 

printTree > public {inline} (0 calls)
0: mytree.printTree<0>
printTree(t##0:mytree.tree)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    mytree.printTree1<0>(~t##0:mytree.tree, "{":wybe.string, ?prefix##1:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @mytree:nn:nn
    wybe.string.print<0>("}":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @mytree:nn:nn


printTree1 > public (3 calls)
0: mytree.printTree1<0>
printTree1(t##0:mytree.tree, prefix##0:wybe.string, ?prefix##3:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: [(prefix##0,prefix##3)]
  InterestingCallProperties: []
    foreign llvm icmp_ne(t##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool)
    case ~tmp#2##0:wybe.bool of
    0:
        foreign llvm move(~prefix##0:wybe.string, ?prefix##3:wybe.string)

    1:
        foreign lpvm access(t##0:mytree.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?l##0:mytree.tree) @mytree:nn:nn
        foreign lpvm access(t##0:mytree.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?k##0:wybe.int) @mytree:nn:nn
        foreign lpvm access(~t##0:mytree.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?r##0:mytree.tree) @mytree:nn:nn
        mytree.printTree1<0>(~l##0:mytree.tree, ~prefix##0:wybe.string, ?prefix##1:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @mytree:nn:nn
        wybe.string.print<0>(~prefix##1:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @mytree:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~k##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
        foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
        mytree.printTree1<0>(~r##0:mytree.tree, ", ":wybe.string, ?prefix##3:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @mytree:nn:nn


  LLVM code       :

; ModuleID = 'mytree'


 


@mytree.1 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @mytree.0 to i64) }


@mytree.3 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @mytree.2 to i64) }


@mytree.5 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @mytree.4 to i64) }


@mytree.4 =    constant [?? x i8] c", \00"


@mytree.0 =    constant [?? x i8] c"{\00"


@mytree.2 =    constant [?? x i8] c"}\00"


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"mytree.printTree<0>"(i64  %"t##0")    {
entry:
  %0 = tail call fastcc  i64  @"mytree.printTree1<0>"(i64  %"t##0", i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @mytree.1, i32 0, i32 0) to i64))  
  musttail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @mytree.3, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  i64 @"mytree.printTree1<0>"(i64  %"t##0", i64  %"prefix##0")    {
entry:
  %0 = icmp ne i64 %"t##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"t##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"t##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"t##0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = tail call fastcc  i64  @"mytree.printTree1<0>"(i64  %3, i64  %"prefix##0")  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  %12)  
  tail call ccc  void  @print_int(i64  %7)  
  %13 = musttail call fastcc  i64  @"mytree.printTree1<0>"(i64  %11, i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @mytree.5, i32 0, i32 0) to i64))  
  ret i64 %13 
if.else:
  ret i64 %"prefix##0" 
}
--------------------------------------------------
 Module mytree.tree
  representation  : address
  public submods  : 
  public resources: 
  public procs    : mytree.tree.=<0>
                    mytree.tree.empty<0>
                    mytree.tree.key<0>
                    mytree.tree.key<1>
                    mytree.tree.left<0>
                    mytree.tree.left<1>
                    mytree.tree.node<0>
                    mytree.tree.node<1>
                    mytree.tree.right<0>
                    mytree.tree.right<1>
                    mytree.tree.~=<0>
  imports         : use mytree
                    use wybe
  resources       : 
  procs           : 

= > public (7 calls)
0: mytree.tree.=<0>
=(#left##0:mytree.tree, #right##0:mytree.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:mytree.tree, ~#right##0:mytree.tree, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:mytree.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#left##0:mytree.tree) @mytree:nn:nn
        foreign lpvm access(#left##0:mytree.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#key##0:wybe.int) @mytree:nn:nn
        foreign lpvm access(~#left##0:mytree.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#right##0:mytree.tree) @mytree:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
        case ~tmp#10##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:mytree.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#left##0:mytree.tree) @mytree:nn:nn
            foreign lpvm access(#right##0:mytree.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#key##0:wybe.int) @mytree:nn:nn
            foreign lpvm access(~#right##0:mytree.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#right##0:mytree.tree) @mytree:nn:nn
            mytree.tree.=<0>(~#left#left##0:mytree.tree, ~#right#left##0:mytree.tree, ?tmp#4##0:wybe.bool) #2
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#key##0:wybe.int, ~#right#key##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
                case ~tmp#5##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    mytree.tree.=<0>(~#left#right##0:mytree.tree, ~#right#right##0:mytree.tree, ?#success##0:wybe.bool) #4






empty > public {inline} (0 calls)
0: mytree.tree.empty<0>
empty(?#result##0:mytree.tree)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:mytree.tree, ?#result##0:mytree.tree)


key > public {inline} (0 calls)
0: mytree.tree.key<0>
key(#rec##0:mytree.tree, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:mytree.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @mytree:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

key > public {inline} (0 calls)
1: mytree.tree.key<1>
key(#rec##0:mytree.tree, ?#rec##1:mytree.tree, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:mytree.tree, ?#rec##1:mytree.tree)

    1:
        foreign lpvm mutate(~#rec##0:mytree.tree, ?#rec##1:mytree.tree, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @mytree:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



left > public {inline} (0 calls)
0: mytree.tree.left<0>
left(#rec##0:mytree.tree, ?#result##0:mytree.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:mytree.tree, ?#result##0:mytree.tree)

    1:
        foreign lpvm access(~#rec##0:mytree.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:mytree.tree) @mytree:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

left > public {inline} (0 calls)
1: mytree.tree.left<1>
left(#rec##0:mytree.tree, ?#rec##1:mytree.tree, #field##0:mytree.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:mytree.tree, ?#rec##1:mytree.tree)

    1:
        foreign lpvm mutate(~#rec##0:mytree.tree, ?#rec##1:mytree.tree, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:mytree.tree) @mytree:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



node > public {inline} (0 calls)
0: mytree.tree.node<0>
node(left##0:mytree.tree, key##0:wybe.int, right##0:mytree.tree, ?#result##0:mytree.tree)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:mytree.tree) @mytree:nn:nn
    foreign lpvm mutate(~#rec##0:mytree.tree, ?#rec##1:mytree.tree, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~left##0:mytree.tree) @mytree:nn:nn
    foreign lpvm mutate(~#rec##1:mytree.tree, ?#rec##2:mytree.tree, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~key##0:wybe.int) @mytree:nn:nn
    foreign lpvm mutate(~#rec##2:mytree.tree, ?#result##0:mytree.tree, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~right##0:mytree.tree) @mytree:nn:nn
node > public {inline} (16 calls)
1: mytree.tree.node<1>
node(?left##0:mytree.tree, ?key##0:wybe.int, ?right##0:mytree.tree, #result##0:mytree.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:mytree.tree, ?left##0:mytree.tree)
        foreign llvm move(undef:wybe.int, ?key##0:wybe.int)
        foreign llvm move(undef:mytree.tree, ?right##0:mytree.tree)

    1:
        foreign lpvm access(#result##0:mytree.tree, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?left##0:mytree.tree) @mytree:nn:nn
        foreign lpvm access(#result##0:mytree.tree, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?key##0:wybe.int) @mytree:nn:nn
        foreign lpvm access(~#result##0:mytree.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?right##0:mytree.tree) @mytree:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



right > public {inline} (0 calls)
0: mytree.tree.right<0>
right(#rec##0:mytree.tree, ?#result##0:mytree.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:mytree.tree, ?#result##0:mytree.tree)

    1:
        foreign lpvm access(~#rec##0:mytree.tree, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:mytree.tree) @mytree:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

right > public {inline} (0 calls)
1: mytree.tree.right<1>
right(#rec##0:mytree.tree, ?#rec##1:mytree.tree, #field##0:mytree.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:mytree.tree, ?#rec##1:mytree.tree)

    1:
        foreign lpvm mutate(~#rec##0:mytree.tree, ?#rec##1:mytree.tree, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:mytree.tree) @mytree:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: mytree.tree.~=<0>
~=(#left##0:mytree.tree, #right##0:mytree.tree, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    mytree.tree.=<0>(~#left##0:mytree.tree, ~#right##0:mytree.tree, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'mytree.tree'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"mytree.tree.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp ne i64 %"#left##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#left##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"#left##0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = icmp ne i64 %"#right##0", 0 
  br i1 %12, label %if.then1, label %if.else1 
if.else:
  %27 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %27 
if.then1:
  %13 = inttoptr i64 %"#right##0" to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = add   i64 %"#right##0", 8 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  %19 = load  i64, i64* %18 
  %20 = add   i64 %"#right##0", 16 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  %23 = load  i64, i64* %22 
  %24 = tail call fastcc  i1  @"mytree.tree.=<0>"(i64  %3, i64  %15)  
  br i1 %24, label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %25 = icmp eq i64 %7, %19 
  br i1 %25, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %26 = musttail call fastcc  i1  @"mytree.tree.=<0>"(i64  %11, i64  %23)  
  ret i1 %26 
if.else3:
  ret i1 0 
}


define external fastcc  i64 @"mytree.tree.empty<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"mytree.tree.key<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"mytree.tree.key<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  store  i64 %"#field##0", i64* %9 
  %10 = insertvalue {i64, i1} undef, i64 %3, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else:
  %12 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"mytree.tree.left<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"mytree.tree.left<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %3, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  i64 @"mytree.tree.node<0>"(i64  %"left##0", i64  %"key##0", i64  %"right##0")    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"left##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"key##0", i64* %7 
  %8 = add   i64 %2, 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"right##0", i64* %10 
  ret i64 %2 
}


define external fastcc  {i64, i64, i64, i1} @"mytree.tree.node<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#result##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#result##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"#result##0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i64, i64, i1} undef, i64 %3, 0 
  %13 = insertvalue {i64, i64, i64, i1} %12, i64 %7, 1 
  %14 = insertvalue {i64, i64, i64, i1} %13, i64 %11, 2 
  %15 = insertvalue {i64, i64, i64, i1} %14, i1 1, 3 
  ret {i64, i64, i64, i1} %15 
if.else:
  %16 = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i64, i64, i1} %16, i64 undef, 1 
  %18 = insertvalue {i64, i64, i64, i1} %17, i64 undef, 2 
  %19 = insertvalue {i64, i64, i64, i1} %18, i1 0, 3 
  ret {i64, i64, i64, i1} %19 
}


define external fastcc  {i64, i1} @"mytree.tree.right<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 16 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"mytree.tree.right<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 16 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  store  i64 %"#field##0", i64* %9 
  %10 = insertvalue {i64, i1} undef, i64 %3, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else:
  %12 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i1 @"mytree.tree.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = tail call fastcc  i1  @"mytree.tree.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}

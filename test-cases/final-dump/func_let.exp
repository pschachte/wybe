======================================================================
AFTER EVERYTHING:
 Module func_let
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : func_let.<0>
                    func_let.quad<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: func_let.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
    foreign c print_int(40:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn


quad > public {inline} (1 calls)
0: func_let.quad<0>
quad(x##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~x##0:wybe.int, ~x##0:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
    foreign llvm add(~tmp#0##0:wybe.int, ~tmp#0##0:wybe.int, ?#result##0:wybe.int) @int:nn:nn

  LLVM code       :

; ModuleID = 'func_let'


 


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"func_let.<0>"() alwaysinline   {
entry:
  tail call ccc  void  @print_int(i64  40)  
  ret void 
}


define external fastcc  i64 @"func_let.quad<0>"(i64  %"x##0") alwaysinline   {
entry:
  %0 = add   i64 %"x##0", %"x##0" 
  %1 = add   i64 %0, %0 
  ret i64 %1 
}

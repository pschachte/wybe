======================================================================
AFTER EVERYTHING:
 Module need
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : need.<0>
                    need.iota<0>
                    need.need<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: need.<0>
()<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    need.need<0>(need.gen#1<1><>:{impure}()) #0 @need:nn:nn


gen#1 > {impure} (1 calls)
0: need.gen#1<0>
gen#1()<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    need.iota<0>(1000:wybe.int, outByReference l##0:wybe.list(wybe.int)) #0 @need:nn:nn
gen#1 > {impure} (1 calls)
1: need.gen#1<1>
gen#1()<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    need.gen#1<0> #0


iota > public (2 calls)
0: need.iota<0>
iota(n##0:wybe.int, outByReference #result##0:wybe.list(wybe.int))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sle(n##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm sub(n##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @int:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#12##0:wybe.list(T)) @list:nn:nn
        foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#13##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~n##0:T) @list:nn:nn
        need.iota<0>(~tmp#4##0:wybe.int, outByReference tmp#3##0:wybe.list(wybe.int)) #3 @need:nn:nn
        foreign lpvm mutate(~tmp#13##0:wybe.list(T), ?#result##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:wybe.list(T)) @list:nn:nn

    1:
        foreign llvm move(0:wybe.list(wybe.int), ?#result##0:wybe.list(wybe.int)) @need:nn:nn



need > public {impure} (1 calls)
0: need.need<0>
need(stmt##0:{impure}())<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~stmt##0:{impure}() #0 @need:nn:nn

  LLVM code       :

; ModuleID = 'need'


 


@need.0 =    constant [1 x i64] [i64 ptrtoint (void (i64)* @"need.gen#1<1>" to i64)]


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"need.<0>"() alwaysinline   {
entry:
  tail call fastcc  void  @"need.need<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @need.0, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  void @"need.gen#1<0>"()    {
entry:
  %0 = alloca i64 
   call fastcc  void  @"need.iota<0>"(i64  1000, i64*  %0)  
  ret void 
}


define external fastcc  void @"need.gen#1<1>"(i64  %"#env##0")    {
entry:
  tail call fastcc  void  @"need.gen#1<0>"()  
  ret void 
}


define external fastcc  void @"need.iota<0>"(i64  %"n##0", i64*  %"#result##0")    {
entry:
  %0 = icmp sle i64 %"n##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.else:
  %1 = sub   i64 %"n##0", 1 
  %2 = trunc i64 16 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"n##0", i64* %5 
  %6 = add   i64 %4, 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %4, i64* %"#result##0" 
  musttail call fastcc  void  @"need.iota<0>"(i64  %1, i64*  %7)  
  ret void 
}


define external fastcc  void @"need.need<0>"(i64  %"stmt##0")    {
entry:
  %0 = inttoptr i64 %"stmt##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to void (i64)* 
  tail call fastcc  void  %2(i64  %"stmt##0")  
  ret void 
}

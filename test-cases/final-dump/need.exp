======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module need
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : need.<0>
                    need.iota<0>
                    need.need<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: need.<0>
()<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    need.#anon#1<0> #0 @need:nn:nn


proc #anon#1 > {inline,impure} (1 calls)
0: need.#anon#1<0>
#anon#1()<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    need.iota<0>(1000:wybe.int, outByReference l##0:wybe.list(wybe.int)) #0 @need:nn:nn
proc #anon#1 > {inline,impure} (1 calls)
1: need.#anon#1<1>
#anon#1()<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    need.iota<0>(1000:wybe.int, outByReference tmp#0##0:wybe.list(wybe.int)) #1 @need:nn:nn


proc iota > public (2 calls)
0: need.iota<0>
iota(n##0:wybe.int, outByReference #result##0:wybe.list(wybe.int))<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sle(n##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @need:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm sub(n##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @need:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#12##0:wybe.list(T)) @need:nn:nn
        foreign lpvm mutate(~tmp#12##0:wybe.list(T), ?tmp#13##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~n##0:T) @need:nn:nn
        need.iota<0>(~tmp#4##0:wybe.int, outByReference tmp#3##0:wybe.list(wybe.int)) #3 @need:nn:nn
        foreign lpvm mutate(~tmp#13##0:wybe.list(T), ?#result##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#3##0:wybe.list(T)) @need:nn:nn

    1:
        foreign llvm move(0:wybe.list(wybe.int), ?#result##0:wybe.list(wybe.int)) @need:nn:nn



proc need > public {inline,semipure} (1 calls)
0: need.need<0>
need(stmt##0:{impure}())<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~stmt##0:{impure}() #0 @need:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'need'

source_filename = "!ROOT!/final-dump/need.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"need.<0>"() {
  tail call fastcc void @"need.#anon#1<0>"()
  ret void
}

define external fastcc void @"need.#anon#1<0>"() {
  %"tmp#1##0" = alloca i8, i64 8, align 8
  call fastcc void @"need.iota<0>"(i64 1000, ptr %"tmp#1##0")
  %"l##0" = load i64, ptr %"tmp#1##0"
  ret void
}

define external fastcc void @"need.#anon#1<1>"(i64 %"#env##0") {
  %"tmp#1##0" = alloca i8, i64 8, align 8
  call fastcc void @"need.iota<0>"(i64 1000, ptr %"tmp#1##0")
  %"tmp#0##0" = load i64, ptr %"tmp#1##0"
  ret void
}

define external fastcc void @"need.iota<0>"(i64 %"n##0", ptr %"tmp#14##0") {
  %"tmp#5##0" = icmp sle i64 %"n##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  store i64 0, ptr %"tmp#14##0"
  ret void
if.else.0:
  %"tmp#4##0" = sub i64 %"n##0", 1
  %"tmp#15##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#12##0" = ptrtoint ptr %"tmp#15##0" to i64
  %"tmp#16##0" = inttoptr i64 %"tmp#12##0" to ptr
  store i64 %"n##0", ptr %"tmp#16##0"
  store i64 %"tmp#12##0", ptr %"tmp#14##0"
  %"tmp#17##0" = add i64 %"tmp#12##0", 8
  %"tmp#18##0" = inttoptr i64 %"tmp#17##0" to ptr
  musttail call fastcc void @"need.iota<0>"(i64 %"tmp#4##0", ptr %"tmp#18##0")
  ret void
}

define external fastcc void @"need.need<0>"(i64 %"stmt##0") {
  %"tmp#1##0" = inttoptr i64 %"stmt##0" to ptr
  %"tmp#0##0" = load ptr, ptr %"tmp#1##0"
  tail call fastcc void %"tmp#0##0"(i64 %"stmt##0")
  ret void
}

======================================================================
AFTER EVERYTHING:
 Module student
  public submods  : 
  public types    : course: (student.course,Just address)
                    student: (student.student,Just address)
  public resources: 
  public procs    : student.<0>
                    student.printStudent<0>
                    student.course./=<0>
                    student.course.=<0>
                    student.course.code<0>
                    student.course.code<1>
                    student.course.course<0>
                    student.course.course<1>
                    student.course.name<0>
                    student.course.name<1>
                    student.student./=<0>
                    student.student.=<0>
                    student.student.id<0>
                    student.student.id<1>
                    student.student.major<0>
                    student.student.major<1>
                    student.student.student<0>
                    student.student.student<1>
  imports         : public use student.course
                    public use student.student
                    use wybe
  types           : course/public  is address { course(code:int, name:string) @student:1:24  }  @student:1:5, student/public  is address { student(id:int, major:course) @student:2:24  }  @student:2:5
  resources       : 
  submodules      : student.course, student.student
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$4#0:student.course)
    foreign lpvm mutate(~tmp$4#0:student.course, ?tmp$5#0:student.course, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 90048:wybe.int)
    foreign lpvm mutate(~tmp$5#0:student.course, ?tmp$6#0:student.course, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, "Declarative Programming":wybe.string)
    foreign lpvm alloc(16:wybe.int, ?tmp$9#0:student.student)
    foreign lpvm mutate(~tmp$9#0:student.student, ?tmp$10#0:student.student, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 12345:wybe.int)
    foreign lpvm mutate(~tmp$10#0:student.student, ?tmp$11#0:student.student, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$6#0:student.course)
    student.printStudent<0>(~tmp$11#0:student.student, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @student:14:2


printStudent > public (1 calls)
0: printStudent(stu#0:student.student, io#0:wybe.phantom, ?io#6:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("student id: ":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign lpvm access(stu#0:student.student, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:wybe.phantom, ?tmp$9#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$9#0:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign lpvm access(~stu#0:student.student, 8:wybe.int, ?tmp$1#0:student.course)
    foreign c print_string("course code: ":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    foreign lpvm access(tmp$1#0:student.course, 0:wybe.int, ?tmp$2#0:wybe.int)
    foreign c print_int(~tmp$2#0:wybe.int, ~#io#3:wybe.phantom, ?tmp$16#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$16#0:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
    foreign c print_string("course name: ":wybe.string, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @wybe:nn:nn
    foreign lpvm access(~tmp$1#0:student.course, 8:wybe.int, ?tmp$3#0:wybe.string)
    foreign c print_string(~tmp$3#0:wybe.string, ~#io#5:wybe.phantom, ?tmp$22#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$22#0:wybe.phantom, ?#io#6:wybe.phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'student'


 


@student.9 =    constant [24 x i8] c"Declarative Programming\00"


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external ccc  void @print_int(i64)    


@student.33 =    constant [14 x i8] c"course name: \00"


@student.28 =    constant [14 x i8] c"course code: \00"


@student.19 =    constant [13 x i8] c"student id: \00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"student.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 90048, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %10 = ptrtoint i8* getelementptr inbounds ([24 x i8], [24 x i8]* @student.9, i32 0, i32 0) to i64 
  store  i64 %10, i64* %8 
  %11 = trunc i64 16 to i32  
  %12 = tail call ccc  i8*  @wybe_malloc(i32  %11)  
  %13 = ptrtoint i8* %12 to i64 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 12345, i64* %15 
  %16 = add   i64 %13, 8 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 %3, i64* %18 
  tail call fastcc  void  @"student.printStudent<0>"(i64  %13)  
  ret void 
}


define external fastcc  void @"student.printStudent<0>"(i64  %"stu#0")    {
entry:
  %20 = ptrtoint i8* getelementptr inbounds ([13 x i8], [13 x i8]* @student.19, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %20)  
  %21 = inttoptr i64 %"stu#0" to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  %23 = load  i64, i64* %22 
  tail call ccc  void  @print_int(i64  %23)  
  tail call ccc  void  @putchar(i8  10)  
  %24 = add   i64 %"stu#0", 8 
  %25 = inttoptr i64 %24 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  %27 = load  i64, i64* %26 
  %29 = ptrtoint i8* getelementptr inbounds ([14 x i8], [14 x i8]* @student.28, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %29)  
  %30 = inttoptr i64 %27 to i64* 
  %31 = getelementptr  i64, i64* %30, i64 0 
  %32 = load  i64, i64* %31 
  tail call ccc  void  @print_int(i64  %32)  
  tail call ccc  void  @putchar(i8  10)  
  %34 = ptrtoint i8* getelementptr inbounds ([14 x i8], [14 x i8]* @student.33, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %34)  
  %35 = add   i64 %27, 8 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  tail call ccc  void  @print_string(i64  %38)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module student.course
  public submods  : 
  public types    : 
  public resources: 
  public procs    : student.course./=<0>
                    student.course.=<0>
                    student.course.code<0>
                    student.course.code<1>
                    student.course.course<0>
                    student.course.course<1>
                    student.course.name<0>
                    student.course.name<1>
  imports         : use student
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline test (0 calls)
0: /=($left#0:student.course, $right#0:student.course, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:student.course, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign lpvm access(~$left#0:student.course, 8:wybe.int, ?tmp$5#0:wybe.string)
    foreign lpvm access($right#0:student.course, 0:wybe.int, ?tmp$6#0:wybe.int)
    foreign lpvm access(~$right#0:student.course, 8:wybe.int, ?tmp$7#0:wybe.string)
    foreign llvm icmp eq(~tmp$4#0:wybe.int, ~tmp$6#0:wybe.int, ?tmp$8#0:wybe.bool) @wybe:nn:nn
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign c strcmp(~tmp$5#0:wybe.string, ~tmp$7#0:wybe.string, ?tmp$9#0:wybe.int) @wybe:nn:nn
        foreign llvm icmp eq(~tmp$9#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)




= > public inline test (6 calls)
0: =($left#0:student.course, $right#0:student.course, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:student.course, 0:wybe.int, ?$left$code#0:wybe.int)
    foreign lpvm access(~$left#0:student.course, 8:wybe.int, ?$left$name#0:wybe.string)
    foreign lpvm access($right#0:student.course, 0:wybe.int, ?$right$code#0:wybe.int)
    foreign lpvm access(~$right#0:student.course, 8:wybe.int, ?$right$name#0:wybe.string)
    foreign llvm icmp eq(~$left$code#0:wybe.int, ~$right$code#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign c strcmp(~$left$name#0:wybe.string, ~$right$name#0:wybe.string, ?tmp$10#0:wybe.int) @wybe:nn:nn
        foreign llvm icmp eq(~tmp$10#0:wybe.int, 0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



code > public inline (0 calls)
0: code($rec#0:student.course, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:student.course, 0:wybe.int, ?$#0:wybe.int)
code > public inline (0 calls)
1: code($rec#0:student.course, ?$rec#1:student.course, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate(~%$rec#0:student.course, ?%$rec#1:student.course, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


course > public inline (0 calls)
0: course(code#0:wybe.int, name#0:wybe.string, ?$#0:student.course):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!student.course)
    foreign lpvm mutate(~%$rec#0:student.course, ?%$rec#1:student.course, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~code#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:student.course, ?%$#0:student.course, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~name#0:wybe.string)
course > public inline (4 calls)
1: course(?code#0:wybe.int, ?name#0:wybe.string, $#0:student.course):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($#0:student.course, 0:wybe.int, ?code#0:wybe.int)
    foreign lpvm access(~$#0:student.course, 8:wybe.int, ?name#0:wybe.string)


name > public inline (0 calls)
0: name($rec#0:student.course, ?$#0:wybe.string):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:student.course, 8:wybe.int, ?$#0:wybe.string)
name > public inline (0 calls)
1: name($rec#0:student.course, ?$rec#1:student.course, $field#0:wybe.string):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:student.course, ?%$rec#1:student.course, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.string)

  LLVM code       :

; ModuleID = 'student.course'


 


declare external ccc  i64 @strcmp(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"student.course./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"tmp$8#0" = icmp eq i64 %3, %10 
  br i1 %"tmp$8#0", label %if.then, label %if.else 
if.then:
  %"tmp$9#0" = tail call ccc  i64  @strcmp(i64  %7, i64  %14)  
  %"tmp$1#0" = icmp eq i64 %"tmp$9#0", 0 
  br i1 %"tmp$1#0", label %if.then1, label %if.else1 
if.else:
  ret i1 1 
if.then1:
  ret i1 0 
if.else1:
  ret i1 1 
}


define external fastcc  i1 @"student.course.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %15 = inttoptr i64 %"$left#0" to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = add   i64 %"$left#0", 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = inttoptr i64 %"$right#0" to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %25 = add   i64 %"$right#0", 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %"tmp$2#0" = icmp eq i64 %17, %24 
  br i1 %"tmp$2#0", label %if.then, label %if.else 
if.then:
  %"tmp$10#0" = tail call ccc  i64  @strcmp(i64  %21, i64  %28)  
  %"$$#0" = icmp eq i64 %"tmp$10#0", 0 
  ret i1 %"$$#0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"student.course.code<0>"(i64  %"$rec#0")    {
entry:
  %29 = inttoptr i64 %"$rec#0" to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  %31 = load  i64, i64* %30 
  ret i64 %31 
}


define external fastcc  i64 @"student.course.code<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %32 = trunc i64 16 to i32  
  %33 = tail call ccc  i8*  @wybe_malloc(i32  %32)  
  %34 = ptrtoint i8* %33 to i64 
  %35 = inttoptr i64 %34 to i8* 
  %36 = inttoptr i64 %"$rec#0" to i8* 
  %37 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %35, i8*  %36, i32  %37, i32  8, i1  0)  
  %38 = inttoptr i64 %34 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  store  i64 %"$field#0", i64* %39 
  ret i64 %34 
}


define external fastcc  i64 @"student.course.course<0>"(i64  %"code#0", i64  %"name#0")    {
entry:
  %40 = trunc i64 16 to i32  
  %41 = tail call ccc  i8*  @wybe_malloc(i32  %40)  
  %42 = ptrtoint i8* %41 to i64 
  %43 = inttoptr i64 %42 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  store  i64 %"code#0", i64* %44 
  %45 = add   i64 %42, 8 
  %46 = inttoptr i64 %45 to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  store  i64 %"name#0", i64* %47 
  ret i64 %42 
}


define external fastcc  {i64, i64} @"student.course.course<1>"(i64  %"$#0")    {
entry:
  %48 = inttoptr i64 %"$#0" to i64* 
  %49 = getelementptr  i64, i64* %48, i64 0 
  %50 = load  i64, i64* %49 
  %51 = add   i64 %"$#0", 8 
  %52 = inttoptr i64 %51 to i64* 
  %53 = getelementptr  i64, i64* %52, i64 0 
  %54 = load  i64, i64* %53 
  %55 = insertvalue {i64, i64} undef, i64 %50, 0 
  %56 = insertvalue {i64, i64} %55, i64 %54, 1 
  ret {i64, i64} %56 
}


define external fastcc  i64 @"student.course.name<0>"(i64  %"$rec#0")    {
entry:
  %57 = add   i64 %"$rec#0", 8 
  %58 = inttoptr i64 %57 to i64* 
  %59 = getelementptr  i64, i64* %58, i64 0 
  %60 = load  i64, i64* %59 
  ret i64 %60 
}


define external fastcc  i64 @"student.course.name<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %61 = trunc i64 16 to i32  
  %62 = tail call ccc  i8*  @wybe_malloc(i32  %61)  
  %63 = ptrtoint i8* %62 to i64 
  %64 = inttoptr i64 %63 to i8* 
  %65 = inttoptr i64 %"$rec#0" to i8* 
  %66 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %64, i8*  %65, i32  %66, i32  8, i1  0)  
  %67 = add   i64 %63, 8 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  store  i64 %"$field#0", i64* %69 
  ret i64 %63 
}
--------------------------------------------------
 Module student.student
  public submods  : 
  public types    : 
  public resources: 
  public procs    : student.student./=<0>
                    student.student.=<0>
                    student.student.id<0>
                    student.student.id<1>
                    student.student.major<0>
                    student.student.major<1>
                    student.student.student<0>
                    student.student.student<1>
  imports         : use student
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline test (0 calls)
0: /=($left#0:student.student, $right#0:student.student, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:student.student, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign lpvm access(~$left#0:student.student, 8:wybe.int, ?tmp$5#0:student.course)
    foreign lpvm access($right#0:student.student, 0:wybe.int, ?tmp$6#0:wybe.int)
    foreign lpvm access(~$right#0:student.student, 8:wybe.int, ?tmp$7#0:student.course)
    foreign llvm icmp eq(~tmp$4#0:wybe.int, ~tmp$6#0:wybe.int, ?tmp$8#0:wybe.bool) @wybe:nn:nn
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(tmp$5#0:student.course, 0:wybe.int, ?tmp$9#0:wybe.int)
        foreign lpvm access(~tmp$5#0:student.course, 8:wybe.int, ?tmp$10#0:wybe.string)
        foreign lpvm access(tmp$7#0:student.course, 0:wybe.int, ?tmp$11#0:wybe.int)
        foreign lpvm access(~tmp$7#0:student.course, 8:wybe.int, ?tmp$12#0:wybe.string)
        foreign llvm icmp eq(~tmp$11#0:wybe.int, ~tmp$9#0:wybe.int, ?tmp$13#0:wybe.bool) @wybe:nn:nn
        case ~tmp$13#0:wybe.bool of
        0:
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign c strcmp(~tmp$10#0:wybe.string, ~tmp$12#0:wybe.string, ?tmp$14#0:wybe.int) @wybe:nn:nn
            foreign llvm icmp eq(~tmp$14#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
            case ~tmp$1#0:wybe.bool of
            0:
                foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)





= > public inline test (6 calls)
0: =($left#0:student.student, $right#0:student.student, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:student.student, 0:wybe.int, ?$left$id#0:wybe.int)
    foreign lpvm access(~$left#0:student.student, 8:wybe.int, ?$left$major#0:student.course)
    foreign lpvm access($right#0:student.student, 0:wybe.int, ?$right$id#0:wybe.int)
    foreign lpvm access(~$right#0:student.student, 8:wybe.int, ?$right$major#0:student.course)
    foreign llvm icmp eq(~$left$id#0:wybe.int, ~$right$id#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($left$major#0:student.course, 0:wybe.int, ?tmp$10#0:wybe.int)
        foreign lpvm access(~$left$major#0:student.course, 8:wybe.int, ?tmp$11#0:wybe.string)
        foreign lpvm access($right$major#0:student.course, 0:wybe.int, ?tmp$12#0:wybe.int)
        foreign lpvm access(~$right$major#0:student.course, 8:wybe.int, ?tmp$13#0:wybe.string)
        foreign llvm icmp eq(~tmp$10#0:wybe.int, ~tmp$12#0:wybe.int, ?tmp$14#0:wybe.bool) @wybe:nn:nn
        case ~tmp$14#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp$3#0:wybe.bool)
            foreign llvm move(~tmp$3#0:!wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign c strcmp(~tmp$11#0:wybe.string, ~tmp$13#0:wybe.string, ?tmp$15#0:wybe.int) @wybe:nn:nn
            foreign llvm icmp eq(~tmp$15#0:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.bool) @wybe:nn:nn
            foreign llvm move(~tmp$3#0:!wybe.bool, ?$$#0:wybe.bool)




id > public inline (0 calls)
0: id($rec#0:student.student, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:student.student, 0:wybe.int, ?$#0:wybe.int)
id > public inline (0 calls)
1: id($rec#0:student.student, ?$rec#1:student.student, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate(~%$rec#0:student.student, ?%$rec#1:student.student, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


major > public inline (0 calls)
0: major($rec#0:student.student, ?$#0:student.course):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:student.student, 8:wybe.int, ?$#0:student.course)
major > public inline (0 calls)
1: major($rec#0:student.student, ?$rec#1:student.student, $field#0:student.course):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:student.student, ?%$rec#1:student.student, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:student.course)


student > public inline (0 calls)
0: student(id#0:wybe.int, major#0:student.course, ?$#0:student.student):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!student.student)
    foreign lpvm mutate(~%$rec#0:student.student, ?%$rec#1:student.student, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~id#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:student.student, ?%$#0:student.student, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~major#0:student.course)
student > public inline (4 calls)
1: student(?id#0:wybe.int, ?major#0:student.course, $#0:student.student):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($#0:student.student, 0:wybe.int, ?id#0:wybe.int)
    foreign lpvm access(~$#0:student.student, 8:wybe.int, ?major#0:student.course)

  LLVM code       :

; ModuleID = 'student.student'


 


declare external ccc  i64 @strcmp(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"student.student./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"tmp$8#0" = icmp eq i64 %3, %10 
  br i1 %"tmp$8#0", label %if.then, label %if.else 
if.then:
  %15 = inttoptr i64 %7 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = add   i64 %7, 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = inttoptr i64 %14 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %25 = add   i64 %14, 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %"tmp$13#0" = icmp eq i64 %24, %17 
  br i1 %"tmp$13#0", label %if.then1, label %if.else1 
if.else:
  ret i1 1 
if.then1:
  %"tmp$14#0" = tail call ccc  i64  @strcmp(i64  %21, i64  %28)  
  %"tmp$1#0" = icmp eq i64 %"tmp$14#0", 0 
  br i1 %"tmp$1#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 1 
if.then2:
  ret i1 0 
if.else2:
  ret i1 1 
}


define external fastcc  i1 @"student.student.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %29 = inttoptr i64 %"$left#0" to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  %31 = load  i64, i64* %30 
  %32 = add   i64 %"$left#0", 8 
  %33 = inttoptr i64 %32 to i64* 
  %34 = getelementptr  i64, i64* %33, i64 0 
  %35 = load  i64, i64* %34 
  %36 = inttoptr i64 %"$right#0" to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %39 = add   i64 %"$right#0", 8 
  %40 = inttoptr i64 %39 to i64* 
  %41 = getelementptr  i64, i64* %40, i64 0 
  %42 = load  i64, i64* %41 
  %"tmp$2#0" = icmp eq i64 %31, %38 
  br i1 %"tmp$2#0", label %if.then, label %if.else 
if.then:
  %43 = inttoptr i64 %35 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  %45 = load  i64, i64* %44 
  %46 = add   i64 %35, 8 
  %47 = inttoptr i64 %46 to i64* 
  %48 = getelementptr  i64, i64* %47, i64 0 
  %49 = load  i64, i64* %48 
  %50 = inttoptr i64 %42 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  %52 = load  i64, i64* %51 
  %53 = add   i64 %42, 8 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  %56 = load  i64, i64* %55 
  %"tmp$14#0" = icmp eq i64 %45, %52 
  br i1 %"tmp$14#0", label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %"tmp$15#0" = tail call ccc  i64  @strcmp(i64  %49, i64  %56)  
  %"tmp$3#0" = icmp eq i64 %"tmp$15#0", 0 
  ret i1 %"tmp$3#0" 
if.else1:
  ret i1 0 
}


define external fastcc  i64 @"student.student.id<0>"(i64  %"$rec#0")    {
entry:
  %57 = inttoptr i64 %"$rec#0" to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  %59 = load  i64, i64* %58 
  ret i64 %59 
}


define external fastcc  i64 @"student.student.id<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %60 = trunc i64 16 to i32  
  %61 = tail call ccc  i8*  @wybe_malloc(i32  %60)  
  %62 = ptrtoint i8* %61 to i64 
  %63 = inttoptr i64 %62 to i8* 
  %64 = inttoptr i64 %"$rec#0" to i8* 
  %65 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %63, i8*  %64, i32  %65, i32  8, i1  0)  
  %66 = inttoptr i64 %62 to i64* 
  %67 = getelementptr  i64, i64* %66, i64 0 
  store  i64 %"$field#0", i64* %67 
  ret i64 %62 
}


define external fastcc  i64 @"student.student.major<0>"(i64  %"$rec#0")    {
entry:
  %68 = add   i64 %"$rec#0", 8 
  %69 = inttoptr i64 %68 to i64* 
  %70 = getelementptr  i64, i64* %69, i64 0 
  %71 = load  i64, i64* %70 
  ret i64 %71 
}


define external fastcc  i64 @"student.student.major<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %72 = trunc i64 16 to i32  
  %73 = tail call ccc  i8*  @wybe_malloc(i32  %72)  
  %74 = ptrtoint i8* %73 to i64 
  %75 = inttoptr i64 %74 to i8* 
  %76 = inttoptr i64 %"$rec#0" to i8* 
  %77 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %75, i8*  %76, i32  %77, i32  8, i1  0)  
  %78 = add   i64 %74, 8 
  %79 = inttoptr i64 %78 to i64* 
  %80 = getelementptr  i64, i64* %79, i64 0 
  store  i64 %"$field#0", i64* %80 
  ret i64 %74 
}


define external fastcc  i64 @"student.student.student<0>"(i64  %"id#0", i64  %"major#0")    {
entry:
  %81 = trunc i64 16 to i32  
  %82 = tail call ccc  i8*  @wybe_malloc(i32  %81)  
  %83 = ptrtoint i8* %82 to i64 
  %84 = inttoptr i64 %83 to i64* 
  %85 = getelementptr  i64, i64* %84, i64 0 
  store  i64 %"id#0", i64* %85 
  %86 = add   i64 %83, 8 
  %87 = inttoptr i64 %86 to i64* 
  %88 = getelementptr  i64, i64* %87, i64 0 
  store  i64 %"major#0", i64* %88 
  ret i64 %83 
}


define external fastcc  {i64, i64} @"student.student.student<1>"(i64  %"$#0")    {
entry:
  %89 = inttoptr i64 %"$#0" to i64* 
  %90 = getelementptr  i64, i64* %89, i64 0 
  %91 = load  i64, i64* %90 
  %92 = add   i64 %"$#0", 8 
  %93 = inttoptr i64 %92 to i64* 
  %94 = getelementptr  i64, i64* %93, i64 0 
  %95 = load  i64, i64* %94 
  %96 = insertvalue {i64, i64} undef, i64 %91, 0 
  %97 = insertvalue {i64, i64} %96, i64 %95, 1 
  ret {i64, i64} %97 
}

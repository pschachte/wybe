======================================================================
AFTER EVERYTHING:
 Module student
  representation  : (not a type)
  public submods  : course -> student.course
                    student -> student.student
  public resources: 
  public procs    : student.<0>
                    student.printStudent<0>
                    student.course.=<0>
                    student.course.code<0>
                    student.course.code<1>
                    student.course.course<0>
                    student.course.course<1>
                    student.course.name<0>
                    student.course.name<1>
                    student.course.~=<0>
                    student.student.=<0>
                    student.student.id<0>
                    student.student.id<1>
                    student.student.major<0>
                    student.student.major<1>
                    student.student.student<0>
                    student.student.student<1>
                    student.student.~=<0>
  imports         : public use student.course
                    public use student.student
                    use wybe
  resources       : 
  submodules      : student.course, student.student
  procs           : 

module top-level code > public {semipure} (0 calls)
0: student.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(2,(student.printStudent<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#4##0:student.course) @student:nn:nn
    foreign lpvm mutate(~tmp#4##0:student.course, ?tmp#5##0:student.course, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 90048:wybe.int) @student:nn:nn
    foreign lpvm mutate(~tmp#5##0:student.course, ?tmp#6##0:student.course, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, "Declarative Programming":wybe.string) @student:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#9##0:student.student) @student:nn:nn
    foreign lpvm mutate(~tmp#9##0:student.student, ?tmp#10##0:student.student, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 12345:wybe.int) @student:nn:nn
    foreign lpvm mutate(~tmp#10##0:student.student, ?tmp#11##0:student.student, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:student.course) @student:nn:nn
    student.printStudent<0>[410bae77d3](~tmp#11##0:student.student)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @student:nn:nn


proc printStudent > public (1 calls)
0: student.printStudent<0>[410bae77d3]
printStudent(stu##0:student.student)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(10,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 [0]]))]
    wybe.string.print<0>("student id: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @student:nn:nn
    foreign lpvm access(stu##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @student:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign lpvm access(~stu##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:student.course) @student:nn:nn
    wybe.string.print<0>("course code: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @student:nn:nn
    foreign lpvm access(tmp#1##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @student:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#2##0:wybe.int, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("course name: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @student:nn:nn
    foreign lpvm access(~tmp#1##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.string) @student:nn:nn
    wybe.string.print<0>(~tmp#3##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#17##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#17##0:wybe.phantom, ?tmp#18##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#18##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
 [410bae77d3] [NonAliasedParam 0] :
    wybe.string.print<0>("student id: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @student:nn:nn
    foreign lpvm access(stu##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @student:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign lpvm access(~stu##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:student.course) @student:nn:nn
    wybe.string.print<0>("course code: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @student:nn:nn
    foreign lpvm access(tmp#1##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @student:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#2##0:wybe.int, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("course name: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @student:nn:nn
    foreign lpvm access(~tmp#1##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.string) @student:nn:nn
    wybe.string.print<0>[410bae77d3](~tmp#3##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#17##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#17##0:wybe.phantom, ?tmp#18##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#18##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'student'


 


@student.3 =    constant {i64, i64} { i64 12, i64 ptrtoint ([?? x i8]* @student.2 to i64) }


@student.5 =    constant {i64, i64} { i64 13, i64 ptrtoint ([?? x i8]* @student.4 to i64) }


@student.7 =    constant {i64, i64} { i64 13, i64 ptrtoint ([?? x i8]* @student.6 to i64) }


@student.1 =    constant {i64, i64} { i64 23, i64 ptrtoint ([?? x i8]* @student.0 to i64) }


@student.0 =    constant [?? x i8] c"Declarative Programming\00"


@student.4 =    constant [?? x i8] c"course code: \00"


@student.6 =    constant [?? x i8] c"course name: \00"


@student.2 =    constant [?? x i8] c"student id: \00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>[410bae77d3]"(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"student.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 90048, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @student.1, i32 0, i32 0) to i64), i64* %5 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 12345, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %2, i64* %11 
  tail call fastcc  void  @"student.printStudent<0>[410bae77d3]"(i64  %8)  
  ret void 
}


define external fastcc  void @"student.printStudent<0>"(i64  %"stu##0")    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @student.3, i32 0, i32 0) to i64))  
  %0 = inttoptr i64 %"stu##0" to i64* 
  %1 = load  i64, i64* %0 
  tail call ccc  void  @print_int(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  %2 = add   i64 %"stu##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @student.5, i32 0, i32 0) to i64))  
  %5 = inttoptr i64 %4 to i64* 
  %6 = load  i64, i64* %5 
  tail call ccc  void  @print_int(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @student.7, i32 0, i32 0) to i64))  
  %7 = add   i64 %4, 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  %9)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"student.printStudent<0>[410bae77d3]"(i64  %"stu##0")    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @student.3, i32 0, i32 0) to i64))  
  %0 = inttoptr i64 %"stu##0" to i64* 
  %1 = load  i64, i64* %0 
  tail call ccc  void  @print_int(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  %2 = add   i64 %"stu##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @student.5, i32 0, i32 0) to i64))  
  %5 = inttoptr i64 %4 to i64* 
  %6 = load  i64, i64* %5 
  tail call ccc  void  @print_int(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @student.7, i32 0, i32 0) to i64))  
  %7 = add   i64 %4, 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  tail call fastcc  void  @"wybe.string.print<0>[410bae77d3]"(i64  %9)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module student.course
  representation  : address
  public submods  : 
  public resources: 
  public procs    : student.course.=<0>
                    student.course.code<0>
                    student.course.code<1>
                    student.course.course<0>
                    student.course.course<1>
                    student.course.name<0>
                    student.course.name<1>
                    student.course.~=<0>
  imports         : use student
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: student.course.=<0>
=(#left##0:student.course, #right##0:student.course, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#code##0:wybe.int) @student:nn:nn
    foreign lpvm access(~#left##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#name##0:wybe.string) @student:nn:nn
    foreign lpvm access(#right##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#code##0:wybe.int) @student:nn:nn
    foreign lpvm access(~#right##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#name##0:wybe.string) @student:nn:nn
    foreign llvm icmp_eq(~#left#code##0:wybe.int, ~#right#code##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#name##0:wybe.string, ~#right#name##0:wybe.string, ~#left#name##0:wybe.string, ~#right#name##0:wybe.string, ?tmp#9##0:wybe.comparison) #4 @string:nn:nn
        foreign llvm icmp_eq(~tmp#9##0:wybe.comparison, 1:wybe.comparison, ?#success##0:wybe.bool) @comparison:nn:nn



proc code > public {inline} (0 calls)
0: student.course.code<0>
code(#rec##0:student.course, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @student:nn:nn
proc code > public {inline} (0 calls)
1: student.course.code<1>
code(#rec##0:student.course, ?#rec##1:student.course, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:student.course, ?#rec##1:student.course, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @student:nn:nn


proc course > public {inline} (0 calls)
0: student.course.course<0>
course(code##0:wybe.int, name##0:wybe.string, ?#result##0:student.course)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:student.course) @student:nn:nn
    foreign lpvm mutate(~#rec##0:student.course, ?#rec##1:student.course, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~code##0:wybe.int) @student:nn:nn
    foreign lpvm mutate(~#rec##1:student.course, ?#result##0:student.course, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~name##0:wybe.string) @student:nn:nn
proc course > public {inline} (6 calls)
1: student.course.course<1>
course(?code##0:wybe.int, ?name##0:wybe.string, #result##0:student.course)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?code##0:wybe.int) @student:nn:nn
    foreign lpvm access(~#result##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?name##0:wybe.string) @student:nn:nn


proc name > public {inline} (0 calls)
0: student.course.name<0>
name(#rec##0:student.course, ?#result##0:wybe.string)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.string) @student:nn:nn
proc name > public {inline} (0 calls)
1: student.course.name<1>
name(#rec##0:student.course, ?#rec##1:student.course, #field##0:wybe.string)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:student.course, ?#rec##1:student.course, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.string) @student:nn:nn


proc ~= > public {inline} (0 calls)
0: student.course.~=<0>
~=(#left##0:student.course, #right##0:student.course, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @student:nn:nn
    foreign lpvm access(~#left##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.string) @student:nn:nn
    foreign lpvm access(#right##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @student:nn:nn
    foreign lpvm access(~#right##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.string) @student:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~tmp#4##0:wybe.string, ~tmp#6##0:wybe.string, ~tmp#4##0:wybe.string, ~tmp#6##0:wybe.string, ?tmp#8##0:wybe.comparison) #1 @string:nn:nn
        foreign llvm icmp_eq(~tmp#8##0:wybe.comparison, 1:wybe.comparison, ?tmp#0##0:wybe.bool) @comparison:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'student.course'


 


declare external fastcc  i2 @"wybe.string.<=>#cont#2<0>"(i2, i64, i64, i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"student.course.=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = inttoptr i64 %"#right##0" to i64* 
  %6 = load  i64, i64* %5 
  %7 = add   i64 %"#right##0", 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = icmp eq i64 %1, %6 
  br i1 %10, label %if.then, label %if.else 
if.then:
  %11 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %4, i64  %9, i64  %4, i64  %9)  
  %12 = icmp eq i2 %11, 1 
  ret i1 %12 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"student.course.code<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = load  i64, i64* %0 
  ret i64 %1 
}


define external fastcc  i64 @"student.course.code<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  store  i64 %"#field##0", i64* %6 
  ret i64 %2 
}


define external fastcc  i64 @"student.course.course<0>"(i64  %"code##0", i64  %"name##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"code##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"name##0", i64* %5 
  ret i64 %2 
}


define external fastcc  {i64, i64} @"student.course.course<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#result##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i64} undef, i64 %1, 0 
  %6 = insertvalue {i64, i64} %5, i64 %4, 1 
  ret {i64, i64} %6 
}


define external fastcc  i64 @"student.course.name<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"student.course.name<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i1 @"student.course.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = inttoptr i64 %"#right##0" to i64* 
  %6 = load  i64, i64* %5 
  %7 = add   i64 %"#right##0", 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = icmp eq i64 %1, %6 
  br i1 %10, label %if.then, label %if.else 
if.then:
  %11 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %4, i64  %9, i64  %4, i64  %9)  
  %12 = icmp eq i2 %11, 1 
  %13 = xor i1 %12, 1 
  ret i1 %13 
if.else:
  %14 = xor i1 0, 1 
  ret i1 %14 
}
--------------------------------------------------
 Module student.student
  representation  : address
  public submods  : 
  public resources: 
  public procs    : student.student.=<0>
                    student.student.id<0>
                    student.student.id<1>
                    student.student.major<0>
                    student.student.major<1>
                    student.student.student<0>
                    student.student.student<1>
                    student.student.~=<0>
  imports         : use student
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: student.student.=<0>
=(#left##0:student.student, #right##0:student.student, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#id##0:wybe.int) @student:nn:nn
    foreign lpvm access(~#left##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#major##0:student.course) @student:nn:nn
    foreign lpvm access(#right##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#id##0:wybe.int) @student:nn:nn
    foreign lpvm access(~#right##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#major##0:student.course) @student:nn:nn
    foreign llvm icmp_eq(~#left#id##0:wybe.int, ~#right#id##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left#major##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int) @student:nn:nn
        foreign lpvm access(~#left#major##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.string) @student:nn:nn
        foreign lpvm access(#right#major##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#11##0:wybe.int) @student:nn:nn
        foreign lpvm access(~#right#major##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.string) @student:nn:nn
        foreign llvm icmp_eq(~tmp#11##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#13##0:wybe.bool) @int:nn:nn
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~tmp#10##0:wybe.string, ~tmp#12##0:wybe.string, ~tmp#10##0:wybe.string, ~tmp#12##0:wybe.string, ?tmp#14##0:wybe.comparison) #4 @string:nn:nn
            foreign llvm icmp_eq(~tmp#14##0:wybe.comparison, 1:wybe.comparison, ?#success##0:wybe.bool) @comparison:nn:nn




proc id > public {inline} (0 calls)
0: student.student.id<0>
id(#rec##0:student.student, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @student:nn:nn
proc id > public {inline} (0 calls)
1: student.student.id<1>
id(#rec##0:student.student, ?#rec##1:student.student, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:student.student, ?#rec##1:student.student, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @student:nn:nn


proc major > public {inline} (0 calls)
0: student.student.major<0>
major(#rec##0:student.student, ?#result##0:student.course)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:student.course) @student:nn:nn
proc major > public {inline} (0 calls)
1: student.student.major<1>
major(#rec##0:student.student, ?#rec##1:student.student, #field##0:student.course)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:student.student, ?#rec##1:student.student, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:student.course) @student:nn:nn


proc student > public {inline} (0 calls)
0: student.student.student<0>
student(id##0:wybe.int, major##0:student.course, ?#result##0:student.student)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:student.student) @student:nn:nn
    foreign lpvm mutate(~#rec##0:student.student, ?#rec##1:student.student, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~id##0:wybe.int) @student:nn:nn
    foreign lpvm mutate(~#rec##1:student.student, ?#result##0:student.student, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~major##0:student.course) @student:nn:nn
proc student > public {inline} (6 calls)
1: student.student.student<1>
student(?id##0:wybe.int, ?major##0:student.course, #result##0:student.student)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?id##0:wybe.int) @student:nn:nn
    foreign lpvm access(~#result##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?major##0:student.course) @student:nn:nn


proc ~= > public {inline} (0 calls)
0: student.student.~=<0>
~=(#left##0:student.student, #right##0:student.student, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @student:nn:nn
    foreign lpvm access(~#left##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:student.course) @student:nn:nn
    foreign lpvm access(#right##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @student:nn:nn
    foreign lpvm access(~#right##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:student.course) @student:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(tmp#4##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @student:nn:nn
        foreign lpvm access(~tmp#4##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.string) @student:nn:nn
        foreign lpvm access(tmp#6##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @student:nn:nn
        foreign lpvm access(~tmp#6##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#11##0:wybe.string) @student:nn:nn
        foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#12##0:wybe.bool) @int:nn:nn
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~tmp#9##0:wybe.string, ~tmp#11##0:wybe.string, ~tmp#9##0:wybe.string, ~tmp#11##0:wybe.string, ?tmp#13##0:wybe.comparison) #1 @string:nn:nn
            foreign llvm icmp_eq(~tmp#13##0:wybe.comparison, 1:wybe.comparison, ?tmp#0##0:wybe.bool) @comparison:nn:nn
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)



  LLVM code       :

; ModuleID = 'student.student'


 


declare external fastcc  i2 @"wybe.string.<=>#cont#2<0>"(i2, i64, i64, i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"student.student.=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = inttoptr i64 %"#right##0" to i64* 
  %6 = load  i64, i64* %5 
  %7 = add   i64 %"#right##0", 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = icmp eq i64 %1, %6 
  br i1 %10, label %if.then, label %if.else 
if.then:
  %11 = inttoptr i64 %4 to i64* 
  %12 = load  i64, i64* %11 
  %13 = add   i64 %4, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = load  i64, i64* %14 
  %16 = inttoptr i64 %9 to i64* 
  %17 = load  i64, i64* %16 
  %18 = add   i64 %9, 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = load  i64, i64* %19 
  %21 = icmp eq i64 %17, %12 
  br i1 %21, label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %22 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %15, i64  %20, i64  %15, i64  %20)  
  %23 = icmp eq i2 %22, 1 
  ret i1 %23 
if.else1:
  ret i1 0 
}


define external fastcc  i64 @"student.student.id<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = load  i64, i64* %0 
  ret i64 %1 
}


define external fastcc  i64 @"student.student.id<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  store  i64 %"#field##0", i64* %6 
  ret i64 %2 
}


define external fastcc  i64 @"student.student.major<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"student.student.major<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i64 @"student.student.student<0>"(i64  %"id##0", i64  %"major##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"id##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"major##0", i64* %5 
  ret i64 %2 
}


define external fastcc  {i64, i64} @"student.student.student<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#result##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i64} undef, i64 %1, 0 
  %6 = insertvalue {i64, i64} %5, i64 %4, 1 
  ret {i64, i64} %6 
}


define external fastcc  i1 @"student.student.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = inttoptr i64 %"#right##0" to i64* 
  %6 = load  i64, i64* %5 
  %7 = add   i64 %"#right##0", 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = icmp eq i64 %1, %6 
  br i1 %10, label %if.then, label %if.else 
if.then:
  %11 = inttoptr i64 %4 to i64* 
  %12 = load  i64, i64* %11 
  %13 = add   i64 %4, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = load  i64, i64* %14 
  %16 = inttoptr i64 %9 to i64* 
  %17 = load  i64, i64* %16 
  %18 = add   i64 %9, 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = load  i64, i64* %19 
  %21 = icmp eq i64 %17, %12 
  br i1 %21, label %if.then1, label %if.else1 
if.else:
  %26 = xor i1 0, 1 
  ret i1 %26 
if.then1:
  %22 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %15, i64  %20, i64  %15, i64  %20)  
  %23 = icmp eq i2 %22, 1 
  %24 = xor i1 %23, 1 
  ret i1 %24 
if.else1:
  %25 = xor i1 0, 1 
  ret i1 %25 
}

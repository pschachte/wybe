======================================================================
AFTER EVERYTHING:
 Module student
  representation  : (not a type)
  public submods  : course -> student.course
                    student -> student.student
  public resources: 
  public procs    : student.<0>
                    student.printStudent<0>
                    student.course.=<0>
                    student.course.code<0>
                    student.course.code<1>
                    student.course.course<0>
                    student.course.course<1>
                    student.course.name<0>
                    student.course.name<1>
                    student.course.~=<0>
                    student.student.=<0>
                    student.student.id<0>
                    student.student.id<1>
                    student.student.major<0>
                    student.student.major<1>
                    student.student.student<0>
                    student.student.student<1>
                    student.student.~=<0>
  imports         : public use student.course
                    public use student.student
                    use wybe
  resources       : 
  submodules      : student.course, student.student
  procs           : 

*main* > public {impure} (0 calls)
0: student.<0>
(io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#4##0:student.course)
    foreign lpvm mutate(~tmp#4##0:student.course, ?tmp#5##0:student.course, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 90048:wybe.int)
    foreign lpvm mutate(~tmp#5##0:student.course, ?tmp#6##0:student.course, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, "Declarative Programming":wybe.string)
    foreign lpvm alloc(16:wybe.int, ?tmp#9##0:student.student)
    foreign lpvm mutate(~tmp#9##0:student.student, ?tmp#10##0:student.student, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 12345:wybe.int)
    foreign lpvm mutate(~tmp#10##0:student.student, ?tmp#11##0:student.student, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:student.course)
    student.printStudent<0>(~tmp#11##0:student.student, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #2 @student:nn:nn


printStudent > public (1 calls)
0: student.printStudent<0>
printStudent(stu##0:student.student, io##0:wybe.phantom, ?io##6:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.string.print_string<0>("student id: ":wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #10 @io:nn:nn
    foreign lpvm access(stu##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int)
    foreign c print_int(~tmp#0##0:wybe.int, ~#io##1:wybe.phantom, ?tmp#9##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    foreign lpvm access(~stu##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:student.course)
    wybe.string.print_string<0>("course code: ":wybe.string, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #11 @io:nn:nn
    foreign lpvm access(tmp#1##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int)
    foreign c print_int(~tmp#2##0:wybe.int, ~#io##3:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?#io##4:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("course name: ":wybe.string, ~#io##4:wybe.phantom, ?#io##5:wybe.phantom) #12 @io:nn:nn
    foreign lpvm access(~tmp#1##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.string)
    wybe.string.print_string<0>(~tmp#3##0:wybe.string, ~#io##5:wybe.phantom, ?tmp#22##0:wybe.phantom) #13 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?#io##6:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'student'


 


@student.10 =    constant {i64, i64} { i64 23, i64 ptrtoint ([?? x i8]* @student.9 to i64) }


@student.9 =    constant [?? x i8] c"Declarative Programming\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


declare external ccc  void @print_int(i64)    


@student.34 =    constant {i64, i64} { i64 13, i64 ptrtoint ([?? x i8]* @student.33 to i64) }


@student.33 =    constant [?? x i8] c"course name: \00"


@student.29 =    constant {i64, i64} { i64 13, i64 ptrtoint ([?? x i8]* @student.28 to i64) }


@student.28 =    constant [?? x i8] c"course code: \00"


@student.20 =    constant {i64, i64} { i64 12, i64 ptrtoint ([?? x i8]* @student.19 to i64) }


@student.19 =    constant [?? x i8] c"student id: \00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"student.<0>"()    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 90048, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @student.10, i32 0, i32 0) to i64), i64* %8 
  %11 = trunc i64 16 to i32  
  %12 = tail call ccc  i8*  @wybe_malloc(i32  %11)  
  %13 = ptrtoint i8* %12 to i64 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 12345, i64* %15 
  %16 = add   i64 %13, 8 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 %3, i64* %18 
  tail call fastcc  void  @"student.printStudent<0>"(i64  %13)  
  ret void 
}


define external fastcc  void @"student.printStudent<0>"(i64  %"stu##0")    {
entry:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @student.20, i32 0, i32 0) to i64))  
  %21 = inttoptr i64 %"stu##0" to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  %23 = load  i64, i64* %22 
  tail call ccc  void  @print_int(i64  %23)  
  tail call ccc  void  @putchar(i8  10)  
  %24 = add   i64 %"stu##0", 8 
  %25 = inttoptr i64 %24 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  %27 = load  i64, i64* %26 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @student.29, i32 0, i32 0) to i64))  
  %30 = inttoptr i64 %27 to i64* 
  %31 = getelementptr  i64, i64* %30, i64 0 
  %32 = load  i64, i64* %31 
  tail call ccc  void  @print_int(i64  %32)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @student.34, i32 0, i32 0) to i64))  
  %35 = add   i64 %27, 8 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %38)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module student.course
  representation  : address
  public submods  : 
  public resources: 
  public procs    : student.course.=<0>
                    student.course.code<0>
                    student.course.code<1>
                    student.course.course<0>
                    student.course.course<1>
                    student.course.name<0>
                    student.course.name<1>
                    student.course.~=<0>
  imports         : use student
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: student.course.=<0>
=(#left##0:student.course, #right##0:student.course, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#left##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#code##0:wybe.int)
    foreign lpvm access(~#left##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#name##0:wybe.string)
    foreign lpvm access(#right##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#code##0:wybe.int)
    foreign lpvm access(~#right##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#name##0:wybe.string)
    foreign llvm icmp_eq(~#left#code##0:wybe.int, ~#right#code##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        wybe.string.=<0>(~#left#name##0:wybe.string, ~#right#name##0:wybe.string, ?#success##0:wybe.bool) #3



code > public {inline} (0 calls)
0: student.course.code<0>
code(#rec##0:student.course, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
code > public {inline} (0 calls)
1: student.course.code<1>
code(#rec##0:student.course, ?#rec##1:student.course, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:student.course, ?#rec##1:student.course, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


course > public {inline} (0 calls)
0: student.course.course<0>
course(code##0:wybe.int, name##0:wybe.string, ?#result##0:student.course):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:student.course)
    foreign lpvm mutate(~#rec##0:student.course, ?#rec##1:student.course, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~code##0:wybe.int)
    foreign lpvm mutate(~#rec##1:student.course, ?#result##0:student.course, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~name##0:wybe.string)
course > public {inline} (6 calls)
1: student.course.course<1>
course(?code##0:wybe.int, ?name##0:wybe.string, #result##0:student.course):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#result##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?code##0:wybe.int)
    foreign lpvm access(~#result##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?name##0:wybe.string)


name > public {inline} (0 calls)
0: student.course.name<0>
name(#rec##0:student.course, ?#result##0:wybe.string):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.string)
name > public {inline} (0 calls)
1: student.course.name<1>
name(#rec##0:student.course, ?#rec##1:student.course, #field##0:wybe.string):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:student.course, ?#rec##1:student.course, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.string)


~= > public {inline} (0 calls)
0: student.course.~=<0>
~=(#left##0:student.course, #right##0:student.course, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#left##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int)
    foreign lpvm access(~#left##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.string)
    foreign lpvm access(#right##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int)
    foreign lpvm access(~#right##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.string)
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        wybe.string.=<0>(~tmp#4##0:wybe.string, ~tmp#6##0:wybe.string, ?tmp#0##0:wybe.bool) #1
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'student.course'


 


declare external fastcc  i1 @"wybe.string.=<0>"(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"student.course.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#left##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"#right##0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"1#tmp#1##0" = icmp eq i64 %3, %10 
  br i1 %"1#tmp#1##0", label %if.then, label %if.else 
if.then:
  %"2##success##0" = tail call fastcc  i1  @"wybe.string.=<0>"(i64  %7, i64  %14)  
  ret i1 %"2##success##0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"student.course.code<0>"(i64  %"#rec##0")    {
entry:
  %15 = inttoptr i64 %"#rec##0" to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  ret i64 %17 
}


define external fastcc  i64 @"student.course.code<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i8* 
  %22 = inttoptr i64 %"#rec##0" to i8* 
  %23 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %21, i8*  %22, i32  %23, i32  8, i1  0)  
  %24 = inttoptr i64 %20 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  store  i64 %"#field##0", i64* %25 
  ret i64 %20 
}


define external fastcc  i64 @"student.course.course<0>"(i64  %"code##0", i64  %"name##0")    {
entry:
  %26 = trunc i64 16 to i32  
  %27 = tail call ccc  i8*  @wybe_malloc(i32  %26)  
  %28 = ptrtoint i8* %27 to i64 
  %29 = inttoptr i64 %28 to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  store  i64 %"code##0", i64* %30 
  %31 = add   i64 %28, 8 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  store  i64 %"name##0", i64* %33 
  ret i64 %28 
}


define external fastcc  {i64, i64} @"student.course.course<1>"(i64  %"#result##0")    {
entry:
  %34 = inttoptr i64 %"#result##0" to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  %36 = load  i64, i64* %35 
  %37 = add   i64 %"#result##0", 8 
  %38 = inttoptr i64 %37 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  %40 = load  i64, i64* %39 
  %41 = insertvalue {i64, i64} undef, i64 %36, 0 
  %42 = insertvalue {i64, i64} %41, i64 %40, 1 
  ret {i64, i64} %42 
}


define external fastcc  i64 @"student.course.name<0>"(i64  %"#rec##0")    {
entry:
  %43 = add   i64 %"#rec##0", 8 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  %46 = load  i64, i64* %45 
  ret i64 %46 
}


define external fastcc  i64 @"student.course.name<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %47 = trunc i64 16 to i32  
  %48 = tail call ccc  i8*  @wybe_malloc(i32  %47)  
  %49 = ptrtoint i8* %48 to i64 
  %50 = inttoptr i64 %49 to i8* 
  %51 = inttoptr i64 %"#rec##0" to i8* 
  %52 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %50, i8*  %51, i32  %52, i32  8, i1  0)  
  %53 = add   i64 %49, 8 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  store  i64 %"#field##0", i64* %55 
  ret i64 %49 
}


define external fastcc  i1 @"student.course.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %56 = inttoptr i64 %"#left##0" to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = add   i64 %"#left##0", 8 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  %62 = load  i64, i64* %61 
  %63 = inttoptr i64 %"#right##0" to i64* 
  %64 = getelementptr  i64, i64* %63, i64 0 
  %65 = load  i64, i64* %64 
  %66 = add   i64 %"#right##0", 8 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  %69 = load  i64, i64* %68 
  %"1#tmp#7##0" = icmp eq i64 %58, %65 
  br i1 %"1#tmp#7##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#0##0" = tail call fastcc  i1  @"wybe.string.=<0>"(i64  %62, i64  %69)  
  %"2##success##0" = xor i1 %"2#tmp#0##0", 1 
  ret i1 %"2##success##0" 
if.else:
  %"3##success##0" = xor i1 0, 1 
  ret i1 %"3##success##0" 
}
--------------------------------------------------
 Module student.student
  representation  : address
  public submods  : 
  public resources: 
  public procs    : student.student.=<0>
                    student.student.id<0>
                    student.student.id<1>
                    student.student.major<0>
                    student.student.major<1>
                    student.student.student<0>
                    student.student.student<1>
                    student.student.~=<0>
  imports         : use student
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: student.student.=<0>
=(#left##0:student.student, #right##0:student.student, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#left##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#id##0:wybe.int)
    foreign lpvm access(~#left##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#major##0:student.course)
    foreign lpvm access(#right##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#id##0:wybe.int)
    foreign lpvm access(~#right##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#major##0:student.course)
    foreign llvm icmp_eq(~#left#id##0:wybe.int, ~#right#id##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left#major##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int)
        foreign lpvm access(~#left#major##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.string)
        foreign lpvm access(#right#major##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#11##0:wybe.int)
        foreign lpvm access(~#right#major##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.string)
        foreign llvm icmp_eq(~tmp#11##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#13##0:wybe.bool) @int:nn:nn
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            wybe.string.=<0>(~tmp#10##0:wybe.string, ~tmp#12##0:wybe.string, ?#success##0:wybe.bool) #4




id > public {inline} (0 calls)
0: student.student.id<0>
id(#rec##0:student.student, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
id > public {inline} (0 calls)
1: student.student.id<1>
id(#rec##0:student.student, ?#rec##1:student.student, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:student.student, ?#rec##1:student.student, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


major > public {inline} (0 calls)
0: student.student.major<0>
major(#rec##0:student.student, ?#result##0:student.course):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:student.course)
major > public {inline} (0 calls)
1: student.student.major<1>
major(#rec##0:student.student, ?#rec##1:student.student, #field##0:student.course):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:student.student, ?#rec##1:student.student, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:student.course)


student > public {inline} (0 calls)
0: student.student.student<0>
student(id##0:wybe.int, major##0:student.course, ?#result##0:student.student):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:student.student)
    foreign lpvm mutate(~#rec##0:student.student, ?#rec##1:student.student, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~id##0:wybe.int)
    foreign lpvm mutate(~#rec##1:student.student, ?#result##0:student.student, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~major##0:student.course)
student > public {inline} (6 calls)
1: student.student.student<1>
student(?id##0:wybe.int, ?major##0:student.course, #result##0:student.student):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#result##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?id##0:wybe.int)
    foreign lpvm access(~#result##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?major##0:student.course)


~= > public {inline} (0 calls)
0: student.student.~=<0>
~=(#left##0:student.student, #right##0:student.student, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#left##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int)
    foreign lpvm access(~#left##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:student.course)
    foreign lpvm access(#right##0:student.student, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int)
    foreign lpvm access(~#right##0:student.student, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:student.course)
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(tmp#4##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int)
        foreign lpvm access(~tmp#4##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.string)
        foreign lpvm access(tmp#6##0:student.course, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int)
        foreign lpvm access(~tmp#6##0:student.course, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#11##0:wybe.string)
        foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#12##0:wybe.bool) @int:nn:nn
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            wybe.string.=<0>(~tmp#9##0:wybe.string, ~tmp#11##0:wybe.string, ?tmp#0##0:wybe.bool) #1
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)



  LLVM code       :

; ModuleID = 'student.student'


 


declare external fastcc  i1 @"wybe.string.=<0>"(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"student.student.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#left##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"#right##0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"1#tmp#1##0" = icmp eq i64 %3, %10 
  br i1 %"1#tmp#1##0", label %if.then, label %if.else 
if.then:
  %15 = inttoptr i64 %7 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = add   i64 %7, 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = inttoptr i64 %14 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %25 = add   i64 %14, 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %"2#tmp#13##0" = icmp eq i64 %24, %17 
  br i1 %"2#tmp#13##0", label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %"4##success##0" = tail call fastcc  i1  @"wybe.string.=<0>"(i64  %21, i64  %28)  
  ret i1 %"4##success##0" 
if.else1:
  ret i1 0 
}


define external fastcc  i64 @"student.student.id<0>"(i64  %"#rec##0")    {
entry:
  %29 = inttoptr i64 %"#rec##0" to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  %31 = load  i64, i64* %30 
  ret i64 %31 
}


define external fastcc  i64 @"student.student.id<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %32 = trunc i64 16 to i32  
  %33 = tail call ccc  i8*  @wybe_malloc(i32  %32)  
  %34 = ptrtoint i8* %33 to i64 
  %35 = inttoptr i64 %34 to i8* 
  %36 = inttoptr i64 %"#rec##0" to i8* 
  %37 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %35, i8*  %36, i32  %37, i32  8, i1  0)  
  %38 = inttoptr i64 %34 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  store  i64 %"#field##0", i64* %39 
  ret i64 %34 
}


define external fastcc  i64 @"student.student.major<0>"(i64  %"#rec##0")    {
entry:
  %40 = add   i64 %"#rec##0", 8 
  %41 = inttoptr i64 %40 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  %43 = load  i64, i64* %42 
  ret i64 %43 
}


define external fastcc  i64 @"student.student.major<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %44 = trunc i64 16 to i32  
  %45 = tail call ccc  i8*  @wybe_malloc(i32  %44)  
  %46 = ptrtoint i8* %45 to i64 
  %47 = inttoptr i64 %46 to i8* 
  %48 = inttoptr i64 %"#rec##0" to i8* 
  %49 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %47, i8*  %48, i32  %49, i32  8, i1  0)  
  %50 = add   i64 %46, 8 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  store  i64 %"#field##0", i64* %52 
  ret i64 %46 
}


define external fastcc  i64 @"student.student.student<0>"(i64  %"id##0", i64  %"major##0")    {
entry:
  %53 = trunc i64 16 to i32  
  %54 = tail call ccc  i8*  @wybe_malloc(i32  %53)  
  %55 = ptrtoint i8* %54 to i64 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  store  i64 %"id##0", i64* %57 
  %58 = add   i64 %55, 8 
  %59 = inttoptr i64 %58 to i64* 
  %60 = getelementptr  i64, i64* %59, i64 0 
  store  i64 %"major##0", i64* %60 
  ret i64 %55 
}


define external fastcc  {i64, i64} @"student.student.student<1>"(i64  %"#result##0")    {
entry:
  %61 = inttoptr i64 %"#result##0" to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  %63 = load  i64, i64* %62 
  %64 = add   i64 %"#result##0", 8 
  %65 = inttoptr i64 %64 to i64* 
  %66 = getelementptr  i64, i64* %65, i64 0 
  %67 = load  i64, i64* %66 
  %68 = insertvalue {i64, i64} undef, i64 %63, 0 
  %69 = insertvalue {i64, i64} %68, i64 %67, 1 
  ret {i64, i64} %69 
}


define external fastcc  i1 @"student.student.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %70 = inttoptr i64 %"#left##0" to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  %72 = load  i64, i64* %71 
  %73 = add   i64 %"#left##0", 8 
  %74 = inttoptr i64 %73 to i64* 
  %75 = getelementptr  i64, i64* %74, i64 0 
  %76 = load  i64, i64* %75 
  %77 = inttoptr i64 %"#right##0" to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  %79 = load  i64, i64* %78 
  %80 = add   i64 %"#right##0", 8 
  %81 = inttoptr i64 %80 to i64* 
  %82 = getelementptr  i64, i64* %81, i64 0 
  %83 = load  i64, i64* %82 
  %"1#tmp#7##0" = icmp eq i64 %72, %79 
  br i1 %"1#tmp#7##0", label %if.then, label %if.else 
if.then:
  %84 = inttoptr i64 %76 to i64* 
  %85 = getelementptr  i64, i64* %84, i64 0 
  %86 = load  i64, i64* %85 
  %87 = add   i64 %76, 8 
  %88 = inttoptr i64 %87 to i64* 
  %89 = getelementptr  i64, i64* %88, i64 0 
  %90 = load  i64, i64* %89 
  %91 = inttoptr i64 %83 to i64* 
  %92 = getelementptr  i64, i64* %91, i64 0 
  %93 = load  i64, i64* %92 
  %94 = add   i64 %83, 8 
  %95 = inttoptr i64 %94 to i64* 
  %96 = getelementptr  i64, i64* %95, i64 0 
  %97 = load  i64, i64* %96 
  %"2#tmp#12##0" = icmp eq i64 %93, %86 
  br i1 %"2#tmp#12##0", label %if.then1, label %if.else1 
if.else:
  %"3##success##0" = xor i1 0, 1 
  ret i1 %"3##success##0" 
if.then1:
  %"4#tmp#0##0" = tail call fastcc  i1  @"wybe.string.=<0>"(i64  %90, i64  %97)  
  %"4##success##0" = xor i1 %"4#tmp#0##0", 1 
  ret i1 %"4##success##0" 
if.else1:
  %"5##success##0" = xor i1 0, 1 
  ret i1 %"5##success##0" 
}

======================================================================
AFTER EVERYTHING:
 Module alias_multifunc4
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : alias_multifunc4.<0>
                    alias_multifunc4.replicate1<0>
                    alias_multifunc4.replicate21<0>
                    alias_multifunc4.replicate22<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: alias_multifunc4.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#3##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#3##0:position.position, ?tmp#4##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 10:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#4##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 10:wybe.int) @position:nn:nn
    alias_multifunc4.replicate1<0>(tmp#0##0:position.position, ?p2##0:position.position, ?p3##0:position.position) #1 @alias_multifunc4:nn:nn
    wybe.string.print_string<0>("--- After calling replicate1:":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #19 @io:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect p1(10,10):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #20 @io:nn:nn
    position.printPosition<0>(~tmp#0##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @alias_multifunc4:nn:nn
    wybe.string.print_string<0>("expect p2(99,10):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #21 @io:nn:nn
    position.printPosition<0>(~p2##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6 @alias_multifunc4:nn:nn
    wybe.string.print_string<0>("expect p3(10,10):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #22 @io:nn:nn
    position.printPosition<0>(~p3##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @alias_multifunc4:nn:nn
    alias_multifunc4.replicate21<0>(?p4##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #9 @alias_multifunc4:nn:nn
    wybe.string.print_string<0>("--- After calling replicate21:":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #23 @io:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#13##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect p4(99999,99999):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #24 @io:nn:nn
    position.printPosition<0>(~p4##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #12 @alias_multifunc4:nn:nn
    alias_multifunc4.replicate22<0>(?p6##0:position.position, ?p7##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #13 @alias_multifunc4:nn:nn
    wybe.string.print_string<0>("--- After calling replicate22:":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #25 @io:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect p6(99999,99999):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #26 @io:nn:nn
    position.printPosition<0>(~p6##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #16 @alias_multifunc4:nn:nn
    wybe.string.print_string<0>("expect p7(1111111111,99999):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #27 @io:nn:nn
    position.printPosition<0>(~p7##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #18 @alias_multifunc4:nn:nn


replicate1 > public (1 calls)
0: alias_multifunc4.replicate1<0>
replicate1(pa##0:position.position, ?pb##1:position.position, ?pc##0:position.position)<{}; {}>:
  AliasPairs: [(pa##0,pc##0)]
  InterestingCallProperties: []
    foreign llvm move(pa##0:position.position, ?pc##0:position.position) @alias_multifunc4:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#4##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#4##0:position.position, ?tmp#5##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 99:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#5##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 99:wybe.int) @position:nn:nn
    foreign lpvm access(~tmp#0##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @position:nn:nn
    foreign lpvm {noalias} mutate(~pa##0:position.position, ?pb##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @position:nn:nn


replicate21 > public (1 calls)
0: alias_multifunc4.replicate21<0>
replicate21(?pb##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#3##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#3##0:position.position, ?tmp#4##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 99999:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#4##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 99999:wybe.int) @position:nn:nn
    foreign llvm move(tmp#0##0:position.position, ?pb##0:position.position) @alias_multifunc4:nn:nn
    foreign lpvm {noalias} mutate(~tmp#0##0:position.position, ?pc##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 1111111111:wybe.int) @position:nn:nn
    wybe.string.print_string<0>("--- Inside replicate21, expect pc(1111111111,99999): ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @io:nn:nn
    position.printPosition<0>(~pc##1:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @alias_multifunc4:nn:nn


replicate22 > public (1 calls)
0: alias_multifunc4.replicate22<0>
replicate22(?pb##0:position.position, ?pc##1:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#3##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#3##0:position.position, ?tmp#4##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 99999:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#4##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 99999:wybe.int) @position:nn:nn
    foreign llvm move(tmp#0##0:position.position, ?pb##0:position.position) @alias_multifunc4:nn:nn
    wybe.string.print_string<0>("--- Inside replicate22, expect pc(99999,99999):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6 @io:nn:nn
    position.printPosition<0>(tmp#0##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @alias_multifunc4:nn:nn
    foreign lpvm {noalias} mutate(~tmp#0##0:position.position, ?pc##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 1111111111:wybe.int) @position:nn:nn
    wybe.string.print_string<0>("--- Inside replicate22, after calling x(!pc,1111111111), expect pc(1111111111,99999): ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @io:nn:nn
    position.printPosition<0>(pc##1:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @alias_multifunc4:nn:nn

  LLVM code       :

; ModuleID = 'alias_multifunc4'


 


declare external fastcc  void @"position.printPosition<0>"(i64)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


declare external ccc  void @putchar(i8)    


@alias_multifunc4.32 =    constant {i64, i64} { i64 28, i64 ptrtoint ([?? x i8]* @alias_multifunc4.31 to i64) }


@alias_multifunc4.31 =    constant [?? x i8] c"expect p7(1111111111,99999):\00"


@alias_multifunc4.30 =    constant {i64, i64} { i64 23, i64 ptrtoint ([?? x i8]* @alias_multifunc4.29 to i64) }


@alias_multifunc4.29 =    constant [?? x i8] c"expect p6(99999,99999):\00"


@alias_multifunc4.28 =    constant {i64, i64} { i64 30, i64 ptrtoint ([?? x i8]* @alias_multifunc4.27 to i64) }


@alias_multifunc4.27 =    constant [?? x i8] c"--- After calling replicate22:\00"


@alias_multifunc4.23 =    constant {i64, i64} { i64 23, i64 ptrtoint ([?? x i8]* @alias_multifunc4.22 to i64) }


@alias_multifunc4.22 =    constant [?? x i8] c"expect p4(99999,99999):\00"


@alias_multifunc4.21 =    constant {i64, i64} { i64 30, i64 ptrtoint ([?? x i8]* @alias_multifunc4.20 to i64) }


@alias_multifunc4.20 =    constant [?? x i8] c"--- After calling replicate21:\00"


@alias_multifunc4.19 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @alias_multifunc4.18 to i64) }


@alias_multifunc4.18 =    constant [?? x i8] c"expect p3(10,10):\00"


@alias_multifunc4.17 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @alias_multifunc4.16 to i64) }


@alias_multifunc4.16 =    constant [?? x i8] c"expect p2(99,10):\00"


@alias_multifunc4.15 =    constant {i64, i64} { i64 17, i64 ptrtoint ([?? x i8]* @alias_multifunc4.14 to i64) }


@alias_multifunc4.14 =    constant [?? x i8] c"expect p1(10,10):\00"


@alias_multifunc4.13 =    constant {i64, i64} { i64 29, i64 ptrtoint ([?? x i8]* @alias_multifunc4.12 to i64) }


@alias_multifunc4.12 =    constant [?? x i8] c"--- After calling replicate1:\00"


@alias_multifunc4.71 =    constant {i64, i64} { i64 53, i64 ptrtoint ([?? x i8]* @alias_multifunc4.70 to i64) }


@alias_multifunc4.70 =    constant [?? x i8] c"--- Inside replicate21, expect pc(1111111111,99999): \00"


@alias_multifunc4.91 =    constant {i64, i64} { i64 86, i64 ptrtoint ([?? x i8]* @alias_multifunc4.90 to i64) }


@alias_multifunc4.90 =    constant [?? x i8] c"--- Inside replicate22, after calling x(!pc,1111111111), expect pc(1111111111,99999): \00"


@alias_multifunc4.81 =    constant {i64, i64} { i64 47, i64 ptrtoint ([?? x i8]* @alias_multifunc4.80 to i64) }


@alias_multifunc4.80 =    constant [?? x i8] c"--- Inside replicate22, expect pc(99999,99999):\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"alias_multifunc4.<0>"()    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 10, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 10, i64* %8 
  %9 = tail call fastcc  {i64, i64}  @"alias_multifunc4.replicate1<0>"(i64  %3)  
  %10 = extractvalue {i64, i64} %9, 0 
  %11 = extractvalue {i64, i64} %9, 1 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_multifunc4.13, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_multifunc4.15, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %3)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_multifunc4.17, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %10)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_multifunc4.19, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %11)  
  %"1#p4##0" = tail call fastcc  i64  @"alias_multifunc4.replicate21<0>"()  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_multifunc4.21, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_multifunc4.23, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"1#p4##0")  
  %24 = tail call fastcc  {i64, i64}  @"alias_multifunc4.replicate22<0>"()  
  %25 = extractvalue {i64, i64} %24, 0 
  %26 = extractvalue {i64, i64} %24, 1 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_multifunc4.28, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_multifunc4.30, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %25)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_multifunc4.32, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %26)  
  ret void 
}


define external fastcc  {i64, i64} @"alias_multifunc4.replicate1<0>"(i64  %"pa##0")    {
entry:
  %33 = trunc i64 16 to i32  
  %34 = tail call ccc  i8*  @wybe_malloc(i32  %33)  
  %35 = ptrtoint i8* %34 to i64 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  store  i64 99, i64* %37 
  %38 = add   i64 %35, 8 
  %39 = inttoptr i64 %38 to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  store  i64 99, i64* %40 
  %41 = inttoptr i64 %35 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  %43 = load  i64, i64* %42 
  %44 = trunc i64 16 to i32  
  %45 = tail call ccc  i8*  @wybe_malloc(i32  %44)  
  %46 = ptrtoint i8* %45 to i64 
  %47 = inttoptr i64 %46 to i8* 
  %48 = inttoptr i64 %"pa##0" to i8* 
  %49 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %47, i8*  %48, i32  %49, i1  0)  
  %50 = inttoptr i64 %46 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  store  i64 %43, i64* %51 
  %52 = insertvalue {i64, i64} undef, i64 %46, 0 
  %53 = insertvalue {i64, i64} %52, i64 %"pa##0", 1 
  ret {i64, i64} %53 
}


define external fastcc  i64 @"alias_multifunc4.replicate21<0>"()    {
entry:
  %54 = trunc i64 16 to i32  
  %55 = tail call ccc  i8*  @wybe_malloc(i32  %54)  
  %56 = ptrtoint i8* %55 to i64 
  %57 = inttoptr i64 %56 to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  store  i64 99999, i64* %58 
  %59 = add   i64 %56, 8 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  store  i64 99999, i64* %61 
  %62 = trunc i64 16 to i32  
  %63 = tail call ccc  i8*  @wybe_malloc(i32  %62)  
  %64 = ptrtoint i8* %63 to i64 
  %65 = inttoptr i64 %64 to i8* 
  %66 = inttoptr i64 %56 to i8* 
  %67 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %65, i8*  %66, i32  %67, i1  0)  
  %68 = inttoptr i64 %64 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  store  i64 1111111111, i64* %69 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_multifunc4.71, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %64)  
  ret i64 %56 
}


define external fastcc  {i64, i64} @"alias_multifunc4.replicate22<0>"()    {
entry:
  %72 = trunc i64 16 to i32  
  %73 = tail call ccc  i8*  @wybe_malloc(i32  %72)  
  %74 = ptrtoint i8* %73 to i64 
  %75 = inttoptr i64 %74 to i64* 
  %76 = getelementptr  i64, i64* %75, i64 0 
  store  i64 99999, i64* %76 
  %77 = add   i64 %74, 8 
  %78 = inttoptr i64 %77 to i64* 
  %79 = getelementptr  i64, i64* %78, i64 0 
  store  i64 99999, i64* %79 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_multifunc4.81, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %74)  
  %82 = trunc i64 16 to i32  
  %83 = tail call ccc  i8*  @wybe_malloc(i32  %82)  
  %84 = ptrtoint i8* %83 to i64 
  %85 = inttoptr i64 %84 to i8* 
  %86 = inttoptr i64 %74 to i8* 
  %87 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %85, i8*  %86, i32  %87, i1  0)  
  %88 = inttoptr i64 %84 to i64* 
  %89 = getelementptr  i64, i64* %88, i64 0 
  store  i64 1111111111, i64* %89 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_multifunc4.91, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %84)  
  %92 = insertvalue {i64, i64} undef, i64 %74, 0 
  %93 = insertvalue {i64, i64} %92, i64 %84, 1 
  ret {i64, i64} %93 
}
--------------------------------------------------
 Module position
  representation  : (not a type)
  public submods  : position -> position.position
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : public use position.position
                    use wybe
  resources       : 
  submodules      : position.position
  procs           : 

printPosition > public (0 calls)
0: position.printPosition<0>
printPosition(pos##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print_string<0>(" (":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @io:nn:nn
    foreign lpvm access(pos##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @io:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>(",":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @io:nn:nn
    foreign lpvm access(~pos##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @io:nn:nn
    foreign c print_int(~tmp#1##0:wybe.int, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #9 @io:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#13##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'position'


 


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


declare external ccc  void @print_int(i64)    


@position.13 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.12 to i64) }


@position.12 =    constant [?? x i8] c")\00"


@position.7 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.6 to i64) }


@position.6 =    constant [?? x i8] c",\00"


@position.2 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @position.1 to i64) }


@position.1 =    constant [?? x i8] c" (\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"position.printPosition<0>"(i64  %"pos##0")    {
entry:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.2, i32 0, i32 0) to i64))  
  %3 = inttoptr i64 %"pos##0" to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  tail call ccc  void  @print_int(i64  %5)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.7, i32 0, i32 0) to i64))  
  %8 = add   i64 %"pos##0", 8 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  tail call ccc  void  @print_int(i64  %11)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.13, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module position.position
  representation  : address
  public submods  : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: position.position.=<0>
=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



position > public {inline} (0 calls)
0: position.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:position.position) @position:nn:nn
    foreign lpvm mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~#rec##1:position.position, ?#result##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int) @position:nn:nn
position > public {inline} (6 calls)
1: position.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#result##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @position:nn:nn


x > public {inline} (0 calls)
0: position.position.x<0>
x(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
x > public {inline} (0 calls)
1: position.position.x<1>
x(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


y > public {inline} (0 calls)
0: position.position.y<0>
y(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
y > public {inline} (0 calls)
1: position.position.y<1>
y(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


~= > public {inline} (0 calls)
0: position.position.~=<0>
~=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'position.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"position.position.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#left##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"#right##0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"1#tmp#1##0" = icmp eq i64 %3, %10 
  br i1 %"1#tmp#1##0", label %if.then, label %if.else 
if.then:
  %"2##success##0" = icmp eq i64 %7, %14 
  ret i1 %"2##success##0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"position.position.position<0>"(i64  %"x##0", i64  %"y##0")    {
entry:
  %15 = trunc i64 16 to i32  
  %16 = tail call ccc  i8*  @wybe_malloc(i32  %15)  
  %17 = ptrtoint i8* %16 to i64 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  store  i64 %"x##0", i64* %19 
  %20 = add   i64 %17, 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"y##0", i64* %22 
  ret i64 %17 
}


define external fastcc  {i64, i64} @"position.position.position<1>"(i64  %"#result##0")    {
entry:
  %23 = inttoptr i64 %"#result##0" to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"#result##0", 8 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = insertvalue {i64, i64} undef, i64 %25, 0 
  %31 = insertvalue {i64, i64} %30, i64 %29, 1 
  ret {i64, i64} %31 
}


define external fastcc  i64 @"position.position.x<0>"(i64  %"#rec##0")    {
entry:
  %32 = inttoptr i64 %"#rec##0" to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  ret i64 %34 
}


define external fastcc  i64 @"position.position.x<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %35 = trunc i64 16 to i32  
  %36 = tail call ccc  i8*  @wybe_malloc(i32  %35)  
  %37 = ptrtoint i8* %36 to i64 
  %38 = inttoptr i64 %37 to i8* 
  %39 = inttoptr i64 %"#rec##0" to i8* 
  %40 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %38, i8*  %39, i32  %40, i1  0)  
  %41 = inttoptr i64 %37 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  store  i64 %"#field##0", i64* %42 
  ret i64 %37 
}


define external fastcc  i64 @"position.position.y<0>"(i64  %"#rec##0")    {
entry:
  %43 = add   i64 %"#rec##0", 8 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  %46 = load  i64, i64* %45 
  ret i64 %46 
}


define external fastcc  i64 @"position.position.y<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %47 = trunc i64 16 to i32  
  %48 = tail call ccc  i8*  @wybe_malloc(i32  %47)  
  %49 = ptrtoint i8* %48 to i64 
  %50 = inttoptr i64 %49 to i8* 
  %51 = inttoptr i64 %"#rec##0" to i8* 
  %52 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %50, i8*  %51, i32  %52, i1  0)  
  %53 = add   i64 %49, 8 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  store  i64 %"#field##0", i64* %55 
  ret i64 %49 
}


define external fastcc  i1 @"position.position.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %56 = inttoptr i64 %"#left##0" to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = add   i64 %"#left##0", 8 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  %62 = load  i64, i64* %61 
  %63 = inttoptr i64 %"#right##0" to i64* 
  %64 = getelementptr  i64, i64* %63, i64 0 
  %65 = load  i64, i64* %64 
  %66 = add   i64 %"#right##0", 8 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  %69 = load  i64, i64* %68 
  %"1#tmp#7##0" = icmp eq i64 %58, %65 
  br i1 %"1#tmp#7##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#0##0" = icmp eq i64 %62, %69 
  %"2##success##0" = xor i1 %"2#tmp#0##0", 1 
  ret i1 %"2##success##0" 
if.else:
  %"3##success##0" = xor i1 0, 1 
  ret i1 %"3##success##0" 
}

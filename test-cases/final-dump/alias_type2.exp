======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module alias_type2
  representation  : (not a type)
  public submods  : position -> alias_type2.position
                    posrec -> alias_type2.posrec
  public resources: 
  public procs    : alias_type2.<0>
                    alias_type2.position.=<0>
                    alias_type2.position.position<0>
                    alias_type2.position.position<1>
                    alias_type2.position.x<0>
                    alias_type2.position.x<1>
                    alias_type2.position.y<0>
                    alias_type2.position.y<1>
                    alias_type2.position.~=<0>
                    alias_type2.posrec.=<0>
                    alias_type2.posrec.a<0>
                    alias_type2.posrec.a<1>
                    alias_type2.posrec.p<0>
                    alias_type2.posrec.p<1>
                    alias_type2.posrec.posrec<0>
                    alias_type2.posrec.posrec<1>
                    alias_type2.posrec.~=<0>
  imports         : public use alias_type2.position
                    public use alias_type2.posrec
                    use wybe
  resources       : 
  submodules      : alias_type2.position, alias_type2.posrec
  procs           : 

module top-level code > public {semipure} (0 calls)
0: alias_type2.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#7##0:alias_type2.position) @alias_type2:nn:nn
    foreign lpvm mutate(~tmp#7##0:alias_type2.position, ?tmp#8##0:alias_type2.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int) @alias_type2:nn:nn
    foreign lpvm mutate(~tmp#8##0:alias_type2.position, ?tmp#9##0:alias_type2.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int) @alias_type2:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#12##0:alias_type2.posrec) @alias_type2:nn:nn
    foreign lpvm mutate(~tmp#12##0:alias_type2.posrec, ?tmp#13##0:alias_type2.posrec, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp#9##0:alias_type2.position) @alias_type2:nn:nn
    foreign lpvm mutate(~tmp#13##0:alias_type2.posrec, ?tmp#14##0:alias_type2.posrec, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int) @alias_type2:nn:nn
    foreign lpvm mutate(~tmp#14##0:alias_type2.posrec, ?rec##1:alias_type2.posrec, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int) @alias_type2:nn:nn
    foreign lpvm {noalias} mutate(~tmp#9##0:alias_type2.position, ?pos##1:alias_type2.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, 200:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(~pos##1:alias_type2.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @alias_type2:nn:nn
    foreign c print_int(~tmp#2##0:wybe.int, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @alias_type2:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @alias_type2:nn:nn
    foreign lpvm access(~rec##1:alias_type2.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:alias_type2.position) @alias_type2:nn:nn
    foreign lpvm access(~tmp#3##0:alias_type2.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @alias_type2:nn:nn
    foreign c print_int(~tmp#4##0:wybe.int, ~tmp#23##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @alias_type2:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#28##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @alias_type2:nn:nn
    foreign lpvm store(~%tmp#29##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @alias_type2:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'alias_type2'

source_filename = "!ROOT!/final-dump/alias_type2.wybe"
target triple    ????


declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"alias_type2.<0>"() {
  %"tmp#30##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#7##0" = ptrtoint ptr %"tmp#30##0" to i64
  %"tmp#31##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 100, ptr %"tmp#31##0"
  %"tmp#32##0" = add i64 %"tmp#7##0", 8
  %"tmp#33##0" = inttoptr i64 %"tmp#32##0" to ptr
  store i64 100, ptr %"tmp#33##0"
  %"tmp#34##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#12##0" = ptrtoint ptr %"tmp#34##0" to i64
  %"tmp#35##0" = inttoptr i64 %"tmp#12##0" to ptr
  store i64 %"tmp#7##0", ptr %"tmp#35##0"
  %"tmp#36##0" = add i64 %"tmp#12##0", 8
  %"tmp#37##0" = inttoptr i64 %"tmp#36##0" to ptr
  store i64 1, ptr %"tmp#37##0"
  %"tmp#38##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"tmp#39##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#39##0", ptr %"tmp#38##0", i64 16, i1 0)
  %"tmp#40##0" = ptrtoint ptr %"tmp#39##0" to i64
  %"tmp#41##0" = add i64 %"tmp#40##0", 8
  %"tmp#42##0" = inttoptr i64 %"tmp#41##0" to ptr
  store i64 2, ptr %"tmp#42##0"
  %"tmp#43##0" = inttoptr i64 %"tmp#7##0" to ptr
  %"tmp#44##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#44##0", ptr %"tmp#43##0", i64 16, i1 0)
  %"tmp#45##0" = ptrtoint ptr %"tmp#44##0" to i64
  %"tmp#46##0" = inttoptr i64 %"tmp#45##0" to ptr
  store i64 200, ptr %"tmp#46##0"
  %"tmp#47##0" = inttoptr i64 %"tmp#45##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#47##0"
  call ccc void @print_int(i64 %"tmp#2##0")
  call ccc void @putchar(i8 10)
  %"tmp#48##0" = inttoptr i64 %"tmp#40##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#48##0"
  %"tmp#49##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#49##0"
  call ccc void @print_int(i64 %"tmp#4##0")
  call ccc void @putchar(i8 10)
  ret void
}

--------------------------------------------------
 Module alias_type2.position
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : alias_type2.position.=<0>
                    alias_type2.position.position<0>
                    alias_type2.position.position<1>
                    alias_type2.position.x<0>
                    alias_type2.position.x<1>
                    alias_type2.position.y<0>
                    alias_type2.position.y<1>
                    alias_type2.position.~=<0>
  imports         : use alias_type2
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: alias_type2.position.=<0>
=(#left##0:alias_type2.position, #right##0:alias_type2.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:alias_type2.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(~#left##0:alias_type2.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(#right##0:alias_type2.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(~#right##0:alias_type2.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @alias_type2:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



proc position > public {inline} (0 calls)
0: alias_type2.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:alias_type2.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:alias_type2.position) @alias_type2:nn:nn
    foreign lpvm mutate(~#rec##0:alias_type2.position, ?#rec##1:alias_type2.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm mutate(~#rec##1:alias_type2.position, ?#result##0:alias_type2.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int) @alias_type2:nn:nn
proc position > public {inline} (6 calls)
1: alias_type2.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:alias_type2.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:alias_type2.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(~#result##0:alias_type2.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @alias_type2:nn:nn


proc x > public {inline} (0 calls)
0: alias_type2.position.x<0>
x(#rec##0:alias_type2.position, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:alias_type2.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @alias_type2:nn:nn
proc x > public {inline} (0 calls)
1: alias_type2.position.x<1>
x(#rec##0:alias_type2.position, ?#rec##1:alias_type2.position, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:alias_type2.position, ?#rec##1:alias_type2.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @alias_type2:nn:nn


proc y > public {inline} (0 calls)
0: alias_type2.position.y<0>
y(#rec##0:alias_type2.position, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:alias_type2.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @alias_type2:nn:nn
proc y > public {inline} (0 calls)
1: alias_type2.position.y<1>
y(#rec##0:alias_type2.position, ?#rec##1:alias_type2.position, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:alias_type2.position, ?#rec##1:alias_type2.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @alias_type2:nn:nn


proc ~= > public {inline} (0 calls)
0: alias_type2.position.~=<0>
~=(#left##0:alias_type2.position, #right##0:alias_type2.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:alias_type2.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(~#left##0:alias_type2.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(#right##0:alias_type2.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(~#right##0:alias_type2.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @alias_type2:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'alias_type2.position'

source_filename = "!ROOT!/final-dump/alias_type2.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"alias_type2.position.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#9##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#x##0" = load i64, ptr %"tmp#9##0"
  %"tmp#10##0" = add i64 %"#left##0", 8
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"#left#y##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#x##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#right##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#right#y##0" = load i64, ptr %"tmp#14##0"
  %"tmp#1##0" = icmp eq i64 %"#left#x##0", %"#right#x##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#15##0" = icmp eq i64 %"#left#y##0", %"#right#y##0"
  ret i1 %"tmp#15##0"
if.else.0:
  ret i1 0
}

define external fastcc i64 @"alias_type2.position.position<0>"(i64 %"x##0", i64 %"y##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"x##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"y##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64} @"alias_type2.position.position<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#6##0" = insertvalue {i64, i64} %"tmp#5##0", i64 %"tmp#4##0", 1
  ret {i64, i64} %"tmp#6##0"
}

define external fastcc i64 @"alias_type2.position.x<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"alias_type2.position.x<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"alias_type2.position.y<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"alias_type2.position.y<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i1 @"alias_type2.position.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#8##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#8##0"
  %"tmp#9##0" = add i64 %"#left##0", 8
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#10##0"
  %"tmp#11##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"#right##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#13##0"
  %"tmp#7##0" = icmp eq i64 %"tmp#3##0", %"tmp#5##0"
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#0##0" = icmp eq i64 %"tmp#4##0", %"tmp#6##0"
  %"tmp#14##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = xor i1 0, 1
  ret i1 %"tmp#15##0"
}

--------------------------------------------------
 Module alias_type2.posrec
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : alias_type2.posrec.=<0>
                    alias_type2.posrec.a<0>
                    alias_type2.posrec.a<1>
                    alias_type2.posrec.p<0>
                    alias_type2.posrec.p<1>
                    alias_type2.posrec.posrec<0>
                    alias_type2.posrec.posrec<1>
                    alias_type2.posrec.~=<0>
  imports         : use alias_type2
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: alias_type2.posrec.=<0>
=(#left##0:alias_type2.posrec, #right##0:alias_type2.posrec, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:alias_type2.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#p##0:alias_type2.position) @alias_type2:nn:nn
    foreign lpvm access(~#left##0:alias_type2.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#a##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(#right##0:alias_type2.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#p##0:alias_type2.position) @alias_type2:nn:nn
    foreign lpvm access(~#right##0:alias_type2.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#a##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(#left#p##0:alias_type2.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(~#left#p##0:alias_type2.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(#right#p##0:alias_type2.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(~#right#p##0:alias_type2.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @alias_type2:nn:nn
    foreign llvm icmp_eq(~tmp#7##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
    case ~tmp#11##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#a##0:wybe.int, ~#right#a##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc a > public {inline} (0 calls)
0: alias_type2.posrec.a<0>
a(#rec##0:alias_type2.posrec, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:alias_type2.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @alias_type2:nn:nn
proc a > public {inline} (0 calls)
1: alias_type2.posrec.a<1>
a(#rec##0:alias_type2.posrec, ?#rec##1:alias_type2.posrec, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:alias_type2.posrec, ?#rec##1:alias_type2.posrec, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @alias_type2:nn:nn


proc p > public {inline} (0 calls)
0: alias_type2.posrec.p<0>
p(#rec##0:alias_type2.posrec, ?#result##0:alias_type2.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:alias_type2.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:alias_type2.position) @alias_type2:nn:nn
proc p > public {inline} (0 calls)
1: alias_type2.posrec.p<1>
p(#rec##0:alias_type2.posrec, ?#rec##1:alias_type2.posrec, #field##0:alias_type2.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:alias_type2.posrec, ?#rec##1:alias_type2.posrec, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:alias_type2.position) @alias_type2:nn:nn


proc posrec > public {inline} (0 calls)
0: alias_type2.posrec.posrec<0>
posrec(p##0:alias_type2.position, a##0:wybe.int, ?#result##0:alias_type2.posrec)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:alias_type2.posrec) @alias_type2:nn:nn
    foreign lpvm mutate(~#rec##0:alias_type2.posrec, ?#rec##1:alias_type2.posrec, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~p##0:alias_type2.position) @alias_type2:nn:nn
    foreign lpvm mutate(~#rec##1:alias_type2.posrec, ?#result##0:alias_type2.posrec, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~a##0:wybe.int) @alias_type2:nn:nn
proc posrec > public {inline} (6 calls)
1: alias_type2.posrec.posrec<1>
posrec(?p##0:alias_type2.position, ?a##0:wybe.int, #result##0:alias_type2.posrec)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:alias_type2.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?p##0:alias_type2.position) @alias_type2:nn:nn
    foreign lpvm access(~#result##0:alias_type2.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?a##0:wybe.int) @alias_type2:nn:nn


proc ~= > public {inline} (0 calls)
0: alias_type2.posrec.~=<0>
~=(#left##0:alias_type2.posrec, #right##0:alias_type2.posrec, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:alias_type2.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:alias_type2.position) @alias_type2:nn:nn
    foreign lpvm access(~#left##0:alias_type2.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(#right##0:alias_type2.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:alias_type2.position) @alias_type2:nn:nn
    foreign lpvm access(~#right##0:alias_type2.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(tmp#3##0:alias_type2.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(~tmp#3##0:alias_type2.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(tmp#5##0:alias_type2.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int) @alias_type2:nn:nn
    foreign lpvm access(~tmp#5##0:alias_type2.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @alias_type2:nn:nn
    foreign llvm icmp_eq(~tmp#7##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
    case ~tmp#11##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#12##0:wybe.bool) @int:nn:nn
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)



  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'alias_type2.posrec'

source_filename = "!ROOT!/final-dump/alias_type2.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"alias_type2.posrec.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#14##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#p##0" = load i64, ptr %"tmp#14##0"
  %"tmp#15##0" = add i64 %"#left##0", 8
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  %"#left#a##0" = load i64, ptr %"tmp#16##0"
  %"tmp#17##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#p##0" = load i64, ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"#right##0", 8
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  %"#right#a##0" = load i64, ptr %"tmp#19##0"
  %"tmp#20##0" = inttoptr i64 %"#left#p##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#20##0"
  %"tmp#21##0" = add i64 %"#left#p##0", 8
  %"tmp#22##0" = inttoptr i64 %"tmp#21##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#22##0"
  %"tmp#23##0" = inttoptr i64 %"#right#p##0" to ptr
  %"tmp#9##0" = load i64, ptr %"tmp#23##0"
  %"tmp#24##0" = add i64 %"#right#p##0", 8
  %"tmp#25##0" = inttoptr i64 %"tmp#24##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#25##0"
  %"tmp#11##0" = icmp eq i64 %"tmp#7##0", %"tmp#9##0"
  br i1 %"tmp#11##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = icmp eq i64 %"tmp#10##0", %"tmp#8##0"
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#26##0" = icmp eq i64 %"#left#a##0", %"#right#a##0"
  ret i1 %"tmp#26##0"
if.else.1:
  ret i1 0
if.else.0:
  ret i1 0
}

define external fastcc i64 @"alias_type2.posrec.a<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"alias_type2.posrec.a<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"alias_type2.posrec.p<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"alias_type2.posrec.p<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"alias_type2.posrec.posrec<0>"(i64 %"p##0", i64 %"a##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"p##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"a##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64} @"alias_type2.posrec.posrec<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#6##0" = insertvalue {i64, i64} %"tmp#5##0", i64 %"tmp#4##0", 1
  ret {i64, i64} %"tmp#6##0"
}

define external fastcc i1 @"alias_type2.posrec.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#13##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = add i64 %"#left##0", 8
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#16##0"
  %"tmp#17##0" = add i64 %"#right##0", 8
  %"tmp#18##0" = inttoptr i64 %"tmp#17##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#18##0"
  %"tmp#19##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#19##0"
  %"tmp#20##0" = add i64 %"tmp#3##0", 8
  %"tmp#21##0" = inttoptr i64 %"tmp#20##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#21##0"
  %"tmp#22##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#9##0" = load i64, ptr %"tmp#22##0"
  %"tmp#23##0" = add i64 %"tmp#5##0", 8
  %"tmp#24##0" = inttoptr i64 %"tmp#23##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#24##0"
  %"tmp#11##0" = icmp eq i64 %"tmp#7##0", %"tmp#9##0"
  br i1 %"tmp#11##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#12##0" = icmp eq i64 %"tmp#10##0", %"tmp#8##0"
  br i1 %"tmp#12##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#0##0" = icmp eq i64 %"tmp#4##0", %"tmp#6##0"
  %"tmp#25##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#25##0"
if.else.1:
  %"tmp#26##0" = xor i1 0, 1
  ret i1 %"tmp#26##0"
if.else.0:
  %"tmp#27##0" = xor i1 0, 1
  ret i1 %"tmp#27##0"
}

======================================================================
AFTER EVERYTHING:
 Module alias_type3
  representation  : (not a type)
  public submods  : position -> alias_type3.position
                    posrec -> alias_type3.posrec
  public resources: 
  public procs    : alias_type3.<0>
                    alias_type3.position.=<0>
                    alias_type3.position.position<0>
                    alias_type3.position.position<1>
                    alias_type3.position.x<0>
                    alias_type3.position.x<1>
                    alias_type3.position.y<0>
                    alias_type3.position.y<1>
                    alias_type3.position.~=<0>
                    alias_type3.posrec.=<0>
                    alias_type3.posrec.a<0>
                    alias_type3.posrec.a<1>
                    alias_type3.posrec.p<0>
                    alias_type3.posrec.p<1>
                    alias_type3.posrec.posrec<0>
                    alias_type3.posrec.posrec<1>
                    alias_type3.posrec.~=<0>
  imports         : public use alias_type3.position
                    public use alias_type3.posrec
                    use wybe
  resources       : 
  submodules      : alias_type3.position, alias_type3.posrec
  procs           : 

module top-level code > public {impure} (0 calls)
0: alias_type3.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#8##0:alias_type3.position) @alias_type3:nn:nn
    foreign lpvm mutate(~tmp#8##0:alias_type3.position, ?tmp#9##0:alias_type3.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int) @alias_type3:nn:nn
    foreign lpvm mutate(~tmp#9##0:alias_type3.position, ?tmp#10##0:alias_type3.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int) @alias_type3:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#13##0:alias_type3.posrec) @alias_type3:nn:nn
    foreign lpvm mutate(~tmp#13##0:alias_type3.posrec, ?tmp#14##0:alias_type3.posrec, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp#10##0:alias_type3.position) @alias_type3:nn:nn
    foreign lpvm mutate(~tmp#14##0:alias_type3.posrec, ?tmp#15##0:alias_type3.posrec, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int) @alias_type3:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#18##0:alias_type3.position) @alias_type3:nn:nn
    foreign lpvm mutate(~tmp#18##0:alias_type3.position, ?tmp#19##0:alias_type3.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int) @alias_type3:nn:nn
    foreign lpvm mutate(~tmp#19##0:alias_type3.position, ?tmp#20##0:alias_type3.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int) @alias_type3:nn:nn
    foreign lpvm {noalias} mutate(~tmp#15##0:alias_type3.posrec, ?rec##1:alias_type3.posrec, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#20##0:alias_type3.position) @alias_type3:nn:nn
    foreign lpvm {noalias} mutate(~tmp#10##0:alias_type3.position, ?pos##1:alias_type3.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 200:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(~pos##1:alias_type3.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#3##0:wybe.int, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#28##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @io:nn:nn
    foreign lpvm access(~rec##1:alias_type3.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:alias_type3.position) @alias_type3:nn:nn
    foreign lpvm access(~tmp#4##0:alias_type3.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @alias_type3:nn:nn
    foreign c print_int(~tmp#5##0:wybe.int, ~tmp#29##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#34##0:wybe.phantom, ?tmp#35##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#35##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'alias_type3'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"alias_type3.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 100, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 100, i64* %7 
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 %2, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 1, i64* %15 
  %16 = trunc i64 16 to i32  
  %17 = tail call ccc  i8*  @wybe_malloc(i32  %16)  
  %18 = ptrtoint i8* %17 to i64 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  store  i64 2, i64* %20 
  %21 = add   i64 %18, 8 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  store  i64 2, i64* %23 
  %24 = trunc i64 16 to i32  
  %25 = tail call ccc  i8*  @wybe_malloc(i32  %24)  
  %26 = ptrtoint i8* %25 to i64 
  %27 = inttoptr i64 %26 to i8* 
  %28 = inttoptr i64 %10 to i8* 
  %29 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %27, i8*  %28, i32  %29, i1  0)  
  %30 = inttoptr i64 %26 to i64* 
  %31 = getelementptr  i64, i64* %30, i64 0 
  store  i64 %18, i64* %31 
  %32 = inttoptr i64 %2 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  store  i64 200, i64* %33 
  %34 = inttoptr i64 %2 to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  %36 = load  i64, i64* %35 
  tail call ccc  void  @print_int(i64  %36)  
  tail call ccc  void  @putchar(i8  10)  
  %37 = inttoptr i64 %26 to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  %39 = load  i64, i64* %38 
  %40 = inttoptr i64 %39 to i64* 
  %41 = getelementptr  i64, i64* %40, i64 0 
  %42 = load  i64, i64* %41 
  tail call ccc  void  @print_int(i64  %42)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module alias_type3.position
  representation  : address
  public submods  : 
  public resources: 
  public procs    : alias_type3.position.=<0>
                    alias_type3.position.position<0>
                    alias_type3.position.position<1>
                    alias_type3.position.x<0>
                    alias_type3.position.x<1>
                    alias_type3.position.y<0>
                    alias_type3.position.y<1>
                    alias_type3.position.~=<0>
  imports         : use alias_type3
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: alias_type3.position.=<0>
=(#left##0:alias_type3.position, #right##0:alias_type3.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:alias_type3.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(~#left##0:alias_type3.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(#right##0:alias_type3.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(~#right##0:alias_type3.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @alias_type3:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



position > public {inline} (0 calls)
0: alias_type3.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:alias_type3.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:alias_type3.position) @alias_type3:nn:nn
    foreign lpvm mutate(~#rec##0:alias_type3.position, ?#rec##1:alias_type3.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm mutate(~#rec##1:alias_type3.position, ?#result##0:alias_type3.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int) @alias_type3:nn:nn
position > public {inline} (6 calls)
1: alias_type3.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:alias_type3.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:alias_type3.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(~#result##0:alias_type3.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @alias_type3:nn:nn


x > public {inline} (0 calls)
0: alias_type3.position.x<0>
x(#rec##0:alias_type3.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:alias_type3.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @alias_type3:nn:nn
x > public {inline} (0 calls)
1: alias_type3.position.x<1>
x(#rec##0:alias_type3.position, ?#rec##1:alias_type3.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:alias_type3.position, ?#rec##1:alias_type3.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @alias_type3:nn:nn


y > public {inline} (0 calls)
0: alias_type3.position.y<0>
y(#rec##0:alias_type3.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:alias_type3.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @alias_type3:nn:nn
y > public {inline} (0 calls)
1: alias_type3.position.y<1>
y(#rec##0:alias_type3.position, ?#rec##1:alias_type3.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:alias_type3.position, ?#rec##1:alias_type3.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @alias_type3:nn:nn


~= > public {inline} (0 calls)
0: alias_type3.position.~=<0>
~=(#left##0:alias_type3.position, #right##0:alias_type3.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:alias_type3.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(~#left##0:alias_type3.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(#right##0:alias_type3.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(~#right##0:alias_type3.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @alias_type3:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'alias_type3.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"alias_type3.position.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = icmp eq i64 %2, %9 
  br i1 %14, label %if.then, label %if.else 
if.then:
  %15 = icmp eq i64 %6, %13 
  ret i1 %15 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"alias_type3.position.position<0>"(i64  %"x##0", i64  %"y##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"x##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"y##0", i64* %7 
  ret i64 %2 
}


define external fastcc  {i64, i64} @"alias_type3.position.position<1>"(i64  %"#result##0")    {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i64} undef, i64 %2, 0 
  %8 = insertvalue {i64, i64} %7, i64 %6, 1 
  ret {i64, i64} %8 
}


define external fastcc  i64 @"alias_type3.position.x<0>"(i64  %"#rec##0")    {
entry:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"alias_type3.position.x<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i64 @"alias_type3.position.y<0>"(i64  %"#rec##0")    {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  ret i64 %3 
}


define external fastcc  i64 @"alias_type3.position.y<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"#field##0", i64* %8 
  ret i64 %2 
}


define external fastcc  i1 @"alias_type3.position.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = icmp eq i64 %2, %9 
  br i1 %14, label %if.then, label %if.else 
if.then:
  %15 = icmp eq i64 %6, %13 
  %16 = xor i1 %15, 1 
  ret i1 %16 
if.else:
  %17 = xor i1 0, 1 
  ret i1 %17 
}
--------------------------------------------------
 Module alias_type3.posrec
  representation  : address
  public submods  : 
  public resources: 
  public procs    : alias_type3.posrec.=<0>
                    alias_type3.posrec.a<0>
                    alias_type3.posrec.a<1>
                    alias_type3.posrec.p<0>
                    alias_type3.posrec.p<1>
                    alias_type3.posrec.posrec<0>
                    alias_type3.posrec.posrec<1>
                    alias_type3.posrec.~=<0>
  imports         : use alias_type3
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: alias_type3.posrec.=<0>
=(#left##0:alias_type3.posrec, #right##0:alias_type3.posrec, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:alias_type3.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#p##0:alias_type3.position) @alias_type3:nn:nn
    foreign lpvm access(~#left##0:alias_type3.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#a##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(#right##0:alias_type3.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#p##0:alias_type3.position) @alias_type3:nn:nn
    foreign lpvm access(~#right##0:alias_type3.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#a##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(#left#p##0:alias_type3.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(~#left#p##0:alias_type3.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(#right#p##0:alias_type3.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(~#right#p##0:alias_type3.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @alias_type3:nn:nn
    foreign llvm icmp_eq(~tmp#7##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
    case ~tmp#11##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#a##0:wybe.int, ~#right#a##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




a > public {inline} (0 calls)
0: alias_type3.posrec.a<0>
a(#rec##0:alias_type3.posrec, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:alias_type3.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @alias_type3:nn:nn
a > public {inline} (0 calls)
1: alias_type3.posrec.a<1>
a(#rec##0:alias_type3.posrec, ?#rec##1:alias_type3.posrec, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:alias_type3.posrec, ?#rec##1:alias_type3.posrec, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @alias_type3:nn:nn


p > public {inline} (0 calls)
0: alias_type3.posrec.p<0>
p(#rec##0:alias_type3.posrec, ?#result##0:alias_type3.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:alias_type3.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:alias_type3.position) @alias_type3:nn:nn
p > public {inline} (0 calls)
1: alias_type3.posrec.p<1>
p(#rec##0:alias_type3.posrec, ?#rec##1:alias_type3.posrec, #field##0:alias_type3.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:alias_type3.posrec, ?#rec##1:alias_type3.posrec, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:alias_type3.position) @alias_type3:nn:nn


posrec > public {inline} (0 calls)
0: alias_type3.posrec.posrec<0>
posrec(p##0:alias_type3.position, a##0:wybe.int, ?#result##0:alias_type3.posrec)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:alias_type3.posrec) @alias_type3:nn:nn
    foreign lpvm mutate(~#rec##0:alias_type3.posrec, ?#rec##1:alias_type3.posrec, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~p##0:alias_type3.position) @alias_type3:nn:nn
    foreign lpvm mutate(~#rec##1:alias_type3.posrec, ?#result##0:alias_type3.posrec, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~a##0:wybe.int) @alias_type3:nn:nn
posrec > public {inline} (6 calls)
1: alias_type3.posrec.posrec<1>
posrec(?p##0:alias_type3.position, ?a##0:wybe.int, #result##0:alias_type3.posrec)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:alias_type3.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?p##0:alias_type3.position) @alias_type3:nn:nn
    foreign lpvm access(~#result##0:alias_type3.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?a##0:wybe.int) @alias_type3:nn:nn


~= > public {inline} (0 calls)
0: alias_type3.posrec.~=<0>
~=(#left##0:alias_type3.posrec, #right##0:alias_type3.posrec, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:alias_type3.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:alias_type3.position) @alias_type3:nn:nn
    foreign lpvm access(~#left##0:alias_type3.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(#right##0:alias_type3.posrec, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:alias_type3.position) @alias_type3:nn:nn
    foreign lpvm access(~#right##0:alias_type3.posrec, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(tmp#3##0:alias_type3.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(~tmp#3##0:alias_type3.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(tmp#5##0:alias_type3.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int) @alias_type3:nn:nn
    foreign lpvm access(~tmp#5##0:alias_type3.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @alias_type3:nn:nn
    foreign llvm icmp_eq(~tmp#7##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
    case ~tmp#11##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#12##0:wybe.bool) @int:nn:nn
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)



  LLVM code       :

; ModuleID = 'alias_type3.posrec'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"alias_type3.posrec.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = inttoptr i64 %2 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  %16 = load  i64, i64* %15 
  %17 = add   i64 %2, 8 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  %20 = load  i64, i64* %19 
  %21 = inttoptr i64 %9 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  %23 = load  i64, i64* %22 
  %24 = add   i64 %9, 8 
  %25 = inttoptr i64 %24 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  %27 = load  i64, i64* %26 
  %28 = icmp eq i64 %16, %23 
  br i1 %28, label %if.then, label %if.else 
if.then:
  %29 = icmp eq i64 %27, %20 
  br i1 %29, label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %30 = icmp eq i64 %6, %13 
  ret i1 %30 
if.else1:
  ret i1 0 
}


define external fastcc  i64 @"alias_type3.posrec.a<0>"(i64  %"#rec##0")    {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  ret i64 %3 
}


define external fastcc  i64 @"alias_type3.posrec.a<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"#field##0", i64* %8 
  ret i64 %2 
}


define external fastcc  i64 @"alias_type3.posrec.p<0>"(i64  %"#rec##0")    {
entry:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"alias_type3.posrec.p<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i64 @"alias_type3.posrec.posrec<0>"(i64  %"p##0", i64  %"a##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"p##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"a##0", i64* %7 
  ret i64 %2 
}


define external fastcc  {i64, i64} @"alias_type3.posrec.posrec<1>"(i64  %"#result##0")    {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i64} undef, i64 %2, 0 
  %8 = insertvalue {i64, i64} %7, i64 %6, 1 
  ret {i64, i64} %8 
}


define external fastcc  i1 @"alias_type3.posrec.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = inttoptr i64 %2 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  %16 = load  i64, i64* %15 
  %17 = add   i64 %2, 8 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  %20 = load  i64, i64* %19 
  %21 = inttoptr i64 %9 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  %23 = load  i64, i64* %22 
  %24 = add   i64 %9, 8 
  %25 = inttoptr i64 %24 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  %27 = load  i64, i64* %26 
  %28 = icmp eq i64 %16, %23 
  br i1 %28, label %if.then, label %if.else 
if.then:
  %29 = icmp eq i64 %27, %20 
  br i1 %29, label %if.then1, label %if.else1 
if.else:
  %33 = xor i1 0, 1 
  ret i1 %33 
if.then1:
  %30 = icmp eq i64 %6, %13 
  %31 = xor i1 %30, 1 
  ret i1 %31 
if.else1:
  %32 = xor i1 0, 1 
  ret i1 %32 
}

======================================================================
AFTER EVERYTHING:
 Module alias2
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : alias2.<0>
                    alias2.fcopy<0>
                    alias2.pcopy<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

*main* > public {impure} (0 calls)
0: alias2.<0>
(io##0:wybe.phantom, ?io##5:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.string.print_string<0>("copy a position":wybe.string, ~#io##0:wybe.phantom, ?tmp#3##0:wybe.phantom) #6 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#3##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#6##0:position.position)
    foreign lpvm mutate(~tmp#6##0:position.position, ?tmp#7##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp#7##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 20:wybe.int)
    alias2.pcopy<0>(~tmp#0##0:position.position, ?r##0:position.position, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) #2 @alias2:20:2
    wybe.string.print_string<0>("--- After calling pcopy: ":wybe.string, ~#io##2:wybe.phantom, ?tmp#10##0:wybe.phantom) #7 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?#io##3:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect r(0,20):":wybe.string, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) #8 @io:nn:nn
    position.printPosition<0>(~r##0:position.position, ~#io##4:wybe.phantom, ?#io##5:wybe.phantom) #5 @alias2:23:2


fcopy > public (0 calls)
0: alias2.fcopy<0>
fcopy(p1##0:position.position, ?#result##0:position.position):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:position.position)
    foreign lpvm mutate(~tmp#5##0:position.position, ?tmp#6##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp#6##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm access(p1##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int)
    foreign lpvm {noalias} mutate(~tmp#0##0:position.position, ?%p2##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int)
    foreign lpvm access(~p1##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int)
    foreign lpvm {noalias} mutate(~%p2##1:position.position, ?%#result##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.int)


pcopy > public (1 calls)
0: alias2.pcopy<0>
pcopy(p1##0:position.position, ?p2##2:position.position, io##0:wybe.phantom, ?io##3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:position.position)
    foreign lpvm mutate(~tmp#5##0:position.position, ?tmp#6##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp#6##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm access(p1##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int)
    foreign lpvm {noalias} mutate(~tmp#0##0:position.position, ?%p2##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int)
    foreign lpvm access(~p1##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int)
    foreign lpvm {noalias} mutate(~%p2##1:position.position, ?%p2##2:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.int)
    wybe.string.print_string<0>("--- Inside pcopy: ":wybe.string, ~#io##0:wybe.phantom, ?tmp#15##0:wybe.phantom) #8 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("expect p2(0,20):":wybe.string, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) #9 @io:nn:nn
    position.printPosition<0>(p2##2:position.position, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #7 @alias2:11:4

  LLVM code       :

; ModuleID = 'alias2'


 


declare external fastcc  void @"position.printPosition<0>"(i64)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


declare external ccc  void @putchar(i8)    


@alias2.16 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @alias2.15 to i64) }


@alias2.15 =    constant [?? x i8] c"expect r(0,20):\00"


@alias2.13 =    constant {i64, i64} { i64 25, i64 ptrtoint ([?? x i8]* @alias2.12 to i64) }


@alias2.12 =    constant [?? x i8] c"--- After calling pcopy: \00"


@alias2.2 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @alias2.1 to i64) }


@alias2.1 =    constant [?? x i8] c"copy a position\00"


@alias2.62 =    constant {i64, i64} { i64 16, i64 ptrtoint ([?? x i8]* @alias2.61 to i64) }


@alias2.61 =    constant [?? x i8] c"expect p2(0,20):\00"


@alias2.59 =    constant {i64, i64} { i64 18, i64 ptrtoint ([?? x i8]* @alias2.58 to i64) }


@alias2.58 =    constant [?? x i8] c"--- Inside pcopy: \00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"alias2.<0>"()    {
entry:
  %3 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias2.2, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %3)  
  tail call ccc  void  @putchar(i8  10)  
  %4 = trunc i64 16 to i32  
  %5 = tail call ccc  i8*  @wybe_malloc(i32  %4)  
  %6 = ptrtoint i8* %5 to i64 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 0, i64* %8 
  %9 = add   i64 %6, 8 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  store  i64 20, i64* %11 
  %"1#r##0" = tail call fastcc  i64  @"alias2.pcopy<0>"(i64  %6)  
  %14 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias2.13, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %14)  
  tail call ccc  void  @putchar(i8  10)  
  %17 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias2.16, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %17)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"1#r##0")  
  ret void 
}


define external fastcc  i64 @"alias2.fcopy<0>"(i64  %"p1##0")    {
entry:
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 0, i64* %22 
  %23 = add   i64 %20, 8 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  store  i64 0, i64* %25 
  %26 = inttoptr i64 %"p1##0" to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %29 = inttoptr i64 %20 to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  store  i64 %28, i64* %30 
  %31 = add   i64 %"p1##0", 8 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  %35 = add   i64 %20, 8 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  store  i64 %34, i64* %37 
  ret i64 %20 
}


define external fastcc  i64 @"alias2.pcopy<0>"(i64  %"p1##0")    {
entry:
  %38 = trunc i64 16 to i32  
  %39 = tail call ccc  i8*  @wybe_malloc(i32  %38)  
  %40 = ptrtoint i8* %39 to i64 
  %41 = inttoptr i64 %40 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  store  i64 0, i64* %42 
  %43 = add   i64 %40, 8 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  store  i64 0, i64* %45 
  %46 = inttoptr i64 %"p1##0" to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  %48 = load  i64, i64* %47 
  %49 = inttoptr i64 %40 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  store  i64 %48, i64* %50 
  %51 = add   i64 %"p1##0", 8 
  %52 = inttoptr i64 %51 to i64* 
  %53 = getelementptr  i64, i64* %52, i64 0 
  %54 = load  i64, i64* %53 
  %55 = add   i64 %40, 8 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  store  i64 %54, i64* %57 
  %60 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias2.59, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %60)  
  tail call ccc  void  @putchar(i8  10)  
  %63 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias2.62, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %63)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %40)  
  ret i64 %40 
}
--------------------------------------------------
 Module position
  representation  : (not a type)
  public submods  : position -> position.position
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : public use position.position
                    use wybe
  resources       : 
  submodules      : position.position
  procs           : 

printPosition > public (0 calls)
0: position.printPosition<0>
printPosition(pos##0:position.position, io##0:wybe.phantom, ?io##5:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.string.print_string<0>(" (":wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #7 @io:nn:nn
    foreign lpvm access(pos##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int)
    foreign c print_int(~tmp#0##0:wybe.int, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>(",":wybe.string, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #8 @io:nn:nn
    foreign lpvm access(~pos##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int)
    foreign c print_int(~tmp#1##0:wybe.int, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>(")":wybe.string, ~#io##4:wybe.phantom, ?tmp#14##0:wybe.phantom) #9 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#14##0:wybe.phantom, ?#io##5:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'position'


 


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


declare external ccc  void @print_int(i64)    


@position.15 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.14 to i64) }


@position.14 =    constant [?? x i8] c")\00"


@position.8 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.7 to i64) }


@position.7 =    constant [?? x i8] c",\00"


@position.2 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @position.1 to i64) }


@position.1 =    constant [?? x i8] c" (\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"position.printPosition<0>"(i64  %"pos##0")    {
entry:
  %3 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.2, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %3)  
  %4 = inttoptr i64 %"pos##0" to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  tail call ccc  void  @print_int(i64  %6)  
  %9 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.8, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %9)  
  %10 = add   i64 %"pos##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  tail call ccc  void  @print_int(i64  %13)  
  %16 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.15, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %16)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module position.position
  representation  : address
  public submods  : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: position.position.=<0>
=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int)
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int)
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int)
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int)
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



position > public {inline} (0 calls)
0: position.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:position.position):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:position.position)
    foreign lpvm mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int)
    foreign lpvm mutate(~#rec##1:position.position, ?#result##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int)
position > public {inline} (6 calls)
1: position.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:position.position):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#result##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int)
    foreign lpvm access(~#result##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int)


x > public {inline} (0 calls)
0: position.position.x<0>
x(#rec##0:position.position, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
x > public {inline} (0 calls)
1: position.position.x<1>
x(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


y > public {inline} (0 calls)
0: position.position.y<0>
y(#rec##0:position.position, ?#result##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
y > public {inline} (0 calls)
1: position.position.y<1>
y(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int)


~= > public {inline} (0 calls)
0: position.position.~=<0>
~=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int)
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int)
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int)
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int)
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'position.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"position.position.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#left##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"#right##0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"1#tmp#1##0" = icmp eq i64 %3, %10 
  br i1 %"1#tmp#1##0", label %if.then, label %if.else 
if.then:
  %"2##success##0" = icmp eq i64 %7, %14 
  ret i1 %"2##success##0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"position.position.position<0>"(i64  %"x##0", i64  %"y##0")    {
entry:
  %15 = trunc i64 16 to i32  
  %16 = tail call ccc  i8*  @wybe_malloc(i32  %15)  
  %17 = ptrtoint i8* %16 to i64 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  store  i64 %"x##0", i64* %19 
  %20 = add   i64 %17, 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"y##0", i64* %22 
  ret i64 %17 
}


define external fastcc  {i64, i64} @"position.position.position<1>"(i64  %"#result##0")    {
entry:
  %23 = inttoptr i64 %"#result##0" to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"#result##0", 8 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %30 = insertvalue {i64, i64} undef, i64 %25, 0 
  %31 = insertvalue {i64, i64} %30, i64 %29, 1 
  ret {i64, i64} %31 
}


define external fastcc  i64 @"position.position.x<0>"(i64  %"#rec##0")    {
entry:
  %32 = inttoptr i64 %"#rec##0" to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  ret i64 %34 
}


define external fastcc  i64 @"position.position.x<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %35 = trunc i64 16 to i32  
  %36 = tail call ccc  i8*  @wybe_malloc(i32  %35)  
  %37 = ptrtoint i8* %36 to i64 
  %38 = inttoptr i64 %37 to i8* 
  %39 = inttoptr i64 %"#rec##0" to i8* 
  %40 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %38, i8*  %39, i32  %40, i32  8, i1  0)  
  %41 = inttoptr i64 %37 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  store  i64 %"#field##0", i64* %42 
  ret i64 %37 
}


define external fastcc  i64 @"position.position.y<0>"(i64  %"#rec##0")    {
entry:
  %43 = add   i64 %"#rec##0", 8 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  %46 = load  i64, i64* %45 
  ret i64 %46 
}


define external fastcc  i64 @"position.position.y<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %47 = trunc i64 16 to i32  
  %48 = tail call ccc  i8*  @wybe_malloc(i32  %47)  
  %49 = ptrtoint i8* %48 to i64 
  %50 = inttoptr i64 %49 to i8* 
  %51 = inttoptr i64 %"#rec##0" to i8* 
  %52 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %50, i8*  %51, i32  %52, i32  8, i1  0)  
  %53 = add   i64 %49, 8 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  store  i64 %"#field##0", i64* %55 
  ret i64 %49 
}


define external fastcc  i1 @"position.position.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %56 = inttoptr i64 %"#left##0" to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %59 = add   i64 %"#left##0", 8 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  %62 = load  i64, i64* %61 
  %63 = inttoptr i64 %"#right##0" to i64* 
  %64 = getelementptr  i64, i64* %63, i64 0 
  %65 = load  i64, i64* %64 
  %66 = add   i64 %"#right##0", 8 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  %69 = load  i64, i64* %68 
  %"1#tmp#7##0" = icmp eq i64 %58, %65 
  br i1 %"1#tmp#7##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#0##0" = icmp eq i64 %62, %69 
  %"2##success##0" = xor i1 %"2#tmp#0##0", 1 
  ret i1 %"2##success##0" 
if.else:
  %"3##success##0" = xor i1 0, 1 
  ret i1 %"3##success##0" 
}

======================================================================
AFTER EVERYTHING:
 Module higher_order_tests
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : higher_order_tests.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: higher_order_tests.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    higher_order_tests.gen#1<0>(_:wybe.int, ?tmp#8##0:wybe.bool) #0 @higher_order_tests:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        higher_order_tests.gen#2<0>(higher_order_tests.gen#1<1><>:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3

    1:
        wybe.string.print<0>("*1":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#13##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        higher_order_tests.gen#2<0>(higher_order_tests.gen#1<1><>:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2



do_test > {inline} (12 calls)
0: higher_order_tests.do_test<0>
do_test(f##0:(I, ?wybe.bool), i##0:I, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~f##0:(I, ?wybe.bool)(~i##0:I, ?#success##0:wybe.bool) #0 @higher_order_tests:nn:nn


do_test2 > {inline} (12 calls)
0: higher_order_tests.do_test2<0>
do_test2(f##0:(I, ?wybe.bool), i##0:I, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~f##0:(I, ?wybe.bool)(~i##0:I, ?#success##0:wybe.bool) #0 @higher_order_tests:nn:nn


gen#1 > {inline} (1 calls)
0: higher_order_tests.gen#1<0>
gen#1([anon#1#1##0:wybe.int], ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)
gen#1 > {inline} (3 calls)
1: higher_order_tests.gen#1<1>
gen#1(anon#1#1##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


gen#2 > (2 calls)
0: higher_order_tests.gen#2<0>
gen#2(t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    t##0:(I, ?wybe.bool)(1:I, ?tmp#7##0:wybe.bool) #0 @higher_order_tests:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        higher_order_tests.gen#3<0>(~t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3

    1:
        wybe.string.print<0>("1":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        higher_order_tests.gen#3<0>(~t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2



gen#3 > (2 calls)
0: higher_order_tests.gen#3<0>
gen#3(t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    t##0:(I, ?wybe.bool)(2:I, ?tmp#6##0:wybe.bool) #0 @higher_order_tests:nn:nn
    case ~tmp#6##0:wybe.bool of
    0:
        higher_order_tests.gen#4<0>(~t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3

    1:
        wybe.string.print<0>("*2":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        higher_order_tests.gen#4<0>(~t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2



gen#4 > (2 calls)
0: higher_order_tests.gen#4<0>
gen#4(t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~t##0:(I, ?wybe.bool)(2:I, ?tmp#5##0:wybe.bool) #0 @higher_order_tests:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        higher_order_tests.gen#5<0>(_:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3

    1:
        wybe.string.print<0>("2":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        higher_order_tests.gen#5<0>(_:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2



gen#5 > (2 calls)
0: higher_order_tests.gen#5<0>
gen#5([t##0:(wybe.int, ?wybe.bool)])<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("------":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    higher_order_tests.gen#6<0>(1:wybe.int, ?tmp#4##0:wybe.bool) #0 @higher_order_tests:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        higher_order_tests.gen#7<0>(higher_order_tests.gen#6<1><>:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4

    1:
        wybe.string.print<0>("*1":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        higher_order_tests.gen#7<0>(higher_order_tests.gen#6<1><>:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3



gen#6 > {inline} (1 calls)
0: higher_order_tests.gen#6<0>
gen#6(anon#2#1##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~anon#2#1##0:wybe.int, 1:wybe.int, ?#success##0:wybe.bool) @int:nn:nn
gen#6 > {inline} (3 calls)
1: higher_order_tests.gen#6<1>
gen#6(anon#2#1##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~anon#2#1##0:wybe.int, 1:wybe.int, ?#success##0:wybe.bool) @int:nn:nn


gen#7 > (2 calls)
0: higher_order_tests.gen#7<0>
gen#7(t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    t##0:(I, ?wybe.bool)(1:I, ?tmp#3##0:wybe.bool) #0 @higher_order_tests:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        higher_order_tests.gen#8<0>(~t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3

    1:
        wybe.string.print<0>("1":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#7##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        higher_order_tests.gen#8<0>(~t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2



gen#8 > (2 calls)
0: higher_order_tests.gen#8<0>
gen#8(t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    t##0:(I, ?wybe.bool)(2:I, ?tmp#2##0:wybe.bool) #0 @higher_order_tests:nn:nn
    case ~tmp#2##0:wybe.bool of
    0:
        higher_order_tests.gen#9<0>(~t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3

    1:
        wybe.string.print<0>("*2":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        higher_order_tests.gen#9<0>(~t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2



gen#9 > (2 calls)
0: higher_order_tests.gen#9<0>
gen#9(t##0:(wybe.int, ?wybe.bool))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~t##0:(I, ?wybe.bool)(2:I, ?tmp#1##0:wybe.bool) #0 @higher_order_tests:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:

    1:
        wybe.string.print<0>("2":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


  LLVM code       :

; ModuleID = 'higher_order_tests'


 


@higher_order_tests.4 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @higher_order_tests.3 to i64) }


@higher_order_tests.8 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @higher_order_tests.7 to i64) }


@higher_order_tests.1 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @higher_order_tests.0 to i64) }


@higher_order_tests.6 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @higher_order_tests.5 to i64) }


@higher_order_tests.10 =    constant {i64, i64} { i64 6, i64 ptrtoint ([?? x i8]* @higher_order_tests.9 to i64) }


@higher_order_tests.0 =    constant [?? x i8] c"*1\00"


@higher_order_tests.5 =    constant [?? x i8] c"*2\00"


@higher_order_tests.9 =    constant [?? x i8] c"------\00"


@higher_order_tests.3 =    constant [?? x i8] c"1\00"


@higher_order_tests.7 =    constant [?? x i8] c"2\00"


@higher_order_tests.2 =    constant [1 x i64] [i64 ptrtoint (i64 (i64, i64)* @"higher_order_tests.gen#1<1>" to i64)]


@higher_order_tests.11 =    constant [1 x i64] [i64 ptrtoint (i64 (i64, i64)* @"higher_order_tests.gen#6<1>" to i64)]


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"higher_order_tests.<0>"()    {
entry:
  %0 = tail call fastcc  i1  @"higher_order_tests.gen#1<0>"()  
  br i1 %0, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @higher_order_tests.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"higher_order_tests.gen#2<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_tests.2, i32 0, i32 0) to i64))  
  ret void 
if.else:
  tail call fastcc  void  @"higher_order_tests.gen#2<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_tests.2, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  i1 @"higher_order_tests.do_test<0>"(i64  %"f##0", i64  %"i##0")    {
entry:
  %0 = inttoptr i64 %"f##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to i64 (i64, i64)* 
  %3 = tail call fastcc  i64  %2(i64  %"f##0", i64  %"i##0")  
  %4 = trunc i64 %3 to i1  
  ret i1 %4 
}


define external fastcc  i1 @"higher_order_tests.do_test2<0>"(i64  %"f##0", i64  %"i##0")    {
entry:
  %0 = inttoptr i64 %"f##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to i64 (i64, i64)* 
  %3 = tail call fastcc  i64  %2(i64  %"f##0", i64  %"i##0")  
  %4 = trunc i64 %3 to i1  
  ret i1 %4 
}


define external fastcc  i1 @"higher_order_tests.gen#1<0>"()    {
entry:
  ret i1 1 
}


define external fastcc  i64 @"higher_order_tests.gen#1<1>"(i64  %"#env##0", i64  %"anon#1#1##0")    {
entry:
  %0 = zext i1 1 to i64  
  ret i64 %0 
}


define external fastcc  void @"higher_order_tests.gen#2<0>"(i64  %"t##0")    {
entry:
  %0 = inttoptr i64 %"t##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to i64 (i64, i64)* 
  %3 = tail call fastcc  i64  %2(i64  %"t##0", i64  1)  
  %4 = trunc i64 %3 to i1  
  br i1 %4, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @higher_order_tests.4, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"higher_order_tests.gen#3<0>"(i64  %"t##0")  
  ret void 
if.else:
  musttail call fastcc  void  @"higher_order_tests.gen#3<0>"(i64  %"t##0")  
  ret void 
}


define external fastcc  void @"higher_order_tests.gen#3<0>"(i64  %"t##0")    {
entry:
  %0 = inttoptr i64 %"t##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to i64 (i64, i64)* 
  %3 = tail call fastcc  i64  %2(i64  %"t##0", i64  2)  
  %4 = trunc i64 %3 to i1  
  br i1 %4, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @higher_order_tests.6, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"higher_order_tests.gen#4<0>"(i64  %"t##0")  
  ret void 
if.else:
  musttail call fastcc  void  @"higher_order_tests.gen#4<0>"(i64  %"t##0")  
  ret void 
}


define external fastcc  void @"higher_order_tests.gen#4<0>"(i64  %"t##0")    {
entry:
  %0 = inttoptr i64 %"t##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to i64 (i64, i64)* 
  %3 = tail call fastcc  i64  %2(i64  %"t##0", i64  2)  
  %4 = trunc i64 %3 to i1  
  br i1 %4, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @higher_order_tests.8, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"higher_order_tests.gen#5<0>"()  
  ret void 
if.else:
  tail call fastcc  void  @"higher_order_tests.gen#5<0>"()  
  ret void 
}


define external fastcc  void @"higher_order_tests.gen#5<0>"()    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @higher_order_tests.10, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %0 = tail call fastcc  i1  @"higher_order_tests.gen#6<0>"(i64  1)  
  br i1 %0, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @higher_order_tests.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"higher_order_tests.gen#7<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_tests.11, i32 0, i32 0) to i64))  
  ret void 
if.else:
  tail call fastcc  void  @"higher_order_tests.gen#7<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @higher_order_tests.11, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  i1 @"higher_order_tests.gen#6<0>"(i64  %"anon#2#1##0")    {
entry:
  %0 = icmp eq i64 %"anon#2#1##0", 1 
  ret i1 %0 
}


define external fastcc  i64 @"higher_order_tests.gen#6<1>"(i64  %"#env##0", i64  %"anon#2#1##0")    {
entry:
  %0 = icmp eq i64 %"anon#2#1##0", 1 
  %1 = zext i1 %0 to i64  
  ret i64 %1 
}


define external fastcc  void @"higher_order_tests.gen#7<0>"(i64  %"t##0")    {
entry:
  %0 = inttoptr i64 %"t##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to i64 (i64, i64)* 
  %3 = tail call fastcc  i64  %2(i64  %"t##0", i64  1)  
  %4 = trunc i64 %3 to i1  
  br i1 %4, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @higher_order_tests.4, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"higher_order_tests.gen#8<0>"(i64  %"t##0")  
  ret void 
if.else:
  musttail call fastcc  void  @"higher_order_tests.gen#8<0>"(i64  %"t##0")  
  ret void 
}


define external fastcc  void @"higher_order_tests.gen#8<0>"(i64  %"t##0")    {
entry:
  %0 = inttoptr i64 %"t##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to i64 (i64, i64)* 
  %3 = tail call fastcc  i64  %2(i64  %"t##0", i64  2)  
  %4 = trunc i64 %3 to i1  
  br i1 %4, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @higher_order_tests.6, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"higher_order_tests.gen#9<0>"(i64  %"t##0")  
  ret void 
if.else:
  musttail call fastcc  void  @"higher_order_tests.gen#9<0>"(i64  %"t##0")  
  ret void 
}


define external fastcc  void @"higher_order_tests.gen#9<0>"(i64  %"t##0")    {
entry:
  %0 = inttoptr i64 %"t##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to i64 (i64, i64)* 
  %3 = tail call fastcc  i64  %2(i64  %"t##0", i64  2)  
  %4 = trunc i64 %3 to i1  
  br i1 %4, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @higher_order_tests.8, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  ret void 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module person2
  representation  : (not a type)
  public submods  : person -> person2.person
  public resources: 
  public procs    : person2.<0>
                    person2.person.=<0>
                    person2.person.firstname<0>
                    person2.person.firstname<1>
                    person2.person.lastname<0>
                    person2.person.lastname<1>
                    person2.person.person<0>
                    person2.person.person<1>
                    person2.person.~=<0>
  imports         : public use person2.person
                    use wybe
  resources       : 
  submodules      : person2.person
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: person2.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("Smith":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @person2:nn:nn
    wybe.string.print<0>("Smith":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @person2:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'person2'

source_filename = "!ROOT!/final-dump/person2.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"Smith\00", align 8
@"string#1" = private unnamed_addr constant {i64, i64} { i64 5, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"person2.<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#1" to i64 ))
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#1" to i64 ))
  ret void
}

--------------------------------------------------
 Module person2.person
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : person2.person.=<0>
                    person2.person.firstname<0>
                    person2.person.firstname<1>
                    person2.person.lastname<0>
                    person2.person.lastname<1>
                    person2.person.person<0>
                    person2.person.person<1>
                    person2.person.~=<0>
  imports         : use person2
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: person2.person.=<0>
=(#left##0:person2.person, #right##0:person2.person, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:person2.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#firstname##0:wybe.string) @person2:nn:nn
    foreign lpvm access(~#left##0:person2.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#lastname##0:wybe.string) @person2:nn:nn
    foreign lpvm access(#right##0:person2.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#firstname##0:wybe.string) @person2:nn:nn
    foreign lpvm access(~#right##0:person2.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#lastname##0:wybe.string) @person2:nn:nn
    wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#firstname##0:wybe.string, ~#right#firstname##0:wybe.string, ~#left#firstname##0:wybe.string, ~#right#firstname##0:wybe.string, ?tmp#7##0:wybe.comparison) #4 @string:nn:nn
    foreign llvm icmp_eq(~tmp#7##0:wybe.comparison, 1:wybe.comparison, ?tmp#1##0:wybe.bool) @string:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#lastname##0:wybe.string, ~#right#lastname##0:wybe.string, ~#left#lastname##0:wybe.string, ~#right#lastname##0:wybe.string, ?tmp#10##0:wybe.comparison) #5 @string:nn:nn
        foreign llvm icmp_eq(~tmp#10##0:wybe.comparison, 1:wybe.comparison, ?#success##0:wybe.bool) @string:nn:nn



proc firstname > public {inline} (0 calls)
0: person2.person.firstname<0>
firstname(#rec##0:person2.person, ?#result##0:wybe.string)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:person2.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.string) @person2:nn:nn
proc firstname > public {inline} (0 calls)
1: person2.person.firstname<1>
firstname(#rec##0:person2.person, ?#rec##1:person2.person, #field##0:wybe.string)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:person2.person, ?#rec##1:person2.person, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.string) @person2:nn:nn


proc lastname > public {inline} (0 calls)
0: person2.person.lastname<0>
lastname(#rec##0:person2.person, ?#result##0:wybe.string)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:person2.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.string) @person2:nn:nn
proc lastname > public {inline} (0 calls)
1: person2.person.lastname<1>
lastname(#rec##0:person2.person, ?#rec##1:person2.person, #field##0:wybe.string)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:person2.person, ?#rec##1:person2.person, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.string) @person2:nn:nn


proc person > public {inline} (0 calls)
0: person2.person.person<0>
person(firstname##0:wybe.string, lastname##0:wybe.string, ?#result##0:person2.person)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:person2.person) @person2:nn:nn
    foreign lpvm mutate(~#rec##0:person2.person, ?#rec##1:person2.person, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~firstname##0:wybe.string) @person2:nn:nn
    foreign lpvm mutate(~#rec##1:person2.person, ?#result##0:person2.person, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lastname##0:wybe.string) @person2:nn:nn
proc person > public {inline} (6 calls)
1: person2.person.person<1>
person(?firstname##0:wybe.string, ?lastname##0:wybe.string, #result##0:person2.person)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:person2.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?firstname##0:wybe.string) @person2:nn:nn
    foreign lpvm access(~#result##0:person2.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?lastname##0:wybe.string) @person2:nn:nn


proc ~= > public {inline} (0 calls)
0: person2.person.~=<0>
~=(#left##0:person2.person, #right##0:person2.person, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:person2.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.string) @person2:nn:nn
    foreign lpvm access(~#left##0:person2.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.string) @person2:nn:nn
    foreign lpvm access(#right##0:person2.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.string) @person2:nn:nn
    foreign lpvm access(~#right##0:person2.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.string) @person2:nn:nn
    wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~tmp#3##0:wybe.string, ~tmp#5##0:wybe.string, ~tmp#3##0:wybe.string, ~tmp#5##0:wybe.string, ?tmp#7##0:wybe.comparison) #1 @string:nn:nn
    foreign llvm icmp_eq(~tmp#7##0:wybe.comparison, 1:wybe.comparison, ?tmp#8##0:wybe.bool) @string:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~tmp#4##0:wybe.string, ~tmp#6##0:wybe.string, ~tmp#4##0:wybe.string, ~tmp#6##0:wybe.string, ?tmp#9##0:wybe.comparison) #2 @string:nn:nn
        foreign llvm icmp_eq(~tmp#9##0:wybe.comparison, 1:wybe.comparison, ?tmp#0##0:wybe.bool) @string:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'person2.person'

source_filename = "!ROOT!/final-dump/person2.wybe"
target triple    ????


declare external fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2, i64, i64, i64, i64)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"person2.person.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#11##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#firstname##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"#left##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"#left#lastname##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#firstname##0" = load i64, ptr %"tmp#14##0"
  %"tmp#15##0" = add i64 %"#right##0", 8
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  %"#right#lastname##0" = load i64, ptr %"tmp#16##0"
  %"tmp#7##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 %"#left#firstname##0", i64 %"#right#firstname##0", i64 %"#left#firstname##0", i64 %"#right#firstname##0")
  %"tmp#1##0" = icmp eq i2 %"tmp#7##0", 1
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#10##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 %"#left#lastname##0", i64 %"#right#lastname##0", i64 %"#left#lastname##0", i64 %"#right#lastname##0")
  %"tmp#17##0" = icmp eq i2 %"tmp#10##0", 1
  ret i1 %"tmp#17##0"
if.else.0:
  ret i1 0
}

define external fastcc i64 @"person2.person.firstname<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"person2.person.firstname<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"person2.person.lastname<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"person2.person.lastname<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"person2.person.person<0>"(i64 %"firstname##0", i64 %"lastname##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"firstname##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"lastname##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64} @"person2.person.person<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#6##0" = insertvalue {i64, i64} %"tmp#5##0", i64 %"tmp#4##0", 1
  ret {i64, i64} %"tmp#6##0"
}

define external fastcc i1 @"person2.person.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#10##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#10##0"
  %"tmp#11##0" = add i64 %"#left##0", 8
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = add i64 %"#right##0", 8
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#15##0"
  %"tmp#7##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 %"tmp#3##0", i64 %"tmp#5##0", i64 %"tmp#3##0", i64 %"tmp#5##0")
  %"tmp#8##0" = icmp eq i2 %"tmp#7##0", 1
  br i1 %"tmp#8##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#9##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 %"tmp#4##0", i64 %"tmp#6##0", i64 %"tmp#4##0", i64 %"tmp#6##0")
  %"tmp#0##0" = icmp eq i2 %"tmp#9##0", 1
  %"tmp#16##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#16##0"
if.else.0:
  %"tmp#17##0" = xor i1 0, 1
  ret i1 %"tmp#17##0"
}

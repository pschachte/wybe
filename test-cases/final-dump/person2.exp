======================================================================
AFTER EVERYTHING:
 Module person2
  representation  : (not a type)
  public submods  : person -> person2.person
  public resources: 
  public procs    : person2.<0>
                    person2.person.=<0>
                    person2.person.firstname<0>
                    person2.person.firstname<1>
                    person2.person.lastname<0>
                    person2.person.lastname<1>
                    person2.person.person<0>
                    person2.person.person<1>
                    person2.person.~=<0>
  imports         : public use person2.person
                    use wybe
  resources       : 
  submodules      : person2.person
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: person2.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("Smith":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @person2:nn:nn
    wybe.string.print<0>("Smith":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @person2:nn:nn

  LLVM code       :

; ModuleID = 'person2'


 


@person2.1 =    constant {i64, i64} { i64 5, i64 ptrtoint ([?? x i8]* @person2.0 to i64) }


@person2.0 =    constant [?? x i8] c"Smith\00"


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"person2.<0>"() alwaysinline   {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @person2.1, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @person2.1, i32 0, i32 0) to i64))  
  ret void 
}
--------------------------------------------------
 Module person2.person
  representation  : address
  public submods  : 
  public resources: 
  public procs    : person2.person.=<0>
                    person2.person.firstname<0>
                    person2.person.firstname<1>
                    person2.person.lastname<0>
                    person2.person.lastname<1>
                    person2.person.person<0>
                    person2.person.person<1>
                    person2.person.~=<0>
  imports         : use person2
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: person2.person.=<0>
=(#left##0:person2.person, #right##0:person2.person, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:person2.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#firstname##0:wybe.string) @person2:nn:nn
    foreign lpvm access(~#left##0:person2.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#lastname##0:wybe.string) @person2:nn:nn
    foreign lpvm access(#right##0:person2.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#firstname##0:wybe.string) @person2:nn:nn
    foreign lpvm access(~#right##0:person2.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#lastname##0:wybe.string) @person2:nn:nn
    wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#firstname##0:wybe.string, ~#right#firstname##0:wybe.string, ~#left#firstname##0:wybe.string, ~#right#firstname##0:wybe.string, ?tmp#7##0:wybe.comparison) #4 @string:nn:nn
    foreign llvm icmp_eq(~tmp#7##0:wybe.comparison, 1:wybe.comparison, ?tmp#1##0:wybe.bool) @comparison:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#lastname##0:wybe.string, ~#right#lastname##0:wybe.string, ~#left#lastname##0:wybe.string, ~#right#lastname##0:wybe.string, ?tmp#10##0:wybe.comparison) #5 @string:nn:nn
        foreign llvm icmp_eq(~tmp#10##0:wybe.comparison, 1:wybe.comparison, ?#success##0:wybe.bool) @comparison:nn:nn



firstname > public {inline} (0 calls)
0: person2.person.firstname<0>
firstname(#rec##0:person2.person, ?#result##0:wybe.string)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:person2.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.string) @person2:nn:nn
firstname > public {inline} (0 calls)
1: person2.person.firstname<1>
firstname(#rec##0:person2.person, ?#rec##1:person2.person, #field##0:wybe.string)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:person2.person, ?#rec##1:person2.person, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.string) @person2:nn:nn


lastname > public {inline} (0 calls)
0: person2.person.lastname<0>
lastname(#rec##0:person2.person, ?#result##0:wybe.string)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:person2.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.string) @person2:nn:nn
lastname > public {inline} (0 calls)
1: person2.person.lastname<1>
lastname(#rec##0:person2.person, ?#rec##1:person2.person, #field##0:wybe.string)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:person2.person, ?#rec##1:person2.person, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.string) @person2:nn:nn


person > public {inline} (0 calls)
0: person2.person.person<0>
person(firstname##0:wybe.string, lastname##0:wybe.string, ?#result##0:person2.person)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:person2.person) @person2:nn:nn
    foreign lpvm mutate(~#rec##0:person2.person, ?#rec##1:person2.person, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~firstname##0:wybe.string) @person2:nn:nn
    foreign lpvm mutate(~#rec##1:person2.person, ?#result##0:person2.person, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lastname##0:wybe.string) @person2:nn:nn
person > public {inline} (6 calls)
1: person2.person.person<1>
person(?firstname##0:wybe.string, ?lastname##0:wybe.string, #result##0:person2.person)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:person2.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?firstname##0:wybe.string) @person2:nn:nn
    foreign lpvm access(~#result##0:person2.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?lastname##0:wybe.string) @person2:nn:nn


~= > public {inline} (0 calls)
0: person2.person.~=<0>
~=(#left##0:person2.person, #right##0:person2.person, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:person2.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.string) @person2:nn:nn
    foreign lpvm access(~#left##0:person2.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.string) @person2:nn:nn
    foreign lpvm access(#right##0:person2.person, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.string) @person2:nn:nn
    foreign lpvm access(~#right##0:person2.person, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.string) @person2:nn:nn
    wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~tmp#3##0:wybe.string, ~tmp#5##0:wybe.string, ~tmp#3##0:wybe.string, ~tmp#5##0:wybe.string, ?tmp#7##0:wybe.comparison) #1 @string:nn:nn
    foreign llvm icmp_eq(~tmp#7##0:wybe.comparison, 1:wybe.comparison, ?tmp#8##0:wybe.bool) @comparison:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~tmp#4##0:wybe.string, ~tmp#6##0:wybe.string, ~tmp#4##0:wybe.string, ~tmp#6##0:wybe.string, ?tmp#9##0:wybe.comparison) #2 @string:nn:nn
        foreign llvm icmp_eq(~tmp#9##0:wybe.comparison, 1:wybe.comparison, ?tmp#0##0:wybe.bool) @comparison:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'person2.person'


 


declare external fastcc  i2 @"wybe.string.<=>#cont#2<0>"(i2, i64, i64, i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"person2.person.=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = inttoptr i64 %"#right##0" to i64* 
  %6 = load  i64, i64* %5 
  %7 = add   i64 %"#right##0", 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %1, i64  %6, i64  %1, i64  %6)  
  %11 = icmp eq i2 %10, 1 
  br i1 %11, label %if.then, label %if.else 
if.then:
  %12 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %4, i64  %9, i64  %4, i64  %9)  
  %13 = icmp eq i2 %12, 1 
  ret i1 %13 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"person2.person.firstname<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = load  i64, i64* %0 
  ret i64 %1 
}


define external fastcc  i64 @"person2.person.firstname<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  store  i64 %"#field##0", i64* %6 
  ret i64 %2 
}


define external fastcc  i64 @"person2.person.lastname<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"person2.person.lastname<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i64 @"person2.person.person<0>"(i64  %"firstname##0", i64  %"lastname##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"firstname##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"lastname##0", i64* %5 
  ret i64 %2 
}


define external fastcc  {i64, i64} @"person2.person.person<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#result##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i64} undef, i64 %1, 0 
  %6 = insertvalue {i64, i64} %5, i64 %4, 1 
  ret {i64, i64} %6 
}


define external fastcc  i1 @"person2.person.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = inttoptr i64 %"#right##0" to i64* 
  %6 = load  i64, i64* %5 
  %7 = add   i64 %"#right##0", 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %1, i64  %6, i64  %1, i64  %6)  
  %11 = icmp eq i2 %10, 1 
  br i1 %11, label %if.then, label %if.else 
if.then:
  %12 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %4, i64  %9, i64  %4, i64  %9)  
  %13 = icmp eq i2 %12, 1 
  %14 = xor i1 %13, 1 
  ret i1 %14 
if.else:
  %15 = xor i1 0, 1 
  ret i1 %15 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module generic_list(T)
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : generic_list.append<0>
                    generic_list.car<0>
                    generic_list.car<1>
                    generic_list.cdr<0>
                    generic_list.cdr<1>
                    generic_list.cons<0>
                    generic_list.cons<1>
                    generic_list.length<0>
                    generic_list.nil<0>
  imports         : use wybe
  resources       : 
  procs           : 

proc append > public (1 calls)
0: generic_list.append<0>
append(x##0:generic_list(T) <{}; {}; {0}>, y##0:generic_list(T) <{}; {}; {1}>, outByReference #result##0:generic_list(T) <{}; {}; {0, 1}>)<{}; {}; {}>:
  AliasPairs: [(#result##0,y##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(generic_list.append<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @generic_list:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~y##0:generic_list(T), ?#result##0:generic_list(T)) @generic_list:nn:nn

    1:
        foreign lpvm access(x##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @generic_list:nn:nn
        foreign lpvm access(~x##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:generic_list(T), ?tmp#9##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @generic_list:nn:nn
        generic_list.append<0>(~t##0:generic_list(T), ~y##0:generic_list(T), outByReference tmp#2##0:generic_list(T)) #1 @generic_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:generic_list(T)) @generic_list:nn:nn



proc car > public {inline} (0 calls)
0: generic_list.car<0>
car(#rec##0:generic_list(T) <{}; {}; {0}>, ?#result##0:T <{}; {}; {0}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?#result##0:T)

    1:
        foreign lpvm access(~#rec##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:T) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc car > public {inline} (0 calls)
1: generic_list.car<1>
car(#rec##0:generic_list(T) <{}; {}; {0}>, ?#rec##1:generic_list(T) <{}; {}; {0, 2}>, #field##0:T <{}; {}; {2}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:generic_list(T), ?#rec##1:generic_list(T))

    1:
        foreign lpvm mutate(~#rec##0:generic_list(T), ?#rec##1:generic_list(T), 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:T) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc cdr > public {inline} (0 calls)
0: generic_list.cdr<0>
cdr(#rec##0:generic_list(T) <{}; {}; {0}>, ?#result##0:generic_list(T) <{}; {}; {0}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:generic_list(T), ?#result##0:generic_list(T))

    1:
        foreign lpvm access(~#rec##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc cdr > public {inline} (0 calls)
1: generic_list.cdr<1>
cdr(#rec##0:generic_list(T) <{}; {}; {0}>, ?#rec##1:generic_list(T) <{}; {}; {0, 2}>, #field##0:generic_list(T) <{}; {}; {2}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:generic_list(T), ?#rec##1:generic_list(T))

    1:
        foreign lpvm {noalias} mutate(~#rec##0:generic_list(T), ?#rec##1:generic_list(T), 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc cons > public {inline} (1 calls)
0: generic_list.cons<0>
cons(car##0:T <{}; {}; {0}>, cdr##0:generic_list(T) <{}; {}; {1}>, ?#result##0:generic_list(T) <{}; {}; {0, 1}>)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:generic_list(T)) @generic_list:nn:nn
    foreign lpvm mutate(~#rec##0:generic_list(T), ?#rec##1:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~car##0:T) @generic_list:nn:nn
    foreign lpvm mutate(~#rec##1:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~cdr##0:generic_list(T)) @generic_list:nn:nn
proc cons > public {inline} (6 calls)
1: generic_list.cons<1>
cons(?car##0:T <{}; {}; {2}>, ?cdr##0:generic_list(T) <{}; {}; {2}>, #result##0:generic_list(T) <{}; {}; {2}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?car##0:T)
        foreign llvm move(undef:generic_list(T), ?cdr##0:generic_list(T))

    1:
        foreign lpvm access(#result##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?car##0:T) @generic_list:nn:nn
        foreign lpvm access(~#result##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?cdr##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc length > public {inline} (0 calls)
0: generic_list.length<0>
length(x##0:generic_list(T) <{}; {}; {0}>, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_list.length1<0>(~x##0:generic_list(T), 0:wybe.int, ?#result##0:wybe.int) #0 @generic_list:nn:nn


proc length1 > (2 calls)
0: generic_list.length1<0>
length1(x##0:generic_list(T) <{}; {}; {0}>, acc##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @generic_list:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~acc##0:wybe.int, ?#result##0:wybe.int) @generic_list:nn:nn

    1:
        foreign lpvm access(~x##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm add(~acc##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int) @generic_list:nn:nn
        generic_list.length1<0>(~t##0:generic_list(T), ~tmp#2##0:wybe.int, ?#result##0:wybe.int) #2 @generic_list:nn:nn



proc nil > public {inline} (0 calls)
0: generic_list.nil<0>
nil(?#result##0:generic_list(T))<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:generic_list(T), ?#result##0:generic_list(T))

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'generic_list'

source_filename = "!ROOT!/final-dump/generic_list.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"generic_list.append<0>"(i64 %"x##0", i64 %"y##0", ptr %"tmp#10##0") {
  %"tmp#5##0" = icmp ne i64 %"x##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#11##0" = inttoptr i64 %"x##0" to ptr
  %"h##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"x##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"t##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#8##0" = ptrtoint ptr %"tmp#14##0" to i64
  %"tmp#15##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"h##0", ptr %"tmp#15##0"
  store i64 %"tmp#8##0", ptr %"tmp#10##0"
  %"tmp#16##0" = add i64 %"tmp#8##0", 8
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  musttail call fastcc void @"generic_list.append<0>"(i64 %"t##0", i64 %"y##0", ptr %"tmp#17##0")
  ret void
if.else.0:
  store i64 %"y##0", ptr %"tmp#10##0"
  ret void
}

define external fastcc {i64, i1} @"generic_list.car<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = insertvalue {i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#4##0" = insertvalue {i64, i1} %"tmp#3##0", i1 1, 1
  ret {i64, i1} %"tmp#4##0"
if.else.0:
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 0, 1
  ret {i64, i1} %"tmp#6##0"
}

define external fastcc {i64, i1} @"generic_list.car<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 16, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc {i64, i1} @"generic_list.cdr<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = add i64 %"#rec##0", 8
  %"tmp#2##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"generic_list.cdr<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 16, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = add i64 %"tmp#3##0", 8
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

define external fastcc i64 @"generic_list.cons<0>"(i64 %"car##0", i64 %"cdr##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"car##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"cdr##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64, i1} @"generic_list.cons<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = add i64 %"#result##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#7##0" = insertvalue {i64, i64, i1} %"tmp#6##0", i64 %"tmp#5##0", 1
  %"tmp#8##0" = insertvalue {i64, i64, i1} %"tmp#7##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#10##0" = insertvalue {i64, i64, i1} %"tmp#9##0", i64 undef, 1
  %"tmp#11##0" = insertvalue {i64, i64, i1} %"tmp#10##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#11##0"
}

define external fastcc i64 @"generic_list.length<0>"(i64 %"x##0") {
  %"tmp#1##0" = tail call fastcc i64 @"generic_list.length1<0>"(i64 %"x##0", i64 0)
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"generic_list.length1<0>"(i64 %"x##0", i64 %"acc##0") {
  %"tmp#5##0" = icmp ne i64 %"x##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#8##0" = add i64 %"x##0", 8
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  %"t##0" = load i64, ptr %"tmp#9##0"
  %"tmp#2##0" = add i64 %"acc##0", 1
  %"tmp#10##0" = tail call fastcc i64 @"generic_list.length1<0>"(i64 %"t##0", i64 %"tmp#2##0")
  ret i64 %"tmp#10##0"
if.else.0:
  ret i64 %"acc##0"
}

define external fastcc i64 @"generic_list.nil<0>"() {
  ret i64 0
}

--------------------------------------------------
 Module generic_use
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : generic_use.<0>
                    generic_use.concat<0>
                    generic_use.fromto<0>
                    generic_use.iota<0>
                    generic_use.nrev<0>
                    generic_use.reverse<0>
                    generic_use.reverse1<0>
  imports         : use generic_list
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: generic_use.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(8,(generic_use.nrev<0>,fromList [NonAliasedParamCond 0 []])),(15,(generic_use.reverse1<0>,fromList [NonAliasedParamCond 0 []]))]
    generic_use.fromto1<0>(1:wybe.int, 5:wybe.int, 0:generic_list(wybe.int), ?tmp#0##0:generic_list(wybe.int)) #10 @generic_use:nn:nn
    generic_use.fromto1<0>(6:wybe.int, 10:wybe.int, 0:generic_list(wybe.int), ?tmp#1##0:generic_list(wybe.int)) #11 @generic_use:nn:nn
    generic_use.print<0>(tmp#0##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #12 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @generic_use:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @generic_use:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @generic_use:nn:nn
    generic_use.print<0>(tmp#1##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #13 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @generic_use:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @generic_use:nn:nn
    foreign lpvm store(~%tmp#13##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @generic_use:nn:nn
    generic_use.concat<0>(tmp#0##0:generic_list(wybe.int), tmp#1##0:generic_list(wybe.int), outByReference tmp#2##0:generic_list(wybe.int)) #4 @generic_use:nn:nn
    generic_use.print<0>(~tmp#2##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #14 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @generic_use:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @generic_use:nn:nn
    foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @generic_use:nn:nn
    generic_use.reverse1<0>[410bae77d3](~tmp#0##0:generic_list(T), 0:generic_list(T), ?tmp#3##0:generic_list(wybe.int)) #15 @generic_use:nn:nn
    generic_use.print<0>(~tmp#3##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #16 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @generic_use:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @generic_use:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @generic_use:nn:nn
    generic_use.nrev<0>[410bae77d3](~tmp#1##0:generic_list(wybe.int), ?tmp#4##0:generic_list(wybe.int)) #8 @generic_use:nn:nn
    generic_use.print<0>(~tmp#4##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #17 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#22##0:wybe.phantom) @generic_use:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @generic_use:nn:nn
    foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @generic_use:nn:nn


proc concat > public (3 calls)
0: generic_use.concat<0>
concat(l1##0:generic_list(T) <{}; {}; {0}>, l2##0:generic_list(T) <{}; {}; {1}>, outByReference #result##0:generic_list(T) <{}; {}; {0, 1}>)<{}; {}; {}>:
  AliasPairs: [(#result##0,l2##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(generic_use.concat<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(l1##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @generic_use:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~l2##0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(l1##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @generic_use:nn:nn
        foreign lpvm access(~l1##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_use:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:generic_list(T)) @generic_use:nn:nn
        foreign lpvm mutate(~tmp#8##0:generic_list(T), ?tmp#9##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @generic_use:nn:nn
        generic_use.concat<0>(~t##0:generic_list(T), ~l2##0:generic_list(T), outByReference tmp#2##0:generic_list(T)) #1 @generic_use:nn:nn
        foreign lpvm mutate(~tmp#9##0:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:generic_list(T)) @generic_use:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(l1##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @generic_use:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~l2##0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(l1##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_use:nn:nn
        generic_use.concat<0>[410bae77d3](~t##0:generic_list(T), ~l2##0:generic_list(T), outByReference tmp#2##0:generic_list(T)) #1 @generic_use:nn:nn
        foreign lpvm mutate(~l1##0:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:generic_list(T)) @generic_use:nn:nn



proc fromto > public {inline} (2 calls)
0: generic_use.fromto<0>
fromto(lo##0:wybe.int, hi##0:wybe.int, ?#result##0:generic_list(wybe.int))<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_use.fromto1<0>(~lo##0:wybe.int, ~hi##0:wybe.int, 0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int)) #1 @generic_use:nn:nn


proc fromto1 > (2 calls)
0: generic_use.fromto1<0>
fromto1(lo##0:wybe.int, hi##0:wybe.int, sofar##0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int))<{}; {}; {}>:
  AliasPairs: [(#result##0,sofar##0)]
  InterestingCallProperties: []
    foreign llvm icmp_sge(hi##0:wybe.int, lo##0:wybe.int, ?tmp#4##0:wybe.bool) @generic_use:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm move(~sofar##0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int)) @generic_use:nn:nn

    1:
        foreign llvm sub(hi##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int) @generic_use:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#11##0:generic_list(T)) @generic_use:nn:nn
        foreign lpvm mutate(~tmp#11##0:generic_list(T), ?tmp#12##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~hi##0:T) @generic_use:nn:nn
        foreign lpvm mutate(~tmp#12##0:generic_list(T), ?tmp#3##0:generic_list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~sofar##0:generic_list(T)) @generic_use:nn:nn
        generic_use.fromto1<0>(~lo##0:wybe.int, ~tmp#2##0:wybe.int, ~tmp#3##0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int)) #3 @generic_use:nn:nn



proc iota > public {inline} (1 calls)
0: generic_use.iota<0>
iota(n##0:wybe.int, ?#result##0:generic_list(wybe.int))<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_use.fromto1<0>(1:wybe.int, ~n##0:wybe.int, 0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int)) #1 @generic_use:nn:nn


proc nrev > public (2 calls)
0: generic_use.nrev<0>
nrev(lst##0:generic_list(T) <{}; {}; {0}>, ?#result##0:generic_list(T) <{}; {}; {0}>)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(generic_use.nrev<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(generic_use.concat<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool) @generic_use:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @generic_use:nn:nn
        foreign lpvm access(~lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_use:nn:nn
        generic_use.nrev<0>(~t##0:generic_list(T), ?tmp#2##0:generic_list(T)) #1 @generic_use:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#11##0:generic_list(T)) @generic_use:nn:nn
        foreign lpvm mutate(~tmp#11##0:generic_list(T), ?tmp#12##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @generic_use:nn:nn
        foreign lpvm mutate(~tmp#12##0:generic_list(T), ?tmp#3##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:generic_list(T)) @generic_use:nn:nn
        generic_use.concat<0>[410bae77d3](~tmp#2##0:generic_list(T), ~tmp#3##0:generic_list(T), outByReference #result##0:generic_list(T)) #4 @generic_use:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool) @generic_use:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_use:nn:nn
        generic_use.nrev<0>[410bae77d3](~t##0:generic_list(T), ?tmp#2##0:generic_list(T)) #1 @generic_use:nn:nn
        foreign lpvm mutate(~lst##0:generic_list(T), ?tmp#3##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:generic_list(T)) @generic_use:nn:nn
        generic_use.concat<0>[410bae77d3](~tmp#2##0:generic_list(T), ~tmp#3##0:generic_list(T), outByReference #result##0:generic_list(T)) #4 @generic_use:nn:nn



proc print > (1 calls)
0: generic_use.print<0>
print(lst##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom) @generic_use:nn:nn
    foreign c putchar('[':wybe.char, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @generic_use:nn:nn
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @generic_use:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign c putchar(']':wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @generic_use:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @generic_use:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @generic_use:nn:nn
        foreign lpvm access(~lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(wybe.int)) @generic_use:nn:nn
        foreign c print_int(~h##0:wybe.int, ~tmp#3##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @generic_use:nn:nn
        foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @generic_use:nn:nn
        generic_use.print_tail<0>(~t##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @generic_use:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#13##0:wybe.phantom) @generic_use:nn:nn
        foreign c putchar(']':wybe.char, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @generic_use:nn:nn
        foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @generic_use:nn:nn



proc print_tail > (2 calls)
0: generic_use.print_tail<0>
print_tail(lst##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool) @generic_use:nn:nn
    case ~tmp#2##0:wybe.bool of
    0:

    1:
        foreign lpvm access(lst##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @generic_use:nn:nn
        foreign lpvm access(~lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(wybe.int)) @generic_use:nn:nn
        wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @generic_use:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @generic_use:nn:nn
        foreign c print_int(~h##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @generic_use:nn:nn
        foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @generic_use:nn:nn
        generic_use.print_tail<0>(~t##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @generic_use:nn:nn



proc println > {inline} (5 calls)
0: generic_use.println<0>
println(lst##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_use.print<0>(~lst##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#0##0:wybe.phantom) @generic_use:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#0##0:wybe.phantom, ?tmp#1##0:wybe.phantom) @generic_use:nn:nn
    foreign lpvm store(~%tmp#1##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @generic_use:nn:nn


proc reverse > public {inline} (1 calls)
0: generic_use.reverse<0>
reverse(lst##0:generic_list(T) <{}; {}; {0}>, ?#result##0:generic_list(T) <{}; {}; {0}>)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_use.reverse1<0>(~lst##0:generic_list(T), 0:generic_list(T), ?#result##0:generic_list(T)) #1 @generic_use:nn:nn


proc reverse1 > public (2 calls)
0: generic_use.reverse1<0>
reverse1(lst##0:generic_list(T) <{}; {}; {0}>, suffix##0:generic_list(T) <{}; {}; {1}>, ?#result##0:generic_list(T) <{}; {}; {0, 1}>)<{}; {}; {}>:
  AliasPairs: [(#result##0,suffix##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(generic_use.reverse1<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @generic_use:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~suffix##0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @generic_use:nn:nn
        foreign lpvm access(~lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_use:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:generic_list(T)) @generic_use:nn:nn
        foreign lpvm mutate(~tmp#8##0:generic_list(T), ?tmp#9##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @generic_use:nn:nn
        foreign lpvm mutate(~tmp#9##0:generic_list(T), ?tmp#2##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~suffix##0:generic_list(T)) @generic_use:nn:nn
        generic_use.reverse1<0>(~t##0:generic_list(T), ~tmp#2##0:generic_list(T), ?#result##0:generic_list(T)) #2 @generic_use:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @generic_use:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~suffix##0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_use:nn:nn
        foreign lpvm mutate(~lst##0:generic_list(T), ?tmp#2##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~suffix##0:generic_list(T)) @generic_use:nn:nn
        generic_use.reverse1<0>[410bae77d3](~t##0:generic_list(T), ~tmp#2##0:generic_list(T), ?#result##0:generic_list(T)) #2 @generic_use:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'generic_use'

source_filename = "!ROOT!/final-dump/generic_use.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c", \00", align 8
@"string#1" = private unnamed_addr constant {i64, i64} { i64 2, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"generic_use.<0>"() {
  %"tmp#0##0" = tail call fastcc i64 @"generic_use.fromto1<0>"(i64 1, i64 5, i64 0)
  %"tmp#1##0" = tail call fastcc i64 @"generic_use.fromto1<0>"(i64 6, i64 10, i64 0)
  tail call fastcc void @"generic_use.print<0>"(i64 %"tmp#0##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"generic_use.print<0>"(i64 %"tmp#1##0")
  call ccc void @putchar(i8 10)
  %"tmp#24##0" = alloca i8, i64 8, align 8
  call fastcc void @"generic_use.concat<0>"(i64 %"tmp#0##0", i64 %"tmp#1##0", ptr %"tmp#24##0")
  %"tmp#2##0" = load i64, ptr %"tmp#24##0"
  call fastcc void @"generic_use.print<0>"(i64 %"tmp#2##0")
  call ccc void @putchar(i8 10)
  %"tmp#3##0" = call fastcc i64 @"generic_use.reverse1<0>[410bae77d3]"(i64 %"tmp#0##0", i64 0)
  call fastcc void @"generic_use.print<0>"(i64 %"tmp#3##0")
  call ccc void @putchar(i8 10)
  %"tmp#4##0" = call fastcc i64 @"generic_use.nrev<0>[410bae77d3]"(i64 %"tmp#1##0")
  call fastcc void @"generic_use.print<0>"(i64 %"tmp#4##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc void @"generic_use.concat<0>"(i64 %"l1##0", i64 %"l2##0", ptr %"tmp#10##0") {
  %"tmp#5##0" = icmp ne i64 %"l1##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#11##0" = inttoptr i64 %"l1##0" to ptr
  %"h##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"l1##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"t##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#8##0" = ptrtoint ptr %"tmp#14##0" to i64
  %"tmp#15##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"h##0", ptr %"tmp#15##0"
  store i64 %"tmp#8##0", ptr %"tmp#10##0"
  %"tmp#16##0" = add i64 %"tmp#8##0", 8
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  musttail call fastcc void @"generic_use.concat<0>"(i64 %"t##0", i64 %"l2##0", ptr %"tmp#17##0")
  ret void
if.else.0:
  store i64 %"l2##0", ptr %"tmp#10##0"
  ret void
}

define external fastcc void @"generic_use.concat<0>[410bae77d3]"(i64 %"l1##0", i64 %"l2##0", ptr %"tmp#10##0") {
  %"tmp#5##0" = icmp ne i64 %"l1##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#11##0" = add i64 %"l1##0", 8
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  %"t##0" = load i64, ptr %"tmp#12##0"
  store i64 %"l1##0", ptr %"tmp#10##0"
  %"tmp#13##0" = add i64 %"l1##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  musttail call fastcc void @"generic_use.concat<0>[410bae77d3]"(i64 %"t##0", i64 %"l2##0", ptr %"tmp#14##0")
  ret void
if.else.0:
  store i64 %"l2##0", ptr %"tmp#10##0"
  ret void
}

define external fastcc i64 @"generic_use.fromto<0>"(i64 %"lo##0", i64 %"hi##0") {
  %"tmp#2##0" = tail call fastcc i64 @"generic_use.fromto1<0>"(i64 %"lo##0", i64 %"hi##0", i64 0)
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"generic_use.fromto1<0>"(i64 %"lo##0", i64 %"hi##0", i64 %"sofar##0") {
  %"tmp#4##0" = icmp sge i64 %"hi##0", %"lo##0"
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = sub i64 %"hi##0", 1
  %"tmp#13##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#11##0" = ptrtoint ptr %"tmp#13##0" to i64
  %"tmp#14##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"hi##0", ptr %"tmp#14##0"
  %"tmp#15##0" = add i64 %"tmp#11##0", 8
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 %"sofar##0", ptr %"tmp#16##0"
  %"tmp#17##0" = tail call fastcc i64 @"generic_use.fromto1<0>"(i64 %"lo##0", i64 %"tmp#2##0", i64 %"tmp#11##0")
  ret i64 %"tmp#17##0"
if.else.0:
  ret i64 %"sofar##0"
}

define external fastcc i64 @"generic_use.iota<0>"(i64 %"n##0") {
  %"tmp#3##0" = tail call fastcc i64 @"generic_use.fromto1<0>"(i64 1, i64 %"n##0", i64 0)
  ret i64 %"tmp#3##0"
}

define external fastcc i64 @"generic_use.nrev<0>"(i64 %"lst##0") {
  %"tmp#8##0" = icmp ne i64 %"lst##0", 0
  br i1 %"tmp#8##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#13##0" = inttoptr i64 %"lst##0" to ptr
  %"h##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = add i64 %"lst##0", 8
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  %"t##0" = load i64, ptr %"tmp#15##0"
  %"tmp#2##0" = tail call fastcc i64 @"generic_use.nrev<0>"(i64 %"t##0")
  %"tmp#16##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#11##0" = ptrtoint ptr %"tmp#16##0" to i64
  %"tmp#17##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"h##0", ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"tmp#11##0", 8
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  store i64 0, ptr %"tmp#19##0"
  %"tmp#20##0" = alloca i8, i64 8, align 8
  call fastcc void @"generic_use.concat<0>[410bae77d3]"(i64 %"tmp#2##0", i64 %"tmp#11##0", ptr %"tmp#20##0")
  %"tmp#21##0" = load i64, ptr %"tmp#20##0"
  ret i64 %"tmp#21##0"
if.else.0:
  ret i64 0
}

define external fastcc i64 @"generic_use.nrev<0>[410bae77d3]"(i64 %"lst##0") {
  %"tmp#8##0" = icmp ne i64 %"lst##0", 0
  br i1 %"tmp#8##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#13##0" = add i64 %"lst##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"t##0" = load i64, ptr %"tmp#14##0"
  %"tmp#2##0" = tail call fastcc i64 @"generic_use.nrev<0>[410bae77d3]"(i64 %"t##0")
  %"tmp#15##0" = add i64 %"lst##0", 8
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 0, ptr %"tmp#16##0"
  %"tmp#17##0" = alloca i8, i64 8, align 8
  call fastcc void @"generic_use.concat<0>[410bae77d3]"(i64 %"tmp#2##0", i64 %"lst##0", ptr %"tmp#17##0")
  %"tmp#18##0" = load i64, ptr %"tmp#17##0"
  ret i64 %"tmp#18##0"
if.else.0:
  ret i64 0
}

define external fastcc void @"generic_use.print<0>"(i64 %"lst##0") {
  call ccc void @putchar(i8 91)
  %"tmp#5##0" = icmp ne i64 %"lst##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#15##0" = inttoptr i64 %"lst##0" to ptr
  %"h##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = add i64 %"lst##0", 8
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  %"t##0" = load i64, ptr %"tmp#17##0"
  call ccc void @print_int(i64 %"h##0")
  tail call fastcc void @"generic_use.print_tail<0>"(i64 %"t##0")
  call ccc void @putchar(i8 93)
  ret void
if.else.0:
  call ccc void @putchar(i8 93)
  ret void
}

define external fastcc void @"generic_use.print_tail<0>"(i64 %"lst##0") {
  %"tmp#2##0" = icmp ne i64 %"lst##0", 0
  br i1 %"tmp#2##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#6##0" = inttoptr i64 %"lst##0" to ptr
  %"h##0" = load i64, ptr %"tmp#6##0"
  %"tmp#7##0" = add i64 %"lst##0", 8
  %"tmp#8##0" = inttoptr i64 %"tmp#7##0" to ptr
  %"t##0" = load i64, ptr %"tmp#8##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#1" to i64 ))
  call ccc void @print_int(i64 %"h##0")
  tail call fastcc void @"generic_use.print_tail<0>"(i64 %"t##0")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"generic_use.println<0>"(i64 %"lst##0") {
  tail call fastcc void @"generic_use.print<0>"(i64 %"lst##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i64 @"generic_use.reverse<0>"(i64 %"lst##0") {
  %"tmp#2##0" = tail call fastcc i64 @"generic_use.reverse1<0>"(i64 %"lst##0", i64 0)
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"generic_use.reverse1<0>"(i64 %"lst##0", i64 %"suffix##0") {
  %"tmp#5##0" = icmp ne i64 %"lst##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#10##0" = inttoptr i64 %"lst##0" to ptr
  %"h##0" = load i64, ptr %"tmp#10##0"
  %"tmp#11##0" = add i64 %"lst##0", 8
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  %"t##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#8##0" = ptrtoint ptr %"tmp#13##0" to i64
  %"tmp#14##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"h##0", ptr %"tmp#14##0"
  %"tmp#15##0" = add i64 %"tmp#8##0", 8
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 %"suffix##0", ptr %"tmp#16##0"
  %"tmp#17##0" = tail call fastcc i64 @"generic_use.reverse1<0>"(i64 %"t##0", i64 %"tmp#8##0")
  ret i64 %"tmp#17##0"
if.else.0:
  ret i64 %"suffix##0"
}

define external fastcc i64 @"generic_use.reverse1<0>[410bae77d3]"(i64 %"lst##0", i64 %"suffix##0") {
  %"tmp#5##0" = icmp ne i64 %"lst##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#10##0" = add i64 %"lst##0", 8
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"t##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"lst##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  store i64 %"suffix##0", ptr %"tmp#13##0"
  %"tmp#14##0" = tail call fastcc i64 @"generic_use.reverse1<0>[410bae77d3]"(i64 %"t##0", i64 %"lst##0")
  ret i64 %"tmp#14##0"
if.else.0:
  ret i64 %"suffix##0"
}

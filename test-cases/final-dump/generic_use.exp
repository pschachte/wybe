======================================================================
AFTER EVERYTHING:
 Module generic_list(T)
  representation  : address
  public submods  : 
  public resources: 
  public procs    : generic_list.append<0>
                    generic_list.car<0>
                    generic_list.car<1>
                    generic_list.cdr<0>
                    generic_list.cdr<1>
                    generic_list.cons<0>
                    generic_list.cons<1>
                    generic_list.length<0>
                    generic_list.nil<0>
  imports         : use wybe
  resources       : 
  procs           : 

append > public (1 calls)
0: generic_list.append<0>
append(x##0:generic_list(T), y##0:generic_list(T), outByReference #result##0:generic_list(T))<{}; {}>:
  AliasPairs: [(#result##0,y##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(generic_list.append<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~y##0:generic_list(T), ?#result##0:generic_list(T)) @generic_list:nn:nn

    1:
        foreign lpvm access(x##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @generic_list:nn:nn
        foreign lpvm access(~x##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:generic_list(T), ?tmp#9##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @generic_list:nn:nn
        generic_list.append<0>(~t##0:generic_list(T), ~y##0:generic_list(T), outByReference tmp#2##0:generic_list(T)) #1 @generic_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:generic_list(T)) @generic_list:nn:nn



car > public {inline} (0 calls)
0: generic_list.car<0>
car(#rec##0:generic_list(T), ?#result##0:T, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?#result##0:T)

    1:
        foreign lpvm access(~#rec##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:T) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

car > public {inline} (0 calls)
1: generic_list.car<1>
car(#rec##0:generic_list(T), ?#rec##1:generic_list(T), #field##0:T, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:generic_list(T), ?#rec##1:generic_list(T))

    1:
        foreign lpvm mutate(~#rec##0:generic_list(T), ?#rec##1:generic_list(T), 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:T) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



cdr > public {inline} (0 calls)
0: generic_list.cdr<0>
cdr(#rec##0:generic_list(T), ?#result##0:generic_list(T), ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:generic_list(T), ?#result##0:generic_list(T))

    1:
        foreign lpvm access(~#rec##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

cdr > public {inline} (0 calls)
1: generic_list.cdr<1>
cdr(#rec##0:generic_list(T), ?#rec##1:generic_list(T), #field##0:generic_list(T), ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:generic_list(T), ?#rec##1:generic_list(T))

    1:
        foreign lpvm {noalias} mutate(~#rec##0:generic_list(T), ?#rec##1:generic_list(T), 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



cons > public {inline} (1 calls)
0: generic_list.cons<0>
cons(car##0:T, cdr##0:generic_list(T), ?#result##0:generic_list(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:generic_list(T)) @generic_list:nn:nn
    foreign lpvm mutate(~#rec##0:generic_list(T), ?#rec##1:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~car##0:T) @generic_list:nn:nn
    foreign lpvm mutate(~#rec##1:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~cdr##0:generic_list(T)) @generic_list:nn:nn
cons > public {inline} (6 calls)
1: generic_list.cons<1>
cons(?car##0:T, ?cdr##0:generic_list(T), #result##0:generic_list(T), ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?car##0:T)
        foreign llvm move(undef:generic_list(T), ?cdr##0:generic_list(T))

    1:
        foreign lpvm access(#result##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?car##0:T) @generic_list:nn:nn
        foreign lpvm access(~#result##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?cdr##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



length > public {inline} (0 calls)
0: generic_list.length<0>
length(x##0:generic_list(T), ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_list.length1<0>(~x##0:generic_list(T), 0:wybe.int, ?#result##0:wybe.int) #0 @generic_list:nn:nn


length1 > (2 calls)
0: generic_list.length1<0>
length1(x##0:generic_list(T), acc##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~acc##0:wybe.int, ?#result##0:wybe.int) @generic_list:nn:nn

    1:
        foreign lpvm access(~x##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm add(~acc##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
        generic_list.length1<0>(~t##0:generic_list(T), ~tmp#2##0:wybe.int, ?#result##0:wybe.int) #2 @generic_list:nn:nn



nil > public {inline} (0 calls)
0: generic_list.nil<0>
nil(?#result##0:generic_list(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:generic_list(T), ?#result##0:generic_list(T))

  LLVM code       :

; ModuleID = 'generic_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"generic_list.append<0>"(i64  %"x##0", i64  %"y##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#5##0" = icmp ne i64 %"x##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"x##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"x##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 %3, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  store  i64 %10, i64* %"#result##0" 
  musttail call fastcc  void  @"generic_list.append<0>"(i64  %7, i64  %"y##0", i64*  %14)  
  ret void 
if.else:
  store  i64 %"y##0", i64* %"#result##0" 
  ret void 
}


define external fastcc  {i64, i1} @"generic_list.car<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %15 = inttoptr i64 %"#rec##0" to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = insertvalue {i64, i1} undef, i64 %17, 0 
  %19 = insertvalue {i64, i1} %18, i1 1, 1 
  ret {i64, i1} %19 
if.else:
  %20 = insertvalue {i64, i1} undef, i64 undef, 0 
  %21 = insertvalue {i64, i1} %20, i1 0, 1 
  ret {i64, i1} %21 
}


define external fastcc  {i64, i1} @"generic_list.car<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %22 = trunc i64 16 to i32  
  %23 = tail call ccc  i8*  @wybe_malloc(i32  %22)  
  %24 = ptrtoint i8* %23 to i64 
  %25 = inttoptr i64 %24 to i8* 
  %26 = inttoptr i64 %"#rec##0" to i8* 
  %27 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %25, i8*  %26, i32  %27, i1  0)  
  %28 = inttoptr i64 %24 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  store  i64 %"#field##0", i64* %29 
  %30 = insertvalue {i64, i1} undef, i64 %24, 0 
  %31 = insertvalue {i64, i1} %30, i1 1, 1 
  ret {i64, i1} %31 
if.else:
  %32 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %33 = insertvalue {i64, i1} %32, i1 0, 1 
  ret {i64, i1} %33 
}


define external fastcc  {i64, i1} @"generic_list.cdr<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %34 = add   i64 %"#rec##0", 8 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  %37 = load  i64, i64* %36 
  %38 = insertvalue {i64, i1} undef, i64 %37, 0 
  %39 = insertvalue {i64, i1} %38, i1 1, 1 
  ret {i64, i1} %39 
if.else:
  %40 = insertvalue {i64, i1} undef, i64 undef, 0 
  %41 = insertvalue {i64, i1} %40, i1 0, 1 
  ret {i64, i1} %41 
}


define external fastcc  {i64, i1} @"generic_list.cdr<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %42 = trunc i64 16 to i32  
  %43 = tail call ccc  i8*  @wybe_malloc(i32  %42)  
  %44 = ptrtoint i8* %43 to i64 
  %45 = inttoptr i64 %44 to i8* 
  %46 = inttoptr i64 %"#rec##0" to i8* 
  %47 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %45, i8*  %46, i32  %47, i1  0)  
  %48 = add   i64 %44, 8 
  %49 = inttoptr i64 %48 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  store  i64 %"#field##0", i64* %50 
  %51 = insertvalue {i64, i1} undef, i64 %44, 0 
  %52 = insertvalue {i64, i1} %51, i1 1, 1 
  ret {i64, i1} %52 
if.else:
  %53 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %54 = insertvalue {i64, i1} %53, i1 0, 1 
  ret {i64, i1} %54 
}


define external fastcc  i64 @"generic_list.cons<0>"(i64  %"car##0", i64  %"cdr##0")    {
entry:
  %55 = trunc i64 16 to i32  
  %56 = tail call ccc  i8*  @wybe_malloc(i32  %55)  
  %57 = ptrtoint i8* %56 to i64 
  %58 = inttoptr i64 %57 to i64* 
  %59 = getelementptr  i64, i64* %58, i64 0 
  store  i64 %"car##0", i64* %59 
  %60 = add   i64 %57, 8 
  %61 = inttoptr i64 %60 to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  store  i64 %"cdr##0", i64* %62 
  ret i64 %57 
}


define external fastcc  {i64, i64, i1} @"generic_list.cons<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#result##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %63 = inttoptr i64 %"#result##0" to i64* 
  %64 = getelementptr  i64, i64* %63, i64 0 
  %65 = load  i64, i64* %64 
  %66 = add   i64 %"#result##0", 8 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  %69 = load  i64, i64* %68 
  %70 = insertvalue {i64, i64, i1} undef, i64 %65, 0 
  %71 = insertvalue {i64, i64, i1} %70, i64 %69, 1 
  %72 = insertvalue {i64, i64, i1} %71, i1 1, 2 
  ret {i64, i64, i1} %72 
if.else:
  %73 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %74 = insertvalue {i64, i64, i1} %73, i64 undef, 1 
  %75 = insertvalue {i64, i64, i1} %74, i1 0, 2 
  ret {i64, i64, i1} %75 
}


define external fastcc  i64 @"generic_list.length<0>"(i64  %"x##0")    {
entry:
  %"1##result##0" = tail call fastcc  i64  @"generic_list.length1<0>"(i64  %"x##0", i64  0)  
  ret i64 %"1##result##0" 
}


define external fastcc  i64 @"generic_list.length1<0>"(i64  %"x##0", i64  %"acc##0")    {
entry:
  %"1#tmp#5##0" = icmp ne i64 %"x##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %76 = add   i64 %"x##0", 8 
  %77 = inttoptr i64 %76 to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  %79 = load  i64, i64* %78 
  %"2#tmp#2##0" = add   i64 %"acc##0", 1 
  %"2##result##0" = musttail call fastcc  i64  @"generic_list.length1<0>"(i64  %79, i64  %"2#tmp#2##0")  
  ret i64 %"2##result##0" 
if.else:
  ret i64 %"acc##0" 
}


define external fastcc  i64 @"generic_list.nil<0>"()    {
entry:
  ret i64 0 
}
--------------------------------------------------
 Module generic_use
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : generic_use.<0>
                    generic_use.concat<0>
                    generic_use.fromto<0>
                    generic_use.iota<0>
                    generic_use.nrev<0>
                    generic_use.reverse<0>
                    generic_use.reverse1<0>
  imports         : use generic_list
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: generic_use.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(8,(generic_use.nrev<0>,fromList [NonAliasedParamCond 0 []])),(15,(generic_use.reverse1<0>,fromList [NonAliasedParamCond 0 []]))]
    generic_use.fromto1<0>(1:wybe.int, 5:wybe.int, 0:generic_list(wybe.int), ?tmp#0##0:generic_list(wybe.int)) #10 @generic_use:nn:nn
    generic_use.fromto1<0>(6:wybe.int, 10:wybe.int, 0:generic_list(wybe.int), ?tmp#1##0:generic_list(wybe.int)) #11 @generic_use:nn:nn
    generic_use.print<0>(tmp#0##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #12 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    generic_use.print<0>(tmp#1##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #13 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#13##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    generic_use.concat<0>(tmp#0##0:generic_list(wybe.int), tmp#1##0:generic_list(wybe.int), outByReference tmp#2##0:generic_list(wybe.int)) #4 @generic_use:nn:nn
    generic_use.print<0>(~tmp#2##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #14 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    generic_use.reverse1<0>[410bae77d3](~tmp#0##0:generic_list(T), 0:generic_list(T), ?tmp#3##0:generic_list(wybe.int)) #15 @generic_use:nn:nn
    generic_use.print<0>(~tmp#3##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #16 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    generic_use.nrev<0>[410bae77d3](~tmp#1##0:generic_list(wybe.int), ?tmp#4##0:generic_list(wybe.int)) #8 @generic_use:nn:nn
    generic_use.print<0>(~tmp#4##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #17 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#22##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


concat > public (3 calls)
0: generic_use.concat<0>[410bae77d3]
concat(l1##0:generic_list(T), l2##0:generic_list(T), outByReference #result##0:generic_list(T))<{}; {}>:
  AliasPairs: [(#result##0,l2##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(generic_use.concat<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(l1##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~l2##0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(l1##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @generic_list:nn:nn
        foreign lpvm access(~l1##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:generic_list(T), ?tmp#9##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @generic_list:nn:nn
        generic_use.concat<0>(~t##0:generic_list(T), ~l2##0:generic_list(T), outByReference tmp#2##0:generic_list(T)) #1 @generic_use:nn:nn
        foreign lpvm mutate(~tmp#9##0:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:generic_list(T)) @generic_list:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(l1##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~l2##0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(l1##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        generic_use.concat<0>[410bae77d3](~t##0:generic_list(T), ~l2##0:generic_list(T), outByReference tmp#2##0:generic_list(T)) #1 @generic_use:nn:nn
        foreign lpvm mutate(~l1##0:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:generic_list(T)) @generic_list:nn:nn



fromto > public {inline} (2 calls)
0: generic_use.fromto<0>
fromto(lo##0:wybe.int, hi##0:wybe.int, ?#result##0:generic_list(wybe.int))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_use.fromto1<0>(~lo##0:wybe.int, ~hi##0:wybe.int, 0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int)) #1 @generic_use:nn:nn


fromto1 > (2 calls)
0: generic_use.fromto1<0>
fromto1(lo##0:wybe.int, hi##0:wybe.int, sofar##0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int))<{}; {}>:
  AliasPairs: [(#result##0,sofar##0)]
  InterestingCallProperties: []
    foreign llvm icmp_sge(hi##0:wybe.int, lo##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm move(~sofar##0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int)) @generic_use:nn:nn

    1:
        foreign llvm sub(hi##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#11##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#11##0:generic_list(T), ?tmp#12##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~hi##0:T) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#12##0:generic_list(T), ?tmp#3##0:generic_list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~sofar##0:generic_list(T)) @generic_list:nn:nn
        generic_use.fromto1<0>(~lo##0:wybe.int, ~tmp#2##0:wybe.int, ~tmp#3##0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int)) #3 @generic_use:nn:nn



iota > public {inline} (1 calls)
0: generic_use.iota<0>
iota(n##0:wybe.int, ?#result##0:generic_list(wybe.int))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_use.fromto1<0>(1:wybe.int, ~n##0:wybe.int, 0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int)) #1 @generic_use:nn:nn


nrev > public (2 calls)
0: generic_use.nrev<0>[410bae77d3]
nrev(lst##0:generic_list(T), ?#result##0:generic_list(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(generic_use.nrev<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(generic_use.concat<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @generic_list:nn:nn
        foreign lpvm access(~lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        generic_use.nrev<0>(~t##0:generic_list(T), ?tmp#2##0:generic_list(T)) #1 @generic_use:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#11##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#11##0:generic_list(T), ?tmp#12##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#12##0:generic_list(T), ?tmp#3##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:generic_list(T)) @generic_list:nn:nn
        generic_use.concat<0>[410bae77d3](~tmp#2##0:generic_list(T), ~tmp#3##0:generic_list(T), outByReference #result##0:generic_list(T)) #4 @generic_use:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        generic_use.nrev<0>[410bae77d3](~t##0:generic_list(T), ?tmp#2##0:generic_list(T)) #1 @generic_use:nn:nn
        foreign lpvm mutate(~lst##0:generic_list(T), ?tmp#3##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:generic_list(T)) @generic_list:nn:nn
        generic_use.concat<0>[410bae77d3](~tmp#2##0:generic_list(T), ~tmp#3##0:generic_list(T), outByReference #result##0:generic_list(T)) #4 @generic_use:nn:nn



print > (1 calls)
0: generic_use.print<0>
print(lst##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom) @char:nn:nn
    foreign c putchar('[':wybe.char, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @char:nn:nn
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign c putchar(']':wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @char:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @generic_list:nn:nn
        foreign lpvm access(~lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(wybe.int)) @generic_list:nn:nn
        foreign c print_int(~h##0:wybe.int, ~tmp#3##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @int:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
        generic_use.print_tail<0>(~t##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @generic_use:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @char:nn:nn
        foreign c putchar(']':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @char:nn:nn
        foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn



print_tail > (2 calls)
0: generic_use.print_tail<0>
print_tail(lst##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool)
    case ~tmp#2##0:wybe.bool of
    0:

    1:
        foreign lpvm access(lst##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @generic_list:nn:nn
        foreign lpvm access(~lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(wybe.int)) @generic_list:nn:nn
        wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @generic_use:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~h##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
        foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
        generic_use.print_tail<0>(~t##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @generic_use:nn:nn



println > {inline} (5 calls)
0: generic_use.println<0>
println(lst##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_use.print<0>(~lst##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#0##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#0##0:wybe.phantom, ?tmp#1##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#1##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


reverse > public {inline} (1 calls)
0: generic_use.reverse<0>
reverse(lst##0:generic_list(T), ?#result##0:generic_list(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_use.reverse1<0>(~lst##0:generic_list(T), 0:generic_list(T), ?#result##0:generic_list(T)) #1 @generic_use:nn:nn


reverse1 > public (2 calls)
0: generic_use.reverse1<0>[410bae77d3]
reverse1(lst##0:generic_list(T), suffix##0:generic_list(T), ?#result##0:generic_list(T))<{}; {}>:
  AliasPairs: [(#result##0,suffix##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(generic_use.reverse1<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~suffix##0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @generic_list:nn:nn
        foreign lpvm access(~lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:generic_list(T), ?tmp#9##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:generic_list(T), ?tmp#2##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~suffix##0:generic_list(T)) @generic_list:nn:nn
        generic_use.reverse1<0>(~t##0:generic_list(T), ~tmp#2##0:generic_list(T), ?#result##0:generic_list(T)) #2 @generic_use:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~suffix##0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~lst##0:generic_list(T), ?tmp#2##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~suffix##0:generic_list(T)) @generic_list:nn:nn
        generic_use.reverse1<0>[410bae77d3](~t##0:generic_list(T), ~tmp#2##0:generic_list(T), ?#result##0:generic_list(T)) #2 @generic_use:nn:nn


  LLVM code       :

; ModuleID = 'generic_use'


 


@generic_use.72 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @generic_use.71 to i64) }


@generic_use.71 =    constant [?? x i8] c", \00"


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"generic_use.<0>"()    {
entry:
  %"1#tmp#0##0" = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  1, i64  5, i64  0)  
  %"1#tmp#1##0" = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  6, i64  10, i64  0)  
  tail call fastcc  void  @"generic_use.print<0>"(i64  %"1#tmp#0##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"generic_use.print<0>"(i64  %"1#tmp#1##0")  
  tail call ccc  void  @putchar(i8  10)  
  %1 = alloca i64 
   call fastcc  void  @"generic_use.concat<0>"(i64  %"1#tmp#0##0", i64  %"1#tmp#1##0", i64*  %1)  
  %2 = load  i64, i64* %1 
  tail call fastcc  void  @"generic_use.print<0>"(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  %"1#tmp#3##0" = tail call fastcc  i64  @"generic_use.reverse1<0>[410bae77d3]"(i64  %"1#tmp#0##0", i64  0)  
  tail call fastcc  void  @"generic_use.print<0>"(i64  %"1#tmp#3##0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1#tmp#4##0" = tail call fastcc  i64  @"generic_use.nrev<0>[410bae77d3]"(i64  %"1#tmp#1##0")  
  tail call fastcc  void  @"generic_use.print<0>"(i64  %"1#tmp#4##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"generic_use.concat<0>"(i64  %"l1##0", i64  %"l2##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#5##0" = icmp ne i64 %"l1##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %3 = inttoptr i64 %"l1##0" to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = add   i64 %"l1##0", 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = trunc i64 16 to i32  
  %11 = tail call ccc  i8*  @wybe_malloc(i32  %10)  
  %12 = ptrtoint i8* %11 to i64 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  store  i64 %5, i64* %14 
  %15 = add   i64 %12, 8 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %12, i64* %"#result##0" 
  musttail call fastcc  void  @"generic_use.concat<0>"(i64  %9, i64  %"l2##0", i64*  %16)  
  ret void 
if.else:
  store  i64 %"l2##0", i64* %"#result##0" 
  ret void 
}


define external fastcc  void @"generic_use.concat<0>[410bae77d3]"(i64  %"l1##0", i64  %"l2##0", i64*  %"#result##0")    {
entry:
  %"1#tmp#5##0" = icmp ne i64 %"l1##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %17 = add   i64 %"l1##0", 8 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  %20 = load  i64, i64* %19 
  %21 = add   i64 %"l1##0", 8 
  %22 = inttoptr i64 %21 to i64* 
  store  i64 %"l1##0", i64* %"#result##0" 
  musttail call fastcc  void  @"generic_use.concat<0>[410bae77d3]"(i64  %20, i64  %"l2##0", i64*  %22)  
  ret void 
if.else:
  store  i64 %"l2##0", i64* %"#result##0" 
  ret void 
}


define external fastcc  i64 @"generic_use.fromto<0>"(i64  %"lo##0", i64  %"hi##0")    {
entry:
  %"1##result##0" = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  %"lo##0", i64  %"hi##0", i64  0)  
  ret i64 %"1##result##0" 
}


define external fastcc  i64 @"generic_use.fromto1<0>"(i64  %"lo##0", i64  %"hi##0", i64  %"sofar##0")    {
entry:
  %"1#tmp#4##0" = icmp sge i64 %"hi##0", %"lo##0" 
  br i1 %"1#tmp#4##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#2##0" = sub   i64 %"hi##0", 1 
  %23 = trunc i64 16 to i32  
  %24 = tail call ccc  i8*  @wybe_malloc(i32  %23)  
  %25 = ptrtoint i8* %24 to i64 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  store  i64 %"hi##0", i64* %27 
  %28 = add   i64 %25, 8 
  %29 = inttoptr i64 %28 to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  store  i64 %"sofar##0", i64* %30 
  %"2##result##0" = musttail call fastcc  i64  @"generic_use.fromto1<0>"(i64  %"lo##0", i64  %"2#tmp#2##0", i64  %25)  
  ret i64 %"2##result##0" 
if.else:
  ret i64 %"sofar##0" 
}


define external fastcc  i64 @"generic_use.iota<0>"(i64  %"n##0")    {
entry:
  %"1##result##0" = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  1, i64  %"n##0", i64  0)  
  ret i64 %"1##result##0" 
}


define external fastcc  i64 @"generic_use.nrev<0>"(i64  %"lst##0")    {
entry:
  %"1#tmp#8##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#8##0", label %if.then, label %if.else 
if.then:
  %31 = inttoptr i64 %"lst##0" to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  %33 = load  i64, i64* %32 
  %34 = add   i64 %"lst##0", 8 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  %37 = load  i64, i64* %36 
  %"2#tmp#2##0" = tail call fastcc  i64  @"generic_use.nrev<0>"(i64  %37)  
  %38 = trunc i64 16 to i32  
  %39 = tail call ccc  i8*  @wybe_malloc(i32  %38)  
  %40 = ptrtoint i8* %39 to i64 
  %41 = inttoptr i64 %40 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  store  i64 %33, i64* %42 
  %43 = add   i64 %40, 8 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  store  i64 0, i64* %45 
  %46 = alloca i64 
   call fastcc  void  @"generic_use.concat<0>[410bae77d3]"(i64  %"2#tmp#2##0", i64  %40, i64*  %46)  
  %47 = load  i64, i64* %46 
  ret i64 %47 
if.else:
  ret i64 0 
}


define external fastcc  i64 @"generic_use.nrev<0>[410bae77d3]"(i64  %"lst##0")    {
entry:
  %"1#tmp#8##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#8##0", label %if.then, label %if.else 
if.then:
  %48 = add   i64 %"lst##0", 8 
  %49 = inttoptr i64 %48 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  %51 = load  i64, i64* %50 
  %"2#tmp#2##0" = tail call fastcc  i64  @"generic_use.nrev<0>[410bae77d3]"(i64  %51)  
  %52 = add   i64 %"lst##0", 8 
  %53 = inttoptr i64 %52 to i64* 
  %54 = getelementptr  i64, i64* %53, i64 0 
  store  i64 0, i64* %54 
  %55 = alloca i64 
   call fastcc  void  @"generic_use.concat<0>[410bae77d3]"(i64  %"2#tmp#2##0", i64  %"lst##0", i64*  %55)  
  %56 = load  i64, i64* %55 
  ret i64 %56 
if.else:
  ret i64 0 
}


define external fastcc  void @"generic_use.print<0>"(i64  %"lst##0")    {
entry:
  tail call ccc  void  @putchar(i8  91)  
  %"1#tmp#5##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %57 = inttoptr i64 %"lst##0" to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  %59 = load  i64, i64* %58 
  %60 = add   i64 %"lst##0", 8 
  %61 = inttoptr i64 %60 to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  %63 = load  i64, i64* %62 
  tail call ccc  void  @print_int(i64  %59)  
  tail call fastcc  void  @"generic_use.print_tail<0>"(i64  %63)  
  tail call ccc  void  @putchar(i8  93)  
  ret void 
if.else:
  tail call ccc  void  @putchar(i8  93)  
  ret void 
}


define external fastcc  void @"generic_use.print_tail<0>"(i64  %"lst##0")    {
entry:
  %"1#tmp#2##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#2##0", label %if.then, label %if.else 
if.then:
  %64 = inttoptr i64 %"lst##0" to i64* 
  %65 = getelementptr  i64, i64* %64, i64 0 
  %66 = load  i64, i64* %65 
  %67 = add   i64 %"lst##0", 8 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  %70 = load  i64, i64* %69 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @generic_use.72, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %66)  
  musttail call fastcc  void  @"generic_use.print_tail<0>"(i64  %70)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"generic_use.println<0>"(i64  %"lst##0")    {
entry:
  tail call fastcc  void  @"generic_use.print<0>"(i64  %"lst##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"generic_use.reverse<0>"(i64  %"lst##0")    {
entry:
  %"1##result##0" = tail call fastcc  i64  @"generic_use.reverse1<0>"(i64  %"lst##0", i64  0)  
  ret i64 %"1##result##0" 
}


define external fastcc  i64 @"generic_use.reverse1<0>"(i64  %"lst##0", i64  %"suffix##0")    {
entry:
  %"1#tmp#5##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %73 = inttoptr i64 %"lst##0" to i64* 
  %74 = getelementptr  i64, i64* %73, i64 0 
  %75 = load  i64, i64* %74 
  %76 = add   i64 %"lst##0", 8 
  %77 = inttoptr i64 %76 to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  %79 = load  i64, i64* %78 
  %80 = trunc i64 16 to i32  
  %81 = tail call ccc  i8*  @wybe_malloc(i32  %80)  
  %82 = ptrtoint i8* %81 to i64 
  %83 = inttoptr i64 %82 to i64* 
  %84 = getelementptr  i64, i64* %83, i64 0 
  store  i64 %75, i64* %84 
  %85 = add   i64 %82, 8 
  %86 = inttoptr i64 %85 to i64* 
  %87 = getelementptr  i64, i64* %86, i64 0 
  store  i64 %"suffix##0", i64* %87 
  %"2##result##0" = musttail call fastcc  i64  @"generic_use.reverse1<0>"(i64  %79, i64  %82)  
  ret i64 %"2##result##0" 
if.else:
  ret i64 %"suffix##0" 
}


define external fastcc  i64 @"generic_use.reverse1<0>[410bae77d3]"(i64  %"lst##0", i64  %"suffix##0")    {
entry:
  %"1#tmp#5##0" = icmp ne i64 %"lst##0", 0 
  br i1 %"1#tmp#5##0", label %if.then, label %if.else 
if.then:
  %88 = add   i64 %"lst##0", 8 
  %89 = inttoptr i64 %88 to i64* 
  %90 = getelementptr  i64, i64* %89, i64 0 
  %91 = load  i64, i64* %90 
  %92 = add   i64 %"lst##0", 8 
  %93 = inttoptr i64 %92 to i64* 
  %94 = getelementptr  i64, i64* %93, i64 0 
  store  i64 %"suffix##0", i64* %94 
  %"2##result##0" = musttail call fastcc  i64  @"generic_use.reverse1<0>[410bae77d3]"(i64  %91, i64  %"lst##0")  
  ret i64 %"2##result##0" 
if.else:
  ret i64 %"suffix##0" 
}

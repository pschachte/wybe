======================================================================
AFTER EVERYTHING:
 Module generic_list(T)
  representation  : address
  public submods  : 
  public resources: 
  public procs    : generic_list.append<0>
                    generic_list.car<0>
                    generic_list.car<1>
                    generic_list.cdr<0>
                    generic_list.cdr<1>
                    generic_list.cons<0>
                    generic_list.cons<1>
                    generic_list.length<0>
                    generic_list.nil<0>
  imports         : use wybe
  resources       : 
  procs           : 

append > public (1 calls)
0: append(x#0:generic_list(?T), y#0:generic_list(?T), ?$#0:generic_list(?T)):
 AliasPairs: [($#0,y#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(1,(generic_list.append<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(x#0:generic_list(?T), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~y#0:generic_list(?T), ?$#0:generic_list(?T)) @generic_list:nn:nn

    1:
        foreign lpvm access(x#0:generic_list(?T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:?T)
        foreign lpvm access(~x#0:generic_list(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?T))
        generic_list.append<0>(~t#0:generic_list(?T), ~y#0:generic_list(?T), ?tmp$2#0:generic_list(?T)) #1 @generic_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:generic_list(?T))
        foreign lpvm mutate(~tmp$8#0:generic_list(?T), ?tmp$9#0:generic_list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:?T)
        foreign lpvm mutate(~tmp$9#0:generic_list(?T), ?$#0:generic_list(?T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:generic_list(?T))



car > public {inline} (0 calls)
0: car($rec#0:generic_list(?T), ?$#0:?T, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:?T, ?$#0:?T)

    1:
        foreign lpvm access(~$rec#0:generic_list(?T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:?T)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

car > public {inline} (0 calls)
1: car($rec#0:generic_list(?T), ?$rec#1:generic_list(?T), $field#0:?T, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:generic_list(?T), ?$rec#1:generic_list(?T))

    1:
        foreign lpvm mutate(~%$rec#0:generic_list(?T), ?%$rec#1:generic_list(?T), 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:?T)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



cdr > public {inline} (0 calls)
0: cdr($rec#0:generic_list(?T), ?$#0:generic_list(?T), ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:generic_list(?T), ?$#0:generic_list(?T))

    1:
        foreign lpvm access(~$rec#0:generic_list(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:generic_list(?T))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

cdr > public {inline} (0 calls)
1: cdr($rec#0:generic_list(?T), ?$rec#1:generic_list(?T), $field#0:generic_list(?T), ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:generic_list(?T), ?$rec#1:generic_list(?T))

    1:
        foreign lpvm {noalias} mutate(~%$rec#0:generic_list(?T), ?%$rec#1:generic_list(?T), 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:generic_list(?T))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



cons > public {inline} (1 calls)
0: cons(car#0:?T, cdr#0:generic_list(?T), ?$#0:generic_list(?T)):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:generic_list(?T))
    foreign lpvm mutate(~%$rec#0:generic_list(?T), ?%$rec#1:generic_list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~car#0:?T)
    foreign lpvm mutate(~%$rec#1:generic_list(?T), ?%$#0:generic_list(?T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~cdr#0:generic_list(?T))
cons > public {inline} (6 calls)
1: cons(?car#0:?T, ?cdr#0:generic_list(?T), $#0:generic_list(?T), ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:?T, ?car#0:?T)
        foreign llvm move(undef:generic_list(?T), ?cdr#0:generic_list(?T))

    1:
        foreign lpvm access($#0:generic_list(?T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?car#0:?T)
        foreign lpvm access(~$#0:generic_list(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?cdr#0:generic_list(?T))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



length > public {inline} (0 calls)
0: length(x#0:generic_list(?T), ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    generic_list.length1<0>(~x#0:generic_list(?T), 0:wybe.int, ?$#0:wybe.int) #0 @generic_list:nn:nn


length1 > (2 calls)
0: length1(x#0:generic_list(?T), acc#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(x#0:generic_list(?T), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~acc#0:wybe.int, ?$#0:wybe.int) @generic_list:nn:nn

    1:
        foreign lpvm access(~x#0:generic_list(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?T))
        foreign llvm add(~acc#0:wybe.int, 1:wybe.int, ?tmp$2#0:wybe.int) @int:nn:nn
        generic_list.length1<0>(~t#0:generic_list(?T), ~tmp$2#0:wybe.int, ?$#0:wybe.int) #2 @generic_list:nn:nn



nil > public {inline} (0 calls)
0: nil(?$#0:generic_list(?T)):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:generic_list(?T), ?$#0:generic_list(?T))

  LLVM code       :

; ModuleID = 'generic_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"generic_list.append<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"x#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"x#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %"2$tmp$2#0" = tail call fastcc  i64  @"generic_list.append<0>"(i64  %7, i64  %"y#0")  
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 %3, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 %"2$tmp$2#0", i64* %15 
  ret i64 %10 
if.else:
  ret i64 %"y#0" 
}


define external fastcc  {i64, i1} @"generic_list.car<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %16 = inttoptr i64 %"$rec#0" to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %19 = insertvalue {i64, i1} undef, i64 %18, 0 
  %20 = insertvalue {i64, i1} %19, i1 1, 1 
  ret {i64, i1} %20 
if.else:
  %21 = insertvalue {i64, i1} undef, i64 undef, 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
}


define external fastcc  {i64, i1} @"generic_list.car<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %23 = trunc i64 16 to i32  
  %24 = tail call ccc  i8*  @wybe_malloc(i32  %23)  
  %25 = ptrtoint i8* %24 to i64 
  %26 = inttoptr i64 %25 to i8* 
  %27 = inttoptr i64 %"$rec#0" to i8* 
  %28 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %26, i8*  %27, i32  %28, i32  8, i1  0)  
  %29 = inttoptr i64 %25 to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  store  i64 %"$field#0", i64* %30 
  %31 = insertvalue {i64, i1} undef, i64 %25, 0 
  %32 = insertvalue {i64, i1} %31, i1 1, 1 
  ret {i64, i1} %32 
if.else:
  %33 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %34 = insertvalue {i64, i1} %33, i1 0, 1 
  ret {i64, i1} %34 
}


define external fastcc  {i64, i1} @"generic_list.cdr<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %35 = add   i64 %"$rec#0", 8 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %39 = insertvalue {i64, i1} undef, i64 %38, 0 
  %40 = insertvalue {i64, i1} %39, i1 1, 1 
  ret {i64, i1} %40 
if.else:
  %41 = insertvalue {i64, i1} undef, i64 undef, 0 
  %42 = insertvalue {i64, i1} %41, i1 0, 1 
  ret {i64, i1} %42 
}


define external fastcc  {i64, i1} @"generic_list.cdr<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %43 = trunc i64 16 to i32  
  %44 = tail call ccc  i8*  @wybe_malloc(i32  %43)  
  %45 = ptrtoint i8* %44 to i64 
  %46 = inttoptr i64 %45 to i8* 
  %47 = inttoptr i64 %"$rec#0" to i8* 
  %48 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %46, i8*  %47, i32  %48, i32  8, i1  0)  
  %49 = add   i64 %45, 8 
  %50 = inttoptr i64 %49 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  store  i64 %"$field#0", i64* %51 
  %52 = insertvalue {i64, i1} undef, i64 %45, 0 
  %53 = insertvalue {i64, i1} %52, i1 1, 1 
  ret {i64, i1} %53 
if.else:
  %54 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %55 = insertvalue {i64, i1} %54, i1 0, 1 
  ret {i64, i1} %55 
}


define external fastcc  i64 @"generic_list.cons<0>"(i64  %"car#0", i64  %"cdr#0")    {
entry:
  %56 = trunc i64 16 to i32  
  %57 = tail call ccc  i8*  @wybe_malloc(i32  %56)  
  %58 = ptrtoint i8* %57 to i64 
  %59 = inttoptr i64 %58 to i64* 
  %60 = getelementptr  i64, i64* %59, i64 0 
  store  i64 %"car#0", i64* %60 
  %61 = add   i64 %58, 8 
  %62 = inttoptr i64 %61 to i64* 
  %63 = getelementptr  i64, i64* %62, i64 0 
  store  i64 %"cdr#0", i64* %63 
  ret i64 %58 
}


define external fastcc  {i64, i64, i1} @"generic_list.cons<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %64 = inttoptr i64 %"$#0" to i64* 
  %65 = getelementptr  i64, i64* %64, i64 0 
  %66 = load  i64, i64* %65 
  %67 = add   i64 %"$#0", 8 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  %70 = load  i64, i64* %69 
  %71 = insertvalue {i64, i64, i1} undef, i64 %66, 0 
  %72 = insertvalue {i64, i64, i1} %71, i64 %70, 1 
  %73 = insertvalue {i64, i64, i1} %72, i1 1, 2 
  ret {i64, i64, i1} %73 
if.else:
  %74 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %75 = insertvalue {i64, i64, i1} %74, i64 undef, 1 
  %76 = insertvalue {i64, i64, i1} %75, i1 0, 2 
  ret {i64, i64, i1} %76 
}


define external fastcc  i64 @"generic_list.length<0>"(i64  %"x#0")    {
entry:
  %"1$$#0" = tail call fastcc  i64  @"generic_list.length1<0>"(i64  %"x#0", i64  0)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"generic_list.length1<0>"(i64  %"x#0", i64  %"acc#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %77 = add   i64 %"x#0", 8 
  %78 = inttoptr i64 %77 to i64* 
  %79 = getelementptr  i64, i64* %78, i64 0 
  %80 = load  i64, i64* %79 
  %"2$tmp$2#0" = add   i64 %"acc#0", 1 
  %"2$$#0" = tail call fastcc  i64  @"generic_list.length1<0>"(i64  %80, i64  %"2$tmp$2#0")  
  ret i64 %"2$$#0" 
if.else:
  ret i64 %"acc#0" 
}


define external fastcc  i64 @"generic_list.nil<0>"()    {
entry:
  ret i64 0 
}
--------------------------------------------------
 Module generic_use
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : generic_use.<0>
                    generic_use.concat<0>
                    generic_use.fromto<0>
                    generic_use.iota<0>
                    generic_use.nrev<0>
                    generic_use.reverse<0>
                    generic_use.reverse1<0>
  imports         : use generic_list
                    use wybe
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (io#0:wybe.phantom, ?io#5:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(8,(generic_use.nrev<0>,fromList [NonAliasedParamCond 0 []])),(15,(generic_use.reverse1<0>,fromList [NonAliasedParamCond 0 []]))]
    generic_use.fromto1<0>(1:wybe.int, 5:wybe.int, 0:generic_list(?T), ?tmp$0#0:generic_list(wybe.int)) #10 @generic_use:nn:nn
    generic_use.fromto1<0>(6:wybe.int, 10:wybe.int, 0:generic_list(?T), ?tmp$1#0:generic_list(wybe.int)) #11 @generic_use:nn:nn
    generic_use.print<0>(tmp$0#0:generic_list(wybe.int), ~#io#0:wybe.phantom, ?tmp$10#0:wybe.phantom) #12 @generic_use:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    generic_use.print<0>(tmp$1#0:generic_list(wybe.int), ~#io#1:wybe.phantom, ?tmp$13#0:wybe.phantom) #13 @generic_use:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn
    generic_use.concat<0>(tmp$0#0:generic_list(wybe.int), tmp$1#0:generic_list(wybe.int), ?tmp$2#0:generic_list(wybe.int)) #4 @generic_use:nn:nn
    generic_use.print<0>(~tmp$2#0:generic_list(wybe.int), ~#io#2:wybe.phantom, ?tmp$16#0:wybe.phantom) #14 @generic_use:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$16#0:wybe.phantom, ?#io#3:wybe.phantom) @io:nn:nn
    generic_use.reverse1<0>[410bae77d3](~tmp$0#0:generic_list(wybe.int), 0:generic_list(?T), ?tmp$3#0:generic_list(wybe.int)) #15 @generic_use:nn:nn
    generic_use.print<0>(~tmp$3#0:generic_list(wybe.int), ~#io#3:wybe.phantom, ?tmp$20#0:wybe.phantom) #16 @generic_use:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$20#0:wybe.phantom, ?#io#4:wybe.phantom) @io:nn:nn
    generic_use.nrev<0>[410bae77d3](~tmp$1#0:generic_list(wybe.int), ?tmp$4#0:generic_list(wybe.int)) #8 @generic_use:nn:nn
    generic_use.print<0>(~tmp$4#0:generic_list(wybe.int), ~#io#4:wybe.phantom, ?tmp$23#0:wybe.phantom) #17 @generic_use:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$23#0:wybe.phantom, ?#io#5:wybe.phantom) @io:nn:nn


concat > public (3 calls)
0: concat(l1#0:generic_list(?t), l2#0:generic_list(?t), ?$#0:generic_list(?t)):
 AliasPairs: [($#0,l2#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(1,(generic_use.concat<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(l1#0:generic_list(?t), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~l2#0:generic_list(?t), ?$#0:generic_list(?t)) @generic_use:nn:nn

    1:
        foreign lpvm access(l1#0:generic_list(?t), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:?t)
        foreign lpvm access(~l1#0:generic_list(?t), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?t))
        generic_use.concat<0>(~t#0:generic_list(?t), ~l2#0:generic_list(?t), ?tmp$2#0:generic_list(?t)) #1 @generic_use:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:generic_list(?T))
        foreign lpvm mutate(~tmp$8#0:generic_list(?T), ?tmp$9#0:generic_list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:?t)
        foreign lpvm mutate(~tmp$9#0:generic_list(?T), ?$#0:generic_list(?t), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:generic_list(?t))

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(l1#0:generic_list(?t), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~l2#0:generic_list(?t), ?$#0:generic_list(?t)) @generic_use:nn:nn

    1:
        foreign lpvm access(l1#0:generic_list(?t), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?t))
        generic_use.concat<0>[410bae77d3](~t#0:generic_list(?t), ~l2#0:generic_list(?t), ?tmp$2#0:generic_list(?t)) #1 @generic_use:nn:nn
        foreign lpvm mutate(~l1#0:generic_list(?t), ?$#0:generic_list(?t), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:generic_list(?t))



fromto > public {inline} (2 calls)
0: fromto(lo#0:wybe.int, hi#0:wybe.int, ?$#0:generic_list(wybe.int)):
 AliasPairs: []
 InterestingCallProperties: []
    generic_use.fromto1<0>(~lo#0:wybe.int, ~hi#0:wybe.int, 0:generic_list(?T), ?$#0:generic_list(wybe.int)) #1 @generic_use:nn:nn


fromto1 > (2 calls)
0: fromto1(lo#0:wybe.int, hi#0:wybe.int, sofar#0:generic_list(wybe.int), ?$#0:generic_list(wybe.int)):
 AliasPairs: [($#0,sofar#0)]
 InterestingCallProperties: []
    foreign llvm icmp_sge(hi#0:wybe.int, lo#0:wybe.int, ?tmp$4#0:wybe.bool) @int:nn:nn
    case ~tmp$4#0:wybe.bool of
    0:
        foreign llvm move(~sofar#0:generic_list(wybe.int), ?$#0:generic_list(wybe.int)) @generic_use:nn:nn

    1:
        foreign llvm sub(hi#0:wybe.int, 1:wybe.int, ?tmp$2#0:wybe.int) @int:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp$11#0:generic_list(?T))
        foreign lpvm mutate(~tmp$11#0:generic_list(?T), ?tmp$12#0:generic_list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~hi#0:wybe.int)
        foreign lpvm mutate(~tmp$12#0:generic_list(?T), ?tmp$3#0:generic_list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~sofar#0:generic_list(wybe.int))
        generic_use.fromto1<0>(~lo#0:wybe.int, ~tmp$2#0:wybe.int, ~tmp$3#0:generic_list(wybe.int), ?$#0:generic_list(wybe.int)) #3 @generic_use:nn:nn



iota > public {inline} (1 calls)
0: iota(n#0:wybe.int, ?$#0:generic_list(wybe.int)):
 AliasPairs: []
 InterestingCallProperties: []
    generic_use.fromto1<0>(1:wybe.int, ~n#0:wybe.int, 0:generic_list(?T), ?$#0:generic_list(wybe.int)) #1 @generic_use:nn:nn


nrev > public (2 calls)
0: nrev(lst#0:generic_list(?t), ?$#0:generic_list(?t)):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(1,(generic_use.nrev<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(generic_use.concat<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(lst#0:generic_list(?t), 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(0:generic_list(?T), ?$#0:generic_list(?t)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst#0:generic_list(?t), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:?t)
        foreign lpvm access(~lst#0:generic_list(?t), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?t))
        generic_use.nrev<0>(~t#0:generic_list(?t), ?tmp$2#0:generic_list(?t)) #1 @generic_use:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp$11#0:generic_list(?T))
        foreign lpvm mutate(~tmp$11#0:generic_list(?T), ?tmp$12#0:generic_list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:?t)
        foreign lpvm mutate(~tmp$12#0:generic_list(?T), ?tmp$3#0:generic_list(?t), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:generic_list(?T))
        generic_use.concat<0>[410bae77d3](~tmp$2#0:generic_list(?t), ~tmp$3#0:generic_list(?t), ?$#0:generic_list(?t)) #4 @generic_use:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst#0:generic_list(?t), 0:wybe.int, ?tmp$8#0:wybe.bool)
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(0:generic_list(?T), ?$#0:generic_list(?t)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst#0:generic_list(?t), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?t))
        generic_use.nrev<0>[410bae77d3](~t#0:generic_list(?t), ?tmp$2#0:generic_list(?t)) #1 @generic_use:nn:nn
        foreign lpvm mutate(~lst#0:generic_list(?t), ?tmp$3#0:generic_list(?t), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:generic_list(?T))
        generic_use.concat<0>[410bae77d3](~tmp$2#0:generic_list(?t), ~tmp$3#0:generic_list(?t), ?$#0:generic_list(?t)) #4 @generic_use:nn:nn



print > (1 calls)
0: print(lst#0:generic_list(wybe.int), io#0:wybe.phantom, ?io#4:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c putchar('[':wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    foreign llvm icmp_ne(lst#0:generic_list(wybe.int), 0:wybe.int, ?tmp$4#0:wybe.bool)
    case ~tmp$4#0:wybe.bool of
    0:
        foreign c putchar(']':wybe.char, ~#io#1:wybe.phantom, ?#io#4:wybe.phantom) @io:nn:nn

    1:
        foreign lpvm access(lst#0:generic_list(wybe.int), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:generic_list(wybe.int), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(wybe.int))
        foreign c print_int(~h#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn
        generic_use.print_tail<0>(~t#0:generic_list(wybe.int), ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #3 @generic_use:nn:nn
        foreign c putchar(']':wybe.char, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @io:nn:nn



print_tail > (2 calls)
0: print_tail(lst#0:generic_list(wybe.int), io#0:wybe.phantom, ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(lst#0:generic_list(wybe.int), 0:wybe.int, ?tmp$2#0:wybe.bool)
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#3:wybe.phantom)

    1:
        foreign lpvm access(lst#0:generic_list(wybe.int), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~lst#0:generic_list(wybe.int), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(wybe.int))
        foreign c print_string(", ":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
        foreign c print_int(~h#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn
        generic_use.print_tail<0>(~t#0:generic_list(wybe.int), ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #3 @generic_use:nn:nn



println > {inline} (5 calls)
0: println(lst#0:generic_list(wybe.int), io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    generic_use.print<0>(~lst#0:generic_list(wybe.int), ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #0 @generic_use:nn:nn
    foreign c putchar('\n':wybe.char, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn


reverse > public {inline} (1 calls)
0: reverse(lst#0:generic_list(?t), ?$#0:generic_list(?t)):
 AliasPairs: []
 InterestingCallProperties: []
    generic_use.reverse1<0>(~lst#0:generic_list(?t), 0:generic_list(?T), ?$#0:generic_list(?t)) #1 @generic_use:nn:nn


reverse1 > public (2 calls)
0: reverse1(lst#0:generic_list(?t), suffix#0:generic_list(?t), ?$#0:generic_list(?t)):
 AliasPairs: [($#0,suffix#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(2,(generic_use.reverse1<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst#0:generic_list(?t), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~suffix#0:generic_list(?t), ?$#0:generic_list(?t)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst#0:generic_list(?t), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:?t)
        foreign lpvm access(~lst#0:generic_list(?t), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?t))
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:generic_list(?T))
        foreign lpvm mutate(~tmp$8#0:generic_list(?T), ?tmp$9#0:generic_list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:?t)
        foreign lpvm mutate(~tmp$9#0:generic_list(?T), ?tmp$2#0:generic_list(?t), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~suffix#0:generic_list(?t))
        generic_use.reverse1<0>(~t#0:generic_list(?t), ~tmp$2#0:generic_list(?t), ?$#0:generic_list(?t)) #2 @generic_use:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst#0:generic_list(?t), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~suffix#0:generic_list(?t), ?$#0:generic_list(?t)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst#0:generic_list(?t), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:generic_list(?t))
        foreign lpvm mutate(~lst#0:generic_list(?t), ?tmp$2#0:generic_list(?t), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~suffix#0:generic_list(?t))
        generic_use.reverse1<0>[410bae77d3](~t#0:generic_list(?t), ~tmp$2#0:generic_list(?t), ?$#0:generic_list(?t)) #2 @generic_use:nn:nn


  LLVM code       :

; ModuleID = 'generic_use'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_string(i64)    


@generic_use.67 =    constant [3 x i8] c", \00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"generic_use.<0>"()    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  1, i64  5, i64  0)  
  %"1$tmp$1#0" = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  6, i64  10, i64  0)  
  tail call fastcc  void  @"generic_use.print<0>"(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"generic_use.print<0>"(i64  %"1$tmp$1#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$tmp$2#0" = tail call fastcc  i64  @"generic_use.concat<0>"(i64  %"1$tmp$0#0", i64  %"1$tmp$1#0")  
  tail call fastcc  void  @"generic_use.print<0>"(i64  %"1$tmp$2#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$tmp$3#0" = tail call fastcc  i64  @"generic_use.reverse1<0>[410bae77d3]"(i64  %"1$tmp$0#0", i64  0)  
  tail call fastcc  void  @"generic_use.print<0>"(i64  %"1$tmp$3#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"1$tmp$4#0" = tail call fastcc  i64  @"generic_use.nrev<0>[410bae77d3]"(i64  %"1$tmp$1#0")  
  tail call fastcc  void  @"generic_use.print<0>"(i64  %"1$tmp$4#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"generic_use.concat<0>"(i64  %"l1#0", i64  %"l2#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"l1#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"l1#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"l1#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %"2$tmp$2#0" = tail call fastcc  i64  @"generic_use.concat<0>"(i64  %7, i64  %"l2#0")  
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 %3, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 %"2$tmp$2#0", i64* %15 
  ret i64 %10 
if.else:
  ret i64 %"l2#0" 
}


define external fastcc  i64 @"generic_use.concat<0>[410bae77d3]"(i64  %"l1#0", i64  %"l2#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"l1#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %16 = add   i64 %"l1#0", 8 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  %19 = load  i64, i64* %18 
  %"2$tmp$2#0" = tail call fastcc  i64  @"generic_use.concat<0>[410bae77d3]"(i64  %19, i64  %"l2#0")  
  %20 = add   i64 %"l1#0", 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %"2$tmp$2#0", i64* %22 
  ret i64 %"l1#0" 
if.else:
  ret i64 %"l2#0" 
}


define external fastcc  i64 @"generic_use.fromto<0>"(i64  %"lo#0", i64  %"hi#0")    {
entry:
  %"1$$#0" = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  %"lo#0", i64  %"hi#0", i64  0)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"generic_use.fromto1<0>"(i64  %"lo#0", i64  %"hi#0", i64  %"sofar#0")    {
entry:
  %"1$tmp$4#0" = icmp sge i64 %"hi#0", %"lo#0" 
  br i1 %"1$tmp$4#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = sub   i64 %"hi#0", 1 
  %23 = trunc i64 16 to i32  
  %24 = tail call ccc  i8*  @wybe_malloc(i32  %23)  
  %25 = ptrtoint i8* %24 to i64 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  store  i64 %"hi#0", i64* %27 
  %28 = add   i64 %25, 8 
  %29 = inttoptr i64 %28 to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  store  i64 %"sofar#0", i64* %30 
  %"2$$#0" = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  %"lo#0", i64  %"2$tmp$2#0", i64  %25)  
  ret i64 %"2$$#0" 
if.else:
  ret i64 %"sofar#0" 
}


define external fastcc  i64 @"generic_use.iota<0>"(i64  %"n#0")    {
entry:
  %"1$$#0" = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  1, i64  %"n#0", i64  0)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"generic_use.nrev<0>"(i64  %"lst#0")    {
entry:
  %"1$tmp$8#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  %31 = inttoptr i64 %"lst#0" to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  %33 = load  i64, i64* %32 
  %34 = add   i64 %"lst#0", 8 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  %37 = load  i64, i64* %36 
  %"2$tmp$2#0" = tail call fastcc  i64  @"generic_use.nrev<0>"(i64  %37)  
  %38 = trunc i64 16 to i32  
  %39 = tail call ccc  i8*  @wybe_malloc(i32  %38)  
  %40 = ptrtoint i8* %39 to i64 
  %41 = inttoptr i64 %40 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  store  i64 %33, i64* %42 
  %43 = add   i64 %40, 8 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  store  i64 0, i64* %45 
  %"2$$#0" = tail call fastcc  i64  @"generic_use.concat<0>[410bae77d3]"(i64  %"2$tmp$2#0", i64  %40)  
  ret i64 %"2$$#0" 
if.else:
  ret i64 0 
}


define external fastcc  i64 @"generic_use.nrev<0>[410bae77d3]"(i64  %"lst#0")    {
entry:
  %"1$tmp$8#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$8#0", label %if.then, label %if.else 
if.then:
  %46 = add   i64 %"lst#0", 8 
  %47 = inttoptr i64 %46 to i64* 
  %48 = getelementptr  i64, i64* %47, i64 0 
  %49 = load  i64, i64* %48 
  %"2$tmp$2#0" = tail call fastcc  i64  @"generic_use.nrev<0>[410bae77d3]"(i64  %49)  
  %50 = add   i64 %"lst#0", 8 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  store  i64 0, i64* %52 
  %"2$$#0" = tail call fastcc  i64  @"generic_use.concat<0>[410bae77d3]"(i64  %"2$tmp$2#0", i64  %"lst#0")  
  ret i64 %"2$$#0" 
if.else:
  ret i64 0 
}


define external fastcc  void @"generic_use.print<0>"(i64  %"lst#0")    {
entry:
  tail call ccc  void  @putchar(i8  91)  
  %"1$tmp$4#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$4#0", label %if.then, label %if.else 
if.then:
  %53 = inttoptr i64 %"lst#0" to i64* 
  %54 = getelementptr  i64, i64* %53, i64 0 
  %55 = load  i64, i64* %54 
  %56 = add   i64 %"lst#0", 8 
  %57 = inttoptr i64 %56 to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  %59 = load  i64, i64* %58 
  tail call ccc  void  @print_int(i64  %55)  
  tail call fastcc  void  @"generic_use.print_tail<0>"(i64  %59)  
  tail call ccc  void  @putchar(i8  93)  
  ret void 
if.else:
  tail call ccc  void  @putchar(i8  93)  
  ret void 
}


define external fastcc  void @"generic_use.print_tail<0>"(i64  %"lst#0")    {
entry:
  %"1$tmp$2#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  %60 = inttoptr i64 %"lst#0" to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  %62 = load  i64, i64* %61 
  %63 = add   i64 %"lst#0", 8 
  %64 = inttoptr i64 %63 to i64* 
  %65 = getelementptr  i64, i64* %64, i64 0 
  %66 = load  i64, i64* %65 
  %68 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @generic_use.67, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %68)  
  tail call ccc  void  @print_int(i64  %62)  
  tail call fastcc  void  @"generic_use.print_tail<0>"(i64  %66)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"generic_use.println<0>"(i64  %"lst#0")    {
entry:
  tail call fastcc  void  @"generic_use.print<0>"(i64  %"lst#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"generic_use.reverse<0>"(i64  %"lst#0")    {
entry:
  %"1$$#0" = tail call fastcc  i64  @"generic_use.reverse1<0>"(i64  %"lst#0", i64  0)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"generic_use.reverse1<0>"(i64  %"lst#0", i64  %"suffix#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %69 = inttoptr i64 %"lst#0" to i64* 
  %70 = getelementptr  i64, i64* %69, i64 0 
  %71 = load  i64, i64* %70 
  %72 = add   i64 %"lst#0", 8 
  %73 = inttoptr i64 %72 to i64* 
  %74 = getelementptr  i64, i64* %73, i64 0 
  %75 = load  i64, i64* %74 
  %76 = trunc i64 16 to i32  
  %77 = tail call ccc  i8*  @wybe_malloc(i32  %76)  
  %78 = ptrtoint i8* %77 to i64 
  %79 = inttoptr i64 %78 to i64* 
  %80 = getelementptr  i64, i64* %79, i64 0 
  store  i64 %71, i64* %80 
  %81 = add   i64 %78, 8 
  %82 = inttoptr i64 %81 to i64* 
  %83 = getelementptr  i64, i64* %82, i64 0 
  store  i64 %"suffix#0", i64* %83 
  %"2$$#0" = tail call fastcc  i64  @"generic_use.reverse1<0>"(i64  %75, i64  %78)  
  ret i64 %"2$$#0" 
if.else:
  ret i64 %"suffix#0" 
}


define external fastcc  i64 @"generic_use.reverse1<0>[410bae77d3]"(i64  %"lst#0", i64  %"suffix#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"lst#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %84 = add   i64 %"lst#0", 8 
  %85 = inttoptr i64 %84 to i64* 
  %86 = getelementptr  i64, i64* %85, i64 0 
  %87 = load  i64, i64* %86 
  %88 = add   i64 %"lst#0", 8 
  %89 = inttoptr i64 %88 to i64* 
  %90 = getelementptr  i64, i64* %89, i64 0 
  store  i64 %"suffix#0", i64* %90 
  %"2$$#0" = tail call fastcc  i64  @"generic_use.reverse1<0>[410bae77d3]"(i64  %87, i64  %"lst#0")  
  ret i64 %"2$$#0" 
if.else:
  ret i64 %"suffix#0" 
}

======================================================================
AFTER EVERYTHING:
 Module generic_list(T)
  representation  : address
  public submods  : 
  public resources: 
  public procs    : generic_list.append<0>
                    generic_list.car<0>
                    generic_list.car<1>
                    generic_list.cdr<0>
                    generic_list.cdr<1>
                    generic_list.cons<0>
                    generic_list.cons<1>
                    generic_list.length<0>
                    generic_list.nil<0>
  imports         : use wybe
  resources       : 
  procs           : 

append > public (1 calls)
0: generic_list.append<0>
append(x##0:generic_list(T), y##0:generic_list(T), outByReference #result##0:generic_list(T))<{}; {}>:
  AliasPairs: [(#result##0,y##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(generic_list.append<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~y##0:generic_list(T), ?#result##0:generic_list(T)) @generic_list:nn:nn

    1:
        foreign lpvm access(x##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @generic_list:nn:nn
        foreign lpvm access(~x##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:generic_list(T), ?tmp#9##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @generic_list:nn:nn
        generic_list.append<0>(~t##0:generic_list(T), ~y##0:generic_list(T), outByReference tmp#2##0:generic_list(T)) #1 @generic_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:generic_list(T)) @generic_list:nn:nn



car > public {inline} (0 calls)
0: generic_list.car<0>
car(#rec##0:generic_list(T), ?#result##0:T, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?#result##0:T)

    1:
        foreign lpvm access(~#rec##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:T) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

car > public {inline} (0 calls)
1: generic_list.car<1>
car(#rec##0:generic_list(T), ?#rec##1:generic_list(T), #field##0:T, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:generic_list(T), ?#rec##1:generic_list(T))

    1:
        foreign lpvm mutate(~#rec##0:generic_list(T), ?#rec##1:generic_list(T), 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:T) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



cdr > public {inline} (0 calls)
0: generic_list.cdr<0>
cdr(#rec##0:generic_list(T), ?#result##0:generic_list(T), ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:generic_list(T), ?#result##0:generic_list(T))

    1:
        foreign lpvm access(~#rec##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

cdr > public {inline} (0 calls)
1: generic_list.cdr<1>
cdr(#rec##0:generic_list(T), ?#rec##1:generic_list(T), #field##0:generic_list(T), ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:generic_list(T), ?#rec##1:generic_list(T))

    1:
        foreign lpvm {noalias} mutate(~#rec##0:generic_list(T), ?#rec##1:generic_list(T), 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



cons > public {inline} (1 calls)
0: generic_list.cons<0>
cons(car##0:T, cdr##0:generic_list(T), ?#result##0:generic_list(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:generic_list(T)) @generic_list:nn:nn
    foreign lpvm mutate(~#rec##0:generic_list(T), ?#rec##1:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~car##0:T) @generic_list:nn:nn
    foreign lpvm mutate(~#rec##1:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~cdr##0:generic_list(T)) @generic_list:nn:nn
cons > public {inline} (6 calls)
1: generic_list.cons<1>
cons(?car##0:T, ?cdr##0:generic_list(T), #result##0:generic_list(T), ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?car##0:T)
        foreign llvm move(undef:generic_list(T), ?cdr##0:generic_list(T))

    1:
        foreign lpvm access(#result##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?car##0:T) @generic_list:nn:nn
        foreign lpvm access(~#result##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?cdr##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



length > public {inline} (0 calls)
0: generic_list.length<0>
length(x##0:generic_list(T), ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_list.length1<0>(~x##0:generic_list(T), 0:wybe.int, ?#result##0:wybe.int) #0 @generic_list:nn:nn


length1 > (2 calls)
0: generic_list.length1<0>
length1(x##0:generic_list(T), acc##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~acc##0:wybe.int, ?#result##0:wybe.int) @generic_list:nn:nn

    1:
        foreign lpvm access(~x##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign llvm add(~acc##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
        generic_list.length1<0>(~t##0:generic_list(T), ~tmp#2##0:wybe.int, ?#result##0:wybe.int) #2 @generic_list:nn:nn



nil > public {inline} (0 calls)
0: generic_list.nil<0>
nil(?#result##0:generic_list(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:generic_list(T), ?#result##0:generic_list(T))

  LLVM code       :

; ModuleID = 'generic_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"generic_list.append<0>"(i64  %"x##0", i64  %"y##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"x##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"x##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"x##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %2, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %8, i64* %"#result##0" 
  musttail call fastcc  void  @"generic_list.append<0>"(i64  %5, i64  %"y##0", i64*  %11)  
  ret void 
if.else:
  store  i64 %"y##0", i64* %"#result##0" 
  ret void 
}


define external fastcc  {i64, i1} @"generic_list.car<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = insertvalue {i64, i1} undef, i64 %2, 0 
  %4 = insertvalue {i64, i1} %3, i1 1, 1 
  ret {i64, i1} %4 
if.else:
  %5 = insertvalue {i64, i1} undef, i64 undef, 0 
  %6 = insertvalue {i64, i1} %5, i1 0, 1 
  ret {i64, i1} %6 
}


define external fastcc  {i64, i1} @"generic_list.car<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  store  i64 %"#field##0", i64* %7 
  %8 = insertvalue {i64, i1} undef, i64 %3, 0 
  %9 = insertvalue {i64, i1} %8, i1 1, 1 
  ret {i64, i1} %9 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
}


define external fastcc  {i64, i1} @"generic_list.cdr<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"generic_list.cdr<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 8 
  %8 = inttoptr i64 %7 to i64* 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %3, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  i64 @"generic_list.cons<0>"(i64  %"car##0", i64  %"cdr##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"car##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"cdr##0", i64* %5 
  ret i64 %2 
}


define external fastcc  {i64, i64, i1} @"generic_list.cons<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#result##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i64, i1} undef, i64 %2, 0 
  %7 = insertvalue {i64, i64, i1} %6, i64 %5, 1 
  %8 = insertvalue {i64, i64, i1} %7, i1 1, 2 
  ret {i64, i64, i1} %8 
if.else:
  %9 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i64, i1} %9, i64 undef, 1 
  %11 = insertvalue {i64, i64, i1} %10, i1 0, 2 
  ret {i64, i64, i1} %11 
}


define external fastcc  i64 @"generic_list.length<0>"(i64  %"x##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"generic_list.length1<0>"(i64  %"x##0", i64  0)  
  ret i64 %0 
}


define external fastcc  i64 @"generic_list.length1<0>"(i64  %"x##0", i64  %"acc##0")    {
entry:
  %0 = icmp ne i64 %"x##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"x##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"acc##0", 1 
  %5 = musttail call fastcc  i64  @"generic_list.length1<0>"(i64  %3, i64  %4)  
  ret i64 %5 
if.else:
  ret i64 %"acc##0" 
}


define external fastcc  i64 @"generic_list.nil<0>"() alwaysinline   {
entry:
  ret i64 0 
}
--------------------------------------------------
 Module generic_use
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : generic_use.<0>
                    generic_use.concat<0>
                    generic_use.fromto<0>
                    generic_use.iota<0>
                    generic_use.nrev<0>
                    generic_use.reverse<0>
                    generic_use.reverse1<0>
  imports         : use generic_list
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: generic_use.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(8,(generic_use.nrev<0>,fromList [NonAliasedParamCond 0 []])),(15,(generic_use.reverse1<0>,fromList [NonAliasedParamCond 0 []]))]
    generic_use.fromto1<0>(1:wybe.int, 5:wybe.int, 0:generic_list(wybe.int), ?tmp#0##0:generic_list(wybe.int)) #10 @generic_use:nn:nn
    generic_use.fromto1<0>(6:wybe.int, 10:wybe.int, 0:generic_list(wybe.int), ?tmp#1##0:generic_list(wybe.int)) #11 @generic_use:nn:nn
    generic_use.print<0>(tmp#0##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #12 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    generic_use.print<0>(tmp#1##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #13 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#13##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    generic_use.concat<0>(tmp#0##0:generic_list(wybe.int), tmp#1##0:generic_list(wybe.int), outByReference tmp#2##0:generic_list(wybe.int)) #4 @generic_use:nn:nn
    generic_use.print<0>(~tmp#2##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #14 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    generic_use.reverse1<0>[410bae77d3](~tmp#0##0:generic_list(T), 0:generic_list(T), ?tmp#3##0:generic_list(wybe.int)) #15 @generic_use:nn:nn
    generic_use.print<0>(~tmp#3##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #16 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#19##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    generic_use.nrev<0>[410bae77d3](~tmp#1##0:generic_list(wybe.int), ?tmp#4##0:generic_list(wybe.int)) #8 @generic_use:nn:nn
    generic_use.print<0>(~tmp#4##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #17 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#22##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


concat > public (3 calls)
0: generic_use.concat<0>[410bae77d3]
concat(l1##0:generic_list(T), l2##0:generic_list(T), outByReference #result##0:generic_list(T))<{}; {}>:
  AliasPairs: [(#result##0,l2##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(generic_use.concat<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(l1##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~l2##0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(l1##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @generic_list:nn:nn
        foreign lpvm access(~l1##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:generic_list(T), ?tmp#9##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @generic_list:nn:nn
        generic_use.concat<0>(~t##0:generic_list(T), ~l2##0:generic_list(T), outByReference tmp#2##0:generic_list(T)) #1 @generic_use:nn:nn
        foreign lpvm mutate(~tmp#9##0:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:generic_list(T)) @generic_list:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(l1##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~l2##0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(l1##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        generic_use.concat<0>[410bae77d3](~t##0:generic_list(T), ~l2##0:generic_list(T), outByReference tmp#2##0:generic_list(T)) #1 @generic_use:nn:nn
        foreign lpvm mutate(~l1##0:generic_list(T), ?#result##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:generic_list(T)) @generic_list:nn:nn



fromto > public {inline} (2 calls)
0: generic_use.fromto<0>
fromto(lo##0:wybe.int, hi##0:wybe.int, ?#result##0:generic_list(wybe.int))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_use.fromto1<0>(~lo##0:wybe.int, ~hi##0:wybe.int, 0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int)) #1 @generic_use:nn:nn


fromto1 > (2 calls)
0: generic_use.fromto1<0>
fromto1(lo##0:wybe.int, hi##0:wybe.int, sofar##0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int))<{}; {}>:
  AliasPairs: [(#result##0,sofar##0)]
  InterestingCallProperties: []
    foreign llvm icmp_sge(hi##0:wybe.int, lo##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm move(~sofar##0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int)) @generic_use:nn:nn

    1:
        foreign llvm sub(hi##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#11##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#11##0:generic_list(T), ?tmp#12##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~hi##0:T) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#12##0:generic_list(T), ?tmp#3##0:generic_list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~sofar##0:generic_list(T)) @generic_list:nn:nn
        generic_use.fromto1<0>(~lo##0:wybe.int, ~tmp#2##0:wybe.int, ~tmp#3##0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int)) #3 @generic_use:nn:nn



iota > public {inline} (1 calls)
0: generic_use.iota<0>
iota(n##0:wybe.int, ?#result##0:generic_list(wybe.int))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_use.fromto1<0>(1:wybe.int, ~n##0:wybe.int, 0:generic_list(wybe.int), ?#result##0:generic_list(wybe.int)) #1 @generic_use:nn:nn


nrev > public (2 calls)
0: generic_use.nrev<0>[410bae77d3]
nrev(lst##0:generic_list(T), ?#result##0:generic_list(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(generic_use.nrev<0>,fromList [NonAliasedParamCond 0 [0]])),(4,(generic_use.concat<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @generic_list:nn:nn
        foreign lpvm access(~lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        generic_use.nrev<0>(~t##0:generic_list(T), ?tmp#2##0:generic_list(T)) #1 @generic_use:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#11##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#11##0:generic_list(T), ?tmp#12##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#12##0:generic_list(T), ?tmp#3##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:generic_list(T)) @generic_list:nn:nn
        generic_use.concat<0>[410bae77d3](~tmp#2##0:generic_list(T), ~tmp#3##0:generic_list(T), outByReference #result##0:generic_list(T)) #4 @generic_use:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm move(0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        generic_use.nrev<0>[410bae77d3](~t##0:generic_list(T), ?tmp#2##0:generic_list(T)) #1 @generic_use:nn:nn
        foreign lpvm mutate(~lst##0:generic_list(T), ?tmp#3##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:generic_list(T)) @generic_list:nn:nn
        generic_use.concat<0>[410bae77d3](~tmp#2##0:generic_list(T), ~tmp#3##0:generic_list(T), outByReference #result##0:generic_list(T)) #4 @generic_use:nn:nn



print > (1 calls)
0: generic_use.print<0>
print(lst##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom) @char:nn:nn
    foreign c putchar('[':wybe.char, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @char:nn:nn
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign c putchar(']':wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @char:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @generic_list:nn:nn
        foreign lpvm access(~lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(wybe.int)) @generic_list:nn:nn
        foreign c print_int(~h##0:wybe.int, ~tmp#3##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @int:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
        generic_use.print_tail<0>(~t##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @generic_use:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @char:nn:nn
        foreign c putchar(']':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @char:nn:nn
        foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn



print_tail > (2 calls)
0: generic_use.print_tail<0>
print_tail(lst##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool)
    case ~tmp#2##0:wybe.bool of
    0:

    1:
        foreign lpvm access(lst##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @generic_list:nn:nn
        foreign lpvm access(~lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(wybe.int)) @generic_list:nn:nn
        wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @generic_use:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~h##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
        foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
        generic_use.print_tail<0>(~t##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @generic_use:nn:nn



println > {inline} (5 calls)
0: generic_use.println<0>
println(lst##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_use.print<0>(~lst##0:generic_list(wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @generic_use:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#0##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#0##0:wybe.phantom, ?tmp#1##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#1##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


reverse > public {inline} (1 calls)
0: generic_use.reverse<0>
reverse(lst##0:generic_list(T), ?#result##0:generic_list(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    generic_use.reverse1<0>(~lst##0:generic_list(T), 0:generic_list(T), ?#result##0:generic_list(T)) #1 @generic_use:nn:nn


reverse1 > public (2 calls)
0: generic_use.reverse1<0>[410bae77d3]
reverse1(lst##0:generic_list(T), suffix##0:generic_list(T), ?#result##0:generic_list(T))<{}; {}>:
  AliasPairs: [(#result##0,suffix##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(2,(generic_use.reverse1<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~suffix##0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @generic_list:nn:nn
        foreign lpvm access(~lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#8##0:generic_list(T), ?tmp#9##0:generic_list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @generic_list:nn:nn
        foreign lpvm mutate(~tmp#9##0:generic_list(T), ?tmp#2##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~suffix##0:generic_list(T)) @generic_list:nn:nn
        generic_use.reverse1<0>(~t##0:generic_list(T), ~tmp#2##0:generic_list(T), ?#result##0:generic_list(T)) #2 @generic_use:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~suffix##0:generic_list(T), ?#result##0:generic_list(T)) @generic_use:nn:nn

    1:
        foreign lpvm access(lst##0:generic_list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:generic_list(T)) @generic_list:nn:nn
        foreign lpvm mutate(~lst##0:generic_list(T), ?tmp#2##0:generic_list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~suffix##0:generic_list(T)) @generic_list:nn:nn
        generic_use.reverse1<0>[410bae77d3](~t##0:generic_list(T), ~tmp#2##0:generic_list(T), ?#result##0:generic_list(T)) #2 @generic_use:nn:nn


  LLVM code       :

; ModuleID = 'generic_use'


 


@generic_use.1 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @generic_use.0 to i64) }


@generic_use.0 =    constant [?? x i8] c", \00"


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"generic_use.<0>"()    {
entry:
  %0 = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  1, i64  5, i64  0)  
  %1 = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  6, i64  10, i64  0)  
  tail call fastcc  void  @"generic_use.print<0>"(i64  %0)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"generic_use.print<0>"(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  %2 = alloca i64 
   call fastcc  void  @"generic_use.concat<0>"(i64  %0, i64  %1, i64*  %2)  
  %3 = load  i64, i64* %2 
  tail call fastcc  void  @"generic_use.print<0>"(i64  %3)  
  tail call ccc  void  @putchar(i8  10)  
  %4 = tail call fastcc  i64  @"generic_use.reverse1<0>[410bae77d3]"(i64  %0, i64  0)  
  tail call fastcc  void  @"generic_use.print<0>"(i64  %4)  
  tail call ccc  void  @putchar(i8  10)  
  %5 = tail call fastcc  i64  @"generic_use.nrev<0>[410bae77d3]"(i64  %1)  
  tail call fastcc  void  @"generic_use.print<0>"(i64  %5)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"generic_use.concat<0>"(i64  %"l1##0", i64  %"l2##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"l1##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"l1##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"l1##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %2, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %8, i64* %"#result##0" 
  musttail call fastcc  void  @"generic_use.concat<0>"(i64  %5, i64  %"l2##0", i64*  %11)  
  ret void 
if.else:
  store  i64 %"l2##0", i64* %"#result##0" 
  ret void 
}


define external fastcc  void @"generic_use.concat<0>[410bae77d3]"(i64  %"l1##0", i64  %"l2##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"l1##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"l1##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"l1##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"l1##0", i64* %"#result##0" 
  musttail call fastcc  void  @"generic_use.concat<0>[410bae77d3]"(i64  %3, i64  %"l2##0", i64*  %5)  
  ret void 
if.else:
  store  i64 %"l2##0", i64* %"#result##0" 
  ret void 
}


define external fastcc  i64 @"generic_use.fromto<0>"(i64  %"lo##0", i64  %"hi##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  %"lo##0", i64  %"hi##0", i64  0)  
  ret i64 %0 
}


define external fastcc  i64 @"generic_use.fromto1<0>"(i64  %"lo##0", i64  %"hi##0", i64  %"sofar##0")    {
entry:
  %0 = icmp sge i64 %"hi##0", %"lo##0" 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = sub   i64 %"hi##0", 1 
  %2 = trunc i64 16 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"hi##0", i64* %5 
  %6 = add   i64 %4, 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"sofar##0", i64* %7 
  %8 = musttail call fastcc  i64  @"generic_use.fromto1<0>"(i64  %"lo##0", i64  %1, i64  %4)  
  ret i64 %8 
if.else:
  ret i64 %"sofar##0" 
}


define external fastcc  i64 @"generic_use.iota<0>"(i64  %"n##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"generic_use.fromto1<0>"(i64  1, i64  %"n##0", i64  0)  
  ret i64 %0 
}


define external fastcc  i64 @"generic_use.nrev<0>"(i64  %"lst##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = tail call fastcc  i64  @"generic_use.nrev<0>"(i64  %5)  
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = inttoptr i64 %9 to i64* 
  store  i64 %2, i64* %10 
  %11 = add   i64 %9, 8 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 0, i64* %12 
  %13 = alloca i64 
   call fastcc  void  @"generic_use.concat<0>[410bae77d3]"(i64  %6, i64  %9, i64*  %13)  
  %14 = load  i64, i64* %13 
  ret i64 %14 
if.else:
  ret i64 0 
}


define external fastcc  i64 @"generic_use.nrev<0>[410bae77d3]"(i64  %"lst##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"lst##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = tail call fastcc  i64  @"generic_use.nrev<0>[410bae77d3]"(i64  %3)  
  %5 = add   i64 %"lst##0", 8 
  %6 = inttoptr i64 %5 to i64* 
  store  i64 0, i64* %6 
  %7 = alloca i64 
   call fastcc  void  @"generic_use.concat<0>[410bae77d3]"(i64  %4, i64  %"lst##0", i64*  %7)  
  %8 = load  i64, i64* %7 
  ret i64 %8 
if.else:
  ret i64 0 
}


define external fastcc  void @"generic_use.print<0>"(i64  %"lst##0")    {
entry:
  tail call ccc  void  @putchar(i8  91)  
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  tail call ccc  void  @print_int(i64  %2)  
  tail call fastcc  void  @"generic_use.print_tail<0>"(i64  %5)  
  tail call ccc  void  @putchar(i8  93)  
  ret void 
if.else:
  tail call ccc  void  @putchar(i8  93)  
  ret void 
}


define external fastcc  void @"generic_use.print_tail<0>"(i64  %"lst##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @generic_use.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %2)  
  musttail call fastcc  void  @"generic_use.print_tail<0>"(i64  %5)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"generic_use.println<0>"(i64  %"lst##0") alwaysinline   {
entry:
  tail call fastcc  void  @"generic_use.print<0>"(i64  %"lst##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"generic_use.reverse<0>"(i64  %"lst##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"generic_use.reverse1<0>"(i64  %"lst##0", i64  0)  
  ret i64 %0 
}


define external fastcc  i64 @"generic_use.reverse1<0>"(i64  %"lst##0", i64  %"suffix##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"lst##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %2, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %"suffix##0", i64* %11 
  %12 = musttail call fastcc  i64  @"generic_use.reverse1<0>"(i64  %5, i64  %8)  
  ret i64 %12 
if.else:
  ret i64 %"suffix##0" 
}


define external fastcc  i64 @"generic_use.reverse1<0>[410bae77d3]"(i64  %"lst##0", i64  %"suffix##0")    {
entry:
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"lst##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"lst##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"suffix##0", i64* %5 
  %6 = musttail call fastcc  i64  @"generic_use.reverse1<0>[410bae77d3]"(i64  %3, i64  %"lst##0")  
  ret i64 %6 
if.else:
  ret i64 %"suffix##0" 
}

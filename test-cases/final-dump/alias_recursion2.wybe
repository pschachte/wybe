pub type mynode { pub empty | mynode(data:int, next:mynode) }


pub def printMyNode(nd:mynode) use !io {
  if { nd = mynode(?data, ?next) ::
           !println(data)
           !printMyNode(next)
  }
}

# reverse linked list and return the new head
pub def reverseList(head:mynode, ?result1:mynode) {
    if { head = mynode(?data1, ?next1) ::
            if { next1 = empty :: ?result1 = head
               | else      ::
                   reverseList(next1, ?result2)
                   ?t1 = next1
                   next(!t1, head)
                   next(!head, empty)
                   ?result1 = result2
               }
    | else      :: ?result1 = head
    }
}

?n3 = mynode(3, empty)
?n2 = mynode(2, n3)
?n1 = mynode(1, n2)
!printMyNode(n1)
reverseList(n1, ?newNode)

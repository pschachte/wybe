======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module bug214
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : bug214.<0>
                    bug214.=<0>
                    bug214.~=<0>
  imports         : use bug214.direction
                    use bug214.position
                    use wybe
  resources       : 
  submodules      : bug214.direction, bug214.position
  procs           : 

module top-level code > public {semipure} (0 calls)
0: bug214.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(3,(bug214.#cont#2<0>,fromList [NonAliasedParamCond 0 [],NonAliasedParamCond 1 []]))]
    bug214.position.origin<0>(?tmp#0##0:bug214.position) #0 @bug214:nn:nn
    bug214.position.origin<0>(?tmp#2##0:bug214.position) #1 @bug214:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#17##0:bug214) @bug214:nn:nn
    foreign lpvm mutate(~tmp#17##0:bug214, ?tmp#18##0:bug214, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:bug214.position) @bug214:nn:nn
    foreign lpvm mutate(~tmp#18##0:bug214, ?tmp#1##0:bug214, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @bug214:nn:nn
    bug214.#cont#2<0>[7477e50a09](~tmp#0##0:bug214.position, ~tmp#1##0:bug214)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @bug214:nn:nn


proc #cont#1 > {inline,semipure} (0 calls)
0: bug214.#cont#1<0>
#cont#1(pos##0:bug214.position, sub##0:bug214)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("Part 1: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @bug214:nn:nn
    bug214.position.print<0>(pos##0:bug214.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @bug214:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @bug214:nn:nn
    foreign c putchar(' ':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @bug214:nn:nn
    foreign lpvm access(pos##0:bug214.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @bug214:nn:nn
    foreign lpvm access(~pos##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @bug214:nn:nn
    foreign llvm mul(~tmp#6##0:wybe.int, ~tmp#7##0:wybe.int, ?tmp#5##0:wybe.int) @bug214:nn:nn
    foreign c print_int(~tmp#5##0:wybe.int, ~tmp#16##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @bug214:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @bug214:nn:nn
    foreign lpvm store(~%tmp#24##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @bug214:nn:nn
    wybe.string.print<0>("Part 2: ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @bug214:nn:nn
    foreign lpvm access(~sub##0:bug214, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##0:bug214.position) @bug214:nn:nn
    bug214.position.print<0>(tmp#8##0:bug214.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #9 @bug214:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @bug214:nn:nn
    foreign c putchar(' ':wybe.char, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @bug214:nn:nn
    foreign lpvm access(tmp#8##0:bug214.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @bug214:nn:nn
    foreign lpvm access(~tmp#8##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.int) @bug214:nn:nn
    foreign llvm mul(~tmp#10##0:wybe.int, ~tmp#12##0:wybe.int, ?tmp#9##0:wybe.int) @bug214:nn:nn
    foreign c print_int(~tmp#9##0:wybe.int, ~tmp#28##0:wybe.phantom, ?tmp#37##0:wybe.phantom) @bug214:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#37##0:wybe.phantom, ?tmp#38##0:wybe.phantom) @bug214:nn:nn
    foreign lpvm store(~%tmp#38##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @bug214:nn:nn


proc #cont#2 > {semipure} (3 calls)
0: bug214.#cont#2<0>
#cont#2(pos##0:bug214.position, sub##0:bug214)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 1]
  MultiSpeczDepInfo: [(4,(bug214.move<0>,fromList [NonAliasedParamCond 0 [0]])),(5,(bug214.move<1>,fromList [NonAliasedParamCond 0 [1]])),(6,(bug214.#cont#2<0>,fromList [NonAliasedParamCond 0 [],NonAliasedParamCond 1 [1]])),(7,(bug214.#cont#2<0>,fromList [NonAliasedParamCond 0 [0],NonAliasedParamCond 1 [1]]))]
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @bug214:nn:nn
    foreign c read_line(?tmp#16##0:wybe.c_string, ~tmp#15##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @bug214:nn:nn
    foreign lpvm store(%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @bug214:nn:nn
    wybe.string.string<0>(~tmp#16##0:wybe.c_string, ?dir_str##0:wybe.string) #8 @bug214:nn:nn
    bug214.direction.parse_direction<0>(~dir_str##0:wybe.string, ?tmp#3##0:bug214.direction, ?tmp#14##0:wybe.bool) #1 @bug214:nn:nn
    case ~tmp#14##0:wybe.bool of
    0:
        bug214.#cont#2<0>(~pos##0:bug214.position, ~sub##0:bug214)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @bug214:nn:nn

    1:
        foreign c read_int(?units##0:wybe.int, ~tmp#17##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @bug214:nn:nn
        foreign c read_line(?tmp#21##0:wybe.c_string, ~tmp#19##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @bug214:nn:nn
        foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @bug214:nn:nn
        bug214.move<0>(~pos##0:bug214.position, ?pos##1:bug214.position, tmp#3##0:bug214.direction, units##0:wybe.int) #4 @bug214:nn:nn
        bug214.move<1>(~sub##0:bug214, ?sub##1:bug214, ~tmp#3##0:bug214.direction, ~units##0:wybe.int) #5 @bug214:nn:nn
        bug214.#cont#2<0>[410bae77d3](~pos##1:bug214.position, ~sub##1:bug214)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @bug214:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @bug214:nn:nn
    foreign c read_line(?tmp#16##0:wybe.c_string, ~tmp#15##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @bug214:nn:nn
    foreign lpvm store(%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @bug214:nn:nn
    wybe.string.string<0>(~tmp#16##0:wybe.c_string, ?dir_str##0:wybe.string) #8 @bug214:nn:nn
    bug214.direction.parse_direction<0>(~dir_str##0:wybe.string, ?tmp#3##0:bug214.direction, ?tmp#14##0:wybe.bool) #1 @bug214:nn:nn
    case ~tmp#14##0:wybe.bool of
    0:
        bug214.#cont#2<0>[410bae77d3](~pos##0:bug214.position, ~sub##0:bug214)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @bug214:nn:nn

    1:
        foreign c read_int(?units##0:wybe.int, ~tmp#17##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @bug214:nn:nn
        foreign c read_line(?tmp#21##0:wybe.c_string, ~tmp#19##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @bug214:nn:nn
        foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @bug214:nn:nn
        bug214.move<0>[410bae77d3](~pos##0:bug214.position, ?pos##1:bug214.position, tmp#3##0:bug214.direction, units##0:wybe.int) #4 @bug214:nn:nn
        bug214.move<1>(~sub##0:bug214, ?sub##1:bug214, ~tmp#3##0:bug214.direction, ~units##0:wybe.int) #5 @bug214:nn:nn
        bug214.#cont#2<0>[410bae77d3](~pos##1:bug214.position, ~sub##1:bug214)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @bug214:nn:nn


 [7477e50a09] [NonAliasedParam 0,NonAliasedParam 1] :
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @bug214:nn:nn
    foreign c read_line(?tmp#16##0:wybe.c_string, ~tmp#15##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @bug214:nn:nn
    foreign lpvm store(%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @bug214:nn:nn
    wybe.string.string<0>(~tmp#16##0:wybe.c_string, ?dir_str##0:wybe.string) #8 @bug214:nn:nn
    bug214.direction.parse_direction<0>(~dir_str##0:wybe.string, ?tmp#3##0:bug214.direction, ?tmp#14##0:wybe.bool) #1 @bug214:nn:nn
    case ~tmp#14##0:wybe.bool of
    0:
        bug214.#cont#2<0>[7477e50a09](~pos##0:bug214.position, ~sub##0:bug214)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @bug214:nn:nn

    1:
        foreign c read_int(?units##0:wybe.int, ~tmp#17##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @bug214:nn:nn
        foreign c read_line(?tmp#21##0:wybe.c_string, ~tmp#19##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @bug214:nn:nn
        foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @bug214:nn:nn
        bug214.move<0>[410bae77d3](~pos##0:bug214.position, ?pos##1:bug214.position, tmp#3##0:bug214.direction, units##0:wybe.int) #4 @bug214:nn:nn
        bug214.move<1>[410bae77d3](~sub##0:bug214, ?sub##1:bug214, ~tmp#3##0:bug214.direction, ~units##0:wybe.int) #5 @bug214:nn:nn
        bug214.#cont#2<0>[7477e50a09](~pos##1:bug214.position, ~sub##1:bug214)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @bug214:nn:nn



proc = > public {inline} (1 calls)
0: bug214.=<0>
=(#left##0:bug214, #right##0:bug214, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:bug214, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#sub_pos##0:bug214.position) @bug214:nn:nn
    foreign lpvm access(~#left##0:bug214, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#aim##0:wybe.int) @bug214:nn:nn
    foreign lpvm access(#right##0:bug214, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#sub_pos##0:bug214.position) @bug214:nn:nn
    foreign lpvm access(~#right##0:bug214, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#aim##0:wybe.int) @bug214:nn:nn
    bug214.position.position<1>(?tmp#8##0:wybe.int, ?tmp#9##0:wybe.int, ~#left#sub_pos##0:bug214.position) #4
    bug214.position.position<1>(?tmp#10##0:wybe.int, ?tmp#11##0:wybe.int, ~#right#sub_pos##0:bug214.position) #5
    wybe.int.=<0>(~tmp#8##0:wybe.int, ~tmp#10##0:wybe.int, ?tmp#12##0:wybe.bool) #6
    case ~tmp#12##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        wybe.int.=<0>(~tmp#9##0:wybe.int, ~tmp#11##0:wybe.int, ?tmp#1##0:wybe.bool) #7
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#aim##0:wybe.int, ~#right#aim##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc aim > {inline} (3 calls)
0: bug214.aim<0>
aim(#rec##0:bug214, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:bug214, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @bug214:nn:nn
proc aim > {inline} (2 calls)
1: bug214.aim<1>
aim(#rec##0:bug214, ?#rec##1:bug214, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:bug214, ?#rec##1:bug214, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @bug214:nn:nn


proc move > (1 calls)
0: bug214.move<0>
move(pos##0:bug214.position, ?pos##1:bug214.position, dir##0:bug214.direction, units##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
    case ~dir##0:bug214.direction of
    0:
        foreign lpvm access(pos##0:bug214.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @bug214:nn:nn
        foreign llvm add(~tmp#2##0:wybe.int, ~units##0:wybe.int, ?tmp#1##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~pos##0:bug214.position, ?pos##1:bug214.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @bug214:nn:nn

    1:
        foreign lpvm access(pos##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @bug214:nn:nn
        foreign llvm add(~tmp#5##0:wybe.int, ~units##0:wybe.int, ?tmp#4##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~pos##0:bug214.position, ?pos##1:bug214.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#4##0:wybe.int) @bug214:nn:nn

    2:
        foreign lpvm access(pos##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @bug214:nn:nn
        foreign llvm sub(~tmp#8##0:wybe.int, ~units##0:wybe.int, ?tmp#7##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~pos##0:bug214.position, ?pos##1:bug214.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#7##0:wybe.int) @bug214:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    case ~dir##0:bug214.direction of
    0:
        foreign lpvm access(pos##0:bug214.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @bug214:nn:nn
        foreign llvm add(~tmp#2##0:wybe.int, ~units##0:wybe.int, ?tmp#1##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~pos##0:bug214.position, ?pos##1:bug214.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @bug214:nn:nn

    1:
        foreign lpvm access(pos##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @bug214:nn:nn
        foreign llvm add(~tmp#5##0:wybe.int, ~units##0:wybe.int, ?tmp#4##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~pos##0:bug214.position, ?pos##1:bug214.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#4##0:wybe.int) @bug214:nn:nn

    2:
        foreign lpvm access(pos##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @bug214:nn:nn
        foreign llvm sub(~tmp#8##0:wybe.int, ~units##0:wybe.int, ?tmp#7##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~pos##0:bug214.position, ?pos##1:bug214.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#7##0:wybe.int) @bug214:nn:nn

proc move > (1 calls)
1: bug214.move<1>
move(sub##0:bug214, ?sub##2:bug214, dir##0:bug214.direction, units##0:wybe.int)<{}; {}; {}>:
  AliasPairs: [(sub##0,sub##2)]
  InterestingCallProperties: [InterestingUnaliased 0]
    case ~dir##0:bug214.direction of
    0:
        foreign lpvm access(sub##0:bug214, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:bug214.position) @bug214:nn:nn
        foreign lpvm access(tmp#1##0:bug214.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @bug214:nn:nn
        foreign llvm add(~tmp#3##0:wybe.int, units##0:wybe.int, ?tmp#2##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~tmp#1##0:bug214.position, ?tmp#1##1:bug214.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~sub##0:bug214, ?sub##1:bug214, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##1:bug214.position) @bug214:nn:nn
        foreign lpvm access(sub##1:bug214, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:bug214.position) @bug214:nn:nn
        foreign lpvm access(tmp#5##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @bug214:nn:nn
        foreign lpvm access(sub##1:bug214, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @bug214:nn:nn
        foreign llvm mul(~tmp#10##0:wybe.int, ~units##0:wybe.int, ?tmp#9##0:wybe.int) @bug214:nn:nn
        foreign llvm add(~tmp#7##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#6##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~tmp#5##0:bug214.position, ?tmp#5##1:bug214.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~sub##1:bug214, ?sub##2:bug214, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##1:bug214.position) @bug214:nn:nn

    1:
        foreign lpvm access(sub##0:bug214, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#13##0:wybe.int) @bug214:nn:nn
        foreign llvm add(~tmp#13##0:wybe.int, ~units##0:wybe.int, ?tmp#12##0:wybe.int) @bug214:nn:nn
        foreign lpvm mutate(~sub##0:bug214, ?sub##2:bug214, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#12##0:wybe.int) @bug214:nn:nn

    2:
        foreign lpvm access(sub##0:bug214, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.int) @bug214:nn:nn
        foreign llvm sub(~tmp#16##0:wybe.int, ~units##0:wybe.int, ?tmp#15##0:wybe.int) @bug214:nn:nn
        foreign lpvm mutate(~sub##0:bug214, ?sub##2:bug214, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#15##0:wybe.int) @bug214:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    case ~dir##0:bug214.direction of
    0:
        foreign lpvm access(sub##0:bug214, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:bug214.position) @bug214:nn:nn
        foreign lpvm access(tmp#1##0:bug214.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @bug214:nn:nn
        foreign llvm add(~tmp#3##0:wybe.int, units##0:wybe.int, ?tmp#2##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~tmp#1##0:bug214.position, ?tmp#1##1:bug214.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~sub##0:bug214, ?sub##1:bug214, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##1:bug214.position) @bug214:nn:nn
        foreign lpvm access(sub##1:bug214, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:bug214.position) @bug214:nn:nn
        foreign lpvm access(tmp#5##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @bug214:nn:nn
        foreign lpvm access(sub##1:bug214, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @bug214:nn:nn
        foreign llvm mul(~tmp#10##0:wybe.int, ~units##0:wybe.int, ?tmp#9##0:wybe.int) @bug214:nn:nn
        foreign llvm add(~tmp#7##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#6##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~tmp#5##0:bug214.position, ?tmp#5##1:bug214.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.int) @bug214:nn:nn
        foreign lpvm {noalias} mutate(~sub##1:bug214, ?sub##2:bug214, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##1:bug214.position) @bug214:nn:nn

    1:
        foreign lpvm access(sub##0:bug214, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#13##0:wybe.int) @bug214:nn:nn
        foreign llvm add(~tmp#13##0:wybe.int, ~units##0:wybe.int, ?tmp#12##0:wybe.int) @bug214:nn:nn
        foreign lpvm mutate(~sub##0:bug214, ?sub##2:bug214, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#12##0:wybe.int) @bug214:nn:nn

    2:
        foreign lpvm access(sub##0:bug214, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.int) @bug214:nn:nn
        foreign llvm sub(~tmp#16##0:wybe.int, ~units##0:wybe.int, ?tmp#15##0:wybe.int) @bug214:nn:nn
        foreign lpvm mutate(~sub##0:bug214, ?sub##2:bug214, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#15##0:wybe.int) @bug214:nn:nn



proc sub_pos > {inline} (7 calls)
0: bug214.sub_pos<0>
sub_pos(#rec##0:bug214, ?#result##0:bug214.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:bug214, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:bug214.position) @bug214:nn:nn
proc sub_pos > {inline} (2 calls)
1: bug214.sub_pos<1>
sub_pos(#rec##0:bug214, ?#rec##1:bug214, #field##0:bug214.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:bug214, ?#rec##1:bug214, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:bug214.position) @bug214:nn:nn


proc submarine > {inline} (1 calls)
0: bug214.submarine<0>
submarine(sub_pos##0:bug214.position, aim##0:wybe.int, ?#result##0:bug214)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:bug214) @bug214:nn:nn
    foreign lpvm mutate(~#rec##0:bug214, ?#rec##1:bug214, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~sub_pos##0:bug214.position) @bug214:nn:nn
    foreign lpvm mutate(~#rec##1:bug214, ?#result##0:bug214, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~aim##0:wybe.int) @bug214:nn:nn
proc submarine > {inline} (6 calls)
1: bug214.submarine<1>
submarine(?sub_pos##0:bug214.position, ?aim##0:wybe.int, #result##0:bug214)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:bug214, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?sub_pos##0:bug214.position) @bug214:nn:nn
    foreign lpvm access(~#result##0:bug214, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?aim##0:wybe.int) @bug214:nn:nn


proc ~= > public {inline} (0 calls)
0: bug214.~=<0>
~=(#left##0:bug214, #right##0:bug214, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:bug214, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:bug214.position) @bug214:nn:nn
    foreign lpvm access(~#left##0:bug214, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @bug214:nn:nn
    foreign lpvm access(#right##0:bug214, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:bug214.position) @bug214:nn:nn
    foreign lpvm access(~#right##0:bug214, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @bug214:nn:nn
    bug214.position.position<1>(?tmp#7##0:wybe.int, ?tmp#8##0:wybe.int, ~tmp#3##0:bug214.position) #1
    bug214.position.position<1>(?tmp#9##0:wybe.int, ?tmp#10##0:wybe.int, ~tmp#5##0:bug214.position) #2
    wybe.int.=<0>(~tmp#7##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#11##0:wybe.bool) #3
    case ~tmp#11##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        wybe.int.=<0>(~tmp#8##0:wybe.int, ~tmp#10##0:wybe.int, ?tmp#12##0:wybe.bool) #4
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)



  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'bug214'

source_filename = "!ROOT!/final-dump/bug214.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"Part 1: \00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"Part 2: \00", align 8
@"string#2" = private unnamed_addr constant {i64, i64} { i64 8, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#3" = private unnamed_addr constant {i64, i64} { i64 8, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8

declare external fastcc i1 @"wybe.int.=<0>"(i64, i64)
declare external fastcc void @"wybe.string.print<0>"(i64)
declare external fastcc i64 @"wybe.string.string<0>"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc i64 @read_int()
declare external ccc i64 @read_line()
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"bug214.<0>"() {
  %"tmp#0##0" = tail call fastcc i64 @"bug214.position.origin<0>"()
  %"tmp#2##0" = tail call fastcc i64 @"bug214.position.origin<0>"()
  %"tmp#19##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#17##0" = ptrtoint ptr %"tmp#19##0" to i64
  %"tmp#20##0" = inttoptr i64 %"tmp#17##0" to ptr
  store i64 %"tmp#2##0", ptr %"tmp#20##0"
  %"tmp#21##0" = add i64 %"tmp#17##0", 8
  %"tmp#22##0" = inttoptr i64 %"tmp#21##0" to ptr
  store i64 0, ptr %"tmp#22##0"
  tail call fastcc void @"bug214.#cont#2<0>[7477e50a09]"(i64 %"tmp#0##0", i64 %"tmp#17##0")
  ret void
}

define external fastcc void @"bug214.#cont#1<0>"(i64 %"pos##0", i64 %"sub##0") {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#2" to i64 ))
  tail call fastcc void @"bug214.position.print<0>"(i64 %"pos##0")
  call ccc void @putchar(i8 32)
  %"tmp#39##0" = inttoptr i64 %"pos##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#39##0"
  %"tmp#40##0" = add i64 %"pos##0", 8
  %"tmp#41##0" = inttoptr i64 %"tmp#40##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#41##0"
  %"tmp#5##0" = mul i64 %"tmp#6##0", %"tmp#7##0"
  call ccc void @print_int(i64 %"tmp#5##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#3" to i64 ))
  %"tmp#42##0" = inttoptr i64 %"sub##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#42##0"
  tail call fastcc void @"bug214.position.print<0>"(i64 %"tmp#8##0")
  call ccc void @putchar(i8 32)
  %"tmp#43##0" = inttoptr i64 %"tmp#8##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#43##0"
  %"tmp#44##0" = add i64 %"tmp#8##0", 8
  %"tmp#45##0" = inttoptr i64 %"tmp#44##0" to ptr
  %"tmp#12##0" = load i64, ptr %"tmp#45##0"
  %"tmp#9##0" = mul i64 %"tmp#10##0", %"tmp#12##0"
  call ccc void @print_int(i64 %"tmp#9##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc void @"bug214.#cont#2<0>"(i64 %"pos##0", i64 %"sub##0") {
  %"tmp#16##0" = call ccc i64 @read_line()
  %"dir_str##0" = tail call fastcc i64 @"wybe.string.string<0>"(i64 %"tmp#16##0")
  %"tmp#23##0" = tail call fastcc {i2, i1} @"bug214.direction.parse_direction<0>"(i64 %"dir_str##0")
  %"tmp#3##0" = extractvalue {i2, i1}%"tmp#23##0", 0
  %"tmp#14##0" = extractvalue {i2, i1}%"tmp#23##0", 1
  br i1 %"tmp#14##0", label %if.then.0, label %if.else.0
if.then.0:
  %"units##0" = call ccc i64 @read_int()
  %"tmp#21##0" = call ccc i64 @read_line()
  %"pos##1" = tail call fastcc i64 @"bug214.move<0>"(i64 %"pos##0", i2 %"tmp#3##0", i64 %"units##0")
  %"sub##1" = tail call fastcc i64 @"bug214.move<1>"(i64 %"sub##0", i2 %"tmp#3##0", i64 %"units##0")
  tail call fastcc void @"bug214.#cont#2<0>[410bae77d3]"(i64 %"pos##1", i64 %"sub##1")
  ret void
if.else.0:
  tail call fastcc void @"bug214.#cont#2<0>"(i64 %"pos##0", i64 %"sub##0")
  ret void
}

define external fastcc void @"bug214.#cont#2<0>[410bae77d3]"(i64 %"pos##0", i64 %"sub##0") {
  %"tmp#16##0" = call ccc i64 @read_line()
  %"dir_str##0" = tail call fastcc i64 @"wybe.string.string<0>"(i64 %"tmp#16##0")
  %"tmp#23##0" = tail call fastcc {i2, i1} @"bug214.direction.parse_direction<0>"(i64 %"dir_str##0")
  %"tmp#3##0" = extractvalue {i2, i1}%"tmp#23##0", 0
  %"tmp#14##0" = extractvalue {i2, i1}%"tmp#23##0", 1
  br i1 %"tmp#14##0", label %if.then.0, label %if.else.0
if.then.0:
  %"units##0" = call ccc i64 @read_int()
  %"tmp#21##0" = call ccc i64 @read_line()
  %"pos##1" = tail call fastcc i64 @"bug214.move<0>[410bae77d3]"(i64 %"pos##0", i2 %"tmp#3##0", i64 %"units##0")
  %"sub##1" = tail call fastcc i64 @"bug214.move<1>"(i64 %"sub##0", i2 %"tmp#3##0", i64 %"units##0")
  tail call fastcc void @"bug214.#cont#2<0>[410bae77d3]"(i64 %"pos##1", i64 %"sub##1")
  ret void
if.else.0:
  tail call fastcc void @"bug214.#cont#2<0>[410bae77d3]"(i64 %"pos##0", i64 %"sub##0")
  ret void
}

define external fastcc void @"bug214.#cont#2<0>[7477e50a09]"(i64 %"pos##0", i64 %"sub##0") {
  %"tmp#16##0" = call ccc i64 @read_line()
  %"dir_str##0" = tail call fastcc i64 @"wybe.string.string<0>"(i64 %"tmp#16##0")
  %"tmp#23##0" = tail call fastcc {i2, i1} @"bug214.direction.parse_direction<0>"(i64 %"dir_str##0")
  %"tmp#3##0" = extractvalue {i2, i1}%"tmp#23##0", 0
  %"tmp#14##0" = extractvalue {i2, i1}%"tmp#23##0", 1
  br i1 %"tmp#14##0", label %if.then.0, label %if.else.0
if.then.0:
  %"units##0" = call ccc i64 @read_int()
  %"tmp#21##0" = call ccc i64 @read_line()
  %"pos##1" = tail call fastcc i64 @"bug214.move<0>[410bae77d3]"(i64 %"pos##0", i2 %"tmp#3##0", i64 %"units##0")
  %"sub##1" = tail call fastcc i64 @"bug214.move<1>[410bae77d3]"(i64 %"sub##0", i2 %"tmp#3##0", i64 %"units##0")
  tail call fastcc void @"bug214.#cont#2<0>[7477e50a09]"(i64 %"pos##1", i64 %"sub##1")
  ret void
if.else.0:
  tail call fastcc void @"bug214.#cont#2<0>[7477e50a09]"(i64 %"pos##0", i64 %"sub##0")
  ret void
}

define external fastcc i1 @"bug214.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#16##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#sub_pos##0" = load i64, ptr %"tmp#16##0"
  %"tmp#17##0" = add i64 %"#left##0", 8
  %"tmp#18##0" = inttoptr i64 %"tmp#17##0" to ptr
  %"#left#aim##0" = load i64, ptr %"tmp#18##0"
  %"tmp#19##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#sub_pos##0" = load i64, ptr %"tmp#19##0"
  %"tmp#20##0" = add i64 %"#right##0", 8
  %"tmp#21##0" = inttoptr i64 %"tmp#20##0" to ptr
  %"#right#aim##0" = load i64, ptr %"tmp#21##0"
  %"tmp#22##0" = tail call fastcc {i64, i64} @"bug214.position.position<1>"(i64 %"#left#sub_pos##0")
  %"tmp#8##0" = extractvalue {i64, i64}%"tmp#22##0", 0
  %"tmp#9##0" = extractvalue {i64, i64}%"tmp#22##0", 1
  %"tmp#23##0" = tail call fastcc {i64, i64} @"bug214.position.position<1>"(i64 %"#right#sub_pos##0")
  %"tmp#10##0" = extractvalue {i64, i64}%"tmp#23##0", 0
  %"tmp#11##0" = extractvalue {i64, i64}%"tmp#23##0", 1
  %"tmp#12##0" = tail call fastcc i1 @"wybe.int.=<0>"(i64 %"tmp#8##0", i64 %"tmp#10##0")
  br i1 %"tmp#12##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = tail call fastcc i1 @"wybe.int.=<0>"(i64 %"tmp#9##0", i64 %"tmp#11##0")
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#24##0" = icmp eq i64 %"#left#aim##0", %"#right#aim##0"
  ret i1 %"tmp#24##0"
if.else.1:
  ret i1 0
if.else.0:
  ret i1 0
}

define external fastcc i64 @"bug214.aim<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"bug214.aim<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"bug214.move<0>"(i64 %"pos##0", i2 %"dir##0", i64 %"units##0") {
  switch i2 %"dir##0", label %case.2.switch.0 [
    i2 0, label %case.0.switch.0
    i2 1, label %case.1.switch.0
    i2 2, label %case.2.switch.0 ]
case.0.switch.0:
  %"tmp#36##0" = inttoptr i64 %"pos##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#36##0"
  %"tmp#1##0" = add i64 %"tmp#2##0", %"units##0"
  %"tmp#37##0" = inttoptr i64 %"pos##0" to ptr
  %"tmp#38##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#38##0", ptr %"tmp#37##0", i64 16, i1 0)
  %"tmp#39##0" = ptrtoint ptr %"tmp#38##0" to i64
  %"tmp#40##0" = inttoptr i64 %"tmp#39##0" to ptr
  store i64 %"tmp#1##0", ptr %"tmp#40##0"
  ret i64 %"tmp#39##0"
case.1.switch.0:
  %"tmp#41##0" = add i64 %"pos##0", 8
  %"tmp#42##0" = inttoptr i64 %"tmp#41##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#42##0"
  %"tmp#4##0" = add i64 %"tmp#5##0", %"units##0"
  %"tmp#43##0" = inttoptr i64 %"pos##0" to ptr
  %"tmp#44##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#44##0", ptr %"tmp#43##0", i64 16, i1 0)
  %"tmp#45##0" = ptrtoint ptr %"tmp#44##0" to i64
  %"tmp#46##0" = add i64 %"tmp#45##0", 8
  %"tmp#47##0" = inttoptr i64 %"tmp#46##0" to ptr
  store i64 %"tmp#4##0", ptr %"tmp#47##0"
  ret i64 %"tmp#45##0"
case.2.switch.0:
  %"tmp#48##0" = add i64 %"pos##0", 8
  %"tmp#49##0" = inttoptr i64 %"tmp#48##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#49##0"
  %"tmp#7##0" = sub i64 %"tmp#8##0", %"units##0"
  %"tmp#50##0" = inttoptr i64 %"pos##0" to ptr
  %"tmp#51##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#51##0", ptr %"tmp#50##0", i64 16, i1 0)
  %"tmp#52##0" = ptrtoint ptr %"tmp#51##0" to i64
  %"tmp#53##0" = add i64 %"tmp#52##0", 8
  %"tmp#54##0" = inttoptr i64 %"tmp#53##0" to ptr
  store i64 %"tmp#7##0", ptr %"tmp#54##0"
  ret i64 %"tmp#52##0"
}

define external fastcc i64 @"bug214.move<0>[410bae77d3]"(i64 %"pos##0", i2 %"dir##0", i64 %"units##0") {
  switch i2 %"dir##0", label %case.2.switch.0 [
    i2 0, label %case.0.switch.0
    i2 1, label %case.1.switch.0
    i2 2, label %case.2.switch.0 ]
case.0.switch.0:
  %"tmp#36##0" = inttoptr i64 %"pos##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#36##0"
  %"tmp#1##0" = add i64 %"tmp#2##0", %"units##0"
  %"tmp#37##0" = inttoptr i64 %"pos##0" to ptr
  store i64 %"tmp#1##0", ptr %"tmp#37##0"
  ret i64 %"pos##0"
case.1.switch.0:
  %"tmp#38##0" = add i64 %"pos##0", 8
  %"tmp#39##0" = inttoptr i64 %"tmp#38##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#39##0"
  %"tmp#4##0" = add i64 %"tmp#5##0", %"units##0"
  %"tmp#40##0" = add i64 %"pos##0", 8
  %"tmp#41##0" = inttoptr i64 %"tmp#40##0" to ptr
  store i64 %"tmp#4##0", ptr %"tmp#41##0"
  ret i64 %"pos##0"
case.2.switch.0:
  %"tmp#42##0" = add i64 %"pos##0", 8
  %"tmp#43##0" = inttoptr i64 %"tmp#42##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#43##0"
  %"tmp#7##0" = sub i64 %"tmp#8##0", %"units##0"
  %"tmp#44##0" = add i64 %"pos##0", 8
  %"tmp#45##0" = inttoptr i64 %"tmp#44##0" to ptr
  store i64 %"tmp#7##0", ptr %"tmp#45##0"
  ret i64 %"pos##0"
}

define external fastcc i64 @"bug214.move<1>"(i64 %"sub##0", i2 %"dir##0", i64 %"units##0") {
  switch i2 %"dir##0", label %case.2.switch.0 [
    i2 0, label %case.0.switch.0
    i2 1, label %case.1.switch.0
    i2 2, label %case.2.switch.0 ]
case.0.switch.0:
  %"tmp#60##0" = inttoptr i64 %"sub##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#60##0"
  %"tmp#61##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#61##0"
  %"tmp#2##0" = add i64 %"tmp#3##0", %"units##0"
  %"tmp#62##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#63##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#63##0", ptr %"tmp#62##0", i64 16, i1 0)
  %"tmp#64##0" = ptrtoint ptr %"tmp#63##0" to i64
  %"tmp#65##0" = inttoptr i64 %"tmp#64##0" to ptr
  store i64 %"tmp#2##0", ptr %"tmp#65##0"
  %"tmp#66##0" = inttoptr i64 %"sub##0" to ptr
  %"tmp#67##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#67##0", ptr %"tmp#66##0", i64 16, i1 0)
  %"tmp#68##0" = ptrtoint ptr %"tmp#67##0" to i64
  %"tmp#69##0" = inttoptr i64 %"tmp#68##0" to ptr
  store i64 %"tmp#64##0", ptr %"tmp#69##0"
  %"tmp#70##0" = inttoptr i64 %"tmp#68##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#70##0"
  %"tmp#71##0" = add i64 %"tmp#5##0", 8
  %"tmp#72##0" = inttoptr i64 %"tmp#71##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#72##0"
  %"tmp#73##0" = add i64 %"tmp#68##0", 8
  %"tmp#74##0" = inttoptr i64 %"tmp#73##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#74##0"
  %"tmp#9##0" = mul i64 %"tmp#10##0", %"units##0"
  %"tmp#6##0" = add i64 %"tmp#7##0", %"tmp#9##0"
  %"tmp#75##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#76##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#76##0", ptr %"tmp#75##0", i64 16, i1 0)
  %"tmp#77##0" = ptrtoint ptr %"tmp#76##0" to i64
  %"tmp#78##0" = add i64 %"tmp#77##0", 8
  %"tmp#79##0" = inttoptr i64 %"tmp#78##0" to ptr
  store i64 %"tmp#6##0", ptr %"tmp#79##0"
  %"tmp#80##0" = inttoptr i64 %"tmp#68##0" to ptr
  store i64 %"tmp#77##0", ptr %"tmp#80##0"
  ret i64 %"tmp#68##0"
case.1.switch.0:
  %"tmp#81##0" = add i64 %"sub##0", 8
  %"tmp#82##0" = inttoptr i64 %"tmp#81##0" to ptr
  %"tmp#13##0" = load i64, ptr %"tmp#82##0"
  %"tmp#12##0" = add i64 %"tmp#13##0", %"units##0"
  %"tmp#83##0" = inttoptr i64 %"sub##0" to ptr
  %"tmp#84##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#84##0", ptr %"tmp#83##0", i64 16, i1 0)
  %"tmp#85##0" = ptrtoint ptr %"tmp#84##0" to i64
  %"tmp#86##0" = add i64 %"tmp#85##0", 8
  %"tmp#87##0" = inttoptr i64 %"tmp#86##0" to ptr
  store i64 %"tmp#12##0", ptr %"tmp#87##0"
  ret i64 %"tmp#85##0"
case.2.switch.0:
  %"tmp#88##0" = add i64 %"sub##0", 8
  %"tmp#89##0" = inttoptr i64 %"tmp#88##0" to ptr
  %"tmp#16##0" = load i64, ptr %"tmp#89##0"
  %"tmp#15##0" = sub i64 %"tmp#16##0", %"units##0"
  %"tmp#90##0" = inttoptr i64 %"sub##0" to ptr
  %"tmp#91##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#91##0", ptr %"tmp#90##0", i64 16, i1 0)
  %"tmp#92##0" = ptrtoint ptr %"tmp#91##0" to i64
  %"tmp#93##0" = add i64 %"tmp#92##0", 8
  %"tmp#94##0" = inttoptr i64 %"tmp#93##0" to ptr
  store i64 %"tmp#15##0", ptr %"tmp#94##0"
  ret i64 %"tmp#92##0"
}

define external fastcc i64 @"bug214.move<1>[410bae77d3]"(i64 %"sub##0", i2 %"dir##0", i64 %"units##0") {
  switch i2 %"dir##0", label %case.2.switch.0 [
    i2 0, label %case.0.switch.0
    i2 1, label %case.1.switch.0
    i2 2, label %case.2.switch.0 ]
case.0.switch.0:
  %"tmp#60##0" = inttoptr i64 %"sub##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#60##0"
  %"tmp#61##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#61##0"
  %"tmp#2##0" = add i64 %"tmp#3##0", %"units##0"
  %"tmp#62##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#63##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#63##0", ptr %"tmp#62##0", i64 16, i1 0)
  %"tmp#64##0" = ptrtoint ptr %"tmp#63##0" to i64
  %"tmp#65##0" = inttoptr i64 %"tmp#64##0" to ptr
  store i64 %"tmp#2##0", ptr %"tmp#65##0"
  %"tmp#66##0" = inttoptr i64 %"sub##0" to ptr
  store i64 %"tmp#64##0", ptr %"tmp#66##0"
  %"tmp#67##0" = inttoptr i64 %"sub##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#67##0"
  %"tmp#68##0" = add i64 %"tmp#5##0", 8
  %"tmp#69##0" = inttoptr i64 %"tmp#68##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#69##0"
  %"tmp#70##0" = add i64 %"sub##0", 8
  %"tmp#71##0" = inttoptr i64 %"tmp#70##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#71##0"
  %"tmp#9##0" = mul i64 %"tmp#10##0", %"units##0"
  %"tmp#6##0" = add i64 %"tmp#7##0", %"tmp#9##0"
  %"tmp#72##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#73##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#73##0", ptr %"tmp#72##0", i64 16, i1 0)
  %"tmp#74##0" = ptrtoint ptr %"tmp#73##0" to i64
  %"tmp#75##0" = add i64 %"tmp#74##0", 8
  %"tmp#76##0" = inttoptr i64 %"tmp#75##0" to ptr
  store i64 %"tmp#6##0", ptr %"tmp#76##0"
  %"tmp#77##0" = inttoptr i64 %"sub##0" to ptr
  store i64 %"tmp#74##0", ptr %"tmp#77##0"
  ret i64 %"sub##0"
case.1.switch.0:
  %"tmp#78##0" = add i64 %"sub##0", 8
  %"tmp#79##0" = inttoptr i64 %"tmp#78##0" to ptr
  %"tmp#13##0" = load i64, ptr %"tmp#79##0"
  %"tmp#12##0" = add i64 %"tmp#13##0", %"units##0"
  %"tmp#80##0" = add i64 %"sub##0", 8
  %"tmp#81##0" = inttoptr i64 %"tmp#80##0" to ptr
  store i64 %"tmp#12##0", ptr %"tmp#81##0"
  ret i64 %"sub##0"
case.2.switch.0:
  %"tmp#82##0" = add i64 %"sub##0", 8
  %"tmp#83##0" = inttoptr i64 %"tmp#82##0" to ptr
  %"tmp#16##0" = load i64, ptr %"tmp#83##0"
  %"tmp#15##0" = sub i64 %"tmp#16##0", %"units##0"
  %"tmp#84##0" = add i64 %"sub##0", 8
  %"tmp#85##0" = inttoptr i64 %"tmp#84##0" to ptr
  store i64 %"tmp#15##0", ptr %"tmp#85##0"
  ret i64 %"sub##0"
}

define external fastcc i64 @"bug214.sub_pos<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"bug214.sub_pos<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"bug214.submarine<0>"(i64 %"sub_pos##0", i64 %"aim##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"sub_pos##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"aim##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64} @"bug214.submarine<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#6##0" = insertvalue {i64, i64} %"tmp#5##0", i64 %"tmp#4##0", 1
  ret {i64, i64} %"tmp#6##0"
}

define external fastcc i1 @"bug214.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#13##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = add i64 %"#left##0", 8
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#16##0"
  %"tmp#17##0" = add i64 %"#right##0", 8
  %"tmp#18##0" = inttoptr i64 %"tmp#17##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#18##0"
  %"tmp#19##0" = tail call fastcc {i64, i64} @"bug214.position.position<1>"(i64 %"tmp#3##0")
  %"tmp#7##0" = extractvalue {i64, i64}%"tmp#19##0", 0
  %"tmp#8##0" = extractvalue {i64, i64}%"tmp#19##0", 1
  %"tmp#20##0" = tail call fastcc {i64, i64} @"bug214.position.position<1>"(i64 %"tmp#5##0")
  %"tmp#9##0" = extractvalue {i64, i64}%"tmp#20##0", 0
  %"tmp#10##0" = extractvalue {i64, i64}%"tmp#20##0", 1
  %"tmp#11##0" = tail call fastcc i1 @"wybe.int.=<0>"(i64 %"tmp#7##0", i64 %"tmp#9##0")
  br i1 %"tmp#11##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#12##0" = tail call fastcc i1 @"wybe.int.=<0>"(i64 %"tmp#8##0", i64 %"tmp#10##0")
  br i1 %"tmp#12##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#0##0" = icmp eq i64 %"tmp#4##0", %"tmp#6##0"
  %"tmp#21##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#21##0"
if.else.1:
  %"tmp#22##0" = xor i1 0, 1
  ret i1 %"tmp#22##0"
if.else.0:
  %"tmp#23##0" = xor i1 0, 1
  ret i1 %"tmp#23##0"
}

--------------------------------------------------
 Module bug214.direction
  representation  : 2 bit unsigned
  public submods  : 
  public resources: 
  public procs    : bug214.direction.=<0>
                    bug214.direction.down<0>
                    bug214.direction.fwd<0>
                    bug214.direction.parse_direction<0>
                    bug214.direction.up<0>
                    bug214.direction.~=<0>
  imports         : use bug214
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: bug214.direction.=<0>
=(#left##0:bug214.direction, #right##0:bug214.direction, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:bug214.direction, ~#right##0:bug214.direction, ?#success##0:wybe.bool)


proc down > public {inline} (1 calls)
0: bug214.direction.down<0>
down(?#result##0:bug214.direction)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(1:bug214.direction, ?#result##0:bug214.direction)


proc fwd > public {inline} (1 calls)
0: bug214.direction.fwd<0>
fwd(?#result##0:bug214.direction)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:bug214.direction, ?#result##0:bug214.direction)


proc parse_direction > public (0 calls)
0: bug214.direction.parse_direction<0>
parse_direction(str##0:wybe.string, ?dir##0:bug214.direction, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.<=>#cont#2<0>(1:wybe.comparison, "forward":wybe.string, str##0:wybe.string, "forward":wybe.string, str##0:wybe.string, ?tmp#8##0:wybe.comparison) #6 @bug214:nn:nn
    foreign llvm icmp_eq(~tmp#8##0:wybe.comparison, 1:wybe.comparison, ?tmp#5##0:wybe.bool) @bug214:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        wybe.string.<=>#cont#2<0>(1:wybe.comparison, "down":wybe.string, str##0:wybe.string, "down":wybe.string, str##0:wybe.string, ?tmp#11##0:wybe.comparison) #7 @bug214:nn:nn
        foreign llvm icmp_eq(~tmp#11##0:wybe.comparison, 1:wybe.comparison, ?tmp#4##0:wybe.bool) @bug214:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            wybe.string.<=>#cont#2<0>(1:wybe.comparison, "up":wybe.string, ~str##0:wybe.string, "up":wybe.string, ~str##0:wybe.string, ?tmp#14##0:wybe.comparison) #8 @bug214:nn:nn
            foreign llvm icmp_eq(~tmp#14##0:wybe.comparison, 1:wybe.comparison, ?tmp#3##0:wybe.bool) @bug214:nn:nn
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
                foreign llvm move(undef:bug214.direction, ?dir##0:bug214.direction)

            1:
                foreign llvm move(2:bug214.direction, ?dir##0:bug214.direction) @bug214:nn:nn
                foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


        1:
            foreign llvm move(1:bug214.direction, ?dir##0:bug214.direction) @bug214:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


    1:
        foreign llvm move(0:bug214.direction, ?dir##0:bug214.direction) @bug214:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc up > public {inline} (1 calls)
0: bug214.direction.up<0>
up(?#result##0:bug214.direction)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(2:bug214.direction, ?#result##0:bug214.direction)


proc ~= > public {inline} (0 calls)
0: bug214.direction.~=<0>
~=(#left##0:bug214.direction, #right##0:bug214.direction, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~#left##0:bug214.direction, ~#right##0:bug214.direction, ?tmp#0##0:wybe.bool)
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'bug214.direction'

source_filename = "!ROOT!/final-dump/bug214.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"down\00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"forward\00", align 8
@"cstring#2" = private unnamed_addr constant [ ?? x i8 ] c"up\00", align 8
@"string#3" = private unnamed_addr constant {i64, i64} { i64 4, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#4" = private unnamed_addr constant {i64, i64} { i64 7, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8
@"string#5" = private unnamed_addr constant {i64, i64} { i64 2, i64 ptrtoint( ptr @"cstring#2" to i64 ) }, align 8

declare external fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2, i64, i64, i64, i64)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"bug214.direction.=<0>"(i2 %"#left##0", i2 %"#right##0") {
  %"tmp#1##0" = icmp eq i2 %"#left##0", %"#right##0"
  ret i1 %"tmp#1##0"
}

define external fastcc i2 @"bug214.direction.down<0>"() {
  ret i2 1
}

define external fastcc i2 @"bug214.direction.fwd<0>"() {
  ret i2 0
}

define external fastcc {i2, i1} @"bug214.direction.parse_direction<0>"(i64 %"str##0") {
  %"tmp#8##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 ptrtoint( ptr @"string#4" to i64 ), i64 %"str##0", i64 ptrtoint( ptr @"string#4" to i64 ), i64 %"str##0")
  %"tmp#5##0" = icmp eq i2 %"tmp#8##0", 1
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#15##0" = insertvalue {i2, i1} undef, i2 0, 0
  %"tmp#16##0" = insertvalue {i2, i1} %"tmp#15##0", i1 1, 1
  ret {i2, i1} %"tmp#16##0"
if.else.0:
  %"tmp#11##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 ptrtoint( ptr @"string#3" to i64 ), i64 %"str##0", i64 ptrtoint( ptr @"string#3" to i64 ), i64 %"str##0")
  %"tmp#4##0" = icmp eq i2 %"tmp#11##0", 1
  br i1 %"tmp#4##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#17##0" = insertvalue {i2, i1} undef, i2 1, 0
  %"tmp#18##0" = insertvalue {i2, i1} %"tmp#17##0", i1 1, 1
  ret {i2, i1} %"tmp#18##0"
if.else.1:
  %"tmp#14##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 ptrtoint( ptr @"string#5" to i64 ), i64 %"str##0", i64 ptrtoint( ptr @"string#5" to i64 ), i64 %"str##0")
  %"tmp#3##0" = icmp eq i2 %"tmp#14##0", 1
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#19##0" = insertvalue {i2, i1} undef, i2 2, 0
  %"tmp#20##0" = insertvalue {i2, i1} %"tmp#19##0", i1 1, 1
  ret {i2, i1} %"tmp#20##0"
if.else.2:
  %"tmp#21##0" = insertvalue {i2, i1} undef, i2 undef, 0
  %"tmp#22##0" = insertvalue {i2, i1} %"tmp#21##0", i1 0, 1
  ret {i2, i1} %"tmp#22##0"
}

define external fastcc i2 @"bug214.direction.up<0>"() {
  ret i2 2
}

define external fastcc i1 @"bug214.direction.~=<0>"(i2 %"#left##0", i2 %"#right##0") {
  %"tmp#0##0" = icmp eq i2 %"#left##0", %"#right##0"
  %"tmp#3##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#3##0"
}

--------------------------------------------------
 Module bug214.position
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : bug214.position.=<0>
                    bug214.position.origin<0>
                    bug214.position.position<0>
                    bug214.position.position<1>
                    bug214.position.print<0>
                    bug214.position.x<0>
                    bug214.position.x<1>
                    bug214.position.y<0>
                    bug214.position.y<1>
                    bug214.position.~=<0>
  imports         : use bug214
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: bug214.position.=<0>
=(#left##0:bug214.position, #right##0:bug214.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:bug214.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @bug214:nn:nn
    foreign lpvm access(~#left##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @bug214:nn:nn
    foreign lpvm access(#right##0:bug214.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @bug214:nn:nn
    foreign lpvm access(~#right##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @bug214:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



proc origin > public (0 calls)
0: bug214.position.origin<0>
origin(?#result##0:bug214.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#3##0:bug214.position) @bug214:nn:nn
    foreign lpvm mutate(~tmp#3##0:bug214.position, ?tmp#4##0:bug214.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @bug214:nn:nn
    foreign lpvm mutate(~tmp#4##0:bug214.position, ?#result##0:bug214.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @bug214:nn:nn


proc position > public {inline} (1 calls)
0: bug214.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:bug214.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:bug214.position) @bug214:nn:nn
    foreign lpvm mutate(~#rec##0:bug214.position, ?#rec##1:bug214.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int) @bug214:nn:nn
    foreign lpvm mutate(~#rec##1:bug214.position, ?#result##0:bug214.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int) @bug214:nn:nn
proc position > public {inline} (6 calls)
1: bug214.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:bug214.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:bug214.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @bug214:nn:nn
    foreign lpvm access(~#result##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @bug214:nn:nn


proc print > public (0 calls)
0: bug214.position.print<0>
print(pos##0:bug214.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(0,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []])),(3,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []])),(6,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    wybe.string.print<0>[410bae77d3](1187:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @bug214:nn:nn
    foreign lpvm access(pos##0:bug214.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @bug214:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @bug214:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @bug214:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @bug214:nn:nn
    wybe.string.print<0>[410bae77d3](1203:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @bug214:nn:nn
    foreign lpvm access(~pos##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @bug214:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom) @bug214:nn:nn
    foreign c print_int(~tmp#1##0:wybe.int, ~tmp#18##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @bug214:nn:nn
    foreign lpvm store(~%tmp#19##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @bug214:nn:nn
    wybe.string.print<0>[410bae77d3](1191:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @bug214:nn:nn


proc x > public {inline} (1 calls)
0: bug214.position.x<0>
x(#rec##0:bug214.position, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:bug214.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @bug214:nn:nn
proc x > public {inline} (0 calls)
1: bug214.position.x<1>
x(#rec##0:bug214.position, ?#rec##1:bug214.position, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:bug214.position, ?#rec##1:bug214.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @bug214:nn:nn


proc y > public {inline} (1 calls)
0: bug214.position.y<0>
y(#rec##0:bug214.position, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @bug214:nn:nn
proc y > public {inline} (0 calls)
1: bug214.position.y<1>
y(#rec##0:bug214.position, ?#rec##1:bug214.position, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:bug214.position, ?#rec##1:bug214.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @bug214:nn:nn


proc ~= > public {inline} (0 calls)
0: bug214.position.~=<0>
~=(#left##0:bug214.position, #right##0:bug214.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:bug214.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @bug214:nn:nn
    foreign lpvm access(~#left##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @bug214:nn:nn
    foreign lpvm access(#right##0:bug214.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @bug214:nn:nn
    foreign lpvm access(~#right##0:bug214.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @bug214:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'bug214.position'

source_filename = "!ROOT!/final-dump/bug214.wybe"
target triple    ????


declare external fastcc void @"wybe.string.print<0>[410bae77d3]"(i64)
declare external ccc void @print_int(i64)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"bug214.position.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#9##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#x##0" = load i64, ptr %"tmp#9##0"
  %"tmp#10##0" = add i64 %"#left##0", 8
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"#left#y##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#x##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#right##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#right#y##0" = load i64, ptr %"tmp#14##0"
  %"tmp#1##0" = icmp eq i64 %"#left#x##0", %"#right#x##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#15##0" = icmp eq i64 %"#left#y##0", %"#right#y##0"
  ret i1 %"tmp#15##0"
if.else.0:
  ret i1 0
}

define external fastcc i64 @"bug214.position.origin<0>"() {
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#3##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#6##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 0, ptr %"tmp#6##0"
  %"tmp#7##0" = add i64 %"tmp#3##0", 8
  %"tmp#8##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 0, ptr %"tmp#8##0"
  ret i64 %"tmp#3##0"
}

define external fastcc i64 @"bug214.position.position<0>"(i64 %"x##0", i64 %"y##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"x##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"y##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64} @"bug214.position.position<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#6##0" = insertvalue {i64, i64} %"tmp#5##0", i64 %"tmp#4##0", 1
  ret {i64, i64} %"tmp#6##0"
}

define external fastcc void @"bug214.position.print<0>"(i64 %"pos##0") {
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1187)
  %"tmp#25##0" = inttoptr i64 %"pos##0" to ptr
  %"tmp#0##0" = load i64, ptr %"tmp#25##0"
  call ccc void @print_int(i64 %"tmp#0##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1203)
  %"tmp#26##0" = add i64 %"pos##0", 8
  %"tmp#27##0" = inttoptr i64 %"tmp#26##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#27##0"
  call ccc void @print_int(i64 %"tmp#1##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1191)
  ret void
}

define external fastcc i64 @"bug214.position.x<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  ret i64 %"tmp#1##0"
}

define external fastcc i64 @"bug214.position.x<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"bug214.position.y<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"bug214.position.y<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i1 @"bug214.position.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#8##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#8##0"
  %"tmp#9##0" = add i64 %"#left##0", 8
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#10##0"
  %"tmp#11##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"#right##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#13##0"
  %"tmp#7##0" = icmp eq i64 %"tmp#3##0", %"tmp#5##0"
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#0##0" = icmp eq i64 %"tmp#4##0", %"tmp#6##0"
  %"tmp#14##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = xor i1 0, 1
  ret i1 %"tmp#15##0"
}

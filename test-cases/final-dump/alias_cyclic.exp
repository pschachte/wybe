======================================================================
AFTER EVERYTHING:
 Module alias_cyclic
  public submods  : 
  public types    : 
  public resources: 
  public procs    : alias_cyclic.<0>
                    alias_cyclic.bar<0>
                    alias_cyclic.updateX<0>
                    alias_cyclic.updateY<0>
  imports         : use position
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    alias_cyclic.bar<0>(~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @alias_cyclic:33:2


bar > public (1 calls)
0: bar(io#0:wybe.phantom, ?io#5:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$3#0:position.position)
    foreign lpvm mutate(~tmp$3#0:position.position, ?tmp$4#0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int)
    foreign lpvm mutate(~tmp$4#0:position.position, ?tmp$0#0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 900:wybe.int)
    alias_cyclic.updateX<0>(tmp$0#0:position.position, ?p2#0:position.position, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @alias_cyclic:25:4
    foreign c print_string("p1(100,900):":wybe.string, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    position.printPosition<0>(~tmp$0#0:position.position, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @alias_cyclic:28:4
    foreign c print_string("p2(102,900):":wybe.string, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
    position.printPosition<0>(~p2#0:position.position, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @alias_cyclic:30:4


updateX > public (2 calls)
0: updateX(p1#0:position.position, ?p2#0:position.position, io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: [(p1#0,p2#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [((alias_cyclic.updateY<0>,[~p1#1:position.position,?p2#0:position.position,~#io#0:wybe.phantom,?#io#1:wybe.phantom]),fromList [NonAliasedParamCond 0 []])]
    foreign lpvm access(p1#0:position.position, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign llvm icmp sgt(tmp$0#0:wybe.int, 101:wybe.int, ?tmp$3#0:wybe.bool) @wybe:nn:nn
    case ~tmp$3#0:wybe.bool of
    0:
        foreign llvm add(~tmp$0#0:wybe.int, 1:wybe.int, ?tmp$2#0:wybe.int) @wybe:nn:nn
        foreign lpvm mutate noalias(~%p1#0:position.position, ?%p1#1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:wybe.int)
        alias_cyclic.updateY<0>[04d1467a4d](~p1#1:position.position, ?p2#0:position.position, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @alias_cyclic:19:16

    1:
        foreign llvm move(~p1#0:position.position, ?p2#0:position.position) @alias_cyclic:16:24
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

 [04d1467a4d] [NonAliasedParam 0] :
    foreign lpvm access(p1#0:position.position, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign llvm icmp sgt(tmp$0#0:wybe.int, 101:wybe.int, ?tmp$3#0:wybe.bool) @wybe:nn:nn
    case ~tmp$3#0:wybe.bool of
    0:
        foreign llvm add(~tmp$0#0:wybe.int, 1:wybe.int, ?tmp$2#0:wybe.int) @wybe:nn:nn
        foreign lpvm mutate noalias(~%p1#0:position.position, ?%p1#1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:wybe.int)
        alias_cyclic.updateY<0>[04d1467a4d](~p1#1:position.position, ?p2#0:position.position, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @alias_cyclic:19:16

    1:
        foreign llvm move(~p1#0:position.position, ?p2#0:position.position) @alias_cyclic:16:24
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)



updateY > public (1 calls)
0: updateY(p1#0:position.position, ?p2#0:position.position, io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: [(p1#0,p2#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [((alias_cyclic.updateX<0>,[~p1#1:position.position,?p2#0:position.position,~#io#0:wybe.phantom,?#io#1:wybe.phantom]),fromList [NonAliasedParamCond 0 []])]
    foreign lpvm access(p1#0:position.position, 8:wybe.int, ?tmp$0#0:wybe.int)
    foreign llvm icmp sgt(tmp$0#0:wybe.int, 901:wybe.int, ?tmp$3#0:wybe.bool) @wybe:nn:nn
    case ~tmp$3#0:wybe.bool of
    0:
        foreign llvm add(~tmp$0#0:wybe.int, 1:wybe.int, ?tmp$2#0:wybe.int) @wybe:nn:nn
        foreign lpvm mutate noalias(~%p1#0:position.position, ?%p1#1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:wybe.int)
        alias_cyclic.updateX<0>[04d1467a4d](~p1#1:position.position, ?p2#0:position.position, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @alias_cyclic:10:19

    1:
        foreign llvm move(~p1#0:position.position, ?p2#0:position.position) @alias_cyclic:7:24
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

 [04d1467a4d] [NonAliasedParam 0] :
    foreign lpvm access(p1#0:position.position, 8:wybe.int, ?tmp$0#0:wybe.int)
    foreign llvm icmp sgt(tmp$0#0:wybe.int, 901:wybe.int, ?tmp$3#0:wybe.bool) @wybe:nn:nn
    case ~tmp$3#0:wybe.bool of
    0:
        foreign llvm add(~tmp$0#0:wybe.int, 1:wybe.int, ?tmp$2#0:wybe.int) @wybe:nn:nn
        foreign lpvm mutate noalias(~%p1#0:position.position, ?%p1#1:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:wybe.int)
        alias_cyclic.updateX<0>[04d1467a4d](~p1#1:position.position, ?p2#0:position.position, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @alias_cyclic:10:19

    1:
        foreign llvm move(~p1#0:position.position, ?p2#0:position.position) @alias_cyclic:7:24
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)


  LLVM code       :

; ModuleID = 'alias_cyclic'


 


declare external fastcc  void @"position.printPosition<0>"(i64)    


declare external ccc  void @print_string(i64)    


@alias_cyclic.11 =    constant [13 x i8] c"p2(102,900):\00"


@alias_cyclic.9 =    constant [13 x i8] c"p1(100,900):\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"alias_cyclic.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  tail call fastcc  void  @"alias_cyclic.bar<0>"()  
  ret void 
}


define external fastcc  void @"alias_cyclic.bar<0>"()    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 100, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 900, i64* %8 
  %"p2#0" = tail call fastcc  i64  @"alias_cyclic.updateX<0>"(i64  %3)  
  %10 = ptrtoint i8* getelementptr inbounds ([13 x i8], [13 x i8]* @alias_cyclic.9, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %10)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %3)  
  %12 = ptrtoint i8* getelementptr inbounds ([13 x i8], [13 x i8]* @alias_cyclic.11, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %12)  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %"p2#0")  
  ret void 
}


define external fastcc  i64 @"alias_cyclic.updateX<0>"(i64  %"p1#0")    {
entry:
  %13 = inttoptr i64 %"p1#0" to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %"tmp$3#0" = icmp sgt i64 %15, 101 
  br i1 %"tmp$3#0", label %if.then, label %if.else 
if.then:
  ret i64 %"p1#0" 
if.else:
  %"tmp$2#0" = add   i64 %15, 1 
  %16 = trunc i64 16 to i32  
  %17 = tail call ccc  i8*  @wybe_malloc(i32  %16)  
  %18 = ptrtoint i8* %17 to i64 
  %19 = inttoptr i64 %18 to i8* 
  %20 = inttoptr i64 %"p1#0" to i8* 
  %21 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %19, i8*  %20, i32  %21, i32  8, i1  0)  
  %22 = inttoptr i64 %18 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  store  i64 %"tmp$2#0", i64* %23 
  %"p2#0" = tail call fastcc  i64  @"alias_cyclic.updateY<0>[04d1467a4d]"(i64  %18)  
  ret i64 %"p2#0" 
}


define external fastcc  i64 @"alias_cyclic.updateX<0>[04d1467a4d]"(i64  %"p1#0")    {
entry:
  %24 = inttoptr i64 %"p1#0" to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %"tmp$3#0" = icmp sgt i64 %26, 101 
  br i1 %"tmp$3#0", label %if.then, label %if.else 
if.then:
  ret i64 %"p1#0" 
if.else:
  %"tmp$2#0" = add   i64 %26, 1 
  %27 = inttoptr i64 %"p1#0" to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  store  i64 %"tmp$2#0", i64* %28 
  %"p2#0" = tail call fastcc  i64  @"alias_cyclic.updateY<0>[04d1467a4d]"(i64  %"p1#0")  
  ret i64 %"p2#0" 
}


define external fastcc  i64 @"alias_cyclic.updateY<0>"(i64  %"p1#0")    {
entry:
  %29 = add   i64 %"p1#0", 8 
  %30 = inttoptr i64 %29 to i64* 
  %31 = getelementptr  i64, i64* %30, i64 0 
  %32 = load  i64, i64* %31 
  %"tmp$3#0" = icmp sgt i64 %32, 901 
  br i1 %"tmp$3#0", label %if.then, label %if.else 
if.then:
  ret i64 %"p1#0" 
if.else:
  %"tmp$2#0" = add   i64 %32, 1 
  %33 = trunc i64 16 to i32  
  %34 = tail call ccc  i8*  @wybe_malloc(i32  %33)  
  %35 = ptrtoint i8* %34 to i64 
  %36 = inttoptr i64 %35 to i8* 
  %37 = inttoptr i64 %"p1#0" to i8* 
  %38 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %36, i8*  %37, i32  %38, i32  8, i1  0)  
  %39 = add   i64 %35, 8 
  %40 = inttoptr i64 %39 to i64* 
  %41 = getelementptr  i64, i64* %40, i64 0 
  store  i64 %"tmp$2#0", i64* %41 
  %"p2#0" = tail call fastcc  i64  @"alias_cyclic.updateX<0>[04d1467a4d]"(i64  %35)  
  ret i64 %"p2#0" 
}


define external fastcc  i64 @"alias_cyclic.updateY<0>[04d1467a4d]"(i64  %"p1#0")    {
entry:
  %42 = add   i64 %"p1#0", 8 
  %43 = inttoptr i64 %42 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  %45 = load  i64, i64* %44 
  %"tmp$3#0" = icmp sgt i64 %45, 901 
  br i1 %"tmp$3#0", label %if.then, label %if.else 
if.then:
  ret i64 %"p1#0" 
if.else:
  %"tmp$2#0" = add   i64 %45, 1 
  %46 = add   i64 %"p1#0", 8 
  %47 = inttoptr i64 %46 to i64* 
  %48 = getelementptr  i64, i64* %47, i64 0 
  store  i64 %"tmp$2#0", i64* %48 
  %"p2#0" = tail call fastcc  i64  @"alias_cyclic.updateX<0>[04d1467a4d]"(i64  %"p1#0")  
  ret i64 %"p2#0" 
}
--------------------------------------------------
 Module position
  public submods  : 
  public types    : position: (position.position,Just address)
  public resources: 
  public procs    : position.printPosition<0>
                    position.position./=<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : public use position.position
                    use wybe
  types           : position/public  is address { position(x:int, y:int) @position:1:25  }  @position:1:5
  resources       : 
  submodules      : position.position
  procs           : 

printPosition > public (0 calls)
0: printPosition(pos#0:position.position, io#0:wybe.phantom, ?io#5:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string(" (":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign lpvm access(pos#0:position.position, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign c print_string(",":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    foreign lpvm access(~pos#0:position.position, 8:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
    foreign c print_string(")":wybe.string, ~#io#4:wybe.phantom, ?tmp$14#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$14#0:wybe.phantom, ?#io#5:wybe.phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'position'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external ccc  void @print_int(i64)    


@position.12 =    constant [2 x i8] c")\00"


@position.6 =    constant [2 x i8] c",\00"


@position.1 =    constant [3 x i8] c" (\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"position.printPosition<0>"(i64  %"pos#0")    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @position.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  %3 = inttoptr i64 %"pos#0" to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  tail call ccc  void  @print_int(i64  %5)  
  %7 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @position.6, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %7)  
  %8 = add   i64 %"pos#0", 8 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  tail call ccc  void  @print_int(i64  %11)  
  %13 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @position.12, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %13)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module position.position
  public submods  : 
  public types    : 
  public resources: 
  public procs    : position.position./=<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
  imports         : use position
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline test (0 calls)
0: /=($left#0:position.position, $right#0:position.position, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:position.position, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign lpvm access(~$left#0:position.position, 8:wybe.int, ?tmp$5#0:wybe.int)
    foreign lpvm access($right#0:position.position, 0:wybe.int, ?tmp$6#0:wybe.int)
    foreign lpvm access(~$right#0:position.position, 8:wybe.int, ?tmp$7#0:wybe.int)
    foreign llvm icmp eq(~tmp$4#0:wybe.int, ~tmp$6#0:wybe.int, ?tmp$8#0:wybe.bool) @wybe:nn:nn
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~tmp$5#0:wybe.int, ~tmp$7#0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)




= > public inline test (6 calls)
0: =($left#0:position.position, $right#0:position.position, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($left#0:position.position, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access(~$left#0:position.position, 8:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($right#0:position.position, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access(~$right#0:position.position, 8:wybe.int, ?$right$y#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



position > public inline (0 calls)
0: position(x#0:wybe.int, y#0:wybe.int, ?$#0:position.position):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!position.position)
    foreign lpvm mutate(~%$rec#0:position.position, ?%$rec#1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:position.position, ?%$#0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y#0:wybe.int)
position > public inline (4 calls)
1: position(?x#0:wybe.int, ?y#0:wybe.int, $#0:position.position):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access($#0:position.position, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access(~$#0:position.position, 8:wybe.int, ?y#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:position.position, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:position.position, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:position.position, ?%$rec#1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:position.position, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm access(~$rec#0:position.position, 8:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:position.position, ?$rec#1:position.position, $field#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm mutate noalias(~%$rec#0:position.position, ?%$rec#1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'position.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"position.position./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"tmp$8#0" = icmp eq i64 %3, %10 
  br i1 %"tmp$8#0", label %if.then, label %if.else 
if.then:
  %"tmp$1#0" = icmp eq i64 %7, %14 
  br i1 %"tmp$1#0", label %if.then1, label %if.else1 
if.else:
  ret i1 1 
if.then1:
  ret i1 0 
if.else1:
  ret i1 1 
}


define external fastcc  i1 @"position.position.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %15 = inttoptr i64 %"$left#0" to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = add   i64 %"$left#0", 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = inttoptr i64 %"$right#0" to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %25 = add   i64 %"$right#0", 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %"tmp$2#0" = icmp eq i64 %17, %24 
  br i1 %"tmp$2#0", label %if.then, label %if.else 
if.then:
  %"$$#0" = icmp eq i64 %21, %28 
  ret i1 %"$$#0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"position.position.position<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %29 = trunc i64 16 to i32  
  %30 = tail call ccc  i8*  @wybe_malloc(i32  %29)  
  %31 = ptrtoint i8* %30 to i64 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  store  i64 %"x#0", i64* %33 
  %34 = add   i64 %31, 8 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  store  i64 %"y#0", i64* %36 
  ret i64 %31 
}


define external fastcc  {i64, i64} @"position.position.position<1>"(i64  %"$#0")    {
entry:
  %37 = inttoptr i64 %"$#0" to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  %39 = load  i64, i64* %38 
  %40 = add   i64 %"$#0", 8 
  %41 = inttoptr i64 %40 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  %43 = load  i64, i64* %42 
  %44 = insertvalue {i64, i64} undef, i64 %39, 0 
  %45 = insertvalue {i64, i64} %44, i64 %43, 1 
  ret {i64, i64} %45 
}


define external fastcc  i64 @"position.position.x<0>"(i64  %"$rec#0")    {
entry:
  %46 = inttoptr i64 %"$rec#0" to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  %48 = load  i64, i64* %47 
  ret i64 %48 
}


define external fastcc  i64 @"position.position.x<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %49 = trunc i64 16 to i32  
  %50 = tail call ccc  i8*  @wybe_malloc(i32  %49)  
  %51 = ptrtoint i8* %50 to i64 
  %52 = inttoptr i64 %51 to i8* 
  %53 = inttoptr i64 %"$rec#0" to i8* 
  %54 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %52, i8*  %53, i32  %54, i32  8, i1  0)  
  %55 = inttoptr i64 %51 to i64* 
  %56 = getelementptr  i64, i64* %55, i64 0 
  store  i64 %"$field#0", i64* %56 
  ret i64 %51 
}


define external fastcc  i64 @"position.position.y<0>"(i64  %"$rec#0")    {
entry:
  %57 = add   i64 %"$rec#0", 8 
  %58 = inttoptr i64 %57 to i64* 
  %59 = getelementptr  i64, i64* %58, i64 0 
  %60 = load  i64, i64* %59 
  ret i64 %60 
}


define external fastcc  i64 @"position.position.y<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %61 = trunc i64 16 to i32  
  %62 = tail call ccc  i8*  @wybe_malloc(i32  %61)  
  %63 = ptrtoint i8* %62 to i64 
  %64 = inttoptr i64 %63 to i8* 
  %65 = inttoptr i64 %"$rec#0" to i8* 
  %66 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %64, i8*  %65, i32  %66, i32  8, i1  0)  
  %67 = add   i64 %63, 8 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  store  i64 %"$field#0", i64* %69 
  ret i64 %63 
}

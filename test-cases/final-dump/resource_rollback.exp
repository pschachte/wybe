======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module resource_rollback
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : resource_rollback.<0>
  imports         : use wybe
  resources       : res: fromList [(resource_rollback.res,wybe.int = 0 @resource_rollback:nn:nn @resource_rollback:nn:nn)]
                    ser: fromList [(resource_rollback.ser,wybe.int = 0 @resource_rollback:nn:nn @resource_rollback:nn:nn)]
  procs           : 

module top-level code > public {semipure} (0 calls)
0: resource_rollback.<0>
()<{<<resource_rollback.res>>, <<resource_rollback.ser>>, <<wybe.io.io>>}; {<<resource_rollback.res>>, <<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<resource_rollback.res>>:wybe.int, ?%res##0:wybe.int) @resource_rollback:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @resource_rollback:nn:nn
    foreign c print_int(res##0:wybe.int, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @resource_rollback:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @resource_rollback:nn:nn
    foreign lpvm store(%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @resource_rollback:nn:nn
    resource_rollback.foo<0>(?s##0:wybe.c_string, ?tmp#4##0:wybe.bool, c"resource_rollback:15:7":wybe.c_string)<{<<resource_rollback.res>>}; {<<resource_rollback.res>>}; {}> #1 @resource_rollback:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign lpvm store(~res##0:wybe.int, <<resource_rollback.res>>:wybe.int) @resource_rollback:nn:nn
        resource_rollback.#cont#1<0><{<<resource_rollback.res>>, <<resource_rollback.ser>>, <<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4

    1:
        foreign c print_string(~s##0:wybe.c_string, ~tmp#8##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @resource_rollback:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @resource_rollback:nn:nn
        foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @resource_rollback:nn:nn
        resource_rollback.#cont#1<0><{<<resource_rollback.res>>, <<resource_rollback.ser>>, <<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3



proc #cont#1 > {semipure} (2 calls)
0: resource_rollback.#cont#1<0>
#cont#1()<{<<resource_rollback.res>>, <<resource_rollback.ser>>, <<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<resource_rollback.res>>:wybe.int, ?%res##0:wybe.int) @resource_rollback:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @resource_rollback:nn:nn
    foreign c print_int(~res##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @resource_rollback:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @resource_rollback:nn:nn
    foreign lpvm load(<<resource_rollback.ser>>:wybe.int, ?%ser##0:wybe.int) @resource_rollback:nn:nn
    foreign c print_int(~ser##0:wybe.int, ~tmp#7##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @resource_rollback:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @resource_rollback:nn:nn
    foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @resource_rollback:nn:nn


proc foo > {noinline} (3 calls)
0: resource_rollback.foo<0>
foo(?s##0:wybe.c_string, ?#success##0:wybe.bool, %call_source_location##0:wybe.c_string)<{<<resource_rollback.res>>}; {<<resource_rollback.res>>}; {}>:
  AliasPairs: [(call_source_location##0,s##0)]
  InterestingCallProperties: []
    foreign llvm move(~call_source_location##0:wybe.c_string, ?s##0:wybe.c_string) @resource_rollback:nn:nn
    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'resource_rollback'

source_filename = "!ROOT!/final-dump/resource_rollback.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"resource_rollback:15:7\00", align 8

declare external ccc void @print_int(i64)
declare external ccc void @print_string(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)
@"resource#resource_rollback.res" = global i64 undef
@"resource#resource_rollback.ser" = global i64 undef

define external fastcc void @"resource_rollback.<0>"() {
  %"res##0" = load i64, ptr @"resource#resource_rollback.res"
  call ccc void @print_int(i64 %"res##0")
  call ccc void @putchar(i8 10)
  %"tmp#13##0" = tail call fastcc {i64, i1} @"resource_rollback.foo<0>"(i64 ptrtoint( ptr @"cstring#0" to i64 ))
  %"s##0" = extractvalue {i64, i1}%"tmp#13##0", 0
  %"tmp#4##0" = extractvalue {i64, i1}%"tmp#13##0", 1
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @print_string(i64 %"s##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"resource_rollback.#cont#1<0>"()
  ret void
if.else.0:
  store i64 %"res##0", ptr @"resource#resource_rollback.res"
  tail call fastcc void @"resource_rollback.#cont#1<0>"()
  ret void
}

define external fastcc void @"resource_rollback.#cont#1<0>"() {
  %"res##0" = load i64, ptr @"resource#resource_rollback.res"
  call ccc void @print_int(i64 %"res##0")
  call ccc void @putchar(i8 10)
  %"ser##0" = load i64, ptr @"resource#resource_rollback.ser"
  call ccc void @print_int(i64 %"ser##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc {i64, i1} @"resource_rollback.foo<0>"(i64 %"call_source_location##0") {
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 %"call_source_location##0", 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

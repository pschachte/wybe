======================================================================
AFTER EVERYTHING:
 Module resource_rollback
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : resource_rollback.<0>
  imports         : use wybe
  resources       : res: fromList [(resource_rollback.res,wybe.int = 0 @resource_rollback:nn:nn @resource_rollback:nn:nn)]
                    ser: fromList [(resource_rollback.ser,wybe.int = 0 @resource_rollback:nn:nn @resource_rollback:nn:nn)]
  procs           : 

module top-level code > public {semipure} (0 calls)
0: resource_rollback.<0>
()<{<<wybe.io.io>>}; {<<resource_rollback.res>>, <<resource_rollback.ser>>, <<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(0:wybe.int, <<resource_rollback.res>>:wybe.int) @resource_rollback:nn:nn
    foreign lpvm store(0:wybe.int, <<resource_rollback.ser>>:wybe.int) @resource_rollback:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @int:nn:nn
    foreign c print_int(0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    resource_rollback.foo<0>(?s##0:wybe.c_string, ?tmp#3##0:wybe.bool, c"resource_rollback:15:7":wybe.c_string)<{<<resource_rollback.res>>}; {<<resource_rollback.res>>}; {}> #1 @resource_rollback:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        foreign lpvm store(0:wybe.int, <<resource_rollback.res>>:wybe.int) @resource_rollback:nn:nn
        resource_rollback.#cont#1<0><{<<resource_rollback.res>>, <<resource_rollback.ser>>, <<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4

    1:
        foreign c print_string(~s##0:wybe.c_string, ~tmp#7##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @c_string:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        resource_rollback.#cont#1<0><{<<resource_rollback.res>>, <<resource_rollback.ser>>, <<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3



proc #cont#1 > (2 calls)
0: resource_rollback.#cont#1<0>
#cont#1()<{<<resource_rollback.res>>, <<resource_rollback.ser>>, <<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<resource_rollback.res>>:wybe.int, ?%res##0:wybe.int) @resource_rollback:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~res##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
    foreign lpvm load(<<resource_rollback.ser>>:wybe.int, ?%ser##0:wybe.int) @resource_rollback:nn:nn
    foreign c print_int(~ser##0:wybe.int, ~tmp#6##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


proc foo > {noinline} (3 calls)
0: resource_rollback.foo<0>
foo(?s##0:wybe.c_string, ?#success##0:wybe.bool, %call_source_location##0:wybe.c_string)<{<<resource_rollback.res>>}; {<<resource_rollback.res>>}; {}>:
  AliasPairs: [(call_source_location##0,s##0)]
  InterestingCallProperties: []
    foreign llvm move(~call_source_location##0:wybe.c_string, ?s##0:wybe.c_string) @resource_rollback:nn:nn
    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'resource_rollback'


 


@"resource#resource_rollback.res" =    global i64 undef


@"resource#resource_rollback.ser" =    global i64 undef


@resource_rollback.0 =    constant [?? x i8] c"resource_rollback:15:7\00"


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_string(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"resource_rollback.<0>"()    {
entry:
  store  i64 0, i64* @"resource#resource_rollback.res" 
  store  i64 0, i64* @"resource#resource_rollback.ser" 
  tail call ccc  void  @print_int(i64  0)  
  tail call ccc  void  @putchar(i8  10)  
  %0 = tail call fastcc  {i64, i1}  @"resource_rollback.foo<0>"(i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @resource_rollback.0, i32 0, i32 0) to i64))  
  %1 = extractvalue {i64, i1} %0, 0 
  %2 = extractvalue {i64, i1} %0, 1 
  br i1 %2, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_string(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"resource_rollback.#cont#1<0>"()  
  ret void 
if.else:
  store  i64 0, i64* @"resource#resource_rollback.res" 
  musttail call fastcc  void  @"resource_rollback.#cont#1<0>"()  
  ret void 
}


define external fastcc  void @"resource_rollback.#cont#1<0>"()    {
entry:
  %0 = load  i64, i64* @"resource#resource_rollback.res" 
  tail call ccc  void  @print_int(i64  %0)  
  tail call ccc  void  @putchar(i8  10)  
  %1 = load  i64, i64* @"resource#resource_rollback.ser" 
  tail call ccc  void  @print_int(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  {i64, i1} @"resource_rollback.foo<0>"(i64  %"call_source_location##0") noinline   {
entry:
  %0 = insertvalue {i64, i1} undef, i64 %"call_source_location##0", 0 
  %1 = insertvalue {i64, i1} %0, i1 0, 1 
  ret {i64, i1} %1 
}

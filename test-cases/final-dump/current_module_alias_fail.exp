======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module current_module_alias_fail
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : current_module_alias_fail.<0>
                    current_module_alias_fail.toCelsius<0>
  imports         : use math.temperature
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: current_module_alias_fail.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    current_module_alias_fail.toCelsius<0>(1.0:wybe.float, ?tmp#0##0:wybe.float) #0 @current_module_alias_fail:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom) @current_module_alias_fail:nn:nn
    foreign c print_float(~tmp#0##0:wybe.float, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @current_module_alias_fail:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @current_module_alias_fail:nn:nn
    foreign lpvm store(~%tmp#4##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @current_module_alias_fail:nn:nn


proc toCelsius > public {noinline} (1 calls)
0: current_module_alias_fail.toCelsius<0>
toCelsius(f##0:wybe.float, ?#result##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm fsub(~f##0:wybe.float, 32.0:wybe.float, ?tmp#1##0:wybe.float) @current_module_alias_fail:nn:nn
    foreign llvm fdiv(~tmp#1##0:wybe.float, 1.8:wybe.float, ?#result##0:wybe.float) @current_module_alias_fail:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'current_module_alias_fail'

source_filename = "!ROOT!/final-dump/current_module_alias_fail.wybe"
target triple    ????


declare external ccc void @print_float(double)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"current_module_alias_fail.<0>"() {
  %"tmp#0##0" = tail call fastcc double @"current_module_alias_fail.toCelsius<0>"(double 1.0)
  call ccc void @print_float(double %"tmp#0##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc double @"current_module_alias_fail.toCelsius<0>"(double %"f##0") {
  %"tmp#1##0" = fsub double %"f##0", 32.0
  %"tmp#6##0" = fdiv double %"tmp#1##0", 1.8
  ret double %"tmp#6##0"
}

--------------------------------------------------
 Module math.temperature
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : math.temperature.toCelsius<0>
  imports         : use wybe
  resources       : 
  procs           : 

proc toCelsius > public {inline} (0 calls)
0: math.temperature.toCelsius<0>
toCelsius(f##0:wybe.float, ?#result##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm fsub(~f##0:wybe.float, 32.0:wybe.float, ?tmp#1##0:wybe.float) @temperature:nn:nn
    foreign llvm fdiv(~tmp#1##0:wybe.float, 1.8:wybe.float, ?#result##0:wybe.float) @temperature:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'math.temperature'

source_filename = "!ROOT!/final-dump/math/temperature.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc double @"math.temperature.toCelsius<0>"(double %"f##0") {
  %"tmp#1##0" = fsub double %"f##0", 32.0
  %"tmp#6##0" = fdiv double %"tmp#1##0", 1.8
  ret double %"tmp#6##0"
}
final-dump/current_module_alias_fail.wybe:5:10: Multiple procedures match this call's types and flows:
    current_module_alias_fail.toCelsius<0>
    math.temperature.toCelsius<0>
Defaulting to: current_module_alias_fail.toCelsius<0>

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module dead_cell_size
  representation  : (not a type)
  public submods  : t -> dead_cell_size.t
                    t2 -> dead_cell_size.t2
  public resources: 
  public procs    : dead_cell_size.<0>
                    dead_cell_size.bar<0>
                    dead_cell_size.diff_type<0>
                    dead_cell_size.foo<0>
                    dead_cell_size.print_t<0>
                    dead_cell_size.print_t2<0>
                    dead_cell_size.t.=<0>
                    dead_cell_size.t.ta<0>
                    dead_cell_size.t.tb<0>
                    dead_cell_size.t.tb<1>
                    dead_cell_size.t.tb1<0>
                    dead_cell_size.t.tb1<1>
                    dead_cell_size.t.tc<0>
                    dead_cell_size.t.tc<1>
                    dead_cell_size.t.tc1<0>
                    dead_cell_size.t.tc1<1>
                    dead_cell_size.t.tc2<0>
                    dead_cell_size.t.tc2<1>
                    dead_cell_size.t.tc3<0>
                    dead_cell_size.t.tc3<1>
                    dead_cell_size.t.td<0>
                    dead_cell_size.t.td<1>
                    dead_cell_size.t.td1<0>
                    dead_cell_size.t.td1<1>
                    dead_cell_size.t.~=<0>
                    dead_cell_size.t2.=<0>
                    dead_cell_size.t2.a<0>
                    dead_cell_size.t2.a<1>
                    dead_cell_size.t2.t2a<0>
                    dead_cell_size.t2.t2b<0>
                    dead_cell_size.t2.t2b<1>
                    dead_cell_size.t2.~=<0>
  imports         : public use dead_cell_size.t
                    public use dead_cell_size.t2
                    use wybe
  resources       : 
  submodules      : dead_cell_size.t, dead_cell_size.t2
  procs           : 

module top-level code > public {semipure} (0 calls)
0: dead_cell_size.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(4,(dead_cell_size.bar<0>,fromList [NonAliasedParamCond 0 []])),(7,(dead_cell_size.diff_type<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm alloc(8:wybe.int, ?tmp#7##0:dead_cell_size.t) @dead_cell_size:nn:nn
    foreign lpvm mutate(~tmp#7##0:dead_cell_size.t, ?tmp#8##0:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 9:wybe.int) @dead_cell_size:nn:nn
    dead_cell_size.foo<0>(~tmp#8##0:dead_cell_size.t, ?tmp#0##0:dead_cell_size.t) #1 @dead_cell_size:nn:nn
    dead_cell_size.print_t<0>(~tmp#0##0:dead_cell_size.t)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @dead_cell_size:nn:nn
    foreign lpvm alloc(8:wybe.int, ?tmp#10##0:dead_cell_size.t) @dead_cell_size:nn:nn
    foreign lpvm mutate(~tmp#10##0:dead_cell_size.t, ?tmp#11##0:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 9:wybe.int) @dead_cell_size:nn:nn
    dead_cell_size.bar<0>[410bae77d3](~tmp#11##0:dead_cell_size.t, ?tmp#2##0:dead_cell_size.t) #4 @dead_cell_size:nn:nn
    dead_cell_size.print_t<0>(~tmp#2##0:dead_cell_size.t)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @dead_cell_size:nn:nn
    foreign lpvm alloc(8:wybe.int, ?tmp#13##0:dead_cell_size.t) @dead_cell_size:nn:nn
    foreign lpvm mutate(~tmp#13##0:dead_cell_size.t, ?tmp#14##0:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 9:wybe.int) @dead_cell_size:nn:nn
    dead_cell_size.diff_type<0>[410bae77d3](~tmp#14##0:dead_cell_size.t, ?tmp#4##0:dead_cell_size.t2) #7 @dead_cell_size:nn:nn
    dead_cell_size.print_t2<0>(~tmp#4##0:dead_cell_size.t2)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @dead_cell_size:nn:nn


proc bar > public (1 calls)
0: dead_cell_size.bar<0>
bar(x##0:dead_cell_size.t, ?x##1:dead_cell_size.t)<{}; {}; {}>:
  AliasPairs: [(x##0,x##1)]
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.bool) @dead_cell_size:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        foreign llvm move(0:dead_cell_size.t, ?x##1:dead_cell_size.t)

    1:
        foreign llvm and(x##0:wybe.int, 3:wybe.int, ?tmp#4##0:wybe.int) @dead_cell_size:nn:nn
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @dead_cell_size:nn:nn
        case ~tmp#5##0:wybe.bool of
        0:
            foreign llvm move(~x##0:dead_cell_size.t, ?x##1:dead_cell_size.t)

        1:
            foreign lpvm access(~x##0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a##0:wybe.int) @dead_cell_size:nn:nn
            foreign lpvm alloc(8:wybe.int, ?tmp#7##0:dead_cell_size.t) @dead_cell_size:nn:nn
            foreign lpvm mutate(~tmp#7##0:dead_cell_size.t, ?tmp#8##0:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~a##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm or(~tmp#8##0:dead_cell_size.t, 2:wybe.int, ?x##1:dead_cell_size.t) @dead_cell_size:nn:nn


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.bool) @dead_cell_size:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        foreign llvm move(0:dead_cell_size.t, ?x##1:dead_cell_size.t)

    1:
        foreign llvm and(x##0:wybe.int, 3:wybe.int, ?tmp#4##0:wybe.int) @dead_cell_size:nn:nn
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @dead_cell_size:nn:nn
        case ~tmp#5##0:wybe.bool of
        0:
            foreign llvm move(~x##0:dead_cell_size.t, ?x##1:dead_cell_size.t)

        1:
            foreign llvm or(~x##0:dead_cell_size.t, 2:wybe.int, ?x##1:dead_cell_size.t) @dead_cell_size:nn:nn




proc diff_type > public (1 calls)
0: dead_cell_size.diff_type<0>
diff_type(x##0:dead_cell_size.t, ?y##0:dead_cell_size.t2)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @dead_cell_size:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign lpvm alloc(8:wybe.int, ?tmp#8##0:dead_cell_size.t2) @dead_cell_size:nn:nn
        foreign lpvm mutate(~tmp#8##0:dead_cell_size.t2, ?y##0:dead_cell_size.t2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, -1:wybe.int) @dead_cell_size:nn:nn

    1:
        foreign llvm and(x##0:wybe.int, 3:wybe.int, ?tmp#5##0:wybe.int) @dead_cell_size:nn:nn
        foreign llvm icmp_eq(~tmp#5##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool) @dead_cell_size:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            foreign lpvm alloc(8:wybe.int, ?tmp#8##0:dead_cell_size.t2) @dead_cell_size:nn:nn
            foreign lpvm mutate(~tmp#8##0:dead_cell_size.t2, ?y##0:dead_cell_size.t2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, -1:wybe.int) @dead_cell_size:nn:nn

        1:
            foreign lpvm access(~x##0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a##0:wybe.int) @dead_cell_size:nn:nn
            foreign lpvm alloc(8:wybe.int, ?tmp#11##0:dead_cell_size.t2) @dead_cell_size:nn:nn
            foreign lpvm mutate(~tmp#11##0:dead_cell_size.t2, ?y##0:dead_cell_size.t2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~a##0:wybe.int) @dead_cell_size:nn:nn


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @dead_cell_size:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign lpvm alloc(8:wybe.int, ?tmp#8##0:dead_cell_size.t2) @dead_cell_size:nn:nn
        foreign lpvm mutate(~tmp#8##0:dead_cell_size.t2, ?y##0:dead_cell_size.t2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, -1:wybe.int) @dead_cell_size:nn:nn

    1:
        foreign llvm and(x##0:wybe.int, 3:wybe.int, ?tmp#5##0:wybe.int) @dead_cell_size:nn:nn
        foreign llvm icmp_eq(~tmp#5##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool) @dead_cell_size:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            foreign lpvm alloc(8:wybe.int, ?tmp#8##0:dead_cell_size.t2) @dead_cell_size:nn:nn
            foreign lpvm mutate(~tmp#8##0:dead_cell_size.t2, ?y##0:dead_cell_size.t2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, -1:wybe.int) @dead_cell_size:nn:nn

        1:
            foreign llvm move(~x##0:dead_cell_size.t, ?y##0:dead_cell_size.t2) @dead_cell_size:nn:nn




proc foo > public (1 calls)
0: dead_cell_size.foo<0>
foo(x##0:dead_cell_size.t, ?x##1:dead_cell_size.t)<{}; {}; {}>:
  AliasPairs: [(x##0,x##1)]
  InterestingCallProperties: []
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.bool) @dead_cell_size:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        foreign llvm move(0:dead_cell_size.t, ?x##1:dead_cell_size.t)

    1:
        foreign llvm and(x##0:wybe.int, 3:wybe.int, ?tmp#4##0:wybe.int) @dead_cell_size:nn:nn
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @dead_cell_size:nn:nn
        case ~tmp#5##0:wybe.bool of
        0:
            foreign llvm move(~x##0:dead_cell_size.t, ?x##1:dead_cell_size.t)

        1:
            foreign lpvm access(~x##0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a##0:wybe.int) @dead_cell_size:nn:nn
            foreign lpvm alloc(24:wybe.int, ?tmp#9##0:dead_cell_size.t) @dead_cell_size:nn:nn
            foreign lpvm mutate(~tmp#9##0:dead_cell_size.t, ?tmp#10##0:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~a##0:wybe.int) @dead_cell_size:nn:nn
            foreign lpvm mutate(~tmp#10##0:dead_cell_size.t, ?tmp#11##0:dead_cell_size.t, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 2:wybe.int) @dead_cell_size:nn:nn
            foreign lpvm mutate(~tmp#11##0:dead_cell_size.t, ?tmp#12##0:dead_cell_size.t, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 3:wybe.int) @dead_cell_size:nn:nn
            foreign llvm or(~tmp#12##0:dead_cell_size.t, 1:wybe.int, ?x##1:dead_cell_size.t) @dead_cell_size:nn:nn




proc print_t > public (2 calls)
0: dead_cell_size.print_t<0>
print_t(x##0:dead_cell_size.t)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(7,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []])),(12,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []])),(14,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []])),(16,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []])),(21,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    dead_cell_size.t.=<0>(0:dead_cell_size.t, x##0:dead_cell_size.t, ?tmp#4##0:wybe.bool) #1 @dead_cell_size:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool) @dead_cell_size:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#17##0:wybe.phantom) @dead_cell_size:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#17##0:wybe.phantom, ?tmp#18##0:wybe.phantom) @dead_cell_size:nn:nn
            foreign lpvm store(~%tmp#18##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn

        1:
            foreign llvm and(x##0:wybe.int, 3:wybe.int, ?tmp#7##0:wybe.int) @dead_cell_size:nn:nn
            case ~tmp#7##0:wybe.int of
            0:
                foreign lpvm access(~x##0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a##0:wybe.int) @dead_cell_size:nn:nn
                wybe.string.print<0>("tb(":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @dead_cell_size:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#56##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign c print_int(~a##0:wybe.int, ~tmp#56##0:wybe.phantom, ?tmp#57##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign lpvm store(~%tmp#57##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn
                wybe.string.print<0>[410bae77d3](1191:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @dead_cell_size:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#63##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp#63##0:wybe.phantom, ?tmp#64##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign lpvm store(~%tmp#64##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn

            1:
                foreign lpvm access(x##0:dead_cell_size.t, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?a##1:wybe.int) @dead_cell_size:nn:nn
                foreign lpvm access(x##0:dead_cell_size.t, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?b##0:wybe.int) @dead_cell_size:nn:nn
                foreign lpvm access(~x##0:dead_cell_size.t, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?c##0:wybe.int) @dead_cell_size:nn:nn
                wybe.string.print<0>("tc(":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10 @dead_cell_size:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign c print_int(~a##1:wybe.int, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign lpvm store(~%tmp#31##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn
                wybe.string.print<0>[410bae77d3](1203:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #12 @dead_cell_size:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#38##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign c print_int(~b##0:wybe.int, ~tmp#38##0:wybe.phantom, ?tmp#39##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign lpvm store(~%tmp#39##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn
                wybe.string.print<0>[410bae77d3](1203:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #14 @dead_cell_size:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#46##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign c print_int(~c##0:wybe.int, ~tmp#46##0:wybe.phantom, ?tmp#47##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign lpvm store(~%tmp#47##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn
                wybe.string.print<0>[410bae77d3](1191:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #16 @dead_cell_size:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#53##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp#53##0:wybe.phantom, ?tmp#54##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign lpvm store(~%tmp#54##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn

            2:
                foreign lpvm access(~x##0:dead_cell_size.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?a##2:wybe.int) @dead_cell_size:nn:nn
                wybe.string.print<0>("td(":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #19 @dead_cell_size:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#20##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign c print_int(~a##2:wybe.int, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign lpvm store(~%tmp#21##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn
                wybe.string.print<0>[410bae77d3](1191:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #21 @dead_cell_size:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @dead_cell_size:nn:nn
                foreign lpvm store(~%tmp#28##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn



    1:
        wybe.string.print<0>("ta":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @dead_cell_size:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#65##0:wybe.phantom) @dead_cell_size:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#65##0:wybe.phantom, ?tmp#66##0:wybe.phantom) @dead_cell_size:nn:nn
        foreign lpvm store(~%tmp#66##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn



proc print_t2 > public (1 calls)
0: dead_cell_size.print_t2<0>
print_t2(x##0:dead_cell_size.t2)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(7,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    dead_cell_size.t2.=<0>(0:dead_cell_size.t2, x##0:dead_cell_size.t2, ?tmp#2##0:wybe.bool) #1 @dead_cell_size:nn:nn
    case ~tmp#2##0:wybe.bool of
    0:
        foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @dead_cell_size:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @dead_cell_size:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @dead_cell_size:nn:nn
            foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn

        1:
            foreign lpvm access(~x##0:dead_cell_size.t2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a##0:wybe.int) @dead_cell_size:nn:nn
            wybe.string.print<0>("t2b(":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5 @dead_cell_size:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @dead_cell_size:nn:nn
            foreign c print_int(~a##0:wybe.int, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @dead_cell_size:nn:nn
            foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn
            wybe.string.print<0>[410bae77d3](1191:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @dead_cell_size:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @dead_cell_size:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @dead_cell_size:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn


    1:
        wybe.string.print<0>("t2a":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @dead_cell_size:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#17##0:wybe.phantom) @dead_cell_size:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#17##0:wybe.phantom, ?tmp#18##0:wybe.phantom) @dead_cell_size:nn:nn
        foreign lpvm store(~%tmp#18##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @dead_cell_size:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'dead_cell_size'

source_filename = "!ROOT!/final-dump/dead_cell_size.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"t2a\00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"t2b(\00", align 8
@"cstring#2" = private unnamed_addr constant [ ?? x i8 ] c"ta\00", align 8
@"cstring#3" = private unnamed_addr constant [ ?? x i8 ] c"tb(\00", align 8
@"cstring#4" = private unnamed_addr constant [ ?? x i8 ] c"tc(\00", align 8
@"cstring#5" = private unnamed_addr constant [ ?? x i8 ] c"td(\00", align 8
@"string#6" = private unnamed_addr constant {i64, i64} { i64 3, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#7" = private unnamed_addr constant {i64, i64} { i64 4, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8
@"string#8" = private unnamed_addr constant {i64, i64} { i64 2, i64 ptrtoint( ptr @"cstring#2" to i64 ) }, align 8
@"string#9" = private unnamed_addr constant {i64, i64} { i64 3, i64 ptrtoint( ptr @"cstring#3" to i64 ) }, align 8
@"string#10" = private unnamed_addr constant {i64, i64} { i64 3, i64 ptrtoint( ptr @"cstring#4" to i64 ) }, align 8
@"string#11" = private unnamed_addr constant {i64, i64} { i64 3, i64 ptrtoint( ptr @"cstring#5" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external fastcc void @"wybe.string.print<0>[410bae77d3]"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"dead_cell_size.<0>"() {
  %"tmp#15##0" = call ccc ptr @wybe_malloc(i32 8)
  %"tmp#7##0" = ptrtoint ptr %"tmp#15##0" to i64
  %"tmp#16##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 9, ptr %"tmp#16##0"
  %"tmp#0##0" = tail call fastcc i64 @"dead_cell_size.foo<0>"(i64 %"tmp#7##0")
  tail call fastcc void @"dead_cell_size.print_t<0>"(i64 %"tmp#0##0")
  %"tmp#17##0" = call ccc ptr @wybe_malloc(i32 8)
  %"tmp#10##0" = ptrtoint ptr %"tmp#17##0" to i64
  %"tmp#18##0" = inttoptr i64 %"tmp#10##0" to ptr
  store i64 9, ptr %"tmp#18##0"
  %"tmp#2##0" = tail call fastcc i64 @"dead_cell_size.bar<0>[410bae77d3]"(i64 %"tmp#10##0")
  tail call fastcc void @"dead_cell_size.print_t<0>"(i64 %"tmp#2##0")
  %"tmp#19##0" = call ccc ptr @wybe_malloc(i32 8)
  %"tmp#13##0" = ptrtoint ptr %"tmp#19##0" to i64
  %"tmp#20##0" = inttoptr i64 %"tmp#13##0" to ptr
  store i64 9, ptr %"tmp#20##0"
  %"tmp#4##0" = tail call fastcc i64 @"dead_cell_size.diff_type<0>[410bae77d3]"(i64 %"tmp#13##0")
  tail call fastcc void @"dead_cell_size.print_t2<0>"(i64 %"tmp#4##0")
  ret void
}

define external fastcc i64 @"dead_cell_size.bar<0>"(i64 %"x##0") {
  %"tmp#3##0" = icmp ne i64 %"x##0", 0
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#4##0" = and i64 %"x##0", 3
  %"tmp#5##0" = icmp eq i64 %"tmp#4##0", 0
  br i1 %"tmp#5##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#9##0" = inttoptr i64 %"x##0" to ptr
  %"a##0" = load i64, ptr %"tmp#9##0"
  %"tmp#10##0" = call ccc ptr @wybe_malloc(i32 8)
  %"tmp#7##0" = ptrtoint ptr %"tmp#10##0" to i64
  %"tmp#11##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 %"a##0", ptr %"tmp#11##0"
  %"tmp#12##0" = or i64 %"tmp#7##0", 2
  ret i64 %"tmp#12##0"
if.else.1:
  ret i64 %"x##0"
if.else.0:
  ret i64 0
}

define external fastcc i64 @"dead_cell_size.bar<0>[410bae77d3]"(i64 %"x##0") {
  %"tmp#3##0" = icmp ne i64 %"x##0", 0
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#4##0" = and i64 %"x##0", 3
  %"tmp#5##0" = icmp eq i64 %"tmp#4##0", 0
  br i1 %"tmp#5##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#9##0" = or i64 %"x##0", 2
  ret i64 %"tmp#9##0"
if.else.1:
  ret i64 %"x##0"
if.else.0:
  ret i64 0
}

define external fastcc i64 @"dead_cell_size.diff_type<0>"(i64 %"x##0") {
  %"tmp#4##0" = icmp ne i64 %"x##0", 0
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#5##0" = and i64 %"x##0", 3
  %"tmp#6##0" = icmp eq i64 %"tmp#5##0", 0
  br i1 %"tmp#6##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#13##0" = inttoptr i64 %"x##0" to ptr
  %"a##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = call ccc ptr @wybe_malloc(i32 8)
  %"tmp#11##0" = ptrtoint ptr %"tmp#14##0" to i64
  %"tmp#15##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 %"a##0", ptr %"tmp#15##0"
  ret i64 %"tmp#11##0"
if.else.1:
  %"tmp#16##0" = call ccc ptr @wybe_malloc(i32 8)
  %"tmp#8##0" = ptrtoint ptr %"tmp#16##0" to i64
  %"tmp#17##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 -1, ptr %"tmp#17##0"
  ret i64 %"tmp#8##0"
if.else.0:
  %"tmp#18##0" = call ccc ptr @wybe_malloc(i32 8)
  %"tmp#19##0" = ptrtoint ptr %"tmp#18##0" to i64
  %"tmp#20##0" = inttoptr i64 %"tmp#19##0" to ptr
  store i64 -1, ptr %"tmp#20##0"
  ret i64 %"tmp#19##0"
}

define external fastcc i64 @"dead_cell_size.diff_type<0>[410bae77d3]"(i64 %"x##0") {
  %"tmp#4##0" = icmp ne i64 %"x##0", 0
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#5##0" = and i64 %"x##0", 3
  %"tmp#6##0" = icmp eq i64 %"tmp#5##0", 0
  br i1 %"tmp#6##0", label %if.then.1, label %if.else.1
if.then.1:
  ret i64 %"x##0"
if.else.1:
  %"tmp#13##0" = call ccc ptr @wybe_malloc(i32 8)
  %"tmp#8##0" = ptrtoint ptr %"tmp#13##0" to i64
  %"tmp#14##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 -1, ptr %"tmp#14##0"
  ret i64 %"tmp#8##0"
if.else.0:
  %"tmp#15##0" = call ccc ptr @wybe_malloc(i32 8)
  %"tmp#16##0" = ptrtoint ptr %"tmp#15##0" to i64
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  store i64 -1, ptr %"tmp#17##0"
  ret i64 %"tmp#16##0"
}

define external fastcc i64 @"dead_cell_size.foo<0>"(i64 %"x##0") {
  %"tmp#3##0" = icmp ne i64 %"x##0", 0
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#4##0" = and i64 %"x##0", 3
  %"tmp#5##0" = icmp eq i64 %"tmp#4##0", 0
  br i1 %"tmp#5##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#13##0" = inttoptr i64 %"x##0" to ptr
  %"a##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = call ccc ptr @wybe_malloc(i32 24)
  %"tmp#9##0" = ptrtoint ptr %"tmp#14##0" to i64
  %"tmp#15##0" = inttoptr i64 %"tmp#9##0" to ptr
  store i64 %"a##0", ptr %"tmp#15##0"
  %"tmp#16##0" = add i64 %"tmp#9##0", 8
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  store i64 2, ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"tmp#9##0", 16
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  store i64 3, ptr %"tmp#19##0"
  %"tmp#20##0" = or i64 %"tmp#9##0", 1
  ret i64 %"tmp#20##0"
if.else.1:
  ret i64 %"x##0"
if.else.0:
  ret i64 0
}

define external fastcc void @"dead_cell_size.print_t<0>"(i64 %"x##0") {
  %"tmp#4##0" = tail call fastcc i1 @"dead_cell_size.t.=<0>"(i64 0, i64 %"x##0")
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#8" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
if.else.0:
  %"tmp#6##0" = icmp ne i64 %"x##0", 0
  br i1 %"tmp#6##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#7##0" = and i64 %"x##0", 3
  switch i64 %"tmp#7##0", label %case.2.switch.2 [
    i64 0, label %case.0.switch.2
    i64 1, label %case.1.switch.2
    i64 2, label %case.2.switch.2 ]
case.0.switch.2:
  %"tmp#67##0" = inttoptr i64 %"x##0" to ptr
  %"a##0" = load i64, ptr %"tmp#67##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#9" to i64 ))
  call ccc void @print_int(i64 %"a##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1191)
  call ccc void @putchar(i8 10)
  ret void
case.1.switch.2:
  %"tmp#68##0" = add i64 %"x##0", -1
  %"tmp#69##0" = inttoptr i64 %"tmp#68##0" to ptr
  %"a##1" = load i64, ptr %"tmp#69##0"
  %"tmp#70##0" = add i64 %"x##0", 7
  %"tmp#71##0" = inttoptr i64 %"tmp#70##0" to ptr
  %"b##0" = load i64, ptr %"tmp#71##0"
  %"tmp#72##0" = add i64 %"x##0", 15
  %"tmp#73##0" = inttoptr i64 %"tmp#72##0" to ptr
  %"c##0" = load i64, ptr %"tmp#73##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#10" to i64 ))
  call ccc void @print_int(i64 %"a##1")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1203)
  call ccc void @print_int(i64 %"b##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1203)
  call ccc void @print_int(i64 %"c##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1191)
  call ccc void @putchar(i8 10)
  ret void
case.2.switch.2:
  %"tmp#74##0" = add i64 %"x##0", -2
  %"tmp#75##0" = inttoptr i64 %"tmp#74##0" to ptr
  %"a##2" = load i64, ptr %"tmp#75##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#11" to i64 ))
  call ccc void @print_int(i64 %"a##2")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1191)
  call ccc void @putchar(i8 10)
  ret void
if.else.1:
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc void @"dead_cell_size.print_t2<0>"(i64 %"x##0") {
  %"tmp#2##0" = tail call fastcc i1 @"dead_cell_size.t2.=<0>"(i64 0, i64 %"x##0")
  br i1 %"tmp#2##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#6" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
if.else.0:
  %"tmp#4##0" = icmp ne i64 %"x##0", 0
  br i1 %"tmp#4##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#19##0" = inttoptr i64 %"x##0" to ptr
  %"a##0" = load i64, ptr %"tmp#19##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#7" to i64 ))
  call ccc void @print_int(i64 %"a##0")
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 1191)
  call ccc void @putchar(i8 10)
  ret void
if.else.1:
  call ccc void @putchar(i8 10)
  ret void
}

--------------------------------------------------
 Module dead_cell_size.t
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : dead_cell_size.t.=<0>
                    dead_cell_size.t.ta<0>
                    dead_cell_size.t.tb<0>
                    dead_cell_size.t.tb<1>
                    dead_cell_size.t.tb1<0>
                    dead_cell_size.t.tb1<1>
                    dead_cell_size.t.tc<0>
                    dead_cell_size.t.tc<1>
                    dead_cell_size.t.tc1<0>
                    dead_cell_size.t.tc1<1>
                    dead_cell_size.t.tc2<0>
                    dead_cell_size.t.tc2<1>
                    dead_cell_size.t.tc3<0>
                    dead_cell_size.t.tc3<1>
                    dead_cell_size.t.td<0>
                    dead_cell_size.t.td<1>
                    dead_cell_size.t.td1<0>
                    dead_cell_size.t.td1<1>
                    dead_cell_size.t.~=<0>
  imports         : use dead_cell_size
                    use wybe
  resources       : 
  procs           : 

proc = > public (1 calls)
0: dead_cell_size.t.=<0>
=(#left##0:dead_cell_size.t, #right##0:dead_cell_size.t, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:dead_cell_size.t, 0:dead_cell_size.t, ?#success##0:wybe.bool)

    1:
        foreign llvm and(#left##0:wybe.int, 3:wybe.int, ?tmp#15##0:wybe.int)
        case ~tmp#15##0:wybe.int of
        0:
            foreign lpvm access(~#left##0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#tb1##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#42##0:wybe.bool)
            case ~tmp#42##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#43##0:wybe.int)
                foreign llvm icmp_eq(~tmp#43##0:wybe.int, 0:wybe.int, ?tmp#44##0:wybe.bool)
                case ~tmp#44##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#tb1##0:wybe.int) @dead_cell_size:nn:nn
                    foreign llvm icmp_eq(~#left#tb1##0:wybe.int, ~#right#tb1##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        1:
            foreign lpvm access(#left##0:dead_cell_size.t, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?#left#tc1##0:wybe.int) @dead_cell_size:nn:nn
            foreign lpvm access(#left##0:dead_cell_size.t, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?#left#tc2##0:wybe.int) @dead_cell_size:nn:nn
            foreign lpvm access(~#left##0:dead_cell_size.t, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?#left#tc3##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#32##0:wybe.bool)
            case ~tmp#32##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#33##0:wybe.int)
                foreign llvm icmp_eq(~tmp#33##0:wybe.int, 1:wybe.int, ?tmp#34##0:wybe.bool)
                case ~tmp#34##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(#right##0:dead_cell_size.t, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?#right#tc1##0:wybe.int) @dead_cell_size:nn:nn
                    foreign lpvm access(#right##0:dead_cell_size.t, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?#right#tc2##0:wybe.int) @dead_cell_size:nn:nn
                    foreign lpvm access(~#right##0:dead_cell_size.t, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?#right#tc3##0:wybe.int) @dead_cell_size:nn:nn
                    foreign llvm icmp_eq(~#left#tc1##0:wybe.int, ~#right#tc1##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
                    case ~tmp#5##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign llvm icmp_eq(~#left#tc2##0:wybe.int, ~#right#tc2##0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
                        case ~tmp#6##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                        1:
                            foreign llvm icmp_eq(~#left#tc3##0:wybe.int, ~#right#tc3##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





        2:
            foreign lpvm access(~#left##0:dead_cell_size.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#left#td1##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#26##0:wybe.bool)
            case ~tmp#26##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#27##0:wybe.int)
                foreign llvm icmp_eq(~tmp#27##0:wybe.int, 2:wybe.int, ?tmp#28##0:wybe.bool)
                case ~tmp#28##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:dead_cell_size.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#right#td1##0:wybe.int) @dead_cell_size:nn:nn
                    foreign llvm icmp_eq(~#left#td1##0:wybe.int, ~#right#td1##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn






proc ta > public {inline} (0 calls)
0: dead_cell_size.t.ta<0>
ta(?#result##0:dead_cell_size.t)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:dead_cell_size.t, ?#result##0:dead_cell_size.t)


proc tb > public {inline} (0 calls)
0: dead_cell_size.t.tb<0>
tb(tb1##0:wybe.int, ?#result##0:dead_cell_size.t)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:dead_cell_size.t) @dead_cell_size:nn:nn
    foreign lpvm mutate(~#rec##0:dead_cell_size.t, ?#result##0:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~tb1##0:wybe.int) @dead_cell_size:nn:nn
proc tb > public {inline} (14 calls)
1: dead_cell_size.t.tb<1>
tb(?tb1##0:wybe.int, #result##0:dead_cell_size.t, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?tb1##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?tb1##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?tb1##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc tb1 > public {inline} (0 calls)
0: dead_cell_size.t.tb1<0>
tb1(#rec##0:dead_cell_size.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc tb1 > public {inline} (0 calls)
1: dead_cell_size.t.tb1<1>
tb1(#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:dead_cell_size.t, ?#rec##1:dead_cell_size.t)

    1:
        foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc tc > public {inline} (0 calls)
0: dead_cell_size.t.tc<0>
tc(tc1##0:wybe.int, tc2##0:wybe.int, tc3##0:wybe.int, ?#result##0:dead_cell_size.t)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:dead_cell_size.t) @dead_cell_size:nn:nn
    foreign lpvm mutate(~#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tc1##0:wybe.int) @dead_cell_size:nn:nn
    foreign lpvm mutate(~#rec##1:dead_cell_size.t, ?#rec##2:dead_cell_size.t, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tc2##0:wybe.int) @dead_cell_size:nn:nn
    foreign lpvm mutate(~#rec##2:dead_cell_size.t, ?#rec##3:dead_cell_size.t, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tc3##0:wybe.int) @dead_cell_size:nn:nn
    foreign llvm or(~#rec##3:dead_cell_size.t, 1:wybe.int, ?#result##0:dead_cell_size.t) @dead_cell_size:nn:nn
proc tc > public {inline} (11 calls)
1: dead_cell_size.t.tc<1>
tc(?tc1##0:wybe.int, ?tc2##0:wybe.int, ?tc3##0:wybe.int, #result##0:dead_cell_size.t, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?tc1##0:wybe.int)
        foreign llvm move(undef:wybe.int, ?tc2##0:wybe.int)
        foreign llvm move(undef:wybe.int, ?tc3##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?tc1##0:wybe.int)
            foreign llvm move(undef:wybe.int, ?tc2##0:wybe.int)
            foreign llvm move(undef:wybe.int, ?tc3##0:wybe.int)

        1:
            foreign lpvm access(#result##0:dead_cell_size.t, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?tc1##0:wybe.int) @dead_cell_size:nn:nn
            foreign lpvm access(#result##0:dead_cell_size.t, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?tc2##0:wybe.int) @dead_cell_size:nn:nn
            foreign lpvm access(~#result##0:dead_cell_size.t, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?tc3##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc tc1 > public {inline} (0 calls)
0: dead_cell_size.t.tc1<0>
tc1(#rec##0:dead_cell_size.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:dead_cell_size.t, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc tc1 > public {inline} (0 calls)
1: dead_cell_size.t.tc1<1>
tc1(#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:dead_cell_size.t, ?#rec##1:dead_cell_size.t)

    1:
        foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t, -1:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc tc2 > public {inline} (0 calls)
0: dead_cell_size.t.tc2<0>
tc2(#rec##0:dead_cell_size.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:dead_cell_size.t, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc tc2 > public {inline} (0 calls)
1: dead_cell_size.t.tc2<1>
tc2(#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:dead_cell_size.t, ?#rec##1:dead_cell_size.t)

    1:
        foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t, 7:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc tc3 > public {inline} (0 calls)
0: dead_cell_size.t.tc3<0>
tc3(#rec##0:dead_cell_size.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:dead_cell_size.t, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc tc3 > public {inline} (0 calls)
1: dead_cell_size.t.tc3<1>
tc3(#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:dead_cell_size.t, ?#rec##1:dead_cell_size.t)

    1:
        foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 1:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t, 15:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc td > public {inline} (0 calls)
0: dead_cell_size.t.td<0>
td(td1##0:wybe.int, ?#result##0:dead_cell_size.t)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:dead_cell_size.t) @dead_cell_size:nn:nn
    foreign lpvm mutate(~#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~td1##0:wybe.int) @dead_cell_size:nn:nn
    foreign llvm or(~#rec##1:dead_cell_size.t, 2:wybe.int, ?#result##0:dead_cell_size.t) @dead_cell_size:nn:nn
proc td > public {inline} (5 calls)
1: dead_cell_size.t.td<1>
td(?td1##0:wybe.int, #result##0:dead_cell_size.t, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?td1##0:wybe.int)

    1:
        foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 2:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?td1##0:wybe.int)

        1:
            foreign lpvm access(~#result##0:dead_cell_size.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?td1##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc td1 > public {inline} (0 calls)
0: dead_cell_size.t.td1<0>
td1(#rec##0:dead_cell_size.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 2:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

        1:
            foreign lpvm access(~#rec##0:dead_cell_size.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#result##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


proc td1 > public {inline} (0 calls)
1: dead_cell_size.t.td1<1>
td1(#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:dead_cell_size.t, ?#rec##1:dead_cell_size.t)

    1:
        foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#2##0:wybe.int)
        foreign llvm icmp_eq(~tmp#2##0:wybe.int, 2:wybe.int, ?tmp#1##0:wybe.bool)
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t)

        1:
            foreign lpvm {noalias} mutate(~#rec##0:dead_cell_size.t, ?#rec##1:dead_cell_size.t, -2:wybe.int, 0:wybe.int, 8:wybe.int, 2:wybe.int, ~#field##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc ~= > public {inline} (0 calls)
0: dead_cell_size.t.~=<0>
~=(#left##0:dead_cell_size.t, #right##0:dead_cell_size.t, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    dead_cell_size.t.=<0>(~#left##0:dead_cell_size.t, ~#right##0:dead_cell_size.t, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'dead_cell_size.t'

source_filename = "!ROOT!/final-dump/dead_cell_size.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"dead_cell_size.t.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp ne i64 %"#left##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#15##0" = and i64 %"#left##0", 3
  switch i64 %"tmp#15##0", label %case.2.switch.1 [
    i64 0, label %case.0.switch.1
    i64 1, label %case.1.switch.1
    i64 2, label %case.2.switch.1 ]
case.0.switch.1:
  %"tmp#47##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#tb1##0" = load i64, ptr %"tmp#47##0"
  %"tmp#42##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#42##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#43##0" = and i64 %"#right##0", 3
  %"tmp#44##0" = icmp eq i64 %"tmp#43##0", 0
  br i1 %"tmp#44##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#48##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#tb1##0" = load i64, ptr %"tmp#48##0"
  %"tmp#49##0" = icmp eq i64 %"#left#tb1##0", %"#right#tb1##0"
  ret i1 %"tmp#49##0"
if.else.3:
  ret i1 0
if.else.2:
  ret i1 0
case.1.switch.1:
  %"tmp#50##0" = add i64 %"#left##0", -1
  %"tmp#51##0" = inttoptr i64 %"tmp#50##0" to ptr
  %"#left#tc1##0" = load i64, ptr %"tmp#51##0"
  %"tmp#52##0" = add i64 %"#left##0", 7
  %"tmp#53##0" = inttoptr i64 %"tmp#52##0" to ptr
  %"#left#tc2##0" = load i64, ptr %"tmp#53##0"
  %"tmp#54##0" = add i64 %"#left##0", 15
  %"tmp#55##0" = inttoptr i64 %"tmp#54##0" to ptr
  %"#left#tc3##0" = load i64, ptr %"tmp#55##0"
  %"tmp#32##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#32##0", label %if.then.4, label %if.else.4
if.then.4:
  %"tmp#33##0" = and i64 %"#right##0", 3
  %"tmp#34##0" = icmp eq i64 %"tmp#33##0", 1
  br i1 %"tmp#34##0", label %if.then.5, label %if.else.5
if.then.5:
  %"tmp#56##0" = add i64 %"#right##0", -1
  %"tmp#57##0" = inttoptr i64 %"tmp#56##0" to ptr
  %"#right#tc1##0" = load i64, ptr %"tmp#57##0"
  %"tmp#58##0" = add i64 %"#right##0", 7
  %"tmp#59##0" = inttoptr i64 %"tmp#58##0" to ptr
  %"#right#tc2##0" = load i64, ptr %"tmp#59##0"
  %"tmp#60##0" = add i64 %"#right##0", 15
  %"tmp#61##0" = inttoptr i64 %"tmp#60##0" to ptr
  %"#right#tc3##0" = load i64, ptr %"tmp#61##0"
  %"tmp#5##0" = icmp eq i64 %"#left#tc1##0", %"#right#tc1##0"
  br i1 %"tmp#5##0", label %if.then.6, label %if.else.6
if.then.6:
  %"tmp#6##0" = icmp eq i64 %"#left#tc2##0", %"#right#tc2##0"
  br i1 %"tmp#6##0", label %if.then.7, label %if.else.7
if.then.7:
  %"tmp#62##0" = icmp eq i64 %"#left#tc3##0", %"#right#tc3##0"
  ret i1 %"tmp#62##0"
if.else.7:
  ret i1 0
if.else.6:
  ret i1 0
if.else.5:
  ret i1 0
if.else.4:
  ret i1 0
case.2.switch.1:
  %"tmp#63##0" = add i64 %"#left##0", -2
  %"tmp#64##0" = inttoptr i64 %"tmp#63##0" to ptr
  %"#left#td1##0" = load i64, ptr %"tmp#64##0"
  %"tmp#26##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#26##0", label %if.then.8, label %if.else.8
if.then.8:
  %"tmp#27##0" = and i64 %"#right##0", 3
  %"tmp#28##0" = icmp eq i64 %"tmp#27##0", 2
  br i1 %"tmp#28##0", label %if.then.9, label %if.else.9
if.then.9:
  %"tmp#65##0" = add i64 %"#right##0", -2
  %"tmp#66##0" = inttoptr i64 %"tmp#65##0" to ptr
  %"#right#td1##0" = load i64, ptr %"tmp#66##0"
  %"tmp#67##0" = icmp eq i64 %"#left#td1##0", %"#right#td1##0"
  ret i1 %"tmp#67##0"
if.else.9:
  ret i1 0
if.else.8:
  ret i1 0
if.else.0:
  %"tmp#68##0" = icmp eq i64 %"#right##0", 0
  ret i1 %"tmp#68##0"
}

define external fastcc i64 @"dead_cell_size.t.ta<0>"() {
  ret i64 0
}

define external fastcc i64 @"dead_cell_size.t.tb<0>"(i64 %"tb1##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"tb1##0", ptr %"tmp#1##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t.tb<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 3
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 0
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.1:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 0, 1
  ret {i64, i1} %"tmp#10##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t.tb1<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 3
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 0
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.1:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 0, 1
  ret {i64, i1} %"tmp#10##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t.tb1<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 3
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 0
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#4##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#4##0", ptr %"tmp#3##0", i64 8, i1 0)
  %"tmp#5##0" = ptrtoint ptr %"tmp#4##0" to i64
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  store i64 %"#field##0", ptr %"tmp#6##0"
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 1, 1
  ret {i64, i1} %"tmp#8##0"
if.else.1:
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 0, 1
  ret {i64, i1} %"tmp#10##0"
if.else.0:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
}

define external fastcc i64 @"dead_cell_size.t.tc<0>"(i64 %"tc1##0", i64 %"tc2##0", i64 %"tc3##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 24)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"tc1##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"tc2##0", ptr %"tmp#3##0"
  %"tmp#4##0" = add i64 %"#rec##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"tc3##0", ptr %"tmp#5##0"
  %"tmp#6##0" = or i64 %"#rec##0", 1
  ret i64 %"tmp#6##0"
}

define external fastcc {i64, i64, i64, i1} @"dead_cell_size.t.tc<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 3
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#result##0", -1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = add i64 %"#result##0", 7
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = add i64 %"#result##0", 15
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"tmp#11##0" = load i64, ptr %"tmp#10##0"
  %"tmp#12##0" = insertvalue {i64, i64, i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#13##0" = insertvalue {i64, i64, i64, i1} %"tmp#12##0", i64 %"tmp#8##0", 1
  %"tmp#14##0" = insertvalue {i64, i64, i64, i1} %"tmp#13##0", i64 %"tmp#11##0", 2
  %"tmp#15##0" = insertvalue {i64, i64, i64, i1} %"tmp#14##0", i1 1, 3
  ret {i64, i64, i64, i1} %"tmp#15##0"
if.else.1:
  %"tmp#16##0" = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0
  %"tmp#17##0" = insertvalue {i64, i64, i64, i1} %"tmp#16##0", i64 undef, 1
  %"tmp#18##0" = insertvalue {i64, i64, i64, i1} %"tmp#17##0", i64 undef, 2
  %"tmp#19##0" = insertvalue {i64, i64, i64, i1} %"tmp#18##0", i1 0, 3
  ret {i64, i64, i64, i1} %"tmp#19##0"
if.else.0:
  %"tmp#20##0" = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0
  %"tmp#21##0" = insertvalue {i64, i64, i64, i1} %"tmp#20##0", i64 undef, 1
  %"tmp#22##0" = insertvalue {i64, i64, i64, i1} %"tmp#21##0", i64 undef, 2
  %"tmp#23##0" = insertvalue {i64, i64, i64, i1} %"tmp#22##0", i1 0, 3
  ret {i64, i64, i64, i1} %"tmp#23##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t.tc1<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 3
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#rec##0", -1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t.tc1<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 3
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = sub i64 %"#rec##0", 1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#5##0", ptr %"tmp#4##0", i64 24, i1 0)
  %"tmp#6##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#7##0" = add i64 %"tmp#6##0", 1
  %"tmp#8##0" = add i64 %"tmp#7##0", -1
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 %"tmp#7##0", 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 1, 1
  ret {i64, i1} %"tmp#11##0"
if.else.1:
  %"tmp#12##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#13##0" = insertvalue {i64, i1} %"tmp#12##0", i1 0, 1
  ret {i64, i1} %"tmp#13##0"
if.else.0:
  %"tmp#14##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#15##0" = insertvalue {i64, i1} %"tmp#14##0", i1 0, 1
  ret {i64, i1} %"tmp#15##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t.tc2<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 3
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#rec##0", 7
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t.tc2<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 3
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = sub i64 %"#rec##0", 1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#5##0", ptr %"tmp#4##0", i64 24, i1 0)
  %"tmp#6##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#7##0" = add i64 %"tmp#6##0", 1
  %"tmp#8##0" = add i64 %"tmp#7##0", 7
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 %"tmp#7##0", 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 1, 1
  ret {i64, i1} %"tmp#11##0"
if.else.1:
  %"tmp#12##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#13##0" = insertvalue {i64, i1} %"tmp#12##0", i1 0, 1
  ret {i64, i1} %"tmp#13##0"
if.else.0:
  %"tmp#14##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#15##0" = insertvalue {i64, i1} %"tmp#14##0", i1 0, 1
  ret {i64, i1} %"tmp#15##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t.tc3<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 3
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#rec##0", 15
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t.tc3<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 3
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 1
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = sub i64 %"#rec##0", 1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#5##0", ptr %"tmp#4##0", i64 24, i1 0)
  %"tmp#6##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#7##0" = add i64 %"tmp#6##0", 1
  %"tmp#8##0" = add i64 %"tmp#7##0", 15
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 %"tmp#7##0", 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 1, 1
  ret {i64, i1} %"tmp#11##0"
if.else.1:
  %"tmp#12##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#13##0" = insertvalue {i64, i1} %"tmp#12##0", i1 0, 1
  ret {i64, i1} %"tmp#13##0"
if.else.0:
  %"tmp#14##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#15##0" = insertvalue {i64, i1} %"tmp#14##0", i1 0, 1
  ret {i64, i1} %"tmp#15##0"
}

define external fastcc i64 @"dead_cell_size.t.td<0>"(i64 %"td1##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"td1##0", ptr %"tmp#1##0"
  %"tmp#2##0" = or i64 %"#rec##0", 2
  ret i64 %"tmp#2##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t.td<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#result##0", 3
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 2
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#result##0", -2
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t.td1<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 3
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 2
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = add i64 %"#rec##0", -2
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#5##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.1:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
if.else.0:
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 0, 1
  ret {i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t.td1<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = and i64 %"#rec##0", 3
  %"tmp#1##0" = icmp eq i64 %"tmp#2##0", 2
  br i1 %"tmp#1##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = sub i64 %"#rec##0", 2
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#5##0", ptr %"tmp#4##0", i64 8, i1 0)
  %"tmp#6##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#7##0" = add i64 %"tmp#6##0", 2
  %"tmp#8##0" = add i64 %"tmp#7##0", -2
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  %"tmp#10##0" = insertvalue {i64, i1} undef, i64 %"tmp#7##0", 0
  %"tmp#11##0" = insertvalue {i64, i1} %"tmp#10##0", i1 1, 1
  ret {i64, i1} %"tmp#11##0"
if.else.1:
  %"tmp#12##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#13##0" = insertvalue {i64, i1} %"tmp#12##0", i1 0, 1
  ret {i64, i1} %"tmp#13##0"
if.else.0:
  %"tmp#14##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#15##0" = insertvalue {i64, i1} %"tmp#14##0", i1 0, 1
  ret {i64, i1} %"tmp#15##0"
}

define external fastcc i1 @"dead_cell_size.t.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"dead_cell_size.t.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

--------------------------------------------------
 Module dead_cell_size.t2
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : dead_cell_size.t2.=<0>
                    dead_cell_size.t2.a<0>
                    dead_cell_size.t2.a<1>
                    dead_cell_size.t2.t2a<0>
                    dead_cell_size.t2.t2b<0>
                    dead_cell_size.t2.t2b<1>
                    dead_cell_size.t2.~=<0>
  imports         : use dead_cell_size
                    use wybe
  resources       : 
  procs           : 

proc = > public (1 calls)
0: dead_cell_size.t2.=<0>
=(#left##0:dead_cell_size.t2, #right##0:dead_cell_size.t2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:dead_cell_size.t2, 0:dead_cell_size.t2, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(~#left##0:dead_cell_size.t2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#a##0:wybe.int) @dead_cell_size:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool)
        case ~tmp#8##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:dead_cell_size.t2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#a##0:wybe.int) @dead_cell_size:nn:nn
            foreign llvm icmp_eq(~#left#a##0:wybe.int, ~#right#a##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc a > public {inline} (0 calls)
0: dead_cell_size.t2.a<0>
a(#rec##0:dead_cell_size.t2, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:dead_cell_size.t2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @dead_cell_size:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc a > public {inline} (0 calls)
1: dead_cell_size.t2.a<1>
a(#rec##0:dead_cell_size.t2, ?#rec##1:dead_cell_size.t2, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:dead_cell_size.t2, ?#rec##1:dead_cell_size.t2)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:dead_cell_size.t2, ?#rec##1:dead_cell_size.t2, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @dead_cell_size:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc t2a > public {inline} (0 calls)
0: dead_cell_size.t2.t2a<0>
t2a(?#result##0:dead_cell_size.t2)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:dead_cell_size.t2, ?#result##0:dead_cell_size.t2)


proc t2b > public {inline} (0 calls)
0: dead_cell_size.t2.t2b<0>
t2b(a##0:wybe.int, ?#result##0:dead_cell_size.t2)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:dead_cell_size.t2) @dead_cell_size:nn:nn
    foreign lpvm mutate(~#rec##0:dead_cell_size.t2, ?#result##0:dead_cell_size.t2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~a##0:wybe.int) @dead_cell_size:nn:nn
proc t2b > public {inline} (8 calls)
1: dead_cell_size.t2.t2b<1>
t2b(?a##0:wybe.int, #result##0:dead_cell_size.t2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?a##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:dead_cell_size.t2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a##0:wybe.int) @dead_cell_size:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: dead_cell_size.t2.~=<0>
~=(#left##0:dead_cell_size.t2, #right##0:dead_cell_size.t2, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    dead_cell_size.t2.=<0>(~#left##0:dead_cell_size.t2, ~#right##0:dead_cell_size.t2, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'dead_cell_size.t2'

source_filename = "!ROOT!/final-dump/dead_cell_size.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"dead_cell_size.t2.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp ne i64 %"#left##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#11##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#a##0" = load i64, ptr %"tmp#11##0"
  %"tmp#8##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#8##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#12##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#a##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = icmp eq i64 %"#left#a##0", %"#right#a##0"
  ret i1 %"tmp#13##0"
if.else.1:
  ret i1 0
if.else.0:
  %"tmp#14##0" = icmp eq i64 %"#right##0", 0
  ret i1 %"tmp#14##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t2.a<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = insertvalue {i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#4##0" = insertvalue {i64, i1} %"tmp#3##0", i1 1, 1
  ret {i64, i1} %"tmp#4##0"
if.else.0:
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 0, 1
  ret {i64, i1} %"tmp#6##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t2.a<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 8, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc i64 @"dead_cell_size.t2.t2a<0>"() {
  ret i64 0
}

define external fastcc i64 @"dead_cell_size.t2.t2b<0>"(i64 %"a##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"a##0", ptr %"tmp#1##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i1} @"dead_cell_size.t2.t2b<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = insertvalue {i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#4##0" = insertvalue {i64, i1} %"tmp#3##0", i1 1, 1
  ret {i64, i1} %"tmp#4##0"
if.else.0:
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 0, 1
  ret {i64, i1} %"tmp#6##0"
}

define external fastcc i1 @"dead_cell_size.t2.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"dead_cell_size.t2.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

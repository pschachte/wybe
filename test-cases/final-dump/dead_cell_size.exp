======================================================================
AFTER EVERYTHING:
 Module dead_cell_size
  public submods  : 
  public types    : t: (dead_cell_size.t,Just address)
                    t2: (dead_cell_size.t2,Just address)
  public resources: 
  public procs    : dead_cell_size.<0>
                    dead_cell_size.bar<0>
                    dead_cell_size.diff_type<0>
                    dead_cell_size.foo<0>
                    dead_cell_size.print_t<0>
                    dead_cell_size.print_t2<0>
                    dead_cell_size.t./=<0>
                    dead_cell_size.t.=<0>
                    dead_cell_size.t.ta<0>
                    dead_cell_size.t.tb<0>
                    dead_cell_size.t.tb<1>
                    dead_cell_size.t.tb1<0>
                    dead_cell_size.t.tb1<1>
                    dead_cell_size.t.tc<0>
                    dead_cell_size.t.tc<1>
                    dead_cell_size.t.tc1<0>
                    dead_cell_size.t.tc1<1>
                    dead_cell_size.t.tc2<0>
                    dead_cell_size.t.tc2<1>
                    dead_cell_size.t.tc3<0>
                    dead_cell_size.t.tc3<1>
                    dead_cell_size.t.td<0>
                    dead_cell_size.t.td<1>
                    dead_cell_size.t.td1<0>
                    dead_cell_size.t.td1<1>
                    dead_cell_size.t2./=<0>
                    dead_cell_size.t2.=<0>
                    dead_cell_size.t2.a<0>
                    dead_cell_size.t2.a<1>
                    dead_cell_size.t2.t2a<0>
                    dead_cell_size.t2.t2b<0>
                    dead_cell_size.t2.t2b<1>
  imports         : public use dead_cell_size.t
                    public use dead_cell_size.t2
                    use wybe
  types           : t/public  is address { ta() @dead_cell_size:1:18 | tb(tb1:int) @dead_cell_size:1:23 | tc(tc1:int, tc2:int, tc3:int) @dead_cell_size:1:37 | td(td1:int) @dead_cell_size:1:69  }  @dead_cell_size:1:5, t2/public  is address { t2a() @dead_cell_size:2:19 | t2b(a:int) @dead_cell_size:2:25  }  @dead_cell_size:2:5
  resources       : 
  submodules      : dead_cell_size.t, dead_cell_size.t2
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(4,(dead_cell_size.bar<0>,fromList [NonAliasedParamCond 0 []])),(7,(dead_cell_size.diff_type<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm alloc(8:wybe.int, ?tmp$7#0:dead_cell_size.t)
    foreign lpvm mutate(~tmp$7#0:dead_cell_size.t, ?tmp$8#0:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 9:wybe.int)
    dead_cell_size.foo<0>(~tmp$8#0:dead_cell_size.t, ?tmp$0#0:dead_cell_size.t) #1 @dead_cell_size:60:10
    dead_cell_size.print_t<0>(~tmp$0#0:dead_cell_size.t, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #2 @dead_cell_size:60:2
    foreign lpvm alloc(8:wybe.int, ?tmp$10#0:dead_cell_size.t)
    foreign lpvm mutate(~tmp$10#0:dead_cell_size.t, ?tmp$11#0:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 9:wybe.int)
    dead_cell_size.bar<0>[410bae77d3](~tmp$11#0:dead_cell_size.t, ?tmp$2#0:dead_cell_size.t) #4 @dead_cell_size:61:10
    dead_cell_size.print_t<0>(~tmp$2#0:dead_cell_size.t, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #5 @dead_cell_size:61:2
    foreign lpvm alloc(8:wybe.int, ?tmp$13#0:dead_cell_size.t)
    foreign lpvm mutate(~tmp$13#0:dead_cell_size.t, ?tmp$14#0:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 9:wybe.int)
    dead_cell_size.diff_type<0>[410bae77d3](~tmp$14#0:dead_cell_size.t, ?tmp$4#0:dead_cell_size.t2) #7 @dead_cell_size:62:11
    dead_cell_size.print_t2<0>(~tmp$4#0:dead_cell_size.t2, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) #8 @dead_cell_size:62:2


bar > public (1 calls)
0: bar(x#0:dead_cell_size.t, ?x#1:dead_cell_size.t):
 AliasPairs: [(x#0,x#1)]
 InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm icmp_ne(x#0:dead_cell_size.t, 0:wybe.int, ?tmp$3#0:wybe.bool)
    case ~tmp$3#0:wybe.bool of
    0:
        foreign llvm move(~x#0:dead_cell_size.t, ?x#1:dead_cell_size.t)

    1:
        foreign llvm and(x#0:dead_cell_size.t, 7:wybe.int, ?tmp$4#0:wybe.int)
        foreign llvm icmp_eq(~tmp$4#0:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.bool)
        case ~tmp$5#0:wybe.bool of
        0:
            foreign llvm move(~x#0:dead_cell_size.t, ?x#1:dead_cell_size.t)

        1:
            foreign lpvm access(~x#0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a#0:wybe.int)
            foreign lpvm alloc(8:wybe.int, ?tmp$7#0:dead_cell_size.t)
            foreign lpvm mutate(~tmp$7#0:dead_cell_size.t, ?tmp$8#0:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~a#0:wybe.int)
            foreign llvm or(~tmp$8#0:dead_cell_size.t, 2:wybe.int, ?x#1:dead_cell_size.t)


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(x#0:dead_cell_size.t, 0:wybe.int, ?tmp$3#0:wybe.bool)
    case ~tmp$3#0:wybe.bool of
    0:
        foreign llvm move(~x#0:dead_cell_size.t, ?x#1:dead_cell_size.t)

    1:
        foreign llvm and(x#0:dead_cell_size.t, 7:wybe.int, ?tmp$4#0:wybe.int)
        foreign llvm icmp_eq(~tmp$4#0:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.bool)
        case ~tmp$5#0:wybe.bool of
        0:
            foreign llvm move(~x#0:dead_cell_size.t, ?x#1:dead_cell_size.t)

        1:
            foreign llvm or(~x#0:dead_cell_size.t, 2:wybe.int, ?x#1:dead_cell_size.t)




diff_type > public (1 calls)
0: diff_type(x#0:dead_cell_size.t, ?y#0:dead_cell_size.t2):
 AliasPairs: []
 InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm icmp_ne(x#0:dead_cell_size.t, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign lpvm alloc(8:wybe.int, ?tmp$10#0:dead_cell_size.t2)
        foreign lpvm mutate(~tmp$10#0:dead_cell_size.t2, ?y#0:dead_cell_size.t2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, -1:wybe.int)

    1:
        foreign llvm and(x#0:dead_cell_size.t, 7:wybe.int, ?tmp$6#0:wybe.int)
        foreign llvm icmp_eq(~tmp$6#0:wybe.int, 0:wybe.int, ?tmp$7#0:wybe.bool)
        case ~tmp$7#0:wybe.bool of
        0:
            foreign lpvm alloc(8:wybe.int, ?tmp$10#0:dead_cell_size.t2)
            foreign lpvm mutate(~tmp$10#0:dead_cell_size.t2, ?y#0:dead_cell_size.t2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, -1:wybe.int)

        1:
            foreign lpvm access(~x#0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a#0:wybe.int)
            foreign lpvm alloc(8:wybe.int, ?tmp$9#0:dead_cell_size.t2)
            foreign lpvm mutate(~tmp$9#0:dead_cell_size.t2, ?y#0:dead_cell_size.t2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~a#0:wybe.int)


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(x#0:dead_cell_size.t, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign lpvm alloc(8:wybe.int, ?tmp$10#0:dead_cell_size.t2)
        foreign lpvm mutate(~tmp$10#0:dead_cell_size.t2, ?y#0:dead_cell_size.t2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, -1:wybe.int)

    1:
        foreign llvm and(x#0:dead_cell_size.t, 7:wybe.int, ?tmp$6#0:wybe.int)
        foreign llvm icmp_eq(~tmp$6#0:wybe.int, 0:wybe.int, ?tmp$7#0:wybe.bool)
        case ~tmp$7#0:wybe.bool of
        0:
            foreign lpvm alloc(8:wybe.int, ?tmp$10#0:dead_cell_size.t2)
            foreign lpvm mutate(~tmp$10#0:dead_cell_size.t2, ?y#0:dead_cell_size.t2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, -1:wybe.int)

        1:
            foreign llvm move(~x#0:dead_cell_size.t, ?y#0:dead_cell_size.t2)




foo > public (1 calls)
0: foo(x#0:dead_cell_size.t, ?x#1:dead_cell_size.t):
 AliasPairs: [(x#0,x#1)]
 InterestingCallProperties: []
    foreign llvm icmp_ne(x#0:dead_cell_size.t, 0:wybe.int, ?tmp$3#0:wybe.bool)
    case ~tmp$3#0:wybe.bool of
    0:
        foreign llvm move(~x#0:dead_cell_size.t, ?x#1:dead_cell_size.t)

    1:
        foreign llvm and(x#0:dead_cell_size.t, 7:wybe.int, ?tmp$4#0:wybe.int)
        foreign llvm icmp_eq(~tmp$4#0:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.bool)
        case ~tmp$5#0:wybe.bool of
        0:
            foreign llvm move(~x#0:dead_cell_size.t, ?x#1:dead_cell_size.t)

        1:
            foreign lpvm access(~x#0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a#0:wybe.int)
            foreign lpvm alloc(24:wybe.int, ?tmp$9#0:dead_cell_size.t)
            foreign lpvm mutate(~tmp$9#0:dead_cell_size.t, ?tmp$10#0:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~a#0:wybe.int)
            foreign lpvm mutate(~tmp$10#0:dead_cell_size.t, ?tmp$11#0:dead_cell_size.t, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 2:wybe.int)
            foreign lpvm mutate(~tmp$11#0:dead_cell_size.t, ?tmp$12#0:dead_cell_size.t, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 3:wybe.int)
            foreign llvm or(~tmp$12#0:dead_cell_size.t, 1:wybe.int, ?x#1:dead_cell_size.t)




print_t > public (2 calls)
0: print_t(x#0:dead_cell_size.t, io#0:wybe.phantom, ?io#8:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    dead_cell_size.t.=<0>(0:dead_cell_size.t, x#0:dead_cell_size.t, ?tmp$4#0:wybe.bool) #1 @dead_cell_size:5:10
    case ~tmp$4#0:wybe.bool of
    0:
        foreign llvm icmp_ne(x#0:dead_cell_size.t, 0:wybe.int, ?tmp$6#0:wybe.bool)
        case ~tmp$6#0:wybe.bool of
        0:
            foreign c putchar('\n':wybe.char, ~#io#0:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn

        1:
            foreign llvm and(x#0:dead_cell_size.t, 7:wybe.int, ?tmp$7#0:wybe.int)
            foreign llvm icmp_eq(tmp$7#0:wybe.int, 0:wybe.int, ?tmp$8#0:wybe.bool)
            case ~tmp$8#0:wybe.bool of
            0:
                foreign llvm icmp_eq(tmp$7#0:wybe.int, 1:wybe.int, ?tmp$12#0:wybe.bool)
                case ~tmp$12#0:wybe.bool of
                0:
                    foreign llvm icmp_eq(~tmp$7#0:wybe.int, 2:wybe.int, ?tmp$16#0:wybe.bool)
                    case ~tmp$16#0:wybe.bool of
                    0:
                        foreign c putchar('\n':wybe.char, ~#io#0:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn

                    1:
                        foreign lpvm access(~x#0:dead_cell_size.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?a#2:wybe.int)
                        foreign c print_string("td(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
                        foreign c print_int(~a#2:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
                        foreign c print_string(")":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
                        foreign c putchar('\n':wybe.char, ~#io#3:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn


                1:
                    foreign lpvm access(x#0:dead_cell_size.t, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?a#1:wybe.int)
                    foreign lpvm access(x#0:dead_cell_size.t, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?b#0:wybe.int)
                    foreign lpvm access(~x#0:dead_cell_size.t, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?c#0:wybe.int)
                    foreign c print_string("tc(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
                    foreign c print_int(~a#1:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
                    foreign c print_string(",":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
                    foreign c print_int(~b#0:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
                    foreign c print_string(",":wybe.string, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @wybe:nn:nn
                    foreign c print_int(~c#0:wybe.int, ~#io#5:wybe.phantom, ?#io#6:wybe.phantom) @wybe:nn:nn
                    foreign c print_string(")":wybe.string, ~#io#6:wybe.phantom, ?#io#7:wybe.phantom) @wybe:nn:nn
                    foreign c putchar('\n':wybe.char, ~#io#7:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn


            1:
                foreign lpvm access(~x#0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a#0:wybe.int)
                foreign c print_string("tb(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
                foreign c print_int(~a#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
                foreign c print_string(")":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
                foreign c putchar('\n':wybe.char, ~#io#3:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn



    1:
        foreign c print_string("ta":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~#io#1:wybe.phantom, ?#io#8:wybe.phantom) @wybe:nn:nn



print_t2 > public (1 calls)
0: print_t2(x#0:dead_cell_size.t2, io#0:wybe.phantom, ?io#4:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    dead_cell_size.t2.=<0>(0:dead_cell_size.t2, x#0:dead_cell_size.t2, ?tmp$2#0:wybe.bool) #1 @dead_cell_size:28:10
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm icmp_ne(x#0:dead_cell_size.t2, 0:wybe.int, ?tmp$4#0:wybe.bool)
        case ~tmp$4#0:wybe.bool of
        0:
            foreign c putchar('\n':wybe.char, ~#io#0:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn

        1:
            foreign lpvm access(~x#0:dead_cell_size.t2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a#0:wybe.int)
            foreign c print_string("t2b(":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
            foreign c print_int(~a#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
            foreign c print_string(")":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
            foreign c putchar('\n':wybe.char, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn


    1:
        foreign c print_string("t2a":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~#io#1:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn


  LLVM code       :

; ModuleID = 'dead_cell_size'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external ccc  void @print_int(i64)    


@dead_cell_size.101 =    constant [2 x i8] c")\00"


@dead_cell_size.99 =    constant [4 x i8] c"td(\00"


@dead_cell_size.93 =    constant [2 x i8] c")\00"


@dead_cell_size.91 =    constant [2 x i8] c",\00"


@dead_cell_size.89 =    constant [2 x i8] c",\00"


@dead_cell_size.87 =    constant [4 x i8] c"tc(\00"


@dead_cell_size.73 =    constant [2 x i8] c")\00"


@dead_cell_size.71 =    constant [4 x i8] c"tb(\00"


@dead_cell_size.66 =    constant [3 x i8] c"ta\00"


@dead_cell_size.110 =    constant [2 x i8] c")\00"


@dead_cell_size.108 =    constant [5 x i8] c"t2b(\00"


@dead_cell_size.103 =    constant [4 x i8] c"t2a\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"dead_cell_size.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %1 = trunc i64 8 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 9, i64* %5 
  %"1$tmp$0#0" = tail call fastcc  i64  @"dead_cell_size.foo<0>"(i64  %3)  
  tail call fastcc  void  @"dead_cell_size.print_t<0>"(i64  %"1$tmp$0#0")  
  %6 = trunc i64 8 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 9, i64* %10 
  %"1$tmp$2#0" = tail call fastcc  i64  @"dead_cell_size.bar<0>[410bae77d3]"(i64  %8)  
  tail call fastcc  void  @"dead_cell_size.print_t<0>"(i64  %"1$tmp$2#0")  
  %11 = trunc i64 8 to i32  
  %12 = tail call ccc  i8*  @wybe_malloc(i32  %11)  
  %13 = ptrtoint i8* %12 to i64 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 9, i64* %15 
  %"1$tmp$4#0" = tail call fastcc  i64  @"dead_cell_size.diff_type<0>[410bae77d3]"(i64  %13)  
  tail call fastcc  void  @"dead_cell_size.print_t2<0>"(i64  %"1$tmp$4#0")  
  ret void 
}


define external fastcc  i64 @"dead_cell_size.bar<0>"(i64  %"x#0")    {
entry:
  %"1$tmp$3#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$3#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$4#0" = and i64 %"x#0", 7 
  %"2$tmp$5#0" = icmp eq i64 %"2$tmp$4#0", 0 
  br i1 %"2$tmp$5#0", label %if.then1, label %if.else1 
if.else:
  ret i64 %"x#0" 
if.then1:
  %16 = inttoptr i64 %"x#0" to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %19 = trunc i64 8 to i32  
  %20 = tail call ccc  i8*  @wybe_malloc(i32  %19)  
  %21 = ptrtoint i8* %20 to i64 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  store  i64 %18, i64* %23 
  %"4$x#1" = or i64 %21, 2 
  ret i64 %"4$x#1" 
if.else1:
  ret i64 %"x#0" 
}


define external fastcc  i64 @"dead_cell_size.bar<0>[410bae77d3]"(i64  %"x#0")    {
entry:
  %"1$tmp$3#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$3#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$4#0" = and i64 %"x#0", 7 
  %"2$tmp$5#0" = icmp eq i64 %"2$tmp$4#0", 0 
  br i1 %"2$tmp$5#0", label %if.then1, label %if.else1 
if.else:
  ret i64 %"x#0" 
if.then1:
  %"4$x#1" = or i64 %"x#0", 2 
  ret i64 %"4$x#1" 
if.else1:
  ret i64 %"x#0" 
}


define external fastcc  i64 @"dead_cell_size.diff_type<0>"(i64  %"x#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$6#0" = and i64 %"x#0", 7 
  %"2$tmp$7#0" = icmp eq i64 %"2$tmp$6#0", 0 
  br i1 %"2$tmp$7#0", label %if.then1, label %if.else1 
if.else:
  %37 = trunc i64 8 to i32  
  %38 = tail call ccc  i8*  @wybe_malloc(i32  %37)  
  %39 = ptrtoint i8* %38 to i64 
  %40 = inttoptr i64 %39 to i64* 
  %41 = getelementptr  i64, i64* %40, i64 0 
  store  i64 -1, i64* %41 
  ret i64 %39 
if.then1:
  %24 = inttoptr i64 %"x#0" to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = trunc i64 8 to i32  
  %28 = tail call ccc  i8*  @wybe_malloc(i32  %27)  
  %29 = ptrtoint i8* %28 to i64 
  %30 = inttoptr i64 %29 to i64* 
  %31 = getelementptr  i64, i64* %30, i64 0 
  store  i64 %26, i64* %31 
  ret i64 %29 
if.else1:
  %32 = trunc i64 8 to i32  
  %33 = tail call ccc  i8*  @wybe_malloc(i32  %32)  
  %34 = ptrtoint i8* %33 to i64 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  store  i64 -1, i64* %36 
  ret i64 %34 
}


define external fastcc  i64 @"dead_cell_size.diff_type<0>[410bae77d3]"(i64  %"x#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$6#0" = and i64 %"x#0", 7 
  %"2$tmp$7#0" = icmp eq i64 %"2$tmp$6#0", 0 
  br i1 %"2$tmp$7#0", label %if.then1, label %if.else1 
if.else:
  %47 = trunc i64 8 to i32  
  %48 = tail call ccc  i8*  @wybe_malloc(i32  %47)  
  %49 = ptrtoint i8* %48 to i64 
  %50 = inttoptr i64 %49 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  store  i64 -1, i64* %51 
  ret i64 %49 
if.then1:
  ret i64 %"x#0" 
if.else1:
  %42 = trunc i64 8 to i32  
  %43 = tail call ccc  i8*  @wybe_malloc(i32  %42)  
  %44 = ptrtoint i8* %43 to i64 
  %45 = inttoptr i64 %44 to i64* 
  %46 = getelementptr  i64, i64* %45, i64 0 
  store  i64 -1, i64* %46 
  ret i64 %44 
}


define external fastcc  i64 @"dead_cell_size.foo<0>"(i64  %"x#0")    {
entry:
  %"1$tmp$3#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$3#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$4#0" = and i64 %"x#0", 7 
  %"2$tmp$5#0" = icmp eq i64 %"2$tmp$4#0", 0 
  br i1 %"2$tmp$5#0", label %if.then1, label %if.else1 
if.else:
  ret i64 %"x#0" 
if.then1:
  %52 = inttoptr i64 %"x#0" to i64* 
  %53 = getelementptr  i64, i64* %52, i64 0 
  %54 = load  i64, i64* %53 
  %55 = trunc i64 24 to i32  
  %56 = tail call ccc  i8*  @wybe_malloc(i32  %55)  
  %57 = ptrtoint i8* %56 to i64 
  %58 = inttoptr i64 %57 to i64* 
  %59 = getelementptr  i64, i64* %58, i64 0 
  store  i64 %54, i64* %59 
  %60 = add   i64 %57, 8 
  %61 = inttoptr i64 %60 to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  store  i64 2, i64* %62 
  %63 = add   i64 %57, 16 
  %64 = inttoptr i64 %63 to i64* 
  %65 = getelementptr  i64, i64* %64, i64 0 
  store  i64 3, i64* %65 
  %"4$x#1" = or i64 %57, 1 
  ret i64 %"4$x#1" 
if.else1:
  ret i64 %"x#0" 
}


define external fastcc  void @"dead_cell_size.print_t<0>"(i64  %"x#0")    {
entry:
  %"1$tmp$4#0" = tail call fastcc  i1  @"dead_cell_size.t.=<0>"(i64  0, i64  %"x#0")  
  br i1 %"1$tmp$4#0", label %if.then, label %if.else 
if.then:
  %67 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @dead_cell_size.66, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %67)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  %"3$tmp$6#0" = icmp ne i64 %"x#0", 0 
  br i1 %"3$tmp$6#0", label %if.then1, label %if.else1 
if.then1:
  %"4$tmp$7#0" = and i64 %"x#0", 7 
  %"4$tmp$8#0" = icmp eq i64 %"4$tmp$7#0", 0 
  br i1 %"4$tmp$8#0", label %if.then2, label %if.else2 
if.else1:
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.then2:
  %68 = inttoptr i64 %"x#0" to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  %70 = load  i64, i64* %69 
  %72 = ptrtoint i8* getelementptr inbounds ([4 x i8], [4 x i8]* @dead_cell_size.71, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %72)  
  tail call ccc  void  @print_int(i64  %70)  
  %74 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @dead_cell_size.73, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %74)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else2:
  %"7$tmp$12#0" = icmp eq i64 %"4$tmp$7#0", 1 
  br i1 %"7$tmp$12#0", label %if.then3, label %if.else3 
if.then3:
  %75 = add   i64 %"x#0", -1 
  %76 = inttoptr i64 %75 to i64* 
  %77 = getelementptr  i64, i64* %76, i64 0 
  %78 = load  i64, i64* %77 
  %79 = add   i64 %"x#0", 7 
  %80 = inttoptr i64 %79 to i64* 
  %81 = getelementptr  i64, i64* %80, i64 0 
  %82 = load  i64, i64* %81 
  %83 = add   i64 %"x#0", 15 
  %84 = inttoptr i64 %83 to i64* 
  %85 = getelementptr  i64, i64* %84, i64 0 
  %86 = load  i64, i64* %85 
  %88 = ptrtoint i8* getelementptr inbounds ([4 x i8], [4 x i8]* @dead_cell_size.87, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %88)  
  tail call ccc  void  @print_int(i64  %78)  
  %90 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @dead_cell_size.89, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %90)  
  tail call ccc  void  @print_int(i64  %82)  
  %92 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @dead_cell_size.91, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %92)  
  tail call ccc  void  @print_int(i64  %86)  
  %94 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @dead_cell_size.93, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %94)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else3:
  %"9$tmp$16#0" = icmp eq i64 %"4$tmp$7#0", 2 
  br i1 %"9$tmp$16#0", label %if.then4, label %if.else4 
if.then4:
  %95 = add   i64 %"x#0", -2 
  %96 = inttoptr i64 %95 to i64* 
  %97 = getelementptr  i64, i64* %96, i64 0 
  %98 = load  i64, i64* %97 
  %100 = ptrtoint i8* getelementptr inbounds ([4 x i8], [4 x i8]* @dead_cell_size.99, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %100)  
  tail call ccc  void  @print_int(i64  %98)  
  %102 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @dead_cell_size.101, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %102)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else4:
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"dead_cell_size.print_t2<0>"(i64  %"x#0")    {
entry:
  %"1$tmp$2#0" = tail call fastcc  i1  @"dead_cell_size.t2.=<0>"(i64  0, i64  %"x#0")  
  br i1 %"1$tmp$2#0", label %if.then, label %if.else 
if.then:
  %104 = ptrtoint i8* getelementptr inbounds ([4 x i8], [4 x i8]* @dead_cell_size.103, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %104)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  %"3$tmp$4#0" = icmp ne i64 %"x#0", 0 
  br i1 %"3$tmp$4#0", label %if.then1, label %if.else1 
if.then1:
  %105 = inttoptr i64 %"x#0" to i64* 
  %106 = getelementptr  i64, i64* %105, i64 0 
  %107 = load  i64, i64* %106 
  %109 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @dead_cell_size.108, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %109)  
  tail call ccc  void  @print_int(i64  %107)  
  %111 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @dead_cell_size.110, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %111)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else1:
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module dead_cell_size.t
  public submods  : 
  public types    : 
  public resources: 
  public procs    : dead_cell_size.t./=<0>
                    dead_cell_size.t.=<0>
                    dead_cell_size.t.ta<0>
                    dead_cell_size.t.tb<0>
                    dead_cell_size.t.tb<1>
                    dead_cell_size.t.tb1<0>
                    dead_cell_size.t.tb1<1>
                    dead_cell_size.t.tc<0>
                    dead_cell_size.t.tc<1>
                    dead_cell_size.t.tc1<0>
                    dead_cell_size.t.tc1<1>
                    dead_cell_size.t.tc2<0>
                    dead_cell_size.t.tc2<1>
                    dead_cell_size.t.tc3<0>
                    dead_cell_size.t.tc3<1>
                    dead_cell_size.t.td<0>
                    dead_cell_size.t.td<1>
                    dead_cell_size.t.td1<0>
                    dead_cell_size.t.td1<1>
  imports         : use dead_cell_size
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:dead_cell_size.t, $right#0:dead_cell_size.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    dead_cell_size.t.=<0>(~$left#0:dead_cell_size.t, ~$right#0:dead_cell_size.t, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (1 calls)
0: =($left#0:dead_cell_size.t, $right#0:dead_cell_size.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($left#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp_eq(~$left#0:dead_cell_size.t, ~$right#0:dead_cell_size.t, ?$$#0:!wybe.bool)

    1:
        foreign llvm and($left#0:dead_cell_size.t, 7:wybe.int, ?tmp$15#0:wybe.int)
        foreign llvm icmp_eq(tmp$15#0:wybe.int, 0:wybe.int, ?tmp$16#0:wybe.bool)
        case ~tmp$16#0:wybe.bool of
        0:
            foreign llvm icmp_eq(tmp$15#0:wybe.int, 1:wybe.int, ?tmp$20#0:wybe.bool)
            case ~tmp$20#0:wybe.bool of
            0:
                foreign llvm icmp_eq(~tmp$15#0:wybe.int, 2:wybe.int, ?tmp$24#0:wybe.bool)
                case ~tmp$24#0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                1:
                    foreign lpvm access(~$left#0:dead_cell_size.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?$left$td1#0:wybe.int)
                    foreign llvm icmp_ne($right#0:dead_cell_size.t, 0:wybe.int, ?tmp$26#0:wybe.bool)
                    case ~tmp$26#0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                    1:
                        foreign llvm and($right#0:dead_cell_size.t, 7:wybe.int, ?tmp$27#0:wybe.int)
                        foreign llvm icmp_eq(~tmp$27#0:wybe.int, 2:wybe.int, ?tmp$28#0:wybe.bool)
                        case ~tmp$28#0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                        1:
                            foreign lpvm access(~$right#0:dead_cell_size.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?$right$td1#0:wybe.int)
                            foreign llvm icmp_eq(~$left$td1#0:wybe.int, ~$right$td1#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn




            1:
                foreign lpvm access($left#0:dead_cell_size.t, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?$left$tc1#0:wybe.int)
                foreign lpvm access($left#0:dead_cell_size.t, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?$left$tc2#0:wybe.int)
                foreign lpvm access(~$left#0:dead_cell_size.t, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?$left$tc3#0:wybe.int)
                foreign llvm icmp_ne($right#0:dead_cell_size.t, 0:wybe.int, ?tmp$22#0:wybe.bool)
                case ~tmp$22#0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                1:
                    foreign llvm and($right#0:dead_cell_size.t, 7:wybe.int, ?tmp$23#0:wybe.int)
                    foreign llvm icmp_eq(~tmp$23#0:wybe.int, 1:wybe.int, ?tmp$24#0:wybe.bool)
                    case ~tmp$24#0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                    1:
                        foreign lpvm access($right#0:dead_cell_size.t, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?$right$tc1#0:wybe.int)
                        foreign lpvm access($right#0:dead_cell_size.t, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?$right$tc2#0:wybe.int)
                        foreign lpvm access(~$right#0:dead_cell_size.t, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?$right$tc3#0:wybe.int)
                        foreign llvm icmp_eq(~$left$tc1#0:wybe.int, ~$right$tc1#0:wybe.int, ?tmp$5#0:wybe.bool) @wybe:nn:nn
                        case ~tmp$5#0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                        1:
                            foreign llvm icmp_eq(~$left$tc2#0:wybe.int, ~$right$tc2#0:wybe.int, ?tmp$6#0:wybe.bool) @wybe:nn:nn
                            case ~tmp$6#0:wybe.bool of
                            0:
                                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                            1:
                                foreign llvm icmp_eq(~$left$tc3#0:wybe.int, ~$right$tc3#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn






        1:
            foreign lpvm access(~$left#0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?$left$tb1#0:wybe.int)
            foreign llvm icmp_ne($right#0:dead_cell_size.t, 0:wybe.int, ?tmp$18#0:wybe.bool)
            case ~tmp$18#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign llvm and($right#0:dead_cell_size.t, 7:wybe.int, ?tmp$19#0:wybe.int)
                foreign llvm icmp_eq(~tmp$19#0:wybe.int, 0:wybe.int, ?tmp$20#0:wybe.bool)
                case ~tmp$20#0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                1:
                    foreign lpvm access(~$right#0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?$right$tb1#0:wybe.int)
                    foreign llvm icmp_eq(~$left$tb1#0:wybe.int, ~$right$tb1#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn






ta > public {inline} (0 calls)
0: ta(?$#0:dead_cell_size.t):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:dead_cell_size.t, ?$#0:dead_cell_size.t)


tb > public {inline} (0 calls)
0: tb(tb1#0:wybe.int, ?$#0:dead_cell_size.t):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?$rec#0:!dead_cell_size.t)
    foreign lpvm mutate(~%$rec#0:dead_cell_size.t, ?%$#0:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~tb1#0:wybe.int)
tb > public {inline} (14 calls)
1: tb(?tb1#0:wybe.int, $#0:dead_cell_size.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:dead_cell_size.t, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?tb1#0:wybe.int)

    1:
        foreign llvm and($#0:dead_cell_size.t, 7:wybe.int, ?tmp$2#0:!wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:!wybe.int, 0:wybe.int, ?tmp$1#0:!wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?tb1#0:wybe.int)

        1:
            foreign lpvm access(~$#0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?tb1#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




tb1 > public {inline} (0 calls)
0: tb1($rec#0:dead_cell_size.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:dead_cell_size.t, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

    1:
        foreign llvm and($rec#0:dead_cell_size.t, 7:wybe.int, ?tmp$2#0:!wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:!wybe.int, 0:wybe.int, ?tmp$1#0:!wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

        1:
            foreign lpvm access(~$rec#0:dead_cell_size.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?$#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


tb1 > public {inline} (0 calls)
1: tb1($rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:dead_cell_size.t, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t)

    1:
        foreign llvm and($rec#0:dead_cell_size.t, 7:wybe.int, ?tmp$2#0:!wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:!wybe.int, 0:wybe.int, ?tmp$1#0:!wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(~$rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t)

        1:
            foreign lpvm {noalias} mutate(~%$rec#0:dead_cell_size.t, ?%$rec#1:dead_cell_size.t, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




tc > public {inline} (0 calls)
0: tc(tc1#0:wybe.int, tc2#0:wybe.int, tc3#0:wybe.int, ?$#0:dead_cell_size.t):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?$rec#0:!dead_cell_size.t)
    foreign lpvm mutate(~%$rec#0:dead_cell_size.t, ?%$rec#1:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tc1#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:dead_cell_size.t, ?%$rec#2:dead_cell_size.t, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tc2#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:dead_cell_size.t, ?%$rec#3:dead_cell_size.t, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tc3#0:wybe.int)
    foreign llvm or(~$rec#3, 1:wybe.int, ?$#0:dead_cell_size.t)
tc > public {inline} (11 calls)
1: tc(?tc1#0:wybe.int, ?tc2#0:wybe.int, ?tc3#0:wybe.int, $#0:dead_cell_size.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:dead_cell_size.t, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?tc1#0:wybe.int)
        foreign llvm move(undef:wybe.int, ?tc2#0:wybe.int)
        foreign llvm move(undef:wybe.int, ?tc3#0:wybe.int)

    1:
        foreign llvm and($#0:dead_cell_size.t, 7:wybe.int, ?tmp$2#0:!wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:!wybe.int, 1:wybe.int, ?tmp$1#0:!wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?tc1#0:wybe.int)
            foreign llvm move(undef:wybe.int, ?tc2#0:wybe.int)
            foreign llvm move(undef:wybe.int, ?tc3#0:wybe.int)

        1:
            foreign lpvm access($#0:dead_cell_size.t, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?tc1#0:wybe.int)
            foreign lpvm access($#0:dead_cell_size.t, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?tc2#0:wybe.int)
            foreign lpvm access(~$#0:dead_cell_size.t, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?tc3#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




tc1 > public {inline} (0 calls)
0: tc1($rec#0:dead_cell_size.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:dead_cell_size.t, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

    1:
        foreign llvm and($rec#0:dead_cell_size.t, 7:wybe.int, ?tmp$2#0:!wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:!wybe.int, 1:wybe.int, ?tmp$1#0:!wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

        1:
            foreign lpvm access(~$rec#0:dead_cell_size.t, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?$#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


tc1 > public {inline} (0 calls)
1: tc1($rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:dead_cell_size.t, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t)

    1:
        foreign llvm and($rec#0:dead_cell_size.t, 7:wybe.int, ?tmp$2#0:!wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:!wybe.int, 1:wybe.int, ?tmp$1#0:!wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(~$rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t)

        1:
            foreign lpvm {noalias} mutate(~%$rec#0:dead_cell_size.t, ?%$rec#1:dead_cell_size.t, -1:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~$field#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




tc2 > public {inline} (0 calls)
0: tc2($rec#0:dead_cell_size.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:dead_cell_size.t, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

    1:
        foreign llvm and($rec#0:dead_cell_size.t, 7:wybe.int, ?tmp$2#0:!wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:!wybe.int, 1:wybe.int, ?tmp$1#0:!wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

        1:
            foreign lpvm access(~$rec#0:dead_cell_size.t, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?$#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


tc2 > public {inline} (0 calls)
1: tc2($rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:dead_cell_size.t, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t)

    1:
        foreign llvm and($rec#0:dead_cell_size.t, 7:wybe.int, ?tmp$2#0:!wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:!wybe.int, 1:wybe.int, ?tmp$1#0:!wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(~$rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t)

        1:
            foreign lpvm {noalias} mutate(~%$rec#0:dead_cell_size.t, ?%$rec#1:dead_cell_size.t, 7:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~$field#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




tc3 > public {inline} (0 calls)
0: tc3($rec#0:dead_cell_size.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:dead_cell_size.t, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

    1:
        foreign llvm and($rec#0:dead_cell_size.t, 7:wybe.int, ?tmp$2#0:!wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:!wybe.int, 1:wybe.int, ?tmp$1#0:!wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

        1:
            foreign lpvm access(~$rec#0:dead_cell_size.t, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?$#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


tc3 > public {inline} (0 calls)
1: tc3($rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:dead_cell_size.t, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t)

    1:
        foreign llvm and($rec#0:dead_cell_size.t, 7:wybe.int, ?tmp$2#0:!wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:!wybe.int, 1:wybe.int, ?tmp$1#0:!wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(~$rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t)

        1:
            foreign lpvm {noalias} mutate(~%$rec#0:dead_cell_size.t, ?%$rec#1:dead_cell_size.t, 15:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~$field#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




td > public {inline} (0 calls)
0: td(td1#0:wybe.int, ?$#0:dead_cell_size.t):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?$rec#0:!dead_cell_size.t)
    foreign lpvm mutate(~%$rec#0:dead_cell_size.t, ?%$rec#1:dead_cell_size.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~td1#0:wybe.int)
    foreign llvm or(~$rec#1, 2:wybe.int, ?$#0:dead_cell_size.t)
td > public {inline} (5 calls)
1: td(?td1#0:wybe.int, $#0:dead_cell_size.t, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:dead_cell_size.t, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?td1#0:wybe.int)

    1:
        foreign llvm and($#0:dead_cell_size.t, 7:wybe.int, ?tmp$2#0:!wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:!wybe.int, 2:wybe.int, ?tmp$1#0:!wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?td1#0:wybe.int)

        1:
            foreign lpvm access(~$#0:dead_cell_size.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?td1#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




td1 > public {inline} (0 calls)
0: td1($rec#0:dead_cell_size.t, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:dead_cell_size.t, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

    1:
        foreign llvm and($rec#0:dead_cell_size.t, 7:wybe.int, ?tmp$2#0:!wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:!wybe.int, 2:wybe.int, ?tmp$1#0:!wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

        1:
            foreign lpvm access(~$rec#0:dead_cell_size.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?$#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


td1 > public {inline} (0 calls)
1: td1($rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:dead_cell_size.t, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t)

    1:
        foreign llvm and($rec#0:dead_cell_size.t, 7:wybe.int, ?tmp$2#0:!wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:!wybe.int, 2:wybe.int, ?tmp$1#0:!wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(~$rec#0:dead_cell_size.t, ?$rec#1:dead_cell_size.t)

        1:
            foreign lpvm {noalias} mutate(~%$rec#0:dead_cell_size.t, ?%$rec#1:dead_cell_size.t, -2:wybe.int, 0:wybe.int, 8:wybe.int, 2:wybe.int, ~$field#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



  LLVM code       :

; ModuleID = 'dead_cell_size.t'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"dead_cell_size.t./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i1  @"dead_cell_size.t.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  %"1$$$#0" = xor i1 %"1$tmp$0#0", 1 
  ret i1 %"1$$$#0" 
}


define external fastcc  i1 @"dead_cell_size.t.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$15#0" = and i64 %"$left#0", 7 
  %"2$tmp$16#0" = icmp eq i64 %"2$tmp$15#0", 0 
  br i1 %"2$tmp$16#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"3$$$#0" 
if.then1:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %"4$tmp$18#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"4$tmp$18#0", label %if.then2, label %if.else2 
if.else1:
  %"5$tmp$20#0" = icmp eq i64 %"2$tmp$15#0", 1 
  br i1 %"5$tmp$20#0", label %if.then4, label %if.else4 
if.then2:
  %"6$tmp$19#0" = and i64 %"$right#0", 7 
  %"6$tmp$20#0" = icmp eq i64 %"6$tmp$19#0", 0 
  br i1 %"6$tmp$20#0", label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %4 = inttoptr i64 %"$right#0" to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %"8$$$#0" = icmp eq i64 %3, %6 
  ret i1 %"8$$$#0" 
if.else3:
  ret i1 0 
if.then4:
  %7 = add   i64 %"$left#0", -1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$left#0", 7 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %15 = add   i64 %"$left#0", 15 
  %16 = inttoptr i64 %15 to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %"10$tmp$22#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"10$tmp$22#0", label %if.then5, label %if.else5 
if.else4:
  %"11$tmp$24#0" = icmp eq i64 %"2$tmp$15#0", 2 
  br i1 %"11$tmp$24#0", label %if.then9, label %if.else9 
if.then5:
  %"12$tmp$23#0" = and i64 %"$right#0", 7 
  %"12$tmp$24#0" = icmp eq i64 %"12$tmp$23#0", 1 
  br i1 %"12$tmp$24#0", label %if.then6, label %if.else6 
if.else5:
  ret i1 0 
if.then6:
  %19 = add   i64 %"$right#0", -1 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %23 = add   i64 %"$right#0", 7 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = add   i64 %"$right#0", 15 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %"14$tmp$5#0" = icmp eq i64 %10, %22 
  br i1 %"14$tmp$5#0", label %if.then7, label %if.else7 
if.else6:
  ret i1 0 
if.then7:
  %"16$tmp$6#0" = icmp eq i64 %14, %26 
  br i1 %"16$tmp$6#0", label %if.then8, label %if.else8 
if.else7:
  ret i1 0 
if.then8:
  %"18$$$#0" = icmp eq i64 %18, %30 
  ret i1 %"18$$$#0" 
if.else8:
  ret i1 0 
if.then9:
  %31 = add   i64 %"$left#0", -2 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  %"20$tmp$26#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"20$tmp$26#0", label %if.then10, label %if.else10 
if.else9:
  ret i1 0 
if.then10:
  %"22$tmp$27#0" = and i64 %"$right#0", 7 
  %"22$tmp$28#0" = icmp eq i64 %"22$tmp$27#0", 2 
  br i1 %"22$tmp$28#0", label %if.then11, label %if.else11 
if.else10:
  ret i1 0 
if.then11:
  %35 = add   i64 %"$right#0", -2 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %"24$$$#0" = icmp eq i64 %34, %38 
  ret i1 %"24$$$#0" 
if.else11:
  ret i1 0 
}


define external fastcc  i64 @"dead_cell_size.t.ta<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i64 @"dead_cell_size.t.tb<0>"(i64  %"tb1#0")    {
entry:
  %39 = trunc i64 8 to i32  
  %40 = tail call ccc  i8*  @wybe_malloc(i32  %39)  
  %41 = ptrtoint i8* %40 to i64 
  %42 = inttoptr i64 %41 to i64* 
  %43 = getelementptr  i64, i64* %42, i64 0 
  store  i64 %"tb1#0", i64* %43 
  ret i64 %41 
}


define external fastcc  {i64, i1} @"dead_cell_size.t.tb<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$#0", 7 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 0 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %51 = insertvalue {i64, i1} undef, i64 undef, 0 
  %52 = insertvalue {i64, i1} %51, i1 0, 1 
  ret {i64, i1} %52 
if.then1:
  %44 = inttoptr i64 %"$#0" to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  %46 = load  i64, i64* %45 
  %47 = insertvalue {i64, i1} undef, i64 %46, 0 
  %48 = insertvalue {i64, i1} %47, i1 1, 1 
  ret {i64, i1} %48 
if.else1:
  %49 = insertvalue {i64, i1} undef, i64 undef, 0 
  %50 = insertvalue {i64, i1} %49, i1 0, 1 
  ret {i64, i1} %50 
}


define external fastcc  {i64, i1} @"dead_cell_size.t.tb1<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 7 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 0 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %60 = insertvalue {i64, i1} undef, i64 undef, 0 
  %61 = insertvalue {i64, i1} %60, i1 0, 1 
  ret {i64, i1} %61 
if.then1:
  %53 = inttoptr i64 %"$rec#0" to i64* 
  %54 = getelementptr  i64, i64* %53, i64 0 
  %55 = load  i64, i64* %54 
  %56 = insertvalue {i64, i1} undef, i64 %55, 0 
  %57 = insertvalue {i64, i1} %56, i1 1, 1 
  ret {i64, i1} %57 
if.else1:
  %58 = insertvalue {i64, i1} undef, i64 undef, 0 
  %59 = insertvalue {i64, i1} %58, i1 0, 1 
  ret {i64, i1} %59 
}


define external fastcc  {i64, i1} @"dead_cell_size.t.tb1<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 7 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 0 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %74 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %75 = insertvalue {i64, i1} %74, i1 0, 1 
  ret {i64, i1} %75 
if.then1:
  %62 = trunc i64 8 to i32  
  %63 = tail call ccc  i8*  @wybe_malloc(i32  %62)  
  %64 = ptrtoint i8* %63 to i64 
  %65 = inttoptr i64 %64 to i8* 
  %66 = inttoptr i64 %"$rec#0" to i8* 
  %67 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %65, i8*  %66, i32  %67, i32  8, i1  0)  
  %68 = inttoptr i64 %64 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  store  i64 %"$field#0", i64* %69 
  %70 = insertvalue {i64, i1} undef, i64 %64, 0 
  %71 = insertvalue {i64, i1} %70, i1 1, 1 
  ret {i64, i1} %71 
if.else1:
  %72 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %73 = insertvalue {i64, i1} %72, i1 0, 1 
  ret {i64, i1} %73 
}


define external fastcc  i64 @"dead_cell_size.t.tc<0>"(i64  %"tc1#0", i64  %"tc2#0", i64  %"tc3#0")    {
entry:
  %76 = trunc i64 24 to i32  
  %77 = tail call ccc  i8*  @wybe_malloc(i32  %76)  
  %78 = ptrtoint i8* %77 to i64 
  %79 = inttoptr i64 %78 to i64* 
  %80 = getelementptr  i64, i64* %79, i64 0 
  store  i64 %"tc1#0", i64* %80 
  %81 = add   i64 %78, 8 
  %82 = inttoptr i64 %81 to i64* 
  %83 = getelementptr  i64, i64* %82, i64 0 
  store  i64 %"tc2#0", i64* %83 
  %84 = add   i64 %78, 16 
  %85 = inttoptr i64 %84 to i64* 
  %86 = getelementptr  i64, i64* %85, i64 0 
  store  i64 %"tc3#0", i64* %86 
  %"1$$#0" = or i64 %78, 1 
  ret i64 %"1$$#0" 
}


define external fastcc  {i64, i64, i64, i1} @"dead_cell_size.t.tc<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$#0", 7 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 1 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %107 = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0 
  %108 = insertvalue {i64, i64, i64, i1} %107, i64 undef, 1 
  %109 = insertvalue {i64, i64, i64, i1} %108, i64 undef, 2 
  %110 = insertvalue {i64, i64, i64, i1} %109, i1 0, 3 
  ret {i64, i64, i64, i1} %110 
if.then1:
  %87 = add   i64 %"$#0", -1 
  %88 = inttoptr i64 %87 to i64* 
  %89 = getelementptr  i64, i64* %88, i64 0 
  %90 = load  i64, i64* %89 
  %91 = add   i64 %"$#0", 7 
  %92 = inttoptr i64 %91 to i64* 
  %93 = getelementptr  i64, i64* %92, i64 0 
  %94 = load  i64, i64* %93 
  %95 = add   i64 %"$#0", 15 
  %96 = inttoptr i64 %95 to i64* 
  %97 = getelementptr  i64, i64* %96, i64 0 
  %98 = load  i64, i64* %97 
  %99 = insertvalue {i64, i64, i64, i1} undef, i64 %90, 0 
  %100 = insertvalue {i64, i64, i64, i1} %99, i64 %94, 1 
  %101 = insertvalue {i64, i64, i64, i1} %100, i64 %98, 2 
  %102 = insertvalue {i64, i64, i64, i1} %101, i1 1, 3 
  ret {i64, i64, i64, i1} %102 
if.else1:
  %103 = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0 
  %104 = insertvalue {i64, i64, i64, i1} %103, i64 undef, 1 
  %105 = insertvalue {i64, i64, i64, i1} %104, i64 undef, 2 
  %106 = insertvalue {i64, i64, i64, i1} %105, i1 0, 3 
  ret {i64, i64, i64, i1} %106 
}


define external fastcc  {i64, i1} @"dead_cell_size.t.tc1<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 7 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 1 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %119 = insertvalue {i64, i1} undef, i64 undef, 0 
  %120 = insertvalue {i64, i1} %119, i1 0, 1 
  ret {i64, i1} %120 
if.then1:
  %111 = add   i64 %"$rec#0", -1 
  %112 = inttoptr i64 %111 to i64* 
  %113 = getelementptr  i64, i64* %112, i64 0 
  %114 = load  i64, i64* %113 
  %115 = insertvalue {i64, i1} undef, i64 %114, 0 
  %116 = insertvalue {i64, i1} %115, i1 1, 1 
  ret {i64, i1} %116 
if.else1:
  %117 = insertvalue {i64, i1} undef, i64 undef, 0 
  %118 = insertvalue {i64, i1} %117, i1 0, 1 
  ret {i64, i1} %118 
}


define external fastcc  {i64, i1} @"dead_cell_size.t.tc1<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 7 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 1 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %136 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %137 = insertvalue {i64, i1} %136, i1 0, 1 
  ret {i64, i1} %137 
if.then1:
  %121 = trunc i64 24 to i32  
  %122 = tail call ccc  i8*  @wybe_malloc(i32  %121)  
  %123 = ptrtoint i8* %122 to i64 
  %124 = add   i64 %123, 1 
  %125 = sub   i64 %"$rec#0", 1 
  %126 = inttoptr i64 %123 to i8* 
  %127 = inttoptr i64 %125 to i8* 
  %128 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %126, i8*  %127, i32  %128, i32  8, i1  0)  
  %129 = add   i64 %124, -1 
  %130 = inttoptr i64 %129 to i64* 
  %131 = getelementptr  i64, i64* %130, i64 0 
  store  i64 %"$field#0", i64* %131 
  %132 = insertvalue {i64, i1} undef, i64 %124, 0 
  %133 = insertvalue {i64, i1} %132, i1 1, 1 
  ret {i64, i1} %133 
if.else1:
  %134 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %135 = insertvalue {i64, i1} %134, i1 0, 1 
  ret {i64, i1} %135 
}


define external fastcc  {i64, i1} @"dead_cell_size.t.tc2<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 7 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 1 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %146 = insertvalue {i64, i1} undef, i64 undef, 0 
  %147 = insertvalue {i64, i1} %146, i1 0, 1 
  ret {i64, i1} %147 
if.then1:
  %138 = add   i64 %"$rec#0", 7 
  %139 = inttoptr i64 %138 to i64* 
  %140 = getelementptr  i64, i64* %139, i64 0 
  %141 = load  i64, i64* %140 
  %142 = insertvalue {i64, i1} undef, i64 %141, 0 
  %143 = insertvalue {i64, i1} %142, i1 1, 1 
  ret {i64, i1} %143 
if.else1:
  %144 = insertvalue {i64, i1} undef, i64 undef, 0 
  %145 = insertvalue {i64, i1} %144, i1 0, 1 
  ret {i64, i1} %145 
}


define external fastcc  {i64, i1} @"dead_cell_size.t.tc2<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 7 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 1 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %163 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %164 = insertvalue {i64, i1} %163, i1 0, 1 
  ret {i64, i1} %164 
if.then1:
  %148 = trunc i64 24 to i32  
  %149 = tail call ccc  i8*  @wybe_malloc(i32  %148)  
  %150 = ptrtoint i8* %149 to i64 
  %151 = add   i64 %150, 1 
  %152 = sub   i64 %"$rec#0", 1 
  %153 = inttoptr i64 %150 to i8* 
  %154 = inttoptr i64 %152 to i8* 
  %155 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %153, i8*  %154, i32  %155, i32  8, i1  0)  
  %156 = add   i64 %151, 7 
  %157 = inttoptr i64 %156 to i64* 
  %158 = getelementptr  i64, i64* %157, i64 0 
  store  i64 %"$field#0", i64* %158 
  %159 = insertvalue {i64, i1} undef, i64 %151, 0 
  %160 = insertvalue {i64, i1} %159, i1 1, 1 
  ret {i64, i1} %160 
if.else1:
  %161 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %162 = insertvalue {i64, i1} %161, i1 0, 1 
  ret {i64, i1} %162 
}


define external fastcc  {i64, i1} @"dead_cell_size.t.tc3<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 7 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 1 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %173 = insertvalue {i64, i1} undef, i64 undef, 0 
  %174 = insertvalue {i64, i1} %173, i1 0, 1 
  ret {i64, i1} %174 
if.then1:
  %165 = add   i64 %"$rec#0", 15 
  %166 = inttoptr i64 %165 to i64* 
  %167 = getelementptr  i64, i64* %166, i64 0 
  %168 = load  i64, i64* %167 
  %169 = insertvalue {i64, i1} undef, i64 %168, 0 
  %170 = insertvalue {i64, i1} %169, i1 1, 1 
  ret {i64, i1} %170 
if.else1:
  %171 = insertvalue {i64, i1} undef, i64 undef, 0 
  %172 = insertvalue {i64, i1} %171, i1 0, 1 
  ret {i64, i1} %172 
}


define external fastcc  {i64, i1} @"dead_cell_size.t.tc3<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 7 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 1 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %190 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %191 = insertvalue {i64, i1} %190, i1 0, 1 
  ret {i64, i1} %191 
if.then1:
  %175 = trunc i64 24 to i32  
  %176 = tail call ccc  i8*  @wybe_malloc(i32  %175)  
  %177 = ptrtoint i8* %176 to i64 
  %178 = add   i64 %177, 1 
  %179 = sub   i64 %"$rec#0", 1 
  %180 = inttoptr i64 %177 to i8* 
  %181 = inttoptr i64 %179 to i8* 
  %182 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %180, i8*  %181, i32  %182, i32  8, i1  0)  
  %183 = add   i64 %178, 15 
  %184 = inttoptr i64 %183 to i64* 
  %185 = getelementptr  i64, i64* %184, i64 0 
  store  i64 %"$field#0", i64* %185 
  %186 = insertvalue {i64, i1} undef, i64 %178, 0 
  %187 = insertvalue {i64, i1} %186, i1 1, 1 
  ret {i64, i1} %187 
if.else1:
  %188 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %189 = insertvalue {i64, i1} %188, i1 0, 1 
  ret {i64, i1} %189 
}


define external fastcc  i64 @"dead_cell_size.t.td<0>"(i64  %"td1#0")    {
entry:
  %192 = trunc i64 8 to i32  
  %193 = tail call ccc  i8*  @wybe_malloc(i32  %192)  
  %194 = ptrtoint i8* %193 to i64 
  %195 = inttoptr i64 %194 to i64* 
  %196 = getelementptr  i64, i64* %195, i64 0 
  store  i64 %"td1#0", i64* %196 
  %"1$$#0" = or i64 %194, 2 
  ret i64 %"1$$#0" 
}


define external fastcc  {i64, i1} @"dead_cell_size.t.td<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$#0", 7 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 2 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %205 = insertvalue {i64, i1} undef, i64 undef, 0 
  %206 = insertvalue {i64, i1} %205, i1 0, 1 
  ret {i64, i1} %206 
if.then1:
  %197 = add   i64 %"$#0", -2 
  %198 = inttoptr i64 %197 to i64* 
  %199 = getelementptr  i64, i64* %198, i64 0 
  %200 = load  i64, i64* %199 
  %201 = insertvalue {i64, i1} undef, i64 %200, 0 
  %202 = insertvalue {i64, i1} %201, i1 1, 1 
  ret {i64, i1} %202 
if.else1:
  %203 = insertvalue {i64, i1} undef, i64 undef, 0 
  %204 = insertvalue {i64, i1} %203, i1 0, 1 
  ret {i64, i1} %204 
}


define external fastcc  {i64, i1} @"dead_cell_size.t.td1<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 7 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 2 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %215 = insertvalue {i64, i1} undef, i64 undef, 0 
  %216 = insertvalue {i64, i1} %215, i1 0, 1 
  ret {i64, i1} %216 
if.then1:
  %207 = add   i64 %"$rec#0", -2 
  %208 = inttoptr i64 %207 to i64* 
  %209 = getelementptr  i64, i64* %208, i64 0 
  %210 = load  i64, i64* %209 
  %211 = insertvalue {i64, i1} undef, i64 %210, 0 
  %212 = insertvalue {i64, i1} %211, i1 1, 1 
  ret {i64, i1} %212 
if.else1:
  %213 = insertvalue {i64, i1} undef, i64 undef, 0 
  %214 = insertvalue {i64, i1} %213, i1 0, 1 
  ret {i64, i1} %214 
}


define external fastcc  {i64, i1} @"dead_cell_size.t.td1<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 7 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 2 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %232 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %233 = insertvalue {i64, i1} %232, i1 0, 1 
  ret {i64, i1} %233 
if.then1:
  %217 = trunc i64 8 to i32  
  %218 = tail call ccc  i8*  @wybe_malloc(i32  %217)  
  %219 = ptrtoint i8* %218 to i64 
  %220 = add   i64 %219, 2 
  %221 = sub   i64 %"$rec#0", 2 
  %222 = inttoptr i64 %219 to i8* 
  %223 = inttoptr i64 %221 to i8* 
  %224 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %222, i8*  %223, i32  %224, i32  8, i1  0)  
  %225 = add   i64 %220, -2 
  %226 = inttoptr i64 %225 to i64* 
  %227 = getelementptr  i64, i64* %226, i64 0 
  store  i64 %"$field#0", i64* %227 
  %228 = insertvalue {i64, i1} undef, i64 %220, 0 
  %229 = insertvalue {i64, i1} %228, i1 1, 1 
  ret {i64, i1} %229 
if.else1:
  %230 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %231 = insertvalue {i64, i1} %230, i1 0, 1 
  ret {i64, i1} %231 
}
--------------------------------------------------
 Module dead_cell_size.t2
  public submods  : 
  public types    : 
  public resources: 
  public procs    : dead_cell_size.t2./=<0>
                    dead_cell_size.t2.=<0>
                    dead_cell_size.t2.a<0>
                    dead_cell_size.t2.a<1>
                    dead_cell_size.t2.t2a<0>
                    dead_cell_size.t2.t2b<0>
                    dead_cell_size.t2.t2b<1>
  imports         : use dead_cell_size
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:dead_cell_size.t2, $right#0:dead_cell_size.t2, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    dead_cell_size.t2.=<0>(~$left#0:dead_cell_size.t2, ~$right#0:dead_cell_size.t2, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (1 calls)
0: =($left#0:dead_cell_size.t2, $right#0:dead_cell_size.t2, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($left#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp_eq(~$left#0:dead_cell_size.t2, ~$right#0:dead_cell_size.t2, ?$$#0:!wybe.bool)

    1:
        foreign lpvm access(~$left#0:dead_cell_size.t2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?$left$a#0:wybe.int)
        foreign llvm icmp_ne($right#0:dead_cell_size.t2, 0:wybe.int, ?tmp$8#0:wybe.bool)
        case ~tmp$8#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access(~$right#0:dead_cell_size.t2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?$right$a#0:wybe.int)
            foreign llvm icmp_eq(~$left$a#0:wybe.int, ~$right$a#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn




a > public {inline} (0 calls)
0: a($rec#0:dead_cell_size.t2, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:dead_cell_size.t2, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

    1:
        foreign lpvm access(~$rec#0:dead_cell_size.t2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

a > public {inline} (0 calls)
1: a($rec#0:dead_cell_size.t2, ?$rec#1:dead_cell_size.t2, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:dead_cell_size.t2, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:dead_cell_size.t2, ?$rec#1:dead_cell_size.t2)

    1:
        foreign lpvm {noalias} mutate(~%$rec#0:dead_cell_size.t2, ?%$rec#1:dead_cell_size.t2, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



t2a > public {inline} (0 calls)
0: t2a(?$#0:dead_cell_size.t2):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:dead_cell_size.t2, ?$#0:dead_cell_size.t2)


t2b > public {inline} (0 calls)
0: t2b(a#0:wybe.int, ?$#0:dead_cell_size.t2):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?$rec#0:!dead_cell_size.t2)
    foreign lpvm mutate(~%$rec#0:dead_cell_size.t2, ?%$#0:dead_cell_size.t2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~a#0:wybe.int)
t2b > public {inline} (8 calls)
1: t2b(?a#0:wybe.int, $#0:dead_cell_size.t2, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:dead_cell_size.t2, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?a#0:wybe.int)

    1:
        foreign lpvm access(~$#0:dead_cell_size.t2, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'dead_cell_size.t2'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"dead_cell_size.t2./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i1  @"dead_cell_size.t2.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  %"1$$$#0" = xor i1 %"1$tmp$0#0", 1 
  ret i1 %"1$$$#0" 
}


define external fastcc  i1 @"dead_cell_size.t2.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %"2$tmp$8#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"2$tmp$8#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"3$$$#0" 
if.then1:
  %4 = inttoptr i64 %"$right#0" to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %"4$$$#0" = icmp eq i64 %3, %6 
  ret i1 %"4$$$#0" 
if.else1:
  ret i1 0 
}


define external fastcc  {i64, i1} @"dead_cell_size.t2.a<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %7 = inttoptr i64 %"$rec#0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else:
  %12 = insertvalue {i64, i1} undef, i64 undef, 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"dead_cell_size.t2.a<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %14 = trunc i64 8 to i32  
  %15 = tail call ccc  i8*  @wybe_malloc(i32  %14)  
  %16 = ptrtoint i8* %15 to i64 
  %17 = inttoptr i64 %16 to i8* 
  %18 = inttoptr i64 %"$rec#0" to i8* 
  %19 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %17, i8*  %18, i32  %19, i32  8, i1  0)  
  %20 = inttoptr i64 %16 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  store  i64 %"$field#0", i64* %21 
  %22 = insertvalue {i64, i1} undef, i64 %16, 0 
  %23 = insertvalue {i64, i1} %22, i1 1, 1 
  ret {i64, i1} %23 
if.else:
  %24 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %25 = insertvalue {i64, i1} %24, i1 0, 1 
  ret {i64, i1} %25 
}


define external fastcc  i64 @"dead_cell_size.t2.t2a<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i64 @"dead_cell_size.t2.t2b<0>"(i64  %"a#0")    {
entry:
  %26 = trunc i64 8 to i32  
  %27 = tail call ccc  i8*  @wybe_malloc(i32  %26)  
  %28 = ptrtoint i8* %27 to i64 
  %29 = inttoptr i64 %28 to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  store  i64 %"a#0", i64* %30 
  ret i64 %28 
}


define external fastcc  {i64, i1} @"dead_cell_size.t2.t2b<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %31 = inttoptr i64 %"$#0" to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  %33 = load  i64, i64* %32 
  %34 = insertvalue {i64, i1} undef, i64 %33, 0 
  %35 = insertvalue {i64, i1} %34, i1 1, 1 
  ret {i64, i1} %35 
if.else:
  %36 = insertvalue {i64, i1} undef, i64 undef, 0 
  %37 = insertvalue {i64, i1} %36, i1 0, 1 
  ret {i64, i1} %37 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module position_float
  representation  : (not a type)
  public submods  : position -> position_float.position
  public resources: 
  public procs    : position_float.position.=<0>
                    position_float.position.position<0>
                    position_float.position.position<1>
                    position_float.position.x<0>
                    position_float.position.x<1>
                    position_float.position.y<0>
                    position_float.position.y<1>
                    position_float.position.~=<0>
  imports         : public use position_float.position
                    use wybe
  resources       : 
  submodules      : position_float.position
  procs           : 


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'position_float'

source_filename = "!ROOT!/final-dump/position_float.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

--------------------------------------------------
 Module position_float.position
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : position_float.position.=<0>
                    position_float.position.position<0>
                    position_float.position.position<1>
                    position_float.position.x<0>
                    position_float.position.x<1>
                    position_float.position.y<0>
                    position_float.position.y<1>
                    position_float.position.~=<0>
  imports         : use position_float
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: position_float.position.=<0>
=(#left##0:position_float.position, #right##0:position_float.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position_float.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(~#left##0:position_float.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(#right##0:position_float.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(~#right##0:position_float.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.float) @position_float:nn:nn
    foreign llvm fcmp_oeq(~#left#x##0:wybe.float, ~#right#x##0:wybe.float, ?tmp#1##0:wybe.bool) @float:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm fcmp_oeq(~#left#y##0:wybe.float, ~#right#y##0:wybe.float, ?#success##0:wybe.bool) @float:nn:nn



proc position > public {inline} (0 calls)
0: position_float.position.position<0>
position(x##0:wybe.float, y##0:wybe.float, ?#result##0:position_float.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:position_float.position) @position_float:nn:nn
    foreign lpvm mutate(~#rec##0:position_float.position, ?#rec##1:position_float.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.float) @position_float:nn:nn
    foreign lpvm mutate(~#rec##1:position_float.position, ?#result##0:position_float.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.float) @position_float:nn:nn
proc position > public {inline} (6 calls)
1: position_float.position.position<1>
position(?x##0:wybe.float, ?y##0:wybe.float, #result##0:position_float.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:position_float.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(~#result##0:position_float.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.float) @position_float:nn:nn


proc x > public {inline} (0 calls)
0: position_float.position.x<0>
x(#rec##0:position_float.position, ?#result##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position_float.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.float) @position_float:nn:nn
proc x > public {inline} (0 calls)
1: position_float.position.x<1>
x(#rec##0:position_float.position, ?#rec##1:position_float.position, #field##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position_float.position, ?#rec##1:position_float.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.float) @position_float:nn:nn


proc y > public {inline} (0 calls)
0: position_float.position.y<0>
y(#rec##0:position_float.position, ?#result##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position_float.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.float) @position_float:nn:nn
proc y > public {inline} (0 calls)
1: position_float.position.y<1>
y(#rec##0:position_float.position, ?#rec##1:position_float.position, #field##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position_float.position, ?#rec##1:position_float.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.float) @position_float:nn:nn


proc ~= > public {inline} (0 calls)
0: position_float.position.~=<0>
~=(#left##0:position_float.position, #right##0:position_float.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position_float.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(~#left##0:position_float.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(#right##0:position_float.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(~#right##0:position_float.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.float) @position_float:nn:nn
    foreign llvm fcmp_oeq(~tmp#3##0:wybe.float, ~tmp#5##0:wybe.float, ?tmp#7##0:wybe.bool) @float:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm fcmp_oeq(~tmp#4##0:wybe.float, ~tmp#6##0:wybe.float, ?tmp#0##0:wybe.bool) @float:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'position_float.position'

source_filename = "!ROOT!/final-dump/position_float.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"position_float.position.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#9##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#x##0" = load double, ptr %"tmp#9##0"
  %"tmp#10##0" = add i64 %"#left##0", 8
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"#left#y##0" = load double, ptr %"tmp#11##0"
  %"tmp#12##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#x##0" = load double, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#right##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#right#y##0" = load double, ptr %"tmp#14##0"
  %"tmp#1##0" = fcmp oeq double %"#left#x##0", %"#right#x##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#15##0" = fcmp oeq double %"#left#y##0", %"#right#y##0"
  ret i1 %"tmp#15##0"
if.else.0:
  ret i1 0
}

define external fastcc i64 @"position_float.position.position<0>"(double %"x##0", double %"y##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store double %"x##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store double %"y##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {double, double} @"position_float.position.position<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load double, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load double, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {double, double} undef, double %"tmp#1##0", 0
  %"tmp#6##0" = insertvalue {double, double} %"tmp#5##0", double %"tmp#4##0", 1
  ret {double, double} %"tmp#6##0"
}

define external fastcc double @"position_float.position.x<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load double, ptr %"tmp#0##0"
  ret double %"tmp#1##0"
}

define external fastcc i64 @"position_float.position.x<1>"(i64 %"#rec##0", double %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store double %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc double @"position_float.position.y<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load double, ptr %"tmp#1##0"
  ret double %"tmp#2##0"
}

define external fastcc i64 @"position_float.position.y<1>"(i64 %"#rec##0", double %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store double %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i1 @"position_float.position.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#8##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load double, ptr %"tmp#8##0"
  %"tmp#9##0" = add i64 %"#left##0", 8
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"tmp#4##0" = load double, ptr %"tmp#10##0"
  %"tmp#11##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#5##0" = load double, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"#right##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"tmp#6##0" = load double, ptr %"tmp#13##0"
  %"tmp#7##0" = fcmp oeq double %"tmp#3##0", %"tmp#5##0"
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#0##0" = fcmp oeq double %"tmp#4##0", %"tmp#6##0"
  %"tmp#14##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = xor i1 0, 1
  ret i1 %"tmp#15##0"
}

======================================================================
AFTER EVERYTHING:
 Module position_float
  representation  : (not a type)
  public submods  : position -> position_float.position
  public resources: 
  public procs    : position_float.position.=<0>
                    position_float.position.position<0>
                    position_float.position.position<1>
                    position_float.position.x<0>
                    position_float.position.x<1>
                    position_float.position.y<0>
                    position_float.position.y<1>
                    position_float.position.~=<0>
  imports         : public use position_float.position
                    use wybe
  resources       : 
  submodules      : position_float.position
  procs           : 


  LLVM code       :

; ModuleID = 'position_float'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    
--------------------------------------------------
 Module position_float.position
  representation  : address
  public submods  : 
  public resources: 
  public procs    : position_float.position.=<0>
                    position_float.position.position<0>
                    position_float.position.position<1>
                    position_float.position.x<0>
                    position_float.position.x<1>
                    position_float.position.y<0>
                    position_float.position.y<1>
                    position_float.position.~=<0>
  imports         : use position_float
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: position_float.position.=<0>
=(#left##0:position_float.position, #right##0:position_float.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position_float.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(~#left##0:position_float.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(#right##0:position_float.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(~#right##0:position_float.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.float) @position_float:nn:nn
    foreign llvm fcmp_eq(~#left#x##0:wybe.float, ~#right#x##0:wybe.float, ?tmp#1##0:wybe.bool) @float:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm fcmp_eq(~#left#y##0:wybe.float, ~#right#y##0:wybe.float, ?#success##0:wybe.bool) @float:nn:nn



proc position > public {inline} (0 calls)
0: position_float.position.position<0>
position(x##0:wybe.float, y##0:wybe.float, ?#result##0:position_float.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:position_float.position) @position_float:nn:nn
    foreign lpvm mutate(~#rec##0:position_float.position, ?#rec##1:position_float.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.float) @position_float:nn:nn
    foreign lpvm mutate(~#rec##1:position_float.position, ?#result##0:position_float.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.float) @position_float:nn:nn
proc position > public {inline} (6 calls)
1: position_float.position.position<1>
position(?x##0:wybe.float, ?y##0:wybe.float, #result##0:position_float.position)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:position_float.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(~#result##0:position_float.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.float) @position_float:nn:nn


proc x > public {inline} (0 calls)
0: position_float.position.x<0>
x(#rec##0:position_float.position, ?#result##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position_float.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.float) @position_float:nn:nn
proc x > public {inline} (0 calls)
1: position_float.position.x<1>
x(#rec##0:position_float.position, ?#rec##1:position_float.position, #field##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position_float.position, ?#rec##1:position_float.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.float) @position_float:nn:nn


proc y > public {inline} (0 calls)
0: position_float.position.y<0>
y(#rec##0:position_float.position, ?#result##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position_float.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.float) @position_float:nn:nn
proc y > public {inline} (0 calls)
1: position_float.position.y<1>
y(#rec##0:position_float.position, ?#rec##1:position_float.position, #field##0:wybe.float)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position_float.position, ?#rec##1:position_float.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.float) @position_float:nn:nn


proc ~= > public {inline} (0 calls)
0: position_float.position.~=<0>
~=(#left##0:position_float.position, #right##0:position_float.position, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position_float.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(~#left##0:position_float.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(#right##0:position_float.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.float) @position_float:nn:nn
    foreign lpvm access(~#right##0:position_float.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.float) @position_float:nn:nn
    foreign llvm fcmp_eq(~tmp#3##0:wybe.float, ~tmp#5##0:wybe.float, ?tmp#7##0:wybe.bool) @float:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm fcmp_eq(~tmp#4##0:wybe.float, ~tmp#6##0:wybe.float, ?tmp#0##0:wybe.bool) @float:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'position_float.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"position_float.position.=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to double* 
  %1 = load  double, double* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to double* 
  %4 = load  double, double* %3 
  %5 = inttoptr i64 %"#right##0" to double* 
  %6 = load  double, double* %5 
  %7 = add   i64 %"#right##0", 8 
  %8 = inttoptr i64 %7 to double* 
  %9 = load  double, double* %8 
  %10 = fcmp oeq double %1, %6 
  br i1 %10, label %if.then, label %if.else 
if.then:
  %11 = fcmp oeq double %4, %9 
  ret i1 %11 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"position_float.position.position<0>"(double  %"x##0", double  %"y##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to double* 
  store  double %"x##0", double* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to double* 
  store  double %"y##0", double* %5 
  ret i64 %2 
}


define external fastcc  {double, double} @"position_float.position.position<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#result##0" to double* 
  %1 = load  double, double* %0 
  %2 = add   i64 %"#result##0", 8 
  %3 = inttoptr i64 %2 to double* 
  %4 = load  double, double* %3 
  %5 = insertvalue {double, double} undef, double %1, 0 
  %6 = insertvalue {double, double} %5, double %4, 1 
  ret {double, double} %6 
}


define external fastcc  double @"position_float.position.x<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#rec##0" to double* 
  %1 = load  double, double* %0 
  ret double %1 
}


define external fastcc  i64 @"position_float.position.x<1>"(i64  %"#rec##0", double  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to double* 
  store  double %"#field##0", double* %6 
  ret i64 %2 
}


define external fastcc  double @"position_float.position.y<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to double* 
  %2 = load  double, double* %1 
  ret double %2 
}


define external fastcc  i64 @"position_float.position.y<1>"(i64  %"#rec##0", double  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to double* 
  store  double %"#field##0", double* %7 
  ret i64 %2 
}


define external fastcc  i1 @"position_float.position.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to double* 
  %1 = load  double, double* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to double* 
  %4 = load  double, double* %3 
  %5 = inttoptr i64 %"#right##0" to double* 
  %6 = load  double, double* %5 
  %7 = add   i64 %"#right##0", 8 
  %8 = inttoptr i64 %7 to double* 
  %9 = load  double, double* %8 
  %10 = fcmp oeq double %1, %6 
  br i1 %10, label %if.then, label %if.else 
if.then:
  %11 = fcmp oeq double %4, %9 
  %12 = xor i1 %11, 1 
  ret i1 %12 
if.else:
  %13 = xor i1 0, 1 
  ret i1 %13 
}

======================================================================
AFTER EVERYTHING:
 Module position_float
  public submods  : 
  public types    : position: (position_float.position,Just address)
  public resources: 
  public procs    : position_float.position./=<0>
                    position_float.position.=<0>
                    position_float.position.position<0>
                    position_float.position.position<1>
                    position_float.position.x<0>
                    position_float.position.x<1>
                    position_float.position.y<0>
                    position_float.position.y<1>
  imports         : public use position_float.position
                    use wybe
  types           : position/public  is address { position(x:float, y:float) @position_float:1:25  }  @position_float:1:5
  resources       : 
  submodules      : position_float.position
  procs           : 


  LLVM code       :

; ModuleID = 'position_float'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    
--------------------------------------------------
 Module position_float.position
  public submods  : 
  public types    : 
  public resources: 
  public procs    : position_float.position./=<0>
                    position_float.position.=<0>
                    position_float.position.position<0>
                    position_float.position.position<1>
                    position_float.position.x<0>
                    position_float.position.x<1>
                    position_float.position.y<0>
                    position_float.position.y<1>
  imports         : use position_float
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline test (0 calls)
0: /=($left#0:position_float.position, $right#0:position_float.position, ?$$#0:wybe.bool):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm access($left#0:position_float.position, 0:wybe.int, ?tmp$4#0:wybe.float)
    foreign lpvm access(~$left#0:position_float.position, 8:wybe.int, ?tmp$5#0:wybe.float)
    foreign lpvm access($right#0:position_float.position, 0:wybe.int, ?tmp$6#0:wybe.float)
    foreign lpvm access(~$right#0:position_float.position, 8:wybe.int, ?tmp$7#0:wybe.float)
    foreign llvm fcmp eq(~tmp$4#0:wybe.float, ~tmp$6#0:wybe.float, ?tmp$8#0:wybe.bool) @wybe:nn:nn
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm fcmp eq(~tmp$5#0:wybe.float, ~tmp$7#0:wybe.float, ?tmp$1#0:wybe.bool) @wybe:nn:nn
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)




= > public inline test (6 calls)
0: =($left#0:position_float.position, $right#0:position_float.position, ?$$#0:wybe.bool):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm access($left#0:position_float.position, 0:wybe.int, ?$left$x#0:wybe.float)
    foreign lpvm access(~$left#0:position_float.position, 8:wybe.int, ?$left$y#0:wybe.float)
    foreign lpvm access($right#0:position_float.position, 0:wybe.int, ?$right$x#0:wybe.float)
    foreign lpvm access(~$right#0:position_float.position, 8:wybe.int, ?$right$y#0:wybe.float)
    foreign llvm fcmp eq(~$left$x#0:wybe.float, ~$right$x#0:wybe.float, ?tmp$2#0:wybe.bool) @wybe:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm fcmp eq(~$left$y#0:wybe.float, ~$right$y#0:wybe.float, ?$$#0:wybe.bool) @wybe:nn:nn



position > public inline (0 calls)
0: position(x#0:wybe.float, y#0:wybe.float, ?$#0:position_float.position):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!position_float.position)
    foreign lpvm mutate(~%$rec#0:position_float.position, ?%$rec#1:position_float.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x#0:wybe.float)
    foreign lpvm mutate(~%$rec#1:position_float.position, ?%$#0:position_float.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y#0:wybe.float)
position > public inline (4 calls)
1: position(?x#0:wybe.float, ?y#0:wybe.float, $#0:position_float.position):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm access($#0:position_float.position, 0:wybe.int, ?x#0:wybe.float)
    foreign lpvm access(~$#0:position_float.position, 8:wybe.int, ?y#0:wybe.float)


x > public inline (0 calls)
0: x($rec#0:position_float.position, ?$#0:wybe.float):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm access(~$rec#0:position_float.position, 0:wybe.int, ?$#0:wybe.float)
x > public inline (0 calls)
1: x($rec#0:position_float.position, ?$rec#1:position_float.position, $field#0:wybe.float):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm mutate noalias(~%$rec#0:position_float.position, ?%$rec#1:position_float.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.float)


y > public inline (0 calls)
0: y($rec#0:position_float.position, ?$#0:wybe.float):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm access(~$rec#0:position_float.position, 8:wybe.int, ?$#0:wybe.float)
y > public inline (0 calls)
1: y($rec#0:position_float.position, ?$rec#1:position_float.position, $field#0:wybe.float):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm mutate noalias(~%$rec#0:position_float.position, ?%$rec#1:position_float.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.float)

  LLVM code       :

; ModuleID = 'position_float.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"position_float.position./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to double* 
  %2 = getelementptr  double, double* %1, i64 0 
  %3 = load  double, double* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to double* 
  %6 = getelementptr  double, double* %5, i64 0 
  %7 = load  double, double* %6 
  %8 = inttoptr i64 %"$right#0" to double* 
  %9 = getelementptr  double, double* %8, i64 0 
  %10 = load  double, double* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to double* 
  %13 = getelementptr  double, double* %12, i64 0 
  %14 = load  double, double* %13 
  %"tmp$8#0" = fcmp oeq double %3, %10 
  br i1 %"tmp$8#0", label %if.then, label %if.else 
if.then:
  %"tmp$1#0" = fcmp oeq double %7, %14 
  br i1 %"tmp$1#0", label %if.then1, label %if.else1 
if.else:
  ret i1 1 
if.then1:
  ret i1 0 
if.else1:
  ret i1 1 
}


define external fastcc  i1 @"position_float.position.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %15 = inttoptr i64 %"$left#0" to double* 
  %16 = getelementptr  double, double* %15, i64 0 
  %17 = load  double, double* %16 
  %18 = add   i64 %"$left#0", 8 
  %19 = inttoptr i64 %18 to double* 
  %20 = getelementptr  double, double* %19, i64 0 
  %21 = load  double, double* %20 
  %22 = inttoptr i64 %"$right#0" to double* 
  %23 = getelementptr  double, double* %22, i64 0 
  %24 = load  double, double* %23 
  %25 = add   i64 %"$right#0", 8 
  %26 = inttoptr i64 %25 to double* 
  %27 = getelementptr  double, double* %26, i64 0 
  %28 = load  double, double* %27 
  %"tmp$2#0" = fcmp oeq double %17, %24 
  br i1 %"tmp$2#0", label %if.then, label %if.else 
if.then:
  %"$$#0" = fcmp oeq double %21, %28 
  ret i1 %"$$#0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"position_float.position.position<0>"(double  %"x#0", double  %"y#0")    {
entry:
  %29 = trunc i64 16 to i32  
  %30 = tail call ccc  i8*  @wybe_malloc(i32  %29)  
  %31 = ptrtoint i8* %30 to i64 
  %32 = inttoptr i64 %31 to double* 
  %33 = getelementptr  double, double* %32, i64 0 
  store  double %"x#0", double* %33 
  %34 = add   i64 %31, 8 
  %35 = inttoptr i64 %34 to double* 
  %36 = getelementptr  double, double* %35, i64 0 
  store  double %"y#0", double* %36 
  ret i64 %31 
}


define external fastcc  {double, double} @"position_float.position.position<1>"(i64  %"$#0")    {
entry:
  %37 = inttoptr i64 %"$#0" to double* 
  %38 = getelementptr  double, double* %37, i64 0 
  %39 = load  double, double* %38 
  %40 = add   i64 %"$#0", 8 
  %41 = inttoptr i64 %40 to double* 
  %42 = getelementptr  double, double* %41, i64 0 
  %43 = load  double, double* %42 
  %44 = insertvalue {double, double} undef, double %39, 0 
  %45 = insertvalue {double, double} %44, double %43, 1 
  ret {double, double} %45 
}


define external fastcc  double @"position_float.position.x<0>"(i64  %"$rec#0")    {
entry:
  %46 = inttoptr i64 %"$rec#0" to double* 
  %47 = getelementptr  double, double* %46, i64 0 
  %48 = load  double, double* %47 
  ret double %48 
}


define external fastcc  i64 @"position_float.position.x<1>"(i64  %"$rec#0", double  %"$field#0")    {
entry:
  %49 = trunc i64 16 to i32  
  %50 = tail call ccc  i8*  @wybe_malloc(i32  %49)  
  %51 = ptrtoint i8* %50 to i64 
  %52 = inttoptr i64 %51 to i8* 
  %53 = inttoptr i64 %"$rec#0" to i8* 
  %54 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %52, i8*  %53, i32  %54, i32  8, i1  0)  
  %55 = inttoptr i64 %51 to double* 
  %56 = getelementptr  double, double* %55, i64 0 
  store  double %"$field#0", double* %56 
  ret i64 %51 
}


define external fastcc  double @"position_float.position.y<0>"(i64  %"$rec#0")    {
entry:
  %57 = add   i64 %"$rec#0", 8 
  %58 = inttoptr i64 %57 to double* 
  %59 = getelementptr  double, double* %58, i64 0 
  %60 = load  double, double* %59 
  ret double %60 
}


define external fastcc  i64 @"position_float.position.y<1>"(i64  %"$rec#0", double  %"$field#0")    {
entry:
  %61 = trunc i64 16 to i32  
  %62 = tail call ccc  i8*  @wybe_malloc(i32  %61)  
  %63 = ptrtoint i8* %62 to i64 
  %64 = inttoptr i64 %63 to i8* 
  %65 = inttoptr i64 %"$rec#0" to i8* 
  %66 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %64, i8*  %65, i32  %66, i32  8, i1  0)  
  %67 = add   i64 %63, 8 
  %68 = inttoptr i64 %67 to double* 
  %69 = getelementptr  double, double* %68, i64 0 
  store  double %"$field#0", double* %69 
  ret i64 %63 
}

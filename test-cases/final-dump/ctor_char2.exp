======================================================================
AFTER EVERYTHING:
 Module ctor_char2
  representation  : address
  public submods  : 
  public resources: 
  public procs    : ctor_char2.<0>
                    ctor_char2.=<0>
                    ctor_char2.another_ctor<0>
                    ctor_char2.another_ctor<1>
                    ctor_char2.other_ctor<0>
                    ctor_char2.other_ctor<1>
                    ctor_char2.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public (0 calls)
0: ctor_char2.<0>
(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm shl('a':ctor_char2, 2:ctor_char2, ?tmp$3#0:ctor_char2)
    foreign llvm or(~tmp$3#0:ctor_char2, 1024:ctor_char2, ?tmp$1#0:ctor_char2)
    ctor_char2.foo<0>(~tmp$1#0:ctor_char2, ?tmp$0#0:wybe.char) #1 @ctor_char2:5:10
    foreign c putchar(~tmp$0#0:wybe.char, ~#io#0:wybe.phantom, ?tmp$6#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$6#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn


= > public (3 calls)
0: ctor_char2.=<0>
=($left#0:ctor_char2, $right#0:ctor_char2, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($left#0:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp_eq(~$left#0:ctor_char2, ~$right#0:ctor_char2, ?$$#0:wybe.bool)

    1:
        foreign llvm and($left#0:wybe.int, 3:wybe.int, ?tmp$13#0:wybe.int)
        foreign llvm icmp_eq(tmp$13#0:wybe.int, 0:wybe.int, ?tmp$14#0:wybe.bool)
        case ~tmp$14#0:wybe.bool of
        0:
            foreign llvm icmp_eq(tmp$13#0:wybe.int, 1:wybe.int, ?tmp$20#0:wybe.bool)
            case ~tmp$20#0:wybe.bool of
            0:
                foreign llvm icmp_eq(~tmp$13#0:wybe.int, 2:wybe.int, ?tmp$24#0:wybe.bool)
                case ~tmp$24#0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                1:
                    foreign lpvm access(~$left#0:ctor_char2, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?$left$___#0:ctor_char2)
                    foreign llvm icmp_ne($right#0:wybe.int, 0:wybe.int, ?tmp$26#0:wybe.bool)
                    case ~tmp$26#0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                    1:
                        foreign llvm and($right#0:wybe.int, 3:wybe.int, ?tmp$27#0:wybe.int)
                        foreign llvm icmp_eq(~tmp$27#0:wybe.int, 2:wybe.int, ?tmp$28#0:wybe.bool)
                        case ~tmp$28#0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                        1:
                            foreign lpvm access(~$right#0:ctor_char2, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?$right$___#0:ctor_char2)
                            ctor_char2.=<0>(~$left$___#0:ctor_char2, ~$right$___#0:ctor_char2, ?$$#0:wybe.bool) #8




            1:
                foreign lpvm access(~$left#0:ctor_char2, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?$left$__#0:ctor_char2)
                foreign llvm icmp_ne($right#0:wybe.int, 0:wybe.int, ?tmp$22#0:wybe.bool)
                case ~tmp$22#0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                1:
                    foreign llvm and($right#0:wybe.int, 3:wybe.int, ?tmp$23#0:wybe.int)
                    foreign llvm icmp_eq(~tmp$23#0:wybe.int, 1:wybe.int, ?tmp$24#0:wybe.bool)
                    case ~tmp$24#0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                    1:
                        foreign lpvm access(~$right#0:ctor_char2, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?$right$__#0:ctor_char2)
                        ctor_char2.=<0>(~$left$__#0:ctor_char2, ~$right$__#0:ctor_char2, ?$$#0:wybe.bool) #5




        1:
            foreign llvm lshr(~$left#0:ctor_char2, 2:ctor_char2, ?tmp$15#0:ctor_char2)
            foreign llvm and(~tmp$15#0:ctor_char2, 255:ctor_char2, ?tmp$16#0:ctor_char2)
            foreign lpvm cast(~tmp$16#0:ctor_char2, ?$left$c#0:wybe.char)
            foreign llvm icmp_ne($right#0:wybe.int, 0:wybe.int, ?tmp$18#0:wybe.bool)
            case ~tmp$18#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign llvm and($right#0:wybe.int, 3:wybe.int, ?tmp$19#0:wybe.int)
                foreign llvm icmp_eq(~tmp$19#0:wybe.int, 0:wybe.int, ?tmp$20#0:wybe.bool)
                case ~tmp$20#0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                1:
                    foreign llvm lshr(~$right#0:ctor_char2, 2:ctor_char2, ?tmp$21#0:ctor_char2)
                    foreign llvm and(~tmp$21#0:ctor_char2, 255:ctor_char2, ?tmp$22#0:ctor_char2)
                    foreign lpvm cast(~tmp$22#0:ctor_char2, ?$right$c#0:wybe.char)
                    foreign llvm icmp_eq(~$left$c#0:wybe.char, ~$right$c#0:wybe.char, ?$$#0:wybe.bool) @char:nn:nn






__ > {inline} (0 calls)
0: ctor_char2.__<0>
__($rec#0:ctor_char2, ?$#0:ctor_char2, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:ctor_char2, ?$#0:ctor_char2)

    1:
        foreign llvm and($rec#0:wybe.int, 3:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:wybe.int, 1:wybe.int, ?tmp$1#0:wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:ctor_char2, ?$#0:ctor_char2)

        1:
            foreign lpvm access(~$rec#0:ctor_char2, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?$#0:ctor_char2)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


__ > {inline} (0 calls)
1: ctor_char2.__<1>
__($rec#0:ctor_char2, ?$rec#1:ctor_char2, $field#0:ctor_char2, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:ctor_char2, ?$rec#1:ctor_char2)

    1:
        foreign llvm and($rec#0:wybe.int, 3:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:wybe.int, 1:wybe.int, ?tmp$1#0:wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(~$rec#0:ctor_char2, ?$rec#1:ctor_char2)

        1:
            foreign lpvm {noalias} mutate(~$rec#0:ctor_char2, ?$rec#1:ctor_char2, -1:wybe.int, 0:wybe.int, 8:wybe.int, 1:wybe.int, ~$field#0:ctor_char2)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




___ > {inline} (0 calls)
0: ctor_char2.___<0>
___($rec#0:ctor_char2, ?$#0:ctor_char2, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:ctor_char2, ?$#0:ctor_char2)

    1:
        foreign llvm and($rec#0:wybe.int, 3:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:wybe.int, 2:wybe.int, ?tmp$1#0:wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:ctor_char2, ?$#0:ctor_char2)

        1:
            foreign lpvm access(~$rec#0:ctor_char2, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?$#0:ctor_char2)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


___ > {inline} (0 calls)
1: ctor_char2.___<1>
___($rec#0:ctor_char2, ?$rec#1:ctor_char2, $field#0:ctor_char2, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:ctor_char2, ?$rec#1:ctor_char2)

    1:
        foreign llvm and($rec#0:wybe.int, 3:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:wybe.int, 2:wybe.int, ?tmp$1#0:wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(~$rec#0:ctor_char2, ?$rec#1:ctor_char2)

        1:
            foreign lpvm {noalias} mutate(~$rec#0:ctor_char2, ?$rec#1:ctor_char2, -2:wybe.int, 0:wybe.int, 8:wybe.int, 2:wybe.int, ~$field#0:ctor_char2)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




another_ctor > public {inline} (0 calls)
0: ctor_char2.another_ctor<0>
another_ctor(___#0:ctor_char2, ?$#0:ctor_char2):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?$rec#0:ctor_char2)
    foreign lpvm mutate(~$rec#0:ctor_char2, ?$rec#1:ctor_char2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~___#0:ctor_char2)
    foreign llvm or(~$rec#1:ctor_char2, 2:wybe.int, ?$#0:ctor_char2)
another_ctor > public {inline} (5 calls)
1: ctor_char2.another_ctor<1>
another_ctor(?___#0:ctor_char2, $#0:ctor_char2, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:ctor_char2, ?___#0:ctor_char2)

    1:
        foreign llvm and($#0:wybe.int, 3:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:wybe.int, 2:wybe.int, ?tmp$1#0:wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:ctor_char2, ?___#0:ctor_char2)

        1:
            foreign lpvm access(~$#0:ctor_char2, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?___#0:ctor_char2)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




c > {inline} (0 calls)
0: ctor_char2.c<0>
c($rec#0:ctor_char2, ?$#0:wybe.char, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.char, ?$#0:wybe.char)

    1:
        foreign llvm and($rec#0:wybe.int, 3:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:wybe.char, ?$#0:wybe.char)

        1:
            foreign llvm lshr(~$rec#0:ctor_char2, 2:ctor_char2, ?$rec#1:ctor_char2)
            foreign llvm and(~$rec#1:ctor_char2, 255:ctor_char2, ?$field#0:ctor_char2)
            foreign lpvm cast(~$field#0:ctor_char2, ?$#0:wybe.char)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


c > {inline} (0 calls)
1: ctor_char2.c<1>
c($rec#0:ctor_char2, ?$rec#2:ctor_char2, $field#0:wybe.char, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:ctor_char2, ?$rec#2:ctor_char2)

    1:
        foreign llvm and($rec#0:wybe.int, 3:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(~$rec#0:ctor_char2, ?$rec#2:ctor_char2)

        1:
            foreign llvm and(~$rec#0:ctor_char2, -1021:ctor_char2, ?$rec#1:ctor_char2)
            foreign llvm shl(~$field#0:ctor_char2, 2:ctor_char2, ?$tmp#0:ctor_char2)
            foreign llvm or(~$rec#1:ctor_char2, ~$tmp#0:ctor_char2, ?$rec#2:ctor_char2)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




const > {inline} (0 calls)
0: ctor_char2.const<0>
const(?$#0:ctor_char2):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:ctor_char2, ?$#0:ctor_char2)


ctor > {inline} (1 calls)
0: ctor_char2.ctor<0>
ctor(c#0:wybe.char, ?$#3:ctor_char2):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm shl(~c#0:ctor_char2, 2:ctor_char2, ?$temp#0:ctor_char2)
    foreign llvm or(~$temp#0:ctor_char2, 1024:ctor_char2, ?$#3:ctor_char2)
ctor > {inline} (15 calls)
1: ctor_char2.ctor<1>
ctor(?c#0:wybe.char, $#0:ctor_char2, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.char, ?c#0:wybe.char)

    1:
        foreign llvm and($#0:wybe.int, 3:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:wybe.char, ?c#0:wybe.char)

        1:
            foreign llvm lshr(~$#0:ctor_char2, 2:ctor_char2, ?$temp#0:ctor_char2)
            foreign llvm and(~$temp#0:ctor_char2, 255:ctor_char2, ?$temp2#0:ctor_char2)
            foreign lpvm cast(~$temp2#0:ctor_char2, ?c#0:wybe.char)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




foo > (1 calls)
0: ctor_char2.foo<0>
foo(this#0:ctor_char2, ?$#0:wybe.char):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(this#0:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.bool)
    case ~tmp$3#0:wybe.bool of
    0:
        foreign llvm move('0':wybe.char, ?$#0:wybe.char) @ctor_char2:3:1

    1:
        foreign llvm and(this#0:wybe.int, 3:wybe.int, ?tmp$4#0:wybe.int)
        foreign llvm icmp_eq(~tmp$4#0:wybe.int, 0:wybe.int, ?tmp$5#0:wybe.bool)
        case ~tmp$5#0:wybe.bool of
        0:
            foreign llvm move('0':wybe.char, ?$#0:wybe.char) @ctor_char2:3:1

        1:
            foreign llvm lshr(~this#0:ctor_char2, 2:ctor_char2, ?tmp$6#0:ctor_char2)
            foreign llvm and(~tmp$6#0:ctor_char2, 255:ctor_char2, ?tmp$7#0:ctor_char2)
            foreign lpvm cast(~tmp$7#0:ctor_char2, ?$#0:wybe.char)




other_ctor > public {inline} (0 calls)
0: ctor_char2.other_ctor<0>
other_ctor(__#0:ctor_char2, ?$#0:ctor_char2):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?$rec#0:ctor_char2)
    foreign lpvm mutate(~$rec#0:ctor_char2, ?$rec#1:ctor_char2, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~__#0:ctor_char2)
    foreign llvm or(~$rec#1:ctor_char2, 1:wybe.int, ?$#0:ctor_char2)
other_ctor > public {inline} (7 calls)
1: ctor_char2.other_ctor<1>
other_ctor(?__#0:ctor_char2, $#0:ctor_char2, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:ctor_char2, ?__#0:ctor_char2)

    1:
        foreign llvm and($#0:wybe.int, 3:wybe.int, ?tmp$2#0:wybe.int)
        foreign llvm icmp_eq(~tmp$2#0:wybe.int, 1:wybe.int, ?tmp$1#0:wybe.bool)
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
            foreign llvm move(undef:ctor_char2, ?__#0:ctor_char2)

        1:
            foreign lpvm access(~$#0:ctor_char2, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?__#0:ctor_char2)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




~= > public {inline} (0 calls)
0: ctor_char2.~=<0>
~=($left#0:ctor_char2, $right#0:ctor_char2, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    ctor_char2.=<0>(~$left#0:ctor_char2, ~$right#0:ctor_char2, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)

  LLVM code       :

; ModuleID = 'ctor_char2'


 


declare external ccc  void @putchar(i8)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"ctor_char2.<0>"()    {
entry:
  %"1$tmp$3#0" = shl   i64 97, 2 
  %"1$tmp$1#0" = or i64 %"1$tmp$3#0", 1024 
  %"1$tmp$0#0" = tail call fastcc  i8  @"ctor_char2.foo<0>"(i64  %"1$tmp$1#0")  
  tail call ccc  void  @putchar(i8  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i1 @"ctor_char2.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$13#0" = and i64 %"$left#0", 3 
  %"2$tmp$14#0" = icmp eq i64 %"2$tmp$13#0", 0 
  br i1 %"2$tmp$14#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"3$$$#0" 
if.then1:
  %"4$tmp$15#0" = lshr  i64 %"$left#0", 2 
  %"4$tmp$16#0" = and i64 %"4$tmp$15#0", 255 
  %1 = trunc i64 %"4$tmp$16#0" to i8  
  %"4$tmp$18#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"4$tmp$18#0", label %if.then2, label %if.else2 
if.else1:
  %"5$tmp$20#0" = icmp eq i64 %"2$tmp$13#0", 1 
  br i1 %"5$tmp$20#0", label %if.then4, label %if.else4 
if.then2:
  %"6$tmp$19#0" = and i64 %"$right#0", 3 
  %"6$tmp$20#0" = icmp eq i64 %"6$tmp$19#0", 0 
  br i1 %"6$tmp$20#0", label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %"8$tmp$21#0" = lshr  i64 %"$right#0", 2 
  %"8$tmp$22#0" = and i64 %"8$tmp$21#0", 255 
  %2 = trunc i64 %"8$tmp$22#0" to i8  
  %"8$$$#0" = icmp eq i8 %1, %2 
  ret i1 %"8$$$#0" 
if.else3:
  ret i1 0 
if.then4:
  %3 = add   i64 %"$left#0", -1 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %"10$tmp$22#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"10$tmp$22#0", label %if.then5, label %if.else5 
if.else4:
  %"11$tmp$24#0" = icmp eq i64 %"2$tmp$13#0", 2 
  br i1 %"11$tmp$24#0", label %if.then7, label %if.else7 
if.then5:
  %"12$tmp$23#0" = and i64 %"$right#0", 3 
  %"12$tmp$24#0" = icmp eq i64 %"12$tmp$23#0", 1 
  br i1 %"12$tmp$24#0", label %if.then6, label %if.else6 
if.else5:
  ret i1 0 
if.then6:
  %7 = add   i64 %"$right#0", -1 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %"14$$$#0" = tail call fastcc  i1  @"ctor_char2.=<0>"(i64  %6, i64  %10)  
  ret i1 %"14$$$#0" 
if.else6:
  ret i1 0 
if.then7:
  %11 = add   i64 %"$left#0", -2 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"16$tmp$26#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"16$tmp$26#0", label %if.then8, label %if.else8 
if.else7:
  ret i1 0 
if.then8:
  %"18$tmp$27#0" = and i64 %"$right#0", 3 
  %"18$tmp$28#0" = icmp eq i64 %"18$tmp$27#0", 2 
  br i1 %"18$tmp$28#0", label %if.then9, label %if.else9 
if.else8:
  ret i1 0 
if.then9:
  %15 = add   i64 %"$right#0", -2 
  %16 = inttoptr i64 %15 to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %"20$$$#0" = tail call fastcc  i1  @"ctor_char2.=<0>"(i64  %14, i64  %18)  
  ret i1 %"20$$$#0" 
if.else9:
  ret i1 0 
}


define external fastcc  {i64, i1} @"ctor_char2.__<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 3 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 1 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %27 = insertvalue {i64, i1} undef, i64 undef, 0 
  %28 = insertvalue {i64, i1} %27, i1 0, 1 
  ret {i64, i1} %28 
if.then1:
  %19 = add   i64 %"$rec#0", -1 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %23 = insertvalue {i64, i1} undef, i64 %22, 0 
  %24 = insertvalue {i64, i1} %23, i1 1, 1 
  ret {i64, i1} %24 
if.else1:
  %25 = insertvalue {i64, i1} undef, i64 undef, 0 
  %26 = insertvalue {i64, i1} %25, i1 0, 1 
  ret {i64, i1} %26 
}


define external fastcc  {i64, i1} @"ctor_char2.__<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 3 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 1 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %44 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %45 = insertvalue {i64, i1} %44, i1 0, 1 
  ret {i64, i1} %45 
if.then1:
  %29 = trunc i64 8 to i32  
  %30 = tail call ccc  i8*  @wybe_malloc(i32  %29)  
  %31 = ptrtoint i8* %30 to i64 
  %32 = add   i64 %31, 1 
  %33 = sub   i64 %"$rec#0", 1 
  %34 = inttoptr i64 %31 to i8* 
  %35 = inttoptr i64 %33 to i8* 
  %36 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %34, i8*  %35, i32  %36, i32  8, i1  0)  
  %37 = add   i64 %32, -1 
  %38 = inttoptr i64 %37 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  store  i64 %"$field#0", i64* %39 
  %40 = insertvalue {i64, i1} undef, i64 %32, 0 
  %41 = insertvalue {i64, i1} %40, i1 1, 1 
  ret {i64, i1} %41 
if.else1:
  %42 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %43 = insertvalue {i64, i1} %42, i1 0, 1 
  ret {i64, i1} %43 
}


define external fastcc  {i64, i1} @"ctor_char2.___<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 3 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 2 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %54 = insertvalue {i64, i1} undef, i64 undef, 0 
  %55 = insertvalue {i64, i1} %54, i1 0, 1 
  ret {i64, i1} %55 
if.then1:
  %46 = add   i64 %"$rec#0", -2 
  %47 = inttoptr i64 %46 to i64* 
  %48 = getelementptr  i64, i64* %47, i64 0 
  %49 = load  i64, i64* %48 
  %50 = insertvalue {i64, i1} undef, i64 %49, 0 
  %51 = insertvalue {i64, i1} %50, i1 1, 1 
  ret {i64, i1} %51 
if.else1:
  %52 = insertvalue {i64, i1} undef, i64 undef, 0 
  %53 = insertvalue {i64, i1} %52, i1 0, 1 
  ret {i64, i1} %53 
}


define external fastcc  {i64, i1} @"ctor_char2.___<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 3 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 2 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %71 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %72 = insertvalue {i64, i1} %71, i1 0, 1 
  ret {i64, i1} %72 
if.then1:
  %56 = trunc i64 8 to i32  
  %57 = tail call ccc  i8*  @wybe_malloc(i32  %56)  
  %58 = ptrtoint i8* %57 to i64 
  %59 = add   i64 %58, 2 
  %60 = sub   i64 %"$rec#0", 2 
  %61 = inttoptr i64 %58 to i8* 
  %62 = inttoptr i64 %60 to i8* 
  %63 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %61, i8*  %62, i32  %63, i32  8, i1  0)  
  %64 = add   i64 %59, -2 
  %65 = inttoptr i64 %64 to i64* 
  %66 = getelementptr  i64, i64* %65, i64 0 
  store  i64 %"$field#0", i64* %66 
  %67 = insertvalue {i64, i1} undef, i64 %59, 0 
  %68 = insertvalue {i64, i1} %67, i1 1, 1 
  ret {i64, i1} %68 
if.else1:
  %69 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %70 = insertvalue {i64, i1} %69, i1 0, 1 
  ret {i64, i1} %70 
}


define external fastcc  i64 @"ctor_char2.another_ctor<0>"(i64  %"___#0")    {
entry:
  %73 = trunc i64 8 to i32  
  %74 = tail call ccc  i8*  @wybe_malloc(i32  %73)  
  %75 = ptrtoint i8* %74 to i64 
  %76 = inttoptr i64 %75 to i64* 
  %77 = getelementptr  i64, i64* %76, i64 0 
  store  i64 %"___#0", i64* %77 
  %"1$$#0" = or i64 %75, 2 
  ret i64 %"1$$#0" 
}


define external fastcc  {i64, i1} @"ctor_char2.another_ctor<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$#0", 3 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 2 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %86 = insertvalue {i64, i1} undef, i64 undef, 0 
  %87 = insertvalue {i64, i1} %86, i1 0, 1 
  ret {i64, i1} %87 
if.then1:
  %78 = add   i64 %"$#0", -2 
  %79 = inttoptr i64 %78 to i64* 
  %80 = getelementptr  i64, i64* %79, i64 0 
  %81 = load  i64, i64* %80 
  %82 = insertvalue {i64, i1} undef, i64 %81, 0 
  %83 = insertvalue {i64, i1} %82, i1 1, 1 
  ret {i64, i1} %83 
if.else1:
  %84 = insertvalue {i64, i1} undef, i64 undef, 0 
  %85 = insertvalue {i64, i1} %84, i1 0, 1 
  ret {i64, i1} %85 
}


define external fastcc  {i8, i1} @"ctor_char2.c<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 3 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 0 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %93 = insertvalue {i8, i1} undef, i8 undef, 0 
  %94 = insertvalue {i8, i1} %93, i1 0, 1 
  ret {i8, i1} %94 
if.then1:
  %"4$$rec#1" = lshr  i64 %"$rec#0", 2 
  %"4$$field#0" = and i64 %"4$$rec#1", 255 
  %88 = trunc i64 %"4$$field#0" to i8  
  %89 = insertvalue {i8, i1} undef, i8 %88, 0 
  %90 = insertvalue {i8, i1} %89, i1 1, 1 
  ret {i8, i1} %90 
if.else1:
  %91 = insertvalue {i8, i1} undef, i8 undef, 0 
  %92 = insertvalue {i8, i1} %91, i1 0, 1 
  ret {i8, i1} %92 
}


define external fastcc  {i64, i1} @"ctor_char2.c<1>"(i64  %"$rec#0", i8  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$rec#0", 3 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 0 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %100 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %101 = insertvalue {i64, i1} %100, i1 0, 1 
  ret {i64, i1} %101 
if.then1:
  %"4$$rec#1" = and i64 %"$rec#0", -1021 
  %95 = zext i8 %"$field#0" to i64  
  %"4$$tmp#0" = shl   i64 %95, 2 
  %"4$$rec#2" = or i64 %"4$$rec#1", %"4$$tmp#0" 
  %96 = insertvalue {i64, i1} undef, i64 %"4$$rec#2", 0 
  %97 = insertvalue {i64, i1} %96, i1 1, 1 
  ret {i64, i1} %97 
if.else1:
  %98 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %99 = insertvalue {i64, i1} %98, i1 0, 1 
  ret {i64, i1} %99 
}


define external fastcc  i64 @"ctor_char2.const<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  i64 @"ctor_char2.ctor<0>"(i8  %"c#0")    {
entry:
  %102 = zext i8 %"c#0" to i64  
  %"1$$temp#0" = shl   i64 %102, 2 
  %"1$$#3" = or i64 %"1$$temp#0", 1024 
  ret i64 %"1$$#3" 
}


define external fastcc  {i8, i1} @"ctor_char2.ctor<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$#0", 3 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 0 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %108 = insertvalue {i8, i1} undef, i8 undef, 0 
  %109 = insertvalue {i8, i1} %108, i1 0, 1 
  ret {i8, i1} %109 
if.then1:
  %"4$$temp#0" = lshr  i64 %"$#0", 2 
  %"4$$temp2#0" = and i64 %"4$$temp#0", 255 
  %103 = trunc i64 %"4$$temp2#0" to i8  
  %104 = insertvalue {i8, i1} undef, i8 %103, 0 
  %105 = insertvalue {i8, i1} %104, i1 1, 1 
  ret {i8, i1} %105 
if.else1:
  %106 = insertvalue {i8, i1} undef, i8 undef, 0 
  %107 = insertvalue {i8, i1} %106, i1 0, 1 
  ret {i8, i1} %107 
}


define external fastcc  i8 @"ctor_char2.foo<0>"(i64  %"this#0")    {
entry:
  %"1$tmp$3#0" = icmp ne i64 %"this#0", 0 
  br i1 %"1$tmp$3#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$4#0" = and i64 %"this#0", 3 
  %"2$tmp$5#0" = icmp eq i64 %"2$tmp$4#0", 0 
  br i1 %"2$tmp$5#0", label %if.then1, label %if.else1 
if.else:
  ret i8 48 
if.then1:
  %"4$tmp$6#0" = lshr  i64 %"this#0", 2 
  %"4$tmp$7#0" = and i64 %"4$tmp$6#0", 255 
  %110 = trunc i64 %"4$tmp$7#0" to i8  
  ret i8 %110 
if.else1:
  ret i8 48 
}


define external fastcc  i64 @"ctor_char2.other_ctor<0>"(i64  %"__#0")    {
entry:
  %111 = trunc i64 8 to i32  
  %112 = tail call ccc  i8*  @wybe_malloc(i32  %111)  
  %113 = ptrtoint i8* %112 to i64 
  %114 = inttoptr i64 %113 to i64* 
  %115 = getelementptr  i64, i64* %114, i64 0 
  store  i64 %"__#0", i64* %115 
  %"1$$#0" = or i64 %113, 1 
  ret i64 %"1$$#0" 
}


define external fastcc  {i64, i1} @"ctor_char2.other_ctor<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$2#0" = and i64 %"$#0", 3 
  %"2$tmp$1#0" = icmp eq i64 %"2$tmp$2#0", 1 
  br i1 %"2$tmp$1#0", label %if.then1, label %if.else1 
if.else:
  %124 = insertvalue {i64, i1} undef, i64 undef, 0 
  %125 = insertvalue {i64, i1} %124, i1 0, 1 
  ret {i64, i1} %125 
if.then1:
  %116 = add   i64 %"$#0", -1 
  %117 = inttoptr i64 %116 to i64* 
  %118 = getelementptr  i64, i64* %117, i64 0 
  %119 = load  i64, i64* %118 
  %120 = insertvalue {i64, i1} undef, i64 %119, 0 
  %121 = insertvalue {i64, i1} %120, i1 1, 1 
  ret {i64, i1} %121 
if.else1:
  %122 = insertvalue {i64, i1} undef, i64 undef, 0 
  %123 = insertvalue {i64, i1} %122, i1 0, 1 
  ret {i64, i1} %123 
}


define external fastcc  i1 @"ctor_char2.~=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i1  @"ctor_char2.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  %"1$$$#0" = xor i1 %"1$tmp$0#0", 1 
  ret i1 %"1$$$#0" 
}

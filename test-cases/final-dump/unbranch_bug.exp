======================================================================
AFTER EVERYTHING:
 Module unbranch_bug
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : unbranch_bug.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,impure} (0 calls)
0: unbranch_bug.<0>
(io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    unbranch_bug.gen#3<0>(~io##0:wybe.phantom, 0:wybe.list(4), 0:wybe.list(5), ?io##1:wybe.phantom) #1 @unbranch_bug:nn:nn


gen#1 > {inline} (1 calls)
0: unbranch_bug.gen#1<0>
gen#1(io##0:wybe.phantom, [tmp#0##0:wybe.list(4)], [tmp#1##0:wybe.list(4)], ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(~io##0:wybe.phantom, ?io##1:wybe.phantom)


gen#2 > {inline} (1 calls)
0: unbranch_bug.gen#2<0>
gen#2(io##0:wybe.phantom, [tmp#0##0:wybe.list(4)], [tmp#1##0:wybe.list(4)], [?io##0:wybe.phantom]):
 AliasPairs: []
 InterestingCallProperties: []


gen#3 > (2 calls)
0: unbranch_bug.gen#3<0>
gen#3(io##0:wybe.phantom, tmp#0##0:wybe.list(4), tmp#1##0:wybe.list(5), ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(tmp#0##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool)
    case ~tmp#6##0:wybe.bool of
    0:
        foreign llvm move(~io##0:wybe.phantom, ?io##1:wybe.phantom)

    1:
        foreign lpvm access(~tmp#0##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##1:wybe.list(5)) @list:nn:nn
        unbranch_bug.gen#3<0>(~io##0:wybe.phantom, ~tmp#0##1:wybe.list(4), ~tmp#1##0:wybe.list(5), ?io##1:wybe.phantom) #1 @unbranch_bug:nn:nn


  LLVM code       :

; ModuleID = 'unbranch_bug'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"unbranch_bug.<0>"()    {
entry:
  tail call fastcc  void  @"unbranch_bug.gen#3<0>"(i64  0, i64  0)  
  ret void 
}


define external fastcc  void @"unbranch_bug.gen#1<0>"()    {
entry:
  ret void 
}


define external fastcc  void @"unbranch_bug.gen#2<0>"()    {
entry:
  ret void 
}


define external fastcc  void @"unbranch_bug.gen#3<0>"(i64  %"tmp#0##0", i64  %"tmp#1##0")    {
entry:
  %"1#tmp#6##0" = icmp ne i64 %"tmp#0##0", 0 
  br i1 %"1#tmp#6##0", label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"tmp#0##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  tail call fastcc  void  @"unbranch_bug.gen#3<0>"(i64  %4, i64  %"tmp#1##0")  
  ret void 
if.else:
  ret void 
}

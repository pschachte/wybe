# UNSAFE
# this forcibly writes without checking whether it is the correct variant or not
def {inline} unsafe_update_tail(!x:list(T), field:list(T)) {
    foreign lpvm mutate(x, ?x, 8, 1, 16, 0, field)
}

def partition(p: {test}(T), l: list(T), ?yes: list(T), ?no: list(T)) {
    if { [?h | ?t] = l ::
            if { p(h) ::
                partition(p, t, ?yes0, ?no0)
                # the idea here is that we write *both* yes0 and no0 to the tail
                # of the list
                # this should *not* be TCMC-optimizable, since it may not be
                # deterministic which order yes0 or no0 are written (only the
                # last one remains)
                ?yes = [h|yes0]
                unsafe_update_tail(!yes, no0)
                ?no = []
                | else ::
                partition(p, t, ?yes0, ?no0)
                ?yes = yes0
                ?no = [h|no0]
            }
        | else ::
            ?yes = []
            ?no = []
    }
}
?l: list(int) = [1,2,9,3,4,5,6,7]
!println(print, l)
partition({test} { @1 >= 3}, l, ?yes, ?no)
!print(print, yes)
!print(", ")
!print(print, no)
!nl
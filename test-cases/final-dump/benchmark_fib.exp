======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module benchmark
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : benchmark.end<0>
                    benchmark.start<0>
                    benchmark.time_execution<0>
  constants       : 
  imports         : use wybe.c_string
                    use wybe.float
  resources       : 
  procs           : 

proc end > public {inline,semipure} (0 calls)
0: benchmark.end<0>
end(?time##0:wybe.float, %call_source_location##0:wybe.c_string)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} benchmark_end(~call_source_location##0:wybe.c_string, ?time##0:wybe.float) @benchmark:nn:nn


proc start > public {inline,semipure} (0 calls)
0: benchmark.start<0>
start(%call_source_location##0:wybe.c_string)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} benchmark_start(~call_source_location##0:wybe.c_string) @benchmark:nn:nn


proc time_execution > public {inline,semipure} (0 calls)
0: benchmark.time_execution<0>
time_execution(proc##0:{semipure}(), ?time##0:wybe.float, %call_source_location##0:wybe.c_string)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} benchmark_start(call_source_location##0:wybe.c_string) @benchmark:nn:nn
    ~proc##0:{semipure}() #0 @benchmark:nn:nn
    foreign c {impure} benchmark_end(~call_source_location##0:wybe.c_string, ?time##0:wybe.float) @benchmark:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'benchmark'

source_filename = "!ROOT!/../wybelibs/benchmark.o"
target triple    ????


declare external ccc double @benchmark_end(i64)
declare external ccc void @benchmark_start(i64)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc double @"benchmark.end<0>"(i64 %"call_source_location##0") {
  %"tmp#0##0" = call ccc double @benchmark_end(i64 %"call_source_location##0")
  ret double %"tmp#0##0"
}

define external fastcc void @"benchmark.start<0>"(i64 %"call_source_location##0") {
  call ccc void @benchmark_start(i64 %"call_source_location##0")
  ret void
}

define external fastcc double @"benchmark.time_execution<0>"(i64 %"proc##0", i64 %"call_source_location##0") {
  call ccc void @benchmark_start(i64 %"call_source_location##0")
  %"tmp#1##0" = inttoptr i64 %"proc##0" to ptr
  %"tmp#0##0" = load ptr, ptr %"tmp#1##0"
  tail call fastcc void %"tmp#0##0"(i64 %"proc##0")
  %"tmp#2##0" = call ccc double @benchmark_end(i64 %"call_source_location##0")
  ret double %"tmp#2##0"
}

--------------------------------------------------
 Module benchmark_fib
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : benchmark_fib.<0>
  constants       : 0:: CStringInfo {cstringChars = "Elapsed time (s):  "}
                    1:: CStringInfo {cstringChars = "n should be strictly positive"}
                    2:: CStringInfo {cstringChars = "benchmark_fib:5:21"}
                    3:: CStringInfo {cstringChars = "benchmark_fib:18:21"}
                    4:: CStringInfo {cstringChars = "benchmark_fib:30:2"}
                    5:: CStringInfo {cstringChars = "benchmark_fib:32:2"}
                    6:: CStringInfo {cstringChars = "benchmark_fib:35:2"}
                    7:: CStringInfo {cstringChars = "benchmark_fib:37:2"}
                    8:: CStringInfo {cstringChars = "benchmark_fib:40:2"}
                    9:: StructInfo {structSize = 16, structData = [IntStructMember 19 8,PointerStructMember c"Elapsed time (s):  "]}
                    10:: StructInfo {structSize = 8, structData = [FnPointerStructMember benchmark_fib.#anon#1<1>]}
  imports         : use benchmark
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: benchmark_fib.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} benchmark_start(c"benchmark_fib:30:2":wybe.c_string) @benchmark_fib:nn:nn
    benchmark_fib.naive_fib<0>(42:wybe.int, ?res##0:wybe.int) #1 @benchmark_fib:nn:nn
    foreign c {impure} benchmark_end(c"benchmark_fib:32:2":wybe.c_string, ?time##0:wybe.float) @benchmark_fib:nn:nn
    wybe.string.print<0>("Elapsed time (s):  ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @benchmark_fib:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#13##0:wybe.phantom) @benchmark_fib:nn:nn
    foreign c print_float(~time##0:wybe.float, ~tmp#13##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @benchmark_fib:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @benchmark_fib:nn:nn
    foreign lpvm store(~%tmp#15##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @benchmark_fib:nn:nn
    foreign c {impure} benchmark_start(c"benchmark_fib:35:2":wybe.c_string) @benchmark_fib:nn:nn
    benchmark_fib.fib<0>(42:wybe.int, ?res##1:wybe.int) #7 @benchmark_fib:nn:nn
    foreign c {impure} benchmark_end(c"benchmark_fib:37:2":wybe.c_string, ?time##1:wybe.float) @benchmark_fib:nn:nn
    wybe.string.print<0>("Elapsed time (s):  ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #10 @benchmark_fib:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#23##0:wybe.phantom) @benchmark_fib:nn:nn
    foreign c print_float(~time##1:wybe.float, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @benchmark_fib:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @benchmark_fib:nn:nn
    foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @benchmark_fib:nn:nn
    foreign c {impure} benchmark_start(c"benchmark_fib:40:2":wybe.c_string) @benchmark_fib:nn:nn
    benchmark_fib.#anon#1<1><>:{semipure}() #0 @benchmark_fib:nn:nn
    foreign c {impure} benchmark_end(c"benchmark_fib:40:2":wybe.c_string, ?time##2:wybe.float) @benchmark_fib:nn:nn
    wybe.string.print<0>("Elapsed time (s):  ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #14 @benchmark_fib:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#33##0:wybe.phantom) @benchmark_fib:nn:nn
    foreign c print_float(~time##2:wybe.float, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @benchmark_fib:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#34##0:wybe.phantom, ?tmp#35##0:wybe.phantom) @benchmark_fib:nn:nn
    foreign lpvm store(~%tmp#35##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @benchmark_fib:nn:nn


proc #anon#1 > {inline,semipure} (1 calls)
0: benchmark_fib.#anon#1<0>
#anon#1()<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    benchmark_fib.naive_fib<0>(42:wybe.int, ?res##0:wybe.int) #0 @benchmark_fib:nn:nn
proc #anon#1 > {inline,semipure} (1 calls)
1: benchmark_fib.#anon#1<1>
#anon#1()<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    benchmark_fib.naive_fib<0>(42:wybe.int, ?tmp#0##0:wybe.int) #1 @benchmark_fib:nn:nn


proc fib > (1 calls)
0: benchmark_fib.fib<0>
fib(n##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sle(n##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @benchmark_fib:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm icmp_eq(n##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.bool) @benchmark_fib:nn:nn
        case ~tmp#3##0:wybe.bool of
        0:
            foreign llvm icmp_eq(n##0:wybe.int, 2:wybe.int, ?tmp#2##0:wybe.bool) @benchmark_fib:nn:nn
            case ~tmp#2##0:wybe.bool of
            0:
                foreign llvm sub(~n##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int) @benchmark_fib:nn:nn
                benchmark_fib.fib1<0>(1:wybe.int, 1:wybe.int, ~tmp#1##0:wybe.int, ?#result##0:wybe.int) #5 @benchmark_fib:nn:nn

            1:
                foreign llvm move(1:wybe.int, ?#result##0:wybe.int) @benchmark_fib:nn:nn


        1:
            foreign llvm move(1:wybe.int, ?#result##0:wybe.int) @benchmark_fib:nn:nn


    1:
        foreign c {terminal,semipure} error_exit(c"benchmark_fib:18:21":wybe.c_string, c"n should be strictly positive":wybe.c_string) @benchmark_fib:nn:nn
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)



proc fib1 > (2 calls)
0: benchmark_fib.fib1<0>
fib1(pprev##0:wybe.int, prev##0:wybe.int, n##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(n##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @benchmark_fib:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm add(~pprev##0:wybe.int, prev##0:wybe.int, ?tmp#3##0:wybe.int) @benchmark_fib:nn:nn
        foreign llvm sub(~n##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @benchmark_fib:nn:nn
        benchmark_fib.fib1<0>(~prev##0:wybe.int, ~tmp#3##0:wybe.int, ~tmp#4##0:wybe.int, ?#result##0:wybe.int) #4 @benchmark_fib:nn:nn

    1:
        foreign llvm add(~pprev##0:wybe.int, ~prev##0:wybe.int, ?#result##0:wybe.int) @benchmark_fib:nn:nn



proc naive_fib > (2 calls)
0: benchmark_fib.naive_fib<0>
naive_fib(n##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sle(n##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool) @benchmark_fib:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        benchmark_fib.naive_fib1<0>(~n##0:wybe.int, ?#result##0:wybe.int) #2 @benchmark_fib:nn:nn

    1:
        foreign c {terminal,semipure} error_exit(c"benchmark_fib:5:21":wybe.c_string, c"n should be strictly positive":wybe.c_string) @benchmark_fib:nn:nn
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)



proc naive_fib1 > (3 calls)
0: benchmark_fib.naive_fib1<0>
naive_fib1(n##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(n##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.bool) @benchmark_fib:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm icmp_eq(n##0:wybe.int, 2:wybe.int, ?tmp#6##0:wybe.bool) @benchmark_fib:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            foreign llvm sub(n##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @benchmark_fib:nn:nn
            benchmark_fib.naive_fib1<0>(~tmp#3##0:wybe.int, ?tmp#2##0:wybe.int) #3 @benchmark_fib:nn:nn
            foreign llvm sub(~n##0:wybe.int, 2:wybe.int, ?tmp#5##0:wybe.int) @benchmark_fib:nn:nn
            benchmark_fib.naive_fib1<0>(~tmp#5##0:wybe.int, ?tmp#4##0:wybe.int) #5 @benchmark_fib:nn:nn
            foreign llvm add(~tmp#2##0:wybe.int, ~tmp#4##0:wybe.int, ?#result##0:wybe.int) @benchmark_fib:nn:nn

        1:
            foreign llvm move(1:wybe.int, ?#result##0:wybe.int) @benchmark_fib:nn:nn


    1:
        foreign llvm move(1:wybe.int, ?#result##0:wybe.int) @benchmark_fib:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'benchmark_fib'

source_filename = "!ROOT!/final-dump/benchmark_fib.wybe"
target triple    ????

@"benchmark_fib#constant#0" = private unnamed_addr constant [ ?? x i8 ] c"Elapsed time (s):  \00", align 8
@"benchmark_fib#constant#1" = private unnamed_addr constant [ ?? x i8 ] c"n should be strictly positive\00", align 8
@"benchmark_fib#constant#2" = private unnamed_addr constant [ ?? x i8 ] c"benchmark_fib:5:21\00", align 8
@"benchmark_fib#constant#3" = private unnamed_addr constant [ ?? x i8 ] c"benchmark_fib:18:21\00", align 8
@"benchmark_fib#constant#4" = private unnamed_addr constant [ ?? x i8 ] c"benchmark_fib:30:2\00", align 8
@"benchmark_fib#constant#5" = private unnamed_addr constant [ ?? x i8 ] c"benchmark_fib:32:2\00", align 8
@"benchmark_fib#constant#6" = private unnamed_addr constant [ ?? x i8 ] c"benchmark_fib:35:2\00", align 8
@"benchmark_fib#constant#7" = private unnamed_addr constant [ ?? x i8 ] c"benchmark_fib:37:2\00", align 8
@"benchmark_fib#constant#8" = private unnamed_addr constant [ ?? x i8 ] c"benchmark_fib:40:2\00", align 8
@"benchmark_fib#constant#9" = private unnamed_addr constant {i64, ptr} { i64 19, ptr @"benchmark_fib#constant#0" }, align 8
@"benchmark_fib#constant#10" = private unnamed_addr constant {ptr} { ptr @"benchmark_fib.#anon#1<1>" }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc double @benchmark_end(i64)
declare external ccc void @benchmark_start(i64)
declare external ccc void @error_exit(i64, i64)
declare external ccc void @print_float(double)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"benchmark_fib.<0>"() {
  call ccc void @benchmark_start(ptr @"benchmark_fib#constant#4")
  %"res##0" = tail call fastcc i64 @"benchmark_fib.naive_fib<0>"(i64 42)
  %"time##0" = call ccc double @benchmark_end(ptr @"benchmark_fib#constant#5")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"benchmark_fib#constant#9" to i64 ))
  call ccc void @print_float(double %"time##0")
  call ccc void @putchar(i8 10)
  call ccc void @benchmark_start(ptr @"benchmark_fib#constant#6")
  %"res##1" = tail call fastcc i64 @"benchmark_fib.fib<0>"(i64 42)
  %"time##1" = call ccc double @benchmark_end(ptr @"benchmark_fib#constant#7")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"benchmark_fib#constant#9" to i64 ))
  call ccc void @print_float(double %"time##1")
  call ccc void @putchar(i8 10)
  call ccc void @benchmark_start(ptr @"benchmark_fib#constant#8")
  %"tmp#36##0" = load ptr, ptr @"benchmark_fib#constant#10"
  tail call fastcc void %"tmp#36##0"(ptr @"benchmark_fib#constant#10")
  %"time##2" = call ccc double @benchmark_end(ptr @"benchmark_fib#constant#8")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"benchmark_fib#constant#9" to i64 ))
  call ccc void @print_float(double %"time##2")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc void @"benchmark_fib.#anon#1<0>"() {
  %"res##0" = tail call fastcc i64 @"benchmark_fib.naive_fib<0>"(i64 42)
  ret void
}

define external fastcc void @"benchmark_fib.#anon#1<1>"(i64 %"#env##0") {
  %"tmp#0##0" = tail call fastcc i64 @"benchmark_fib.naive_fib<0>"(i64 42)
  ret void
}

define external fastcc i64 @"benchmark_fib.fib<0>"(i64 %"n##0") {
  %"tmp#4##0" = icmp sle i64 %"n##0", 0
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @error_exit(ptr @"benchmark_fib#constant#3", ptr @"benchmark_fib#constant#1")
  ret i64 undef
if.else.0:
  %"tmp#3##0" = icmp eq i64 %"n##0", 1
  br i1 %"tmp#3##0", label %if.then.1, label %if.else.1
if.then.1:
  ret i64 1
if.else.1:
  %"tmp#2##0" = icmp eq i64 %"n##0", 2
  br i1 %"tmp#2##0", label %if.then.2, label %if.else.2
if.then.2:
  ret i64 1
if.else.2:
  %"tmp#1##0" = sub i64 %"n##0", 3
  %"tmp#15##0" = tail call fastcc i64 @"benchmark_fib.fib1<0>"(i64 1, i64 1, i64 %"tmp#1##0")
  ret i64 %"tmp#15##0"
}

define external fastcc i64 @"benchmark_fib.fib1<0>"(i64 %"pprev##0", i64 %"prev##0", i64 %"n##0") {
  %"tmp#5##0" = icmp eq i64 %"n##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#14##0" = add i64 %"pprev##0", %"prev##0"
  ret i64 %"tmp#14##0"
if.else.0:
  %"tmp#3##0" = add i64 %"pprev##0", %"prev##0"
  %"tmp#4##0" = sub i64 %"n##0", 1
  %"tmp#15##0" = tail call fastcc i64 @"benchmark_fib.fib1<0>"(i64 %"prev##0", i64 %"tmp#3##0", i64 %"tmp#4##0")
  ret i64 %"tmp#15##0"
}

define external fastcc i64 @"benchmark_fib.naive_fib<0>"(i64 %"n##0") {
  %"tmp#1##0" = icmp sle i64 %"n##0", 0
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @error_exit(ptr @"benchmark_fib#constant#2", ptr @"benchmark_fib#constant#1")
  ret i64 undef
if.else.0:
  %"tmp#6##0" = tail call fastcc i64 @"benchmark_fib.naive_fib1<0>"(i64 %"n##0")
  ret i64 %"tmp#6##0"
}

define external fastcc i64 @"benchmark_fib.naive_fib1<0>"(i64 %"n##0") {
  %"tmp#7##0" = icmp eq i64 %"n##0", 1
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  ret i64 1
if.else.0:
  %"tmp#6##0" = icmp eq i64 %"n##0", 2
  br i1 %"tmp#6##0", label %if.then.1, label %if.else.1
if.then.1:
  ret i64 1
if.else.1:
  %"tmp#3##0" = sub i64 %"n##0", 1
  %"tmp#2##0" = tail call fastcc i64 @"benchmark_fib.naive_fib1<0>"(i64 %"tmp#3##0")
  %"tmp#5##0" = sub i64 %"n##0", 2
  %"tmp#4##0" = tail call fastcc i64 @"benchmark_fib.naive_fib1<0>"(i64 %"tmp#5##0")
  %"tmp#18##0" = add i64 %"tmp#2##0", %"tmp#4##0"
  ret i64 %"tmp#18##0"
}

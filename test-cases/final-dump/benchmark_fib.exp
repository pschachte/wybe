======================================================================
AFTER EVERYTHING:
 Module benchmark
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : benchmark.benchmark_end<0>
                    benchmark.benchmark_start<0>
  imports         : use wybe.c_string
                    use wybe.float
  resources       : 
  procs           : 

proc benchmark_end > public {inline,semipure} (0 calls)
0: benchmark.benchmark_end<0>
benchmark_end(?time##0:wybe.float, %call_source_location##0:wybe.c_string)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} benchmark_end(~call_source_location##0:wybe.c_string, ?time##0:wybe.float) @benchmark:nn:nn


proc benchmark_start > public {inline,semipure} (0 calls)
0: benchmark.benchmark_start<0>
benchmark_start(%call_source_location##0:wybe.c_string)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} benchmark_start(~call_source_location##0:wybe.c_string) @benchmark:nn:nn

  LLVM code       :

; ModuleID = 'benchmark'


 


declare external ccc  void @benchmark_start(i64)    


declare external ccc  double @benchmark_end(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  double @"benchmark.benchmark_end<0>"(i64  %"call_source_location##0") alwaysinline   {
entry:
  %0 = tail call ccc  double  @benchmark_end(i64  %"call_source_location##0")  
  ret double %0 
}


define external fastcc  void @"benchmark.benchmark_start<0>"(i64  %"call_source_location##0") alwaysinline   {
entry:
  tail call ccc  void  @benchmark_start(i64  %"call_source_location##0")  
  ret void 
}
--------------------------------------------------
 Module benchmark_fib
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : benchmark_fib.<0>
  imports         : use benchmark
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: benchmark_fib.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} benchmark_start(c"benchmark_fib:16:2":wybe.c_string) @benchmark:nn:nn
    benchmark_fib.naive_fib<0>(47:wybe.int, ?res##0:wybe.int) #1 @benchmark_fib:nn:nn
    foreign c {impure} benchmark_end(c"benchmark_fib:18:2":wybe.c_string, ?time##0:wybe.float) @benchmark:nn:nn
    wybe.string.print<0>("Elapsed time (s):  ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @benchmark_fib:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @float:nn:nn
    foreign c print_float(~time##0:wybe.float, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @float:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


proc naive_fib > (1 calls)
0: benchmark_fib.naive_fib<0>
naive_fib(n##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sle(n##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        benchmark_fib.naive_fib1<0>(~n##0:wybe.int, ?#result##0:wybe.int) #2 @benchmark_fib:nn:nn

    1:
        foreign c {terminal,semipure} error_exit(c"benchmark_fib:5:21":wybe.c_string, c"n should be strictly positive":wybe.c_string) @control:nn:nn
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)



proc naive_fib1 > (3 calls)
0: benchmark_fib.naive_fib1<0>
naive_fib1(n##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(n##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm icmp_eq(n##0:wybe.int, 2:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
        case ~tmp#6##0:wybe.bool of
        0:
            foreign llvm sub(n##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @int:nn:nn
            benchmark_fib.naive_fib1<0>(~tmp#3##0:wybe.int, ?tmp#2##0:wybe.int) #3 @benchmark_fib:nn:nn
            foreign llvm sub(~n##0:wybe.int, 2:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
            benchmark_fib.naive_fib1<0>(~tmp#5##0:wybe.int, ?tmp#4##0:wybe.int) #5 @benchmark_fib:nn:nn
            foreign llvm add(~tmp#2##0:wybe.int, ~tmp#4##0:wybe.int, ?#result##0:wybe.int) @int:nn:nn

        1:
            foreign llvm move(1:wybe.int, ?#result##0:wybe.int) @benchmark_fib:nn:nn


    1:
        foreign llvm move(1:wybe.int, ?#result##0:wybe.int) @benchmark_fib:nn:nn


  LLVM code       :

; ModuleID = 'benchmark_fib'


 


@benchmark_fib.3 =    constant {i64, i64} { i64 19, i64 ptrtoint ([?? x i8]* @benchmark_fib.2 to i64) }


@benchmark_fib.2 =    constant [?? x i8] c"Elapsed time (s):  \00"


@benchmark_fib.0 =    constant [?? x i8] c"benchmark_fib:16:2\00"


@benchmark_fib.1 =    constant [?? x i8] c"benchmark_fib:18:2\00"


@benchmark_fib.4 =    constant [?? x i8] c"benchmark_fib:5:21\00"


@benchmark_fib.5 =    constant [?? x i8] c"n should be strictly positive\00"


declare external ccc  void @error_exit(i64, i64)    


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_float(double)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  double @benchmark_end(i64)    


declare external ccc  void @benchmark_start(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"benchmark_fib.<0>"()    {
entry:
  tail call ccc  void  @benchmark_start(i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @benchmark_fib.0, i32 0, i32 0) to i64))  
  %0 = tail call fastcc  i64  @"benchmark_fib.naive_fib<0>"(i64  47)  
  %1 = tail call ccc  double  @benchmark_end(i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @benchmark_fib.1, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @benchmark_fib.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_float(double  %1)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"benchmark_fib.naive_fib<0>"(i64  %"n##0")    {
entry:
  %0 = icmp sle i64 %"n##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @error_exit(i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @benchmark_fib.4, i32 0, i32 0) to i64), i64  ptrtoint (i8* getelementptr inbounds ([?? x i8], [?? x i8]* @benchmark_fib.5, i32 0, i32 0) to i64))  
  ret i64 undef 
if.else:
  %1 = musttail call fastcc  i64  @"benchmark_fib.naive_fib1<0>"(i64  %"n##0")  
  ret i64 %1 
}


define external fastcc  i64 @"benchmark_fib.naive_fib1<0>"(i64  %"n##0")    {
entry:
  %0 = icmp eq i64 %"n##0", 1 
  br i1 %0, label %if.then, label %if.else 
if.then:
  ret i64 1 
if.else:
  %1 = icmp eq i64 %"n##0", 2 
  br i1 %1, label %if.then1, label %if.else1 
if.then1:
  ret i64 1 
if.else1:
  %2 = sub   i64 %"n##0", 1 
  %3 = tail call fastcc  i64  @"benchmark_fib.naive_fib1<0>"(i64  %2)  
  %4 = sub   i64 %"n##0", 2 
  %5 = tail call fastcc  i64  @"benchmark_fib.naive_fib1<0>"(i64  %4)  
  %6 = add   i64 %3, %5 
  ret i64 %6 
}

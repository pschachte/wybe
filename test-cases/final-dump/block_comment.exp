======================================================================
AFTER EVERYTHING:
 Module block_comment
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : block_comment.<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public {impure} (0 calls)
0: block_comment.<0>
(io##0:wybe.phantom, ?io##6:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.string.print_string<0>("print(x:string) creates a newline already":wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #6 @io:nn:nn
    wybe.string.print_string<0>("println(x:string) generates an extra newline?":wybe.string, ~#io##1:wybe.phantom, ?tmp#4##0:wybe.phantom) #7 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("println(x:string) generates an extra newline?":wybe.string, ~#io##2:wybe.phantom, ?tmp#7##0:wybe.phantom) #8 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?#io##3:wybe.phantom) @io:nn:nn
    foreign c putchar('c':wybe.char, ~#io##3:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?#io##4:wybe.phantom) @io:nn:nn
    foreign c print_int(1:wybe.int, ~#io##4:wybe.phantom, ?tmp#13##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#13##0:wybe.phantom, ?#io##5:wybe.phantom) @io:nn:nn
    foreign c print_int(1:wybe.int, ~#io##5:wybe.phantom, ?#io##6:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'block_comment'


 


declare external ccc  void @print_int(i64)    


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


@block_comment.6 =    constant {i64, i64} { i64 45, i64 ptrtoint ([?? x i8]* @block_comment.5 to i64) }


@block_comment.5 =    constant [?? x i8] c"println(x:string) generates an extra newline?\00"


@block_comment.4 =    constant {i64, i64} { i64 45, i64 ptrtoint ([?? x i8]* @block_comment.3 to i64) }


@block_comment.3 =    constant [?? x i8] c"println(x:string) generates an extra newline?\00"


@block_comment.2 =    constant {i64, i64} { i64 41, i64 ptrtoint ([?? x i8]* @block_comment.1 to i64) }


@block_comment.1 =    constant [?? x i8] c"print(x:string) creates a newline already\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"block_comment.<0>"()    {
entry:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @block_comment.2, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @block_comment.4, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @block_comment.6, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @putchar(i8  99)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  1)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  1)  
  ret void 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module block_comment
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : block_comment.<0>
  constants       : 0:: CStringInfo {cstringChars = "print(x:string) creates a newline already"}
                    1:: StructInfo {structSize = 16, structData = [IntStructMember 41 8,PointerStructMember block_comment#constant#0]}
                    2:: CStringInfo {cstringChars = "println(x:string) generates an extra newline?"}
                    3:: StructInfo {structSize = 16, structData = [IntStructMember 45 8,PointerStructMember block_comment#constant#2]}
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: block_comment.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("print(x:string) creates a newline already":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @block_comment:nn:nn
    wybe.string.print<0>("println(x:string) generates an extra newline?":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6 @block_comment:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @block_comment:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @block_comment:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @block_comment:nn:nn
    wybe.string.print<0>("println(x:string) generates an extra newline?":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @block_comment:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @block_comment:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @block_comment:nn:nn
    foreign c putchar(99:wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @block_comment:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @block_comment:nn:nn
    foreign c print_int(1:wybe.int, ~tmp#9##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @block_comment:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @block_comment:nn:nn
    foreign c print_int(1:wybe.int, ~tmp#13##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @block_comment:nn:nn
    foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @block_comment:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'block_comment'

source_filename = "!ROOT!/final-dump/block_comment.wybe"
target triple    ????

@"block_comment#constant#0" = private unnamed_addr constant [ ?? x i8 ] c"print(x:string) creates a newline already\00", align 8
@"block_comment#constant#1" = private unnamed_addr constant {i64, ptr} { i64 41, ptr @"block_comment#constant#0" }, align 8
@"block_comment#constant#2" = private unnamed_addr constant [ ?? x i8 ] c"println(x:string) generates an extra newline?\00", align 8
@"block_comment#constant#3" = private unnamed_addr constant {i64, ptr} { i64 45, ptr @"block_comment#constant#2" }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"block_comment.<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"block_comment#constant#1" to i64 ))
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"block_comment#constant#3" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"block_comment#constant#3" to i64 ))
  call ccc void @putchar(i8 10)
  call ccc void @putchar(i8 99)
  call ccc void @putchar(i8 10)
  call ccc void @print_int(i64 1)
  call ccc void @putchar(i8 10)
  call ccc void @print_int(i64 1)
  ret void
}

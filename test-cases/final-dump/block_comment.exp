======================================================================
AFTER EVERYTHING:
 Module block_comment
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : block_comment.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: block_comment.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("print(x:string) creates a newline already":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @block_comment:nn:nn
    wybe.string.print<0>("println(x:string) generates an extra newline?":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    wybe.string.print<0>("println(x:string) generates an extra newline?":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @io:nn:nn
    foreign c putchar('c':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @char:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @io:nn:nn
    foreign c print_int(1:wybe.int, ~tmp#9##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @io:nn:nn
    foreign c print_int(1:wybe.int, ~tmp#13##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn

  LLVM code       :

; ModuleID = 'block_comment'


 


@block_comment.1 =    constant {i64, i64} { i64 41, i64 ptrtoint ([?? x i8]* @block_comment.0 to i64) }


@block_comment.3 =    constant {i64, i64} { i64 45, i64 ptrtoint ([?? x i8]* @block_comment.2 to i64) }


@block_comment.0 =    constant [?? x i8] c"print(x:string) creates a newline already\00"


@block_comment.2 =    constant [?? x i8] c"println(x:string) generates an extra newline?\00"


declare external ccc  void @print_int(i64)    


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"block_comment.<0>"()    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @block_comment.1, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @block_comment.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @block_comment.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @putchar(i8  99)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  1)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  1)  
  ret void 
}

======================================================================
AFTER EVERYTHING:
 Module main_hello
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : main_hello.<0>
  imports         : use command_line
                    use wybe
  resources       : 
  procs           : 

*main* > public {impure} (0 calls) 
0: main_hello.<0>
(*#globals##0:wybe.phantom, *?#globals##5:wybe.phantom):
  GlobalFlows: {<<command_line.arguments>>::{FlowIn}, <<command_line.exit_code>>::{FlowOut}, <<wybe.io.io>>::{FlowIn, FlowOut}} 
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(<<command_line.exit_code>>:wybe.int, 42:wybe.int, ~*#globals##0:wybe.phantom, ?*#globals##1:wybe.phantom)
    wybe.string.print_string<0>("hello, world!":wybe.string, ~*#globals##1:wybe.phantom, ?*tmp#5##0:wybe.phantom) #5 @io:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom, ~*tmp#5##0:wybe.phantom, ?*#globals##2:wybe.phantom)
    foreign c putchar('\n':wybe.char, ~%tmp#6##0:wybe.phantom, ?%tmp#8##0:wybe.phantom) @io:nn:nn
    foreign lpvm load(<<command_line.arguments>>:wybe.array(wybe.c_string), ?%arguments##0:wybe.array(wybe.c_string), ~*#globals##2:wybe.phantom, ?*#globals##3:wybe.phantom)
    foreign lpvm access(~%arguments##0:wybe.array(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int)
    foreign c print_int(~tmp#0##0:wybe.int, ~%tmp#8##0:wybe.phantom, ?%tmp#14##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(<<wybe.io.io>>:wybe.phantom, ~%tmp#14##0:wybe.phantom, ~*#globals##3:wybe.phantom, ?*#globals##4:wybe.phantom)
    wybe.string.print_string<0>(" command line argument(s)":wybe.string, ~*#globals##4:wybe.phantom, ?*tmp#17##0:wybe.phantom) #6 @io:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom, ~*tmp#17##0:wybe.phantom, ?*tmp#19##0:wybe.phantom)
    foreign c putchar('\n':wybe.char, ~%tmp#18##0:wybe.phantom, ?%tmp#20##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(<<wybe.io.io>>:wybe.phantom, ~%tmp#20##0:wybe.phantom, ~*tmp#19##0:wybe.phantom, ?*#globals##5:wybe.phantom)

  LLVM code       :

; ModuleID = 'main_hello'


 


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


declare external ccc  void @print_int(i64)    


@main_hello.8 =    constant {i64, i64} { i64 25, i64 ptrtoint ([?? x i8]* @main_hello.7 to i64) }


@main_hello.7 =    constant [?? x i8] c" command line argument(s)\00"


@main_hello.2 =    constant {i64, i64} { i64 13, i64 ptrtoint ([?? x i8]* @main_hello.1 to i64) }


@main_hello.1 =    constant [?? x i8] c"hello, world!\00"


@"resource#command_line.arguments" = external   global i64 


@"resource#command_line.exit_code" = external   global i64 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"main_hello.<0>"()    {
entry:
  store  i64 42, i64* @"resource#command_line.exit_code" 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @main_hello.2, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %3 = load  i64, i64* @"resource#command_line.arguments" 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  tail call ccc  void  @print_int(i64  %6)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @main_hello.8, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

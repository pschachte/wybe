======================================================================
AFTER EVERYTHING:
 Module command_line
  representation  : (not a type)
  public submods  : 
  public resources: argc: command_line.argc
                    arguments: command_line.arguments
                    argv: command_line.argv
                    command: command_line.command
                    exit_code: command_line.exit_code
  public procs    : command_line.<0>
                    command_line.set_exit_code<0>
  imports         : use wybe
  resources       : argc: fromList [(command_line.argc,wybe.int @command_line:nn:nn)] @command_line:nn:nn
                    arguments: fromList [(command_line.arguments,wybe.array(wybe.string) = array(argc @command_line:nn:nn, argv @command_line:nn:nn) @command_line:nn:nn @command_line:nn:nn)] @command_line:nn:nn
                    argv: fromList [(command_line.argv,wybe.array.raw_array(wybe.string) @command_line:nn:nn)] @command_line:nn:nn
                    command: fromList [(command_line.command,wybe.string = "" @command_line:nn:nn @command_line:nn:nn)] @command_line:nn:nn
                    exit_code: fromList [(command_line.exit_code,wybe.int = 0 @command_line:nn:nn @command_line:nn:nn)] @command_line:nn:nn
  procs           : 

*main* > public (0 calls)
0: command_line.<0>
(argc#0:wybe.int, [?argc#0:wybe.int], ?arguments#2:wybe.array(wybe.string), argv#0:wybe.array.raw_array(wybe.string), [?argv#0:wybe.array.raw_array(wybe.string)], ?command#2:wybe.string, ?exit_code#1:wybe.int, io#0:wybe.phantom, [?io#0:wybe.phantom]):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$9#0:wybe.array(?T))
    foreign lpvm mutate(~tmp$9#0:wybe.array(?T), ?tmp$10#0:wybe.array(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, argc#0:wybe.int)
    foreign lpvm mutate(~tmp$10#0:wybe.array(?T), ?tmp$1#0:wybe.array(wybe.string), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, argv#0:wybe.array.raw_array(wybe.string))
    wybe.array.[|]<0>(?command#2:wybe.string, ?arguments#2:wybe.array(wybe.string), ~tmp$1#0:wybe.array(wybe.string), ?tmp$2#0:wybe.bool) #2 @command_line:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign c {terminal,semipure} error_exit("Erroneous program argument vector":wybe.string) @control:nn:nn
        foreign llvm move(0:wybe.int, ?exit_code#1:wybe.int)

    1:
        foreign llvm move(0:wybe.int, ?exit_code#1:wybe.int) @command_line:nn:nn



set_exit_code > public {inline} (0 calls)
0: command_line.set_exit_code<0>
set_exit_code(code#0:wybe.int, [exit_code#0:wybe.int], ?exit_code#1:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(~code#0:wybe.int, ?exit_code#1:wybe.int) @command_line:nn:nn

  LLVM code       :

; ModuleID = 'command_line'


 


declare external ccc  void @error_exit(i64)    


declare external fastcc  {i64, i64, i1} @"wybe.array.[|]<0>"(i64)    


@command_line.16 =    constant [34 x i8] c"Erroneous program argument vector\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  {i64, i64, i64} @"command_line.<0>"(i64  %"argc#0", i64  %"argv#0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 %"argc#0", i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"argv#0", i64* %8 
  %9 = tail call fastcc  {i64, i64, i1}  @"wybe.array.[|]<0>"(i64  %3)  
  %10 = extractvalue {i64, i64, i1} %9, 0 
  %11 = extractvalue {i64, i64, i1} %9, 1 
  %12 = extractvalue {i64, i64, i1} %9, 2 
  br i1 %12, label %if.then, label %if.else 
if.then:
  %13 = insertvalue {i64, i64, i64} undef, i64 %11, 0 
  %14 = insertvalue {i64, i64, i64} %13, i64 %10, 1 
  %15 = insertvalue {i64, i64, i64} %14, i64 0, 2 
  ret {i64, i64, i64} %15 
if.else:
  %17 = ptrtoint i8* getelementptr inbounds ([34 x i8], [34 x i8]* @command_line.16, i32 0, i32 0) to i64 
  tail call ccc  void  @error_exit(i64  %17)  
  %18 = insertvalue {i64, i64, i64} undef, i64 %11, 0 
  %19 = insertvalue {i64, i64, i64} %18, i64 %10, 1 
  %20 = insertvalue {i64, i64, i64} %19, i64 0, 2 
  ret {i64, i64, i64} %20 
}


define external fastcc  i64 @"command_line.set_exit_code<0>"(i64  %"code#0")    {
entry:
  ret i64 %"code#0" 
}
--------------------------------------------------
 Module main_hello
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : main_hello.<0>
  imports         : use command_line
                    use wybe
  resources       : 
  procs           : 

*main* > public (0 calls)
0: main_hello.<0>
(arguments#0:wybe.array(wybe.string), [?arguments#0:wybe.array(wybe.string)], command#0:wybe.string, [?command#0:wybe.string], [exit_code#0:wybe.int], ?exit_code#1:wybe.int, io#0:wybe.phantom, ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(42:wybe.int, ?#exit_code#1:wybe.int) @command_line:nn:nn
    foreign c print_string("hello, world!":wybe.string, ~#io#0:wybe.phantom, ?tmp$5#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$5#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    foreign lpvm access(arguments#0:wybe.array(wybe.string), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn
    foreign c print_string(" command line argument(s)":wybe.string, ~#io#2:wybe.phantom, ?tmp$11#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$11#0:wybe.phantom, ?#io#3:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'main_hello'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external ccc  void @print_int(i64)    


@main_hello.6 =    constant [26 x i8] c" command line argument(s)\00"


@main_hello.1 =    constant [14 x i8] c"hello, world!\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"main_hello.<0>"(i64  %"arguments#0", i64  %"command#0")    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([14 x i8], [14 x i8]* @main_hello.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  %3 = inttoptr i64 %"arguments#0" to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  tail call ccc  void  @print_int(i64  %5)  
  %7 = ptrtoint i8* getelementptr inbounds ([26 x i8], [26 x i8]* @main_hello.6, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %7)  
  tail call ccc  void  @putchar(i8  10)  
  ret i64 42 
}

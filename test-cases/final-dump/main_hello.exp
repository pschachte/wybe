======================================================================
AFTER EVERYTHING:
 Module main_hello
  public submods  : 
  public types    : 
  public resources: 
  public procs    : main_hello.<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], [exit_code#0:wybe.int], ?exit_code#1:wybe.int, io#0:wybe.phantom, ?io#3:wybe.phantom): AliasPairs: []
    foreign llvm move(42:wybe.int, ?#exit_code#1:wybe.int) @wybe:nn:nn
    foreign c print_string("hello, world!":wybe.string, ~#io#0:wybe.phantom, ?tmp$5#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$5#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign llvm sub(argc#0:wybe.int, 1:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign c print_string(" command line argument(s)":wybe.string, ~#io#2:wybe.phantom, ?tmp$12#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$12#0:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'main_hello'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external ccc  void @print_int(i64)    


@main_hello.3 =    constant [26 x i8] c" command line argument(s)\00"


@main_hello.1 =    constant [14 x i8] c"hello, world!\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"main_hello.<0>"(i64  %"argc#0", i64  %"argv#0")    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([14 x i8], [14 x i8]* @main_hello.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  %"tmp$0#0" = sub   i64 %"argc#0", 1 
  tail call ccc  void  @print_int(i64  %"tmp$0#0")  
  %4 = ptrtoint i8* getelementptr inbounds ([26 x i8], [26 x i8]* @main_hello.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  tail call ccc  void  @putchar(i8  10)  
  ret i64 42 
}

======================================================================
AFTER EVERYTHING:
 Module mixed_fields
  representation  : address
  public submods  : 
  public resources: 
  public procs    : mixed_fields.<0>
                    mixed_fields.=<0>
                    mixed_fields.f1<0>
                    mixed_fields.f1<1>
                    mixed_fields.f2<0>
                    mixed_fields.f2<1>
                    mixed_fields.f3<0>
                    mixed_fields.f3<1>
                    mixed_fields.f4<0>
                    mixed_fields.f4<1>
                    mixed_fields.f5<0>
                    mixed_fields.f5<1>
                    mixed_fields.f6<0>
                    mixed_fields.f6<1>
                    mixed_fields.mixed<0>
                    mixed_fields.mixed<1>
                    mixed_fields.printit<0>
                    mixed_fields.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: mixed_fields.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?tmp#8##0:mixed_fields) @mixed_fields:nn:nn
    foreign lpvm mutate(~tmp#8##0:mixed_fields, ?tmp#9##0:mixed_fields, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 'a':wybe.char) @mixed_fields:nn:nn
    foreign lpvm mutate(~tmp#9##0:mixed_fields, ?tmp#10##0:mixed_fields, 1:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 1:wybe.bool) @mixed_fields:nn:nn
    foreign lpvm mutate(~tmp#10##0:mixed_fields, ?tmp#11##0:mixed_fields, 2:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 'A':wybe.char) @mixed_fields:nn:nn
    foreign lpvm mutate(~tmp#11##0:mixed_fields, ?tmp#12##0:mixed_fields, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 3:wybe.int) @mixed_fields:nn:nn
    foreign lpvm mutate(~tmp#12##0:mixed_fields, ?tmp#13##0:mixed_fields, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 42:wybe.int) @mixed_fields:nn:nn
    foreign lpvm mutate(~tmp#13##0:mixed_fields, ?tmp#0##0:mixed_fields, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 17:wybe.int) @mixed_fields:nn:nn
    mixed_fields.printit<0>(~tmp#0##0:mixed_fields)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @mixed_fields:nn:nn


= > public (1 calls)
0: mixed_fields.=<0>
=(#left##0:mixed_fields, #right##0:mixed_fields, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:mixed_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#f2##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm access(#left##0:mixed_fields, 1:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#f4##0:wybe.bool) @mixed_fields:nn:nn
    foreign lpvm access(#left##0:mixed_fields, 2:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#f6##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm access(#left##0:mixed_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#f1##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(#left##0:mixed_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#f3##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(~#left##0:mixed_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#f5##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(#right##0:mixed_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#f2##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm access(#right##0:mixed_fields, 1:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#f4##0:wybe.bool) @mixed_fields:nn:nn
    foreign lpvm access(#right##0:mixed_fields, 2:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#f6##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm access(#right##0:mixed_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#f1##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(#right##0:mixed_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#f3##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(~#right##0:mixed_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#f5##0:wybe.int) @mixed_fields:nn:nn
    foreign llvm icmp_eq(~#left#f1##0:wybe.int, ~#right#f1##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#f2##0:wybe.char, ~#right#f2##0:wybe.char, ?tmp#2##0:wybe.bool) @char:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#f3##0:wybe.int, ~#right#f3##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#f4##0:wybe.bool, ~#right#f4##0:wybe.bool, ?tmp#4##0:wybe.bool) @bool:nn:nn
                case ~tmp#4##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~#left#f5##0:wybe.int, ~#right#f5##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
                    case ~tmp#5##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign llvm icmp_eq(~#left#f6##0:wybe.char, ~#right#f6##0:wybe.char, ?#success##0:wybe.bool) @char:nn:nn







f1 > public {inline} (1 calls)
0: mixed_fields.f1<0>
f1(#rec##0:mixed_fields, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:mixed_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @mixed_fields:nn:nn
f1 > public {inline} (0 calls)
1: mixed_fields.f1<1>
f1(#rec##0:mixed_fields, ?#rec##1:mixed_fields, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @mixed_fields:nn:nn


f2 > public {inline} (1 calls)
0: mixed_fields.f2<0>
f2(#rec##0:mixed_fields, ?#result##0:wybe.char)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:mixed_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.char) @mixed_fields:nn:nn
f2 > public {inline} (0 calls)
1: mixed_fields.f2<1>
f2(#rec##0:mixed_fields, ?#rec##1:mixed_fields, #field##0:wybe.char)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.char) @mixed_fields:nn:nn


f3 > public {inline} (1 calls)
0: mixed_fields.f3<0>
f3(#rec##0:mixed_fields, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:mixed_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @mixed_fields:nn:nn
f3 > public {inline} (0 calls)
1: mixed_fields.f3<1>
f3(#rec##0:mixed_fields, ?#rec##1:mixed_fields, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @mixed_fields:nn:nn


f4 > public {inline} (1 calls)
0: mixed_fields.f4<0>
f4(#rec##0:mixed_fields, ?#result##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:mixed_fields, 1:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.bool) @mixed_fields:nn:nn
f4 > public {inline} (0 calls)
1: mixed_fields.f4<1>
f4(#rec##0:mixed_fields, ?#rec##1:mixed_fields, #field##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 1:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.bool) @mixed_fields:nn:nn


f5 > public {inline} (1 calls)
0: mixed_fields.f5<0>
f5(#rec##0:mixed_fields, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:mixed_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @mixed_fields:nn:nn
f5 > public {inline} (0 calls)
1: mixed_fields.f5<1>
f5(#rec##0:mixed_fields, ?#rec##1:mixed_fields, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @mixed_fields:nn:nn


f6 > public {inline} (1 calls)
0: mixed_fields.f6<0>
f6(#rec##0:mixed_fields, ?#result##0:wybe.char)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:mixed_fields, 2:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.char) @mixed_fields:nn:nn
f6 > public {inline} (0 calls)
1: mixed_fields.f6<1>
f6(#rec##0:mixed_fields, ?#rec##1:mixed_fields, #field##0:wybe.char)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 2:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.char) @mixed_fields:nn:nn


mixed > public {inline} (1 calls)
0: mixed_fields.mixed<0>
mixed(f1##0:wybe.int, f2##0:wybe.char, f3##0:wybe.int, f4##0:wybe.bool, f5##0:wybe.int, f6##0:wybe.char, ?#result##0:mixed_fields)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?#rec##0:mixed_fields) @mixed_fields:nn:nn
    foreign lpvm mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~f2##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm mutate(~#rec##1:mixed_fields, ?#rec##2:mixed_fields, 1:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~f4##0:wybe.bool) @mixed_fields:nn:nn
    foreign lpvm mutate(~#rec##2:mixed_fields, ?#rec##3:mixed_fields, 2:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~f6##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm mutate(~#rec##3:mixed_fields, ?#rec##4:mixed_fields, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~f1##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm mutate(~#rec##4:mixed_fields, ?#rec##5:mixed_fields, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~f3##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm mutate(~#rec##5:mixed_fields, ?#result##0:mixed_fields, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~f5##0:wybe.int) @mixed_fields:nn:nn
mixed > public {inline} (22 calls)
1: mixed_fields.mixed<1>
mixed(?f1##0:wybe.int, ?f2##0:wybe.char, ?f3##0:wybe.int, ?f4##0:wybe.bool, ?f5##0:wybe.int, ?f6##0:wybe.char, #result##0:mixed_fields)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:mixed_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?f2##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm access(#result##0:mixed_fields, 1:wybe.int, 32:wybe.int, 0:wybe.int, ?f4##0:wybe.bool) @mixed_fields:nn:nn
    foreign lpvm access(#result##0:mixed_fields, 2:wybe.int, 32:wybe.int, 0:wybe.int, ?f6##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm access(#result##0:mixed_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?f1##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(#result##0:mixed_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?f3##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(~#result##0:mixed_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?f5##0:wybe.int) @mixed_fields:nn:nn


printit > public (1 calls)
0: mixed_fields.printit<0>
printit(ob##0:mixed_fields)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(ob##0:mixed_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
    foreign lpvm access(ob##0:mixed_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.char) @mixed_fields:nn:nn
    foreign c putchar(~tmp#1##0:wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @char:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @io:nn:nn
    foreign lpvm access(ob##0:mixed_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @mixed_fields:nn:nn
    foreign c print_int(~tmp#2##0:wybe.int, ~tmp#15##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign lpvm access(ob##0:mixed_fields, 1:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.bool) @mixed_fields:nn:nn
    wybe.bool.print<0>(~tmp#3##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #12 @bool:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#23##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @io:nn:nn
    foreign lpvm access(ob##0:mixed_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @mixed_fields:nn:nn
    foreign c print_int(~tmp#4##0:wybe.int, ~tmp#24##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#28##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @io:nn:nn
    foreign lpvm access(~ob##0:mixed_fields, 2:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.char) @mixed_fields:nn:nn
    foreign c putchar(~tmp#5##0:wybe.char, ~tmp#29##0:wybe.phantom, ?tmp#33##0:wybe.phantom) @char:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


~= > public {inline} (0 calls)
0: mixed_fields.~=<0>
~=(#left##0:mixed_fields, #right##0:mixed_fields, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    mixed_fields.=<0>(~#left##0:mixed_fields, ~#right##0:mixed_fields, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'mixed_fields'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.bool.print<0>"(i1)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"mixed_fields.<0>"()    {
entry:
  %0 = trunc i64 32 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  store  i8 97, i8* %3 
  %4 = add   i64 %2, 1 
  %5 = inttoptr i64 %4 to i1* 
  store  i1 1, i1* %5 
  %6 = add   i64 %2, 2 
  %7 = inttoptr i64 %6 to i8* 
  store  i8 65, i8* %7 
  %8 = add   i64 %2, 8 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 3, i64* %9 
  %10 = add   i64 %2, 16 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 42, i64* %11 
  %12 = add   i64 %2, 24 
  %13 = inttoptr i64 %12 to i64* 
  store  i64 17, i64* %13 
  tail call fastcc  void  @"mixed_fields.printit<0>"(i64  %2)  
  ret void 
}


define external fastcc  i1 @"mixed_fields.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i8* 
  %1 = load  i8, i8* %0 
  %2 = add   i64 %"#left##0", 1 
  %3 = inttoptr i64 %2 to i1* 
  %4 = load  i1, i1* %3 
  %5 = add   i64 %"#left##0", 2 
  %6 = inttoptr i64 %5 to i8* 
  %7 = load  i8, i8* %6 
  %8 = add   i64 %"#left##0", 8 
  %9 = inttoptr i64 %8 to i64* 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"#left##0", 16 
  %12 = inttoptr i64 %11 to i64* 
  %13 = load  i64, i64* %12 
  %14 = add   i64 %"#left##0", 24 
  %15 = inttoptr i64 %14 to i64* 
  %16 = load  i64, i64* %15 
  %17 = inttoptr i64 %"#right##0" to i8* 
  %18 = load  i8, i8* %17 
  %19 = add   i64 %"#right##0", 1 
  %20 = inttoptr i64 %19 to i1* 
  %21 = load  i1, i1* %20 
  %22 = add   i64 %"#right##0", 2 
  %23 = inttoptr i64 %22 to i8* 
  %24 = load  i8, i8* %23 
  %25 = add   i64 %"#right##0", 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = load  i64, i64* %26 
  %28 = add   i64 %"#right##0", 16 
  %29 = inttoptr i64 %28 to i64* 
  %30 = load  i64, i64* %29 
  %31 = add   i64 %"#right##0", 24 
  %32 = inttoptr i64 %31 to i64* 
  %33 = load  i64, i64* %32 
  %34 = icmp eq i64 %10, %27 
  br i1 %34, label %if.then, label %if.else 
if.then:
  %35 = icmp eq i8 %1, %18 
  br i1 %35, label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %36 = icmp eq i64 %13, %30 
  br i1 %36, label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %37 = icmp eq i1 %4, %21 
  br i1 %37, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %38 = icmp eq i64 %16, %33 
  br i1 %38, label %if.then4, label %if.else4 
if.else3:
  ret i1 0 
if.then4:
  %39 = icmp eq i8 %7, %24 
  ret i1 %39 
if.else4:
  ret i1 0 
}


define external fastcc  i64 @"mixed_fields.f1<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"mixed_fields.f1<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 32 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i8 @"mixed_fields.f2<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#rec##0" to i8* 
  %1 = load  i8, i8* %0 
  ret i8 %1 
}


define external fastcc  i64 @"mixed_fields.f2<1>"(i64  %"#rec##0", i8  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 32 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i8* 
  store  i8 %"#field##0", i8* %6 
  ret i64 %2 
}


define external fastcc  i64 @"mixed_fields.f3<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 16 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"mixed_fields.f3<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 32 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 16 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i1 @"mixed_fields.f4<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 1 
  %1 = inttoptr i64 %0 to i1* 
  %2 = load  i1, i1* %1 
  ret i1 %2 
}


define external fastcc  i64 @"mixed_fields.f4<1>"(i64  %"#rec##0", i1  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 32 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 1 
  %7 = inttoptr i64 %6 to i1* 
  store  i1 %"#field##0", i1* %7 
  ret i64 %2 
}


define external fastcc  i64 @"mixed_fields.f5<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 24 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"mixed_fields.f5<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 32 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 24 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i8 @"mixed_fields.f6<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 2 
  %1 = inttoptr i64 %0 to i8* 
  %2 = load  i8, i8* %1 
  ret i8 %2 
}


define external fastcc  i64 @"mixed_fields.f6<1>"(i64  %"#rec##0", i8  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 32 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 2 
  %7 = inttoptr i64 %6 to i8* 
  store  i8 %"#field##0", i8* %7 
  ret i64 %2 
}


define external fastcc  i64 @"mixed_fields.mixed<0>"(i64  %"f1##0", i8  %"f2##0", i64  %"f3##0", i1  %"f4##0", i64  %"f5##0", i8  %"f6##0") alwaysinline   {
entry:
  %0 = trunc i64 32 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  store  i8 %"f2##0", i8* %3 
  %4 = add   i64 %2, 1 
  %5 = inttoptr i64 %4 to i1* 
  store  i1 %"f4##0", i1* %5 
  %6 = add   i64 %2, 2 
  %7 = inttoptr i64 %6 to i8* 
  store  i8 %"f6##0", i8* %7 
  %8 = add   i64 %2, 8 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %"f1##0", i64* %9 
  %10 = add   i64 %2, 16 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %"f3##0", i64* %11 
  %12 = add   i64 %2, 24 
  %13 = inttoptr i64 %12 to i64* 
  store  i64 %"f5##0", i64* %13 
  ret i64 %2 
}


define external fastcc  {i64, i8, i64, i1, i64, i8} @"mixed_fields.mixed<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#result##0" to i8* 
  %1 = load  i8, i8* %0 
  %2 = add   i64 %"#result##0", 1 
  %3 = inttoptr i64 %2 to i1* 
  %4 = load  i1, i1* %3 
  %5 = add   i64 %"#result##0", 2 
  %6 = inttoptr i64 %5 to i8* 
  %7 = load  i8, i8* %6 
  %8 = add   i64 %"#result##0", 8 
  %9 = inttoptr i64 %8 to i64* 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"#result##0", 16 
  %12 = inttoptr i64 %11 to i64* 
  %13 = load  i64, i64* %12 
  %14 = add   i64 %"#result##0", 24 
  %15 = inttoptr i64 %14 to i64* 
  %16 = load  i64, i64* %15 
  %17 = insertvalue {i64, i8, i64, i1, i64, i8} undef, i64 %10, 0 
  %18 = insertvalue {i64, i8, i64, i1, i64, i8} %17, i8 %1, 1 
  %19 = insertvalue {i64, i8, i64, i1, i64, i8} %18, i64 %13, 2 
  %20 = insertvalue {i64, i8, i64, i1, i64, i8} %19, i1 %4, 3 
  %21 = insertvalue {i64, i8, i64, i1, i64, i8} %20, i64 %16, 4 
  %22 = insertvalue {i64, i8, i64, i1, i64, i8} %21, i8 %7, 5 
  ret {i64, i8, i64, i1, i64, i8} %22 
}


define external fastcc  void @"mixed_fields.printit<0>"(i64  %"ob##0")    {
entry:
  %0 = add   i64 %"ob##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  %3 = inttoptr i64 %"ob##0" to i8* 
  %4 = load  i8, i8* %3 
  tail call ccc  void  @putchar(i8  %4)  
  tail call ccc  void  @putchar(i8  10)  
  %5 = add   i64 %"ob##0", 16 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  tail call ccc  void  @print_int(i64  %7)  
  tail call ccc  void  @putchar(i8  10)  
  %8 = add   i64 %"ob##0", 1 
  %9 = inttoptr i64 %8 to i1* 
  %10 = load  i1, i1* %9 
  tail call fastcc  void  @"wybe.bool.print<0>"(i1  %10)  
  tail call ccc  void  @putchar(i8  10)  
  %11 = add   i64 %"ob##0", 24 
  %12 = inttoptr i64 %11 to i64* 
  %13 = load  i64, i64* %12 
  tail call ccc  void  @print_int(i64  %13)  
  tail call ccc  void  @putchar(i8  10)  
  %14 = add   i64 %"ob##0", 2 
  %15 = inttoptr i64 %14 to i8* 
  %16 = load  i8, i8* %15 
  tail call ccc  void  @putchar(i8  %16)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i1 @"mixed_fields.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i1  @"mixed_fields.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}

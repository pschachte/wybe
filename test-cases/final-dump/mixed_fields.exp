======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module mixed_fields
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : mixed_fields.<0>
                    mixed_fields.=<0>
                    mixed_fields.f1<0>
                    mixed_fields.f1<1>
                    mixed_fields.f2<0>
                    mixed_fields.f2<1>
                    mixed_fields.f3<0>
                    mixed_fields.f3<1>
                    mixed_fields.f4<0>
                    mixed_fields.f4<1>
                    mixed_fields.f5<0>
                    mixed_fields.f5<1>
                    mixed_fields.f6<0>
                    mixed_fields.f6<1>
                    mixed_fields.mixed<0>
                    mixed_fields.mixed<1>
                    mixed_fields.printit<0>
                    mixed_fields.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: mixed_fields.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?tmp#8##0:mixed_fields) @mixed_fields:nn:nn
    foreign lpvm mutate(~tmp#8##0:mixed_fields, ?tmp#9##0:mixed_fields, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 'a':wybe.char) @mixed_fields:nn:nn
    foreign lpvm mutate(~tmp#9##0:mixed_fields, ?tmp#10##0:mixed_fields, 1:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 1:wybe.bool) @mixed_fields:nn:nn
    foreign lpvm mutate(~tmp#10##0:mixed_fields, ?tmp#11##0:mixed_fields, 2:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 'A':wybe.char) @mixed_fields:nn:nn
    foreign lpvm mutate(~tmp#11##0:mixed_fields, ?tmp#12##0:mixed_fields, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 3:wybe.int) @mixed_fields:nn:nn
    foreign lpvm mutate(~tmp#12##0:mixed_fields, ?tmp#13##0:mixed_fields, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 42:wybe.int) @mixed_fields:nn:nn
    foreign lpvm mutate(~tmp#13##0:mixed_fields, ?tmp#0##0:mixed_fields, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 17:wybe.int) @mixed_fields:nn:nn
    mixed_fields.printit<0>(~tmp#0##0:mixed_fields)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @mixed_fields:nn:nn


proc = > public (1 calls)
0: mixed_fields.=<0>
=(#left##0:mixed_fields, #right##0:mixed_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:mixed_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#f2##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm access(#left##0:mixed_fields, 1:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#f4##0:wybe.bool) @mixed_fields:nn:nn
    foreign lpvm access(#left##0:mixed_fields, 2:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#f6##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm access(#left##0:mixed_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#f1##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(#left##0:mixed_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#f3##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(~#left##0:mixed_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#f5##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(#right##0:mixed_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#f2##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm access(#right##0:mixed_fields, 1:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#f4##0:wybe.bool) @mixed_fields:nn:nn
    foreign lpvm access(#right##0:mixed_fields, 2:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#f6##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm access(#right##0:mixed_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#f1##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(#right##0:mixed_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#f3##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(~#right##0:mixed_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#f5##0:wybe.int) @mixed_fields:nn:nn
    foreign llvm icmp_eq(~#left#f1##0:wybe.int, ~#right#f1##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#f2##0:wybe.char, ~#right#f2##0:wybe.char, ?tmp#2##0:wybe.bool) @char:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign llvm icmp_eq(~#left#f3##0:wybe.int, ~#right#f3##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
            case ~tmp#3##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#f4##0:wybe.bool, ~#right#f4##0:wybe.bool, ?tmp#4##0:wybe.bool) @bool:nn:nn
                case ~tmp#4##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~#left#f5##0:wybe.int, ~#right#f5##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
                    case ~tmp#5##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign llvm icmp_eq(~#left#f6##0:wybe.char, ~#right#f6##0:wybe.char, ?#success##0:wybe.bool) @char:nn:nn







proc f1 > public {inline} (1 calls)
0: mixed_fields.f1<0>
f1(#rec##0:mixed_fields, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:mixed_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @mixed_fields:nn:nn
proc f1 > public {inline} (0 calls)
1: mixed_fields.f1<1>
f1(#rec##0:mixed_fields, ?#rec##1:mixed_fields, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @mixed_fields:nn:nn


proc f2 > public {inline} (1 calls)
0: mixed_fields.f2<0>
f2(#rec##0:mixed_fields, ?#result##0:wybe.char)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:mixed_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.char) @mixed_fields:nn:nn
proc f2 > public {inline} (0 calls)
1: mixed_fields.f2<1>
f2(#rec##0:mixed_fields, ?#rec##1:mixed_fields, #field##0:wybe.char)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.char) @mixed_fields:nn:nn


proc f3 > public {inline} (1 calls)
0: mixed_fields.f3<0>
f3(#rec##0:mixed_fields, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:mixed_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @mixed_fields:nn:nn
proc f3 > public {inline} (0 calls)
1: mixed_fields.f3<1>
f3(#rec##0:mixed_fields, ?#rec##1:mixed_fields, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @mixed_fields:nn:nn


proc f4 > public {inline} (1 calls)
0: mixed_fields.f4<0>
f4(#rec##0:mixed_fields, ?#result##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:mixed_fields, 1:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.bool) @mixed_fields:nn:nn
proc f4 > public {inline} (0 calls)
1: mixed_fields.f4<1>
f4(#rec##0:mixed_fields, ?#rec##1:mixed_fields, #field##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 1:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.bool) @mixed_fields:nn:nn


proc f5 > public {inline} (1 calls)
0: mixed_fields.f5<0>
f5(#rec##0:mixed_fields, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:mixed_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @mixed_fields:nn:nn
proc f5 > public {inline} (0 calls)
1: mixed_fields.f5<1>
f5(#rec##0:mixed_fields, ?#rec##1:mixed_fields, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @mixed_fields:nn:nn


proc f6 > public {inline} (1 calls)
0: mixed_fields.f6<0>
f6(#rec##0:mixed_fields, ?#result##0:wybe.char)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:mixed_fields, 2:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.char) @mixed_fields:nn:nn
proc f6 > public {inline} (0 calls)
1: mixed_fields.f6<1>
f6(#rec##0:mixed_fields, ?#rec##1:mixed_fields, #field##0:wybe.char)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 2:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.char) @mixed_fields:nn:nn


proc mixed > public {inline} (1 calls)
0: mixed_fields.mixed<0>
mixed(f1##0:wybe.int, f2##0:wybe.char, f3##0:wybe.int, f4##0:wybe.bool, f5##0:wybe.int, f6##0:wybe.char, ?#result##0:mixed_fields)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?#rec##0:mixed_fields) @mixed_fields:nn:nn
    foreign lpvm mutate(~#rec##0:mixed_fields, ?#rec##1:mixed_fields, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~f2##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm mutate(~#rec##1:mixed_fields, ?#rec##2:mixed_fields, 1:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~f4##0:wybe.bool) @mixed_fields:nn:nn
    foreign lpvm mutate(~#rec##2:mixed_fields, ?#rec##3:mixed_fields, 2:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~f6##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm mutate(~#rec##3:mixed_fields, ?#rec##4:mixed_fields, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~f1##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm mutate(~#rec##4:mixed_fields, ?#rec##5:mixed_fields, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~f3##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm mutate(~#rec##5:mixed_fields, ?#result##0:mixed_fields, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~f5##0:wybe.int) @mixed_fields:nn:nn
proc mixed > public {inline} (22 calls)
1: mixed_fields.mixed<1>
mixed(?f1##0:wybe.int, ?f2##0:wybe.char, ?f3##0:wybe.int, ?f4##0:wybe.bool, ?f5##0:wybe.int, ?f6##0:wybe.char, #result##0:mixed_fields)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:mixed_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?f2##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm access(#result##0:mixed_fields, 1:wybe.int, 32:wybe.int, 0:wybe.int, ?f4##0:wybe.bool) @mixed_fields:nn:nn
    foreign lpvm access(#result##0:mixed_fields, 2:wybe.int, 32:wybe.int, 0:wybe.int, ?f6##0:wybe.char) @mixed_fields:nn:nn
    foreign lpvm access(#result##0:mixed_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?f1##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(#result##0:mixed_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?f3##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm access(~#result##0:mixed_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?f5##0:wybe.int) @mixed_fields:nn:nn


proc printit > public (1 calls)
0: mixed_fields.printit<0>
printit(ob##0:mixed_fields)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(ob##0:mixed_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @mixed_fields:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @mixed_fields:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @mixed_fields:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @mixed_fields:nn:nn
    foreign lpvm access(ob##0:mixed_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.char) @mixed_fields:nn:nn
    foreign c putchar(~tmp#1##0:wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @mixed_fields:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @mixed_fields:nn:nn
    foreign lpvm access(ob##0:mixed_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @mixed_fields:nn:nn
    foreign c print_int(~tmp#2##0:wybe.int, ~tmp#15##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @mixed_fields:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#19##0:wybe.phantom, ?tmp#20##0:wybe.phantom) @mixed_fields:nn:nn
    foreign lpvm store(~%tmp#20##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @mixed_fields:nn:nn
    foreign lpvm access(ob##0:mixed_fields, 1:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.bool) @mixed_fields:nn:nn
    wybe.bool.print<0>(~tmp#3##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #12 @mixed_fields:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#23##0:wybe.phantom) @mixed_fields:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @mixed_fields:nn:nn
    foreign lpvm access(ob##0:mixed_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @mixed_fields:nn:nn
    foreign c print_int(~tmp#4##0:wybe.int, ~tmp#24##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @mixed_fields:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#28##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @mixed_fields:nn:nn
    foreign lpvm access(~ob##0:mixed_fields, 2:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.char) @mixed_fields:nn:nn
    foreign c putchar(~tmp#5##0:wybe.char, ~tmp#29##0:wybe.phantom, ?tmp#33##0:wybe.phantom) @mixed_fields:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @mixed_fields:nn:nn
    foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @mixed_fields:nn:nn


proc ~= > public {inline} (0 calls)
0: mixed_fields.~=<0>
~=(#left##0:mixed_fields, #right##0:mixed_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    mixed_fields.=<0>(~#left##0:mixed_fields, ~#right##0:mixed_fields, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'mixed_fields'

source_filename = "!ROOT!/final-dump/mixed_fields.wybe"
target triple    ????


declare external fastcc void @"wybe.bool.print<0>"(i1)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"mixed_fields.<0>"() {
  %"tmp#14##0" = call ccc ptr @wybe_malloc(i32 32)
  %"tmp#8##0" = ptrtoint ptr %"tmp#14##0" to i64
  %"tmp#15##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i8 97, ptr %"tmp#15##0"
  %"tmp#16##0" = add i64 %"tmp#8##0", 1
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  store i1 1, ptr %"tmp#17##0"
  %"tmp#18##0" = add i64 %"tmp#8##0", 2
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  store i8 65, ptr %"tmp#19##0"
  %"tmp#20##0" = add i64 %"tmp#8##0", 8
  %"tmp#21##0" = inttoptr i64 %"tmp#20##0" to ptr
  store i64 3, ptr %"tmp#21##0"
  %"tmp#22##0" = add i64 %"tmp#8##0", 16
  %"tmp#23##0" = inttoptr i64 %"tmp#22##0" to ptr
  store i64 42, ptr %"tmp#23##0"
  %"tmp#24##0" = add i64 %"tmp#8##0", 24
  %"tmp#25##0" = inttoptr i64 %"tmp#24##0" to ptr
  store i64 17, ptr %"tmp#25##0"
  tail call fastcc void @"mixed_fields.printit<0>"(i64 %"tmp#8##0")
  ret void
}

define external fastcc i1 @"mixed_fields.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#21##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#f2##0" = load i8, ptr %"tmp#21##0"
  %"tmp#22##0" = add i64 %"#left##0", 1
  %"tmp#23##0" = inttoptr i64 %"tmp#22##0" to ptr
  %"#left#f4##0" = load i1, ptr %"tmp#23##0"
  %"tmp#24##0" = add i64 %"#left##0", 2
  %"tmp#25##0" = inttoptr i64 %"tmp#24##0" to ptr
  %"#left#f6##0" = load i8, ptr %"tmp#25##0"
  %"tmp#26##0" = add i64 %"#left##0", 8
  %"tmp#27##0" = inttoptr i64 %"tmp#26##0" to ptr
  %"#left#f1##0" = load i64, ptr %"tmp#27##0"
  %"tmp#28##0" = add i64 %"#left##0", 16
  %"tmp#29##0" = inttoptr i64 %"tmp#28##0" to ptr
  %"#left#f3##0" = load i64, ptr %"tmp#29##0"
  %"tmp#30##0" = add i64 %"#left##0", 24
  %"tmp#31##0" = inttoptr i64 %"tmp#30##0" to ptr
  %"#left#f5##0" = load i64, ptr %"tmp#31##0"
  %"tmp#32##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#f2##0" = load i8, ptr %"tmp#32##0"
  %"tmp#33##0" = add i64 %"#right##0", 1
  %"tmp#34##0" = inttoptr i64 %"tmp#33##0" to ptr
  %"#right#f4##0" = load i1, ptr %"tmp#34##0"
  %"tmp#35##0" = add i64 %"#right##0", 2
  %"tmp#36##0" = inttoptr i64 %"tmp#35##0" to ptr
  %"#right#f6##0" = load i8, ptr %"tmp#36##0"
  %"tmp#37##0" = add i64 %"#right##0", 8
  %"tmp#38##0" = inttoptr i64 %"tmp#37##0" to ptr
  %"#right#f1##0" = load i64, ptr %"tmp#38##0"
  %"tmp#39##0" = add i64 %"#right##0", 16
  %"tmp#40##0" = inttoptr i64 %"tmp#39##0" to ptr
  %"#right#f3##0" = load i64, ptr %"tmp#40##0"
  %"tmp#41##0" = add i64 %"#right##0", 24
  %"tmp#42##0" = inttoptr i64 %"tmp#41##0" to ptr
  %"#right#f5##0" = load i64, ptr %"tmp#42##0"
  %"tmp#1##0" = icmp eq i64 %"#left#f1##0", %"#right#f1##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = icmp eq i8 %"#left#f2##0", %"#right#f2##0"
  br i1 %"tmp#2##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#3##0" = icmp eq i64 %"#left#f3##0", %"#right#f3##0"
  br i1 %"tmp#3##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#4##0" = icmp eq i1 %"#left#f4##0", %"#right#f4##0"
  br i1 %"tmp#4##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#5##0" = icmp eq i64 %"#left#f5##0", %"#right#f5##0"
  br i1 %"tmp#5##0", label %if.then.4, label %if.else.4
if.then.4:
  %"tmp#43##0" = icmp eq i8 %"#left#f6##0", %"#right#f6##0"
  ret i1 %"tmp#43##0"
if.else.4:
  ret i1 0
if.else.3:
  ret i1 0
if.else.2:
  ret i1 0
if.else.1:
  ret i1 0
if.else.0:
  ret i1 0
}

define external fastcc i64 @"mixed_fields.f1<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"mixed_fields.f1<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 32, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i8 @"mixed_fields.f2<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = load i8, ptr %"tmp#0##0"
  ret i8 %"tmp#1##0"
}

define external fastcc i64 @"mixed_fields.f2<1>"(i64 %"#rec##0", i8 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 32, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i8 %"#field##0", ptr %"tmp#3##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"mixed_fields.f3<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 16
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"mixed_fields.f3<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 32, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 16
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i1 @"mixed_fields.f4<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 1
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i1, ptr %"tmp#1##0"
  ret i1 %"tmp#2##0"
}

define external fastcc i64 @"mixed_fields.f4<1>"(i64 %"#rec##0", i1 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 32, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 1
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i1 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"mixed_fields.f5<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 24
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"mixed_fields.f5<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 32, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 24
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i8 @"mixed_fields.f6<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 2
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i8, ptr %"tmp#1##0"
  ret i8 %"tmp#2##0"
}

define external fastcc i64 @"mixed_fields.f6<1>"(i64 %"#rec##0", i8 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 32, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 2
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i8 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"mixed_fields.mixed<0>"(i64 %"f1##0", i8 %"f2##0", i64 %"f3##0", i1 %"f4##0", i64 %"f5##0", i8 %"f6##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 32)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i8 %"f2##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i1 %"f4##0", ptr %"tmp#3##0"
  %"tmp#4##0" = add i64 %"#rec##0", 2
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i8 %"f6##0", ptr %"tmp#5##0"
  %"tmp#6##0" = add i64 %"#rec##0", 8
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  store i64 %"f1##0", ptr %"tmp#7##0"
  %"tmp#8##0" = add i64 %"#rec##0", 16
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"f3##0", ptr %"tmp#9##0"
  %"tmp#10##0" = add i64 %"#rec##0", 24
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  store i64 %"f5##0", ptr %"tmp#11##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i8, i64, i1, i64, i8} @"mixed_fields.mixed<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i8, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i1, ptr %"tmp#3##0"
  %"tmp#5##0" = add i64 %"#result##0", 2
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#7##0" = load i8, ptr %"tmp#6##0"
  %"tmp#8##0" = add i64 %"#result##0", 8
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#9##0"
  %"tmp#11##0" = add i64 %"#result##0", 16
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  %"tmp#13##0" = load i64, ptr %"tmp#12##0"
  %"tmp#14##0" = add i64 %"#result##0", 24
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  %"tmp#16##0" = load i64, ptr %"tmp#15##0"
  %"tmp#17##0" = insertvalue {i64, i8, i64, i1, i64, i8} undef, i64 %"tmp#10##0", 0
  %"tmp#18##0" = insertvalue {i64, i8, i64, i1, i64, i8} %"tmp#17##0", i8 %"tmp#1##0", 1
  %"tmp#19##0" = insertvalue {i64, i8, i64, i1, i64, i8} %"tmp#18##0", i64 %"tmp#13##0", 2
  %"tmp#20##0" = insertvalue {i64, i8, i64, i1, i64, i8} %"tmp#19##0", i1 %"tmp#4##0", 3
  %"tmp#21##0" = insertvalue {i64, i8, i64, i1, i64, i8} %"tmp#20##0", i64 %"tmp#16##0", 4
  %"tmp#22##0" = insertvalue {i64, i8, i64, i1, i64, i8} %"tmp#21##0", i8 %"tmp#7##0", 5
  ret {i64, i8, i64, i1, i64, i8} %"tmp#22##0"
}

define external fastcc void @"mixed_fields.printit<0>"(i64 %"ob##0") {
  %"tmp#35##0" = add i64 %"ob##0", 8
  %"tmp#36##0" = inttoptr i64 %"tmp#35##0" to ptr
  %"tmp#0##0" = load i64, ptr %"tmp#36##0"
  call ccc void @print_int(i64 %"tmp#0##0")
  call ccc void @putchar(i8 10)
  %"tmp#37##0" = inttoptr i64 %"ob##0" to ptr
  %"tmp#1##0" = load i8, ptr %"tmp#37##0"
  call ccc void @putchar(i8 %"tmp#1##0")
  call ccc void @putchar(i8 10)
  %"tmp#38##0" = add i64 %"ob##0", 16
  %"tmp#39##0" = inttoptr i64 %"tmp#38##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#39##0"
  call ccc void @print_int(i64 %"tmp#2##0")
  call ccc void @putchar(i8 10)
  %"tmp#40##0" = add i64 %"ob##0", 1
  %"tmp#41##0" = inttoptr i64 %"tmp#40##0" to ptr
  %"tmp#3##0" = load i1, ptr %"tmp#41##0"
  tail call fastcc void @"wybe.bool.print<0>"(i1 %"tmp#3##0")
  call ccc void @putchar(i8 10)
  %"tmp#42##0" = add i64 %"ob##0", 24
  %"tmp#43##0" = inttoptr i64 %"tmp#42##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#43##0"
  call ccc void @print_int(i64 %"tmp#4##0")
  call ccc void @putchar(i8 10)
  %"tmp#44##0" = add i64 %"ob##0", 2
  %"tmp#45##0" = inttoptr i64 %"tmp#44##0" to ptr
  %"tmp#5##0" = load i8, ptr %"tmp#45##0"
  call ccc void @putchar(i8 %"tmp#5##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i1 @"mixed_fields.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"mixed_fields.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

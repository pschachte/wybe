======================================================================
AFTER EVERYTHING:
 Module multi_specz_cyclic_exe
  public submods  : 
  public types    : 
  public resources: 
  public procs    : multi_specz_cyclic_exe.<0>
                    multi_specz_cyclic_exe.main<0>
  imports         : use multi_specz_cyclic_lib
                    use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    multi_specz_cyclic_exe.main<0>(~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @multi_specz_cyclic_exe:16:2


main > public (1 calls)
0: main(io#0:wybe.phantom, ?io#6:wybe.phantom):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm alloc(16:wybe.int, ?tmp$6#0:multi_specz_cyclic_lib.position)
    foreign lpvm mutate(~tmp$6#0:multi_specz_cyclic_lib.position, ?tmp$7#0:multi_specz_cyclic_lib.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$7#0:multi_specz_cyclic_lib.position, ?tmp$0#0:multi_specz_cyclic_lib.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm alloc(16:wybe.int, ?tmp$10#0:multi_specz_cyclic_lib.position)
    foreign lpvm mutate(~tmp$10#0:multi_specz_cyclic_lib.position, ?tmp$11#0:multi_specz_cyclic_lib.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$11#0:multi_specz_cyclic_lib.position, ?tmp$1#0:multi_specz_cyclic_lib.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm alloc(16:wybe.int, ?tmp$14#0:multi_specz_cyclic_lib.position)
    foreign lpvm mutate(~tmp$14#0:multi_specz_cyclic_lib.position, ?tmp$15#0:multi_specz_cyclic_lib.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$15#0:multi_specz_cyclic_lib.position, ?tmp$2#0:multi_specz_cyclic_lib.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int)
    foreign lpvm alloc(16:wybe.int, ?tmp$18#0:multi_specz_cyclic_lib.position)
    foreign lpvm mutate(~tmp$18#0:multi_specz_cyclic_lib.position, ?tmp$19#0:multi_specz_cyclic_lib.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int)
    foreign lpvm mutate(~tmp$19#0:multi_specz_cyclic_lib.position, ?tmp$3#0:multi_specz_cyclic_lib.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:wybe.int)
    foreign c print_string("=============":wybe.string, ~#io#0:wybe.phantom, ?tmp$22#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$22#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    multi_specz_cyclic_lib.foo1<0>[3](~tmp$0#0:multi_specz_cyclic_lib.position, ~tmp$1#0:multi_specz_cyclic_lib.position, tmp$2#0:multi_specz_cyclic_lib.position, tmp$3#0:multi_specz_cyclic_lib.position, 3:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @multi_specz_cyclic_exe:9:6
    foreign c print_string("-------------":wybe.string, ~#io#2:wybe.phantom, ?tmp$25#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$25#0:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    multi_specz_cyclic_lib.printPosition<0>(~tmp$2#0:multi_specz_cyclic_lib.position, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @multi_specz_cyclic_exe:11:6
    multi_specz_cyclic_lib.printPosition<0>(~tmp$3#0:multi_specz_cyclic_lib.position, ~#io#4:wybe.phantom, ?#io#5:wybe.phantom) @multi_specz_cyclic_exe:12:6
    foreign c print_string("=============":wybe.string, ~#io#5:wybe.phantom, ?tmp$28#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$28#0:wybe.phantom, ?#io#6:wybe.phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'multi_specz_cyclic_exe'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external fastcc  void @"multi_specz_cyclic_lib.printPosition<0>"(i64)    


declare external fastcc  void @"multi_specz_cyclic_lib.foo1<0>[3]"(i64, i64, i64, i64, i64)    


@multi_specz_cyclic_exe.37 =    constant [14 x i8] c"=============\00"


@multi_specz_cyclic_exe.35 =    constant [14 x i8] c"-------------\00"


@multi_specz_cyclic_exe.33 =    constant [14 x i8] c"=============\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"multi_specz_cyclic_exe.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  tail call fastcc  void  @"multi_specz_cyclic_exe.main<0>"()  
  ret void 
}


define external fastcc  void @"multi_specz_cyclic_exe.main<0>"()    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 0, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 1, i64* %8 
  %9 = trunc i64 16 to i32  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  %9)  
  %11 = ptrtoint i8* %10 to i64 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 0, i64* %13 
  %14 = add   i64 %11, 8 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 2, i64* %16 
  %17 = trunc i64 16 to i32  
  %18 = tail call ccc  i8*  @wybe_malloc(i32  %17)  
  %19 = ptrtoint i8* %18 to i64 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  store  i64 0, i64* %21 
  %22 = add   i64 %19, 8 
  %23 = inttoptr i64 %22 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  store  i64 3, i64* %24 
  %25 = trunc i64 16 to i32  
  %26 = tail call ccc  i8*  @wybe_malloc(i32  %25)  
  %27 = ptrtoint i8* %26 to i64 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  store  i64 0, i64* %29 
  %30 = add   i64 %27, 8 
  %31 = inttoptr i64 %30 to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  store  i64 4, i64* %32 
  %34 = ptrtoint i8* getelementptr inbounds ([14 x i8], [14 x i8]* @multi_specz_cyclic_exe.33, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %34)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.foo1<0>[3]"(i64  %3, i64  %11, i64  %19, i64  %27, i64  3)  
  %36 = ptrtoint i8* getelementptr inbounds ([14 x i8], [14 x i8]* @multi_specz_cyclic_exe.35, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %36)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.printPosition<0>"(i64  %19)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.printPosition<0>"(i64  %27)  
  %38 = ptrtoint i8* getelementptr inbounds ([14 x i8], [14 x i8]* @multi_specz_cyclic_exe.37, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %38)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module multi_specz_cyclic_lib
  public submods  : 
  public types    : position: (multi_specz_cyclic_lib.position,Just address)
  public resources: 
  public procs    : multi_specz_cyclic_lib.foo1<0>
                    multi_specz_cyclic_lib.modifyAndPrint<0>
                    multi_specz_cyclic_lib.printPosition<0>
                    multi_specz_cyclic_lib.position./=<0>
                    multi_specz_cyclic_lib.position.=<0>
                    multi_specz_cyclic_lib.position.position<0>
                    multi_specz_cyclic_lib.position.position<1>
                    multi_specz_cyclic_lib.position.x<0>
                    multi_specz_cyclic_lib.position.x<1>
                    multi_specz_cyclic_lib.position.y<0>
                    multi_specz_cyclic_lib.position.y<1>
  imports         : public use multi_specz_cyclic_lib.position
                    use multi_specz_cyclic_lib2
                    use wybe
  types           : position/public  is address { position(x:int, y:int) @multi_specz_cyclic_lib:3:25  }  @multi_specz_cyclic_lib:3:5
  resources       : 
  submodules      : multi_specz_cyclic_lib.position
  procs           : 

foo1 > public (0 calls)
0: foo1(x1#0:multi_specz_cyclic_lib.position, x2#0:multi_specz_cyclic_lib.position, x3#0:multi_specz_cyclic_lib.position, x4#0:multi_specz_cyclic_lib.position, n#0:wybe.int, io#0:wybe.phantom, ?io#4:wybe.phantom):
 AliasPairs: []
 AliasMultiSpeczInfo: [x1#0,x2#0,x3#0,x4#0]
    foreign llvm sub(~n#0:wybe.int, 1:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
    foreign llvm icmp slt(tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        multi_specz_cyclic_lib2.foo2<0>(~x2#0:multi_specz_cyclic_lib.position, ~x3#0:multi_specz_cyclic_lib.position, ~x4#0:multi_specz_cyclic_lib.position, ~x1#0:multi_specz_cyclic_lib.position, ~tmp$0#0:wybe.int, ~#io#0:wybe.phantom, ?#io#4:wybe.phantom) @multi_specz_cyclic_lib:26:14

    1:
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x1#0:multi_specz_cyclic_lib.position, 111:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @multi_specz_cyclic_lib:21:14
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x2#0:multi_specz_cyclic_lib.position, 222:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @multi_specz_cyclic_lib:22:14
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x3#0:multi_specz_cyclic_lib.position, 333:wybe.int, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @multi_specz_cyclic_lib:23:14
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x4#0:multi_specz_cyclic_lib.position, 444:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @multi_specz_cyclic_lib:24:14

  [3]:
    foreign llvm sub(~n#0:wybe.int, 1:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
    foreign llvm icmp slt(tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        multi_specz_cyclic_lib2.foo2<0>[9](~x2#0:multi_specz_cyclic_lib.position, ~x3#0:multi_specz_cyclic_lib.position, ~x4#0:multi_specz_cyclic_lib.position, ~x1#0:multi_specz_cyclic_lib.position, ~tmp$0#0:wybe.int, ~#io#0:wybe.phantom, ?#io#4:wybe.phantom) @multi_specz_cyclic_lib:26:14

    1:
        multi_specz_cyclic_lib.modifyAndPrint<0>[1](~x1#0:multi_specz_cyclic_lib.position, 111:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @multi_specz_cyclic_lib:21:14
        multi_specz_cyclic_lib.modifyAndPrint<0>[1](~x2#0:multi_specz_cyclic_lib.position, 222:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @multi_specz_cyclic_lib:22:14
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x3#0:multi_specz_cyclic_lib.position, 333:wybe.int, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @multi_specz_cyclic_lib:23:14
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x4#0:multi_specz_cyclic_lib.position, 444:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @multi_specz_cyclic_lib:24:14


  [c]:
    foreign llvm sub(~n#0:wybe.int, 1:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
    foreign llvm icmp slt(tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        multi_specz_cyclic_lib2.foo2<0>[6](~x2#0:multi_specz_cyclic_lib.position, ~x3#0:multi_specz_cyclic_lib.position, ~x4#0:multi_specz_cyclic_lib.position, ~x1#0:multi_specz_cyclic_lib.position, ~tmp$0#0:wybe.int, ~#io#0:wybe.phantom, ?#io#4:wybe.phantom) @multi_specz_cyclic_lib:26:14

    1:
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x1#0:multi_specz_cyclic_lib.position, 111:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @multi_specz_cyclic_lib:21:14
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x2#0:multi_specz_cyclic_lib.position, 222:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @multi_specz_cyclic_lib:22:14
        multi_specz_cyclic_lib.modifyAndPrint<0>[1](~x3#0:multi_specz_cyclic_lib.position, 333:wybe.int, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @multi_specz_cyclic_lib:23:14
        multi_specz_cyclic_lib.modifyAndPrint<0>[1](~x4#0:multi_specz_cyclic_lib.position, 444:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @multi_specz_cyclic_lib:24:14



modifyAndPrint > public (4 calls)
0: modifyAndPrint(pos#0:multi_specz_cyclic_lib.position, v#0:wybe.int, io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 AliasMultiSpeczInfo: [pos#0]
    foreign lpvm mutate noalias(~%pos#0:multi_specz_cyclic_lib.position, ?%pos#1:multi_specz_cyclic_lib.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
    multi_specz_cyclic_lib.printPosition<0>(~pos#1:multi_specz_cyclic_lib.position, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @multi_specz_cyclic_lib:15:6
  [1]:
    foreign lpvm mutate noalias(~%pos#0:multi_specz_cyclic_lib.position, ?%pos#1:multi_specz_cyclic_lib.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~v#0:wybe.int)
    multi_specz_cyclic_lib.printPosition<0>(~pos#1:multi_specz_cyclic_lib.position, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @multi_specz_cyclic_lib:15:6


printPosition > public (1 calls)
0: printPosition(pos#0:multi_specz_cyclic_lib.position, io#0:wybe.phantom, ?io#5:wybe.phantom):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign c print_string(" (":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign lpvm access(pos#0:multi_specz_cyclic_lib.position, 0:wybe.int, ?tmp$0#0:wybe.int)
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign c print_string(",":wybe.string, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    foreign lpvm access(~pos#0:multi_specz_cyclic_lib.position, 8:wybe.int, ?tmp$1#0:wybe.int)
    foreign c print_int(~tmp$1#0:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
    foreign c print_string(")":wybe.string, ~#io#4:wybe.phantom, ?tmp$14#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$14#0:wybe.phantom, ?#io#5:wybe.phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'multi_specz_cyclic_lib'


 


declare external fastcc  void @"multi_specz_cyclic_lib2.foo2<0>"(i64, i64, i64, i64, i64)    


declare external fastcc  void @"multi_specz_cyclic_lib2.foo2<0>[6]"(i64, i64, i64, i64, i64)    


declare external fastcc  void @"multi_specz_cyclic_lib2.foo2<0>[9]"(i64, i64, i64, i64, i64)    


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external ccc  void @print_int(i64)    


@multi_specz_cyclic_lib.22 =    constant [2 x i8] c")\00"


@multi_specz_cyclic_lib.16 =    constant [2 x i8] c",\00"


@multi_specz_cyclic_lib.11 =    constant [3 x i8] c" (\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"multi_specz_cyclic_lib.foo1<0>"(i64  %"x1#0", i64  %"x2#0", i64  %"x3#0", i64  %"x4#0", i64  %"n#0")    {
entry:
  %"tmp$0#0" = sub   i64 %"n#0", 1 
  %"tmp$1#0" = icmp slt i64 %"tmp$0#0", 0 
  br i1 %"tmp$1#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x1#0", i64  111)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x2#0", i64  222)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x3#0", i64  333)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x4#0", i64  444)  
  ret void 
if.else:
  tail call fastcc  void  @"multi_specz_cyclic_lib2.foo2<0>"(i64  %"x2#0", i64  %"x3#0", i64  %"x4#0", i64  %"x1#0", i64  %"tmp$0#0")  
  ret void 
}


define external fastcc  void @"multi_specz_cyclic_lib.foo1<0>[c]"(i64  %"x1#0", i64  %"x2#0", i64  %"x3#0", i64  %"x4#0", i64  %"n#0")    {
entry:
  %"tmp$0#0" = sub   i64 %"n#0", 1 
  %"tmp$1#0" = icmp slt i64 %"tmp$0#0", 0 
  br i1 %"tmp$1#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x1#0", i64  111)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x2#0", i64  222)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>[1]"(i64  %"x3#0", i64  333)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>[1]"(i64  %"x4#0", i64  444)  
  ret void 
if.else:
  tail call fastcc  void  @"multi_specz_cyclic_lib2.foo2<0>[6]"(i64  %"x2#0", i64  %"x3#0", i64  %"x4#0", i64  %"x1#0", i64  %"tmp$0#0")  
  ret void 
}


define external fastcc  void @"multi_specz_cyclic_lib.foo1<0>[3]"(i64  %"x1#0", i64  %"x2#0", i64  %"x3#0", i64  %"x4#0", i64  %"n#0")    {
entry:
  %"tmp$0#0" = sub   i64 %"n#0", 1 
  %"tmp$1#0" = icmp slt i64 %"tmp$0#0", 0 
  br i1 %"tmp$1#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>[1]"(i64  %"x1#0", i64  111)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>[1]"(i64  %"x2#0", i64  222)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x3#0", i64  333)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x4#0", i64  444)  
  ret void 
if.else:
  tail call fastcc  void  @"multi_specz_cyclic_lib2.foo2<0>[9]"(i64  %"x2#0", i64  %"x3#0", i64  %"x4#0", i64  %"x1#0", i64  %"tmp$0#0")  
  ret void 
}


define external fastcc  void @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"pos#0", i64  %"v#0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"pos#0" to i8* 
  %6 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i32  8, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"v#0", i64* %8 
  tail call fastcc  void  @"multi_specz_cyclic_lib.printPosition<0>"(i64  %3)  
  ret void 
}


define external fastcc  void @"multi_specz_cyclic_lib.modifyAndPrint<0>[1]"(i64  %"pos#0", i64  %"v#0")    {
entry:
  %9 = inttoptr i64 %"pos#0" to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"v#0", i64* %10 
  tail call fastcc  void  @"multi_specz_cyclic_lib.printPosition<0>"(i64  %"pos#0")  
  ret void 
}


define external fastcc  void @"multi_specz_cyclic_lib.printPosition<0>"(i64  %"pos#0")    {
entry:
  %12 = ptrtoint i8* getelementptr inbounds ([3 x i8], [3 x i8]* @multi_specz_cyclic_lib.11, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %12)  
  %13 = inttoptr i64 %"pos#0" to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  tail call ccc  void  @print_int(i64  %15)  
  %17 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @multi_specz_cyclic_lib.16, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %17)  
  %18 = add   i64 %"pos#0", 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  tail call ccc  void  @print_int(i64  %21)  
  %23 = ptrtoint i8* getelementptr inbounds ([2 x i8], [2 x i8]* @multi_specz_cyclic_lib.22, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %23)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module multi_specz_cyclic_lib.position
  public submods  : 
  public types    : 
  public resources: 
  public procs    : multi_specz_cyclic_lib.position./=<0>
                    multi_specz_cyclic_lib.position.=<0>
                    multi_specz_cyclic_lib.position.position<0>
                    multi_specz_cyclic_lib.position.position<1>
                    multi_specz_cyclic_lib.position.x<0>
                    multi_specz_cyclic_lib.position.x<1>
                    multi_specz_cyclic_lib.position.y<0>
                    multi_specz_cyclic_lib.position.y<1>
  imports         : use multi_specz_cyclic_lib
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public inline test (0 calls)
0: /=($left#0:multi_specz_cyclic_lib.position, $right#0:multi_specz_cyclic_lib.position, ?$$#0:wybe.bool):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm access($left#0:multi_specz_cyclic_lib.position, 0:wybe.int, ?tmp$4#0:wybe.int)
    foreign lpvm access(~$left#0:multi_specz_cyclic_lib.position, 8:wybe.int, ?tmp$5#0:wybe.int)
    foreign lpvm access($right#0:multi_specz_cyclic_lib.position, 0:wybe.int, ?tmp$6#0:wybe.int)
    foreign lpvm access(~$right#0:multi_specz_cyclic_lib.position, 8:wybe.int, ?tmp$7#0:wybe.int)
    foreign llvm icmp eq(~tmp$4#0:wybe.int, ~tmp$6#0:wybe.int, ?tmp$8#0:wybe.bool) @wybe:nn:nn
    case ~tmp$8#0:wybe.bool of
    0:
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~tmp$5#0:wybe.int, ~tmp$7#0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
        case ~tmp$1#0:wybe.bool of
        0:
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)




= > public inline test (6 calls)
0: =($left#0:multi_specz_cyclic_lib.position, $right#0:multi_specz_cyclic_lib.position, ?$$#0:wybe.bool):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm access($left#0:multi_specz_cyclic_lib.position, 0:wybe.int, ?$left$x#0:wybe.int)
    foreign lpvm access(~$left#0:multi_specz_cyclic_lib.position, 8:wybe.int, ?$left$y#0:wybe.int)
    foreign lpvm access($right#0:multi_specz_cyclic_lib.position, 0:wybe.int, ?$right$x#0:wybe.int)
    foreign lpvm access(~$right#0:multi_specz_cyclic_lib.position, 8:wybe.int, ?$right$y#0:wybe.int)
    foreign llvm icmp eq(~$left$x#0:wybe.int, ~$right$x#0:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
    case ~tmp$2#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm icmp eq(~$left$y#0:wybe.int, ~$right$y#0:wybe.int, ?$$#0:wybe.bool) @wybe:nn:nn



position > public inline (0 calls)
0: position(x#0:wybe.int, y#0:wybe.int, ?$#0:multi_specz_cyclic_lib.position):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!multi_specz_cyclic_lib.position)
    foreign lpvm mutate(~%$rec#0:multi_specz_cyclic_lib.position, ?%$rec#1:multi_specz_cyclic_lib.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:multi_specz_cyclic_lib.position, ?%$#0:multi_specz_cyclic_lib.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y#0:wybe.int)
position > public inline (4 calls)
1: position(?x#0:wybe.int, ?y#0:wybe.int, $#0:multi_specz_cyclic_lib.position):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm access($#0:multi_specz_cyclic_lib.position, 0:wybe.int, ?x#0:wybe.int)
    foreign lpvm access(~$#0:multi_specz_cyclic_lib.position, 8:wybe.int, ?y#0:wybe.int)


x > public inline (0 calls)
0: x($rec#0:multi_specz_cyclic_lib.position, ?$#0:wybe.int):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm access(~$rec#0:multi_specz_cyclic_lib.position, 0:wybe.int, ?$#0:wybe.int)
x > public inline (0 calls)
1: x($rec#0:multi_specz_cyclic_lib.position, ?$rec#1:multi_specz_cyclic_lib.position, $field#0:wybe.int):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm mutate noalias(~%$rec#0:multi_specz_cyclic_lib.position, ?%$rec#1:multi_specz_cyclic_lib.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)


y > public inline (0 calls)
0: y($rec#0:multi_specz_cyclic_lib.position, ?$#0:wybe.int):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm access(~$rec#0:multi_specz_cyclic_lib.position, 8:wybe.int, ?$#0:wybe.int)
y > public inline (0 calls)
1: y($rec#0:multi_specz_cyclic_lib.position, ?$rec#1:multi_specz_cyclic_lib.position, $field#0:wybe.int):
 AliasPairs: []
 AliasMultiSpeczInfo: []
    foreign lpvm mutate noalias(~%$rec#0:multi_specz_cyclic_lib.position, ?%$rec#1:multi_specz_cyclic_lib.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)

  LLVM code       :

; ModuleID = 'multi_specz_cyclic_lib.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"multi_specz_cyclic_lib.position./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"$right#0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"$right#0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"tmp$8#0" = icmp eq i64 %3, %10 
  br i1 %"tmp$8#0", label %if.then, label %if.else 
if.then:
  %"tmp$1#0" = icmp eq i64 %7, %14 
  br i1 %"tmp$1#0", label %if.then1, label %if.else1 
if.else:
  ret i1 1 
if.then1:
  ret i1 0 
if.else1:
  ret i1 1 
}


define external fastcc  i1 @"multi_specz_cyclic_lib.position.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %15 = inttoptr i64 %"$left#0" to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %18 = add   i64 %"$left#0", 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = inttoptr i64 %"$right#0" to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %25 = add   i64 %"$right#0", 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %"tmp$2#0" = icmp eq i64 %17, %24 
  br i1 %"tmp$2#0", label %if.then, label %if.else 
if.then:
  %"$$#0" = icmp eq i64 %21, %28 
  ret i1 %"$$#0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"multi_specz_cyclic_lib.position.position<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %29 = trunc i64 16 to i32  
  %30 = tail call ccc  i8*  @wybe_malloc(i32  %29)  
  %31 = ptrtoint i8* %30 to i64 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  store  i64 %"x#0", i64* %33 
  %34 = add   i64 %31, 8 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  store  i64 %"y#0", i64* %36 
  ret i64 %31 
}


define external fastcc  {i64, i64} @"multi_specz_cyclic_lib.position.position<1>"(i64  %"$#0")    {
entry:
  %37 = inttoptr i64 %"$#0" to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  %39 = load  i64, i64* %38 
  %40 = add   i64 %"$#0", 8 
  %41 = inttoptr i64 %40 to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  %43 = load  i64, i64* %42 
  %44 = insertvalue {i64, i64} undef, i64 %39, 0 
  %45 = insertvalue {i64, i64} %44, i64 %43, 1 
  ret {i64, i64} %45 
}


define external fastcc  i64 @"multi_specz_cyclic_lib.position.x<0>"(i64  %"$rec#0")    {
entry:
  %46 = inttoptr i64 %"$rec#0" to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  %48 = load  i64, i64* %47 
  ret i64 %48 
}


define external fastcc  i64 @"multi_specz_cyclic_lib.position.x<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %49 = trunc i64 16 to i32  
  %50 = tail call ccc  i8*  @wybe_malloc(i32  %49)  
  %51 = ptrtoint i8* %50 to i64 
  %52 = inttoptr i64 %51 to i8* 
  %53 = inttoptr i64 %"$rec#0" to i8* 
  %54 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %52, i8*  %53, i32  %54, i32  8, i1  0)  
  %55 = inttoptr i64 %51 to i64* 
  %56 = getelementptr  i64, i64* %55, i64 0 
  store  i64 %"$field#0", i64* %56 
  ret i64 %51 
}


define external fastcc  i64 @"multi_specz_cyclic_lib.position.y<0>"(i64  %"$rec#0")    {
entry:
  %57 = add   i64 %"$rec#0", 8 
  %58 = inttoptr i64 %57 to i64* 
  %59 = getelementptr  i64, i64* %58, i64 0 
  %60 = load  i64, i64* %59 
  ret i64 %60 
}


define external fastcc  i64 @"multi_specz_cyclic_lib.position.y<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %61 = trunc i64 16 to i32  
  %62 = tail call ccc  i8*  @wybe_malloc(i32  %61)  
  %63 = ptrtoint i8* %62 to i64 
  %64 = inttoptr i64 %63 to i8* 
  %65 = inttoptr i64 %"$rec#0" to i8* 
  %66 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %64, i8*  %65, i32  %66, i32  8, i1  0)  
  %67 = add   i64 %63, 8 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  store  i64 %"$field#0", i64* %69 
  ret i64 %63 
}
--------------------------------------------------
 Module multi_specz_cyclic_lib2
  public submods  : 
  public types    : 
  public resources: 
  public procs    : multi_specz_cyclic_lib2.foo2<0>
  imports         : use multi_specz_cyclic_lib
                    use wybe
  types           : 
  resources       : 
  procs           : 

foo2 > public (0 calls)
0: foo2(x1#0:multi_specz_cyclic_lib.position, x2#0:multi_specz_cyclic_lib.position, x3#0:multi_specz_cyclic_lib.position, x4#0:multi_specz_cyclic_lib.position, n#0:wybe.int, io#0:wybe.phantom, ?io#4:wybe.phantom):
 AliasPairs: []
 AliasMultiSpeczInfo: [x1#0,x2#0,x3#0,x4#0]
    foreign llvm sub(~n#0:wybe.int, 1:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
    foreign llvm icmp slt(tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        multi_specz_cyclic_lib.foo1<0>(~x2#0:multi_specz_cyclic_lib.position, ~x3#0:multi_specz_cyclic_lib.position, ~x4#0:multi_specz_cyclic_lib.position, ~x1#0:multi_specz_cyclic_lib.position, ~tmp$0#0:wybe.int, ~#io#0:wybe.phantom, ?#io#4:wybe.phantom) @multi_specz_cyclic_lib2:11:14

    1:
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x1#0:multi_specz_cyclic_lib.position, 111:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @multi_specz_cyclic_lib2:6:14
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x2#0:multi_specz_cyclic_lib.position, 222:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @multi_specz_cyclic_lib2:7:14
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x3#0:multi_specz_cyclic_lib.position, 333:wybe.int, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @multi_specz_cyclic_lib2:8:14
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x4#0:multi_specz_cyclic_lib.position, 444:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @multi_specz_cyclic_lib2:9:14

  [6]:
    foreign llvm sub(~n#0:wybe.int, 1:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
    foreign llvm icmp slt(tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        multi_specz_cyclic_lib.foo1<0>[3](~x2#0:multi_specz_cyclic_lib.position, ~x3#0:multi_specz_cyclic_lib.position, ~x4#0:multi_specz_cyclic_lib.position, ~x1#0:multi_specz_cyclic_lib.position, ~tmp$0#0:wybe.int, ~#io#0:wybe.phantom, ?#io#4:wybe.phantom) @multi_specz_cyclic_lib2:11:14

    1:
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x1#0:multi_specz_cyclic_lib.position, 111:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @multi_specz_cyclic_lib2:6:14
        multi_specz_cyclic_lib.modifyAndPrint<0>[1](~x2#0:multi_specz_cyclic_lib.position, 222:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @multi_specz_cyclic_lib2:7:14
        multi_specz_cyclic_lib.modifyAndPrint<0>[1](~x3#0:multi_specz_cyclic_lib.position, 333:wybe.int, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @multi_specz_cyclic_lib2:8:14
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x4#0:multi_specz_cyclic_lib.position, 444:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @multi_specz_cyclic_lib2:9:14


  [9]:
    foreign llvm sub(~n#0:wybe.int, 1:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
    foreign llvm icmp slt(tmp$0#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        multi_specz_cyclic_lib.foo1<0>[c](~x2#0:multi_specz_cyclic_lib.position, ~x3#0:multi_specz_cyclic_lib.position, ~x4#0:multi_specz_cyclic_lib.position, ~x1#0:multi_specz_cyclic_lib.position, ~tmp$0#0:wybe.int, ~#io#0:wybe.phantom, ?#io#4:wybe.phantom) @multi_specz_cyclic_lib2:11:14

    1:
        multi_specz_cyclic_lib.modifyAndPrint<0>[1](~x1#0:multi_specz_cyclic_lib.position, 111:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @multi_specz_cyclic_lib2:6:14
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x2#0:multi_specz_cyclic_lib.position, 222:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @multi_specz_cyclic_lib2:7:14
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x3#0:multi_specz_cyclic_lib.position, 333:wybe.int, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @multi_specz_cyclic_lib2:8:14
        multi_specz_cyclic_lib.modifyAndPrint<0>[1](~x4#0:multi_specz_cyclic_lib.position, 444:wybe.int, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @multi_specz_cyclic_lib2:9:14


  LLVM code       :

; ModuleID = 'multi_specz_cyclic_lib2'


 


declare external fastcc  void @"multi_specz_cyclic_lib.foo1<0>"(i64, i64, i64, i64, i64)    


declare external fastcc  void @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64, i64)    


declare external fastcc  void @"multi_specz_cyclic_lib.foo1<0>[c]"(i64, i64, i64, i64, i64)    


declare external fastcc  void @"multi_specz_cyclic_lib.modifyAndPrint<0>[1]"(i64, i64)    


declare external fastcc  void @"multi_specz_cyclic_lib.foo1<0>[3]"(i64, i64, i64, i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"multi_specz_cyclic_lib2.foo2<0>"(i64  %"x1#0", i64  %"x2#0", i64  %"x3#0", i64  %"x4#0", i64  %"n#0")    {
entry:
  %"tmp$0#0" = sub   i64 %"n#0", 1 
  %"tmp$1#0" = icmp slt i64 %"tmp$0#0", 0 
  br i1 %"tmp$1#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x1#0", i64  111)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x2#0", i64  222)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x3#0", i64  333)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x4#0", i64  444)  
  ret void 
if.else:
  tail call fastcc  void  @"multi_specz_cyclic_lib.foo1<0>"(i64  %"x2#0", i64  %"x3#0", i64  %"x4#0", i64  %"x1#0", i64  %"tmp$0#0")  
  ret void 
}


define external fastcc  void @"multi_specz_cyclic_lib2.foo2<0>[9]"(i64  %"x1#0", i64  %"x2#0", i64  %"x3#0", i64  %"x4#0", i64  %"n#0")    {
entry:
  %"tmp$0#0" = sub   i64 %"n#0", 1 
  %"tmp$1#0" = icmp slt i64 %"tmp$0#0", 0 
  br i1 %"tmp$1#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>[1]"(i64  %"x1#0", i64  111)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x2#0", i64  222)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x3#0", i64  333)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>[1]"(i64  %"x4#0", i64  444)  
  ret void 
if.else:
  tail call fastcc  void  @"multi_specz_cyclic_lib.foo1<0>[c]"(i64  %"x2#0", i64  %"x3#0", i64  %"x4#0", i64  %"x1#0", i64  %"tmp$0#0")  
  ret void 
}


define external fastcc  void @"multi_specz_cyclic_lib2.foo2<0>[6]"(i64  %"x1#0", i64  %"x2#0", i64  %"x3#0", i64  %"x4#0", i64  %"n#0")    {
entry:
  %"tmp$0#0" = sub   i64 %"n#0", 1 
  %"tmp$1#0" = icmp slt i64 %"tmp$0#0", 0 
  br i1 %"tmp$1#0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x1#0", i64  111)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>[1]"(i64  %"x2#0", i64  222)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>[1]"(i64  %"x3#0", i64  333)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x4#0", i64  444)  
  ret void 
if.else:
  tail call fastcc  void  @"multi_specz_cyclic_lib.foo1<0>[3]"(i64  %"x2#0", i64  %"x3#0", i64  %"x4#0", i64  %"x1#0", i64  %"tmp$0#0")  
  ret void 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module common_fields
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : common_fields.<0>
                    common_fields.=<0>
                    common_fields.DVD<0>
                    common_fields.DVD<1>
                    common_fields.author<0>
                    common_fields.author<1>
                    common_fields.book<0>
                    common_fields.book<1>
                    common_fields.director<0>
                    common_fields.director<1>
                    common_fields.frequency<0>
                    common_fields.frequency<1>
                    common_fields.genre<0>
                    common_fields.genre<1>
                    common_fields.id<0>
                    common_fields.id<1>
                    common_fields.magazine<0>
                    common_fields.magazine<1>
                    common_fields.other<0>
                    common_fields.other<1>
                    common_fields.title<0>
                    common_fields.title<1>
                    common_fields.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: common_fields.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(6,(common_fields.id<1>,fromList [NonAliasedParamCond 0 []])),(21,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm alloc(32:wybe.int, ?tmp#30##0:common_fields) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#30##0:common_fields, ?tmp#31##0:common_fields, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 1415:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#31##0:common_fields, ?tmp#32##0:common_fields, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 1419:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#32##0:common_fields, ?tmp#33##0:common_fields, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 1423:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#33##0:common_fields, ?tmp#0##0:common_fields, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int) @common_fields:nn:nn
    foreign lpvm alloc(24:wybe.int, ?tmp#42##0:common_fields) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#42##0:common_fields, ?tmp#43##0:common_fields, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1419:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#43##0:common_fields, ?tmp#44##0:common_fields, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.int) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#44##0:common_fields, ?tmp#45##0:common_fields, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @common_fields:nn:nn
    foreign llvm or(~tmp#45##0:common_fields, 1:wybe.int, ?tmp#1##0:common_fields) @common_fields:nn:nn
    common_fields.title<0>(tmp#0##0:common_fields, ?tmp#2##0:wybe.string) #2 @common_fields:nn:nn
    wybe.string.print<0>(~tmp#2##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #18 @common_fields:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#47##0:wybe.phantom) @common_fields:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#47##0:wybe.phantom, ?tmp#48##0:wybe.phantom) @common_fields:nn:nn
    common_fields.id<0>(tmp#1##0:common_fields, ?tmp#3##0:wybe.int) #4 @common_fields:nn:nn
    foreign c print_int(~tmp#3##0:wybe.int, ~tmp#48##0:wybe.phantom, ?tmp#51##0:wybe.phantom) @common_fields:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#51##0:wybe.phantom, ?tmp#52##0:wybe.phantom) @common_fields:nn:nn
    common_fields.id<1>[410bae77d3](~tmp#1##0:common_fields, ?c##1:common_fields, 10:wybe.int) #6 @common_fields:nn:nn
    common_fields.id<0>(~c##1:common_fields, ?tmp#4##0:wybe.int) #7 @common_fields:nn:nn
    foreign c print_int(~tmp#4##0:wybe.int, ~tmp#52##0:wybe.phantom, ?tmp#55##0:wybe.phantom) @common_fields:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#55##0:wybe.phantom, ?tmp#56##0:wybe.phantom) @common_fields:nn:nn
    foreign lpvm store(~%tmp#56##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @common_fields:nn:nn
    common_fields.genre<0>(tmp#0##0:common_fields, ?tmp#5##0:wybe.string, ?tmp#9##0:wybe.bool) #9 @common_fields:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:

    1:
        common_fields.genre<1>(~tmp#0##0:common_fields, ?b##1:common_fields, 1439:wybe.string, ?tmp#10##0:wybe.bool) #10 @common_fields:nn:nn
        case ~tmp#10##0:wybe.bool of
        0:

        1:
            wybe.string.print<0>(~tmp#5##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #20 @common_fields:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#63##0:wybe.phantom) @common_fields:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#63##0:wybe.phantom, ?tmp#64##0:wybe.phantom) @common_fields:nn:nn
            foreign lpvm store(~%tmp#64##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @common_fields:nn:nn
            common_fields.genre<0>(~b##1:common_fields, ?tmp#6##0:wybe.string, ?tmp#8##0:wybe.bool) #12 @common_fields:nn:nn
            case ~tmp#8##0:wybe.bool of
            0:

            1:
                wybe.string.print<0>[410bae77d3](~tmp#6##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #21 @common_fields:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#66##0:wybe.phantom) @common_fields:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp#66##0:wybe.phantom, ?tmp#67##0:wybe.phantom) @common_fields:nn:nn
                foreign lpvm store(~%tmp#67##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @common_fields:nn:nn





proc = > public (1 calls)
0: common_fields.=<0>
=(#left##0:common_fields, #right##0:common_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 3:wybe.int, ?tmp#23##0:wybe.int)
    case ~tmp#23##0:wybe.int of
    0:
        foreign lpvm access(#left##0:common_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#title##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#left##0:common_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#author##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#left##0:common_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#genre##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(~#left##0:common_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#id##0:wybe.int) @common_fields:nn:nn
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#67##0:wybe.int)
        foreign llvm icmp_eq(~tmp#67##0:wybe.int, 0:wybe.int, ?tmp#68##0:wybe.bool)
        case ~tmp#68##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:common_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#title##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(#right##0:common_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#author##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(#right##0:common_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#genre##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(~#right##0:common_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#id##0:wybe.int) @common_fields:nn:nn
            wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#title##0:wybe.string, ~#right#title##0:wybe.string, ~#left#title##0:wybe.string, ~#right#title##0:wybe.string, ?tmp#71##0:wybe.comparison) #26 @string:nn:nn
            foreign llvm icmp_eq(~tmp#71##0:wybe.comparison, 1:wybe.comparison, ?tmp#2##0:wybe.bool) @string:nn:nn
            case ~tmp#2##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#author##0:wybe.string, ~#right#author##0:wybe.string, ~#left#author##0:wybe.string, ~#right#author##0:wybe.string, ?tmp#74##0:wybe.comparison) #27 @string:nn:nn
                foreign llvm icmp_eq(~tmp#74##0:wybe.comparison, 1:wybe.comparison, ?tmp#3##0:wybe.bool) @string:nn:nn
                case ~tmp#3##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#genre##0:wybe.string, ~#right#genre##0:wybe.string, ~#left#genre##0:wybe.string, ~#right#genre##0:wybe.string, ?tmp#77##0:wybe.comparison) #28 @string:nn:nn
                    foreign llvm icmp_eq(~tmp#77##0:wybe.comparison, 1:wybe.comparison, ?tmp#4##0:wybe.bool) @string:nn:nn
                    case ~tmp#4##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign llvm icmp_eq(~#left#id##0:wybe.int, ~#right#id##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





    1:
        foreign lpvm access(#left##0:common_fields, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?#left#title##1:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#left##0:common_fields, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?#left#frequency##0:wybe.int) @common_fields:nn:nn
        foreign lpvm access(~#left##0:common_fields, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?#left#id##1:wybe.int) @common_fields:nn:nn
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#57##0:wybe.int)
        foreign llvm icmp_eq(~tmp#57##0:wybe.int, 1:wybe.int, ?tmp#58##0:wybe.bool)
        case ~tmp#58##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:common_fields, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?#right#title##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(#right##0:common_fields, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?#right#frequency##0:wybe.int) @common_fields:nn:nn
            foreign lpvm access(~#right##0:common_fields, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?#right#id##0:wybe.int) @common_fields:nn:nn
            wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#title##1:wybe.string, ~#right#title##0:wybe.string, ~#left#title##1:wybe.string, ~#right#title##0:wybe.string, ?tmp#61##0:wybe.comparison) #25 @string:nn:nn
            foreign llvm icmp_eq(~tmp#61##0:wybe.comparison, 1:wybe.comparison, ?tmp#7##0:wybe.bool) @string:nn:nn
            case ~tmp#7##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#frequency##0:wybe.int, ~#right#frequency##0:wybe.int, ?tmp#8##0:wybe.bool) @int:nn:nn
                case ~tmp#8##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~#left#id##1:wybe.int, ~#right#id##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




    2:
        foreign lpvm access(#left##0:common_fields, -2:wybe.int, 32:wybe.int, 2:wybe.int, ?#left#title##2:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#left##0:common_fields, 6:wybe.int, 32:wybe.int, 2:wybe.int, ?#left#director##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#left##0:common_fields, 14:wybe.int, 32:wybe.int, 2:wybe.int, ?#left#genre##1:wybe.string) @common_fields:nn:nn
        foreign lpvm access(~#left##0:common_fields, 22:wybe.int, 32:wybe.int, 2:wybe.int, ?#left#id##2:wybe.int) @common_fields:nn:nn
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#43##0:wybe.int)
        foreign llvm icmp_eq(~tmp#43##0:wybe.int, 2:wybe.int, ?tmp#44##0:wybe.bool)
        case ~tmp#44##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:common_fields, -2:wybe.int, 32:wybe.int, 2:wybe.int, ?#right#title##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(#right##0:common_fields, 6:wybe.int, 32:wybe.int, 2:wybe.int, ?#right#director##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(#right##0:common_fields, 14:wybe.int, 32:wybe.int, 2:wybe.int, ?#right#genre##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(~#right##0:common_fields, 22:wybe.int, 32:wybe.int, 2:wybe.int, ?#right#id##0:wybe.int) @common_fields:nn:nn
            wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#title##2:wybe.string, ~#right#title##0:wybe.string, ~#left#title##2:wybe.string, ~#right#title##0:wybe.string, ?tmp#47##0:wybe.comparison) #22 @string:nn:nn
            foreign llvm icmp_eq(~tmp#47##0:wybe.comparison, 1:wybe.comparison, ?tmp#11##0:wybe.bool) @string:nn:nn
            case ~tmp#11##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#director##0:wybe.string, ~#right#director##0:wybe.string, ~#left#director##0:wybe.string, ~#right#director##0:wybe.string, ?tmp#50##0:wybe.comparison) #23 @string:nn:nn
                foreign llvm icmp_eq(~tmp#50##0:wybe.comparison, 1:wybe.comparison, ?tmp#12##0:wybe.bool) @string:nn:nn
                case ~tmp#12##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#genre##1:wybe.string, ~#right#genre##0:wybe.string, ~#left#genre##1:wybe.string, ~#right#genre##0:wybe.string, ?tmp#53##0:wybe.comparison) #24 @string:nn:nn
                    foreign llvm icmp_eq(~tmp#53##0:wybe.comparison, 1:wybe.comparison, ?tmp#13##0:wybe.bool) @string:nn:nn
                    case ~tmp#13##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign llvm icmp_eq(~#left#id##2:wybe.int, ~#right#id##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





    3:
        foreign lpvm access(#left##0:common_fields, -3:wybe.int, 16:wybe.int, 3:wybe.int, ?#left#title##3:wybe.string) @common_fields:nn:nn
        foreign lpvm access(~#left##0:common_fields, 5:wybe.int, 16:wybe.int, 3:wybe.int, ?#left#id##3:wybe.int) @common_fields:nn:nn
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#35##0:wybe.int)
        foreign llvm icmp_eq(~tmp#35##0:wybe.int, 3:wybe.int, ?tmp#36##0:wybe.bool)
        case ~tmp#36##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:common_fields, -3:wybe.int, 16:wybe.int, 3:wybe.int, ?#right#title##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(~#right##0:common_fields, 5:wybe.int, 16:wybe.int, 3:wybe.int, ?#right#id##0:wybe.int) @common_fields:nn:nn
            wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#title##3:wybe.string, ~#right#title##0:wybe.string, ~#left#title##3:wybe.string, ~#right#title##0:wybe.string, ?tmp#39##0:wybe.comparison) #21 @string:nn:nn
            foreign llvm icmp_eq(~tmp#39##0:wybe.comparison, 1:wybe.comparison, ?tmp#16##0:wybe.bool) @string:nn:nn
            case ~tmp#16##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#id##3:wybe.int, ~#right#id##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





proc DVD > public {inline} (0 calls)
0: common_fields.DVD<0>
DVD(title##0:wybe.string, director##0:wybe.string, genre##0:wybe.string, id##0:wybe.int, ?#result##0:common_fields)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?#rec##0:common_fields) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~title##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##1:common_fields, ?#rec##2:common_fields, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~director##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##2:common_fields, ?#rec##3:common_fields, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~genre##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##3:common_fields, ?#rec##4:common_fields, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~id##0:wybe.int) @common_fields:nn:nn
    foreign llvm or(~#rec##4:common_fields, 2:wybe.int, ?#result##0:common_fields) @common_fields:nn:nn
proc DVD > public {inline} (14 calls)
1: common_fields.DVD<1>
DVD(?title##0:wybe.string, ?director##0:wybe.string, ?genre##0:wybe.string, ?id##0:wybe.int, #result##0:common_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.string, ?title##0:wybe.string)
        foreign llvm move(undef:wybe.string, ?director##0:wybe.string)
        foreign llvm move(undef:wybe.string, ?genre##0:wybe.string)
        foreign llvm move(undef:wybe.int, ?id##0:wybe.int)

    1:
        foreign lpvm access(#result##0:common_fields, -2:wybe.int, 32:wybe.int, 2:wybe.int, ?title##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#result##0:common_fields, 6:wybe.int, 32:wybe.int, 2:wybe.int, ?director##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#result##0:common_fields, 14:wybe.int, 32:wybe.int, 2:wybe.int, ?genre##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(~#result##0:common_fields, 22:wybe.int, 32:wybe.int, 2:wybe.int, ?id##0:wybe.int) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc author > public {inline} (0 calls)
0: common_fields.author<0>
author(#rec##0:common_fields, ?#result##0:wybe.string, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.string, ?#result##0:wybe.string)

    1:
        foreign lpvm access(~#rec##0:common_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc author > public {inline} (0 calls)
1: common_fields.author<1>
author(#rec##0:common_fields, ?#rec##1:common_fields, #field##0:wybe.string, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:common_fields, ?#rec##1:common_fields)

    1:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc book > public {inline} (7 calls)
0: common_fields.book<0>
book(title##0:wybe.string, author##0:wybe.string, genre##0:wybe.string, id##0:wybe.int, ?#result##0:common_fields)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?#rec##0:common_fields) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~title##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##1:common_fields, ?#rec##2:common_fields, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~author##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##2:common_fields, ?#rec##3:common_fields, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~genre##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##3:common_fields, ?#result##0:common_fields, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~id##0:wybe.int) @common_fields:nn:nn
proc book > public {inline} (32 calls)
1: common_fields.book<1>
book(?title##0:wybe.string, ?author##0:wybe.string, ?genre##0:wybe.string, ?id##0:wybe.int, #result##0:common_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.string, ?title##0:wybe.string)
        foreign llvm move(undef:wybe.string, ?author##0:wybe.string)
        foreign llvm move(undef:wybe.string, ?genre##0:wybe.string)
        foreign llvm move(undef:wybe.int, ?id##0:wybe.int)

    1:
        foreign lpvm access(#result##0:common_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?title##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#result##0:common_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?author##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#result##0:common_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?genre##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(~#result##0:common_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?id##0:wybe.int) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc director > public {inline} (0 calls)
0: common_fields.director<0>
director(#rec##0:common_fields, ?#result##0:wybe.string, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.string, ?#result##0:wybe.string)

    1:
        foreign lpvm access(~#rec##0:common_fields, 6:wybe.int, 32:wybe.int, 2:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc director > public {inline} (0 calls)
1: common_fields.director<1>
director(#rec##0:common_fields, ?#rec##1:common_fields, #field##0:wybe.string, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:common_fields, ?#rec##1:common_fields)

    1:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 6:wybe.int, 0:wybe.int, 32:wybe.int, 2:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc frequency > public {inline} (0 calls)
0: common_fields.frequency<0>
frequency(#rec##0:common_fields, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:common_fields, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc frequency > public {inline} (0 calls)
1: common_fields.frequency<1>
frequency(#rec##0:common_fields, ?#rec##1:common_fields, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:common_fields, ?#rec##1:common_fields)

    1:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 7:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc genre > public (10 calls)
0: common_fields.genre<0>
genre(#rec##0:common_fields, ?#result##0:wybe.string, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: [(#rec##0,#result##0)]
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#2##0:wybe.bool)
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.string, ?#result##0:wybe.string)

        1:
            foreign lpvm access(~#rec##0:common_fields, 14:wybe.int, 32:wybe.int, 2:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


    1:
        foreign lpvm access(~#rec##0:common_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc genre > public (5 calls)
1: common_fields.genre<1>
genre(#rec##0:common_fields, ?#rec##1:common_fields, #field##0:wybe.string, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: [(#field##0,#rec##0),(#field##0,#rec##1),(#rec##0,#rec##1)]
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#2##0:wybe.bool)
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:common_fields, ?#rec##1:common_fields)

        1:
            foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 14:wybe.int, 0:wybe.int, 32:wybe.int, 2:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


    1:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc id > public (14 calls)
0: common_fields.id<0>
id(#rec##0:common_fields, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    case ~tmp#1##0:wybe.int of
    0:
        foreign lpvm access(~#rec##0:common_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @common_fields:nn:nn

    1:
        foreign lpvm access(~#rec##0:common_fields, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @common_fields:nn:nn

    2:
        foreign lpvm access(~#rec##0:common_fields, 22:wybe.int, 32:wybe.int, 2:wybe.int, ?#result##0:wybe.int) @common_fields:nn:nn

proc id > public (7 calls)
1: common_fields.id<1>
id(#rec##0:common_fields, ?#rec##1:common_fields, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: [(#rec##0,#rec##1)]
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    case ~tmp#1##0:wybe.int of
    0:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn

    1:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 15:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn

    2:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 22:wybe.int, 0:wybe.int, 32:wybe.int, 2:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    case ~tmp#1##0:wybe.int of
    0:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn

    1:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 15:wybe.int, 1:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn

    2:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 22:wybe.int, 1:wybe.int, 32:wybe.int, 2:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn



proc magazine > public {inline} (7 calls)
0: common_fields.magazine<0>
magazine(title##0:wybe.string, frequency##0:wybe.int, id##0:wybe.int, ?#result##0:common_fields)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:common_fields) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~title##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##1:common_fields, ?#rec##2:common_fields, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~frequency##0:wybe.int) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##2:common_fields, ?#rec##3:common_fields, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~id##0:wybe.int) @common_fields:nn:nn
    foreign llvm or(~#rec##3:common_fields, 1:wybe.int, ?#result##0:common_fields) @common_fields:nn:nn
proc magazine > public {inline} (17 calls)
1: common_fields.magazine<1>
magazine(?title##0:wybe.string, ?frequency##0:wybe.int, ?id##0:wybe.int, #result##0:common_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.string, ?title##0:wybe.string)
        foreign llvm move(undef:wybe.int, ?frequency##0:wybe.int)
        foreign llvm move(undef:wybe.int, ?id##0:wybe.int)

    1:
        foreign lpvm access(#result##0:common_fields, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?title##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#result##0:common_fields, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?frequency##0:wybe.int) @common_fields:nn:nn
        foreign lpvm access(~#result##0:common_fields, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?id##0:wybe.int) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc other > public {inline} (0 calls)
0: common_fields.other<0>
other(title##0:wybe.string, id##0:wybe.int, ?#result##0:common_fields)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:common_fields) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~title##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##1:common_fields, ?#rec##2:common_fields, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~id##0:wybe.int) @common_fields:nn:nn
    foreign llvm or(~#rec##2:common_fields, 3:wybe.int, ?#result##0:common_fields) @common_fields:nn:nn
proc other > public {inline} (7 calls)
1: common_fields.other<1>
other(?title##0:wybe.string, ?id##0:wybe.int, #result##0:common_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 3:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.string, ?title##0:wybe.string)
        foreign llvm move(undef:wybe.int, ?id##0:wybe.int)

    1:
        foreign lpvm access(#result##0:common_fields, -3:wybe.int, 16:wybe.int, 3:wybe.int, ?title##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(~#result##0:common_fields, 5:wybe.int, 16:wybe.int, 3:wybe.int, ?id##0:wybe.int) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc title > public (7 calls)
0: common_fields.title<0>
title(#rec##0:common_fields, ?#result##0:wybe.string)<{}; {}; {}>:
  AliasPairs: [(#rec##0,#result##0)]
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    case ~tmp#1##0:wybe.int of
    0:
        foreign lpvm access(~#rec##0:common_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn

    1:
        foreign lpvm access(~#rec##0:common_fields, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn

    2:
        foreign lpvm access(~#rec##0:common_fields, -2:wybe.int, 32:wybe.int, 2:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn

proc title > public (0 calls)
1: common_fields.title<1>
title(#rec##0:common_fields, ?#rec##1:common_fields, #field##0:wybe.string)<{}; {}; {}>:
  AliasPairs: [(#field##0,#rec##0),(#field##0,#rec##1),(#rec##0,#rec##1)]
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    case ~tmp#1##0:wybe.int of
    0:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn

    1:
        foreign lpvm {noalias} mutate(~#rec##0:common_fields, ?#rec##1:common_fields, -1:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn

    2:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, -2:wybe.int, 0:wybe.int, 32:wybe.int, 2:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn



proc ~= > public {inline} (0 calls)
0: common_fields.~=<0>
~=(#left##0:common_fields, #right##0:common_fields, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    common_fields.=<0>(~#left##0:common_fields, ~#right##0:common_fields, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'common_fields'

source_filename = "!ROOT!/final-dump/common_fields.wybe"
target triple    ????


declare external fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2, i64, i64, i64, i64)
declare external fastcc void @"wybe.string.print<0>"(i64)
declare external fastcc void @"wybe.string.print<0>[410bae77d3]"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"common_fields.<0>"() {
  %"tmp#68##0" = call ccc ptr @wybe_malloc(i32 32)
  %"tmp#30##0" = ptrtoint ptr %"tmp#68##0" to i64
  %"tmp#69##0" = inttoptr i64 %"tmp#30##0" to ptr
  store i64 1415, ptr %"tmp#69##0"
  %"tmp#70##0" = add i64 %"tmp#30##0", 8
  %"tmp#71##0" = inttoptr i64 %"tmp#70##0" to ptr
  store i64 1419, ptr %"tmp#71##0"
  %"tmp#72##0" = add i64 %"tmp#30##0", 16
  %"tmp#73##0" = inttoptr i64 %"tmp#72##0" to ptr
  store i64 1423, ptr %"tmp#73##0"
  %"tmp#74##0" = add i64 %"tmp#30##0", 24
  %"tmp#75##0" = inttoptr i64 %"tmp#74##0" to ptr
  store i64 0, ptr %"tmp#75##0"
  %"tmp#76##0" = call ccc ptr @wybe_malloc(i32 24)
  %"tmp#42##0" = ptrtoint ptr %"tmp#76##0" to i64
  %"tmp#77##0" = inttoptr i64 %"tmp#42##0" to ptr
  store i64 1419, ptr %"tmp#77##0"
  %"tmp#78##0" = add i64 %"tmp#42##0", 8
  %"tmp#79##0" = inttoptr i64 %"tmp#78##0" to ptr
  store i64 0, ptr %"tmp#79##0"
  %"tmp#80##0" = add i64 %"tmp#42##0", 16
  %"tmp#81##0" = inttoptr i64 %"tmp#80##0" to ptr
  store i64 1, ptr %"tmp#81##0"
  %"tmp#1##0" = or i64 %"tmp#42##0", 1
  %"tmp#2##0" = tail call fastcc i64 @"common_fields.title<0>"(i64 %"tmp#30##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 %"tmp#2##0")
  call ccc void @putchar(i8 10)
  %"tmp#3##0" = tail call fastcc i64 @"common_fields.id<0>"(i64 %"tmp#1##0")
  call ccc void @print_int(i64 %"tmp#3##0")
  call ccc void @putchar(i8 10)
  %"c##1" = tail call fastcc i64 @"common_fields.id<1>[410bae77d3]"(i64 %"tmp#1##0", i64 10)
  %"tmp#4##0" = tail call fastcc i64 @"common_fields.id<0>"(i64 %"c##1")
  call ccc void @print_int(i64 %"tmp#4##0")
  call ccc void @putchar(i8 10)
  %"tmp#82##0" = tail call fastcc {i64, i1} @"common_fields.genre<0>"(i64 %"tmp#30##0")
  %"tmp#5##0" = extractvalue {i64, i1}%"tmp#82##0", 0
  %"tmp#9##0" = extractvalue {i64, i1}%"tmp#82##0", 1
  br i1 %"tmp#9##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#83##0" = tail call fastcc {i64, i1} @"common_fields.genre<1>"(i64 %"tmp#30##0", i64 1439)
  %"b##1" = extractvalue {i64, i1}%"tmp#83##0", 0
  %"tmp#10##0" = extractvalue {i64, i1}%"tmp#83##0", 1
  br i1 %"tmp#10##0", label %if.then.1, label %if.else.1
if.then.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 %"tmp#5##0")
  call ccc void @putchar(i8 10)
  %"tmp#84##0" = tail call fastcc {i64, i1} @"common_fields.genre<0>"(i64 %"b##1")
  %"tmp#6##0" = extractvalue {i64, i1}%"tmp#84##0", 0
  %"tmp#8##0" = extractvalue {i64, i1}%"tmp#84##0", 1
  br i1 %"tmp#8##0", label %if.then.2, label %if.else.2
if.then.2:
  tail call fastcc void @"wybe.string.print<0>[410bae77d3]"(i64 %"tmp#6##0")
  call ccc void @putchar(i8 10)
  ret void
if.else.2:
  ret void
if.else.1:
  ret void
if.else.0:
  ret void
}

define external fastcc i1 @"common_fields.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#23##0" = and i64 %"#left##0", 3
  switch i64 %"tmp#23##0", label %case.3.switch.0 [
    i64 0, label %case.0.switch.0
    i64 1, label %case.1.switch.0
    i64 2, label %case.2.switch.0
    i64 3, label %case.3.switch.0 ]
case.0.switch.0:
  %"tmp#80##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#title##0" = load i64, ptr %"tmp#80##0"
  %"tmp#81##0" = add i64 %"#left##0", 8
  %"tmp#82##0" = inttoptr i64 %"tmp#81##0" to ptr
  %"#left#author##0" = load i64, ptr %"tmp#82##0"
  %"tmp#83##0" = add i64 %"#left##0", 16
  %"tmp#84##0" = inttoptr i64 %"tmp#83##0" to ptr
  %"#left#genre##0" = load i64, ptr %"tmp#84##0"
  %"tmp#85##0" = add i64 %"#left##0", 24
  %"tmp#86##0" = inttoptr i64 %"tmp#85##0" to ptr
  %"#left#id##0" = load i64, ptr %"tmp#86##0"
  %"tmp#67##0" = and i64 %"#right##0", 3
  %"tmp#68##0" = icmp eq i64 %"tmp#67##0", 0
  br i1 %"tmp#68##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#87##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#title##0" = load i64, ptr %"tmp#87##0"
  %"tmp#88##0" = add i64 %"#right##0", 8
  %"tmp#89##0" = inttoptr i64 %"tmp#88##0" to ptr
  %"#right#author##0" = load i64, ptr %"tmp#89##0"
  %"tmp#90##0" = add i64 %"#right##0", 16
  %"tmp#91##0" = inttoptr i64 %"tmp#90##0" to ptr
  %"#right#genre##0" = load i64, ptr %"tmp#91##0"
  %"tmp#92##0" = add i64 %"#right##0", 24
  %"tmp#93##0" = inttoptr i64 %"tmp#92##0" to ptr
  %"#right#id##0" = load i64, ptr %"tmp#93##0"
  %"tmp#71##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 %"#left#title##0", i64 %"#right#title##0", i64 %"#left#title##0", i64 %"#right#title##0")
  %"tmp#2##0" = icmp eq i2 %"tmp#71##0", 1
  br i1 %"tmp#2##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#74##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 %"#left#author##0", i64 %"#right#author##0", i64 %"#left#author##0", i64 %"#right#author##0")
  %"tmp#3##0" = icmp eq i2 %"tmp#74##0", 1
  br i1 %"tmp#3##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#77##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 %"#left#genre##0", i64 %"#right#genre##0", i64 %"#left#genre##0", i64 %"#right#genre##0")
  %"tmp#4##0" = icmp eq i2 %"tmp#77##0", 1
  br i1 %"tmp#4##0", label %if.then.4, label %if.else.4
if.then.4:
  %"tmp#94##0" = icmp eq i64 %"#left#id##0", %"#right#id##0"
  ret i1 %"tmp#94##0"
if.else.4:
  ret i1 0
if.else.3:
  ret i1 0
if.else.2:
  ret i1 0
if.else.1:
  ret i1 0
case.1.switch.0:
  %"tmp#95##0" = add i64 %"#left##0", -1
  %"tmp#96##0" = inttoptr i64 %"tmp#95##0" to ptr
  %"#left#title##1" = load i64, ptr %"tmp#96##0"
  %"tmp#97##0" = add i64 %"#left##0", 7
  %"tmp#98##0" = inttoptr i64 %"tmp#97##0" to ptr
  %"#left#frequency##0" = load i64, ptr %"tmp#98##0"
  %"tmp#99##0" = add i64 %"#left##0", 15
  %"tmp#100##0" = inttoptr i64 %"tmp#99##0" to ptr
  %"#left#id##1" = load i64, ptr %"tmp#100##0"
  %"tmp#57##0" = and i64 %"#right##0", 3
  %"tmp#58##0" = icmp eq i64 %"tmp#57##0", 1
  br i1 %"tmp#58##0", label %if.then.5, label %if.else.5
if.then.5:
  %"tmp#101##0" = add i64 %"#right##0", -1
  %"tmp#102##0" = inttoptr i64 %"tmp#101##0" to ptr
  %"tmp#103##0" = load i64, ptr %"tmp#102##0"
  %"tmp#104##0" = add i64 %"#right##0", 7
  %"tmp#105##0" = inttoptr i64 %"tmp#104##0" to ptr
  %"#right#frequency##0" = load i64, ptr %"tmp#105##0"
  %"tmp#106##0" = add i64 %"#right##0", 15
  %"tmp#107##0" = inttoptr i64 %"tmp#106##0" to ptr
  %"tmp#108##0" = load i64, ptr %"tmp#107##0"
  %"tmp#61##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 %"#left#title##1", i64 %"tmp#103##0", i64 %"#left#title##1", i64 %"tmp#103##0")
  %"tmp#7##0" = icmp eq i2 %"tmp#61##0", 1
  br i1 %"tmp#7##0", label %if.then.6, label %if.else.6
if.then.6:
  %"tmp#8##0" = icmp eq i64 %"#left#frequency##0", %"#right#frequency##0"
  br i1 %"tmp#8##0", label %if.then.7, label %if.else.7
if.then.7:
  %"tmp#109##0" = icmp eq i64 %"#left#id##1", %"tmp#108##0"
  ret i1 %"tmp#109##0"
if.else.7:
  ret i1 0
if.else.6:
  ret i1 0
if.else.5:
  ret i1 0
case.2.switch.0:
  %"tmp#110##0" = add i64 %"#left##0", -2
  %"tmp#111##0" = inttoptr i64 %"tmp#110##0" to ptr
  %"#left#title##2" = load i64, ptr %"tmp#111##0"
  %"tmp#112##0" = add i64 %"#left##0", 6
  %"tmp#113##0" = inttoptr i64 %"tmp#112##0" to ptr
  %"#left#director##0" = load i64, ptr %"tmp#113##0"
  %"tmp#114##0" = add i64 %"#left##0", 14
  %"tmp#115##0" = inttoptr i64 %"tmp#114##0" to ptr
  %"#left#genre##1" = load i64, ptr %"tmp#115##0"
  %"tmp#116##0" = add i64 %"#left##0", 22
  %"tmp#117##0" = inttoptr i64 %"tmp#116##0" to ptr
  %"#left#id##2" = load i64, ptr %"tmp#117##0"
  %"tmp#43##0" = and i64 %"#right##0", 3
  %"tmp#44##0" = icmp eq i64 %"tmp#43##0", 2
  br i1 %"tmp#44##0", label %if.then.8, label %if.else.8
if.then.8:
  %"tmp#118##0" = add i64 %"#right##0", -2
  %"tmp#119##0" = inttoptr i64 %"tmp#118##0" to ptr
  %"tmp#120##0" = load i64, ptr %"tmp#119##0"
  %"tmp#121##0" = add i64 %"#right##0", 6
  %"tmp#122##0" = inttoptr i64 %"tmp#121##0" to ptr
  %"#right#director##0" = load i64, ptr %"tmp#122##0"
  %"tmp#123##0" = add i64 %"#right##0", 14
  %"tmp#124##0" = inttoptr i64 %"tmp#123##0" to ptr
  %"tmp#125##0" = load i64, ptr %"tmp#124##0"
  %"tmp#126##0" = add i64 %"#right##0", 22
  %"tmp#127##0" = inttoptr i64 %"tmp#126##0" to ptr
  %"tmp#128##0" = load i64, ptr %"tmp#127##0"
  %"tmp#47##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 %"#left#title##2", i64 %"tmp#120##0", i64 %"#left#title##2", i64 %"tmp#120##0")
  %"tmp#11##0" = icmp eq i2 %"tmp#47##0", 1
  br i1 %"tmp#11##0", label %if.then.9, label %if.else.9
if.then.9:
  %"tmp#50##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 %"#left#director##0", i64 %"#right#director##0", i64 %"#left#director##0", i64 %"#right#director##0")
  %"tmp#12##0" = icmp eq i2 %"tmp#50##0", 1
  br i1 %"tmp#12##0", label %if.then.10, label %if.else.10
if.then.10:
  %"tmp#53##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 %"#left#genre##1", i64 %"tmp#125##0", i64 %"#left#genre##1", i64 %"tmp#125##0")
  %"tmp#13##0" = icmp eq i2 %"tmp#53##0", 1
  br i1 %"tmp#13##0", label %if.then.11, label %if.else.11
if.then.11:
  %"tmp#129##0" = icmp eq i64 %"#left#id##2", %"tmp#128##0"
  ret i1 %"tmp#129##0"
if.else.11:
  ret i1 0
if.else.10:
  ret i1 0
if.else.9:
  ret i1 0
if.else.8:
  ret i1 0
case.3.switch.0:
  %"tmp#130##0" = add i64 %"#left##0", -3
  %"tmp#131##0" = inttoptr i64 %"tmp#130##0" to ptr
  %"#left#title##3" = load i64, ptr %"tmp#131##0"
  %"tmp#132##0" = add i64 %"#left##0", 5
  %"tmp#133##0" = inttoptr i64 %"tmp#132##0" to ptr
  %"#left#id##3" = load i64, ptr %"tmp#133##0"
  %"tmp#35##0" = and i64 %"#right##0", 3
  %"tmp#36##0" = icmp eq i64 %"tmp#35##0", 3
  br i1 %"tmp#36##0", label %if.then.12, label %if.else.12
if.then.12:
  %"tmp#134##0" = add i64 %"#right##0", -3
  %"tmp#135##0" = inttoptr i64 %"tmp#134##0" to ptr
  %"tmp#136##0" = load i64, ptr %"tmp#135##0"
  %"tmp#137##0" = add i64 %"#right##0", 5
  %"tmp#138##0" = inttoptr i64 %"tmp#137##0" to ptr
  %"tmp#139##0" = load i64, ptr %"tmp#138##0"
  %"tmp#39##0" = tail call fastcc i2 @"wybe.string.<=>#cont#2<0>"(i2 1, i64 %"#left#title##3", i64 %"tmp#136##0", i64 %"#left#title##3", i64 %"tmp#136##0")
  %"tmp#16##0" = icmp eq i2 %"tmp#39##0", 1
  br i1 %"tmp#16##0", label %if.then.13, label %if.else.13
if.then.13:
  %"tmp#140##0" = icmp eq i64 %"#left#id##3", %"tmp#139##0"
  ret i1 %"tmp#140##0"
if.else.13:
  ret i1 0
if.else.12:
  ret i1 0
}

define external fastcc i64 @"common_fields.DVD<0>"(i64 %"title##0", i64 %"director##0", i64 %"genre##0", i64 %"id##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 32)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"title##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"director##0", ptr %"tmp#3##0"
  %"tmp#4##0" = add i64 %"#rec##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"genre##0", ptr %"tmp#5##0"
  %"tmp#6##0" = add i64 %"#rec##0", 24
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  store i64 %"id##0", ptr %"tmp#7##0"
  %"tmp#8##0" = or i64 %"#rec##0", 2
  ret i64 %"tmp#8##0"
}

define external fastcc {i64, i64, i64, i64, i1} @"common_fields.DVD<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 2
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#result##0", -2
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = add i64 %"#result##0", 6
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#6##0"
  %"tmp#8##0" = add i64 %"#result##0", 14
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#9##0"
  %"tmp#11##0" = add i64 %"#result##0", 22
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  %"tmp#13##0" = load i64, ptr %"tmp#12##0"
  %"tmp#14##0" = insertvalue {i64, i64, i64, i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#15##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#14##0", i64 %"tmp#7##0", 1
  %"tmp#16##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#15##0", i64 %"tmp#10##0", 2
  %"tmp#17##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#16##0", i64 %"tmp#13##0", 3
  %"tmp#18##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#17##0", i1 1, 4
  ret {i64, i64, i64, i64, i1} %"tmp#18##0"
if.else.0:
  %"tmp#19##0" = insertvalue {i64, i64, i64, i64, i1} undef, i64 undef, 0
  %"tmp#20##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#19##0", i64 undef, 1
  %"tmp#21##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#20##0", i64 undef, 2
  %"tmp#22##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#21##0", i64 undef, 3
  %"tmp#23##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#22##0", i1 0, 4
  ret {i64, i64, i64, i64, i1} %"tmp#23##0"
}

define external fastcc {i64, i1} @"common_fields.author<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc {i64, i1} @"common_fields.author<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#3##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#3##0", ptr %"tmp#2##0", i64 32, i1 0)
  %"tmp#4##0" = ptrtoint ptr %"tmp#3##0" to i64
  %"tmp#5##0" = add i64 %"tmp#4##0", 8
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  store i64 %"#field##0", ptr %"tmp#6##0"
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 1, 1
  ret {i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 0, 1
  ret {i64, i1} %"tmp#10##0"
}

define external fastcc i64 @"common_fields.book<0>"(i64 %"title##0", i64 %"author##0", i64 %"genre##0", i64 %"id##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 32)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"title##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"author##0", ptr %"tmp#3##0"
  %"tmp#4##0" = add i64 %"#rec##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"genre##0", ptr %"tmp#5##0"
  %"tmp#6##0" = add i64 %"#rec##0", 24
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  store i64 %"id##0", ptr %"tmp#7##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64, i64, i64, i1} @"common_fields.book<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = add i64 %"#result##0", 8
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#5##0"
  %"tmp#7##0" = add i64 %"#result##0", 16
  %"tmp#8##0" = inttoptr i64 %"tmp#7##0" to ptr
  %"tmp#9##0" = load i64, ptr %"tmp#8##0"
  %"tmp#10##0" = add i64 %"#result##0", 24
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"tmp#12##0" = load i64, ptr %"tmp#11##0"
  %"tmp#13##0" = insertvalue {i64, i64, i64, i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#14##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#13##0", i64 %"tmp#6##0", 1
  %"tmp#15##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#14##0", i64 %"tmp#9##0", 2
  %"tmp#16##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#15##0", i64 %"tmp#12##0", 3
  %"tmp#17##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#16##0", i1 1, 4
  ret {i64, i64, i64, i64, i1} %"tmp#17##0"
if.else.0:
  %"tmp#18##0" = insertvalue {i64, i64, i64, i64, i1} undef, i64 undef, 0
  %"tmp#19##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#18##0", i64 undef, 1
  %"tmp#20##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#19##0", i64 undef, 2
  %"tmp#21##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#20##0", i64 undef, 3
  %"tmp#22##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#21##0", i1 0, 4
  ret {i64, i64, i64, i64, i1} %"tmp#22##0"
}

define external fastcc {i64, i1} @"common_fields.director<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 2
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#rec##0", 6
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc {i64, i1} @"common_fields.director<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 2
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = sub i64 %"#rec##0", 2
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#4##0", ptr %"tmp#3##0", i64 32, i1 0)
  %"tmp#5##0" = ptrtoint ptr %"tmp#4##0" to i64
  %"tmp#6##0" = add i64 %"tmp#5##0", 2
  %"tmp#7##0" = add i64 %"tmp#6##0", 6
  %"tmp#8##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 %"#field##0", ptr %"tmp#8##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#6##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.0:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
}

define external fastcc {i64, i1} @"common_fields.frequency<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#rec##0", 7
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc {i64, i1} @"common_fields.frequency<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = sub i64 %"#rec##0", 1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#4##0", ptr %"tmp#3##0", i64 24, i1 0)
  %"tmp#5##0" = ptrtoint ptr %"tmp#4##0" to i64
  %"tmp#6##0" = add i64 %"tmp#5##0", 1
  %"tmp#7##0" = add i64 %"tmp#6##0", 7
  %"tmp#8##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 %"#field##0", ptr %"tmp#8##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#6##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.0:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
}

define external fastcc {i64, i1} @"common_fields.genre<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#4##0" = add i64 %"#rec##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#5##0"
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 %"tmp#6##0", 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 1, 1
  ret {i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#2##0" = icmp eq i64 %"tmp#1##0", 2
  br i1 %"tmp#2##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#9##0" = add i64 %"#rec##0", 14
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"tmp#11##0" = load i64, ptr %"tmp#10##0"
  %"tmp#12##0" = insertvalue {i64, i1} undef, i64 %"tmp#11##0", 0
  %"tmp#13##0" = insertvalue {i64, i1} %"tmp#12##0", i1 1, 1
  ret {i64, i1} %"tmp#13##0"
if.else.1:
  %"tmp#14##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#15##0" = insertvalue {i64, i1} %"tmp#14##0", i1 0, 1
  ret {i64, i1} %"tmp#15##0"
}

define external fastcc {i64, i1} @"common_fields.genre<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#4##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#5##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#5##0", ptr %"tmp#4##0", i64 32, i1 0)
  %"tmp#6##0" = ptrtoint ptr %"tmp#5##0" to i64
  %"tmp#7##0" = add i64 %"tmp#6##0", 16
  %"tmp#8##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 %"#field##0", ptr %"tmp#8##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#6##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.0:
  %"tmp#2##0" = icmp eq i64 %"tmp#1##0", 2
  br i1 %"tmp#2##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#11##0" = sub i64 %"#rec##0", 2
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  %"tmp#13##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#13##0", ptr %"tmp#12##0", i64 32, i1 0)
  %"tmp#14##0" = ptrtoint ptr %"tmp#13##0" to i64
  %"tmp#15##0" = add i64 %"tmp#14##0", 2
  %"tmp#16##0" = add i64 %"tmp#15##0", 14
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  store i64 %"#field##0", ptr %"tmp#17##0"
  %"tmp#18##0" = insertvalue {i64, i1} undef, i64 %"tmp#15##0", 0
  %"tmp#19##0" = insertvalue {i64, i1} %"tmp#18##0", i1 1, 1
  ret {i64, i1} %"tmp#19##0"
if.else.1:
  %"tmp#20##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#21##0" = insertvalue {i64, i1} %"tmp#20##0", i1 0, 1
  ret {i64, i1} %"tmp#21##0"
}

define external fastcc i64 @"common_fields.id<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  switch i64 %"tmp#1##0", label %case.2.switch.0 [
    i64 0, label %case.0.switch.0
    i64 1, label %case.1.switch.0
    i64 2, label %case.2.switch.0 ]
case.0.switch.0:
  %"tmp#6##0" = add i64 %"#rec##0", 24
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  ret i64 %"tmp#8##0"
case.1.switch.0:
  %"tmp#9##0" = add i64 %"#rec##0", 15
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"tmp#11##0" = load i64, ptr %"tmp#10##0"
  ret i64 %"tmp#11##0"
case.2.switch.0:
  %"tmp#12##0" = add i64 %"#rec##0", 22
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"tmp#14##0" = load i64, ptr %"tmp#13##0"
  ret i64 %"tmp#14##0"
}

define external fastcc i64 @"common_fields.id<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  switch i64 %"tmp#1##0", label %case.2.switch.0 [
    i64 0, label %case.0.switch.0
    i64 1, label %case.1.switch.0
    i64 2, label %case.2.switch.0 ]
case.0.switch.0:
  %"tmp#6##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#7##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#7##0", ptr %"tmp#6##0", i64 32, i1 0)
  %"tmp#8##0" = ptrtoint ptr %"tmp#7##0" to i64
  %"tmp#9##0" = add i64 %"tmp#8##0", 24
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  store i64 %"#field##0", ptr %"tmp#10##0"
  ret i64 %"tmp#8##0"
case.1.switch.0:
  %"tmp#11##0" = sub i64 %"#rec##0", 1
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  %"tmp#13##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#13##0", ptr %"tmp#12##0", i64 24, i1 0)
  %"tmp#14##0" = ptrtoint ptr %"tmp#13##0" to i64
  %"tmp#15##0" = add i64 %"tmp#14##0", 1
  %"tmp#16##0" = add i64 %"tmp#15##0", 15
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  store i64 %"#field##0", ptr %"tmp#17##0"
  ret i64 %"tmp#15##0"
case.2.switch.0:
  %"tmp#18##0" = sub i64 %"#rec##0", 2
  %"tmp#19##0" = inttoptr i64 %"tmp#18##0" to ptr
  %"tmp#20##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#20##0", ptr %"tmp#19##0", i64 32, i1 0)
  %"tmp#21##0" = ptrtoint ptr %"tmp#20##0" to i64
  %"tmp#22##0" = add i64 %"tmp#21##0", 2
  %"tmp#23##0" = add i64 %"tmp#22##0", 22
  %"tmp#24##0" = inttoptr i64 %"tmp#23##0" to ptr
  store i64 %"#field##0", ptr %"tmp#24##0"
  ret i64 %"tmp#22##0"
}

define external fastcc i64 @"common_fields.id<1>[410bae77d3]"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  switch i64 %"tmp#1##0", label %case.2.switch.0 [
    i64 0, label %case.0.switch.0
    i64 1, label %case.1.switch.0
    i64 2, label %case.2.switch.0 ]
case.0.switch.0:
  %"tmp#6##0" = add i64 %"#rec##0", 24
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  store i64 %"#field##0", ptr %"tmp#7##0"
  ret i64 %"#rec##0"
case.1.switch.0:
  %"tmp#8##0" = add i64 %"#rec##0", 15
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  ret i64 %"#rec##0"
case.2.switch.0:
  %"tmp#10##0" = add i64 %"#rec##0", 22
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  store i64 %"#field##0", ptr %"tmp#11##0"
  ret i64 %"#rec##0"
}

define external fastcc i64 @"common_fields.magazine<0>"(i64 %"title##0", i64 %"frequency##0", i64 %"id##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 24)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"title##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"frequency##0", ptr %"tmp#3##0"
  %"tmp#4##0" = add i64 %"#rec##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"id##0", ptr %"tmp#5##0"
  %"tmp#6##0" = or i64 %"#rec##0", 1
  ret i64 %"tmp#6##0"
}

define external fastcc {i64, i64, i64, i1} @"common_fields.magazine<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#result##0", -1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = add i64 %"#result##0", 7
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#6##0"
  %"tmp#8##0" = add i64 %"#result##0", 15
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#9##0"
  %"tmp#11##0" = insertvalue {i64, i64, i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#12##0" = insertvalue {i64, i64, i64, i1} %"tmp#11##0", i64 %"tmp#7##0", 1
  %"tmp#13##0" = insertvalue {i64, i64, i64, i1} %"tmp#12##0", i64 %"tmp#10##0", 2
  %"tmp#14##0" = insertvalue {i64, i64, i64, i1} %"tmp#13##0", i1 1, 3
  ret {i64, i64, i64, i1} %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0
  %"tmp#16##0" = insertvalue {i64, i64, i64, i1} %"tmp#15##0", i64 undef, 1
  %"tmp#17##0" = insertvalue {i64, i64, i64, i1} %"tmp#16##0", i64 undef, 2
  %"tmp#18##0" = insertvalue {i64, i64, i64, i1} %"tmp#17##0", i1 0, 3
  ret {i64, i64, i64, i1} %"tmp#18##0"
}

define external fastcc i64 @"common_fields.other<0>"(i64 %"title##0", i64 %"id##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"title##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"id##0", ptr %"tmp#3##0"
  %"tmp#4##0" = or i64 %"#rec##0", 3
  ret i64 %"tmp#4##0"
}

define external fastcc {i64, i64, i1} @"common_fields.other<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 3
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#result##0", -3
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = add i64 %"#result##0", 5
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#6##0"
  %"tmp#8##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#9##0" = insertvalue {i64, i64, i1} %"tmp#8##0", i64 %"tmp#7##0", 1
  %"tmp#10##0" = insertvalue {i64, i64, i1} %"tmp#9##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#10##0"
if.else.0:
  %"tmp#11##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#12##0" = insertvalue {i64, i64, i1} %"tmp#11##0", i64 undef, 1
  %"tmp#13##0" = insertvalue {i64, i64, i1} %"tmp#12##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#13##0"
}

define external fastcc i64 @"common_fields.title<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  switch i64 %"tmp#1##0", label %case.2.switch.0 [
    i64 0, label %case.0.switch.0
    i64 1, label %case.1.switch.0
    i64 2, label %case.2.switch.0 ]
case.0.switch.0:
  %"tmp#6##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#6##0"
  ret i64 %"tmp#7##0"
case.1.switch.0:
  %"tmp#8##0" = add i64 %"#rec##0", -1
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#9##0"
  ret i64 %"tmp#10##0"
case.2.switch.0:
  %"tmp#11##0" = add i64 %"#rec##0", -2
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  %"tmp#13##0" = load i64, ptr %"tmp#12##0"
  ret i64 %"tmp#13##0"
}

define external fastcc i64 @"common_fields.title<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  switch i64 %"tmp#1##0", label %case.2.switch.0 [
    i64 0, label %case.0.switch.0
    i64 1, label %case.1.switch.0
    i64 2, label %case.2.switch.0 ]
case.0.switch.0:
  %"tmp#6##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#7##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#7##0", ptr %"tmp#6##0", i64 32, i1 0)
  %"tmp#8##0" = ptrtoint ptr %"tmp#7##0" to i64
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"#field##0", ptr %"tmp#9##0"
  ret i64 %"tmp#8##0"
case.1.switch.0:
  %"tmp#10##0" = sub i64 %"#rec##0", 1
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"tmp#12##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#12##0", ptr %"tmp#11##0", i64 24, i1 0)
  %"tmp#13##0" = ptrtoint ptr %"tmp#12##0" to i64
  %"tmp#14##0" = add i64 %"tmp#13##0", 1
  %"tmp#15##0" = add i64 %"tmp#14##0", -1
  %"tmp#16##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 %"#field##0", ptr %"tmp#16##0"
  ret i64 %"tmp#14##0"
case.2.switch.0:
  %"tmp#17##0" = sub i64 %"#rec##0", 2
  %"tmp#18##0" = inttoptr i64 %"tmp#17##0" to ptr
  %"tmp#19##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#19##0", ptr %"tmp#18##0", i64 32, i1 0)
  %"tmp#20##0" = ptrtoint ptr %"tmp#19##0" to i64
  %"tmp#21##0" = add i64 %"tmp#20##0", 2
  %"tmp#22##0" = add i64 %"tmp#21##0", -2
  %"tmp#23##0" = inttoptr i64 %"tmp#22##0" to ptr
  store i64 %"#field##0", ptr %"tmp#23##0"
  ret i64 %"tmp#21##0"
}

define external fastcc i1 @"common_fields.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"common_fields.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

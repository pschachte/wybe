======================================================================
AFTER EVERYTHING:
 Module common_fields
  representation  : address
  public submods  : 
  public resources: 
  public procs    : common_fields.<0>
                    common_fields.=<0>
                    common_fields.DVD<0>
                    common_fields.DVD<1>
                    common_fields.author<0>
                    common_fields.author<1>
                    common_fields.book<0>
                    common_fields.book<1>
                    common_fields.director<0>
                    common_fields.director<1>
                    common_fields.frequency<0>
                    common_fields.frequency<1>
                    common_fields.genre<0>
                    common_fields.genre<1>
                    common_fields.id<0>
                    common_fields.id<1>
                    common_fields.magazine<0>
                    common_fields.magazine<1>
                    common_fields.other<0>
                    common_fields.other<1>
                    common_fields.title<0>
                    common_fields.title<1>
                    common_fields.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: common_fields.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(6,(common_fields.id<1>,fromList [NonAliasedParamCond 0 []])),(16,(wybe.string.print<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm alloc(32:wybe.int, ?tmp#14##0:common_fields) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#14##0:common_fields, ?tmp#15##0:common_fields, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, "a":wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#15##0:common_fields, ?tmp#16##0:common_fields, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, "b":wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#16##0:common_fields, ?tmp#17##0:common_fields, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, "c":wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#17##0:common_fields, ?tmp#0##0:common_fields, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, 0:wybe.int) @common_fields:nn:nn
    foreign lpvm alloc(24:wybe.int, ?tmp#21##0:common_fields) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#21##0:common_fields, ?tmp#22##0:common_fields, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, "b":wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#22##0:common_fields, ?tmp#23##0:common_fields, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.int) @common_fields:nn:nn
    foreign lpvm mutate(~tmp#23##0:common_fields, ?tmp#24##0:common_fields, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @common_fields:nn:nn
    foreign llvm or(~tmp#24##0:common_fields, 1:wybe.int, ?tmp#1##0:common_fields) @common_fields:nn:nn
    common_fields.title<0>(tmp#0##0:common_fields, ?tmp#2##0:wybe.string) #2 @common_fields:nn:nn
    wybe.string.print<0>(~tmp#2##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #14 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#26##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#26##0:wybe.phantom, ?tmp#27##0:wybe.phantom) @io:nn:nn
    common_fields.id<0>(tmp#1##0:common_fields, ?tmp#3##0:wybe.int) #4 @common_fields:nn:nn
    foreign c print_int(~tmp#3##0:wybe.int, ~tmp#27##0:wybe.phantom, ?tmp#30##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @io:nn:nn
    common_fields.id<1>[410bae77d3](~tmp#1##0:common_fields, ?c##1:common_fields, 10:wybe.int) #6 @common_fields:nn:nn
    common_fields.id<0>(~c##1:common_fields, ?tmp#4##0:wybe.int) #7 @common_fields:nn:nn
    foreign c print_int(~tmp#4##0:wybe.int, ~tmp#31##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#34##0:wybe.phantom, ?tmp#35##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#35##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    common_fields.genre<0>(tmp#0##0:common_fields, ?tmp#5##0:wybe.string, ?tmp#8##0:wybe.bool) #9 @common_fields:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:

    1:
        common_fields.genre<1>(~tmp#0##0:common_fields, ?b##1:common_fields, "g":wybe.string, ?tmp#9##0:wybe.bool) #10 @common_fields:nn:nn
        case ~tmp#9##0:wybe.bool of
        0:

        1:
            wybe.string.print<0>(~tmp#5##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #15 @string:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#37##0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#37##0:wybe.phantom, ?tmp#38##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#38##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
            common_fields.genre<0>(~b##1:common_fields, ?tmp#6##0:wybe.string, ?tmp#7##0:wybe.bool) #12 @common_fields:nn:nn
            case ~tmp#7##0:wybe.bool of
            0:

            1:
                wybe.string.print<0>[410bae77d3](~tmp#6##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #16 @string:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#40##0:wybe.phantom) @io:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp#40##0:wybe.phantom, ?tmp#41##0:wybe.phantom) @io:nn:nn
                foreign lpvm store(~%tmp#41##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn





= > public (1 calls)
0: common_fields.=<0>
=(#left##0:common_fields, #right##0:common_fields, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 3:wybe.int, ?tmp#23##0:wybe.int)
    case ~tmp#23##0:wybe.int of
    0:
        foreign lpvm access(#left##0:common_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#title##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#left##0:common_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#author##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#left##0:common_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#genre##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(~#left##0:common_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#id##0:wybe.int) @common_fields:nn:nn
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#67##0:wybe.int)
        foreign llvm icmp_eq(~tmp#67##0:wybe.int, 0:wybe.int, ?tmp#68##0:wybe.bool)
        case ~tmp#68##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:common_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#title##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(#right##0:common_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#author##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(#right##0:common_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#genre##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(~#right##0:common_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#id##0:wybe.int) @common_fields:nn:nn
            wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#title##0:wybe.string, ~#right#title##0:wybe.string, ~#left#title##0:wybe.string, ~#right#title##0:wybe.string, ?tmp#71##0:wybe.comparison) #26 @string:nn:nn
            foreign llvm icmp_eq(~tmp#71##0:wybe.comparison, 1:wybe.comparison, ?tmp#2##0:wybe.bool) @comparison:nn:nn
            case ~tmp#2##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#author##0:wybe.string, ~#right#author##0:wybe.string, ~#left#author##0:wybe.string, ~#right#author##0:wybe.string, ?tmp#74##0:wybe.comparison) #27 @string:nn:nn
                foreign llvm icmp_eq(~tmp#74##0:wybe.comparison, 1:wybe.comparison, ?tmp#3##0:wybe.bool) @comparison:nn:nn
                case ~tmp#3##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#genre##0:wybe.string, ~#right#genre##0:wybe.string, ~#left#genre##0:wybe.string, ~#right#genre##0:wybe.string, ?tmp#77##0:wybe.comparison) #28 @string:nn:nn
                    foreign llvm icmp_eq(~tmp#77##0:wybe.comparison, 1:wybe.comparison, ?tmp#4##0:wybe.bool) @comparison:nn:nn
                    case ~tmp#4##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign llvm icmp_eq(~#left#id##0:wybe.int, ~#right#id##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





    1:
        foreign lpvm access(#left##0:common_fields, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?#left#title##1:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#left##0:common_fields, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?#left#frequency##0:wybe.int) @common_fields:nn:nn
        foreign lpvm access(~#left##0:common_fields, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?#left#id##1:wybe.int) @common_fields:nn:nn
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#57##0:wybe.int)
        foreign llvm icmp_eq(~tmp#57##0:wybe.int, 1:wybe.int, ?tmp#58##0:wybe.bool)
        case ~tmp#58##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:common_fields, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?#right#title##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(#right##0:common_fields, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?#right#frequency##0:wybe.int) @common_fields:nn:nn
            foreign lpvm access(~#right##0:common_fields, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?#right#id##0:wybe.int) @common_fields:nn:nn
            wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#title##1:wybe.string, ~#right#title##0:wybe.string, ~#left#title##1:wybe.string, ~#right#title##0:wybe.string, ?tmp#61##0:wybe.comparison) #25 @string:nn:nn
            foreign llvm icmp_eq(~tmp#61##0:wybe.comparison, 1:wybe.comparison, ?tmp#7##0:wybe.bool) @comparison:nn:nn
            case ~tmp#7##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#frequency##0:wybe.int, ~#right#frequency##0:wybe.int, ?tmp#8##0:wybe.bool) @int:nn:nn
                case ~tmp#8##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~#left#id##1:wybe.int, ~#right#id##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




    2:
        foreign lpvm access(#left##0:common_fields, -2:wybe.int, 32:wybe.int, 2:wybe.int, ?#left#title##2:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#left##0:common_fields, 6:wybe.int, 32:wybe.int, 2:wybe.int, ?#left#director##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#left##0:common_fields, 14:wybe.int, 32:wybe.int, 2:wybe.int, ?#left#genre##1:wybe.string) @common_fields:nn:nn
        foreign lpvm access(~#left##0:common_fields, 22:wybe.int, 32:wybe.int, 2:wybe.int, ?#left#id##2:wybe.int) @common_fields:nn:nn
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#43##0:wybe.int)
        foreign llvm icmp_eq(~tmp#43##0:wybe.int, 2:wybe.int, ?tmp#44##0:wybe.bool)
        case ~tmp#44##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:common_fields, -2:wybe.int, 32:wybe.int, 2:wybe.int, ?#right#title##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(#right##0:common_fields, 6:wybe.int, 32:wybe.int, 2:wybe.int, ?#right#director##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(#right##0:common_fields, 14:wybe.int, 32:wybe.int, 2:wybe.int, ?#right#genre##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(~#right##0:common_fields, 22:wybe.int, 32:wybe.int, 2:wybe.int, ?#right#id##0:wybe.int) @common_fields:nn:nn
            wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#title##2:wybe.string, ~#right#title##0:wybe.string, ~#left#title##2:wybe.string, ~#right#title##0:wybe.string, ?tmp#47##0:wybe.comparison) #22 @string:nn:nn
            foreign llvm icmp_eq(~tmp#47##0:wybe.comparison, 1:wybe.comparison, ?tmp#11##0:wybe.bool) @comparison:nn:nn
            case ~tmp#11##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#director##0:wybe.string, ~#right#director##0:wybe.string, ~#left#director##0:wybe.string, ~#right#director##0:wybe.string, ?tmp#50##0:wybe.comparison) #23 @string:nn:nn
                foreign llvm icmp_eq(~tmp#50##0:wybe.comparison, 1:wybe.comparison, ?tmp#12##0:wybe.bool) @comparison:nn:nn
                case ~tmp#12##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#genre##1:wybe.string, ~#right#genre##0:wybe.string, ~#left#genre##1:wybe.string, ~#right#genre##0:wybe.string, ?tmp#53##0:wybe.comparison) #24 @string:nn:nn
                    foreign llvm icmp_eq(~tmp#53##0:wybe.comparison, 1:wybe.comparison, ?tmp#13##0:wybe.bool) @comparison:nn:nn
                    case ~tmp#13##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign llvm icmp_eq(~#left#id##2:wybe.int, ~#right#id##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





    3:
        foreign lpvm access(#left##0:common_fields, -3:wybe.int, 16:wybe.int, 3:wybe.int, ?#left#title##3:wybe.string) @common_fields:nn:nn
        foreign lpvm access(~#left##0:common_fields, 5:wybe.int, 16:wybe.int, 3:wybe.int, ?#left#id##3:wybe.int) @common_fields:nn:nn
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#35##0:wybe.int)
        foreign llvm icmp_eq(~tmp#35##0:wybe.int, 3:wybe.int, ?tmp#36##0:wybe.bool)
        case ~tmp#36##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:common_fields, -3:wybe.int, 16:wybe.int, 3:wybe.int, ?#right#title##0:wybe.string) @common_fields:nn:nn
            foreign lpvm access(~#right##0:common_fields, 5:wybe.int, 16:wybe.int, 3:wybe.int, ?#right#id##0:wybe.int) @common_fields:nn:nn
            wybe.string.<=>#cont#2<0>(1:wybe.comparison, ~#left#title##3:wybe.string, ~#right#title##0:wybe.string, ~#left#title##3:wybe.string, ~#right#title##0:wybe.string, ?tmp#39##0:wybe.comparison) #21 @string:nn:nn
            foreign llvm icmp_eq(~tmp#39##0:wybe.comparison, 1:wybe.comparison, ?tmp#16##0:wybe.bool) @comparison:nn:nn
            case ~tmp#16##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#id##3:wybe.int, ~#right#id##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





DVD > public {inline} (0 calls)
0: common_fields.DVD<0>
DVD(title##0:wybe.string, director##0:wybe.string, genre##0:wybe.string, id##0:wybe.int, ?#result##0:common_fields)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?#rec##0:common_fields) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~title##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##1:common_fields, ?#rec##2:common_fields, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~director##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##2:common_fields, ?#rec##3:common_fields, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~genre##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##3:common_fields, ?#rec##4:common_fields, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~id##0:wybe.int) @common_fields:nn:nn
    foreign llvm or(~#rec##4:common_fields, 2:wybe.int, ?#result##0:common_fields) @common_fields:nn:nn
DVD > public {inline} (14 calls)
1: common_fields.DVD<1>
DVD(?title##0:wybe.string, ?director##0:wybe.string, ?genre##0:wybe.string, ?id##0:wybe.int, #result##0:common_fields, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.string, ?title##0:wybe.string)
        foreign llvm move(undef:wybe.string, ?director##0:wybe.string)
        foreign llvm move(undef:wybe.string, ?genre##0:wybe.string)
        foreign llvm move(undef:wybe.int, ?id##0:wybe.int)

    1:
        foreign lpvm access(#result##0:common_fields, -2:wybe.int, 32:wybe.int, 2:wybe.int, ?title##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#result##0:common_fields, 6:wybe.int, 32:wybe.int, 2:wybe.int, ?director##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#result##0:common_fields, 14:wybe.int, 32:wybe.int, 2:wybe.int, ?genre##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(~#result##0:common_fields, 22:wybe.int, 32:wybe.int, 2:wybe.int, ?id##0:wybe.int) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



author > public {inline} (0 calls)
0: common_fields.author<0>
author(#rec##0:common_fields, ?#result##0:wybe.string, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.string, ?#result##0:wybe.string)

    1:
        foreign lpvm access(~#rec##0:common_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

author > public {inline} (0 calls)
1: common_fields.author<1>
author(#rec##0:common_fields, ?#rec##1:common_fields, #field##0:wybe.string, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:common_fields, ?#rec##1:common_fields)

    1:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



book > public {inline} (7 calls)
0: common_fields.book<0>
book(title##0:wybe.string, author##0:wybe.string, genre##0:wybe.string, id##0:wybe.int, ?#result##0:common_fields)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?#rec##0:common_fields) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~title##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##1:common_fields, ?#rec##2:common_fields, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~author##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##2:common_fields, ?#rec##3:common_fields, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~genre##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##3:common_fields, ?#result##0:common_fields, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~id##0:wybe.int) @common_fields:nn:nn
book > public {inline} (32 calls)
1: common_fields.book<1>
book(?title##0:wybe.string, ?author##0:wybe.string, ?genre##0:wybe.string, ?id##0:wybe.int, #result##0:common_fields, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.string, ?title##0:wybe.string)
        foreign llvm move(undef:wybe.string, ?author##0:wybe.string)
        foreign llvm move(undef:wybe.string, ?genre##0:wybe.string)
        foreign llvm move(undef:wybe.int, ?id##0:wybe.int)

    1:
        foreign lpvm access(#result##0:common_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?title##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#result##0:common_fields, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?author##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#result##0:common_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?genre##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(~#result##0:common_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?id##0:wybe.int) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



director > public {inline} (0 calls)
0: common_fields.director<0>
director(#rec##0:common_fields, ?#result##0:wybe.string, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.string, ?#result##0:wybe.string)

    1:
        foreign lpvm access(~#rec##0:common_fields, 6:wybe.int, 32:wybe.int, 2:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

director > public {inline} (0 calls)
1: common_fields.director<1>
director(#rec##0:common_fields, ?#rec##1:common_fields, #field##0:wybe.string, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:common_fields, ?#rec##1:common_fields)

    1:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 6:wybe.int, 0:wybe.int, 32:wybe.int, 2:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



frequency > public {inline} (0 calls)
0: common_fields.frequency<0>
frequency(#rec##0:common_fields, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:common_fields, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

frequency > public {inline} (0 calls)
1: common_fields.frequency<1>
frequency(#rec##0:common_fields, ?#rec##1:common_fields, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:common_fields, ?#rec##1:common_fields)

    1:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 7:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



genre > public (10 calls)
0: common_fields.genre<0>
genre(#rec##0:common_fields, ?#result##0:wybe.string, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: [(#rec##0,#result##0)]
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#2##0:wybe.bool)
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(undef:wybe.string, ?#result##0:wybe.string)

        1:
            foreign lpvm access(~#rec##0:common_fields, 14:wybe.int, 32:wybe.int, 2:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


    1:
        foreign lpvm access(~#rec##0:common_fields, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

genre > public (5 calls)
1: common_fields.genre<1>
genre(#rec##0:common_fields, ?#rec##1:common_fields, #field##0:wybe.string, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: [(#field##0,#rec##0),(#field##0,#rec##1),(#rec##0,#rec##1)]
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#2##0:wybe.bool)
        case ~tmp#2##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
            foreign llvm move(~#rec##0:common_fields, ?#rec##1:common_fields)

        1:
            foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 14:wybe.int, 0:wybe.int, 32:wybe.int, 2:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


    1:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



id > public (14 calls)
0: common_fields.id<0>
id(#rec##0:common_fields, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    case ~tmp#1##0:wybe.int of
    0:
        foreign lpvm access(~#rec##0:common_fields, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @common_fields:nn:nn

    1:
        foreign lpvm access(~#rec##0:common_fields, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @common_fields:nn:nn

    2:
        foreign lpvm access(~#rec##0:common_fields, 22:wybe.int, 32:wybe.int, 2:wybe.int, ?#result##0:wybe.int) @common_fields:nn:nn

id > public (7 calls)
1: common_fields.id<1>[410bae77d3]
id(#rec##0:common_fields, ?#rec##1:common_fields, #field##0:wybe.int)<{}; {}>:
  AliasPairs: [(#rec##0,#rec##1)]
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    case ~tmp#1##0:wybe.int of
    0:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn

    1:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 15:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn

    2:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 22:wybe.int, 0:wybe.int, 32:wybe.int, 2:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    case ~tmp#1##0:wybe.int of
    0:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn

    1:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 15:wybe.int, 1:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn

    2:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 22:wybe.int, 1:wybe.int, 32:wybe.int, 2:wybe.int, ~#field##0:wybe.int) @common_fields:nn:nn



magazine > public {inline} (7 calls)
0: common_fields.magazine<0>
magazine(title##0:wybe.string, frequency##0:wybe.int, id##0:wybe.int, ?#result##0:common_fields)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:common_fields) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~title##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##1:common_fields, ?#rec##2:common_fields, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~frequency##0:wybe.int) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##2:common_fields, ?#rec##3:common_fields, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~id##0:wybe.int) @common_fields:nn:nn
    foreign llvm or(~#rec##3:common_fields, 1:wybe.int, ?#result##0:common_fields) @common_fields:nn:nn
magazine > public {inline} (17 calls)
1: common_fields.magazine<1>
magazine(?title##0:wybe.string, ?frequency##0:wybe.int, ?id##0:wybe.int, #result##0:common_fields, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.string, ?title##0:wybe.string)
        foreign llvm move(undef:wybe.int, ?frequency##0:wybe.int)
        foreign llvm move(undef:wybe.int, ?id##0:wybe.int)

    1:
        foreign lpvm access(#result##0:common_fields, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?title##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(#result##0:common_fields, 7:wybe.int, 24:wybe.int, 1:wybe.int, ?frequency##0:wybe.int) @common_fields:nn:nn
        foreign lpvm access(~#result##0:common_fields, 15:wybe.int, 24:wybe.int, 1:wybe.int, ?id##0:wybe.int) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



other > public {inline} (0 calls)
0: common_fields.other<0>
other(title##0:wybe.string, id##0:wybe.int, ?#result##0:common_fields)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:common_fields) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~title##0:wybe.string) @common_fields:nn:nn
    foreign lpvm mutate(~#rec##1:common_fields, ?#rec##2:common_fields, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~id##0:wybe.int) @common_fields:nn:nn
    foreign llvm or(~#rec##2:common_fields, 3:wybe.int, ?#result##0:common_fields) @common_fields:nn:nn
other > public {inline} (7 calls)
1: common_fields.other<1>
other(?title##0:wybe.string, ?id##0:wybe.int, #result##0:common_fields, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 3:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.string, ?title##0:wybe.string)
        foreign llvm move(undef:wybe.int, ?id##0:wybe.int)

    1:
        foreign lpvm access(#result##0:common_fields, -3:wybe.int, 16:wybe.int, 3:wybe.int, ?title##0:wybe.string) @common_fields:nn:nn
        foreign lpvm access(~#result##0:common_fields, 5:wybe.int, 16:wybe.int, 3:wybe.int, ?id##0:wybe.int) @common_fields:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



title > public (7 calls)
0: common_fields.title<0>
title(#rec##0:common_fields, ?#result##0:wybe.string)<{}; {}>:
  AliasPairs: [(#rec##0,#result##0)]
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    case ~tmp#1##0:wybe.int of
    0:
        foreign lpvm access(~#rec##0:common_fields, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn

    1:
        foreign lpvm access(~#rec##0:common_fields, -1:wybe.int, 24:wybe.int, 1:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn

    2:
        foreign lpvm access(~#rec##0:common_fields, -2:wybe.int, 32:wybe.int, 2:wybe.int, ?#result##0:wybe.string) @common_fields:nn:nn

title > public (0 calls)
1: common_fields.title<1>
title(#rec##0:common_fields, ?#rec##1:common_fields, #field##0:wybe.string)<{}; {}>:
  AliasPairs: [(#field##0,#rec##0),(#field##0,#rec##1),(#rec##0,#rec##1)]
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    case ~tmp#1##0:wybe.int of
    0:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn

    1:
        foreign lpvm {noalias} mutate(~#rec##0:common_fields, ?#rec##1:common_fields, -1:wybe.int, 0:wybe.int, 24:wybe.int, 1:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn

    2:
        foreign lpvm mutate(~#rec##0:common_fields, ?#rec##1:common_fields, -2:wybe.int, 0:wybe.int, 32:wybe.int, 2:wybe.int, ~#field##0:wybe.string) @common_fields:nn:nn



~= > public {inline} (0 calls)
0: common_fields.~=<0>
~=(#left##0:common_fields, #right##0:common_fields, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    common_fields.=<0>(~#left##0:common_fields, ~#right##0:common_fields, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'common_fields'


 


@common_fields.1 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @common_fields.0 to i64) }


@common_fields.3 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @common_fields.2 to i64) }


@common_fields.5 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @common_fields.4 to i64) }


@common_fields.7 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @common_fields.6 to i64) }


@common_fields.0 =    constant [?? x i8] c"a\00"


@common_fields.2 =    constant [?? x i8] c"b\00"


@common_fields.4 =    constant [?? x i8] c"c\00"


@common_fields.6 =    constant [?? x i8] c"g\00"


declare external fastcc  i2 @"wybe.string.<=>#cont#2<0>"(i2, i64, i64, i64, i64)    


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>[410bae77d3]"(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"common_fields.<0>"()    {
entry:
  %0 = trunc i64 32 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @common_fields.1, i32 0, i32 0) to i64), i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @common_fields.3, i32 0, i32 0) to i64), i64* %5 
  %6 = add   i64 %2, 16 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @common_fields.5, i32 0, i32 0) to i64), i64* %7 
  %8 = add   i64 %2, 24 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 0, i64* %9 
  %10 = trunc i64 24 to i32  
  %11 = tail call ccc  i8*  @wybe_malloc(i32  %10)  
  %12 = ptrtoint i8* %11 to i64 
  %13 = inttoptr i64 %12 to i64* 
  store  i64 ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @common_fields.3, i32 0, i32 0) to i64), i64* %13 
  %14 = add   i64 %12, 8 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 0, i64* %15 
  %16 = add   i64 %12, 16 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 1, i64* %17 
  %18 = or i64 %12, 1 
  %19 = tail call fastcc  i64  @"common_fields.title<0>"(i64  %2)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  %19)  
  tail call ccc  void  @putchar(i8  10)  
  %20 = tail call fastcc  i64  @"common_fields.id<0>"(i64  %18)  
  tail call ccc  void  @print_int(i64  %20)  
  tail call ccc  void  @putchar(i8  10)  
  %21 = tail call fastcc  i64  @"common_fields.id<1>[410bae77d3]"(i64  %18, i64  10)  
  %22 = tail call fastcc  i64  @"common_fields.id<0>"(i64  %21)  
  tail call ccc  void  @print_int(i64  %22)  
  tail call ccc  void  @putchar(i8  10)  
  %23 = tail call fastcc  {i64, i1}  @"common_fields.genre<0>"(i64  %2)  
  %24 = extractvalue {i64, i1} %23, 0 
  %25 = extractvalue {i64, i1} %23, 1 
  br i1 %25, label %if.then, label %if.else 
if.then:
  %26 = tail call fastcc  {i64, i1}  @"common_fields.genre<1>"(i64  %2, i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @common_fields.7, i32 0, i32 0) to i64))  
  %27 = extractvalue {i64, i1} %26, 0 
  %28 = extractvalue {i64, i1} %26, 1 
  br i1 %28, label %if.then1, label %if.else1 
if.else:
  ret void 
if.then1:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  %24)  
  tail call ccc  void  @putchar(i8  10)  
  %29 = tail call fastcc  {i64, i1}  @"common_fields.genre<0>"(i64  %27)  
  %30 = extractvalue {i64, i1} %29, 0 
  %31 = extractvalue {i64, i1} %29, 1 
  br i1 %31, label %if.then2, label %if.else2 
if.else1:
  ret void 
if.then2:
  tail call fastcc  void  @"wybe.string.print<0>[410bae77d3]"(i64  %30)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else2:
  ret void 
}


define external fastcc  i1 @"common_fields.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = and i64 %"#left##0", 3 
  switch i64 %0, label %switch.4.3 [i64 0, label %switch.4.0 i64 1, label %switch.4.1 i64 2, label %switch.4.2 i64 3, label %switch.4.3] 
switch.4.0:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = add   i64 %"#left##0", 16 
  %7 = inttoptr i64 %6 to i64* 
  %8 = load  i64, i64* %7 
  %9 = add   i64 %"#left##0", 24 
  %10 = inttoptr i64 %9 to i64* 
  %11 = load  i64, i64* %10 
  %12 = and i64 %"#right##0", 3 
  %13 = icmp eq i64 %12, 0 
  br i1 %13, label %if.then, label %if.else 
switch.4.1:
  %32 = add   i64 %"#left##0", -1 
  %33 = inttoptr i64 %32 to i64* 
  %34 = load  i64, i64* %33 
  %35 = add   i64 %"#left##0", 7 
  %36 = inttoptr i64 %35 to i64* 
  %37 = load  i64, i64* %36 
  %38 = add   i64 %"#left##0", 15 
  %39 = inttoptr i64 %38 to i64* 
  %40 = load  i64, i64* %39 
  %41 = and i64 %"#right##0", 3 
  %42 = icmp eq i64 %41, 1 
  br i1 %42, label %if.then4, label %if.else4 
switch.4.2:
  %56 = add   i64 %"#left##0", -2 
  %57 = inttoptr i64 %56 to i64* 
  %58 = load  i64, i64* %57 
  %59 = add   i64 %"#left##0", 6 
  %60 = inttoptr i64 %59 to i64* 
  %61 = load  i64, i64* %60 
  %62 = add   i64 %"#left##0", 14 
  %63 = inttoptr i64 %62 to i64* 
  %64 = load  i64, i64* %63 
  %65 = add   i64 %"#left##0", 22 
  %66 = inttoptr i64 %65 to i64* 
  %67 = load  i64, i64* %66 
  %68 = and i64 %"#right##0", 3 
  %69 = icmp eq i64 %68, 2 
  br i1 %69, label %if.then7, label %if.else7 
switch.4.3:
  %89 = add   i64 %"#left##0", -3 
  %90 = inttoptr i64 %89 to i64* 
  %91 = load  i64, i64* %90 
  %92 = add   i64 %"#left##0", 5 
  %93 = inttoptr i64 %92 to i64* 
  %94 = load  i64, i64* %93 
  %95 = and i64 %"#right##0", 3 
  %96 = icmp eq i64 %95, 3 
  br i1 %96, label %if.then11, label %if.else11 
if.then:
  %14 = inttoptr i64 %"#right##0" to i64* 
  %15 = load  i64, i64* %14 
  %16 = add   i64 %"#right##0", 8 
  %17 = inttoptr i64 %16 to i64* 
  %18 = load  i64, i64* %17 
  %19 = add   i64 %"#right##0", 16 
  %20 = inttoptr i64 %19 to i64* 
  %21 = load  i64, i64* %20 
  %22 = add   i64 %"#right##0", 24 
  %23 = inttoptr i64 %22 to i64* 
  %24 = load  i64, i64* %23 
  %25 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %2, i64  %15, i64  %2, i64  %15)  
  %26 = icmp eq i2 %25, 1 
  br i1 %26, label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %27 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %5, i64  %18, i64  %5, i64  %18)  
  %28 = icmp eq i2 %27, 1 
  br i1 %28, label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %29 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %8, i64  %21, i64  %8, i64  %21)  
  %30 = icmp eq i2 %29, 1 
  br i1 %30, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %31 = icmp eq i64 %11, %24 
  ret i1 %31 
if.else3:
  ret i1 0 
if.then4:
  %43 = add   i64 %"#right##0", -1 
  %44 = inttoptr i64 %43 to i64* 
  %45 = load  i64, i64* %44 
  %46 = add   i64 %"#right##0", 7 
  %47 = inttoptr i64 %46 to i64* 
  %48 = load  i64, i64* %47 
  %49 = add   i64 %"#right##0", 15 
  %50 = inttoptr i64 %49 to i64* 
  %51 = load  i64, i64* %50 
  %52 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %34, i64  %45, i64  %34, i64  %45)  
  %53 = icmp eq i2 %52, 1 
  br i1 %53, label %if.then5, label %if.else5 
if.else4:
  ret i1 0 
if.then5:
  %54 = icmp eq i64 %37, %48 
  br i1 %54, label %if.then6, label %if.else6 
if.else5:
  ret i1 0 
if.then6:
  %55 = icmp eq i64 %40, %51 
  ret i1 %55 
if.else6:
  ret i1 0 
if.then7:
  %70 = add   i64 %"#right##0", -2 
  %71 = inttoptr i64 %70 to i64* 
  %72 = load  i64, i64* %71 
  %73 = add   i64 %"#right##0", 6 
  %74 = inttoptr i64 %73 to i64* 
  %75 = load  i64, i64* %74 
  %76 = add   i64 %"#right##0", 14 
  %77 = inttoptr i64 %76 to i64* 
  %78 = load  i64, i64* %77 
  %79 = add   i64 %"#right##0", 22 
  %80 = inttoptr i64 %79 to i64* 
  %81 = load  i64, i64* %80 
  %82 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %58, i64  %72, i64  %58, i64  %72)  
  %83 = icmp eq i2 %82, 1 
  br i1 %83, label %if.then8, label %if.else8 
if.else7:
  ret i1 0 
if.then8:
  %84 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %61, i64  %75, i64  %61, i64  %75)  
  %85 = icmp eq i2 %84, 1 
  br i1 %85, label %if.then9, label %if.else9 
if.else8:
  ret i1 0 
if.then9:
  %86 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %64, i64  %78, i64  %64, i64  %78)  
  %87 = icmp eq i2 %86, 1 
  br i1 %87, label %if.then10, label %if.else10 
if.else9:
  ret i1 0 
if.then10:
  %88 = icmp eq i64 %67, %81 
  ret i1 %88 
if.else10:
  ret i1 0 
if.then11:
  %97 = add   i64 %"#right##0", -3 
  %98 = inttoptr i64 %97 to i64* 
  %99 = load  i64, i64* %98 
  %100 = add   i64 %"#right##0", 5 
  %101 = inttoptr i64 %100 to i64* 
  %102 = load  i64, i64* %101 
  %103 = tail call fastcc  i2  @"wybe.string.<=>#cont#2<0>"(i2  1, i64  %91, i64  %99, i64  %91, i64  %99)  
  %104 = icmp eq i2 %103, 1 
  br i1 %104, label %if.then12, label %if.else12 
if.else11:
  ret i1 0 
if.then12:
  %105 = icmp eq i64 %94, %102 
  ret i1 %105 
if.else12:
  ret i1 0 
}


define external fastcc  i64 @"common_fields.DVD<0>"(i64  %"title##0", i64  %"director##0", i64  %"genre##0", i64  %"id##0") alwaysinline   {
entry:
  %0 = trunc i64 32 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"title##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"director##0", i64* %5 
  %6 = add   i64 %2, 16 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"genre##0", i64* %7 
  %8 = add   i64 %2, 24 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %"id##0", i64* %9 
  %10 = or i64 %2, 2 
  ret i64 %10 
}


define external fastcc  {i64, i64, i64, i64, i1} @"common_fields.DVD<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = and i64 %"#result##0", 3 
  %1 = icmp eq i64 %0, 2 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#result##0", -2 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"#result##0", 6 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"#result##0", 14 
  %9 = inttoptr i64 %8 to i64* 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"#result##0", 22 
  %12 = inttoptr i64 %11 to i64* 
  %13 = load  i64, i64* %12 
  %14 = insertvalue {i64, i64, i64, i64, i1} undef, i64 %4, 0 
  %15 = insertvalue {i64, i64, i64, i64, i1} %14, i64 %7, 1 
  %16 = insertvalue {i64, i64, i64, i64, i1} %15, i64 %10, 2 
  %17 = insertvalue {i64, i64, i64, i64, i1} %16, i64 %13, 3 
  %18 = insertvalue {i64, i64, i64, i64, i1} %17, i1 1, 4 
  ret {i64, i64, i64, i64, i1} %18 
if.else:
  %19 = insertvalue {i64, i64, i64, i64, i1} undef, i64 undef, 0 
  %20 = insertvalue {i64, i64, i64, i64, i1} %19, i64 undef, 1 
  %21 = insertvalue {i64, i64, i64, i64, i1} %20, i64 undef, 2 
  %22 = insertvalue {i64, i64, i64, i64, i1} %21, i64 undef, 3 
  %23 = insertvalue {i64, i64, i64, i64, i1} %22, i1 0, 4 
  ret {i64, i64, i64, i64, i1} %23 
}


define external fastcc  {i64, i1} @"common_fields.author<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 3 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#rec##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"common_fields.author<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 3 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 32 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = inttoptr i64 %4 to i8* 
  %6 = inttoptr i64 %"#rec##0" to i8* 
  %7 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = add   i64 %4, 8 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %"#field##0", i64* %9 
  %10 = insertvalue {i64, i1} undef, i64 %4, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else:
  %12 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i64 @"common_fields.book<0>"(i64  %"title##0", i64  %"author##0", i64  %"genre##0", i64  %"id##0") alwaysinline   {
entry:
  %0 = trunc i64 32 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"title##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"author##0", i64* %5 
  %6 = add   i64 %2, 16 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"genre##0", i64* %7 
  %8 = add   i64 %2, 24 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %"id##0", i64* %9 
  ret i64 %2 
}


define external fastcc  {i64, i64, i64, i64, i1} @"common_fields.book<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = and i64 %"#result##0", 3 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#result##0" to i64* 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#result##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = load  i64, i64* %5 
  %7 = add   i64 %"#result##0", 16 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#result##0", 24 
  %11 = inttoptr i64 %10 to i64* 
  %12 = load  i64, i64* %11 
  %13 = insertvalue {i64, i64, i64, i64, i1} undef, i64 %3, 0 
  %14 = insertvalue {i64, i64, i64, i64, i1} %13, i64 %6, 1 
  %15 = insertvalue {i64, i64, i64, i64, i1} %14, i64 %9, 2 
  %16 = insertvalue {i64, i64, i64, i64, i1} %15, i64 %12, 3 
  %17 = insertvalue {i64, i64, i64, i64, i1} %16, i1 1, 4 
  ret {i64, i64, i64, i64, i1} %17 
if.else:
  %18 = insertvalue {i64, i64, i64, i64, i1} undef, i64 undef, 0 
  %19 = insertvalue {i64, i64, i64, i64, i1} %18, i64 undef, 1 
  %20 = insertvalue {i64, i64, i64, i64, i1} %19, i64 undef, 2 
  %21 = insertvalue {i64, i64, i64, i64, i1} %20, i64 undef, 3 
  %22 = insertvalue {i64, i64, i64, i64, i1} %21, i1 0, 4 
  ret {i64, i64, i64, i64, i1} %22 
}


define external fastcc  {i64, i1} @"common_fields.director<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 3 
  %1 = icmp eq i64 %0, 2 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#rec##0", 6 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"common_fields.director<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 3 
  %1 = icmp eq i64 %0, 2 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 32 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = add   i64 %4, 2 
  %6 = sub   i64 %"#rec##0", 2 
  %7 = inttoptr i64 %4 to i8* 
  %8 = inttoptr i64 %6 to i8* 
  %9 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %7, i8*  %8, i32  %9, i1  0)  
  %10 = add   i64 %5, 6 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %"#field##0", i64* %11 
  %12 = insertvalue {i64, i1} undef, i64 %5, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else:
  %14 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  {i64, i1} @"common_fields.frequency<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 3 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#rec##0", 7 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"common_fields.frequency<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = and i64 %"#rec##0", 3 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 24 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = add   i64 %4, 1 
  %6 = sub   i64 %"#rec##0", 1 
  %7 = inttoptr i64 %4 to i8* 
  %8 = inttoptr i64 %6 to i8* 
  %9 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %7, i8*  %8, i32  %9, i1  0)  
  %10 = add   i64 %5, 7 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %"#field##0", i64* %11 
  %12 = insertvalue {i64, i1} undef, i64 %5, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else:
  %14 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  {i64, i1} @"common_fields.genre<0>"(i64  %"#rec##0")    {
entry:
  %0 = and i64 %"#rec##0", 3 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#rec##0", 16 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = icmp eq i64 %0, 2 
  br i1 %7, label %if.then1, label %if.else1 
if.then1:
  %8 = add   i64 %"#rec##0", 14 
  %9 = inttoptr i64 %8 to i64* 
  %10 = load  i64, i64* %9 
  %11 = insertvalue {i64, i1} undef, i64 %10, 0 
  %12 = insertvalue {i64, i1} %11, i1 1, 1 
  ret {i64, i1} %12 
if.else1:
  %13 = insertvalue {i64, i1} undef, i64 undef, 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
}


define external fastcc  {i64, i1} @"common_fields.genre<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = and i64 %"#rec##0", 3 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 32 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = inttoptr i64 %4 to i8* 
  %6 = inttoptr i64 %"#rec##0" to i8* 
  %7 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = add   i64 %4, 16 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %"#field##0", i64* %9 
  %10 = insertvalue {i64, i1} undef, i64 %4, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else:
  %12 = icmp eq i64 %0, 2 
  br i1 %12, label %if.then1, label %if.else1 
if.then1:
  %13 = trunc i64 32 to i32  
  %14 = tail call ccc  i8*  @wybe_malloc(i32  %13)  
  %15 = ptrtoint i8* %14 to i64 
  %16 = add   i64 %15, 2 
  %17 = sub   i64 %"#rec##0", 2 
  %18 = inttoptr i64 %15 to i8* 
  %19 = inttoptr i64 %17 to i8* 
  %20 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %18, i8*  %19, i32  %20, i1  0)  
  %21 = add   i64 %16, 14 
  %22 = inttoptr i64 %21 to i64* 
  store  i64 %"#field##0", i64* %22 
  %23 = insertvalue {i64, i1} undef, i64 %16, 0 
  %24 = insertvalue {i64, i1} %23, i1 1, 1 
  ret {i64, i1} %24 
if.else1:
  %25 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %26 = insertvalue {i64, i1} %25, i1 0, 1 
  ret {i64, i1} %26 
}


define external fastcc  i64 @"common_fields.id<0>"(i64  %"#rec##0")    {
entry:
  %0 = and i64 %"#rec##0", 3 
  switch i64 %0, label %switch.3.2 [i64 0, label %switch.3.0 i64 1, label %switch.3.1 i64 2, label %switch.3.2] 
switch.3.0:
  %1 = add   i64 %"#rec##0", 24 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  ret i64 %3 
switch.3.1:
  %4 = add   i64 %"#rec##0", 15 
  %5 = inttoptr i64 %4 to i64* 
  %6 = load  i64, i64* %5 
  ret i64 %6 
switch.3.2:
  %7 = add   i64 %"#rec##0", 22 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  ret i64 %9 
}


define external fastcc  i64 @"common_fields.id<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = and i64 %"#rec##0", 3 
  switch i64 %0, label %switch.3.2 [i64 0, label %switch.3.0 i64 1, label %switch.3.1 i64 2, label %switch.3.2] 
switch.3.0:
  %1 = trunc i64 32 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 24 
  %8 = inttoptr i64 %7 to i64* 
  store  i64 %"#field##0", i64* %8 
  ret i64 %3 
switch.3.1:
  %9 = trunc i64 24 to i32  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  %9)  
  %11 = ptrtoint i8* %10 to i64 
  %12 = add   i64 %11, 1 
  %13 = sub   i64 %"#rec##0", 1 
  %14 = inttoptr i64 %11 to i8* 
  %15 = inttoptr i64 %13 to i8* 
  %16 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %14, i8*  %15, i32  %16, i1  0)  
  %17 = add   i64 %12, 15 
  %18 = inttoptr i64 %17 to i64* 
  store  i64 %"#field##0", i64* %18 
  ret i64 %12 
switch.3.2:
  %19 = trunc i64 32 to i32  
  %20 = tail call ccc  i8*  @wybe_malloc(i32  %19)  
  %21 = ptrtoint i8* %20 to i64 
  %22 = add   i64 %21, 2 
  %23 = sub   i64 %"#rec##0", 2 
  %24 = inttoptr i64 %21 to i8* 
  %25 = inttoptr i64 %23 to i8* 
  %26 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %24, i8*  %25, i32  %26, i1  0)  
  %27 = add   i64 %22, 22 
  %28 = inttoptr i64 %27 to i64* 
  store  i64 %"#field##0", i64* %28 
  ret i64 %22 
}


define external fastcc  i64 @"common_fields.id<1>[410bae77d3]"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = and i64 %"#rec##0", 3 
  switch i64 %0, label %switch.3.2 [i64 0, label %switch.3.0 i64 1, label %switch.3.1 i64 2, label %switch.3.2] 
switch.3.0:
  %1 = add   i64 %"#rec##0", 24 
  %2 = inttoptr i64 %1 to i64* 
  store  i64 %"#field##0", i64* %2 
  ret i64 %"#rec##0" 
switch.3.1:
  %3 = add   i64 %"#rec##0", 15 
  %4 = inttoptr i64 %3 to i64* 
  store  i64 %"#field##0", i64* %4 
  ret i64 %"#rec##0" 
switch.3.2:
  %5 = add   i64 %"#rec##0", 22 
  %6 = inttoptr i64 %5 to i64* 
  store  i64 %"#field##0", i64* %6 
  ret i64 %"#rec##0" 
}


define external fastcc  i64 @"common_fields.magazine<0>"(i64  %"title##0", i64  %"frequency##0", i64  %"id##0") alwaysinline   {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"title##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"frequency##0", i64* %5 
  %6 = add   i64 %2, 16 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"id##0", i64* %7 
  %8 = or i64 %2, 1 
  ret i64 %8 
}


define external fastcc  {i64, i64, i64, i1} @"common_fields.magazine<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = and i64 %"#result##0", 3 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#result##0", -1 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"#result##0", 7 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"#result##0", 15 
  %9 = inttoptr i64 %8 to i64* 
  %10 = load  i64, i64* %9 
  %11 = insertvalue {i64, i64, i64, i1} undef, i64 %4, 0 
  %12 = insertvalue {i64, i64, i64, i1} %11, i64 %7, 1 
  %13 = insertvalue {i64, i64, i64, i1} %12, i64 %10, 2 
  %14 = insertvalue {i64, i64, i64, i1} %13, i1 1, 3 
  ret {i64, i64, i64, i1} %14 
if.else:
  %15 = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0 
  %16 = insertvalue {i64, i64, i64, i1} %15, i64 undef, 1 
  %17 = insertvalue {i64, i64, i64, i1} %16, i64 undef, 2 
  %18 = insertvalue {i64, i64, i64, i1} %17, i1 0, 3 
  ret {i64, i64, i64, i1} %18 
}


define external fastcc  i64 @"common_fields.other<0>"(i64  %"title##0", i64  %"id##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"title##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"id##0", i64* %5 
  %6 = or i64 %2, 3 
  ret i64 %6 
}


define external fastcc  {i64, i64, i1} @"common_fields.other<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = and i64 %"#result##0", 3 
  %1 = icmp eq i64 %0, 3 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#result##0", -3 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = add   i64 %"#result##0", 5 
  %6 = inttoptr i64 %5 to i64* 
  %7 = load  i64, i64* %6 
  %8 = insertvalue {i64, i64, i1} undef, i64 %4, 0 
  %9 = insertvalue {i64, i64, i1} %8, i64 %7, 1 
  %10 = insertvalue {i64, i64, i1} %9, i1 1, 2 
  ret {i64, i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i64, i1} %11, i64 undef, 1 
  %13 = insertvalue {i64, i64, i1} %12, i1 0, 2 
  ret {i64, i64, i1} %13 
}


define external fastcc  i64 @"common_fields.title<0>"(i64  %"#rec##0")    {
entry:
  %0 = and i64 %"#rec##0", 3 
  switch i64 %0, label %switch.3.2 [i64 0, label %switch.3.0 i64 1, label %switch.3.1 i64 2, label %switch.3.2] 
switch.3.0:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = load  i64, i64* %1 
  ret i64 %2 
switch.3.1:
  %3 = add   i64 %"#rec##0", -1 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  ret i64 %5 
switch.3.2:
  %6 = add   i64 %"#rec##0", -2 
  %7 = inttoptr i64 %6 to i64* 
  %8 = load  i64, i64* %7 
  ret i64 %8 
}


define external fastcc  i64 @"common_fields.title<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = and i64 %"#rec##0", 3 
  switch i64 %0, label %switch.3.2 [i64 0, label %switch.3.0 i64 1, label %switch.3.1 i64 2, label %switch.3.2] 
switch.3.0:
  %1 = trunc i64 32 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  store  i64 %"#field##0", i64* %7 
  ret i64 %3 
switch.3.1:
  %8 = trunc i64 24 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = add   i64 %10, 1 
  %12 = sub   i64 %"#rec##0", 1 
  %13 = inttoptr i64 %10 to i8* 
  %14 = inttoptr i64 %12 to i8* 
  %15 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %13, i8*  %14, i32  %15, i1  0)  
  %16 = add   i64 %11, -1 
  %17 = inttoptr i64 %16 to i64* 
  store  i64 %"#field##0", i64* %17 
  ret i64 %11 
switch.3.2:
  %18 = trunc i64 32 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = add   i64 %20, 2 
  %22 = sub   i64 %"#rec##0", 2 
  %23 = inttoptr i64 %20 to i8* 
  %24 = inttoptr i64 %22 to i8* 
  %25 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %23, i8*  %24, i32  %25, i1  0)  
  %26 = add   i64 %21, -2 
  %27 = inttoptr i64 %26 to i64* 
  store  i64 %"#field##0", i64* %27 
  ret i64 %21 
}


define external fastcc  i1 @"common_fields.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i1  @"common_fields.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}

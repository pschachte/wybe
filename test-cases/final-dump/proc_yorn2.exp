======================================================================
AFTER EVERYTHING:
 Module proc_yorn2
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : proc_yorn2.yorn<0>
  imports         : use wybe
  resources       : 
  procs           : 

gen#1 > (2 calls)
0: proc_yorn2.gen#1<0>
gen#1(prompt##0:wybe.string, ?result##1:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print_string<0>(prompt##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @io:nn:nn
    wybe.string.print_string<0>(" (y/n) ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #9 @io:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @io:nn:nn
    foreign c read_char(?response##0:wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign llvm icmp_eq(response##0:wybe.char, 'Y':wybe.char, ?tmp#0##0:wybe.bool) @char:nn:nn
    foreign llvm icmp_eq(~response##0:wybe.char, 'N':wybe.char, ?tmp#1##0:wybe.bool) @char:nn:nn
    foreign llvm or(tmp#0##0:wybe.bool, ~tmp#1##0:wybe.bool, ?tmp#2##0:wybe.bool) @bool:nn:nn
    case ~tmp#2##0:wybe.bool of
    0:
        wybe.string.print_string<0>("Please answer 'yes' or 'no'.":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #10 @io:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#15##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        proc_yorn2.gen#1<0>(~prompt##0:wybe.string, ?result##1:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @proc_yorn2:nn:nn

    1:
        foreign llvm move(~tmp#0##0:wybe.bool, ?result##1:wybe.bool)



yorn > public {inline} (0 calls)
0: proc_yorn2.yorn<0>
yorn(prompt##0:wybe.string, ?result##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    proc_yorn2.gen#1<0>(~prompt##0:wybe.string, ?result##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @proc_yorn2:nn:nn

  LLVM code       :

; ModuleID = 'proc_yorn2'


 


@proc_yorn2.2 =    constant {i64, i64} { i64 7, i64 ptrtoint ([?? x i8]* @proc_yorn2.1 to i64) }


@proc_yorn2.4 =    constant {i64, i64} { i64 28, i64 ptrtoint ([?? x i8]* @proc_yorn2.3 to i64) }


@proc_yorn2.1 =    constant [?? x i8] c" (y/n) \00"


@proc_yorn2.3 =    constant [?? x i8] c"Please answer 'yes' or 'no'.\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


declare external ccc  i8 @read_char()    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"proc_yorn2.gen#1<0>"(i64  %"prompt##0")    {
entry:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %"prompt##0")  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @proc_yorn2.2, i32 0, i32 0) to i64))  
  %"1#response##0" = tail call ccc  i8  @read_char()  
  %"1#tmp#0##0" = icmp eq i8 %"1#response##0", 89 
  %"1#tmp#1##0" = icmp eq i8 %"1#response##0", 78 
  %"1#tmp#2##0" = or i1 %"1#tmp#0##0", %"1#tmp#1##0" 
  br i1 %"1#tmp#2##0", label %if.then, label %if.else 
if.then:
  ret i1 %"1#tmp#0##0" 
if.else:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @proc_yorn2.4, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %"3#result##1" = tail call fastcc  i1  @"proc_yorn2.gen#1<0>"(i64  %"prompt##0")  
  ret i1 %"3#result##1" 
}


define external fastcc  i1 @"proc_yorn2.yorn<0>"(i64  %"prompt##0")    {
entry:
  %"1#result##0" = tail call fastcc  i1  @"proc_yorn2.gen#1<0>"(i64  %"prompt##0")  
  ret i1 %"1#result##0" 
}

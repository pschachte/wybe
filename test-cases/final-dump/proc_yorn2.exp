======================================================================
AFTER EVERYTHING:
 Module proc_yorn2
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : proc_yorn2.yorn<0>
  imports         : use wybe
  resources       : 
  procs           : 

gen$1 > (2 calls)
0: proc_yorn2.gen$1<0>
gen$1(io#0:wybe.phantom, prompt#0:wybe.string, ?result#1:wybe.bool, ?io#5:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string(prompt#0:wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    foreign c print_string(" (y/n) ":wybe.string, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @io:nn:nn
    foreign c read_char(?response#0:wybe.char, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @io:nn:nn
    foreign llvm icmp_eq(response#0:wybe.char, 'Y':wybe.char, ?tmp$0#0:wybe.bool) @char:nn:nn
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp_eq(~response#0:wybe.char, 'N':wybe.char, ?tmp$1#0:wybe.bool) @char:nn:nn
        case ~tmp$1#0:wybe.bool of
        0:
            foreign c print_string("Please answer 'yes' or 'no'.":wybe.string, ~#io#3:wybe.phantom, ?tmp$13#0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp$13#0:wybe.phantom, ?#io#4:wybe.phantom) @io:nn:nn
            proc_yorn2.gen$1<0>(~io#4:wybe.phantom, ~prompt#0:wybe.string, ?result#1:wybe.bool, ?io#5:wybe.phantom) #6 @proc_yorn2:2:5

        1:
            foreign llvm move(0:wybe.int, ?result#1:wybe.bool)
            foreign llvm move(~io#3:wybe.phantom, ?io#5:wybe.phantom)


    1:
        foreign llvm move(1:wybe.int, ?result#1:wybe.bool)
        foreign llvm move(~io#3:wybe.phantom, ?io#5:wybe.phantom)



yorn > public {inline} (0 calls)
0: proc_yorn2.yorn<0>
yorn(prompt#0:wybe.string, ?result#0:wybe.bool, io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    proc_yorn2.gen$1<0>(~io#0:wybe.phantom, ~prompt#0:wybe.string, ?result#0:wybe.bool, ?io#1:wybe.phantom) #0 @proc_yorn2:2:5

  LLVM code       :

; ModuleID = 'proc_yorn2'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external ccc  i8 @read_char()    


@proc_yorn2.3 =    constant [29 x i8] c"Please answer 'yes' or 'no'.\00"


@proc_yorn2.1 =    constant [8 x i8] c" (y/n) \00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"proc_yorn2.gen$1<0>"(i64  %"prompt#0")    {
entry:
  tail call ccc  void  @print_string(i64  %"prompt#0")  
  %2 = ptrtoint i8* getelementptr inbounds ([8 x i8], [8 x i8]* @proc_yorn2.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  %"1$response#0" = tail call ccc  i8  @read_char()  
  %"1$tmp$0#0" = icmp eq i8 %"1$response#0", 89 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  ret i64 1 
if.else:
  %"3$tmp$1#0" = icmp eq i8 %"1$response#0", 78 
  br i1 %"3$tmp$1#0", label %if.then1, label %if.else1 
if.then1:
  ret i64 0 
if.else1:
  %4 = ptrtoint i8* getelementptr inbounds ([29 x i8], [29 x i8]* @proc_yorn2.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  tail call ccc  void  @putchar(i8  10)  
  %"5$result#1" = tail call fastcc  i1  @"proc_yorn2.gen$1<0>"(i64  %"prompt#0")  
  ret i1 %"5$result#1" 
}


define external fastcc  i1 @"proc_yorn2.yorn<0>"(i64  %"prompt#0")    {
entry:
  %"1$result#0" = tail call fastcc  i1  @"proc_yorn2.gen$1<0>"(i64  %"prompt#0")  
  ret i1 %"1$result#0" 
}

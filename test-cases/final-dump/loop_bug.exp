======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module loop_bug
  representation  : (not a type)
  public submods  : int_list -> loop_bug.int_list
  public resources: 
  public procs    : loop_bug.print<0>
                    loop_bug.int_list.=<0>
                    loop_bug.int_list.cons<0>
                    loop_bug.int_list.cons<1>
                    loop_bug.int_list.head<0>
                    loop_bug.int_list.head<1>
                    loop_bug.int_list.nil<0>
                    loop_bug.int_list.tail<0>
                    loop_bug.int_list.tail<1>
                    loop_bug.int_list.~=<0>
  imports         : public use loop_bug.int_list
                    use wybe
  resources       : 
  submodules      : loop_bug.int_list
  procs           : 

proc print > public (0 calls)
0: loop_bug.print<0>
print(lst##0:loop_bug.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @loop_bug:nn:nn
    foreign c putchar('[':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @loop_bug:nn:nn
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool) @loop_bug:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        foreign c putchar(']':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @loop_bug:nn:nn
        foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @loop_bug:nn:nn

    1:
        foreign lpvm access(lst##0:loop_bug.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @loop_bug:nn:nn
        foreign lpvm access(~lst##0:loop_bug.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:loop_bug.int_list) @loop_bug:nn:nn
        foreign c print_int(~h##0:wybe.int, ~tmp#6##0:wybe.phantom, ?tmp#14##0:wybe.phantom) @loop_bug:nn:nn
        foreign lpvm store(~%tmp#14##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @loop_bug:nn:nn
        loop_bug.print#cont#1<0>(_:wybe.int, ~t##0:loop_bug.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @loop_bug:nn:nn



proc print#cont#1 > (2 calls)
0: loop_bug.print#cont#1<0>
print#cont#1([h##0:wybe.int], t##0:loop_bug.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(t##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @loop_bug:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @loop_bug:nn:nn
        foreign c putchar(']':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @loop_bug:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @loop_bug:nn:nn

    1:
        foreign lpvm access(t##0:loop_bug.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##1:wybe.int) @loop_bug:nn:nn
        foreign lpvm access(~t##0:loop_bug.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##1:loop_bug.int_list) @loop_bug:nn:nn
        wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @loop_bug:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @loop_bug:nn:nn
        foreign c print_int(~h##1:wybe.int, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @loop_bug:nn:nn
        foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @loop_bug:nn:nn
        loop_bug.print#cont#1<0>(_:wybe.int, ~t##1:loop_bug.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @loop_bug:nn:nn



proc print#cont#2 > {inline} (1 calls)
0: loop_bug.print#cont#2<0>
print#cont#2(h##0:wybe.int, t##0:loop_bug.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @loop_bug:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#3##0:wybe.phantom) @loop_bug:nn:nn
    foreign c print_int(~h##0:wybe.int, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @loop_bug:nn:nn
    foreign lpvm store(~%tmp#4##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @loop_bug:nn:nn
    loop_bug.print#cont#1<0>(_:wybe.int, ~t##0:loop_bug.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @loop_bug:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'loop_bug'

source_filename = "!ROOT!/final-dump/loop_bug.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c", \00", align 8
@"string#1" = private unnamed_addr constant {i64, i64} { i64 2, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"loop_bug.print<0>"(i64 %"lst##0") {
  call ccc void @putchar(i8 91)
  %"tmp#8##0" = icmp ne i64 %"lst##0", 0
  br i1 %"tmp#8##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#15##0" = inttoptr i64 %"lst##0" to ptr
  %"h##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = add i64 %"lst##0", 8
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  %"t##0" = load i64, ptr %"tmp#17##0"
  call ccc void @print_int(i64 %"h##0")
  tail call fastcc void @"loop_bug.print#cont#1<0>"(i64 %"t##0")
  ret void
if.else.0:
  call ccc void @putchar(i8 93)
  ret void
}

define external fastcc void @"loop_bug.print#cont#1<0>"(i64 %"t##0") {
  %"tmp#4##0" = icmp ne i64 %"t##0", 0
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#12##0" = inttoptr i64 %"t##0" to ptr
  %"h##1" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"t##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"t##1" = load i64, ptr %"tmp#14##0"
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#1" to i64 ))
  call ccc void @print_int(i64 %"h##1")
  tail call fastcc void @"loop_bug.print#cont#1<0>"(i64 %"t##1")
  ret void
if.else.0:
  call ccc void @putchar(i8 93)
  ret void
}

define external fastcc void @"loop_bug.print#cont#2<0>"(i64 %"h##0", i64 %"t##0") {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#1" to i64 ))
  call ccc void @print_int(i64 %"h##0")
  tail call fastcc void @"loop_bug.print#cont#1<0>"(i64 %"t##0")
  ret void
}

--------------------------------------------------
 Module loop_bug.int_list
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : loop_bug.int_list.=<0>
                    loop_bug.int_list.cons<0>
                    loop_bug.int_list.cons<1>
                    loop_bug.int_list.head<0>
                    loop_bug.int_list.head<1>
                    loop_bug.int_list.nil<0>
                    loop_bug.int_list.tail<0>
                    loop_bug.int_list.tail<1>
                    loop_bug.int_list.~=<0>
  imports         : use loop_bug
                    use wybe
  resources       : 
  procs           : 

proc = > public (2 calls)
0: loop_bug.int_list.=<0>
=(#left##0:loop_bug.int_list, #right##0:loop_bug.int_list, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:loop_bug.int_list, 0:loop_bug.int_list, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:loop_bug.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#head##0:wybe.int) @loop_bug:nn:nn
        foreign lpvm access(~#left##0:loop_bug.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#tail##0:loop_bug.int_list) @loop_bug:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
        case ~tmp#9##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:loop_bug.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#head##0:wybe.int) @loop_bug:nn:nn
            foreign lpvm access(~#right##0:loop_bug.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#tail##0:loop_bug.int_list) @loop_bug:nn:nn
            foreign llvm icmp_eq(~#left#head##0:wybe.int, ~#right#head##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                loop_bug.int_list.=<0>(~#left#tail##0:loop_bug.int_list, ~#right#tail##0:loop_bug.int_list, ?#success##0:wybe.bool) #3





proc cons > public {inline} (0 calls)
0: loop_bug.int_list.cons<0>
cons(head##0:wybe.int, tail##0:loop_bug.int_list, ?#result##0:loop_bug.int_list)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:loop_bug.int_list) @loop_bug:nn:nn
    foreign lpvm mutate(~#rec##0:loop_bug.int_list, ?#rec##1:loop_bug.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head##0:wybe.int) @loop_bug:nn:nn
    foreign lpvm mutate(~#rec##1:loop_bug.int_list, ?#result##0:loop_bug.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail##0:loop_bug.int_list) @loop_bug:nn:nn
proc cons > public {inline} (12 calls)
1: loop_bug.int_list.cons<1>
cons(?head##0:wybe.int, ?tail##0:loop_bug.int_list, #result##0:loop_bug.int_list, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head##0:wybe.int)
        foreign llvm move(undef:loop_bug.int_list, ?tail##0:loop_bug.int_list)

    1:
        foreign lpvm access(#result##0:loop_bug.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head##0:wybe.int) @loop_bug:nn:nn
        foreign lpvm access(~#result##0:loop_bug.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail##0:loop_bug.int_list) @loop_bug:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc head > public {inline} (0 calls)
0: loop_bug.int_list.head<0>
head(#rec##0:loop_bug.int_list, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:loop_bug.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @loop_bug:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc head > public {inline} (0 calls)
1: loop_bug.int_list.head<1>
head(#rec##0:loop_bug.int_list, ?#rec##1:loop_bug.int_list, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:loop_bug.int_list, ?#rec##1:loop_bug.int_list)

    1:
        foreign lpvm mutate(~#rec##0:loop_bug.int_list, ?#rec##1:loop_bug.int_list, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @loop_bug:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc nil > public {inline} (0 calls)
0: loop_bug.int_list.nil<0>
nil(?#result##0:loop_bug.int_list)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:loop_bug.int_list, ?#result##0:loop_bug.int_list)


proc tail > public {inline} (0 calls)
0: loop_bug.int_list.tail<0>
tail(#rec##0:loop_bug.int_list, ?#result##0:loop_bug.int_list, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:loop_bug.int_list, ?#result##0:loop_bug.int_list)

    1:
        foreign lpvm access(~#rec##0:loop_bug.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:loop_bug.int_list) @loop_bug:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc tail > public {inline} (0 calls)
1: loop_bug.int_list.tail<1>
tail(#rec##0:loop_bug.int_list, ?#rec##1:loop_bug.int_list, #field##0:loop_bug.int_list, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:loop_bug.int_list, ?#rec##1:loop_bug.int_list)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:loop_bug.int_list, ?#rec##1:loop_bug.int_list, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:loop_bug.int_list) @loop_bug:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: loop_bug.int_list.~=<0>
~=(#left##0:loop_bug.int_list, #right##0:loop_bug.int_list, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    loop_bug.int_list.=<0>(~#left##0:loop_bug.int_list, ~#right##0:loop_bug.int_list, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'loop_bug.int_list'

source_filename = "!ROOT!/final-dump/loop_bug.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"loop_bug.int_list.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp ne i64 %"#left##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#12##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#head##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#left##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#left#tail##0" = load i64, ptr %"tmp#14##0"
  %"tmp#9##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#9##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#15##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#head##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = add i64 %"#right##0", 8
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  %"#right#tail##0" = load i64, ptr %"tmp#17##0"
  %"tmp#4##0" = icmp eq i64 %"#left#head##0", %"#right#head##0"
  br i1 %"tmp#4##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#18##0" = tail call fastcc i1 @"loop_bug.int_list.=<0>"(i64 %"#left#tail##0", i64 %"#right#tail##0")
  ret i1 %"tmp#18##0"
if.else.2:
  ret i1 0
if.else.1:
  ret i1 0
if.else.0:
  %"tmp#19##0" = icmp eq i64 %"#right##0", 0
  ret i1 %"tmp#19##0"
}

define external fastcc i64 @"loop_bug.int_list.cons<0>"(i64 %"head##0", i64 %"tail##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"head##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"tail##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64, i1} @"loop_bug.int_list.cons<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = add i64 %"#result##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#7##0" = insertvalue {i64, i64, i1} %"tmp#6##0", i64 %"tmp#5##0", 1
  %"tmp#8##0" = insertvalue {i64, i64, i1} %"tmp#7##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#10##0" = insertvalue {i64, i64, i1} %"tmp#9##0", i64 undef, 1
  %"tmp#11##0" = insertvalue {i64, i64, i1} %"tmp#10##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"loop_bug.int_list.head<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = insertvalue {i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#4##0" = insertvalue {i64, i1} %"tmp#3##0", i1 1, 1
  ret {i64, i1} %"tmp#4##0"
if.else.0:
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 0, 1
  ret {i64, i1} %"tmp#6##0"
}

define external fastcc {i64, i1} @"loop_bug.int_list.head<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 16, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc i64 @"loop_bug.int_list.nil<0>"() {
  ret i64 0
}

define external fastcc {i64, i1} @"loop_bug.int_list.tail<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = add i64 %"#rec##0", 8
  %"tmp#2##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"loop_bug.int_list.tail<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 16, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = add i64 %"tmp#3##0", 8
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

define external fastcc i1 @"loop_bug.int_list.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"loop_bug.int_list.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

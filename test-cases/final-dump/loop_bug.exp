======================================================================
AFTER EVERYTHING:
 Module loop_bug
  representation  : (not a type)
  public submods  : int_list -> loop_bug.int_list
  public resources: 
  public procs    : loop_bug.print<0>
                    loop_bug.int_list.=<0>
                    loop_bug.int_list.cons<0>
                    loop_bug.int_list.cons<1>
                    loop_bug.int_list.head<0>
                    loop_bug.int_list.head<1>
                    loop_bug.int_list.nil<0>
                    loop_bug.int_list.tail<0>
                    loop_bug.int_list.tail<1>
                    loop_bug.int_list.~=<0>
  imports         : public use loop_bug.int_list
                    use wybe
  resources       : 
  submodules      : loop_bug.int_list
  procs           : 

gen#1 > (2 calls)
0: loop_bug.gen#1<0>
gen#1([h##0:wybe.int], lst##0:loop_bug.int_list, t##0:loop_bug.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(t##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool)
    case ~tmp#2##0:wybe.bool of
    0:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @char:nn:nn
        foreign c putchar(']':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @char:nn:nn
        foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn

    1:
        foreign lpvm access(t##0:loop_bug.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##1:wybe.int) @loop_bug:nn:nn
        foreign lpvm access(~t##0:loop_bug.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##1:loop_bug.int_list) @loop_bug:nn:nn
        wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @loop_bug:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~h##1:wybe.int, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @int:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
        loop_bug.gen#1<0>(_:wybe.int, ~lst##0:loop_bug.int_list, ~t##1:loop_bug.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @loop_bug:nn:nn



gen#2 > {inline} (1 calls)
0: loop_bug.gen#2<0>
gen#2(h##0:wybe.int, lst##0:loop_bug.int_list, t##0:loop_bug.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @loop_bug:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~h##0:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    loop_bug.gen#1<0>(_:wybe.int, ~lst##0:loop_bug.int_list, ~t##0:loop_bug.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @loop_bug:nn:nn


print > public (0 calls)
0: loop_bug.print<0>
print(lst##0:loop_bug.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#3##0:wybe.phantom) @char:nn:nn
    foreign c putchar('[':wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @char:nn:nn
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool)
    case ~tmp#6##0:wybe.bool of
    0:
        foreign c putchar(']':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @char:nn:nn
        foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn

    1:
        foreign lpvm access(lst##0:loop_bug.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @loop_bug:nn:nn
        foreign lpvm access(lst##0:loop_bug.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:loop_bug.int_list) @loop_bug:nn:nn
        foreign c print_int(~h##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @int:nn:nn
        foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
        loop_bug.gen#1<0>(_:wybe.int, ~lst##0:loop_bug.int_list, ~t##0:loop_bug.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @loop_bug:nn:nn


  LLVM code       :

; ModuleID = 'loop_bug'


 


@loop_bug.1 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @loop_bug.0 to i64) }


@loop_bug.0 =    constant [?? x i8] c", \00"


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"loop_bug.gen#1<0>"(i64  %"lst##0", i64  %"t##0")    {
entry:
  %0 = icmp ne i64 %"t##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"t##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"t##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @loop_bug.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %3)  
  musttail call fastcc  void  @"loop_bug.gen#1<0>"(i64  %"lst##0", i64  %7)  
  ret void 
if.else:
  tail call ccc  void  @putchar(i8  93)  
  ret void 
}


define external fastcc  void @"loop_bug.gen#2<0>"(i64  %"h##0", i64  %"lst##0", i64  %"t##0")    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @loop_bug.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %"h##0")  
  tail call fastcc  void  @"loop_bug.gen#1<0>"(i64  %"lst##0", i64  %"t##0")  
  ret void 
}


define external fastcc  void @"loop_bug.print<0>"(i64  %"lst##0")    {
entry:
  tail call ccc  void  @putchar(i8  91)  
  %0 = icmp ne i64 %"lst##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"lst##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"lst##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  tail call ccc  void  @print_int(i64  %3)  
  tail call fastcc  void  @"loop_bug.gen#1<0>"(i64  %"lst##0", i64  %7)  
  ret void 
if.else:
  tail call ccc  void  @putchar(i8  93)  
  ret void 
}
--------------------------------------------------
 Module loop_bug.int_list
  representation  : address
  public submods  : 
  public resources: 
  public procs    : loop_bug.int_list.=<0>
                    loop_bug.int_list.cons<0>
                    loop_bug.int_list.cons<1>
                    loop_bug.int_list.head<0>
                    loop_bug.int_list.head<1>
                    loop_bug.int_list.nil<0>
                    loop_bug.int_list.tail<0>
                    loop_bug.int_list.tail<1>
                    loop_bug.int_list.~=<0>
  imports         : use loop_bug
                    use wybe
  resources       : 
  procs           : 

= > public (2 calls)
0: loop_bug.int_list.=<0>
=(#left##0:loop_bug.int_list, #right##0:loop_bug.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:loop_bug.int_list, ~#right##0:loop_bug.int_list, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:loop_bug.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#head##0:wybe.int) @loop_bug:nn:nn
        foreign lpvm access(~#left##0:loop_bug.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#tail##0:loop_bug.int_list) @loop_bug:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
        case ~tmp#9##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:loop_bug.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#head##0:wybe.int) @loop_bug:nn:nn
            foreign lpvm access(~#right##0:loop_bug.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#tail##0:loop_bug.int_list) @loop_bug:nn:nn
            foreign llvm icmp_eq(~#left#head##0:wybe.int, ~#right#head##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                loop_bug.int_list.=<0>(~#left#tail##0:loop_bug.int_list, ~#right#tail##0:loop_bug.int_list, ?#success##0:wybe.bool) #3





cons > public {inline} (0 calls)
0: loop_bug.int_list.cons<0>
cons(head##0:wybe.int, tail##0:loop_bug.int_list, ?#result##0:loop_bug.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:loop_bug.int_list) @loop_bug:nn:nn
    foreign lpvm mutate(~#rec##0:loop_bug.int_list, ?#rec##1:loop_bug.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head##0:wybe.int) @loop_bug:nn:nn
    foreign lpvm mutate(~#rec##1:loop_bug.int_list, ?#result##0:loop_bug.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail##0:loop_bug.int_list) @loop_bug:nn:nn
cons > public {inline} (12 calls)
1: loop_bug.int_list.cons<1>
cons(?head##0:wybe.int, ?tail##0:loop_bug.int_list, #result##0:loop_bug.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head##0:wybe.int)
        foreign llvm move(undef:loop_bug.int_list, ?tail##0:loop_bug.int_list)

    1:
        foreign lpvm access(#result##0:loop_bug.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head##0:wybe.int) @loop_bug:nn:nn
        foreign lpvm access(~#result##0:loop_bug.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail##0:loop_bug.int_list) @loop_bug:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



head > public {inline} (0 calls)
0: loop_bug.int_list.head<0>
head(#rec##0:loop_bug.int_list, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:loop_bug.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @loop_bug:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

head > public {inline} (0 calls)
1: loop_bug.int_list.head<1>
head(#rec##0:loop_bug.int_list, ?#rec##1:loop_bug.int_list, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:loop_bug.int_list, ?#rec##1:loop_bug.int_list)

    1:
        foreign lpvm mutate(~#rec##0:loop_bug.int_list, ?#rec##1:loop_bug.int_list, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @loop_bug:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



nil > public {inline} (0 calls)
0: loop_bug.int_list.nil<0>
nil(?#result##0:loop_bug.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:loop_bug.int_list, ?#result##0:loop_bug.int_list)


tail > public {inline} (0 calls)
0: loop_bug.int_list.tail<0>
tail(#rec##0:loop_bug.int_list, ?#result##0:loop_bug.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:loop_bug.int_list, ?#result##0:loop_bug.int_list)

    1:
        foreign lpvm access(~#rec##0:loop_bug.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:loop_bug.int_list) @loop_bug:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

tail > public {inline} (0 calls)
1: loop_bug.int_list.tail<1>
tail(#rec##0:loop_bug.int_list, ?#rec##1:loop_bug.int_list, #field##0:loop_bug.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:loop_bug.int_list, ?#rec##1:loop_bug.int_list)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:loop_bug.int_list, ?#rec##1:loop_bug.int_list, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:loop_bug.int_list) @loop_bug:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: loop_bug.int_list.~=<0>
~=(#left##0:loop_bug.int_list, #right##0:loop_bug.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    loop_bug.int_list.=<0>(~#left##0:loop_bug.int_list, ~#right##0:loop_bug.int_list, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'loop_bug.int_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"loop_bug.int_list.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp ne i64 %"#left##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#left##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = icmp ne i64 %"#right##0", 0 
  br i1 %8, label %if.then1, label %if.else1 
if.else:
  %18 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %18 
if.then1:
  %9 = inttoptr i64 %"#right##0" to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"#right##0", 8 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = icmp eq i64 %3, %11 
  br i1 %16, label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %17 = musttail call fastcc  i1  @"loop_bug.int_list.=<0>"(i64  %7, i64  %15)  
  ret i1 %17 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"loop_bug.int_list.cons<0>"(i64  %"head##0", i64  %"tail##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"head##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"tail##0", i64* %7 
  ret i64 %2 
}


define external fastcc  {i64, i64, i1} @"loop_bug.int_list.cons<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#result##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#result##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = insertvalue {i64, i64, i1} undef, i64 %3, 0 
  %9 = insertvalue {i64, i64, i1} %8, i64 %7, 1 
  %10 = insertvalue {i64, i64, i1} %9, i1 1, 2 
  ret {i64, i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %12 = insertvalue {i64, i64, i1} %11, i64 undef, 1 
  %13 = insertvalue {i64, i64, i1} %12, i1 0, 2 
  ret {i64, i64, i1} %13 
}


define external fastcc  {i64, i1} @"loop_bug.int_list.head<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"loop_bug.int_list.head<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %3, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  i64 @"loop_bug.int_list.nil<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"loop_bug.int_list.tail<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"loop_bug.int_list.tail<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  store  i64 %"#field##0", i64* %9 
  %10 = insertvalue {i64, i1} undef, i64 %3, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else:
  %12 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i1 @"loop_bug.int_list.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = tail call fastcc  i1  @"loop_bug.int_list.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}

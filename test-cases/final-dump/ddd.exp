======================================================================
AFTER EVERYTHING:
 Module ddd
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : ddd.<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public {inline} (0 calls)
0: (io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("DDD: Init":wybe.string, ~#io#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'ddd'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


@ddd.1 =    constant [10 x i8] c"DDD: Init\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"ddd.<0>"()    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([10 x i8], [10 x i8]* @ddd.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

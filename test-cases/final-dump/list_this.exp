======================================================================
AFTER EVERYTHING:
 Module list_this(T)
  representation  : address
  public submods  : 
  public resources: 
  public procs    : list_this.append<0>
                    list_this.car<0>
                    list_this.car<1>
                    list_this.cdr<0>
                    list_this.cdr<1>
                    list_this.cons<0>
                    list_this.cons<1>
                    list_this.length<0>
                    list_this.nil<0>
  imports         : use wybe
  resources       : 
  procs           : 

append > public (1 calls)
0: list_this.append<0>
append(x#0:list_this(?T), y#0:list_this(?T), ?$#0:list_this(?T)):
 AliasPairs: [($#0,y#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(1,(list_this.append<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(x#0:list_this(?T), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~y#0:list_this(?T), ?$#0:list_this(?T)) @list_this:nn:nn

    1:
        foreign lpvm access(x#0:list_this(?T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:?T)
        foreign lpvm access(~x#0:list_this(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:list_this(?T))
        list_this.append<0>(~t#0:list_this(?T), ~y#0:list_this(?T), ?tmp$2#0:list_this(?T)) #1 @list_this:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:list_this(?T))
        foreign lpvm mutate(~tmp$8#0:list_this(?T), ?tmp$9#0:list_this(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:?T)
        foreign lpvm mutate(~tmp$9#0:list_this(?T), ?$#0:list_this(?T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:list_this(?T))



car > public {inline} (0 calls)
0: list_this.car<0>
car($rec#0:list_this(?T), ?$#0:?T, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:?T, ?$#0:?T)

    1:
        foreign lpvm access(~$rec#0:list_this(?T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:?T)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

car > public {inline} (0 calls)
1: list_this.car<1>
car($rec#0:list_this(?T), ?$rec#1:list_this(?T), $field#0:?T, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:list_this(?T), ?$rec#1:list_this(?T))

    1:
        foreign lpvm mutate(~%$rec#0:list_this(?T), ?%$rec#1:list_this(?T), 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:?T)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



cdr > public {inline} (0 calls)
0: list_this.cdr<0>
cdr($rec#0:list_this(?T), ?$#0:list_this(?T), ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:list_this(?T), ?$#0:list_this(?T))

    1:
        foreign lpvm access(~$rec#0:list_this(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:list_this(?T))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

cdr > public {inline} (0 calls)
1: list_this.cdr<1>
cdr($rec#0:list_this(?T), ?$rec#1:list_this(?T), $field#0:list_this(?T), ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:list_this(?T), ?$rec#1:list_this(?T))

    1:
        foreign lpvm {noalias} mutate(~%$rec#0:list_this(?T), ?%$rec#1:list_this(?T), 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:list_this(?T))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



cons > public {inline} (1 calls)
0: list_this.cons<0>
cons(car#0:?T, cdr#0:list_this(?T), ?$#0:list_this(?T)):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:list_this(?T))
    foreign lpvm mutate(~%$rec#0:list_this(?T), ?%$rec#1:list_this(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~car#0:?T)
    foreign lpvm mutate(~%$rec#1:list_this(?T), ?%$#0:list_this(?T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~cdr#0:list_this(?T))
cons > public {inline} (6 calls)
1: list_this.cons<1>
cons(?car#0:?T, ?cdr#0:list_this(?T), $#0:list_this(?T), ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:?T, ?car#0:?T)
        foreign llvm move(undef:list_this(?T), ?cdr#0:list_this(?T))

    1:
        foreign lpvm access($#0:list_this(?T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?car#0:?T)
        foreign lpvm access(~$#0:list_this(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?cdr#0:list_this(?T))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



length > public {inline} (0 calls)
0: list_this.length<0>
length(x#0:list_this(?T), ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    list_this.length1<0>(~x#0:list_this(?T), 0:wybe.int, ?$#0:wybe.int) #0 @list_this:nn:nn


length1 > (2 calls)
0: list_this.length1<0>
length1(x#0:list_this(?T), acc#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(x#0:list_this(?T), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~acc#0:wybe.int, ?$#0:wybe.int) @list_this:nn:nn

    1:
        foreign lpvm access(~x#0:list_this(?T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:list_this(?T))
        foreign llvm add(~acc#0:wybe.int, 1:wybe.int, ?tmp$2#0:wybe.int) @int:nn:nn
        list_this.length1<0>(~t#0:list_this(?T), ~tmp$2#0:wybe.int, ?$#0:wybe.int) #2 @list_this:nn:nn



nil > public {inline} (0 calls)
0: list_this.nil<0>
nil(?$#0:list_this(?T)):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:list_this(?T), ?$#0:list_this(?T))

  LLVM code       :

; ModuleID = 'list_this'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i64 @"list_this.append<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"x#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"x#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %"2$tmp$2#0" = tail call fastcc  i64  @"list_this.append<0>"(i64  %7, i64  %"y#0")  
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 %3, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 %"2$tmp$2#0", i64* %15 
  ret i64 %10 
if.else:
  ret i64 %"y#0" 
}


define external fastcc  {i64, i1} @"list_this.car<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %16 = inttoptr i64 %"$rec#0" to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %19 = insertvalue {i64, i1} undef, i64 %18, 0 
  %20 = insertvalue {i64, i1} %19, i1 1, 1 
  ret {i64, i1} %20 
if.else:
  %21 = insertvalue {i64, i1} undef, i64 undef, 0 
  %22 = insertvalue {i64, i1} %21, i1 0, 1 
  ret {i64, i1} %22 
}


define external fastcc  {i64, i1} @"list_this.car<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %23 = trunc i64 16 to i32  
  %24 = tail call ccc  i8*  @wybe_malloc(i32  %23)  
  %25 = ptrtoint i8* %24 to i64 
  %26 = inttoptr i64 %25 to i8* 
  %27 = inttoptr i64 %"$rec#0" to i8* 
  %28 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %26, i8*  %27, i32  %28, i32  8, i1  0)  
  %29 = inttoptr i64 %25 to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  store  i64 %"$field#0", i64* %30 
  %31 = insertvalue {i64, i1} undef, i64 %25, 0 
  %32 = insertvalue {i64, i1} %31, i1 1, 1 
  ret {i64, i1} %32 
if.else:
  %33 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %34 = insertvalue {i64, i1} %33, i1 0, 1 
  ret {i64, i1} %34 
}


define external fastcc  {i64, i1} @"list_this.cdr<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %35 = add   i64 %"$rec#0", 8 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %39 = insertvalue {i64, i1} undef, i64 %38, 0 
  %40 = insertvalue {i64, i1} %39, i1 1, 1 
  ret {i64, i1} %40 
if.else:
  %41 = insertvalue {i64, i1} undef, i64 undef, 0 
  %42 = insertvalue {i64, i1} %41, i1 0, 1 
  ret {i64, i1} %42 
}


define external fastcc  {i64, i1} @"list_this.cdr<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %43 = trunc i64 16 to i32  
  %44 = tail call ccc  i8*  @wybe_malloc(i32  %43)  
  %45 = ptrtoint i8* %44 to i64 
  %46 = inttoptr i64 %45 to i8* 
  %47 = inttoptr i64 %"$rec#0" to i8* 
  %48 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %46, i8*  %47, i32  %48, i32  8, i1  0)  
  %49 = add   i64 %45, 8 
  %50 = inttoptr i64 %49 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  store  i64 %"$field#0", i64* %51 
  %52 = insertvalue {i64, i1} undef, i64 %45, 0 
  %53 = insertvalue {i64, i1} %52, i1 1, 1 
  ret {i64, i1} %53 
if.else:
  %54 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %55 = insertvalue {i64, i1} %54, i1 0, 1 
  ret {i64, i1} %55 
}


define external fastcc  i64 @"list_this.cons<0>"(i64  %"car#0", i64  %"cdr#0")    {
entry:
  %56 = trunc i64 16 to i32  
  %57 = tail call ccc  i8*  @wybe_malloc(i32  %56)  
  %58 = ptrtoint i8* %57 to i64 
  %59 = inttoptr i64 %58 to i64* 
  %60 = getelementptr  i64, i64* %59, i64 0 
  store  i64 %"car#0", i64* %60 
  %61 = add   i64 %58, 8 
  %62 = inttoptr i64 %61 to i64* 
  %63 = getelementptr  i64, i64* %62, i64 0 
  store  i64 %"cdr#0", i64* %63 
  ret i64 %58 
}


define external fastcc  {i64, i64, i1} @"list_this.cons<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %64 = inttoptr i64 %"$#0" to i64* 
  %65 = getelementptr  i64, i64* %64, i64 0 
  %66 = load  i64, i64* %65 
  %67 = add   i64 %"$#0", 8 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  %70 = load  i64, i64* %69 
  %71 = insertvalue {i64, i64, i1} undef, i64 %66, 0 
  %72 = insertvalue {i64, i64, i1} %71, i64 %70, 1 
  %73 = insertvalue {i64, i64, i1} %72, i1 1, 2 
  ret {i64, i64, i1} %73 
if.else:
  %74 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %75 = insertvalue {i64, i64, i1} %74, i64 undef, 1 
  %76 = insertvalue {i64, i64, i1} %75, i1 0, 2 
  ret {i64, i64, i1} %76 
}


define external fastcc  i64 @"list_this.length<0>"(i64  %"x#0")    {
entry:
  %"1$$#0" = tail call fastcc  i64  @"list_this.length1<0>"(i64  %"x#0", i64  0)  
  ret i64 %"1$$#0" 
}


define external fastcc  i64 @"list_this.length1<0>"(i64  %"x#0", i64  %"acc#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %77 = add   i64 %"x#0", 8 
  %78 = inttoptr i64 %77 to i64* 
  %79 = getelementptr  i64, i64* %78, i64 0 
  %80 = load  i64, i64* %79 
  %"2$tmp$2#0" = add   i64 %"acc#0", 1 
  %"2$$#0" = tail call fastcc  i64  @"list_this.length1<0>"(i64  %80, i64  %"2$tmp$2#0")  
  ret i64 %"2$$#0" 
if.else:
  ret i64 %"acc#0" 
}


define external fastcc  i64 @"list_this.nil<0>"()    {
entry:
  ret i64 0 
}

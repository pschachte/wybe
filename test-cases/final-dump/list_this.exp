======================================================================
AFTER EVERYTHING:
 Module list_this(T)
  representation  : address
  public submods  : 
  public resources: 
  public procs    : list_this.append<0>
                    list_this.car<0>
                    list_this.car<1>
                    list_this.cdr<0>
                    list_this.cdr<1>
                    list_this.cons<0>
                    list_this.cons<1>
                    list_this.length<0>
                    list_this.nil<0>
  imports         : use wybe
  resources       : 
  procs           : 

proc append > public (1 calls)
0: list_this.append<0>
append(x##0:list_this(T) <{}; {}; {0}>, y##0:list_this(T) <{}; {}; {1}>, outByReference #result##0:list_this(T) <{}; {}; {0, 1}>)<{}; {}; {}>:
  AliasPairs: [(#result##0,y##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(list_this.append<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~y##0:list_this(T), ?#result##0:list_this(T)) @list_this:nn:nn

    1:
        foreign lpvm access(x##0:list_this(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @list_this:nn:nn
        foreign lpvm access(~x##0:list_this(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:list_this(T)) @list_this:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:list_this(T)) @list_this:nn:nn
        foreign lpvm mutate(~tmp#8##0:list_this(T), ?tmp#9##0:list_this(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @list_this:nn:nn
        list_this.append<0>(~t##0:list_this(T), ~y##0:list_this(T), outByReference tmp#2##0:list_this(T)) #1 @list_this:nn:nn
        foreign lpvm mutate(~tmp#9##0:list_this(T), ?#result##0:list_this(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:list_this(T)) @list_this:nn:nn



proc car > public {inline} (0 calls)
0: list_this.car<0>
car(#rec##0:list_this(T) <{}; {}; {0}>, ?#result##0:T <{}; {}; {0}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?#result##0:T)

    1:
        foreign lpvm access(~#rec##0:list_this(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:T) @list_this:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc car > public {inline} (0 calls)
1: list_this.car<1>
car(#rec##0:list_this(T) <{}; {}; {0}>, ?#rec##1:list_this(T) <{}; {}; {0, 2}>, #field##0:T <{}; {}; {2}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:list_this(T), ?#rec##1:list_this(T))

    1:
        foreign lpvm mutate(~#rec##0:list_this(T), ?#rec##1:list_this(T), 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:T) @list_this:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc cdr > public {inline} (0 calls)
0: list_this.cdr<0>
cdr(#rec##0:list_this(T) <{}; {}; {0}>, ?#result##0:list_this(T) <{}; {}; {0}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:list_this(T), ?#result##0:list_this(T))

    1:
        foreign lpvm access(~#rec##0:list_this(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:list_this(T)) @list_this:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc cdr > public {inline} (0 calls)
1: list_this.cdr<1>
cdr(#rec##0:list_this(T) <{}; {}; {0}>, ?#rec##1:list_this(T) <{}; {}; {0, 2}>, #field##0:list_this(T) <{}; {}; {2}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:list_this(T), ?#rec##1:list_this(T))

    1:
        foreign lpvm {noalias} mutate(~#rec##0:list_this(T), ?#rec##1:list_this(T), 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:list_this(T)) @list_this:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc cons > public {inline} (1 calls)
0: list_this.cons<0>
cons(car##0:T <{}; {}; {0}>, cdr##0:list_this(T) <{}; {}; {1}>, ?#result##0:list_this(T) <{}; {}; {0, 1}>)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:list_this(T)) @list_this:nn:nn
    foreign lpvm mutate(~#rec##0:list_this(T), ?#rec##1:list_this(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~car##0:T) @list_this:nn:nn
    foreign lpvm mutate(~#rec##1:list_this(T), ?#result##0:list_this(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~cdr##0:list_this(T)) @list_this:nn:nn
proc cons > public {inline} (6 calls)
1: list_this.cons<1>
cons(?car##0:T <{}; {}; {2}>, ?cdr##0:list_this(T) <{}; {}; {2}>, #result##0:list_this(T) <{}; {}; {2}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?car##0:T)
        foreign llvm move(undef:list_this(T), ?cdr##0:list_this(T))

    1:
        foreign lpvm access(#result##0:list_this(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?car##0:T) @list_this:nn:nn
        foreign lpvm access(~#result##0:list_this(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?cdr##0:list_this(T)) @list_this:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc length > public {inline} (0 calls)
0: list_this.length<0>
length(x##0:list_this(T) <{}; {}; {0}>, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    list_this.length1<0>(~x##0:list_this(T), 0:wybe.int, ?#result##0:wybe.int) #0 @list_this:nn:nn


proc length1 > (2 calls)
0: list_this.length1<0>
length1(x##0:list_this(T) <{}; {}; {0}>, acc##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool)
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~acc##0:wybe.int, ?#result##0:wybe.int) @list_this:nn:nn

    1:
        foreign lpvm access(~x##0:list_this(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:list_this(T)) @list_this:nn:nn
        foreign llvm add(~acc##0:wybe.int, 1:wybe.int, ?tmp#2##0:wybe.int) @int:nn:nn
        list_this.length1<0>(~t##0:list_this(T), ~tmp#2##0:wybe.int, ?#result##0:wybe.int) #2 @list_this:nn:nn



proc nil > public {inline} (0 calls)
0: list_this.nil<0>
nil(?#result##0:list_this(T))<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:list_this(T), ?#result##0:list_this(T))

  LLVM code       :

; ModuleID = 'list_this'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"list_this.append<0>"(i64  %"x##0", i64  %"y##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"x##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"x##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"x##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = trunc i64 16 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = inttoptr i64 %8 to i64* 
  store  i64 %2, i64* %9 
  %10 = add   i64 %8, 8 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 %8, i64* %"#result##0" 
  musttail call fastcc  void  @"list_this.append<0>"(i64  %5, i64  %"y##0", i64*  %11)  
  ret void 
if.else:
  store  i64 %"y##0", i64* %"#result##0" 
  ret void 
}


define external fastcc  {i64, i1} @"list_this.car<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = insertvalue {i64, i1} undef, i64 %2, 0 
  %4 = insertvalue {i64, i1} %3, i1 1, 1 
  ret {i64, i1} %4 
if.else:
  %5 = insertvalue {i64, i1} undef, i64 undef, 0 
  %6 = insertvalue {i64, i1} %5, i1 0, 1 
  ret {i64, i1} %6 
}


define external fastcc  {i64, i1} @"list_this.car<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  store  i64 %"#field##0", i64* %7 
  %8 = insertvalue {i64, i1} undef, i64 %3, 0 
  %9 = insertvalue {i64, i1} %8, i1 1, 1 
  ret {i64, i1} %9 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 0, 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
}


define external fastcc  {i64, i1} @"list_this.cdr<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"list_this.cdr<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 8 
  %8 = inttoptr i64 %7 to i64* 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %3, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 0, 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  i64 @"list_this.cons<0>"(i64  %"car##0", i64  %"cdr##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"car##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"cdr##0", i64* %5 
  ret i64 %2 
}


define external fastcc  {i64, i64, i1} @"list_this.cons<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#result##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i64, i1} undef, i64 %2, 0 
  %7 = insertvalue {i64, i64, i1} %6, i64 %5, 1 
  %8 = insertvalue {i64, i64, i1} %7, i1 1, 2 
  ret {i64, i64, i1} %8 
if.else:
  %9 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %10 = insertvalue {i64, i64, i1} %9, i64 undef, 1 
  %11 = insertvalue {i64, i64, i1} %10, i1 0, 2 
  ret {i64, i64, i1} %11 
}


define external fastcc  i64 @"list_this.length<0>"(i64  %"x##0") alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"list_this.length1<0>"(i64  %"x##0", i64  0)  
  ret i64 %0 
}


define external fastcc  i64 @"list_this.length1<0>"(i64  %"x##0", i64  %"acc##0")    {
entry:
  %0 = icmp ne i64 %"x##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"x##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"acc##0", 1 
  %5 = musttail call fastcc  i64  @"list_this.length1<0>"(i64  %3, i64  %4)  
  ret i64 %5 
if.else:
  ret i64 %"acc##0" 
}


define external fastcc  i64 @"list_this.nil<0>"() alwaysinline   {
entry:
  ret i64 0 
}

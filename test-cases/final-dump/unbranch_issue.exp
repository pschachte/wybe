======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module unbranch_issue
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use wybe
  resources       : n: fromList [(unbranch_issue.n,wybe.int = 0 @unbranch_issue:nn:nn @unbranch_issue:nn:nn)]
  procs           : 

proc test > {inline} (0 calls)
0: unbranch_issue.test<0>
test(?#success##0:wybe.bool)<{<<unbranch_issue.n>>}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<unbranch_issue.n>>:wybe.int, ?%tmp#2##0:wybe.int) @unbranch_issue:nn:nn
    unbranch_issue.test#cont#1<0>(0:wybe.bool, ~tmp#2##0:wybe.int, ~tmp#2##0:wybe.int, ?#success##0:wybe.bool)<{}; {<<unbranch_issue.n>>}; {}> #2


proc test#cont#1 > (1 calls)
0: unbranch_issue.test#cont#1<0>
test#cont#1(b##0:wybe.bool, tmp#2##0:wybe.int, tmp#3##0:wybe.int, ?#success##0:wybe.bool)<{}; {<<unbranch_issue.n>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~b##0:wybe.bool of
    0:
        foreign lpvm store(~%tmp#2##0:wybe.int, <<unbranch_issue.n>>:wybe.int) @unbranch_issue:nn:nn
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign lpvm store(~%tmp#3##0:wybe.int, <<unbranch_issue.n>>:wybe.int) @unbranch_issue:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'unbranch_issue'

source_filename = "!ROOT!/final-dump/unbranch_issue.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)
@"resource#unbranch_issue.n" = global i64 undef

define external fastcc i1 @"unbranch_issue.test<0>"() {
  %"tmp#2##0" = load i64, ptr @"resource#unbranch_issue.n"
  %"tmp#5##0" = tail call fastcc i1 @"unbranch_issue.test#cont#1<0>"(i1 0, i64 %"tmp#2##0", i64 %"tmp#2##0")
  ret i1 %"tmp#5##0"
}

define external fastcc i1 @"unbranch_issue.test#cont#1<0>"(i1 %"b##0", i64 %"tmp#2##0", i64 %"tmp#3##0") {
  br i1 %"b##0", label %if.then.0, label %if.else.0
if.then.0:
  store i64 %"tmp#3##0", ptr @"resource#unbranch_issue.n"
  ret i1 1
if.else.0:
  store i64 %"tmp#2##0", ptr @"resource#unbranch_issue.n"
  ret i1 0
}

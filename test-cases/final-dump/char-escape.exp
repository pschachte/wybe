======================================================================
AFTER EVERYTHING:
 Module char-escape
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : char-escape.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: char-escape.<0>
(io##0:wybe.phantom, ?io##11:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    char-escape.test<0>('\NUL':wybe.char, 0:wybe.int, "null":wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #0 @char-escape:12:2
    char-escape.test<0>('\a':wybe.char, 7:wybe.int, "bell":wybe.string, ~#io##1:wybe.phantom, ?#io##2:wybe.phantom) #1 @char-escape:13:2
    char-escape.test<0>('\b':wybe.char, 8:wybe.int, "backspace":wybe.string, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #2 @char-escape:14:2
    char-escape.test<0>('\ESC':wybe.char, 27:wybe.int, "escape":wybe.string, ~#io##3:wybe.phantom, ?#io##4:wybe.phantom) #3 @char-escape:15:2
    char-escape.test<0>('\f':wybe.char, 12:wybe.int, "formfeed":wybe.string, ~#io##4:wybe.phantom, ?#io##5:wybe.phantom) #4 @char-escape:16:2
    char-escape.test<0>('\n':wybe.char, 10:wybe.int, "newline":wybe.string, ~#io##5:wybe.phantom, ?#io##6:wybe.phantom) #5 @char-escape:17:2
    char-escape.test<0>('\r':wybe.char, 13:wybe.int, "carriage return":wybe.string, ~#io##6:wybe.phantom, ?#io##7:wybe.phantom) #6 @char-escape:18:2
    char-escape.test<0>('\t':wybe.char, 9:wybe.int, "horizontal tab":wybe.string, ~#io##7:wybe.phantom, ?#io##8:wybe.phantom) #7 @char-escape:19:2
    char-escape.test<0>('\v':wybe.char, 11:wybe.int, "vertical tab":wybe.string, ~#io##8:wybe.phantom, ?#io##9:wybe.phantom) #8 @char-escape:20:2
    char-escape.test<0>(' ':wybe.char, 32:wybe.int, "hex":wybe.string, ~#io##9:wybe.phantom, ?#io##10:wybe.phantom) #9 @char-escape:21:2
    wybe.string.print_string<0>("\astring with hex character escapes!\n":wybe.string, ~#io##10:wybe.phantom, ?#io##11:wybe.phantom) #11 @io:nn:nn


test > (10 calls)
0: char-escape.test<0>
test(ch##0:wybe.char, code##0:wybe.int, name##0:wybe.string, io##0:wybe.phantom, ?io##2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm cast(~ch##0:wybe.char, ?tmp#0##0:wybe.int) @char:nn:nn
    foreign llvm icmp_eq(~code##0:wybe.int, ~tmp#0##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        wybe.string.print_string<0>(~name##0:wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #6 @io:nn:nn
        wybe.string.print_string<0>(" char escapes don't work":wybe.string, ~#io##1:wybe.phantom, ?tmp#9##0:wybe.phantom) #7 @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn

    1:
        wybe.string.print_string<0>(~name##0:wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #8 @io:nn:nn
        wybe.string.print_string<0>(" char escapes work":wybe.string, ~#io##1:wybe.phantom, ?tmp#9##0:wybe.phantom) #9 @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn


  LLVM code       :

; ModuleID = 'char-escape'


 


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


@char-escape.22 =    constant {i64, i64} { i64 36, i64 ptrtoint ([?? x i8]* @char-escape.21 to i64) }


@char-escape.21 =    constant [?? x i8] c"\07string with hex character escapes!\0a\00"


@char-escape.20 =    constant {i64, i64} { i64 3, i64 ptrtoint ([?? x i8]* @char-escape.19 to i64) }


@char-escape.19 =    constant [?? x i8] c"hex\00"


@char-escape.18 =    constant {i64, i64} { i64 12, i64 ptrtoint ([?? x i8]* @char-escape.17 to i64) }


@char-escape.17 =    constant [?? x i8] c"vertical tab\00"


@char-escape.16 =    constant {i64, i64} { i64 14, i64 ptrtoint ([?? x i8]* @char-escape.15 to i64) }


@char-escape.15 =    constant [?? x i8] c"horizontal tab\00"


@char-escape.14 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @char-escape.13 to i64) }


@char-escape.13 =    constant [?? x i8] c"carriage return\00"


@char-escape.12 =    constant {i64, i64} { i64 7, i64 ptrtoint ([?? x i8]* @char-escape.11 to i64) }


@char-escape.11 =    constant [?? x i8] c"newline\00"


@char-escape.10 =    constant {i64, i64} { i64 8, i64 ptrtoint ([?? x i8]* @char-escape.9 to i64) }


@char-escape.9 =    constant [?? x i8] c"formfeed\00"


@char-escape.8 =    constant {i64, i64} { i64 6, i64 ptrtoint ([?? x i8]* @char-escape.7 to i64) }


@char-escape.7 =    constant [?? x i8] c"escape\00"


@char-escape.6 =    constant {i64, i64} { i64 9, i64 ptrtoint ([?? x i8]* @char-escape.5 to i64) }


@char-escape.5 =    constant [?? x i8] c"backspace\00"


@char-escape.4 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @char-escape.3 to i64) }


@char-escape.3 =    constant [?? x i8] c"bell\00"


@char-escape.2 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @char-escape.1 to i64) }


@char-escape.1 =    constant [?? x i8] c"null\00"


declare external ccc  void @putchar(i8)    


@char-escape.27 =    constant {i64, i64} { i64 24, i64 ptrtoint ([?? x i8]* @char-escape.26 to i64) }


@char-escape.26 =    constant [?? x i8] c" char escapes don't work\00"


@char-escape.25 =    constant {i64, i64} { i64 18, i64 ptrtoint ([?? x i8]* @char-escape.24 to i64) }


@char-escape.24 =    constant [?? x i8] c" char escapes work\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"char-escape.<0>"()    {
entry:
  tail call fastcc  void  @"char-escape.test<0>"(i8  0, i64  0, i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @char-escape.2, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"char-escape.test<0>"(i8  7, i64  7, i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @char-escape.4, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"char-escape.test<0>"(i8  8, i64  8, i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @char-escape.6, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"char-escape.test<0>"(i8  27, i64  27, i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @char-escape.8, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"char-escape.test<0>"(i8  12, i64  12, i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @char-escape.10, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"char-escape.test<0>"(i8  10, i64  10, i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @char-escape.12, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"char-escape.test<0>"(i8  13, i64  13, i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @char-escape.14, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"char-escape.test<0>"(i8  9, i64  9, i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @char-escape.16, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"char-escape.test<0>"(i8  11, i64  11, i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @char-escape.18, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"char-escape.test<0>"(i8  32, i64  32, i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @char-escape.20, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @char-escape.22, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  void @"char-escape.test<0>"(i8  %"ch##0", i64  %"code##0", i64  %"name##0")    {
entry:
  %23 = zext i8 %"ch##0" to i64  
  %"1#tmp#1##0" = icmp eq i64 %"code##0", %23 
  br i1 %"1#tmp#1##0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %"name##0")  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @char-escape.25, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %"name##0")  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @char-escape.27, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

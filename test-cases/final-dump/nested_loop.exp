======================================================================
AFTER EVERYTHING:
 Module nested_loop
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : nested_loop.<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("Outer":wybe.string, ~io#0:wybe.phantom, ?tmp$1#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$1#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @io:nn:nn
    foreign c print_string("Inner":wybe.string, ~tmp$2#0:wybe.phantom, ?tmp$3#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$3#0:wybe.phantom, ?tmp$4#0:wybe.phantom) @io:nn:nn
    nested_loop.gen$2<0>(~tmp$4#0:wybe.phantom, ?io#1:wybe.phantom) #1 @nested_loop:nn:nn


gen$1 > {inline} (1 calls)
0: gen$1(io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("Outer":wybe.string, ~#io#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    foreign c print_string("Inner":wybe.string, ~io#1:wybe.phantom, ?tmp$4#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$4#0:wybe.phantom, ?tmp$5#0:wybe.phantom) @io:nn:nn
    nested_loop.gen$2<0>(~tmp$5#0:wybe.phantom, ?io#2:wybe.phantom) #2 @nested_loop:nn:nn


gen$2 > {inline} (2 calls)
0: gen$2(io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("Inner":wybe.string, ~#io#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    nested_loop.gen$2<0>(~io#1:wybe.phantom, ?io#2:wybe.phantom) #1 @nested_loop:nn:nn

  LLVM code       :

; ModuleID = 'nested_loop'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


@nested_loop.3 =    constant [6 x i8] c"Inner\00"


@nested_loop.1 =    constant [6 x i8] c"Outer\00"


@nested_loop.7 =    constant [6 x i8] c"Inner\00"


@nested_loop.5 =    constant [6 x i8] c"Outer\00"


@nested_loop.9 =    constant [6 x i8] c"Inner\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"nested_loop.<0>"()    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_loop.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  %4 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_loop.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"nested_loop.gen$2<0>"()  
  ret void 
}


define external fastcc  void @"nested_loop.gen$1<0>"()    {
entry:
  %6 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_loop.5, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  %8 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_loop.7, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %8)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"nested_loop.gen$2<0>"()  
  ret void 
}


define external fastcc  void @"nested_loop.gen$2<0>"()    {
entry:
  %10 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_loop.9, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %10)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"nested_loop.gen$2<0>"()  
  ret void 
}

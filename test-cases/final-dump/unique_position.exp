======================================================================
AFTER EVERYTHING:
 Module unique_position
  representation  : (not a type)
  public submods  : unique_position -> unique_position.unique_position
  public resources: 
  public procs    : unique_position.<0>
                    unique_position.printPosition<0>
                    unique_position.unique_position.unique_position<0>
                    unique_position.unique_position.unique_position<1>
                    unique_position.unique_position.x<0>
                    unique_position.unique_position.x<1>
                    unique_position.unique_position.y<0>
                    unique_position.unique_position.y<1>
  imports         : public use unique_position.unique_position
                    use wybe
  resources       : 
  submodules      : unique_position.unique_position
  procs           : 

module top-level code > public {impure} (0 calls)
0: unique_position.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#3##0:unique_position.unique_position) @unique_position:nn:nn
    foreign lpvm mutate(~tmp#3##0:unique_position.unique_position, ?tmp#4##0:unique_position.unique_position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int) @unique_position:nn:nn
    foreign lpvm mutate(~tmp#4##0:unique_position.unique_position, ?tmp#5##0:unique_position.unique_position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:wybe.int) @unique_position:nn:nn
    foreign lpvm {noalias} mutate(~tmp#5##0:unique_position.unique_position, ?p2##1:unique_position.unique_position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 5:wybe.int) @unique_position:nn:nn
    unique_position.printPosition<0>(~p2##1:unique_position.unique_position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @unique_position:nn:nn


printPosition > public (1 calls)
0: unique_position.printPosition<0>
printPosition(pos##0:unique_position.unique_position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {unique} access(pos##0:unique_position.unique_position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @unique_position:nn:nn
    foreign lpvm {unique} access(~pos##0:unique_position.unique_position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @unique_position:nn:nn
    wybe.string.print<0>(" (":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @unique_position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~x##0:wybe.int, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#3##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(",":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @unique_position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~y##0:wybe.int, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'unique_position'


 


@unique_position.3 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @unique_position.2 to i64) }


@unique_position.5 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @unique_position.4 to i64) }


@unique_position.1 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @unique_position.0 to i64) }


@unique_position.0 =    constant [?? x i8] c" (\00"


@unique_position.4 =    constant [?? x i8] c")\00"


@unique_position.2 =    constant [?? x i8] c",\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"unique_position.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 3, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 4, i64* %5 
  %6 = inttoptr i64 %2 to i64* 
  store  i64 5, i64* %6 
  tail call fastcc  void  @"unique_position.printPosition<0>"(i64  %2)  
  ret void 
}


define external fastcc  void @"unique_position.printPosition<0>"(i64  %"pos##0")    {
entry:
  %0 = inttoptr i64 %"pos##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"pos##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @unique_position.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %1)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @unique_position.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %4)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @unique_position.5, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module unique_position.unique_position
 modifiers       : {unique} 
  representation  : address
  public submods  : 
  public resources: 
  public procs    : unique_position.unique_position.unique_position<0>
                    unique_position.unique_position.unique_position<1>
                    unique_position.unique_position.x<0>
                    unique_position.unique_position.x<1>
                    unique_position.unique_position.y<0>
                    unique_position.unique_position.y<1>
  imports         : use unique_position
                    use wybe
  resources       : 
  procs           : 

unique_position > public {inline} (0 calls)
0: unique_position.unique_position.unique_position<0>
unique_position(x##0:wybe.int, y##0:wybe.int, ?#result##0:unique_position.unique_position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:unique_position.unique_position) @unique_position:nn:nn
    foreign lpvm mutate(~#rec##0:unique_position.unique_position, ?#rec##1:unique_position.unique_position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int) @unique_position:nn:nn
    foreign lpvm mutate(~#rec##1:unique_position.unique_position, ?#result##0:unique_position.unique_position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int) @unique_position:nn:nn
unique_position > public {inline} (0 calls)
1: unique_position.unique_position.unique_position<1>
unique_position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:unique_position.unique_position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {unique} access(#result##0:unique_position.unique_position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @unique_position:nn:nn
    foreign lpvm {unique} access(~#result##0:unique_position.unique_position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @unique_position:nn:nn


x > public {inline} (0 calls)
0: unique_position.unique_position.x<0>
x(#rec##0:unique_position.unique_position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:unique_position.unique_position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @unique_position:nn:nn
x > public {inline} (0 calls)
1: unique_position.unique_position.x<1>
x(#rec##0:unique_position.unique_position, ?#rec##1:unique_position.unique_position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:unique_position.unique_position, ?#rec##1:unique_position.unique_position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @unique_position:nn:nn


y > public {inline} (0 calls)
0: unique_position.unique_position.y<0>
y(#rec##0:unique_position.unique_position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:unique_position.unique_position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @unique_position:nn:nn
y > public {inline} (0 calls)
1: unique_position.unique_position.y<1>
y(#rec##0:unique_position.unique_position, ?#rec##1:unique_position.unique_position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:unique_position.unique_position, ?#rec##1:unique_position.unique_position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @unique_position:nn:nn

  LLVM code       :

; ModuleID = 'unique_position.unique_position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i64 @"unique_position.unique_position.unique_position<0>"(i64  %"x##0", i64  %"y##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"x##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"y##0", i64* %5 
  ret i64 %2 
}


define external fastcc  {i64, i64} @"unique_position.unique_position.unique_position<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#result##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i64} undef, i64 %1, 0 
  %6 = insertvalue {i64, i64} %5, i64 %4, 1 
  ret {i64, i64} %6 
}


define external fastcc  i64 @"unique_position.unique_position.x<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = load  i64, i64* %0 
  ret i64 %1 
}


define external fastcc  i64 @"unique_position.unique_position.x<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  store  i64 %"#field##0", i64* %6 
  ret i64 %2 
}


define external fastcc  i64 @"unique_position.unique_position.y<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"unique_position.unique_position.y<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module proc_yorn
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : proc_yorn.<0>
                    proc_yorn.yorn<0>
  constants       : 0:: CStringInfo {cstringChars = "Well, yes or no?"}
                    1:: CStringInfo {cstringChars = " (y/n) "}
                    2:: CStringInfo {cstringChars = "Please answer 'yes' or 'no'."}
                    3:: StructInfo {structSize = 16, structData = [IntStructMember 7 8,PointerStructMember c" (y/n) "]}
                    4:: StructInfo {structSize = 16, structData = [IntStructMember 28 8,PointerStructMember c"Please answer 'yes' or 'no'."]}
                    5:: StructInfo {structSize = 16, structData = [IntStructMember 16 8,PointerStructMember c"Well, yes or no?"]}
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: proc_yorn.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    proc_yorn.yorn#cont#1<0>("Well, yes or no?":wybe.string, ?r##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @proc_yorn:nn:nn
    wybe.bool.print<0>(~r##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @proc_yorn:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#7##0:wybe.phantom) @proc_yorn:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @proc_yorn:nn:nn
    foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @proc_yorn:nn:nn


proc is_yes > {inline} (4 calls)
0: proc_yorn.is_yes<0>
is_yes(ch##0:wybe.char, ?#result##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(ch##0:wybe.char, 121:wybe.char, ?tmp#2##0:wybe.bool) @proc_yorn:nn:nn
    foreign llvm icmp_ne(~ch##0:wybe.char, 89:wybe.char, ?tmp#3##0:wybe.bool) @proc_yorn:nn:nn
    foreign llvm and(~tmp#2##0:wybe.bool, ~tmp#3##0:wybe.bool, ?tmp#1##0:wybe.bool) @proc_yorn:nn:nn
    foreign llvm xor(~tmp#1##0:wybe.bool, 1:wybe.bool, ?#result##0:wybe.bool) @proc_yorn:nn:nn


proc is_yes_or_no > (3 calls)
0: proc_yorn.is_yes_or_no<0>
is_yes_or_no(ch##0:wybe.char, ?#result##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(ch##0:wybe.char, 121:wybe.char, ?tmp#6##0:wybe.bool) @proc_yorn:nn:nn
    foreign llvm icmp_ne(ch##0:wybe.char, 89:wybe.char, ?tmp#7##0:wybe.bool) @proc_yorn:nn:nn
    foreign llvm and(~tmp#6##0:wybe.bool, ~tmp#7##0:wybe.bool, ?tmp#8##0:wybe.bool) @proc_yorn:nn:nn
    foreign llvm xor(~tmp#8##0:wybe.bool, 1:wybe.bool, ?tmp#1##0:wybe.bool) @proc_yorn:nn:nn
    foreign llvm icmp_eq(ch##0:wybe.char, 110:wybe.char, ?tmp#3##0:wybe.bool) @proc_yorn:nn:nn
    foreign llvm icmp_eq(~ch##0:wybe.char, 78:wybe.char, ?tmp#4##0:wybe.bool) @proc_yorn:nn:nn
    foreign llvm or(~tmp#3##0:wybe.bool, ~tmp#4##0:wybe.bool, ?tmp#2##0:wybe.bool) @proc_yorn:nn:nn
    foreign llvm or(~tmp#1##0:wybe.bool, ~tmp#2##0:wybe.bool, ?#result##0:wybe.bool) @proc_yorn:nn:nn


proc yorn > public {inline} (1 calls)
0: proc_yorn.yorn<0>
yorn(prompt##0:wybe.string, ?result##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    proc_yorn.yorn#cont#1<0>(~prompt##0:wybe.string, ?result##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @proc_yorn:nn:nn


proc yorn#cont#1 > (2 calls)
0: proc_yorn.yorn#cont#1<0>
yorn#cont#1(prompt##0:wybe.string, ?result##1:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>(prompt##0:wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @proc_yorn:nn:nn
    wybe.string.print<0>(" (y/n) ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @proc_yorn:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @proc_yorn:nn:nn
    foreign c read_char(?response##0:wybe.char, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @proc_yorn:nn:nn
    foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @proc_yorn:nn:nn
    foreign llvm icmp_ne(response##0:wybe.char, 121:wybe.char, ?tmp#11##0:wybe.bool) @proc_yorn:nn:nn
    foreign llvm icmp_ne(response##0:wybe.char, 89:wybe.char, ?tmp#12##0:wybe.bool) @proc_yorn:nn:nn
    foreign llvm and(~tmp#11##0:wybe.bool, ~tmp#12##0:wybe.bool, ?tmp#13##0:wybe.bool) @proc_yorn:nn:nn
    foreign llvm xor(~tmp#13##0:wybe.bool, 1:wybe.bool, ?tmp#1##0:wybe.bool) @proc_yorn:nn:nn
    proc_yorn.is_yes_or_no<0>(~response##0:wybe.char, ?tmp#3##0:wybe.bool) #5 @proc_yorn:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        wybe.string.print<0>("Please answer 'yes' or 'no'.":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @proc_yorn:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @proc_yorn:nn:nn
        foreign c putchar(10:wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @proc_yorn:nn:nn
        foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @proc_yorn:nn:nn
        proc_yorn.yorn#cont#1<0>(~prompt##0:wybe.string, ?result##1:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @proc_yorn:nn:nn

    1:
        foreign llvm move(~tmp#1##0:wybe.bool, ?result##1:wybe.bool)



proc yorn#cont#2 > {inline} (1 calls)
0: proc_yorn.yorn#cont#2<0>
yorn#cont#2(prompt##0:wybe.string, [result##0:wybe.bool], ?result##1:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("Please answer 'yes' or 'no'.":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @proc_yorn:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @proc_yorn:nn:nn
    foreign c putchar(10:wybe.char, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @proc_yorn:nn:nn
    foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @proc_yorn:nn:nn
    proc_yorn.yorn#cont#1<0>(~prompt##0:wybe.string, ?result##1:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @proc_yorn:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'proc_yorn'

source_filename = "!ROOT!/final-dump/proc_yorn.wybe"
target triple    ????

@"proc_yorn#constant#0" = private unnamed_addr constant [ ?? x i8 ] c"Well, yes or no?\00", align 8
@"proc_yorn#constant#1" = private unnamed_addr constant [ ?? x i8 ] c" (y/n) \00", align 8
@"proc_yorn#constant#2" = private unnamed_addr constant [ ?? x i8 ] c"Please answer 'yes' or 'no'.\00", align 8
@"proc_yorn#constant#3" = private unnamed_addr constant {i64, ptr} { i64 7, ptr @"proc_yorn#constant#1" }, align 8
@"proc_yorn#constant#4" = private unnamed_addr constant {i64, ptr} { i64 28, ptr @"proc_yorn#constant#2" }, align 8
@"proc_yorn#constant#5" = private unnamed_addr constant {i64, ptr} { i64 16, ptr @"proc_yorn#constant#0" }, align 8

declare external fastcc void @"wybe.bool.print<0>"(i1)
declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @putchar(i8)
declare external ccc i8 @read_char()
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"proc_yorn.<0>"() {
  %"r##0" = tail call fastcc i1 @"proc_yorn.yorn#cont#1<0>"(i64 ptrtoint( ptr @"proc_yorn#constant#5" to i64 ))
  tail call fastcc void @"wybe.bool.print<0>"(i1 %"r##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i1 @"proc_yorn.is_yes<0>"(i8 %"ch##0") {
  %"tmp#2##0" = icmp ne i8 %"ch##0", 121
  %"tmp#3##0" = icmp ne i8 %"ch##0", 89
  %"tmp#1##0" = and i1 %"tmp#2##0", %"tmp#3##0"
  %"tmp#11##0" = xor i1 %"tmp#1##0", 1
  ret i1 %"tmp#11##0"
}

define external fastcc i1 @"proc_yorn.is_yes_or_no<0>"(i8 %"ch##0") {
  %"tmp#6##0" = icmp ne i8 %"ch##0", 121
  %"tmp#7##0" = icmp ne i8 %"ch##0", 89
  %"tmp#8##0" = and i1 %"tmp#6##0", %"tmp#7##0"
  %"tmp#1##0" = xor i1 %"tmp#8##0", 1
  %"tmp#3##0" = icmp eq i8 %"ch##0", 110
  %"tmp#4##0" = icmp eq i8 %"ch##0", 78
  %"tmp#2##0" = or i1 %"tmp#3##0", %"tmp#4##0"
  %"tmp#17##0" = or i1 %"tmp#1##0", %"tmp#2##0"
  ret i1 %"tmp#17##0"
}

define external fastcc i1 @"proc_yorn.yorn<0>"(i64 %"prompt##0") {
  %"tmp#4##0" = tail call fastcc i1 @"proc_yorn.yorn#cont#1<0>"(i64 %"prompt##0")
  ret i1 %"tmp#4##0"
}

define external fastcc i1 @"proc_yorn.yorn#cont#1<0>"(i64 %"prompt##0") {
  tail call fastcc void @"wybe.string.print<0>"(i64 %"prompt##0")
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"proc_yorn#constant#3" to i64 ))
  %"response##0" = call ccc i8 @read_char()
  %"tmp#11##0" = icmp ne i8 %"response##0", 121
  %"tmp#12##0" = icmp ne i8 %"response##0", 89
  %"tmp#13##0" = and i1 %"tmp#11##0", %"tmp#12##0"
  %"tmp#1##0" = xor i1 %"tmp#13##0", 1
  %"tmp#3##0" = tail call fastcc i1 @"proc_yorn.is_yes_or_no<0>"(i8 %"response##0")
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  ret i1 %"tmp#1##0"
if.else.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"proc_yorn#constant#4" to i64 ))
  call ccc void @putchar(i8 10)
  %"tmp#18##0" = tail call fastcc i1 @"proc_yorn.yorn#cont#1<0>"(i64 %"prompt##0")
  ret i1 %"tmp#18##0"
}

define external fastcc i1 @"proc_yorn.yorn#cont#2<0>"(i64 %"prompt##0") {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"proc_yorn#constant#4" to i64 ))
  call ccc void @putchar(i8 10)
  %"tmp#10##0" = tail call fastcc i1 @"proc_yorn.yorn#cont#1<0>"(i64 %"prompt##0")
  ret i1 %"tmp#10##0"
}

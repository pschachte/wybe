======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module factor_bug
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : factor_bug.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: factor_bug.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom) @factor_bug:nn:nn
    foreign c print_int(20:wybe.int, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @factor_bug:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @factor_bug:nn:nn
    foreign lpvm store(~%tmp#4##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @factor_bug:nn:nn


proc foo > {inline} (1 calls)
0: factor_bug.foo<0>
foo(?ret##1:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(20:wybe.int, ?ret##1:wybe.int)


proc foo#cont#1 > {inline} (2 calls)
0: factor_bug.foo#cont#1<0>
foo#cont#1(ret##0:wybe.int, [?ret##0:wybe.int])<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []


proc test > {inline} (3 calls)
0: factor_bug.test<0>
test(?#result##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:wybe.bool, ?#result##0:wybe.bool) @factor_bug:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'factor_bug'

source_filename = "!ROOT!/final-dump/factor_bug.wybe"
target triple    ????


declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"factor_bug.<0>"() {
  call ccc void @print_int(i64 20)
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i64 @"factor_bug.foo<0>"() {
  ret i64 20
}

define external fastcc void @"factor_bug.foo#cont#1<0>"(i64 %"ret##0") {
  ret void
}

define external fastcc i1 @"factor_bug.test<0>"() {
  ret i1 0
}

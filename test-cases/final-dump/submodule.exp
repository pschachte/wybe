======================================================================
AFTER EVERYTHING:
 Module submodule
  representation  : (not a type)
  public submods  : publictest -> submodule.publictest
  public resources: 
  public procs    : submodule.publictest.visible<0>
  imports         : use submodule.privatetest
                    public use submodule.publictest
                    use wybe
  resources       : 
  submodules      : submodule.privatetest, submodule.publictest
  procs           : 


  LLVM code       :

; ModuleID = 'submodule'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    
--------------------------------------------------
 Module submodule.privatetest
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : submodule.privatetest.semi_hidden<0>
  imports         : use submodule
                    use wybe
  resources       : 
  procs           : 

hidden > {inline} (0 calls)
0: hidden(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("private proc in a private module":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn


semi_hidden > public {inline} (0 calls)
0: semi_hidden(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("public proc in a private module":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'submodule.privatetest'


 


declare external ccc  void @print_string(i64)    


@submodule.privatetest.1 =    constant [33 x i8] c"private proc in a private module\00"


@submodule.privatetest.3 =    constant [32 x i8] c"public proc in a private module\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"submodule.privatetest.hidden<0>"()    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([33 x i8], [33 x i8]* @submodule.privatetest.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  ret void 
}


define external fastcc  void @"submodule.privatetest.semi_hidden<0>"()    {
entry:
  %4 = ptrtoint i8* getelementptr inbounds ([32 x i8], [32 x i8]* @submodule.privatetest.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  ret void 
}
--------------------------------------------------
 Module submodule.publictest
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : submodule.publictest.visible<0>
  imports         : use submodule
                    use wybe
  resources       : 
  procs           : 

semi_visible > {inline} (0 calls)
0: semi_visible(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("private proc in a public module":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn


visible > public {inline} (0 calls)
0: visible(io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("public proc in a public module":wybe.string, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'submodule.publictest'


 


declare external ccc  void @print_string(i64)    


@submodule.publictest.1 =    constant [32 x i8] c"private proc in a public module\00"


@submodule.publictest.3 =    constant [31 x i8] c"public proc in a public module\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"submodule.publictest.semi_visible<0>"()    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([32 x i8], [32 x i8]* @submodule.publictest.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  ret void 
}


define external fastcc  void @"submodule.publictest.visible<0>"()    {
entry:
  %4 = ptrtoint i8* getelementptr inbounds ([31 x i8], [31 x i8]* @submodule.publictest.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  ret void 
}

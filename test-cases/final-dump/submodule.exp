======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module submodule
  representation  : (not a type)
  public submods  : publictest -> submodule.publictest
  public resources: 
  public procs    : submodule.publictest.visible<0>
  constants       : 
  imports         : use submodule.privatetest
                    public use submodule.publictest
                    use wybe
  resources       : 
  submodules      : submodule.privatetest, submodule.publictest
  procs           : 


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'submodule'

source_filename = "!ROOT!/final-dump/submodule.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

--------------------------------------------------
 Module submodule.privatetest
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : submodule.privatetest.semi_hidden<0>
  constants       : 0:: CStringInfo {cstringChars = "private proc in a private module"}
                    1:: CStringInfo {cstringChars = "public proc in a private module"}
                    2:: StructInfo {structSize = 16, structData = [IntStructMember 31 8,PointerStructMember c"public proc in a private module"]}
                    3:: StructInfo {structSize = 16, structData = [IntStructMember 32 8,PointerStructMember c"private proc in a private module"]}
  imports         : use submodule
                    use wybe
  resources       : 
  procs           : 

proc hidden > {inline} (0 calls)
0: submodule.privatetest.hidden<0>
hidden()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("private proc in a private module":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @submodule:nn:nn


proc semi_hidden > public {inline} (0 calls)
0: submodule.privatetest.semi_hidden<0>
semi_hidden()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("public proc in a private module":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @submodule:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'submodule.privatetest'

source_filename = "!ROOT!/final-dump/submodule.wybe"
target triple    ????

@"submodule.privatetest#constant#0" = private unnamed_addr constant [ ?? x i8 ] c"private proc in a private module\00", align 8
@"submodule.privatetest#constant#1" = private unnamed_addr constant [ ?? x i8 ] c"public proc in a private module\00", align 8
@"submodule.privatetest#constant#2" = private unnamed_addr constant {i64, ptr} { i64 31, ptr @"submodule.privatetest#constant#1" }, align 8
@"submodule.privatetest#constant#3" = private unnamed_addr constant {i64, ptr} { i64 32, ptr @"submodule.privatetest#constant#0" }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"submodule.privatetest.hidden<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"submodule.privatetest#constant#3" to i64 ))
  ret void
}

define external fastcc void @"submodule.privatetest.semi_hidden<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"submodule.privatetest#constant#2" to i64 ))
  ret void
}

--------------------------------------------------
 Module submodule.publictest
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : submodule.publictest.visible<0>
  constants       : 0:: CStringInfo {cstringChars = "private proc in a public module"}
                    1:: CStringInfo {cstringChars = "public proc in a public module"}
                    2:: StructInfo {structSize = 16, structData = [IntStructMember 30 8,PointerStructMember c"public proc in a public module"]}
                    3:: StructInfo {structSize = 16, structData = [IntStructMember 31 8,PointerStructMember c"private proc in a public module"]}
  imports         : use submodule
                    use wybe
  resources       : 
  procs           : 

proc semi_visible > {inline} (0 calls)
0: submodule.publictest.semi_visible<0>
semi_visible()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("private proc in a public module":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @submodule:nn:nn


proc visible > public {inline} (0 calls)
0: submodule.publictest.visible<0>
visible()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("public proc in a public module":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #1 @submodule:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'submodule.publictest'

source_filename = "!ROOT!/final-dump/submodule.wybe"
target triple    ????

@"submodule.publictest#constant#0" = private unnamed_addr constant [ ?? x i8 ] c"private proc in a public module\00", align 8
@"submodule.publictest#constant#1" = private unnamed_addr constant [ ?? x i8 ] c"public proc in a public module\00", align 8
@"submodule.publictest#constant#2" = private unnamed_addr constant {i64, ptr} { i64 30, ptr @"submodule.publictest#constant#1" }, align 8
@"submodule.publictest#constant#3" = private unnamed_addr constant {i64, ptr} { i64 31, ptr @"submodule.publictest#constant#0" }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"submodule.publictest.semi_visible<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"submodule.publictest#constant#3" to i64 ))
  ret void
}

define external fastcc void @"submodule.publictest.visible<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"submodule.publictest#constant#2" to i64 ))
  ret void
}

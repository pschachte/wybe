======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module foreign_test
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : foreign_test.<0>
                    foreign_test.lt<0>
                    foreign_test.neq<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: foreign_test.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>("lt(1,2)":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @foreign_test:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#7##0:wybe.phantom) @foreign_test:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @foreign_test:nn:nn
    foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @foreign_test:nn:nn
    foreign_test.#cont#2<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5


proc #cont#1 > {inline,semipure} (2 calls)
0: foreign_test.#cont#1<0>
#cont#1()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign_test.#cont#2<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3


proc #cont#2 > {semipure} (2 calls)
0: foreign_test.#cont#2<0>
#cont#2()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c strcmp(c"string":wybe.c_string, c"string":wybe.c_string, ?tmp#4##0:wybe.int) @foreign_test:nn:nn
    foreign llvm icmp_ne(~tmp#4##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool) @foreign_test:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign_test.#cont#3<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3

    1:
        wybe.string.print<0>("neq(c\"string\", c\"string\")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @foreign_test:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @foreign_test:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @foreign_test:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @foreign_test:nn:nn
        foreign_test.#cont#3<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2



proc #cont#3 > {semipure} (2 calls)
0: foreign_test.#cont#3<0>
#cont#3()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c strcmp(c"string":wybe.c_string, c"strong":wybe.c_string, ?tmp#3##0:wybe.int) @foreign_test:nn:nn
    foreign llvm icmp_ne(~tmp#3##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool) @foreign_test:nn:nn
    case ~tmp#0##0:wybe.bool of
    0:

    1:
        wybe.string.print<0>("neq(c\"string\", c\"strong\")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @foreign_test:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @foreign_test:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @foreign_test:nn:nn
        foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @foreign_test:nn:nn



proc lt > public {inline} (6 calls)
0: foreign_test.lt<0>
lt(x##0:wybe.int, y##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_slt(~x##0:wybe.int, ~y##0:wybe.int, ?#success##0:wybe.bool) @foreign_test:nn:nn


proc neq > public {inline} (6 calls)
0: foreign_test.neq<0>
neq(x##0:wybe.c_string, y##0:wybe.c_string, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c strcmp(~x##0:wybe.c_string, ~y##0:wybe.c_string, ?tmp#0##0:wybe.int) @foreign_test:nn:nn
    foreign llvm icmp_ne(~tmp#0##0:wybe.int, 0:wybe.int, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'foreign_test'

source_filename = "!ROOT!/final-dump/foreign_test.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"lt(1,2)\00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"neq(c\22string\22, c\22string\22)\00", align 8
@"cstring#2" = private unnamed_addr constant [ ?? x i8 ] c"neq(c\22string\22, c\22strong\22)\00", align 8
@"cstring#3" = private unnamed_addr constant [ ?? x i8 ] c"string\00", align 8
@"cstring#4" = private unnamed_addr constant [ ?? x i8 ] c"strong\00", align 8
@"string#5" = private unnamed_addr constant {i64, i64} { i64 7, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#6" = private unnamed_addr constant {i64, i64} { i64 25, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8
@"string#7" = private unnamed_addr constant {i64, i64} { i64 25, i64 ptrtoint( ptr @"cstring#2" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @putchar(i8)
declare external ccc i64 @strcmp(i64, i64)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"foreign_test.<0>"() {
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#5" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"foreign_test.#cont#2<0>"()
  ret void
}

define external fastcc void @"foreign_test.#cont#1<0>"() {
  tail call fastcc void @"foreign_test.#cont#2<0>"()
  ret void
}

define external fastcc void @"foreign_test.#cont#2<0>"() {
  %"tmp#4##0" = call ccc i64 @strcmp(i64 ptrtoint( ptr @"cstring#3" to i64 ), i64 ptrtoint( ptr @"cstring#3" to i64 ))
  %"tmp#1##0" = icmp ne i64 %"tmp#4##0", 0
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#6" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"foreign_test.#cont#3<0>"()
  ret void
if.else.0:
  tail call fastcc void @"foreign_test.#cont#3<0>"()
  ret void
}

define external fastcc void @"foreign_test.#cont#3<0>"() {
  %"tmp#3##0" = call ccc i64 @strcmp(i64 ptrtoint( ptr @"cstring#3" to i64 ), i64 ptrtoint( ptr @"cstring#4" to i64 ))
  %"tmp#0##0" = icmp ne i64 %"tmp#3##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#7" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
if.else.0:
  ret void
}

define external fastcc i1 @"foreign_test.lt<0>"(i64 %"x##0", i64 %"y##0") {
  %"tmp#1##0" = icmp slt i64 %"x##0", %"y##0"
  ret i1 %"tmp#1##0"
}

define external fastcc i1 @"foreign_test.neq<0>"(i64 %"x##0", i64 %"y##0") {
  %"tmp#0##0" = call ccc i64 @strcmp(i64 %"x##0", i64 %"y##0")
  %"tmp#2##0" = icmp ne i64 %"tmp#0##0", 0
  ret i1 %"tmp#2##0"
}

======================================================================
AFTER EVERYTHING:
 Module multi_specz_cyclic_lib
  representation  : (not a type)
  public submods  : position -> multi_specz_cyclic_lib.position
  public resources: 
  public procs    : multi_specz_cyclic_lib.foo1<0>
                    multi_specz_cyclic_lib.modifyAndPrint<0>
                    multi_specz_cyclic_lib.printPosition<0>
                    multi_specz_cyclic_lib.position.=<0>
                    multi_specz_cyclic_lib.position.position<0>
                    multi_specz_cyclic_lib.position.position<1>
                    multi_specz_cyclic_lib.position.x<0>
                    multi_specz_cyclic_lib.position.x<1>
                    multi_specz_cyclic_lib.position.y<0>
                    multi_specz_cyclic_lib.position.y<1>
                    multi_specz_cyclic_lib.position.~=<0>
  imports         : public use multi_specz_cyclic_lib.position
                    use multi_specz_cyclic_lib2
                    use wybe
  resources       : 
  submodules      : multi_specz_cyclic_lib.position
  procs           : 

foo1 > public (0 calls)
0: multi_specz_cyclic_lib.foo1<0>
foo1(x1##0:multi_specz_cyclic_lib.position, x2##0:multi_specz_cyclic_lib.position, x3##0:multi_specz_cyclic_lib.position, x4##0:multi_specz_cyclic_lib.position, n##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 1,InterestingUnaliased 2,InterestingUnaliased 3]
  MultiSpeczDepInfo: [(2,(multi_specz_cyclic_lib.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [0]])),(3,(multi_specz_cyclic_lib.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [1]])),(4,(multi_specz_cyclic_lib.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [2]])),(5,(multi_specz_cyclic_lib.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [3]])),(6,(multi_specz_cyclic_lib2.foo2<0>,fromList [NonAliasedParamCond 0 [1],NonAliasedParamCond 1 [2],NonAliasedParamCond 2 [3],NonAliasedParamCond 3 [0]]))]
    foreign llvm sub(~n##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
    foreign llvm icmp_slt(tmp#0##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        multi_specz_cyclic_lib2.foo2<0>(~x2##0:multi_specz_cyclic_lib.position, ~x3##0:multi_specz_cyclic_lib.position, ~x4##0:multi_specz_cyclic_lib.position, ~x1##0:multi_specz_cyclic_lib.position, ~tmp#0##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6 @multi_specz_cyclic_lib:nn:nn

    1:
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x1##0:multi_specz_cyclic_lib.position, 111:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @multi_specz_cyclic_lib:nn:nn
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x2##0:multi_specz_cyclic_lib.position, 222:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @multi_specz_cyclic_lib:nn:nn
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x3##0:multi_specz_cyclic_lib.position, 333:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @multi_specz_cyclic_lib:nn:nn
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x4##0:multi_specz_cyclic_lib.position, 444:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @multi_specz_cyclic_lib:nn:nn



modifyAndPrint > public (4 calls)
0: multi_specz_cyclic_lib.modifyAndPrint<0>
modifyAndPrint(pos##0:multi_specz_cyclic_lib.position, v##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign lpvm {noalias} mutate(~pos##0:multi_specz_cyclic_lib.position, ?pos##1:multi_specz_cyclic_lib.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~v##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
    multi_specz_cyclic_lib.printPosition<0>(~pos##1:multi_specz_cyclic_lib.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @multi_specz_cyclic_lib:nn:nn


printPosition > public (1 calls)
0: multi_specz_cyclic_lib.printPosition<0>
printPosition(pos##0:multi_specz_cyclic_lib.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>(" (":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @multi_specz_cyclic_lib:nn:nn
    foreign lpvm access(pos##0:multi_specz_cyclic_lib.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(",":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @multi_specz_cyclic_lib:nn:nn
    foreign lpvm access(~pos##0:multi_specz_cyclic_lib.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#1##0:wybe.int, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'multi_specz_cyclic_lib'


 


@multi_specz_cyclic_lib.3 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @multi_specz_cyclic_lib.2 to i64) }


@multi_specz_cyclic_lib.5 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @multi_specz_cyclic_lib.4 to i64) }


@multi_specz_cyclic_lib.1 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @multi_specz_cyclic_lib.0 to i64) }


@multi_specz_cyclic_lib.0 =    constant [?? x i8] c" (\00"


@multi_specz_cyclic_lib.4 =    constant [?? x i8] c")\00"


@multi_specz_cyclic_lib.2 =    constant [?? x i8] c",\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"multi_specz_cyclic_lib2.foo2<0>"(i64, i64, i64, i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"multi_specz_cyclic_lib.foo1<0>"(i64  %"x1##0", i64  %"x2##0", i64  %"x3##0", i64  %"x4##0", i64  %"n##0")    {
entry:
  %0 = sub   i64 %"n##0", 1 
  %1 = icmp slt i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x1##0", i64  111)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x2##0", i64  222)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x3##0", i64  333)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x4##0", i64  444)  
  ret void 
if.else:
  musttail call fastcc  void  @"multi_specz_cyclic_lib2.foo2<0>"(i64  %"x2##0", i64  %"x3##0", i64  %"x4##0", i64  %"x1##0", i64  %0)  
  ret void 
}


define external fastcc  void @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"pos##0", i64  %"v##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"pos##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"v##0", i64* %7 
  tail call fastcc  void  @"multi_specz_cyclic_lib.printPosition<0>"(i64  %2)  
  ret void 
}


define external fastcc  void @"multi_specz_cyclic_lib.printPosition<0>"(i64  %"pos##0")    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multi_specz_cyclic_lib.1, i32 0, i32 0) to i64))  
  %0 = inttoptr i64 %"pos##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  tail call ccc  void  @print_int(i64  %2)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multi_specz_cyclic_lib.3, i32 0, i32 0) to i64))  
  %3 = add   i64 %"pos##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  tail call ccc  void  @print_int(i64  %6)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multi_specz_cyclic_lib.5, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module multi_specz_cyclic_lib.position
  representation  : address
  public submods  : 
  public resources: 
  public procs    : multi_specz_cyclic_lib.position.=<0>
                    multi_specz_cyclic_lib.position.position<0>
                    multi_specz_cyclic_lib.position.position<1>
                    multi_specz_cyclic_lib.position.x<0>
                    multi_specz_cyclic_lib.position.x<1>
                    multi_specz_cyclic_lib.position.y<0>
                    multi_specz_cyclic_lib.position.y<1>
                    multi_specz_cyclic_lib.position.~=<0>
  imports         : use multi_specz_cyclic_lib
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: multi_specz_cyclic_lib.position.=<0>
=(#left##0:multi_specz_cyclic_lib.position, #right##0:multi_specz_cyclic_lib.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:multi_specz_cyclic_lib.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
    foreign lpvm access(~#left##0:multi_specz_cyclic_lib.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
    foreign lpvm access(#right##0:multi_specz_cyclic_lib.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
    foreign lpvm access(~#right##0:multi_specz_cyclic_lib.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



position > public {inline} (0 calls)
0: multi_specz_cyclic_lib.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:multi_specz_cyclic_lib.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:multi_specz_cyclic_lib.position) @multi_specz_cyclic_lib:nn:nn
    foreign lpvm mutate(~#rec##0:multi_specz_cyclic_lib.position, ?#rec##1:multi_specz_cyclic_lib.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
    foreign lpvm mutate(~#rec##1:multi_specz_cyclic_lib.position, ?#result##0:multi_specz_cyclic_lib.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
position > public {inline} (6 calls)
1: multi_specz_cyclic_lib.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:multi_specz_cyclic_lib.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:multi_specz_cyclic_lib.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
    foreign lpvm access(~#result##0:multi_specz_cyclic_lib.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @multi_specz_cyclic_lib:nn:nn


x > public {inline} (0 calls)
0: multi_specz_cyclic_lib.position.x<0>
x(#rec##0:multi_specz_cyclic_lib.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:multi_specz_cyclic_lib.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
x > public {inline} (0 calls)
1: multi_specz_cyclic_lib.position.x<1>
x(#rec##0:multi_specz_cyclic_lib.position, ?#rec##1:multi_specz_cyclic_lib.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:multi_specz_cyclic_lib.position, ?#rec##1:multi_specz_cyclic_lib.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multi_specz_cyclic_lib:nn:nn


y > public {inline} (0 calls)
0: multi_specz_cyclic_lib.position.y<0>
y(#rec##0:multi_specz_cyclic_lib.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:multi_specz_cyclic_lib.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
y > public {inline} (0 calls)
1: multi_specz_cyclic_lib.position.y<1>
y(#rec##0:multi_specz_cyclic_lib.position, ?#rec##1:multi_specz_cyclic_lib.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:multi_specz_cyclic_lib.position, ?#rec##1:multi_specz_cyclic_lib.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multi_specz_cyclic_lib:nn:nn


~= > public {inline} (0 calls)
0: multi_specz_cyclic_lib.position.~=<0>
~=(#left##0:multi_specz_cyclic_lib.position, #right##0:multi_specz_cyclic_lib.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:multi_specz_cyclic_lib.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
    foreign lpvm access(~#left##0:multi_specz_cyclic_lib.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
    foreign lpvm access(#right##0:multi_specz_cyclic_lib.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
    foreign lpvm access(~#right##0:multi_specz_cyclic_lib.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @multi_specz_cyclic_lib:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'multi_specz_cyclic_lib.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multi_specz_cyclic_lib.position.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = icmp eq i64 %2, %9 
  br i1 %14, label %if.then, label %if.else 
if.then:
  %15 = icmp eq i64 %6, %13 
  ret i1 %15 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"multi_specz_cyclic_lib.position.position<0>"(i64  %"x##0", i64  %"y##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"x##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"y##0", i64* %7 
  ret i64 %2 
}


define external fastcc  {i64, i64} @"multi_specz_cyclic_lib.position.position<1>"(i64  %"#result##0")    {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i64} undef, i64 %2, 0 
  %8 = insertvalue {i64, i64} %7, i64 %6, 1 
  ret {i64, i64} %8 
}


define external fastcc  i64 @"multi_specz_cyclic_lib.position.x<0>"(i64  %"#rec##0")    {
entry:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"multi_specz_cyclic_lib.position.x<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i64 @"multi_specz_cyclic_lib.position.y<0>"(i64  %"#rec##0")    {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  ret i64 %3 
}


define external fastcc  i64 @"multi_specz_cyclic_lib.position.y<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"#field##0", i64* %8 
  ret i64 %2 
}


define external fastcc  i1 @"multi_specz_cyclic_lib.position.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = icmp eq i64 %2, %9 
  br i1 %14, label %if.then, label %if.else 
if.then:
  %15 = icmp eq i64 %6, %13 
  %16 = xor i1 %15, 1 
  ret i1 %16 
if.else:
  %17 = xor i1 0, 1 
  ret i1 %17 
}
--------------------------------------------------
 Module multi_specz_cyclic_lib2
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : multi_specz_cyclic_lib2.foo2<0>
  imports         : use multi_specz_cyclic_lib
                    use wybe
  resources       : 
  procs           : 

foo2 > public (0 calls)
0: multi_specz_cyclic_lib2.foo2<0>
foo2(x1##0:multi_specz_cyclic_lib.position, x2##0:multi_specz_cyclic_lib.position, x3##0:multi_specz_cyclic_lib.position, x4##0:multi_specz_cyclic_lib.position, n##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 1,InterestingUnaliased 2,InterestingUnaliased 3]
  MultiSpeczDepInfo: [(2,(multi_specz_cyclic_lib.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [0]])),(3,(multi_specz_cyclic_lib.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [1]])),(4,(multi_specz_cyclic_lib.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [2]])),(5,(multi_specz_cyclic_lib.modifyAndPrint<0>,fromList [NonAliasedParamCond 0 [3]])),(6,(multi_specz_cyclic_lib.foo1<0>,fromList [NonAliasedParamCond 0 [1],NonAliasedParamCond 1 [2],NonAliasedParamCond 2 [3],NonAliasedParamCond 3 [0]]))]
    foreign llvm sub(~n##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
    foreign llvm icmp_slt(tmp#0##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        multi_specz_cyclic_lib.foo1<0>(~x2##0:multi_specz_cyclic_lib.position, ~x3##0:multi_specz_cyclic_lib.position, ~x4##0:multi_specz_cyclic_lib.position, ~x1##0:multi_specz_cyclic_lib.position, ~tmp#0##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6 @multi_specz_cyclic_lib2:nn:nn

    1:
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x1##0:multi_specz_cyclic_lib.position, 111:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @multi_specz_cyclic_lib2:nn:nn
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x2##0:multi_specz_cyclic_lib.position, 222:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @multi_specz_cyclic_lib2:nn:nn
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x3##0:multi_specz_cyclic_lib.position, 333:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @multi_specz_cyclic_lib2:nn:nn
        multi_specz_cyclic_lib.modifyAndPrint<0>(~x4##0:multi_specz_cyclic_lib.position, 444:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @multi_specz_cyclic_lib2:nn:nn


  LLVM code       :

; ModuleID = 'multi_specz_cyclic_lib2'


 


declare external fastcc  void @"multi_specz_cyclic_lib.foo1<0>"(i64, i64, i64, i64, i64)    


declare external fastcc  void @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"multi_specz_cyclic_lib2.foo2<0>"(i64  %"x1##0", i64  %"x2##0", i64  %"x3##0", i64  %"x4##0", i64  %"n##0")    {
entry:
  %0 = sub   i64 %"n##0", 1 
  %1 = icmp slt i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x1##0", i64  111)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x2##0", i64  222)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x3##0", i64  333)  
  tail call fastcc  void  @"multi_specz_cyclic_lib.modifyAndPrint<0>"(i64  %"x4##0", i64  444)  
  ret void 
if.else:
  musttail call fastcc  void  @"multi_specz_cyclic_lib.foo1<0>"(i64  %"x2##0", i64  %"x3##0", i64  %"x4##0", i64  %"x1##0", i64  %0)  
  ret void 
}

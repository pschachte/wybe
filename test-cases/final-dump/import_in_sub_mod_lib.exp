======================================================================
AFTER EVERYTHING:
 Module import_in_sub_mod_lib
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : import_in_sub_mod_lib.foo<0>
  imports         : use wybe
  resources       : 
  procs           : 

foo > public {inline} (0 calls) 
0: import_in_sub_mod_lib.foo<0>
foo(v##0:wybe.int, *#globals##0:wybe.phantom, *?#globals##1:wybe.phantom):
  GlobalFlows: {<<wybe.io.io>>::{FlowIn, FlowOut}} 
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom, ~*#globals##0:wybe.phantom, ?*tmp#3##0:wybe.phantom)
    foreign c print_int(~v##0:wybe.int, ~%tmp#2##0:wybe.phantom, ?%tmp#4##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~%tmp#4##0:wybe.phantom, ?%tmp#5##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(<<wybe.io.io>>:wybe.phantom, ~%tmp#5##0:wybe.phantom, ~*tmp#3##0:wybe.phantom, ?*#globals##1:wybe.phantom)

  LLVM code       :

; ModuleID = 'import_in_sub_mod_lib'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"import_in_sub_mod_lib.foo<0>"(i64  %"v##0")    {
entry:
  tail call ccc  void  @print_int(i64  %"v##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

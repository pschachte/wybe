======================================================================
AFTER EVERYTHING:
 Module nested_if
  public submods  : 
  public types    : 
  public resources: 
  public procs    : nested_if.nested_if<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

nested_if > public (0 calls)
0: nested_if(i#0:wybe.int, io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp eq(i#0:wybe.int, 0:wybe.int, ?tmp$3#0:wybe.bool) @wybe:nn:nn
    case ~tmp$3#0:wybe.bool of
    0:
        foreign llvm icmp eq(i#0:wybe.int, 1001:wybe.int, ?tmp$2#0:wybe.bool) @wybe:nn:nn
        case ~tmp$2#0:wybe.bool of
        0:
            foreign llvm icmp eq(~i#0:wybe.int, 2:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
            case ~tmp$1#0:wybe.bool of
            0:
                foreign c print_string("other":wybe.string, ~#io#0:wybe.phantom, ?tmp$12#0:wybe.phantom) @wybe:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp$12#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn

            1:
                foreign c print_string("two":wybe.string, ~#io#0:wybe.phantom, ?tmp$12#0:wybe.phantom) @wybe:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp$12#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn


        1:
            foreign c print_string("one thousand and one":wybe.string, ~#io#0:wybe.phantom, ?tmp$10#0:wybe.phantom) @wybe:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn


    1:
        foreign c print_string("zero":wybe.string, ~#io#0:wybe.phantom, ?tmp$8#0:wybe.phantom) @wybe:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$8#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn


  LLVM code       :

; ModuleID = 'nested_if'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


@nested_if.7 =    constant [6 x i8] c"other\00"


@nested_if.5 =    constant [4 x i8] c"two\00"


@nested_if.3 =    constant [21 x i8] c"one thousand and one\00"


@nested_if.1 =    constant [5 x i8] c"zero\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"nested_if.nested_if<0>"(i64  %"i#0")    {
entry:
  %"1$tmp$3#0" = icmp eq i64 %"i#0", 0 
  br i1 %"1$tmp$3#0", label %if.then, label %if.else 
if.then:
  %2 = ptrtoint i8* getelementptr inbounds ([5 x i8], [5 x i8]* @nested_if.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  %"3$tmp$2#0" = icmp eq i64 %"i#0", 1001 
  br i1 %"3$tmp$2#0", label %if.then1, label %if.else1 
if.then1:
  %4 = ptrtoint i8* getelementptr inbounds ([21 x i8], [21 x i8]* @nested_if.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else1:
  %"5$tmp$1#0" = icmp eq i64 %"i#0", 2 
  br i1 %"5$tmp$1#0", label %if.then2, label %if.else2 
if.then2:
  %6 = ptrtoint i8* getelementptr inbounds ([4 x i8], [4 x i8]* @nested_if.5, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else2:
  %8 = ptrtoint i8* getelementptr inbounds ([6 x i8], [6 x i8]* @nested_if.7, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %8)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

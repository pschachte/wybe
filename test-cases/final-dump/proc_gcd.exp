======================================================================
AFTER EVERYTHING:
 Module proc_gcd
  public submods  : 
  public types    : 
  public resources: 
  public procs    : proc_gcd.<0>
                    proc_gcd.gcd<0>
                    proc_gcd.mod<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public inline (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#2:wybe.phantom): AliasPairs: []
    proc_gcd.gen$1<0>(18:wybe.int, 24:wybe.int, ~#io#0:wybe.phantom, _:wybe.int, 18:wybe.int, 24:wybe.int, ?r#0:wybe.int, ?#io#1:wybe.phantom) @proc_gcd:13:3
    foreign c print_int(~r#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn


gcd > public inline (1 calls)
0: gcd(a#0:wybe.int, b#0:wybe.int, ?r#0:wybe.int, io#0:wybe.phantom, ?io#1:wybe.phantom): AliasPairs: []
    proc_gcd.gen$1<0>(~a#0:wybe.int, ~b#0:wybe.int, ~io#0:wybe.phantom, _:wybe.int, ~a#0:wybe.int, ~b#0:wybe.int, ?r#0:wybe.int, ?io#1:wybe.phantom) @proc_gcd:13:3


gen$1 > (2 calls)
0: gen$1(a#0:wybe.int, b#0:wybe.int, io#0:wybe.phantom, [t#0:wybe.int], x#0:wybe.int, y#0:wybe.int, ?r#0:wybe.int, ?io#2:wybe.phantom): AliasPairs: []
    foreign llvm icmp ne(y#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool) @wybe:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(~x#0:wybe.int, ?r#0:wybe.int) @proc_gcd:19:3
        foreign llvm move(~io#0:wybe.phantom, ?io#2:wybe.phantom)

    1:
        proc_gcd.mod<0>(~x#0:wybe.int, y#0:wybe.int, ?y#1:wybe.int, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @proc_gcd:16:8
        proc_gcd.gen$1<0>(~a#0:wybe.int, ~b#0:wybe.int, ~io#1:wybe.phantom, ~y#0:wybe.int, ~y#0:wybe.int, ~y#1:wybe.int, ?r#0:wybe.int, ?io#2:wybe.phantom) @proc_gcd:13:3



gen$2 > inline (1 calls)
0: gen$2([a#0:wybe.int], [b#0:wybe.int], io#0:wybe.phantom, [t#0:wybe.int], x#0:wybe.int, [y#0:wybe.int], ?r#0:wybe.int, [?io#0:wybe.phantom]): AliasPairs: []
    foreign llvm move(~x#0:wybe.int, ?r#0:wybe.int) @proc_gcd:19:3


mod > public (1 calls)
0: mod(x#0:wybe.int, y#0:wybe.int, ?r#0:wybe.int, io#0:wybe.phantom, ?io#5:wybe.phantom): AliasPairs: []
    foreign c putchar('x':wybe.char, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign c print_int(x#0:wybe.int, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign c putchar(' ':wybe.char, ~#io#2:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn
    foreign c putchar('y':wybe.char, ~#io#3:wybe.phantom, ?#io#4:wybe.phantom) @wybe:nn:nn
    foreign c print_int(y#0:wybe.int, ~#io#4:wybe.phantom, ?tmp$11#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$11#0:wybe.phantom, ?#io#5:wybe.phantom) @wybe:nn:nn
    foreign llvm urem(~x#0:wybe.int, ~y#0:wybe.int, ?r#0:wybe.int) @proc_gcd:6:8

  LLVM code       :

; ModuleID = 'proc_gcd'


 


declare external ccc  void @print_int(i64)    


declare external ccc  void @putchar(i8)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"proc_gcd.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %"r#0" = tail call fastcc  i64  @"proc_gcd.gen$1<0>"(i64  18, i64  24, i64  18, i64  24)  
  tail call ccc  void  @print_int(i64  %"r#0")  
  ret void 
}


define external fastcc  i64 @"proc_gcd.gcd<0>"(i64  %"a#0", i64  %"b#0")    {
entry:
  %"r#0" = tail call fastcc  i64  @"proc_gcd.gen$1<0>"(i64  %"a#0", i64  %"b#0", i64  %"a#0", i64  %"b#0")  
  ret i64 %"r#0" 
}


define external fastcc  i64 @"proc_gcd.gen$1<0>"(i64  %"a#0", i64  %"b#0", i64  %"x#0", i64  %"y#0")    {
entry:
  %"tmp$1#0" = icmp ne i64 %"y#0", 0 
  br i1 %"tmp$1#0", label %if.then, label %if.else 
if.then:
  %"y#1" = tail call fastcc  i64  @"proc_gcd.mod<0>"(i64  %"x#0", i64  %"y#0")  
  %"r#0" = tail call fastcc  i64  @"proc_gcd.gen$1<0>"(i64  %"a#0", i64  %"b#0", i64  %"y#0", i64  %"y#1")  
  ret i64 %"r#0" 
if.else:
  ret i64 %"x#0" 
}


define external fastcc  i64 @"proc_gcd.gen$2<0>"(i64  %"x#0")    {
entry:
  ret i64 %"x#0" 
}


define external fastcc  i64 @"proc_gcd.mod<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  tail call ccc  void  @putchar(i8  120)  
  tail call ccc  void  @print_int(i64  %"x#0")  
  tail call ccc  void  @putchar(i8  32)  
  tail call ccc  void  @putchar(i8  121)  
  tail call ccc  void  @print_int(i64  %"y#0")  
  tail call ccc  void  @putchar(i8  10)  
  %"r#0" = urem i64 %"x#0", %"y#0" 
  ret i64 %"r#0" 
}

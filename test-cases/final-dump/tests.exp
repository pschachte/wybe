======================================================================
AFTER EVERYTHING:
 Module tests
  representation  : (not a type)
  public submods  : map -> tests.map
  public resources: 
  public procs    : tests.lookup<0>
                    tests.lt<0>
                    tests.lt2<0>
                    tests.lt3<0>
                    tests.map.=<0>
                    tests.map.empty<0>
                    tests.map.key<0>
                    tests.map.key<1>
                    tests.map.left<0>
                    tests.map.left<1>
                    tests.map.node<0>
                    tests.map.node<1>
                    tests.map.right<0>
                    tests.map.right<1>
                    tests.map.value<0>
                    tests.map.value<1>
                    tests.map.~=<0>
  imports         : public use tests.map
                    use wybe
  resources       : 
  submodules      : tests.map
  procs           : 

lookup > public (6 calls)
0: tests.lookup<0>
lookup(key##0:wybe.int, map##0:tests.map, ?result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(map##0:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.bool)
    case ~tmp#15##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?result##0:wybe.int)

    1:
        foreign lpvm access(map##0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @tests:nn:nn
        foreign llvm icmp_eq(key##0:wybe.int, tmp#0##0:wybe.int, ?tmp#13##0:wybe.bool) @int:nn:nn
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm icmp_slt(key##0:wybe.int, ~tmp#0##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
            case ~tmp#11##0:wybe.bool of
            0:
                foreign lpvm access(~map##0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:tests.map) @tests:nn:nn
                tests.lookup<0>(~key##0:wybe.int, ~tmp#4##0:tests.map, ?result##0:wybe.int, ?#success##0:wybe.bool) #8 @tests:nn:nn

            1:
                foreign lpvm access(~map##0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#3##0:tests.map) @tests:nn:nn
                tests.lookup<0>(~key##0:wybe.int, ~tmp#3##0:tests.map, ?result##0:wybe.int, ?#success##0:wybe.bool) #6 @tests:nn:nn


        1:
            foreign lpvm access(~map##0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?result##0:wybe.int) @tests:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




lt > public (1 calls)
0: tests.lt<0>
lt(x##0:wybe.int, y##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_slt(~x##0:wybe.int, ~y##0:wybe.int, ?tmp#3##0:wybe.bool) @int:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



lt2 > public {inline} (1 calls)
0: tests.lt2<0>
lt2(x##0:wybe.int, y##0:wybe.int, ?res##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    tests.lt<0>(~x##0:wybe.int, ~y##0:wybe.int, ?res##0:wybe.bool) #0 @tests:nn:nn


lt3 > public {inline} (0 calls)
0: tests.lt3<0>
lt3(x##0:wybe.int, y##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    tests.lt<0>(~y##0:wybe.int, ~x##0:wybe.int, ?#success##0:wybe.bool) #1 @tests:nn:nn

  LLVM code       :

; ModuleID = 'tests'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  {i64, i1} @"tests.lookup<0>"(i64  %"key##0", i64  %"map##0")    {
entry:
  %0 = icmp ne i64 %"map##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"map##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = icmp eq i64 %"key##0", %4 
  br i1 %5, label %if.then1, label %if.else1 
if.else:
  %30 = insertvalue {i64, i1} undef, i64 undef, 0 
  %31 = insertvalue {i64, i1} %30, i1 0, 1 
  ret {i64, i1} %31 
if.then1:
  %6 = add   i64 %"map##0", 16 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = insertvalue {i64, i1} undef, i64 %9, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else1:
  %12 = icmp slt i64 %"key##0", %4 
  br i1 %12, label %if.then2, label %if.else2 
if.then2:
  %13 = inttoptr i64 %"map##0" to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = tail call fastcc  {i64, i1}  @"tests.lookup<0>"(i64  %"key##0", i64  %15)  
  %17 = extractvalue {i64, i1} %16, 0 
  %18 = extractvalue {i64, i1} %16, 1 
  %19 = insertvalue {i64, i1} undef, i64 %17, 0 
  %20 = insertvalue {i64, i1} %19, i1 %18, 1 
  ret {i64, i1} %20 
if.else2:
  %21 = add   i64 %"map##0", 24 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %25 = tail call fastcc  {i64, i1}  @"tests.lookup<0>"(i64  %"key##0", i64  %24)  
  %26 = extractvalue {i64, i1} %25, 0 
  %27 = extractvalue {i64, i1} %25, 1 
  %28 = insertvalue {i64, i1} undef, i64 %26, 0 
  %29 = insertvalue {i64, i1} %28, i1 %27, 1 
  ret {i64, i1} %29 
}


define external fastcc  i1 @"tests.lt<0>"(i64  %"x##0", i64  %"y##0")    {
entry:
  %0 = icmp slt i64 %"x##0", %"y##0" 
  br i1 %0, label %if.then, label %if.else 
if.then:
  ret i1 1 
if.else:
  ret i1 0 
}


define external fastcc  i1 @"tests.lt2<0>"(i64  %"x##0", i64  %"y##0")    {
entry:
  %0 = musttail call fastcc  i1  @"tests.lt<0>"(i64  %"x##0", i64  %"y##0")  
  ret i1 %0 
}


define external fastcc  i1 @"tests.lt3<0>"(i64  %"x##0", i64  %"y##0")    {
entry:
  %0 = musttail call fastcc  i1  @"tests.lt<0>"(i64  %"y##0", i64  %"x##0")  
  ret i1 %0 
}
--------------------------------------------------
 Module tests.map
  representation  : address
  public submods  : 
  public resources: 
  public procs    : tests.map.=<0>
                    tests.map.empty<0>
                    tests.map.key<0>
                    tests.map.key<1>
                    tests.map.left<0>
                    tests.map.left<1>
                    tests.map.node<0>
                    tests.map.node<1>
                    tests.map.right<0>
                    tests.map.right<1>
                    tests.map.value<0>
                    tests.map.value<1>
                    tests.map.~=<0>
  imports         : use tests
                    use wybe
  resources       : 
  procs           : 

= > public (9 calls)
0: tests.map.=<0>
=(#left##0:tests.map, #right##0:tests.map, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:tests.map, ~#right##0:tests.map, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#left##0:tests.map) @tests:nn:nn
        foreign lpvm access(#left##0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#key##0:wybe.int) @tests:nn:nn
        foreign lpvm access(#left##0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#value##0:wybe.int) @tests:nn:nn
        foreign lpvm access(~#left##0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#right##0:tests.map) @tests:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#11##0:wybe.bool)
        case ~tmp#11##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#left##0:tests.map) @tests:nn:nn
            foreign lpvm access(#right##0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#key##0:wybe.int) @tests:nn:nn
            foreign lpvm access(#right##0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#value##0:wybe.int) @tests:nn:nn
            foreign lpvm access(~#right##0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#right##0:tests.map) @tests:nn:nn
            tests.map.=<0>(~#left#left##0:tests.map, ~#right#left##0:tests.map, ?tmp#4##0:wybe.bool) #2
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#key##0:wybe.int, ~#right#key##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
                case ~tmp#5##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~#left#value##0:wybe.int, ~#right#value##0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
                    case ~tmp#6##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        tests.map.=<0>(~#left#right##0:tests.map, ~#right#right##0:tests.map, ?#success##0:wybe.bool) #5







empty > public {inline} (0 calls)
0: tests.map.empty<0>
empty(?#result##0:tests.map)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:tests.map, ?#result##0:tests.map)


key > public {inline} (0 calls)
0: tests.map.key<0>
key(#rec##0:tests.map, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

key > public {inline} (0 calls)
1: tests.map.key<1>
key(#rec##0:tests.map, ?#rec##1:tests.map, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:tests.map, ?#rec##1:tests.map)

    1:
        foreign lpvm mutate(~#rec##0:tests.map, ?#rec##1:tests.map, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



left > public {inline} (0 calls)
0: tests.map.left<0>
left(#rec##0:tests.map, ?#result##0:tests.map, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:tests.map, ?#result##0:tests.map)

    1:
        foreign lpvm access(~#rec##0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:tests.map) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

left > public {inline} (0 calls)
1: tests.map.left<1>
left(#rec##0:tests.map, ?#rec##1:tests.map, #field##0:tests.map, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:tests.map, ?#rec##1:tests.map)

    1:
        foreign lpvm mutate(~#rec##0:tests.map, ?#rec##1:tests.map, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:tests.map) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



node > public {inline} (0 calls)
0: tests.map.node<0>
node(left##0:tests.map, key##0:wybe.int, value##0:wybe.int, right##0:tests.map, ?#result##0:tests.map)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?#rec##0:tests.map) @tests:nn:nn
    foreign lpvm mutate(~#rec##0:tests.map, ?#rec##1:tests.map, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~left##0:tests.map) @tests:nn:nn
    foreign lpvm mutate(~#rec##1:tests.map, ?#rec##2:tests.map, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~key##0:wybe.int) @tests:nn:nn
    foreign lpvm mutate(~#rec##2:tests.map, ?#rec##3:tests.map, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~value##0:wybe.int) @tests:nn:nn
    foreign lpvm mutate(~#rec##3:tests.map, ?#result##0:tests.map, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~right##0:tests.map) @tests:nn:nn
node > public {inline} (20 calls)
1: tests.map.node<1>
node(?left##0:tests.map, ?key##0:wybe.int, ?value##0:wybe.int, ?right##0:tests.map, #result##0:tests.map, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:tests.map, ?left##0:tests.map)
        foreign llvm move(undef:wybe.int, ?key##0:wybe.int)
        foreign llvm move(undef:wybe.int, ?value##0:wybe.int)
        foreign llvm move(undef:tests.map, ?right##0:tests.map)

    1:
        foreign lpvm access(#result##0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?left##0:tests.map) @tests:nn:nn
        foreign lpvm access(#result##0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?key##0:wybe.int) @tests:nn:nn
        foreign lpvm access(#result##0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?value##0:wybe.int) @tests:nn:nn
        foreign lpvm access(~#result##0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?right##0:tests.map) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



right > public {inline} (0 calls)
0: tests.map.right<0>
right(#rec##0:tests.map, ?#result##0:tests.map, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:tests.map, ?#result##0:tests.map)

    1:
        foreign lpvm access(~#rec##0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:tests.map) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

right > public {inline} (0 calls)
1: tests.map.right<1>
right(#rec##0:tests.map, ?#rec##1:tests.map, #field##0:tests.map, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:tests.map, ?#rec##1:tests.map)

    1:
        foreign lpvm mutate(~#rec##0:tests.map, ?#rec##1:tests.map, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:tests.map) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



value > public {inline} (0 calls)
0: tests.map.value<0>
value(#rec##0:tests.map, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

value > public {inline} (0 calls)
1: tests.map.value<1>
value(#rec##0:tests.map, ?#rec##1:tests.map, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:tests.map, ?#rec##1:tests.map)

    1:
        foreign lpvm mutate(~#rec##0:tests.map, ?#rec##1:tests.map, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: tests.map.~=<0>
~=(#left##0:tests.map, #right##0:tests.map, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    tests.map.=<0>(~#left##0:tests.map, ~#right##0:tests.map, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'tests.map'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"tests.map.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp ne i64 %"#left##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#left##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"#left##0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"#left##0", 24 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = icmp ne i64 %"#right##0", 0 
  br i1 %16, label %if.then1, label %if.else1 
if.else:
  %36 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %36 
if.then1:
  %17 = inttoptr i64 %"#right##0" to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  %19 = load  i64, i64* %18 
  %20 = add   i64 %"#right##0", 8 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  %23 = load  i64, i64* %22 
  %24 = add   i64 %"#right##0", 16 
  %25 = inttoptr i64 %24 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  %27 = load  i64, i64* %26 
  %28 = add   i64 %"#right##0", 24 
  %29 = inttoptr i64 %28 to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  %31 = load  i64, i64* %30 
  %32 = tail call fastcc  i1  @"tests.map.=<0>"(i64  %3, i64  %19)  
  br i1 %32, label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %33 = icmp eq i64 %7, %23 
  br i1 %33, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %34 = icmp eq i64 %11, %27 
  br i1 %34, label %if.then4, label %if.else4 
if.else3:
  ret i1 0 
if.then4:
  %35 = musttail call fastcc  i1  @"tests.map.=<0>"(i64  %15, i64  %31)  
  ret i1 %35 
if.else4:
  ret i1 0 
}


define external fastcc  i64 @"tests.map.empty<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"tests.map.key<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"tests.map.key<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 32 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  store  i64 %"#field##0", i64* %9 
  %10 = insertvalue {i64, i1} undef, i64 %3, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else:
  %12 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"tests.map.left<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"tests.map.left<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 32 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %3, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  i64 @"tests.map.node<0>"(i64  %"left##0", i64  %"key##0", i64  %"value##0", i64  %"right##0")    {
entry:
  %0 = trunc i64 32 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"left##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"key##0", i64* %7 
  %8 = add   i64 %2, 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"value##0", i64* %10 
  %11 = add   i64 %2, 24 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 %"right##0", i64* %13 
  ret i64 %2 
}


define external fastcc  {i64, i64, i64, i64, i1} @"tests.map.node<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#result##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#result##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"#result##0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"#result##0", 24 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = insertvalue {i64, i64, i64, i64, i1} undef, i64 %3, 0 
  %17 = insertvalue {i64, i64, i64, i64, i1} %16, i64 %7, 1 
  %18 = insertvalue {i64, i64, i64, i64, i1} %17, i64 %11, 2 
  %19 = insertvalue {i64, i64, i64, i64, i1} %18, i64 %15, 3 
  %20 = insertvalue {i64, i64, i64, i64, i1} %19, i1 1, 4 
  ret {i64, i64, i64, i64, i1} %20 
if.else:
  %21 = insertvalue {i64, i64, i64, i64, i1} undef, i64 undef, 0 
  %22 = insertvalue {i64, i64, i64, i64, i1} %21, i64 undef, 1 
  %23 = insertvalue {i64, i64, i64, i64, i1} %22, i64 undef, 2 
  %24 = insertvalue {i64, i64, i64, i64, i1} %23, i64 undef, 3 
  %25 = insertvalue {i64, i64, i64, i64, i1} %24, i1 0, 4 
  ret {i64, i64, i64, i64, i1} %25 
}


define external fastcc  {i64, i1} @"tests.map.right<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 24 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"tests.map.right<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 32 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 24 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  store  i64 %"#field##0", i64* %9 
  %10 = insertvalue {i64, i1} undef, i64 %3, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else:
  %12 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  {i64, i1} @"tests.map.value<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 16 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i1} undef, i64 %4, 0 
  %6 = insertvalue {i64, i1} %5, i1 1, 1 
  ret {i64, i1} %6 
if.else:
  %7 = insertvalue {i64, i1} undef, i64 undef, 0 
  %8 = insertvalue {i64, i1} %7, i1 0, 1 
  ret {i64, i1} %8 
}


define external fastcc  {i64, i1} @"tests.map.value<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 32 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 16 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  store  i64 %"#field##0", i64* %9 
  %10 = insertvalue {i64, i1} undef, i64 %3, 0 
  %11 = insertvalue {i64, i1} %10, i1 1, 1 
  ret {i64, i1} %11 
if.else:
  %12 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %13 = insertvalue {i64, i1} %12, i1 0, 1 
  ret {i64, i1} %13 
}


define external fastcc  i1 @"tests.map.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = tail call fastcc  i1  @"tests.map.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}

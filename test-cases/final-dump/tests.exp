======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module tests
  representation  : (not a type)
  public submods  : map -> tests.map
  public resources: 
  public procs    : tests.lookup<0>
                    tests.lt<0>
                    tests.lt2<0>
                    tests.lt3<0>
                    tests.map.=<0>
                    tests.map.empty<0>
                    tests.map.key<0>
                    tests.map.key<1>
                    tests.map.left<0>
                    tests.map.left<1>
                    tests.map.node<0>
                    tests.map.node<1>
                    tests.map.right<0>
                    tests.map.right<1>
                    tests.map.value<0>
                    tests.map.value<1>
                    tests.map.~=<0>
  imports         : public use tests.map
                    use wybe
  resources       : 
  submodules      : tests.map
  procs           : 

proc lookup > public (6 calls)
0: tests.lookup<0>
lookup(key##0:wybe.int, map##0:tests.map, ?result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(map##0:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.bool) @tests:nn:nn
    case ~tmp#15##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?result##0:wybe.int)

    1:
        foreign lpvm access(map##0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @tests:nn:nn
        foreign llvm icmp_eq(key##0:wybe.int, tmp#0##0:wybe.int, ?tmp#13##0:wybe.bool) @tests:nn:nn
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm icmp_slt(key##0:wybe.int, ~tmp#0##0:wybe.int, ?tmp#11##0:wybe.bool) @tests:nn:nn
            case ~tmp#11##0:wybe.bool of
            0:
                foreign lpvm access(~map##0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#4##0:tests.map) @tests:nn:nn
                tests.lookup<0>(~key##0:wybe.int, ~tmp#4##0:tests.map, ?result##0:wybe.int, ?#success##0:wybe.bool) #8 @tests:nn:nn

            1:
                foreign lpvm access(~map##0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp#3##0:tests.map) @tests:nn:nn
                tests.lookup<0>(~key##0:wybe.int, ~tmp#3##0:tests.map, ?result##0:wybe.int, ?#success##0:wybe.bool) #6 @tests:nn:nn


        1:
            foreign lpvm access(~map##0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?result##0:wybe.int) @tests:nn:nn
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc lt > public (1 calls)
0: tests.lt<0>
lt(x##0:wybe.int, y##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_slt(~x##0:wybe.int, ~y##0:wybe.int, ?tmp#3##0:wybe.bool) @tests:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc lt2 > public {inline} (1 calls)
0: tests.lt2<0>
lt2(x##0:wybe.int, y##0:wybe.int, ?res##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    tests.lt<0>(~x##0:wybe.int, ~y##0:wybe.int, ?res##0:wybe.bool) #0 @tests:nn:nn


proc lt3 > public {inline} (0 calls)
0: tests.lt3<0>
lt3(x##0:wybe.int, y##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    tests.lt<0>(~y##0:wybe.int, ~x##0:wybe.int, ?#success##0:wybe.bool) #1 @tests:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'tests'

source_filename = "!ROOT!/final-dump/tests.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc {i64, i1} @"tests.lookup<0>"(i64 %"key##0", i64 %"map##0") {
  %"tmp#15##0" = icmp ne i64 %"map##0", 0
  br i1 %"tmp#15##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#40##0" = add i64 %"map##0", 8
  %"tmp#41##0" = inttoptr i64 %"tmp#40##0" to ptr
  %"tmp#0##0" = load i64, ptr %"tmp#41##0"
  %"tmp#13##0" = icmp eq i64 %"key##0", %"tmp#0##0"
  br i1 %"tmp#13##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#42##0" = add i64 %"map##0", 16
  %"tmp#43##0" = inttoptr i64 %"tmp#42##0" to ptr
  %"tmp#44##0" = load i64, ptr %"tmp#43##0"
  %"tmp#45##0" = insertvalue {i64, i1} undef, i64 %"tmp#44##0", 0
  %"tmp#46##0" = insertvalue {i64, i1} %"tmp#45##0", i1 1, 1
  ret {i64, i1} %"tmp#46##0"
if.else.1:
  %"tmp#11##0" = icmp slt i64 %"key##0", %"tmp#0##0"
  br i1 %"tmp#11##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#47##0" = inttoptr i64 %"map##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#47##0"
  %"tmp#48##0" = tail call fastcc {i64, i1} @"tests.lookup<0>"(i64 %"key##0", i64 %"tmp#3##0")
  %"tmp#49##0" = extractvalue {i64, i1}%"tmp#48##0", 0
  %"tmp#50##0" = extractvalue {i64, i1}%"tmp#48##0", 1
  %"tmp#51##0" = insertvalue {i64, i1} undef, i64 %"tmp#49##0", 0
  %"tmp#52##0" = insertvalue {i64, i1} %"tmp#51##0", i1 %"tmp#50##0", 1
  ret {i64, i1} %"tmp#52##0"
if.else.2:
  %"tmp#53##0" = add i64 %"map##0", 24
  %"tmp#54##0" = inttoptr i64 %"tmp#53##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#54##0"
  %"tmp#55##0" = tail call fastcc {i64, i1} @"tests.lookup<0>"(i64 %"key##0", i64 %"tmp#4##0")
  %"tmp#56##0" = extractvalue {i64, i1}%"tmp#55##0", 0
  %"tmp#57##0" = extractvalue {i64, i1}%"tmp#55##0", 1
  %"tmp#58##0" = insertvalue {i64, i1} undef, i64 %"tmp#56##0", 0
  %"tmp#59##0" = insertvalue {i64, i1} %"tmp#58##0", i1 %"tmp#57##0", 1
  ret {i64, i1} %"tmp#59##0"
if.else.0:
  %"tmp#60##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#61##0" = insertvalue {i64, i1} %"tmp#60##0", i1 0, 1
  ret {i64, i1} %"tmp#61##0"
}

define external fastcc i1 @"tests.lt<0>"(i64 %"x##0", i64 %"y##0") {
  %"tmp#3##0" = icmp slt i64 %"x##0", %"y##0"
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  ret i1 1
if.else.0:
  ret i1 0
}

define external fastcc i1 @"tests.lt2<0>"(i64 %"x##0", i64 %"y##0") {
  %"tmp#1##0" = tail call fastcc i1 @"tests.lt<0>"(i64 %"x##0", i64 %"y##0")
  ret i1 %"tmp#1##0"
}

define external fastcc i1 @"tests.lt3<0>"(i64 %"x##0", i64 %"y##0") {
  %"tmp#3##0" = tail call fastcc i1 @"tests.lt<0>"(i64 %"y##0", i64 %"x##0")
  ret i1 %"tmp#3##0"
}

--------------------------------------------------
 Module tests.map
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : tests.map.=<0>
                    tests.map.empty<0>
                    tests.map.key<0>
                    tests.map.key<1>
                    tests.map.left<0>
                    tests.map.left<1>
                    tests.map.node<0>
                    tests.map.node<1>
                    tests.map.right<0>
                    tests.map.right<1>
                    tests.map.value<0>
                    tests.map.value<1>
                    tests.map.~=<0>
  imports         : use tests
                    use wybe
  resources       : 
  procs           : 

proc = > public (9 calls)
0: tests.map.=<0>
=(#left##0:tests.map, #right##0:tests.map, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:tests.map, 0:tests.map, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#left##0:tests.map) @tests:nn:nn
        foreign lpvm access(#left##0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#key##0:wybe.int) @tests:nn:nn
        foreign lpvm access(#left##0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#value##0:wybe.int) @tests:nn:nn
        foreign lpvm access(~#left##0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#left#right##0:tests.map) @tests:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#11##0:wybe.bool)
        case ~tmp#11##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#left##0:tests.map) @tests:nn:nn
            foreign lpvm access(#right##0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#key##0:wybe.int) @tests:nn:nn
            foreign lpvm access(#right##0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#value##0:wybe.int) @tests:nn:nn
            foreign lpvm access(~#right##0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#right#right##0:tests.map) @tests:nn:nn
            tests.map.=<0>(~#left#left##0:tests.map, ~#right#left##0:tests.map, ?tmp#4##0:wybe.bool) #2
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#key##0:wybe.int, ~#right#key##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
                case ~tmp#5##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~#left#value##0:wybe.int, ~#right#value##0:wybe.int, ?tmp#6##0:wybe.bool) @int:nn:nn
                    case ~tmp#6##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        tests.map.=<0>(~#left#right##0:tests.map, ~#right#right##0:tests.map, ?#success##0:wybe.bool) #5







proc empty > public {inline} (0 calls)
0: tests.map.empty<0>
empty(?#result##0:tests.map)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:tests.map, ?#result##0:tests.map)


proc key > public {inline} (0 calls)
0: tests.map.key<0>
key(#rec##0:tests.map, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc key > public {inline} (0 calls)
1: tests.map.key<1>
key(#rec##0:tests.map, ?#rec##1:tests.map, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:tests.map, ?#rec##1:tests.map)

    1:
        foreign lpvm mutate(~#rec##0:tests.map, ?#rec##1:tests.map, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc left > public {inline} (0 calls)
0: tests.map.left<0>
left(#rec##0:tests.map, ?#result##0:tests.map, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:tests.map, ?#result##0:tests.map)

    1:
        foreign lpvm access(~#rec##0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:tests.map) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc left > public {inline} (0 calls)
1: tests.map.left<1>
left(#rec##0:tests.map, ?#rec##1:tests.map, #field##0:tests.map, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:tests.map, ?#rec##1:tests.map)

    1:
        foreign lpvm mutate(~#rec##0:tests.map, ?#rec##1:tests.map, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:tests.map) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc node > public {inline} (0 calls)
0: tests.map.node<0>
node(left##0:tests.map, key##0:wybe.int, value##0:wybe.int, right##0:tests.map, ?#result##0:tests.map)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?#rec##0:tests.map) @tests:nn:nn
    foreign lpvm mutate(~#rec##0:tests.map, ?#rec##1:tests.map, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~left##0:tests.map) @tests:nn:nn
    foreign lpvm mutate(~#rec##1:tests.map, ?#rec##2:tests.map, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~key##0:wybe.int) @tests:nn:nn
    foreign lpvm mutate(~#rec##2:tests.map, ?#rec##3:tests.map, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~value##0:wybe.int) @tests:nn:nn
    foreign lpvm mutate(~#rec##3:tests.map, ?#result##0:tests.map, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~right##0:tests.map) @tests:nn:nn
proc node > public {inline} (20 calls)
1: tests.map.node<1>
node(?left##0:tests.map, ?key##0:wybe.int, ?value##0:wybe.int, ?right##0:tests.map, #result##0:tests.map, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:tests.map, ?left##0:tests.map)
        foreign llvm move(undef:wybe.int, ?key##0:wybe.int)
        foreign llvm move(undef:wybe.int, ?value##0:wybe.int)
        foreign llvm move(undef:tests.map, ?right##0:tests.map)

    1:
        foreign lpvm access(#result##0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?left##0:tests.map) @tests:nn:nn
        foreign lpvm access(#result##0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?key##0:wybe.int) @tests:nn:nn
        foreign lpvm access(#result##0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?value##0:wybe.int) @tests:nn:nn
        foreign lpvm access(~#result##0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?right##0:tests.map) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc right > public {inline} (0 calls)
0: tests.map.right<0>
right(#rec##0:tests.map, ?#result##0:tests.map, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:tests.map, ?#result##0:tests.map)

    1:
        foreign lpvm access(~#rec##0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:tests.map) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc right > public {inline} (0 calls)
1: tests.map.right<1>
right(#rec##0:tests.map, ?#rec##1:tests.map, #field##0:tests.map, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:tests.map, ?#rec##1:tests.map)

    1:
        foreign lpvm mutate(~#rec##0:tests.map, ?#rec##1:tests.map, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:tests.map) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc value > public {inline} (0 calls)
0: tests.map.value<0>
value(#rec##0:tests.map, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc value > public {inline} (0 calls)
1: tests.map.value<1>
value(#rec##0:tests.map, ?#rec##1:tests.map, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:tests.map, ?#rec##1:tests.map)

    1:
        foreign lpvm mutate(~#rec##0:tests.map, ?#rec##1:tests.map, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @tests:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: tests.map.~=<0>
~=(#left##0:tests.map, #right##0:tests.map, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    tests.map.=<0>(~#left##0:tests.map, ~#right##0:tests.map, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'tests.map'

source_filename = "!ROOT!/final-dump/tests.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"tests.map.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp ne i64 %"#left##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#16##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#left##0" = load i64, ptr %"tmp#16##0"
  %"tmp#17##0" = add i64 %"#left##0", 8
  %"tmp#18##0" = inttoptr i64 %"tmp#17##0" to ptr
  %"#left#key##0" = load i64, ptr %"tmp#18##0"
  %"tmp#19##0" = add i64 %"#left##0", 16
  %"tmp#20##0" = inttoptr i64 %"tmp#19##0" to ptr
  %"#left#value##0" = load i64, ptr %"tmp#20##0"
  %"tmp#21##0" = add i64 %"#left##0", 24
  %"tmp#22##0" = inttoptr i64 %"tmp#21##0" to ptr
  %"#left#right##0" = load i64, ptr %"tmp#22##0"
  %"tmp#11##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#11##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#23##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#left##0" = load i64, ptr %"tmp#23##0"
  %"tmp#24##0" = add i64 %"#right##0", 8
  %"tmp#25##0" = inttoptr i64 %"tmp#24##0" to ptr
  %"#right#key##0" = load i64, ptr %"tmp#25##0"
  %"tmp#26##0" = add i64 %"#right##0", 16
  %"tmp#27##0" = inttoptr i64 %"tmp#26##0" to ptr
  %"#right#value##0" = load i64, ptr %"tmp#27##0"
  %"tmp#28##0" = add i64 %"#right##0", 24
  %"tmp#29##0" = inttoptr i64 %"tmp#28##0" to ptr
  %"#right#right##0" = load i64, ptr %"tmp#29##0"
  %"tmp#4##0" = tail call fastcc i1 @"tests.map.=<0>"(i64 %"#left#left##0", i64 %"#right#left##0")
  br i1 %"tmp#4##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#5##0" = icmp eq i64 %"#left#key##0", %"#right#key##0"
  br i1 %"tmp#5##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#6##0" = icmp eq i64 %"#left#value##0", %"#right#value##0"
  br i1 %"tmp#6##0", label %if.then.4, label %if.else.4
if.then.4:
  %"tmp#30##0" = tail call fastcc i1 @"tests.map.=<0>"(i64 %"#left#right##0", i64 %"#right#right##0")
  ret i1 %"tmp#30##0"
if.else.4:
  ret i1 0
if.else.3:
  ret i1 0
if.else.2:
  ret i1 0
if.else.1:
  ret i1 0
if.else.0:
  %"tmp#31##0" = icmp eq i64 %"#right##0", 0
  ret i1 %"tmp#31##0"
}

define external fastcc i64 @"tests.map.empty<0>"() {
  ret i64 0
}

define external fastcc {i64, i1} @"tests.map.key<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = add i64 %"#rec##0", 8
  %"tmp#2##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"tests.map.key<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 32, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = add i64 %"tmp#3##0", 8
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

define external fastcc {i64, i1} @"tests.map.left<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = insertvalue {i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#4##0" = insertvalue {i64, i1} %"tmp#3##0", i1 1, 1
  ret {i64, i1} %"tmp#4##0"
if.else.0:
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 0, 1
  ret {i64, i1} %"tmp#6##0"
}

define external fastcc {i64, i1} @"tests.map.left<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 32, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc i64 @"tests.map.node<0>"(i64 %"left##0", i64 %"key##0", i64 %"value##0", i64 %"right##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 32)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"left##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"key##0", ptr %"tmp#3##0"
  %"tmp#4##0" = add i64 %"#rec##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"value##0", ptr %"tmp#5##0"
  %"tmp#6##0" = add i64 %"#rec##0", 24
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  store i64 %"right##0", ptr %"tmp#7##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64, i64, i64, i1} @"tests.map.node<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = add i64 %"#result##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = add i64 %"#result##0", 16
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  %"tmp#9##0" = add i64 %"#result##0", 24
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"tmp#11##0" = load i64, ptr %"tmp#10##0"
  %"tmp#12##0" = insertvalue {i64, i64, i64, i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#13##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#12##0", i64 %"tmp#5##0", 1
  %"tmp#14##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#13##0", i64 %"tmp#8##0", 2
  %"tmp#15##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#14##0", i64 %"tmp#11##0", 3
  %"tmp#16##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#15##0", i1 1, 4
  ret {i64, i64, i64, i64, i1} %"tmp#16##0"
if.else.0:
  %"tmp#17##0" = insertvalue {i64, i64, i64, i64, i1} undef, i64 undef, 0
  %"tmp#18##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#17##0", i64 undef, 1
  %"tmp#19##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#18##0", i64 undef, 2
  %"tmp#20##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#19##0", i64 undef, 3
  %"tmp#21##0" = insertvalue {i64, i64, i64, i64, i1} %"tmp#20##0", i1 0, 4
  ret {i64, i64, i64, i64, i1} %"tmp#21##0"
}

define external fastcc {i64, i1} @"tests.map.right<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = add i64 %"#rec##0", 24
  %"tmp#2##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"tests.map.right<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 32, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = add i64 %"tmp#3##0", 24
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

define external fastcc {i64, i1} @"tests.map.value<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = add i64 %"#rec##0", 16
  %"tmp#2##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"tests.map.value<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 32)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 32, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = add i64 %"tmp#3##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

define external fastcc i1 @"tests.map.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"tests.map.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

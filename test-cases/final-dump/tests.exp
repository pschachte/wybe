======================================================================
AFTER EVERYTHING:
 Module tests
  public submods  : 
  public types    : map: (tests.map,Just address)
  public resources: 
  public procs    : tests.lookup<0>
                    tests.lt<0>
                    tests.lt2<0>
                    tests.lt3<0>
                    tests.map./=<0>
                    tests.map.=<0>
                    tests.map.empty<0>
                    tests.map.key<0>
                    tests.map.key<1>
                    tests.map.left<0>
                    tests.map.left<1>
                    tests.map.node<0>
                    tests.map.node<1>
                    tests.map.right<0>
                    tests.map.right<1>
                    tests.map.value<0>
                    tests.map.value<1>
  imports         : public use tests.map
                    use wybe
  types           : map/public  is address { empty() @tests:19:20 | node(left:map, key:int, value:int, right:map) @tests:19:28  }  @tests:19:5
  resources       : 
  submodules      : tests.map
  procs           : 

lookup > public (6 calls)
0: lookup(key#0:wybe.int, map#0:tests.map, ?result#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(map#0:tests.map, 0:wybe.int, ?tmp$15#0:wybe.bool)
    case ~tmp$15#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(map#0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$0#0:wybe.int)
        foreign llvm icmp_eq(key#0:wybe.int, tmp$0#0:wybe.int, ?tmp$13#0:wybe.bool) @wybe:nn:nn
        case ~tmp$13#0:wybe.bool of
        0:
            foreign llvm icmp_slt(key#0:wybe.int, ~tmp$0#0:wybe.int, ?tmp$11#0:wybe.bool) @wybe:nn:nn
            case ~tmp$11#0:wybe.bool of
            0:
                foreign lpvm access(~map#0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$4#0:tests.map)
                tests.lookup<0>(~key#0:wybe.int, ~tmp$4#0:tests.map, ?result#0:wybe.int, ?$$#0:wybe.bool) #9 @tests:24:25

            1:
                foreign lpvm access(~map#0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?tmp$3#0:tests.map)
                tests.lookup<0>(~key#0:wybe.int, ~tmp$3#0:tests.map, ?result#0:wybe.int, ?$$#0:wybe.bool) #6 @tests:23:25


        1:
            foreign lpvm access(~map#0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?result#0:wybe.int)
            foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)




lt > public (1 calls)
0: lt(x#0:wybe.int, y#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_slt(~x#0:wybe.int, ~y#0:wybe.int, ?tmp$3#0:wybe.bool) @wybe:nn:nn
    case ~tmp$3#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



lt2 > public {inline} (1 calls)
0: lt2(x#0:wybe.int, y#0:wybe.int, ?res#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    tests.lt<0>(~x#0:wybe.int, ~y#0:wybe.int, ?res#0:wybe.bool) #0 @tests:11:12


lt3 > public {inline} (0 calls)
0: lt3(x#0:wybe.int, y#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    tests.lt<0>(~y#0:wybe.int, ~x#0:wybe.int, ?$$#0:wybe.bool) #1 @tests:11:12

  LLVM code       :

; ModuleID = 'tests'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  {i64, i1} @"tests.lookup<0>"(i64  %"key#0", i64  %"map#0")    {
entry:
  %"1$tmp$15#0" = icmp ne i64 %"map#0", 0 
  br i1 %"1$tmp$15#0", label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"map#0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %"2$tmp$13#0" = icmp eq i64 %"key#0", %4 
  br i1 %"2$tmp$13#0", label %if.then1, label %if.else1 
if.else:
  %28 = insertvalue {i64, i1} undef, i64 undef, 0 
  %29 = insertvalue {i64, i1} %28, i1 0, 1 
  ret {i64, i1} %29 
if.then1:
  %5 = add   i64 %"map#0", 16 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  %8 = load  i64, i64* %7 
  %9 = insertvalue {i64, i1} undef, i64 %8, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else1:
  %"5$tmp$11#0" = icmp slt i64 %"key#0", %4 
  br i1 %"5$tmp$11#0", label %if.then2, label %if.else2 
if.then2:
  %11 = inttoptr i64 %"map#0" to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = tail call fastcc  {i64, i1}  @"tests.lookup<0>"(i64  %"key#0", i64  %13)  
  %15 = extractvalue {i64, i1} %14, 0 
  %16 = extractvalue {i64, i1} %14, 1 
  %17 = insertvalue {i64, i1} undef, i64 %15, 0 
  %18 = insertvalue {i64, i1} %17, i1 %16, 1 
  ret {i64, i1} %18 
if.else2:
  %19 = add   i64 %"map#0", 24 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %23 = tail call fastcc  {i64, i1}  @"tests.lookup<0>"(i64  %"key#0", i64  %22)  
  %24 = extractvalue {i64, i1} %23, 0 
  %25 = extractvalue {i64, i1} %23, 1 
  %26 = insertvalue {i64, i1} undef, i64 %24, 0 
  %27 = insertvalue {i64, i1} %26, i1 %25, 1 
  ret {i64, i1} %27 
}


define external fastcc  i1 @"tests.lt<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$tmp$3#0" = icmp slt i64 %"x#0", %"y#0" 
  br i1 %"1$tmp$3#0", label %if.then, label %if.else 
if.then:
  ret i1 1 
if.else:
  ret i1 0 
}


define external fastcc  i1 @"tests.lt2<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$res#0" = tail call fastcc  i1  @"tests.lt<0>"(i64  %"x#0", i64  %"y#0")  
  ret i1 %"1$res#0" 
}


define external fastcc  i1 @"tests.lt3<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$$$#0" = tail call fastcc  i1  @"tests.lt<0>"(i64  %"y#0", i64  %"x#0")  
  ret i1 %"1$$$#0" 
}
--------------------------------------------------
 Module tests.map
  public submods  : 
  public types    : 
  public resources: 
  public procs    : tests.map./=<0>
                    tests.map.=<0>
                    tests.map.empty<0>
                    tests.map.key<0>
                    tests.map.key<1>
                    tests.map.left<0>
                    tests.map.left<1>
                    tests.map.node<0>
                    tests.map.node<1>
                    tests.map.right<0>
                    tests.map.right<1>
                    tests.map.value<0>
                    tests.map.value<1>
  imports         : use tests
                    use wybe
  types           : 
  resources       : 
  procs           : 

/= > public {inline} (0 calls)
0: /=($left#0:tests.map, $right#0:tests.map, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    tests.map.=<0>(~$left#0:tests.map, ~$right#0:tests.map, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (9 calls)
0: =($left#0:tests.map, $right#0:tests.map, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($left#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp_eq(~$left#0:tests.map, ~$right#0:tests.map, ?$$#0:!wybe.bool)

    1:
        foreign lpvm access($left#0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$left#0:tests.map)
        foreign lpvm access($left#0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$key#0:wybe.int)
        foreign lpvm access($left#0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$value#0:wybe.int)
        foreign lpvm access(~$left#0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$left$right#0:tests.map)
        foreign llvm icmp_ne($right#0:tests.map, 0:wybe.int, ?tmp$11#0:wybe.bool)
        case ~tmp$11#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access($right#0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$left#0:tests.map)
            foreign lpvm access($right#0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$key#0:wybe.int)
            foreign lpvm access($right#0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$value#0:wybe.int)
            foreign lpvm access(~$right#0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$right$right#0:tests.map)
            tests.map.=<0>(~$left$left#0:tests.map, ~$right$left#0:tests.map, ?tmp$4#0:wybe.bool) #2
            case ~tmp$4#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                foreign llvm icmp_eq(~$left$key#0:wybe.int, ~$right$key#0:wybe.int, ?tmp$5#0:wybe.bool) @wybe:nn:nn
                case ~tmp$5#0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~$left$value#0:wybe.int, ~$right$value#0:wybe.int, ?tmp$6#0:wybe.bool) @wybe:nn:nn
                    case ~tmp$6#0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

                    1:
                        tests.map.=<0>(~$left$right#0:tests.map, ~$right$right#0:tests.map, ?$$#0:wybe.bool) #5







empty > public {inline} (0 calls)
0: empty(?$#0:tests.map):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:tests.map, ?$#0:tests.map)


key > public {inline} (0 calls)
0: key($rec#0:tests.map, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:tests.map, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

key > public {inline} (0 calls)
1: key($rec#0:tests.map, ?$rec#1:tests.map, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:tests.map, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:tests.map, ?$rec#1:tests.map)

    1:
        foreign lpvm mutate(~%$rec#0:tests.map, ?%$rec#1:tests.map, 8:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



left > public {inline} (0 calls)
0: left($rec#0:tests.map, ?$#0:tests.map, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:tests.map, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:tests.map)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

left > public {inline} (0 calls)
1: left($rec#0:tests.map, ?$rec#1:tests.map, $field#0:tests.map, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:tests.map, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:tests.map, ?$rec#1:tests.map)

    1:
        foreign lpvm mutate(~%$rec#0:tests.map, ?%$rec#1:tests.map, 0:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:tests.map)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



node > public {inline} (0 calls)
0: node(left#0:tests.map, key#0:wybe.int, value#0:wybe.int, right#0:tests.map, ?$#0:tests.map):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(32:wybe.int, ?$rec#0:!tests.map)
    foreign lpvm mutate(~%$rec#0:tests.map, ?%$rec#1:tests.map, 0:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~left#0:tests.map)
    foreign lpvm mutate(~%$rec#1:tests.map, ?%$rec#2:tests.map, 8:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~key#0:wybe.int)
    foreign lpvm mutate(~%$rec#2:tests.map, ?%$rec#3:tests.map, 16:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~value#0:wybe.int)
    foreign lpvm mutate(~%$rec#3:tests.map, ?%$#0:tests.map, 24:wybe.int, 1:wybe.int, 32:wybe.int, 0:wybe.int, ~right#0:tests.map)
node > public {inline} (20 calls)
1: node(?left#0:tests.map, ?key#0:wybe.int, ?value#0:wybe.int, ?right#0:tests.map, $#0:tests.map, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:tests.map, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($#0:tests.map, 0:wybe.int, 32:wybe.int, 0:wybe.int, ?left#0:tests.map)
        foreign lpvm access($#0:tests.map, 8:wybe.int, 32:wybe.int, 0:wybe.int, ?key#0:wybe.int)
        foreign lpvm access($#0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?value#0:wybe.int)
        foreign lpvm access(~$#0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?right#0:tests.map)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



right > public {inline} (0 calls)
0: right($rec#0:tests.map, ?$#0:tests.map, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:tests.map, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:tests.map, 24:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:tests.map)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

right > public {inline} (0 calls)
1: right($rec#0:tests.map, ?$rec#1:tests.map, $field#0:tests.map, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:tests.map, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:tests.map, ?$rec#1:tests.map)

    1:
        foreign lpvm mutate(~%$rec#0:tests.map, ?%$rec#1:tests.map, 24:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:tests.map)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



value > public {inline} (0 calls)
0: value($rec#0:tests.map, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:tests.map, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:tests.map, 16:wybe.int, 32:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

value > public {inline} (0 calls)
1: value($rec#0:tests.map, ?$rec#1:tests.map, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:tests.map, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:tests.map, ?$rec#1:tests.map)

    1:
        foreign lpvm mutate(~%$rec#0:tests.map, ?%$rec#1:tests.map, 16:wybe.int, 0:wybe.int, 32:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'tests.map'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  i1 @"tests.map./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i1  @"tests.map.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  %"1$$$#0" = xor i1 %"1$tmp$0#0", 1 
  ret i1 %"1$$$#0" 
}


define external fastcc  i1 @"tests.map.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"$left#0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"$left#0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"$left#0", 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"$left#0", 24 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %"2$tmp$11#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"2$tmp$11#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"3$$$#0" 
if.then1:
  %16 = inttoptr i64 %"$right#0" to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  %19 = add   i64 %"$right#0", 8 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  %23 = add   i64 %"$right#0", 16 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = add   i64 %"$right#0", 24 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %"4$tmp$4#0" = tail call fastcc  i1  @"tests.map.=<0>"(i64  %3, i64  %18)  
  br i1 %"4$tmp$4#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6$tmp$5#0" = icmp eq i64 %7, %22 
  br i1 %"6$tmp$5#0", label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %"8$tmp$6#0" = icmp eq i64 %11, %26 
  br i1 %"8$tmp$6#0", label %if.then4, label %if.else4 
if.else3:
  ret i1 0 
if.then4:
  %"10$$$#0" = tail call fastcc  i1  @"tests.map.=<0>"(i64  %15, i64  %30)  
  ret i1 %"10$$$#0" 
if.else4:
  ret i1 0 
}


define external fastcc  i64 @"tests.map.empty<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"tests.map.key<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %31 = add   i64 %"$rec#0", 8 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  %35 = insertvalue {i64, i1} undef, i64 %34, 0 
  %36 = insertvalue {i64, i1} %35, i1 1, 1 
  ret {i64, i1} %36 
if.else:
  %37 = insertvalue {i64, i1} undef, i64 undef, 0 
  %38 = insertvalue {i64, i1} %37, i1 0, 1 
  ret {i64, i1} %38 
}


define external fastcc  {i64, i1} @"tests.map.key<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %39 = trunc i64 32 to i32  
  %40 = tail call ccc  i8*  @wybe_malloc(i32  %39)  
  %41 = ptrtoint i8* %40 to i64 
  %42 = inttoptr i64 %41 to i8* 
  %43 = inttoptr i64 %"$rec#0" to i8* 
  %44 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %42, i8*  %43, i32  %44, i32  8, i1  0)  
  %45 = add   i64 %41, 8 
  %46 = inttoptr i64 %45 to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  store  i64 %"$field#0", i64* %47 
  %48 = insertvalue {i64, i1} undef, i64 %41, 0 
  %49 = insertvalue {i64, i1} %48, i1 1, 1 
  ret {i64, i1} %49 
if.else:
  %50 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %51 = insertvalue {i64, i1} %50, i1 0, 1 
  ret {i64, i1} %51 
}


define external fastcc  {i64, i1} @"tests.map.left<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %52 = inttoptr i64 %"$rec#0" to i64* 
  %53 = getelementptr  i64, i64* %52, i64 0 
  %54 = load  i64, i64* %53 
  %55 = insertvalue {i64, i1} undef, i64 %54, 0 
  %56 = insertvalue {i64, i1} %55, i1 1, 1 
  ret {i64, i1} %56 
if.else:
  %57 = insertvalue {i64, i1} undef, i64 undef, 0 
  %58 = insertvalue {i64, i1} %57, i1 0, 1 
  ret {i64, i1} %58 
}


define external fastcc  {i64, i1} @"tests.map.left<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %59 = trunc i64 32 to i32  
  %60 = tail call ccc  i8*  @wybe_malloc(i32  %59)  
  %61 = ptrtoint i8* %60 to i64 
  %62 = inttoptr i64 %61 to i8* 
  %63 = inttoptr i64 %"$rec#0" to i8* 
  %64 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %62, i8*  %63, i32  %64, i32  8, i1  0)  
  %65 = inttoptr i64 %61 to i64* 
  %66 = getelementptr  i64, i64* %65, i64 0 
  store  i64 %"$field#0", i64* %66 
  %67 = insertvalue {i64, i1} undef, i64 %61, 0 
  %68 = insertvalue {i64, i1} %67, i1 1, 1 
  ret {i64, i1} %68 
if.else:
  %69 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %70 = insertvalue {i64, i1} %69, i1 0, 1 
  ret {i64, i1} %70 
}


define external fastcc  i64 @"tests.map.node<0>"(i64  %"left#0", i64  %"key#0", i64  %"value#0", i64  %"right#0")    {
entry:
  %71 = trunc i64 32 to i32  
  %72 = tail call ccc  i8*  @wybe_malloc(i32  %71)  
  %73 = ptrtoint i8* %72 to i64 
  %74 = inttoptr i64 %73 to i64* 
  %75 = getelementptr  i64, i64* %74, i64 0 
  store  i64 %"left#0", i64* %75 
  %76 = add   i64 %73, 8 
  %77 = inttoptr i64 %76 to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  store  i64 %"key#0", i64* %78 
  %79 = add   i64 %73, 16 
  %80 = inttoptr i64 %79 to i64* 
  %81 = getelementptr  i64, i64* %80, i64 0 
  store  i64 %"value#0", i64* %81 
  %82 = add   i64 %73, 24 
  %83 = inttoptr i64 %82 to i64* 
  %84 = getelementptr  i64, i64* %83, i64 0 
  store  i64 %"right#0", i64* %84 
  ret i64 %73 
}


define external fastcc  {i64, i64, i64, i64, i1} @"tests.map.node<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %85 = inttoptr i64 %"$#0" to i64* 
  %86 = getelementptr  i64, i64* %85, i64 0 
  %87 = load  i64, i64* %86 
  %88 = add   i64 %"$#0", 8 
  %89 = inttoptr i64 %88 to i64* 
  %90 = getelementptr  i64, i64* %89, i64 0 
  %91 = load  i64, i64* %90 
  %92 = add   i64 %"$#0", 16 
  %93 = inttoptr i64 %92 to i64* 
  %94 = getelementptr  i64, i64* %93, i64 0 
  %95 = load  i64, i64* %94 
  %96 = add   i64 %"$#0", 24 
  %97 = inttoptr i64 %96 to i64* 
  %98 = getelementptr  i64, i64* %97, i64 0 
  %99 = load  i64, i64* %98 
  %100 = insertvalue {i64, i64, i64, i64, i1} undef, i64 %87, 0 
  %101 = insertvalue {i64, i64, i64, i64, i1} %100, i64 %91, 1 
  %102 = insertvalue {i64, i64, i64, i64, i1} %101, i64 %95, 2 
  %103 = insertvalue {i64, i64, i64, i64, i1} %102, i64 %99, 3 
  %104 = insertvalue {i64, i64, i64, i64, i1} %103, i1 1, 4 
  ret {i64, i64, i64, i64, i1} %104 
if.else:
  %105 = insertvalue {i64, i64, i64, i64, i1} undef, i64 undef, 0 
  %106 = insertvalue {i64, i64, i64, i64, i1} %105, i64 undef, 1 
  %107 = insertvalue {i64, i64, i64, i64, i1} %106, i64 undef, 2 
  %108 = insertvalue {i64, i64, i64, i64, i1} %107, i64 undef, 3 
  %109 = insertvalue {i64, i64, i64, i64, i1} %108, i1 0, 4 
  ret {i64, i64, i64, i64, i1} %109 
}


define external fastcc  {i64, i1} @"tests.map.right<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %110 = add   i64 %"$rec#0", 24 
  %111 = inttoptr i64 %110 to i64* 
  %112 = getelementptr  i64, i64* %111, i64 0 
  %113 = load  i64, i64* %112 
  %114 = insertvalue {i64, i1} undef, i64 %113, 0 
  %115 = insertvalue {i64, i1} %114, i1 1, 1 
  ret {i64, i1} %115 
if.else:
  %116 = insertvalue {i64, i1} undef, i64 undef, 0 
  %117 = insertvalue {i64, i1} %116, i1 0, 1 
  ret {i64, i1} %117 
}


define external fastcc  {i64, i1} @"tests.map.right<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %118 = trunc i64 32 to i32  
  %119 = tail call ccc  i8*  @wybe_malloc(i32  %118)  
  %120 = ptrtoint i8* %119 to i64 
  %121 = inttoptr i64 %120 to i8* 
  %122 = inttoptr i64 %"$rec#0" to i8* 
  %123 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %121, i8*  %122, i32  %123, i32  8, i1  0)  
  %124 = add   i64 %120, 24 
  %125 = inttoptr i64 %124 to i64* 
  %126 = getelementptr  i64, i64* %125, i64 0 
  store  i64 %"$field#0", i64* %126 
  %127 = insertvalue {i64, i1} undef, i64 %120, 0 
  %128 = insertvalue {i64, i1} %127, i1 1, 1 
  ret {i64, i1} %128 
if.else:
  %129 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %130 = insertvalue {i64, i1} %129, i1 0, 1 
  ret {i64, i1} %130 
}


define external fastcc  {i64, i1} @"tests.map.value<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %131 = add   i64 %"$rec#0", 16 
  %132 = inttoptr i64 %131 to i64* 
  %133 = getelementptr  i64, i64* %132, i64 0 
  %134 = load  i64, i64* %133 
  %135 = insertvalue {i64, i1} undef, i64 %134, 0 
  %136 = insertvalue {i64, i1} %135, i1 1, 1 
  ret {i64, i1} %136 
if.else:
  %137 = insertvalue {i64, i1} undef, i64 undef, 0 
  %138 = insertvalue {i64, i1} %137, i1 0, 1 
  ret {i64, i1} %138 
}


define external fastcc  {i64, i1} @"tests.map.value<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %139 = trunc i64 32 to i32  
  %140 = tail call ccc  i8*  @wybe_malloc(i32  %139)  
  %141 = ptrtoint i8* %140 to i64 
  %142 = inttoptr i64 %141 to i8* 
  %143 = inttoptr i64 %"$rec#0" to i8* 
  %144 = trunc i64 32 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %142, i8*  %143, i32  %144, i32  8, i1  0)  
  %145 = add   i64 %141, 16 
  %146 = inttoptr i64 %145 to i64* 
  %147 = getelementptr  i64, i64* %146, i64 0 
  store  i64 %"$field#0", i64* %147 
  %148 = insertvalue {i64, i1} undef, i64 %141, 0 
  %149 = insertvalue {i64, i1} %148, i1 1, 1 
  ret {i64, i1} %149 
if.else:
  %150 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %151 = insertvalue {i64, i1} %150, i1 0, 1 
  ret {i64, i1} %151 
}

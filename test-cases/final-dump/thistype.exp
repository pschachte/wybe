======================================================================
AFTER EVERYTHING:
 Module thistype
  representation  : address
  public submods  : 
  public resources: 
  public procs    : thistype.<0>
                    thistype./=<0>
                    thistype.=<0>
                    thistype.concat<0>
                    thistype.cons<0>
                    thistype.cons<1>
                    thistype.head<0>
                    thistype.head<1>
                    thistype.length<0>
                    thistype.nil<0>
                    thistype.tail<0>
                    thistype.tail<1>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
 MultiSpeczDepInfo: [(7,(thistype.concat<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm alloc(16:wybe.int, ?tmp$11#0:thistype)
    foreign lpvm mutate(~tmp$11#0:thistype, ?tmp$12#0:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int)
    foreign lpvm mutate(~tmp$12#0:thistype, ?tmp$2#0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:thistype)
    foreign lpvm alloc(16:wybe.int, ?tmp$15#0:thistype)
    foreign lpvm mutate(~tmp$15#0:thistype, ?tmp$16#0:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp$16#0:thistype, ?tmp$1#0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:thistype)
    foreign lpvm alloc(16:wybe.int, ?tmp$19#0:thistype)
    foreign lpvm mutate(~tmp$19#0:thistype, ?tmp$20#0:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp$20#0:thistype, ?tmp$0#0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$1#0:thistype)
    foreign lpvm alloc(16:wybe.int, ?tmp$23#0:thistype)
    foreign lpvm mutate(~tmp$23#0:thistype, ?tmp$24#0:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 200:wybe.int)
    foreign lpvm mutate(~tmp$24#0:thistype, ?tmp$5#0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:thistype)
    foreign lpvm alloc(16:wybe.int, ?tmp$27#0:thistype)
    foreign lpvm mutate(~tmp$27#0:thistype, ?tmp$28#0:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int)
    foreign lpvm mutate(~tmp$28#0:thistype, ?tmp$4#0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$5#0:thistype)
    thistype.concat<0>[410bae77d3](~tmp$0#0:thistype, ~tmp$4#0:thistype, ?tmp$8#0:thistype) #7 @thistype:16:17
    thistype.length<0>(~tmp$8#0:thistype, ?tmp$7#0:wybe.int) #8 @thistype:16:10
    foreign c print_int(~tmp$7#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$31#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$31#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn


/= > public {inline} (0 calls)
0: /=($left#0:thistype, $right#0:thistype, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    thistype.=<0>(~$left#0:thistype, ~$right#0:thistype, ?tmp$0#0:wybe.bool) #0
    foreign llvm xor(~tmp$0#0:wybe.bool, 1:wybe.bool, ?$$#0:wybe.bool)


= > public (2 calls)
0: =($left#0:thistype, $right#0:thistype, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($left#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm icmp_eq(~$left#0:thistype, ~$right#0:thistype, ?$$#0:!wybe.bool)

    1:
        foreign lpvm access($left#0:thistype, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$head#0:wybe.int)
        foreign lpvm access(~$left#0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$left$tail#0:thistype)
        foreign llvm icmp_ne($right#0:thistype, 0:wybe.int, ?tmp$9#0:wybe.bool)
        case ~tmp$9#0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

        1:
            foreign lpvm access($right#0:thistype, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$head#0:wybe.int)
            foreign lpvm access(~$right#0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$right$tail#0:thistype)
            foreign llvm icmp_eq(~$left$head#0:wybe.int, ~$right$head#0:wybe.int, ?tmp$4#0:wybe.bool) @wybe:nn:nn
            case ~tmp$4#0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

            1:
                thistype.=<0>(~$left$tail#0:thistype, ~$right$tail#0:thistype, ?$$#0:wybe.bool) #3





concat > public (2 calls)
0: concat(x#0:thistype, y#0:thistype, ?$#0:thistype):
 AliasPairs: [($#0,y#0)]
 InterestingCallProperties: [InterestingUnaliased 0]
 MultiSpeczDepInfo: [(1,(thistype.concat<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(x#0:thistype, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~y#0:thistype, ?$#0:thistype) @thistype:5:5

    1:
        foreign lpvm access(x#0:thistype, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h#0:wybe.int)
        foreign lpvm access(~x#0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:thistype)
        thistype.concat<0>(~t#0:thistype, ~y#0:thistype, ?tmp$2#0:thistype) #1 @thistype:7:17
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:thistype)
        foreign lpvm mutate(~tmp$8#0:thistype, ?tmp$9#0:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h#0:wybe.int)
        foreign lpvm mutate(~tmp$9#0:thistype, ?$#0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:thistype)

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(x#0:thistype, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~y#0:thistype, ?$#0:thistype) @thistype:5:5

    1:
        foreign lpvm access(x#0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:thistype)
        thistype.concat<0>[410bae77d3](~t#0:thistype, ~y#0:thistype, ?tmp$2#0:thistype) #1 @thistype:7:17
        foreign lpvm mutate(~x#0:thistype, ?$#0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:thistype)



cons > public {inline} (6 calls)
0: cons(head#0:wybe.int, tail#0:thistype, ?$#0:thistype):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:thistype)
    foreign lpvm mutate(~%$rec#0:thistype, ?%$rec#1:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head#0:wybe.int)
    foreign lpvm mutate(~%$rec#1:thistype, ?%$#0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail#0:thistype)
cons > public {inline} (18 calls)
1: cons(?head#0:wybe.int, ?tail#0:thistype, $#0:thistype, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head#0:wybe.int)
        foreign llvm move(undef:thistype, ?tail#0:thistype)

    1:
        foreign lpvm access($#0:thistype, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head#0:wybe.int)
        foreign lpvm access(~$#0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail#0:thistype)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



head > public {inline} (0 calls)
0: head($rec#0:thistype, ?$#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?$#0:wybe.int)

    1:
        foreign lpvm access(~$rec#0:thistype, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

head > public {inline} (0 calls)
1: head($rec#0:thistype, ?$rec#1:thistype, $field#0:wybe.int, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:thistype, ?$rec#1:thistype)

    1:
        foreign lpvm mutate(~%$rec#0:thistype, ?%$rec#1:thistype, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:wybe.int)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



length > public (2 calls)
0: length(x#0:thistype, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne(x#0:thistype, 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?$#0:wybe.int) @thistype:10:5

    1:
        foreign lpvm access(~x#0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t#0:thistype)
        thistype.length<0>(~t#0:thistype, ?tmp$2#0:wybe.int) #1 @thistype:11:34
        foreign llvm add(~tmp$2#0:wybe.int, 1:wybe.int, ?$#0:wybe.int) @wybe:nn:nn



nil > public {inline} (2 calls)
0: nil(?$#0:thistype):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(0:thistype, ?$#0:thistype)


tail > public {inline} (0 calls)
0: tail($rec#0:thistype, ?$#0:thistype, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(undef:thistype, ?$#0:thistype)

    1:
        foreign lpvm access(~$rec#0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?$#0:thistype)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

tail > public {inline} (0 calls)
1: tail($rec#0:thistype, ?$rec#1:thistype, $field#0:thistype, ?$$#0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_ne($rec#0:!wybe.int, 0:wybe.int, ?tmp$0#0:!wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:thistype, ?$rec#1:thistype)

    1:
        foreign lpvm {noalias} mutate(~%$rec#0:thistype, ?%$rec#1:thistype, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:thistype)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'thistype'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"thistype.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 3, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 0, i64* %8 
  %9 = trunc i64 16 to i32  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  %9)  
  %11 = ptrtoint i8* %10 to i64 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 2, i64* %13 
  %14 = add   i64 %11, 8 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 %3, i64* %16 
  %17 = trunc i64 16 to i32  
  %18 = tail call ccc  i8*  @wybe_malloc(i32  %17)  
  %19 = ptrtoint i8* %18 to i64 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  store  i64 1, i64* %21 
  %22 = add   i64 %19, 8 
  %23 = inttoptr i64 %22 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  store  i64 %11, i64* %24 
  %25 = trunc i64 16 to i32  
  %26 = tail call ccc  i8*  @wybe_malloc(i32  %25)  
  %27 = ptrtoint i8* %26 to i64 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  store  i64 200, i64* %29 
  %30 = add   i64 %27, 8 
  %31 = inttoptr i64 %30 to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  store  i64 0, i64* %32 
  %33 = trunc i64 16 to i32  
  %34 = tail call ccc  i8*  @wybe_malloc(i32  %33)  
  %35 = ptrtoint i8* %34 to i64 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  store  i64 100, i64* %37 
  %38 = add   i64 %35, 8 
  %39 = inttoptr i64 %38 to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  store  i64 %27, i64* %40 
  %"1$tmp$8#0" = tail call fastcc  i64  @"thistype.concat<0>[410bae77d3]"(i64  %19, i64  %35)  
  %"1$tmp$7#0" = tail call fastcc  i64  @"thistype.length<0>"(i64  %"1$tmp$8#0")  
  tail call ccc  void  @print_int(i64  %"1$tmp$7#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i1 @"thistype./=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i1  @"thistype.=<0>"(i64  %"$left#0", i64  %"$right#0")  
  %"1$$$#0" = xor i1 %"1$tmp$0#0", 1 
  ret i1 %"1$$$#0" 
}


define external fastcc  i1 @"thistype.=<0>"(i64  %"$left#0", i64  %"$right#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$left#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %41 = inttoptr i64 %"$left#0" to i64* 
  %42 = getelementptr  i64, i64* %41, i64 0 
  %43 = load  i64, i64* %42 
  %44 = add   i64 %"$left#0", 8 
  %45 = inttoptr i64 %44 to i64* 
  %46 = getelementptr  i64, i64* %45, i64 0 
  %47 = load  i64, i64* %46 
  %"2$tmp$9#0" = icmp ne i64 %"$right#0", 0 
  br i1 %"2$tmp$9#0", label %if.then1, label %if.else1 
if.else:
  %"3$$$#0" = icmp eq i64 %"$left#0", %"$right#0" 
  ret i1 %"3$$$#0" 
if.then1:
  %48 = inttoptr i64 %"$right#0" to i64* 
  %49 = getelementptr  i64, i64* %48, i64 0 
  %50 = load  i64, i64* %49 
  %51 = add   i64 %"$right#0", 8 
  %52 = inttoptr i64 %51 to i64* 
  %53 = getelementptr  i64, i64* %52, i64 0 
  %54 = load  i64, i64* %53 
  %"4$tmp$4#0" = icmp eq i64 %43, %50 
  br i1 %"4$tmp$4#0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6$$$#0" = tail call fastcc  i1  @"thistype.=<0>"(i64  %47, i64  %54)  
  ret i1 %"6$$$#0" 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"thistype.concat<0>"(i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %55 = inttoptr i64 %"x#0" to i64* 
  %56 = getelementptr  i64, i64* %55, i64 0 
  %57 = load  i64, i64* %56 
  %58 = add   i64 %"x#0", 8 
  %59 = inttoptr i64 %58 to i64* 
  %60 = getelementptr  i64, i64* %59, i64 0 
  %61 = load  i64, i64* %60 
  %"2$tmp$2#0" = tail call fastcc  i64  @"thistype.concat<0>"(i64  %61, i64  %"y#0")  
  %62 = trunc i64 16 to i32  
  %63 = tail call ccc  i8*  @wybe_malloc(i32  %62)  
  %64 = ptrtoint i8* %63 to i64 
  %65 = inttoptr i64 %64 to i64* 
  %66 = getelementptr  i64, i64* %65, i64 0 
  store  i64 %57, i64* %66 
  %67 = add   i64 %64, 8 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  store  i64 %"2$tmp$2#0", i64* %69 
  ret i64 %64 
if.else:
  ret i64 %"y#0" 
}


define external fastcc  i64 @"thistype.concat<0>[410bae77d3]"(i64  %"x#0", i64  %"y#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %70 = add   i64 %"x#0", 8 
  %71 = inttoptr i64 %70 to i64* 
  %72 = getelementptr  i64, i64* %71, i64 0 
  %73 = load  i64, i64* %72 
  %"2$tmp$2#0" = tail call fastcc  i64  @"thistype.concat<0>[410bae77d3]"(i64  %73, i64  %"y#0")  
  %74 = add   i64 %"x#0", 8 
  %75 = inttoptr i64 %74 to i64* 
  %76 = getelementptr  i64, i64* %75, i64 0 
  store  i64 %"2$tmp$2#0", i64* %76 
  ret i64 %"x#0" 
if.else:
  ret i64 %"y#0" 
}


define external fastcc  i64 @"thistype.cons<0>"(i64  %"head#0", i64  %"tail#0")    {
entry:
  %77 = trunc i64 16 to i32  
  %78 = tail call ccc  i8*  @wybe_malloc(i32  %77)  
  %79 = ptrtoint i8* %78 to i64 
  %80 = inttoptr i64 %79 to i64* 
  %81 = getelementptr  i64, i64* %80, i64 0 
  store  i64 %"head#0", i64* %81 
  %82 = add   i64 %79, 8 
  %83 = inttoptr i64 %82 to i64* 
  %84 = getelementptr  i64, i64* %83, i64 0 
  store  i64 %"tail#0", i64* %84 
  ret i64 %79 
}


define external fastcc  {i64, i64, i1} @"thistype.cons<1>"(i64  %"$#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %85 = inttoptr i64 %"$#0" to i64* 
  %86 = getelementptr  i64, i64* %85, i64 0 
  %87 = load  i64, i64* %86 
  %88 = add   i64 %"$#0", 8 
  %89 = inttoptr i64 %88 to i64* 
  %90 = getelementptr  i64, i64* %89, i64 0 
  %91 = load  i64, i64* %90 
  %92 = insertvalue {i64, i64, i1} undef, i64 %87, 0 
  %93 = insertvalue {i64, i64, i1} %92, i64 %91, 1 
  %94 = insertvalue {i64, i64, i1} %93, i1 1, 2 
  ret {i64, i64, i1} %94 
if.else:
  %95 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %96 = insertvalue {i64, i64, i1} %95, i64 undef, 1 
  %97 = insertvalue {i64, i64, i1} %96, i1 0, 2 
  ret {i64, i64, i1} %97 
}


define external fastcc  {i64, i1} @"thistype.head<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %98 = inttoptr i64 %"$rec#0" to i64* 
  %99 = getelementptr  i64, i64* %98, i64 0 
  %100 = load  i64, i64* %99 
  %101 = insertvalue {i64, i1} undef, i64 %100, 0 
  %102 = insertvalue {i64, i1} %101, i1 1, 1 
  ret {i64, i1} %102 
if.else:
  %103 = insertvalue {i64, i1} undef, i64 undef, 0 
  %104 = insertvalue {i64, i1} %103, i1 0, 1 
  ret {i64, i1} %104 
}


define external fastcc  {i64, i1} @"thistype.head<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %105 = trunc i64 16 to i32  
  %106 = tail call ccc  i8*  @wybe_malloc(i32  %105)  
  %107 = ptrtoint i8* %106 to i64 
  %108 = inttoptr i64 %107 to i8* 
  %109 = inttoptr i64 %"$rec#0" to i8* 
  %110 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %108, i8*  %109, i32  %110, i32  8, i1  0)  
  %111 = inttoptr i64 %107 to i64* 
  %112 = getelementptr  i64, i64* %111, i64 0 
  store  i64 %"$field#0", i64* %112 
  %113 = insertvalue {i64, i1} undef, i64 %107, 0 
  %114 = insertvalue {i64, i1} %113, i1 1, 1 
  ret {i64, i1} %114 
if.else:
  %115 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %116 = insertvalue {i64, i1} %115, i1 0, 1 
  ret {i64, i1} %116 
}


define external fastcc  i64 @"thistype.length<0>"(i64  %"x#0")    {
entry:
  %"1$tmp$5#0" = icmp ne i64 %"x#0", 0 
  br i1 %"1$tmp$5#0", label %if.then, label %if.else 
if.then:
  %117 = add   i64 %"x#0", 8 
  %118 = inttoptr i64 %117 to i64* 
  %119 = getelementptr  i64, i64* %118, i64 0 
  %120 = load  i64, i64* %119 
  %"2$tmp$2#0" = tail call fastcc  i64  @"thistype.length<0>"(i64  %120)  
  %"2$$#0" = add   i64 %"2$tmp$2#0", 1 
  ret i64 %"2$$#0" 
if.else:
  ret i64 0 
}


define external fastcc  i64 @"thistype.nil<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"thistype.tail<0>"(i64  %"$rec#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %121 = add   i64 %"$rec#0", 8 
  %122 = inttoptr i64 %121 to i64* 
  %123 = getelementptr  i64, i64* %122, i64 0 
  %124 = load  i64, i64* %123 
  %125 = insertvalue {i64, i1} undef, i64 %124, 0 
  %126 = insertvalue {i64, i1} %125, i1 1, 1 
  ret {i64, i1} %126 
if.else:
  %127 = insertvalue {i64, i1} undef, i64 undef, 0 
  %128 = insertvalue {i64, i1} %127, i1 0, 1 
  ret {i64, i1} %128 
}


define external fastcc  {i64, i1} @"thistype.tail<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"1$tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"1$tmp$0#0", label %if.then, label %if.else 
if.then:
  %129 = trunc i64 16 to i32  
  %130 = tail call ccc  i8*  @wybe_malloc(i32  %129)  
  %131 = ptrtoint i8* %130 to i64 
  %132 = inttoptr i64 %131 to i8* 
  %133 = inttoptr i64 %"$rec#0" to i8* 
  %134 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %132, i8*  %133, i32  %134, i32  8, i1  0)  
  %135 = add   i64 %131, 8 
  %136 = inttoptr i64 %135 to i64* 
  %137 = getelementptr  i64, i64* %136, i64 0 
  store  i64 %"$field#0", i64* %137 
  %138 = insertvalue {i64, i1} undef, i64 %131, 0 
  %139 = insertvalue {i64, i1} %138, i1 1, 1 
  ret {i64, i1} %139 
if.else:
  %140 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %141 = insertvalue {i64, i1} %140, i1 0, 1 
  ret {i64, i1} %141 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module thistype
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : thistype.<0>
                    thistype.=<0>
                    thistype.concat<0>
                    thistype.cons<0>
                    thistype.cons<1>
                    thistype.head<0>
                    thistype.head<1>
                    thistype.length<0>
                    thistype.nil<0>
                    thistype.tail<0>
                    thistype.tail<1>
                    thistype.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: thistype.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(7,(thistype.concat<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:thistype) @thistype:nn:nn
    foreign lpvm mutate(~tmp#11##0:thistype, ?tmp#12##0:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int) @thistype:nn:nn
    foreign lpvm mutate(~tmp#12##0:thistype, ?tmp#2##0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:thistype) @thistype:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:thistype) @thistype:nn:nn
    foreign lpvm mutate(~tmp#15##0:thistype, ?tmp#16##0:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int) @thistype:nn:nn
    foreign lpvm mutate(~tmp#16##0:thistype, ?tmp#1##0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:thistype) @thistype:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:thistype) @thistype:nn:nn
    foreign lpvm mutate(~tmp#19##0:thistype, ?tmp#20##0:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int) @thistype:nn:nn
    foreign lpvm mutate(~tmp#20##0:thistype, ?tmp#0##0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:thistype) @thistype:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:thistype) @thistype:nn:nn
    foreign lpvm mutate(~tmp#23##0:thistype, ?tmp#24##0:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 200:wybe.int) @thistype:nn:nn
    foreign lpvm mutate(~tmp#24##0:thistype, ?tmp#5##0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:thistype) @thistype:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#27##0:thistype) @thistype:nn:nn
    foreign lpvm mutate(~tmp#27##0:thistype, ?tmp#28##0:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int) @thistype:nn:nn
    foreign lpvm mutate(~tmp#28##0:thistype, ?tmp#4##0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:thistype) @thistype:nn:nn
    thistype.concat<0>[410bae77d3](~tmp#0##0:thistype, ~tmp#4##0:thistype, outByReference tmp#8##0:thistype) #7 @thistype:nn:nn
    thistype.length<0>(~tmp#8##0:thistype, ?tmp#7##0:wybe.int) #8 @thistype:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @thistype:nn:nn
    foreign c print_int(~tmp#7##0:wybe.int, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @thistype:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#31##0:wybe.phantom, ?tmp#32##0:wybe.phantom) @thistype:nn:nn
    foreign lpvm store(~%tmp#32##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @thistype:nn:nn


proc = > public (2 calls)
0: thistype.=<0>
=(#left##0:thistype, #right##0:thistype, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#right##0:thistype, 0:thistype, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:thistype, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#head##0:wybe.int) @thistype:nn:nn
        foreign lpvm access(~#left##0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#tail##0:thistype) @thistype:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
        case ~tmp#9##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:thistype, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#head##0:wybe.int) @thistype:nn:nn
            foreign lpvm access(~#right##0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#tail##0:thistype) @thistype:nn:nn
            foreign llvm icmp_eq(~#left#head##0:wybe.int, ~#right#head##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                thistype.=<0>(~#left#tail##0:thistype, ~#right#tail##0:thistype, ?#success##0:wybe.bool) #3





proc concat > public (2 calls)
0: thistype.concat<0>
concat(x##0:thistype, y##0:thistype, outByReference #result##0:thistype)<{}; {}; {}>:
  AliasPairs: [(#result##0,y##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(thistype.concat<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @thistype:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~y##0:thistype, ?#result##0:thistype) @thistype:nn:nn

    1:
        foreign lpvm access(x##0:thistype, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @thistype:nn:nn
        foreign lpvm access(~x##0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:thistype) @thistype:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#8##0:thistype) @thistype:nn:nn
        foreign lpvm mutate(~tmp#8##0:thistype, ?tmp#9##0:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:wybe.int) @thistype:nn:nn
        thistype.concat<0>(~t##0:thistype, ~y##0:thistype, outByReference tmp#2##0:thistype) #1 @thistype:nn:nn
        foreign lpvm mutate(~tmp#9##0:thistype, ?#result##0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:thistype) @thistype:nn:nn

 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @thistype:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(~y##0:thistype, ?#result##0:thistype) @thistype:nn:nn

    1:
        foreign lpvm access(x##0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:thistype) @thistype:nn:nn
        thistype.concat<0>[410bae77d3](~t##0:thistype, ~y##0:thistype, outByReference tmp#2##0:thistype) #1 @thistype:nn:nn
        foreign lpvm mutate(~x##0:thistype, ?#result##0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#2##0:thistype) @thistype:nn:nn



proc cons > public {inline} (6 calls)
0: thistype.cons<0>
cons(head##0:wybe.int, tail##0:thistype, ?#result##0:thistype)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:thistype) @thistype:nn:nn
    foreign lpvm mutate(~#rec##0:thistype, ?#rec##1:thistype, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head##0:wybe.int) @thistype:nn:nn
    foreign lpvm mutate(~#rec##1:thistype, ?#result##0:thistype, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail##0:thistype) @thistype:nn:nn
proc cons > public {inline} (18 calls)
1: thistype.cons<1>
cons(?head##0:wybe.int, ?tail##0:thistype, #result##0:thistype, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head##0:wybe.int)
        foreign llvm move(undef:thistype, ?tail##0:thistype)

    1:
        foreign lpvm access(#result##0:thistype, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head##0:wybe.int) @thistype:nn:nn
        foreign lpvm access(~#result##0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail##0:thistype) @thistype:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc head > public {inline} (0 calls)
0: thistype.head<0>
head(#rec##0:thistype, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:thistype, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @thistype:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc head > public {inline} (0 calls)
1: thistype.head<1>
head(#rec##0:thistype, ?#rec##1:thistype, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:thistype, ?#rec##1:thistype)

    1:
        foreign lpvm mutate(~#rec##0:thistype, ?#rec##1:thistype, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @thistype:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc length > public (2 calls)
0: thistype.length<0>
length(x##0:thistype, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @thistype:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.int, ?#result##0:wybe.int) @thistype:nn:nn

    1:
        foreign lpvm access(~x##0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:thistype) @thistype:nn:nn
        thistype.length<0>(~t##0:thistype, ?tmp#2##0:wybe.int) #1 @thistype:nn:nn
        foreign llvm add(~tmp#2##0:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @thistype:nn:nn



proc nil > public {inline} (2 calls)
0: thistype.nil<0>
nil(?#result##0:thistype)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:thistype, ?#result##0:thistype)


proc tail > public {inline} (0 calls)
0: thistype.tail<0>
tail(#rec##0:thistype, ?#result##0:thistype, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:thistype, ?#result##0:thistype)

    1:
        foreign lpvm access(~#rec##0:thistype, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:thistype) @thistype:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc tail > public {inline} (0 calls)
1: thistype.tail<1>
tail(#rec##0:thistype, ?#rec##1:thistype, #field##0:thistype, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(0:thistype, ?#rec##1:thistype)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:thistype, ?#rec##1:thistype, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:thistype) @thistype:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: thistype.~=<0>
~=(#left##0:thistype, #right##0:thistype, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    thistype.=<0>(~#left##0:thistype, ~#right##0:thistype, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'thistype'

source_filename = "!ROOT!/final-dump/thistype.wybe"
target triple    ????


declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"thistype.<0>"() {
  %"tmp#33##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#11##0" = ptrtoint ptr %"tmp#33##0" to i64
  %"tmp#34##0" = inttoptr i64 %"tmp#11##0" to ptr
  store i64 3, ptr %"tmp#34##0"
  %"tmp#35##0" = add i64 %"tmp#11##0", 8
  %"tmp#36##0" = inttoptr i64 %"tmp#35##0" to ptr
  store i64 0, ptr %"tmp#36##0"
  %"tmp#37##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#15##0" = ptrtoint ptr %"tmp#37##0" to i64
  %"tmp#38##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 2, ptr %"tmp#38##0"
  %"tmp#39##0" = add i64 %"tmp#15##0", 8
  %"tmp#40##0" = inttoptr i64 %"tmp#39##0" to ptr
  store i64 %"tmp#11##0", ptr %"tmp#40##0"
  %"tmp#41##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#19##0" = ptrtoint ptr %"tmp#41##0" to i64
  %"tmp#42##0" = inttoptr i64 %"tmp#19##0" to ptr
  store i64 1, ptr %"tmp#42##0"
  %"tmp#43##0" = add i64 %"tmp#19##0", 8
  %"tmp#44##0" = inttoptr i64 %"tmp#43##0" to ptr
  store i64 %"tmp#15##0", ptr %"tmp#44##0"
  %"tmp#45##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#23##0" = ptrtoint ptr %"tmp#45##0" to i64
  %"tmp#46##0" = inttoptr i64 %"tmp#23##0" to ptr
  store i64 200, ptr %"tmp#46##0"
  %"tmp#47##0" = add i64 %"tmp#23##0", 8
  %"tmp#48##0" = inttoptr i64 %"tmp#47##0" to ptr
  store i64 0, ptr %"tmp#48##0"
  %"tmp#49##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#27##0" = ptrtoint ptr %"tmp#49##0" to i64
  %"tmp#50##0" = inttoptr i64 %"tmp#27##0" to ptr
  store i64 100, ptr %"tmp#50##0"
  %"tmp#51##0" = add i64 %"tmp#27##0", 8
  %"tmp#52##0" = inttoptr i64 %"tmp#51##0" to ptr
  store i64 %"tmp#23##0", ptr %"tmp#52##0"
  %"tmp#53##0" = alloca i8, i64 8, align 8
  call fastcc void @"thistype.concat<0>[410bae77d3]"(i64 %"tmp#19##0", i64 %"tmp#27##0", ptr %"tmp#53##0")
  %"tmp#8##0" = load i64, ptr %"tmp#53##0"
  %"tmp#7##0" = call fastcc i64 @"thistype.length<0>"(i64 %"tmp#8##0")
  call ccc void @print_int(i64 %"tmp#7##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i1 @"thistype.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = icmp ne i64 %"#left##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#12##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#head##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#left##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#left#tail##0" = load i64, ptr %"tmp#14##0"
  %"tmp#9##0" = icmp ne i64 %"#right##0", 0
  br i1 %"tmp#9##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#15##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#head##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = add i64 %"#right##0", 8
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  %"#right#tail##0" = load i64, ptr %"tmp#17##0"
  %"tmp#4##0" = icmp eq i64 %"#left#head##0", %"#right#head##0"
  br i1 %"tmp#4##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#18##0" = tail call fastcc i1 @"thistype.=<0>"(i64 %"#left#tail##0", i64 %"#right#tail##0")
  ret i1 %"tmp#18##0"
if.else.2:
  ret i1 0
if.else.1:
  ret i1 0
if.else.0:
  %"tmp#19##0" = icmp eq i64 %"#right##0", 0
  ret i1 %"tmp#19##0"
}

define external fastcc void @"thistype.concat<0>"(i64 %"x##0", i64 %"y##0", ptr %"tmp#10##0") {
  %"tmp#5##0" = icmp ne i64 %"x##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#11##0" = inttoptr i64 %"x##0" to ptr
  %"h##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"x##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"t##0" = load i64, ptr %"tmp#13##0"
  %"tmp#14##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#8##0" = ptrtoint ptr %"tmp#14##0" to i64
  %"tmp#15##0" = inttoptr i64 %"tmp#8##0" to ptr
  store i64 %"h##0", ptr %"tmp#15##0"
  store i64 %"tmp#8##0", ptr %"tmp#10##0"
  %"tmp#16##0" = add i64 %"tmp#8##0", 8
  %"tmp#17##0" = inttoptr i64 %"tmp#16##0" to ptr
  musttail call fastcc void @"thistype.concat<0>"(i64 %"t##0", i64 %"y##0", ptr %"tmp#17##0")
  ret void
if.else.0:
  store i64 %"y##0", ptr %"tmp#10##0"
  ret void
}

define external fastcc void @"thistype.concat<0>[410bae77d3]"(i64 %"x##0", i64 %"y##0", ptr %"tmp#10##0") {
  %"tmp#5##0" = icmp ne i64 %"x##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#11##0" = add i64 %"x##0", 8
  %"tmp#12##0" = inttoptr i64 %"tmp#11##0" to ptr
  %"t##0" = load i64, ptr %"tmp#12##0"
  store i64 %"x##0", ptr %"tmp#10##0"
  %"tmp#13##0" = add i64 %"x##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  musttail call fastcc void @"thistype.concat<0>[410bae77d3]"(i64 %"t##0", i64 %"y##0", ptr %"tmp#14##0")
  ret void
if.else.0:
  store i64 %"y##0", ptr %"tmp#10##0"
  ret void
}

define external fastcc i64 @"thistype.cons<0>"(i64 %"head##0", i64 %"tail##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"head##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"tail##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64, i1} @"thistype.cons<1>"(i64 %"#result##0") {
  %"tmp#0##0" = icmp ne i64 %"#result##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = add i64 %"#result##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#4##0"
  %"tmp#6##0" = insertvalue {i64, i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#7##0" = insertvalue {i64, i64, i1} %"tmp#6##0", i64 %"tmp#5##0", 1
  %"tmp#8##0" = insertvalue {i64, i64, i1} %"tmp#7##0", i1 1, 2
  ret {i64, i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i64, i1} undef, i64 undef, 0
  %"tmp#10##0" = insertvalue {i64, i64, i1} %"tmp#9##0", i64 undef, 1
  %"tmp#11##0" = insertvalue {i64, i64, i1} %"tmp#10##0", i1 0, 2
  ret {i64, i64, i1} %"tmp#11##0"
}

define external fastcc {i64, i1} @"thistype.head<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  %"tmp#3##0" = insertvalue {i64, i1} undef, i64 %"tmp#2##0", 0
  %"tmp#4##0" = insertvalue {i64, i1} %"tmp#3##0", i1 1, 1
  ret {i64, i1} %"tmp#4##0"
if.else.0:
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 0, 1
  ret {i64, i1} %"tmp#6##0"
}

define external fastcc {i64, i1} @"thistype.head<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 16, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc i64 @"thistype.length<0>"(i64 %"x##0") {
  %"tmp#5##0" = icmp ne i64 %"x##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#8##0" = add i64 %"x##0", 8
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  %"t##0" = load i64, ptr %"tmp#9##0"
  %"tmp#2##0" = tail call fastcc i64 @"thistype.length<0>"(i64 %"t##0")
  %"tmp#10##0" = add i64 %"tmp#2##0", 1
  ret i64 %"tmp#10##0"
if.else.0:
  ret i64 0
}

define external fastcc i64 @"thistype.nil<0>"() {
  ret i64 0
}

define external fastcc {i64, i1} @"thistype.tail<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = add i64 %"#rec##0", 8
  %"tmp#2##0" = inttoptr i64 %"tmp#1##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#2##0"
  %"tmp#4##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#5##0" = insertvalue {i64, i1} %"tmp#4##0", i1 1, 1
  ret {i64, i1} %"tmp#5##0"
if.else.0:
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 0, 1
  ret {i64, i1} %"tmp#7##0"
}

define external fastcc {i64, i1} @"thistype.tail<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = icmp ne i64 %"#rec##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#2##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#2##0", ptr %"tmp#1##0", i64 16, i1 0)
  %"tmp#3##0" = ptrtoint ptr %"tmp#2##0" to i64
  %"tmp#4##0" = add i64 %"tmp#3##0", 8
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"#field##0", ptr %"tmp#5##0"
  %"tmp#6##0" = insertvalue {i64, i1} undef, i64 %"tmp#3##0", 0
  %"tmp#7##0" = insertvalue {i64, i1} %"tmp#6##0", i1 1, 1
  ret {i64, i1} %"tmp#7##0"
if.else.0:
  %"tmp#8##0" = insertvalue {i64, i1} undef, i64 0, 0
  %"tmp#9##0" = insertvalue {i64, i1} %"tmp#8##0", i1 0, 1
  ret {i64, i1} %"tmp#9##0"
}

define external fastcc i1 @"thistype.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"thistype.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

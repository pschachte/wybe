======================================================================
AFTER EVERYTHING:
 Module type_int
  representation  : (not a type)
  public submods  : myint -> type_int.myint
  public resources: 
  public procs    : type_int.myint.*<0>
                    type_int.myint.+<0>
                    type_int.myint.+<1>
                    type_int.myint.+<2>
                    type_int.myint.-<0>
                    type_int.myint.-<1>
                    type_int.myint.-<2>
                    type_int.myint./<0>
                    type_int.myint.<<0>
                    type_int.myint.<=<0>
                    type_int.myint.=<0>
                    type_int.myint.><0>
                    type_int.myint.>=<0>
                    type_int.myint.~=<0>
  imports         : public use type_int.myint
                    use wybe
  resources       : 
  submodules      : type_int.myint
  procs           : 


  LLVM code       :

; ModuleID = 'type_int'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    
--------------------------------------------------
 Module type_int.myint
  representation  : 64 bit signed
  public submods  : 
  public resources: 
  public procs    : type_int.myint.*<0>
                    type_int.myint.+<0>
                    type_int.myint.+<1>
                    type_int.myint.+<2>
                    type_int.myint.-<0>
                    type_int.myint.-<1>
                    type_int.myint.-<2>
                    type_int.myint./<0>
                    type_int.myint.<<0>
                    type_int.myint.<=<0>
                    type_int.myint.=<0>
                    type_int.myint.><0>
                    type_int.myint.>=<0>
                    type_int.myint.~=<0>
  imports         : use type_int
                    use wybe
  resources       : 
  procs           : 

* > public {inline} (0 calls)
0: type_int.myint.*<0>
*(x##0:type_int.myint, y##0:type_int.myint, ?#result##0:type_int.myint)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm mul(~x##0:type_int.myint, ~y##0:type_int.myint, ?#result##0:type_int.myint) @type_int:nn:nn


+ > public {inline} (0 calls)
0: type_int.myint.+<0>
+(x##0:type_int.myint, y##0:type_int.myint, ?#result##0:type_int.myint)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~x##0:type_int.myint, ~y##0:type_int.myint, ?#result##0:type_int.myint) @type_int:nn:nn
+ > public {inline} (0 calls)
1: type_int.myint.+<1>
+(?x##0:type_int.myint, y##0:type_int.myint, z##0:type_int.myint)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm sub(~z##0:type_int.myint, ~y##0:type_int.myint, ?x##0:type_int.myint) @type_int:nn:nn
+ > public {inline} (0 calls)
2: type_int.myint.+<2>
+(x##0:type_int.myint, ?y##0:type_int.myint, z##0:type_int.myint)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm sub(~z##0:type_int.myint, ~x##0:type_int.myint, ?y##0:type_int.myint) @type_int:nn:nn


- > public {inline} (0 calls)
0: type_int.myint.-<0>
-(x##0:type_int.myint, y##0:type_int.myint, ?#result##0:type_int.myint)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm sub(~x##0:type_int.myint, ~y##0:type_int.myint, ?#result##0:type_int.myint) @type_int:nn:nn
- > public {inline} (0 calls)
1: type_int.myint.-<1>
-(?x##0:type_int.myint, y##0:type_int.myint, z##0:type_int.myint)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~y##0:type_int.myint, ~z##0:type_int.myint, ?x##0:type_int.myint) @type_int:nn:nn
- > public {inline} (0 calls)
2: type_int.myint.-<2>
-(x##0:type_int.myint, ?y##0:type_int.myint, z##0:type_int.myint)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm sub(~z##0:type_int.myint, ~x##0:type_int.myint, ?y##0:type_int.myint) @type_int:nn:nn


/ > public {inline} (0 calls)
0: type_int.myint./<0>
/(x##0:type_int.myint, y##0:type_int.myint, ?#result##0:type_int.myint)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm sdiv(~x##0:type_int.myint, ~y##0:type_int.myint, ?#result##0:type_int.myint) @type_int:nn:nn


< > public {inline} (0 calls)
0: type_int.myint.<<0>
<(x##0:type_int.myint, y##0:type_int.myint, ?#result##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_slt(~x##0:type_int.myint, ~y##0:type_int.myint, ?#result##0:wybe.bool) @type_int:nn:nn


<= > public {inline} (0 calls)
0: type_int.myint.<=<0>
<=(x##0:type_int.myint, y##0:type_int.myint, ?#result##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sle(~x##0:type_int.myint, ~y##0:type_int.myint, ?#result##0:wybe.bool) @type_int:nn:nn


= > public {inline} (0 calls)
0: type_int.myint.=<0>
=(x##0:type_int.myint, y##0:type_int.myint, ?#result##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(~x##0:type_int.myint, ~y##0:type_int.myint, ?#result##0:wybe.bool) @type_int:nn:nn


> > public {inline} (0 calls)
0: type_int.myint.><0>
>(x##0:type_int.myint, y##0:type_int.myint, ?#result##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sgt(~x##0:type_int.myint, ~y##0:type_int.myint, ?#result##0:wybe.bool) @type_int:nn:nn


>= > public {inline} (0 calls)
0: type_int.myint.>=<0>
>=(x##0:type_int.myint, y##0:type_int.myint, ?#result##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sge(~x##0:type_int.myint, ~y##0:type_int.myint, ?#result##0:wybe.bool) @type_int:nn:nn


~= > public {inline} (0 calls)
0: type_int.myint.~=<0>
~=(x##0:type_int.myint, y##0:type_int.myint, ?#result##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(~x##0:type_int.myint, ~y##0:type_int.myint, ?#result##0:wybe.bool) @type_int:nn:nn

  LLVM code       :

; ModuleID = 'type_int.myint'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i64 @"type_int.myint.*<0>"(i64  %"x##0", i64  %"y##0") alwaysinline   {
entry:
  %0 = mul   i64 %"x##0", %"y##0" 
  ret i64 %0 
}


define external fastcc  i64 @"type_int.myint.+<0>"(i64  %"x##0", i64  %"y##0") alwaysinline   {
entry:
  %0 = add   i64 %"x##0", %"y##0" 
  ret i64 %0 
}


define external fastcc  i64 @"type_int.myint.+<1>"(i64  %"y##0", i64  %"z##0") alwaysinline   {
entry:
  %0 = sub   i64 %"z##0", %"y##0" 
  ret i64 %0 
}


define external fastcc  i64 @"type_int.myint.+<2>"(i64  %"x##0", i64  %"z##0") alwaysinline   {
entry:
  %0 = sub   i64 %"z##0", %"x##0" 
  ret i64 %0 
}


define external fastcc  i64 @"type_int.myint.-<0>"(i64  %"x##0", i64  %"y##0") alwaysinline   {
entry:
  %0 = sub   i64 %"x##0", %"y##0" 
  ret i64 %0 
}


define external fastcc  i64 @"type_int.myint.-<1>"(i64  %"y##0", i64  %"z##0") alwaysinline   {
entry:
  %0 = add   i64 %"y##0", %"z##0" 
  ret i64 %0 
}


define external fastcc  i64 @"type_int.myint.-<2>"(i64  %"x##0", i64  %"z##0") alwaysinline   {
entry:
  %0 = sub   i64 %"z##0", %"x##0" 
  ret i64 %0 
}


define external fastcc  i64 @"type_int.myint./<0>"(i64  %"x##0", i64  %"y##0") alwaysinline   {
entry:
  %0 = sdiv exact i64 %"x##0", %"y##0" 
  ret i64 %0 
}


define external fastcc  i1 @"type_int.myint.<<0>"(i64  %"x##0", i64  %"y##0") alwaysinline   {
entry:
  %0 = icmp slt i64 %"x##0", %"y##0" 
  ret i1 %0 
}


define external fastcc  i1 @"type_int.myint.<=<0>"(i64  %"x##0", i64  %"y##0") alwaysinline   {
entry:
  %0 = icmp sle i64 %"x##0", %"y##0" 
  ret i1 %0 
}


define external fastcc  i1 @"type_int.myint.=<0>"(i64  %"x##0", i64  %"y##0") alwaysinline   {
entry:
  %0 = icmp eq i64 %"x##0", %"y##0" 
  ret i1 %0 
}


define external fastcc  i1 @"type_int.myint.><0>"(i64  %"x##0", i64  %"y##0") alwaysinline   {
entry:
  %0 = icmp sgt i64 %"x##0", %"y##0" 
  ret i1 %0 
}


define external fastcc  i1 @"type_int.myint.>=<0>"(i64  %"x##0", i64  %"y##0") alwaysinline   {
entry:
  %0 = icmp sge i64 %"x##0", %"y##0" 
  ret i1 %0 
}


define external fastcc  i1 @"type_int.myint.~=<0>"(i64  %"x##0", i64  %"y##0") alwaysinline   {
entry:
  %0 = icmp ne i64 %"x##0", %"y##0" 
  ret i1 %0 
}
[93mfinal-dump/type_int.wybe:2:13: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:2:17: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:2:25: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:3:18: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:3:26: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:3:34: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:4:17: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:4:26: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:4:34: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:5:13: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:5:17: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:5:25: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:6:18: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:6:26: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:6:34: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:7:17: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:7:26: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:7:34: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:8:13: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:8:17: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:8:25: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:9:13: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:9:17: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:9:25: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:10:17: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:10:25: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:11:18: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:11:26: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:12:17: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:12:25: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:13:18: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:13:26: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:14:17: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:14:25: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:15:18: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m[93mfinal-dump/type_int.wybe:15:26: Explicit specification of current type myint,
  it is recommended to specify type as _
[0m

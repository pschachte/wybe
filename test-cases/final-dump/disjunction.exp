======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module disjunction
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : disjunction.in<0>
                    disjunction.member<0>
                    disjunction.saturating_tail<0>
                    disjunction.saturating_tail2<0>
  imports         : use wybe
  resources       : 
  procs           : 

proc in > public (2 calls)
0: disjunction.in<0>
in(e##0:wybe.int, lst##0:wybe.list(wybe.int), ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.bool) @disjunction:nn:nn
    case ~tmp#6##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(lst##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @disjunction:nn:nn
        foreign llvm icmp_eq(e##0:wybe.int, ~h##0:wybe.int, ?tmp#4##0:wybe.bool) @disjunction:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            foreign lpvm access(~lst##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.list(wybe.int)) @disjunction:nn:nn
            disjunction.in<0>(~e##0:wybe.int, ~tmp#0##0:wybe.list(wybe.int), ?#success##0:wybe.bool) #3 @disjunction:nn:nn

        1:
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc member > public (1 calls)
0: disjunction.member<0>
member(e##0:wybe.int, lst##0:wybe.list(wybe.int), ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @disjunction:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(lst##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @disjunction:nn:nn
        foreign lpvm access(~lst##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:wybe.list(wybe.int)) @disjunction:nn:nn
        foreign llvm icmp_eq(e##0:wybe.int, ~h##0:wybe.int, ?tmp#2##0:wybe.bool) @disjunction:nn:nn
        case ~tmp#2##0:wybe.bool of
        0:
            disjunction.member<0>(~e##0:wybe.int, ~t##0:wybe.list(wybe.int), ?#success##0:wybe.bool) #2 @disjunction:nn:nn

        1:
            foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)




proc saturating_tail > public (0 calls)
0: disjunction.saturating_tail<0>
saturating_tail(lst##0:wybe.list(T) <{}; {}; {0}>, ?tl##0:wybe.list(T) <{}; {}; {0}>)<{}; {}; {}>:
  AliasPairs: [(lst##0,tl##0)]
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @disjunction:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.list(T), ?tl##0:wybe.list(T)) @disjunction:nn:nn

    1:
        foreign lpvm access(~lst##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tl##0:wybe.list(T)) @disjunction:nn:nn



proc saturating_tail2 > public (0 calls)
0: disjunction.saturating_tail2<0>
saturating_tail2(lst##0:wybe.list(T) <{}; {}; {0}>, ?#result##0:wybe.list(T) <{}; {}; {0}>)<{}; {}; {}>:
  AliasPairs: [(#result##0,lst##0)]
  InterestingCallProperties: []
    foreign llvm icmp_ne(lst##0:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.bool) @disjunction:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.list(T), ?#result##0:wybe.list(T)) @disjunction:nn:nn

    1:
        foreign lpvm access(~lst##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.list(T)) @disjunction:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'disjunction'

source_filename = "!ROOT!/final-dump/disjunction.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"disjunction.in<0>"(i64 %"e##0", i64 %"lst##0") {
  %"tmp#6##0" = icmp ne i64 %"lst##0", 0
  br i1 %"tmp#6##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#13##0" = inttoptr i64 %"lst##0" to ptr
  %"h##0" = load i64, ptr %"tmp#13##0"
  %"tmp#4##0" = icmp eq i64 %"e##0", %"h##0"
  br i1 %"tmp#4##0", label %if.then.1, label %if.else.1
if.then.1:
  ret i1 1
if.else.1:
  %"tmp#14##0" = add i64 %"lst##0", 8
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  %"tmp#0##0" = load i64, ptr %"tmp#15##0"
  %"tmp#16##0" = tail call fastcc i1 @"disjunction.in<0>"(i64 %"e##0", i64 %"tmp#0##0")
  ret i1 %"tmp#16##0"
if.else.0:
  ret i1 0
}

define external fastcc i1 @"disjunction.member<0>"(i64 %"e##0", i64 %"lst##0") {
  %"tmp#4##0" = icmp ne i64 %"lst##0", 0
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#7##0" = inttoptr i64 %"lst##0" to ptr
  %"h##0" = load i64, ptr %"tmp#7##0"
  %"tmp#8##0" = add i64 %"lst##0", 8
  %"tmp#9##0" = inttoptr i64 %"tmp#8##0" to ptr
  %"t##0" = load i64, ptr %"tmp#9##0"
  %"tmp#2##0" = icmp eq i64 %"e##0", %"h##0"
  br i1 %"tmp#2##0", label %if.then.1, label %if.else.1
if.then.1:
  ret i1 1
if.else.1:
  %"tmp#10##0" = tail call fastcc i1 @"disjunction.member<0>"(i64 %"e##0", i64 %"t##0")
  ret i1 %"tmp#10##0"
if.else.0:
  ret i1 0
}

define external fastcc i64 @"disjunction.saturating_tail<0>"(i64 %"lst##0") {
  %"tmp#4##0" = icmp ne i64 %"lst##0", 0
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#5##0" = add i64 %"lst##0", 8
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  %"tmp#7##0" = load i64, ptr %"tmp#6##0"
  ret i64 %"tmp#7##0"
if.else.0:
  ret i64 0
}

define external fastcc i64 @"disjunction.saturating_tail2<0>"(i64 %"lst##0") {
  %"tmp#5##0" = icmp ne i64 %"lst##0", 0
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#6##0" = add i64 %"lst##0", 8
  %"tmp#7##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#8##0" = load i64, ptr %"tmp#7##0"
  ret i64 %"tmp#8##0"
if.else.0:
  ret i64 0
}

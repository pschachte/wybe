======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module sister_module
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use sister_module.m1
                    use sister_module.m2
                    use wybe
  resources       : 
  submodules      : sister_module.m1, sister_module.m2
  procs           : 

proc baz > {inline} (0 calls)
0: sister_module.baz<0>
baz(i##0:wybe.int, ?j##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    sister_module.m1.foo<0>(~i##0:wybe.int, ?j##0:wybe.int) #0 @sister_module:nn:nn


proc buzz > {inline} (0 calls)
0: sister_module.buzz<0>
buzz(i##0:wybe.int, ?j##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    sister_module.m2.bar<0>(~i##0:wybe.int, ?j##0:wybe.int) #0 @sister_module:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'sister_module'

source_filename = "!ROOT!/final-dump/sister_module.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i64 @"sister_module.baz<0>"(i64 %"i##0") {
  %"tmp#0##0" = tail call fastcc i64 @"sister_module.m1.foo<0>"(i64 %"i##0")
  ret i64 %"tmp#0##0"
}

define external fastcc i64 @"sister_module.buzz<0>"(i64 %"i##0") {
  %"tmp#0##0" = tail call fastcc i64 @"sister_module.m2.bar<0>"(i64 %"i##0")
  ret i64 %"tmp#0##0"
}

--------------------------------------------------
 Module sister_module.m1
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : sister_module.m1.foo<0>
  imports         : use sister_module
                    use wybe
  resources       : 
  procs           : 

proc foo > public {inline} (0 calls)
0: sister_module.m1.foo<0>
foo(i##0:wybe.int, ?j##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~i##0:wybe.int, 1:wybe.int, ?j##0:wybe.int) @sister_module:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'sister_module.m1'

source_filename = "!ROOT!/final-dump/sister_module.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i64 @"sister_module.m1.foo<0>"(i64 %"i##0") {
  %"tmp#3##0" = add i64 %"i##0", 1
  ret i64 %"tmp#3##0"
}

--------------------------------------------------
 Module sister_module.m2
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : sister_module.m2.bar<0>
  imports         : use sister_module
                    use wybe
  resources       : 
  procs           : 

proc bar > public {inline} (0 calls)
0: sister_module.m2.bar<0>
bar(i##0:wybe.int, ?j##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~i##0:wybe.int, 1:wybe.int, ?k##0:wybe.int) @sister_module:nn:nn
    sister_module.m1.foo<0>(~k##0:wybe.int, ?j##0:wybe.int) #2 @sister_module:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'sister_module.m2'

source_filename = "!ROOT!/final-dump/sister_module.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i64 @"sister_module.m2.bar<0>"(i64 %"i##0") {
  %"k##0" = add i64 %"i##0", 1
  %"tmp#2##0" = tail call fastcc i64 @"sister_module.m1.foo<0>"(i64 %"k##0")
  ret i64 %"tmp#2##0"
}

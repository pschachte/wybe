======================================================================
AFTER EVERYTHING:
 Module io_flow_ok
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : io_flow_ok.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: io_flow_ok.<0>
(io##0:wybe.phantom, ?io##3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.string.print_string<0>("hello world!":wybe.string, ~#io##0:wybe.phantom, ?tmp#2##0:wybe.phantom) #6 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#2##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
    io_flow_ok.unknown<0>(?tmp#0##0:wybe.bool) #1 @io_flow_ok:nn:nn
    case ~tmp#0##0:wybe.bool of
    0:
        wybe.string.print_string<0>("That's odd!":wybe.string, ~#io##1:wybe.phantom, ?tmp#5##0:wybe.phantom) #7 @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
        wybe.string.print_string<0>("hello world!":wybe.string, ~#io##2:wybe.phantom, ?tmp#7##0:wybe.phantom) #8 @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?#io##3:wybe.phantom) @io:nn:nn

    1:
        wybe.string.print_string<0>("OK":wybe.string, ~#io##1:wybe.phantom, ?tmp#5##0:wybe.phantom) #9 @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
        wybe.string.print_string<0>("hello world!":wybe.string, ~#io##2:wybe.phantom, ?tmp#7##0:wybe.phantom) #10 @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?#io##3:wybe.phantom) @io:nn:nn



aok > {inline} (5 calls)
0: io_flow_ok.aok<0>
aok(io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.string.print_string<0>("hello world!":wybe.string, ~#io##0:wybe.phantom, ?tmp#2##0:wybe.phantom) #1 @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#2##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn


unknown > {noinline} (3 calls)
0: io_flow_ok.unknown<0>
unknown(?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'io_flow_ok'


 


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


@io_flow_ok.10 =    constant {i64, i64} { i64 12, i64 ptrtoint ([?? x i8]* @io_flow_ok.9 to i64) }


@io_flow_ok.9 =    constant [?? x i8] c"hello world!\00"


@io_flow_ok.8 =    constant {i64, i64} { i64 11, i64 ptrtoint ([?? x i8]* @io_flow_ok.7 to i64) }


@io_flow_ok.7 =    constant [?? x i8] c"That's odd!\00"


@io_flow_ok.6 =    constant {i64, i64} { i64 12, i64 ptrtoint ([?? x i8]* @io_flow_ok.5 to i64) }


@io_flow_ok.5 =    constant [?? x i8] c"hello world!\00"


@io_flow_ok.4 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @io_flow_ok.3 to i64) }


@io_flow_ok.3 =    constant [?? x i8] c"OK\00"


@io_flow_ok.2 =    constant {i64, i64} { i64 12, i64 ptrtoint ([?? x i8]* @io_flow_ok.1 to i64) }


@io_flow_ok.1 =    constant [?? x i8] c"hello world!\00"


@io_flow_ok.12 =    constant {i64, i64} { i64 12, i64 ptrtoint ([?? x i8]* @io_flow_ok.11 to i64) }


@io_flow_ok.11 =    constant [?? x i8] c"hello world!\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"io_flow_ok.<0>"()    {
entry:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @io_flow_ok.2, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  %"1#tmp#0##0" = tail call fastcc  i1  @"io_flow_ok.unknown<0>"()  
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @io_flow_ok.4, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @io_flow_ok.6, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @io_flow_ok.8, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @io_flow_ok.10, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"io_flow_ok.aok<0>"()    {
entry:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @io_flow_ok.12, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i1 @"io_flow_ok.unknown<0>"()    {
entry:
  ret i1 1 
}

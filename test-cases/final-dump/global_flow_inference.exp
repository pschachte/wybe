======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module global_flow_inference
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use wybe
  resources       : res: fromList [(global_flow_inference.res,wybe.int = 1 @global_flow_inference:nn:nn @global_flow_inference:nn:nn)]
  procs           : 

proc higher_order_branch > {noinline} (0 calls)
0: global_flow_inference.higher_order_branch<0>
higher_order_branch(b##0:wybe.bool, f##0:{resource}() <{}; {}; {1}>)<{}; {}; {1}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~b##0:wybe.bool of
    0:

    1:
        ~f##0:{resource}() #0 @global_flow_inference:nn:nn



proc higher_order_branch_no_use > {noinline} (0 calls)
0: global_flow_inference.higher_order_branch_no_use<0>
higher_order_branch_no_use(b##0:wybe.bool, f##0:{resource}() <{}; {}; {1}>)<{}; {}; {1}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~b##0:wybe.bool of
    0:

    1:
        ~f##0:{resource}() #0 @global_flow_inference:nn:nn



proc higher_order_branch_use > {noinline} (0 calls)
0: global_flow_inference.higher_order_branch_use<0>
higher_order_branch_use(b##0:wybe.bool, f##0:{resource}() <{}; {}; {1}>)<{<<global_flow_inference.res>>}; {<<global_flow_inference.res>>}; {1}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~b##0:wybe.bool of
    0:
        foreign lpvm store(1:wybe.int, <<global_flow_inference.res>>:wybe.int) @global_flow_inference:nn:nn

    1:
        ~f##0:{resource}() #0 @global_flow_inference:nn:nn



proc higher_order_in > {noinline} (0 calls)
0: global_flow_inference.higher_order_in<0>
higher_order_in(f##0:{resource}(wybe.int) <{}; {}; {0}>)<{<<global_flow_inference.res>>}; {}; {0}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<global_flow_inference.res>>:wybe.int, ?%res##0:wybe.int) @global_flow_inference:nn:nn
    ~f##0:{resource}(wybe.int)(~res##0:wybe.int) #0 @global_flow_inference:nn:nn


proc higher_order_inout > {noinline} (0 calls)
0: global_flow_inference.higher_order_inout<0>
higher_order_inout(f##0:{resource}(wybe.int) <{}; {}; {0}>)<{<<global_flow_inference.res>>}; {<<global_flow_inference.res>>}; {0}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<global_flow_inference.res>>:wybe.int, ?%res##0:wybe.int) @global_flow_inference:nn:nn
    ~f##0:{resource}(wybe.int)(~res##0:wybe.int) #0 @global_flow_inference:nn:nn
    foreign lpvm store(1:wybe.int, <<global_flow_inference.res>>:wybe.int) @global_flow_inference:nn:nn


proc higher_order_only_out > {noinline} (0 calls)
0: global_flow_inference.higher_order_only_out<0>
higher_order_only_out(f##0:{resource}(wybe.int) <{}; {}; {0}>)<{}; {<<global_flow_inference.res>>}; {0}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(1:wybe.int, <<global_flow_inference.res>>:wybe.int) @global_flow_inference:nn:nn
    ~f##0:{resource}(wybe.int)(1:wybe.int) #0 @global_flow_inference:nn:nn


proc higher_order_out > {noinline} (0 calls)
0: global_flow_inference.higher_order_out<0>
higher_order_out(f##0:{resource}(?wybe.int) <{}; {}; {0}>)<{}; {<<global_flow_inference.res>>}; {0}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~f##0:{resource}(?wybe.int)(?res##0:wybe.int) #0 @global_flow_inference:nn:nn
    foreign lpvm store(~%res##0:wybe.int, <<global_flow_inference.res>>:wybe.int) @global_flow_inference:nn:nn


proc inout > {noinline} (0 calls)
0: global_flow_inference.inout<0>
inout(b##0:wybe.bool)<{<<global_flow_inference.res>>}; {<<global_flow_inference.res>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~b##0:wybe.bool of
    0:

    1:
        global_flow_inference.only_out<0>(1:wybe.bool)<{}; {<<global_flow_inference.res>>}; {}> #0 @global_flow_inference:nn:nn



proc only_in > {noinline} (0 calls)
0: global_flow_inference.only_in<0>
only_in(?x##0:wybe.int)<{<<global_flow_inference.res>>}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<global_flow_inference.res>>:wybe.int, ?%x##0:wybe.int) @global_flow_inference:nn:nn


proc only_out > {noinline} (1 calls)
0: global_flow_inference.only_out<0>
only_out(b##0:wybe.bool)<{}; {<<global_flow_inference.res>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~b##0:wybe.bool of
    0:
        foreign lpvm store(3:wybe.int, <<global_flow_inference.res>>:wybe.int) @global_flow_inference:nn:nn

    1:
        foreign lpvm store(2:wybe.int, <<global_flow_inference.res>>:wybe.int) @global_flow_inference:nn:nn



proc rec_out_only1 > {noinline} (1 calls)
0: global_flow_inference.rec_out_only1<0>
rec_out_only1()<{}; {<<global_flow_inference.res>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    global_flow_inference.rec_out_only2<0><{}; {<<global_flow_inference.res>>}; {}> #0 @global_flow_inference:nn:nn


proc rec_out_only2 > {noinline} (1 calls)
0: global_flow_inference.rec_out_only2<0>
rec_out_only2()<{}; {<<global_flow_inference.res>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    global_flow_inference.rec_out_only1<0><{}; {<<global_flow_inference.res>>}; {}> #0 @global_flow_inference:nn:nn


proc rec_out_only_notail1 > {noinline} (1 calls)
0: global_flow_inference.rec_out_only_notail1<0>
rec_out_only_notail1()<{}; {<<global_flow_inference.res>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(1:wybe.int, <<global_flow_inference.res>>:wybe.int) @global_flow_inference:nn:nn


proc rec_out_only_notail2 > {noinline} (1 calls)
0: global_flow_inference.rec_out_only_notail2<0>
rec_out_only_notail2()<{}; {<<global_flow_inference.res>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(1:wybe.int, <<global_flow_inference.res>>:wybe.int) @global_flow_inference:nn:nn


proc still_only_in > {noinline} (0 calls)
0: global_flow_inference.still_only_in<0>
still_only_in(b##0:wybe.bool, ?x##0:wybe.int)<{<<global_flow_inference.res>>}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~b##0:wybe.bool of
    0:
        foreign lpvm load(<<global_flow_inference.res>>:wybe.int, ?%x##0:wybe.int) @global_flow_inference:nn:nn

    1:
        foreign llvm move(0:wybe.int, ?x##0:wybe.int) @global_flow_inference:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'global_flow_inference'

source_filename = "!ROOT!/final-dump/global_flow_inference.wybe"
target triple    ????


declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)
@"resource#global_flow_inference.res" = global i64 undef

define external fastcc void @"global_flow_inference.higher_order_branch<0>"(i1 %"b##0", i64 %"f##0") {
  br i1 %"b##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"f##0" to ptr
  %"tmp#0##0" = load ptr, ptr %"tmp#1##0"
  tail call fastcc void %"tmp#0##0"(i64 %"f##0")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"global_flow_inference.higher_order_branch_no_use<0>"(i1 %"b##0", i64 %"f##0") {
  br i1 %"b##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"f##0" to ptr
  %"tmp#0##0" = load ptr, ptr %"tmp#1##0"
  tail call fastcc void %"tmp#0##0"(i64 %"f##0")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"global_flow_inference.higher_order_branch_use<0>"(i1 %"b##0", i64 %"f##0") {
  br i1 %"b##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#1##0" = inttoptr i64 %"f##0" to ptr
  %"tmp#0##0" = load ptr, ptr %"tmp#1##0"
  tail call fastcc void %"tmp#0##0"(i64 %"f##0")
  ret void
if.else.0:
  store i64 1, ptr @"resource#global_flow_inference.res"
  ret void
}

define external fastcc void @"global_flow_inference.higher_order_in<0>"(i64 %"f##0") {
  %"res##0" = load i64, ptr @"resource#global_flow_inference.res"
  %"tmp#1##0" = inttoptr i64 %"f##0" to ptr
  %"tmp#0##0" = load ptr, ptr %"tmp#1##0"
  tail call fastcc void %"tmp#0##0"(i64 %"f##0", i64 %"res##0")
  ret void
}

define external fastcc void @"global_flow_inference.higher_order_inout<0>"(i64 %"f##0") {
  %"res##0" = load i64, ptr @"resource#global_flow_inference.res"
  %"tmp#1##0" = inttoptr i64 %"f##0" to ptr
  %"tmp#0##0" = load ptr, ptr %"tmp#1##0"
  tail call fastcc void %"tmp#0##0"(i64 %"f##0", i64 %"res##0")
  store i64 1, ptr @"resource#global_flow_inference.res"
  ret void
}

define external fastcc void @"global_flow_inference.higher_order_only_out<0>"(i64 %"f##0") {
  store i64 1, ptr @"resource#global_flow_inference.res"
  %"tmp#1##0" = inttoptr i64 %"f##0" to ptr
  %"tmp#0##0" = load ptr, ptr %"tmp#1##0"
  tail call fastcc void %"tmp#0##0"(i64 %"f##0", i64 1)
  ret void
}

define external fastcc void @"global_flow_inference.higher_order_out<0>"(i64 %"f##0") {
  %"tmp#1##0" = inttoptr i64 %"f##0" to ptr
  %"tmp#0##0" = load ptr, ptr %"tmp#1##0"
  %"res##0" = tail call fastcc i64 %"tmp#0##0"(i64 %"f##0")
  store i64 %"res##0", ptr @"resource#global_flow_inference.res"
  ret void
}

define external fastcc void @"global_flow_inference.inout<0>"(i1 %"b##0") {
  br i1 %"b##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"global_flow_inference.only_out<0>"(i1 1)
  ret void
if.else.0:
  ret void
}

define external fastcc i64 @"global_flow_inference.only_in<0>"() {
  %"tmp#0##0" = load i64, ptr @"resource#global_flow_inference.res"
  ret i64 %"tmp#0##0"
}

define external fastcc void @"global_flow_inference.only_out<0>"(i1 %"b##0") {
  br i1 %"b##0", label %if.then.0, label %if.else.0
if.then.0:
  store i64 2, ptr @"resource#global_flow_inference.res"
  ret void
if.else.0:
  store i64 3, ptr @"resource#global_flow_inference.res"
  ret void
}

define external fastcc void @"global_flow_inference.rec_out_only1<0>"() {
  tail call fastcc void @"global_flow_inference.rec_out_only2<0>"()
  ret void
}

define external fastcc void @"global_flow_inference.rec_out_only2<0>"() {
  tail call fastcc void @"global_flow_inference.rec_out_only1<0>"()
  ret void
}

define external fastcc void @"global_flow_inference.rec_out_only_notail1<0>"() {
  store i64 1, ptr @"resource#global_flow_inference.res"
  ret void
}

define external fastcc void @"global_flow_inference.rec_out_only_notail2<0>"() {
  store i64 1, ptr @"resource#global_flow_inference.res"
  ret void
}

define external fastcc i64 @"global_flow_inference.still_only_in<0>"(i1 %"b##0") {
  br i1 %"b##0", label %if.then.0, label %if.else.0
if.then.0:
  ret i64 0
if.else.0:
  %"tmp#0##0" = load i64, ptr @"resource#global_flow_inference.res"
  ret i64 %"tmp#0##0"
}

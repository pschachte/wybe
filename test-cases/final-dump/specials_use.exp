======================================================================
AFTER EVERYTHING:
 Module specials
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : specials.show_column<0>
                    specials.show_file<0>
                    specials.show_full_file<0>
                    specials.show_full_location<0>
                    specials.show_line<0>
                    specials.show_location<0>
  imports         : use wybe
  resources       : 
  procs           : 

show_column > public {inline} (0 calls)
0: specials.show_column<0>
show_column(call_source_column_number##0:wybe.int, io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_int(~call_source_column_number##0:wybe.int, ~#io##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#2##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn


show_file > public {inline} (0 calls)
0: specials.show_file<0>
show_file(call_source_file_name##0:wybe.c_string, io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string(~call_source_file_name##0:wybe.c_string, ~#io##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#2##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn


show_full_file > public {inline} (0 calls)
0: specials.show_full_file<0>
show_full_file(call_source_file_full_name##0:wybe.c_string, io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string(~call_source_file_full_name##0:wybe.c_string, ~#io##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#2##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn


show_full_location > public {inline} (0 calls)
0: specials.show_full_location<0>
show_full_location(call_source_full_location##0:wybe.c_string, io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string(~call_source_full_location##0:wybe.c_string, ~#io##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#2##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn


show_line > public {inline} (0 calls)
0: specials.show_line<0>
show_line(call_source_line_number##0:wybe.int, io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_int(~call_source_line_number##0:wybe.int, ~#io##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#2##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn


show_location > public {inline} (0 calls)
0: specials.show_location<0>
show_location(call_source_location##0:wybe.c_string, io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string(~call_source_location##0:wybe.c_string, ~#io##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#2##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'specials'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @print_string(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"specials.show_column<0>"(i64  %"call_source_column_number##0")    {
entry:
  tail call ccc  void  @print_int(i64  %"call_source_column_number##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"specials.show_file<0>"(i64  %"call_source_file_name##0")    {
entry:
  tail call ccc  void  @print_string(i64  %"call_source_file_name##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"specials.show_full_file<0>"(i64  %"call_source_file_full_name##0")    {
entry:
  tail call ccc  void  @print_string(i64  %"call_source_file_full_name##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"specials.show_full_location<0>"(i64  %"call_source_full_location##0")    {
entry:
  tail call ccc  void  @print_string(i64  %"call_source_full_location##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"specials.show_line<0>"(i64  %"call_source_line_number##0")    {
entry:
  tail call ccc  void  @print_int(i64  %"call_source_line_number##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"specials.show_location<0>"(i64  %"call_source_location##0")    {
entry:
  tail call ccc  void  @print_string(i64  %"call_source_location##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module specials_use
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : specials_use.<0>
  imports         : use specials
                    use wybe
  resources       : 
  procs           : 

*main* > public {impure} (0 calls)
0: specials_use.<0>
(io##0:wybe.phantom, ?io##6:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string(c"specials_use":wybe.c_string, ~#io##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#2##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
    foreign c print_string(c"!ROOT!/final-dump/specials_use.wybe":wybe.c_string, ~#io##1:wybe.phantom, ?tmp#5##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    foreign c print_int(5:wybe.int, ~#io##2:wybe.phantom, ?tmp#8##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#8##0:wybe.phantom, ?#io##3:wybe.phantom) @io:nn:nn
    foreign c print_int(2:wybe.int, ~#io##3:wybe.phantom, ?tmp#11##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?#io##4:wybe.phantom) @io:nn:nn
    foreign c print_string(c"specials_use:7:2":wybe.c_string, ~#io##4:wybe.phantom, ?tmp#14##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#14##0:wybe.phantom, ?#io##5:wybe.phantom) @io:nn:nn
    foreign c print_string(c"!ROOT!/final-dump/specials_use.wybe:8:2":wybe.c_string, ~#io##5:wybe.phantom, ?tmp#17##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#17##0:wybe.phantom, ?#io##6:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'specials_use'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


declare external ccc  void @print_int(i64)    


@specials_use.7 =    constant [?? x i8] c"!ROOT!/final-dump/specials_use.wybe:8:2\00"


@specials_use.5 =    constant [?? x i8] c"specials_use:7:2\00"


@specials_use.3 =    constant [?? x i8] c"!ROOT!/final-dump/specials_use.wybe\00"


@specials_use.1 =    constant [?? x i8] c"specials_use\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"specials_use.<0>"()    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @specials_use.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  %4 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @specials_use.3, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %4)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  5)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  2)  
  tail call ccc  void  @putchar(i8  10)  
  %6 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @specials_use.5, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %6)  
  tail call ccc  void  @putchar(i8  10)  
  %8 = ptrtoint i8* getelementptr inbounds ([?? x i8], [?? x i8]* @specials_use.7, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %8)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

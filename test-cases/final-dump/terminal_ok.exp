======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module terminal_ok
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : terminal_ok.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: terminal_ok.<0>
()<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    terminal_ok.exit_bool<0>(0:wybe.bool) #1 @terminal_ok:nn:nn


proc exit_bool > {terminal,semipure} (1 calls)
0: terminal_ok.exit_bool<0>
exit_bool(b##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~b##0:wybe.bool of
    0:
        foreign c {terminal,impure} exit(0:wybe.int) @terminal_ok:nn:nn

    1:
        foreign c {terminal,impure} exit(1:wybe.int) @terminal_ok:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'terminal_ok'

source_filename = "!ROOT!/final-dump/terminal_ok.wybe"
target triple    ????


declare external ccc void @exit(i64)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"terminal_ok.<0>"() {
  tail call fastcc void @"terminal_ok.exit_bool<0>"(i1 0)
  ret void
}

define external fastcc void @"terminal_ok.exit_bool<0>"(i1 %"b##0") {
  br i1 %"b##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @exit(i64 1)
  ret void
if.else.0:
  call ccc void @exit(i64 0)
  ret void
}

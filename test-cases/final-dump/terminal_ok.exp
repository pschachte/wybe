======================================================================
AFTER EVERYTHING:
 Module terminal_ok
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : terminal_ok.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,impure} (0 calls)
0: terminal_ok.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    terminal_ok.exit_bool<0>(0:wybe.bool) #1 @terminal_ok:nn:nn


exit_bool > {terminal,semipure} (1 calls)
0: terminal_ok.exit_bool<0>
exit_bool(b##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    case ~b##0:wybe.bool of
    0:
        foreign c {terminal,impure} exit(0:wybe.int) @terminal_ok:nn:nn

    1:
        foreign c {terminal,impure} exit(1:wybe.int) @terminal_ok:nn:nn


  LLVM code       :

; ModuleID = 'terminal_ok'


 


declare external ccc  void @exit(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"terminal_ok.<0>"()    {
entry:
  tail call fastcc  void  @"terminal_ok.exit_bool<0>"(i1  0)  
  ret void 
}


define external fastcc  void @"terminal_ok.exit_bool<0>"(i1  %"b##0")    {
entry:
  br i1 %"b##0", label %if.then, label %if.else 
if.then:
  tail call ccc  void  @exit(i64  1)  
  ret void 
if.else:
  tail call ccc  void  @exit(i64  0)  
  ret void 
}

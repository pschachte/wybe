======================================================================
AFTER EVERYTHING:
 Module simple_loop
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : simple_loop.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,impure} (0 calls)
0: simple_loop.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    simple_loop.gen#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @simple_loop:nn:nn


gen#1 > (2 calls)
0: simple_loop.gen#1<0>
gen#1()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @char:nn:nn
    foreign c read_char(?c##0:wybe.char, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @char:nn:nn
    foreign lpvm store(%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn
    foreign llvm icmp_ne(c##0:wybe.char, 'a':wybe.char, ?tmp#0##0:wybe.bool) @char:nn:nn
    case ~tmp#0##0:wybe.bool of
    0:

    1:
        foreign c putchar(~c##0:wybe.char, ~tmp#2##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @char:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn
        simple_loop.gen#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @simple_loop:nn:nn


  LLVM code       :

; ModuleID = 'simple_loop'


 


declare external ccc  void @putchar(i8)    


declare external ccc  i8 @read_char()    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"simple_loop.<0>"()    {
entry:
  tail call fastcc  void  @"simple_loop.gen#1<0>"()  
  ret void 
}


define external fastcc  void @"simple_loop.gen#1<0>"()    {
entry:
  %"1#c##0" = tail call ccc  i8  @read_char()  
  %"1#tmp#0##0" = icmp ne i8 %"1#c##0", 97 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  tail call ccc  void  @putchar(i8  %"1#c##0")  
  tail call fastcc  void  @"simple_loop.gen#1<0>"()  
  ret void 
if.else:
  ret void 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module simple_loop
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : simple_loop.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: simple_loop.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    simple_loop.#cont#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @simple_loop:nn:nn


proc #cont#1 > {semipure} (2 calls)
0: simple_loop.#cont#1<0>
#cont#1()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @simple_loop:nn:nn
    foreign c read_char(?c##0:wybe.char, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @simple_loop:nn:nn
    foreign lpvm store(%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @simple_loop:nn:nn
    foreign llvm icmp_ne(c##0:wybe.char, 'a':wybe.char, ?tmp#0##0:wybe.bool) @simple_loop:nn:nn
    case ~tmp#0##0:wybe.bool of
    0:

    1:
        foreign c putchar(~c##0:wybe.char, ~tmp#2##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @simple_loop:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @simple_loop:nn:nn
        simple_loop.#cont#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @simple_loop:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'simple_loop'

source_filename = "!ROOT!/final-dump/simple_loop.wybe"
target triple    ????


declare external ccc void @putchar(i8)
declare external ccc i8 @read_char()
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"simple_loop.<0>"() {
  tail call fastcc void @"simple_loop.#cont#1<0>"()
  ret void
}

define external fastcc void @"simple_loop.#cont#1<0>"() {
  %"c##0" = call ccc i8 @read_char()
  %"tmp#0##0" = icmp ne i8 %"c##0", 97
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @putchar(i8 %"c##0")
  tail call fastcc void @"simple_loop.#cont#1<0>"()
  ret void
if.else.0:
  ret void
}

======================================================================
AFTER EVERYTHING:
 Module early_error
  public submods  : 
  public types    : 
  public resources: 
  public procs    : early_error.<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public {inline} (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_string("should print this":wybe.string, ~#io#0:wybe.phantom, ?tmp$2#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$2#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign c {impure} puts("should print this error message":wybe.string) @early_error:6:5
    foreign c {terminal,semipure} exit(1:wybe.int) @early_error:7:5


my_error > {terminal,inline,semipure} (1 calls)
0: my_error(msg#0:wybe.string):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c {impure} puts(~msg#0:wybe.string) @early_error:6:5
    foreign c {terminal,semipure} exit(1:wybe.int) @early_error:7:5

  LLVM code       :

; ModuleID = 'early_error'


 


declare external ccc  void @exit(i64)    


declare external ccc  void @puts(i64)    


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_string(i64)    


@early_error.3 =    constant [32 x i8] c"should print this error message\00"


@early_error.1 =    constant [18 x i8] c"should print this\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"early_error.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  %2 = ptrtoint i8* getelementptr inbounds ([18 x i8], [18 x i8]* @early_error.1, i32 0, i32 0) to i64 
  tail call ccc  void  @print_string(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  %4 = ptrtoint i8* getelementptr inbounds ([32 x i8], [32 x i8]* @early_error.3, i32 0, i32 0) to i64 
  tail call ccc  void  @puts(i64  %4)  
  tail call ccc  void  @exit(i64  1)  
  ret void 
}


define external fastcc  void @"early_error.my_error<0>"(i64  %"msg#0")    {
entry:
  tail call ccc  void  @puts(i64  %"msg#0")  
  tail call ccc  void  @exit(i64  1)  
  ret void 
}

use position

pub def replicate2(p1:position, ?p2:position) use !io {
    ?pp = position(0,0)
    !print("some noise...")
    !println(pp^x)

    ?p2 = p1
}

# Expected Alias Pairs: [(p1#0,p3#0)]
pub def replicate1(p1:position, ?p2:position, ?p3:position) use !io {
    !replicate2(p1, ?p2)
    !replicate2(p2, ?p3)
    x(!p2, 22)
}

?p1 = position(10,10)
!replicate1(p1, ?p2, ?p3)

!println("--- After calling replicate1: ")
!print("expect p1(10,10):")
!printPosition(p1)
!print("expect p2(22,10):")
!printPosition(p2)
!print("expect p3(10,10):")
!printPosition(p3)

# p2 CAN be destructively updated because p2 is not aliased
x(!p2, 2222222)
!println("--- After calling x(!p2, 2222222): ")
!print("expect p2(2222222,10):")
!printPosition(p2)

# p1 is non-destructively updated (because p1 is aliased to p3)
# TODO: Should compiler also check if p1's aliased variable, which is p3, is dead now?
# If p1's shared data structures are all dead, then it's safe to destructively
# update p1!
# However, compiler doesn't know p3 is dead...

x(!p1, 11) # Non-destructive

!println("--- After calling x(!p1, 11): ")
!print("expect p1(11,10):")
!printPosition(p1)
!print("expect p3(10,10):")
!printPosition(p3)

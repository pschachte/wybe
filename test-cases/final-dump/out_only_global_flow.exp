======================================================================
AFTER EVERYTHING:
 Module out_only_global_flow
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : out_only_global_flow.<0>
  imports         : use wybe
  resources       : res: fromList [(out_only_global_flow.res,wybe.int @out_only_global_flow:nn:nn)]
  procs           : 

module top-level code > public {impure} (0 calls)
0: out_only_global_flow.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<out_only_global_flow.res>>:wybe.int, ?%tmp#0##0:wybe.int) @out_only_global_flow:nn:nn
    out_only_global_flow.out<0><{}; {<<out_only_global_flow.res>>}> #0 @out_only_global_flow:nn:nn
    foreign lpvm load(<<out_only_global_flow.res>>:wybe.int, ?%res##1:wybe.int) @out_only_global_flow:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~res##1:wybe.int, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#4##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#0##0:wybe.int, <<out_only_global_flow.res>>:wybe.int) @out_only_global_flow:nn:nn


out > {noinline} (1 calls)
0: out_only_global_flow.out<0>
out()<{}; {<<out_only_global_flow.res>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm store(11:wybe.int, <<out_only_global_flow.res>>:wybe.int) @out_only_global_flow:nn:nn

  LLVM code       :

; ModuleID = 'out_only_global_flow'


 


@"resource#out_only_global_flow.res" =    global i64 undef


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"out_only_global_flow.<0>"()    {
entry:
  %1 = load  i64, i64* @"resource#out_only_global_flow.res" 
  tail call fastcc  void  @"out_only_global_flow.out<0>"()  
  %2 = load  i64, i64* @"resource#out_only_global_flow.res" 
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  10)  
  store  i64 %1, i64* @"resource#out_only_global_flow.res" 
  ret void 
}


define external fastcc  void @"out_only_global_flow.out<0>"()    {
entry:
  store  i64 11, i64* @"resource#out_only_global_flow.res" 
  ret void 
}

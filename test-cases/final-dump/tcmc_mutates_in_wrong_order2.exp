======================================================================
AFTER EVERYTHING:
 Module tcmc_mutates_in_wrong_order2
  representation  : address
  public submods  : 
  public resources: 
  public procs    : tcmc_mutates_in_wrong_order2.<0>
                    tcmc_mutates_in_wrong_order2.=<0>
                    tcmc_mutates_in_wrong_order2.snoc<0>
                    tcmc_mutates_in_wrong_order2.snoc<1>
                    tcmc_mutates_in_wrong_order2.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: tcmc_mutates_in_wrong_order2.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#7##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
    foreign lpvm mutate(~tmp#7##0:tcmc_mutates_in_wrong_order2, ?tmp#8##0:tcmc_mutates_in_wrong_order2, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
    foreign lpvm mutate(~tmp#8##0:tcmc_mutates_in_wrong_order2, ?tmp#9##0:tcmc_mutates_in_wrong_order2, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
    foreign lpvm mutate(~tmp#9##0:tcmc_mutates_in_wrong_order2, ?tmp#0##0:tcmc_mutates_in_wrong_order2, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
    foreign lpvm alloc(24:wybe.int, ?tmp#13##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
    foreign lpvm mutate(~tmp#13##0:tcmc_mutates_in_wrong_order2, ?tmp#14##0:tcmc_mutates_in_wrong_order2, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
    foreign lpvm mutate(~tmp#14##0:tcmc_mutates_in_wrong_order2, ?tmp#15##0:tcmc_mutates_in_wrong_order2, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 2:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
    foreign lpvm mutate(~tmp#15##0:tcmc_mutates_in_wrong_order2, ?tmp#2##0:tcmc_mutates_in_wrong_order2, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 3:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
    tcmc_mutates_in_wrong_order2.append<0>(~tmp#0##0:tcmc_mutates_in_wrong_order2, tmp#2##0:tcmc_mutates_in_wrong_order2, outByReference x3##0:tcmc_mutates_in_wrong_order2) #4 @tcmc_mutates_in_wrong_order2:nn:nn
    tcmc_mutates_in_wrong_order2.print_list<0>(~tmp#2##0:tcmc_mutates_in_wrong_order2)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @tcmc_mutates_in_wrong_order2:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#16##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#16##0:wybe.phantom, ?tmp#17##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#17##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    tcmc_mutates_in_wrong_order2.print_list<0>(~x3##0:tcmc_mutates_in_wrong_order2)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @tcmc_mutates_in_wrong_order2:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#18##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#19##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


= > public (6 calls)
0: tcmc_mutates_in_wrong_order2.=<0>
=(#left##0:tcmc_mutates_in_wrong_order2, #right##0:tcmc_mutates_in_wrong_order2, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:tcmc_mutates_in_wrong_order2, ~#right##0:tcmc_mutates_in_wrong_order2, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:tcmc_mutates_in_wrong_order2, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#tail##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign lpvm access(#left##0:tcmc_mutates_in_wrong_order2, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#head1##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign lpvm access(~#left##0:tcmc_mutates_in_wrong_order2, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#head2##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
        case ~tmp#10##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:tcmc_mutates_in_wrong_order2, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#tail##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
            foreign lpvm access(#right##0:tcmc_mutates_in_wrong_order2, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#head1##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
            foreign lpvm access(~#right##0:tcmc_mutates_in_wrong_order2, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#head2##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
            tcmc_mutates_in_wrong_order2.=<0>(~#left#tail##0:tcmc_mutates_in_wrong_order2, ~#right#tail##0:tcmc_mutates_in_wrong_order2, ?tmp#4##0:wybe.bool) #2
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#head1##0:wybe.int, ~#right#head1##0:wybe.int, ?tmp#5##0:wybe.bool) @int:nn:nn
                case ~tmp#5##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~#left#head2##0:wybe.int, ~#right#head2##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn






append > (2 calls)
0: tcmc_mutates_in_wrong_order2.append<0>
append(a##0:tcmc_mutates_in_wrong_order2, b##0:tcmc_mutates_in_wrong_order2, outByReference result##0:tcmc_mutates_in_wrong_order2)<{}; {}>:
  AliasPairs: [(a##0,b##0),(a##0,result##0),(b##0,result##0)]
  InterestingCallProperties: []
    foreign llvm icmp_ne(a##0:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.bool)
    case ~tmp#3##0:wybe.bool of
    0:
        foreign llvm move(~b##0:tcmc_mutates_in_wrong_order2, ?result##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn

    1:
        foreign lpvm access(a##0:tcmc_mutates_in_wrong_order2, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?t##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign lpvm access(~a##0:tcmc_mutates_in_wrong_order2, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?h##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign lpvm alloc(24:wybe.int, ?tmp#7##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign lpvm mutate(~tmp#7##0:tcmc_mutates_in_wrong_order2, ?tmp#8##0:tcmc_mutates_in_wrong_order2, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, h##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign lpvm mutate(~tmp#8##0:tcmc_mutates_in_wrong_order2, ?tmp#9##0:tcmc_mutates_in_wrong_order2, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~h##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
        tcmc_mutates_in_wrong_order2.append<0>(~b##0:tcmc_mutates_in_wrong_order2, ~t##0:tcmc_mutates_in_wrong_order2, outByReference t2##0:tcmc_mutates_in_wrong_order2) #1 @tcmc_mutates_in_wrong_order2:nn:nn
        foreign lpvm mutate(~tmp#9##0:tcmc_mutates_in_wrong_order2, ?result##0:tcmc_mutates_in_wrong_order2, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~takeReference t2##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn



head1 > {inline} (0 calls)
0: tcmc_mutates_in_wrong_order2.head1<0>
head1(#rec##0:tcmc_mutates_in_wrong_order2, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:tcmc_mutates_in_wrong_order2, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

head1 > {inline} (0 calls)
1: tcmc_mutates_in_wrong_order2.head1<1>
head1(#rec##0:tcmc_mutates_in_wrong_order2, ?#rec##1:tcmc_mutates_in_wrong_order2, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:tcmc_mutates_in_wrong_order2, ?#rec##1:tcmc_mutates_in_wrong_order2)

    1:
        foreign lpvm mutate(~#rec##0:tcmc_mutates_in_wrong_order2, ?#rec##1:tcmc_mutates_in_wrong_order2, 8:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



head2 > {inline} (0 calls)
0: tcmc_mutates_in_wrong_order2.head2<0>
head2(#rec##0:tcmc_mutates_in_wrong_order2, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:tcmc_mutates_in_wrong_order2, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

head2 > {inline} (0 calls)
1: tcmc_mutates_in_wrong_order2.head2<1>
head2(#rec##0:tcmc_mutates_in_wrong_order2, ?#rec##1:tcmc_mutates_in_wrong_order2, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:tcmc_mutates_in_wrong_order2, ?#rec##1:tcmc_mutates_in_wrong_order2)

    1:
        foreign lpvm mutate(~#rec##0:tcmc_mutates_in_wrong_order2, ?#rec##1:tcmc_mutates_in_wrong_order2, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



null > {inline} (2 calls)
0: tcmc_mutates_in_wrong_order2.null<0>
null(?#result##0:tcmc_mutates_in_wrong_order2)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:tcmc_mutates_in_wrong_order2, ?#result##0:tcmc_mutates_in_wrong_order2)


print_list > (3 calls)
0: tcmc_mutates_in_wrong_order2.print_list<0>
print_list(a##0:tcmc_mutates_in_wrong_order2)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(a##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool)
    case ~tmp#2##0:wybe.bool of
    0:
        wybe.string.print<0>("null":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @tcmc_mutates_in_wrong_order2:nn:nn

    1:
        foreign lpvm access(a##0:tcmc_mutates_in_wrong_order2, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tail##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign lpvm access(a##0:tcmc_mutates_in_wrong_order2, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?head##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign lpvm access(~a##0:tcmc_mutates_in_wrong_order2, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?head2##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
        wybe.string.print<0>("node(":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @tcmc_mutates_in_wrong_order2:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~head##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
        foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
        wybe.string.print<0>(",":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @tcmc_mutates_in_wrong_order2:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#7##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~head2##0:wybe.int, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @int:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
        wybe.string.print<0>(",":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @tcmc_mutates_in_wrong_order2:nn:nn
        tcmc_mutates_in_wrong_order2.print_list<0>(~tail##0:tcmc_mutates_in_wrong_order2)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6 @tcmc_mutates_in_wrong_order2:nn:nn
        wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @tcmc_mutates_in_wrong_order2:nn:nn



snoc > public {inline} (3 calls)
0: tcmc_mutates_in_wrong_order2.snoc<0>
snoc(tail##0:tcmc_mutates_in_wrong_order2, head1##0:wybe.int, head2##0:wybe.int, ?#result##0:tcmc_mutates_in_wrong_order2)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
    foreign lpvm mutate(~#rec##0:tcmc_mutates_in_wrong_order2, ?#rec##1:tcmc_mutates_in_wrong_order2, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~tail##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
    foreign lpvm mutate(~#rec##1:tcmc_mutates_in_wrong_order2, ?#rec##2:tcmc_mutates_in_wrong_order2, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~head1##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
    foreign lpvm mutate(~#rec##2:tcmc_mutates_in_wrong_order2, ?#result##0:tcmc_mutates_in_wrong_order2, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~head2##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
snoc > public {inline} (22 calls)
1: tcmc_mutates_in_wrong_order2.snoc<1>
snoc(?tail##0:tcmc_mutates_in_wrong_order2, ?head1##0:wybe.int, ?head2##0:wybe.int, #result##0:tcmc_mutates_in_wrong_order2, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:tcmc_mutates_in_wrong_order2, ?tail##0:tcmc_mutates_in_wrong_order2)
        foreign llvm move(undef:wybe.int, ?head1##0:wybe.int)
        foreign llvm move(undef:wybe.int, ?head2##0:wybe.int)

    1:
        foreign lpvm access(#result##0:tcmc_mutates_in_wrong_order2, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?tail##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign lpvm access(#result##0:tcmc_mutates_in_wrong_order2, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?head1##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign lpvm access(~#result##0:tcmc_mutates_in_wrong_order2, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?head2##0:wybe.int) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



tail > {inline} (0 calls)
0: tcmc_mutates_in_wrong_order2.tail<0>
tail(#rec##0:tcmc_mutates_in_wrong_order2, ?#result##0:tcmc_mutates_in_wrong_order2, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:tcmc_mutates_in_wrong_order2, ?#result##0:tcmc_mutates_in_wrong_order2)

    1:
        foreign lpvm access(~#rec##0:tcmc_mutates_in_wrong_order2, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

tail > {inline} (0 calls)
1: tcmc_mutates_in_wrong_order2.tail<1>
tail(#rec##0:tcmc_mutates_in_wrong_order2, ?#rec##1:tcmc_mutates_in_wrong_order2, #field##0:tcmc_mutates_in_wrong_order2, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:tcmc_mutates_in_wrong_order2, ?#rec##1:tcmc_mutates_in_wrong_order2)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:tcmc_mutates_in_wrong_order2, ?#rec##1:tcmc_mutates_in_wrong_order2, 0:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:tcmc_mutates_in_wrong_order2) @tcmc_mutates_in_wrong_order2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: tcmc_mutates_in_wrong_order2.~=<0>
~=(#left##0:tcmc_mutates_in_wrong_order2, #right##0:tcmc_mutates_in_wrong_order2, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    tcmc_mutates_in_wrong_order2.=<0>(~#left##0:tcmc_mutates_in_wrong_order2, ~#right##0:tcmc_mutates_in_wrong_order2, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'tcmc_mutates_in_wrong_order2'


 


@tcmc_mutates_in_wrong_order2.3 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @tcmc_mutates_in_wrong_order2.2 to i64) }


@tcmc_mutates_in_wrong_order2.5 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @tcmc_mutates_in_wrong_order2.4 to i64) }


@tcmc_mutates_in_wrong_order2.7 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @tcmc_mutates_in_wrong_order2.6 to i64) }


@tcmc_mutates_in_wrong_order2.1 =    constant {i64, i64} { i64 5, i64 ptrtoint ([?? x i8]* @tcmc_mutates_in_wrong_order2.0 to i64) }


@tcmc_mutates_in_wrong_order2.4 =    constant [?? x i8] c")\00"


@tcmc_mutates_in_wrong_order2.2 =    constant [?? x i8] c",\00"


@tcmc_mutates_in_wrong_order2.0 =    constant [?? x i8] c"node(\00"


@tcmc_mutates_in_wrong_order2.6 =    constant [?? x i8] c"null\00"


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  void @print_int(i64)    


declare external ccc  void @putchar(i8)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"tcmc_mutates_in_wrong_order2.<0>"()    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 0, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 1, i64* %5 
  %6 = add   i64 %2, 16 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 1, i64* %7 
  %8 = trunc i64 24 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  store  i64 0, i64* %11 
  %12 = add   i64 %10, 8 
  %13 = inttoptr i64 %12 to i64* 
  store  i64 2, i64* %13 
  %14 = add   i64 %10, 16 
  %15 = inttoptr i64 %14 to i64* 
  store  i64 3, i64* %15 
  %16 = alloca i64 
   call fastcc  void  @"tcmc_mutates_in_wrong_order2.append<0>"(i64  %2, i64  %10, i64*  %16)  
  %17 = load  i64, i64* %16 
  tail call fastcc  void  @"tcmc_mutates_in_wrong_order2.print_list<0>"(i64  %10)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"tcmc_mutates_in_wrong_order2.print_list<0>"(i64  %17)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i1 @"tcmc_mutates_in_wrong_order2.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = icmp ne i64 %"#left##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = add   i64 %"#left##0", 16 
  %7 = inttoptr i64 %6 to i64* 
  %8 = load  i64, i64* %7 
  %9 = icmp ne i64 %"#right##0", 0 
  br i1 %9, label %if.then1, label %if.else1 
if.else:
  %21 = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %21 
if.then1:
  %10 = inttoptr i64 %"#right##0" to i64* 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"#right##0", 8 
  %13 = inttoptr i64 %12 to i64* 
  %14 = load  i64, i64* %13 
  %15 = add   i64 %"#right##0", 16 
  %16 = inttoptr i64 %15 to i64* 
  %17 = load  i64, i64* %16 
  %18 = tail call fastcc  i1  @"tcmc_mutates_in_wrong_order2.=<0>"(i64  %2, i64  %11)  
  br i1 %18, label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %19 = icmp eq i64 %5, %14 
  br i1 %19, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %20 = icmp eq i64 %8, %17 
  ret i1 %20 
if.else3:
  ret i1 0 
}


define external fastcc  void @"tcmc_mutates_in_wrong_order2.append<0>"(i64  %"a##0", i64  %"b##0", i64*  %"result#ref##0")    {
entry:
  %0 = icmp ne i64 %"a##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"a##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"a##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = trunc i64 24 to i32  
  %7 = tail call ccc  i8*  @wybe_malloc(i32  %6)  
  %8 = ptrtoint i8* %7 to i64 
  %9 = add   i64 %8, 8 
  %10 = inttoptr i64 %9 to i64* 
  store  i64 %5, i64* %10 
  %11 = add   i64 %8, 16 
  %12 = inttoptr i64 %11 to i64* 
  store  i64 %5, i64* %12 
  %13 = inttoptr i64 %8 to i64* 
  store  i64 %8, i64* %"result#ref##0" 
  musttail call fastcc  void  @"tcmc_mutates_in_wrong_order2.append<0>"(i64  %"b##0", i64  %2, i64*  %13)  
  ret void 
if.else:
  store  i64 %"b##0", i64* %"result#ref##0" 
  ret void 
}


define external fastcc  {i64, i1} @"tcmc_mutates_in_wrong_order2.head1<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"tcmc_mutates_in_wrong_order2.head1<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 8 
  %8 = inttoptr i64 %7 to i64* 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %3, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  {i64, i1} @"tcmc_mutates_in_wrong_order2.head2<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"#rec##0", 16 
  %2 = inttoptr i64 %1 to i64* 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"tcmc_mutates_in_wrong_order2.head2<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = add   i64 %3, 16 
  %8 = inttoptr i64 %7 to i64* 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %3, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  i64 @"tcmc_mutates_in_wrong_order2.null<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  void @"tcmc_mutates_in_wrong_order2.print_list<0>"(i64  %"a##0")    {
entry:
  %0 = icmp ne i64 %"a##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"a##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"a##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = add   i64 %"a##0", 16 
  %7 = inttoptr i64 %6 to i64* 
  %8 = load  i64, i64* %7 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @tcmc_mutates_in_wrong_order2.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %5)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @tcmc_mutates_in_wrong_order2.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %8)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @tcmc_mutates_in_wrong_order2.3, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"tcmc_mutates_in_wrong_order2.print_list<0>"(i64  %2)  
  musttail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @tcmc_mutates_in_wrong_order2.5, i32 0, i32 0) to i64))  
  ret void 
if.else:
  musttail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @tcmc_mutates_in_wrong_order2.7, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  i64 @"tcmc_mutates_in_wrong_order2.snoc<0>"(i64  %"tail##0", i64  %"head1##0", i64  %"head2##0")    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"tail##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"head1##0", i64* %5 
  %6 = add   i64 %2, 16 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"head2##0", i64* %7 
  ret i64 %2 
}


define external fastcc  {i64, i64, i64, i1} @"tcmc_mutates_in_wrong_order2.snoc<1>"(i64  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"#result##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#result##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = load  i64, i64* %4 
  %6 = add   i64 %"#result##0", 16 
  %7 = inttoptr i64 %6 to i64* 
  %8 = load  i64, i64* %7 
  %9 = insertvalue {i64, i64, i64, i1} undef, i64 %2, 0 
  %10 = insertvalue {i64, i64, i64, i1} %9, i64 %5, 1 
  %11 = insertvalue {i64, i64, i64, i1} %10, i64 %8, 2 
  %12 = insertvalue {i64, i64, i64, i1} %11, i1 1, 3 
  ret {i64, i64, i64, i1} %12 
if.else:
  %13 = insertvalue {i64, i64, i64, i1} undef, i64 undef, 0 
  %14 = insertvalue {i64, i64, i64, i1} %13, i64 undef, 1 
  %15 = insertvalue {i64, i64, i64, i1} %14, i64 undef, 2 
  %16 = insertvalue {i64, i64, i64, i1} %15, i1 0, 3 
  ret {i64, i64, i64, i1} %16 
}


define external fastcc  {i64, i1} @"tcmc_mutates_in_wrong_order2.tail<0>"(i64  %"#rec##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"#rec##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = insertvalue {i64, i1} undef, i64 %2, 0 
  %4 = insertvalue {i64, i1} %3, i1 1, 1 
  ret {i64, i1} %4 
if.else:
  %5 = insertvalue {i64, i1} undef, i64 undef, 0 
  %6 = insertvalue {i64, i1} %5, i1 0, 1 
  ret {i64, i1} %6 
}


define external fastcc  {i64, i1} @"tcmc_mutates_in_wrong_order2.tail<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = icmp ne i64 %"#rec##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i8* 
  %5 = inttoptr i64 %"#rec##0" to i8* 
  %6 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %4, i8*  %5, i32  %6, i1  0)  
  %7 = inttoptr i64 %3 to i64* 
  store  i64 %"#field##0", i64* %7 
  %8 = insertvalue {i64, i1} undef, i64 %3, 0 
  %9 = insertvalue {i64, i1} %8, i1 1, 1 
  ret {i64, i1} %9 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
}


define external fastcc  i1 @"tcmc_mutates_in_wrong_order2.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = tail call fastcc  i1  @"tcmc_mutates_in_wrong_order2.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}

======================================================================
AFTER EVERYTHING:
 Module stmt_while
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : stmt_while.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: stmt_while.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_while.#cont#1<0>(10:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @stmt_while:nn:nn


#cont#1 > (2 calls)
0: stmt_while.#cont#1<0>
#cont#1(n##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sgt(n##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:

    1:
        foreign llvm sub(~n##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @int:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @int:nn:nn
        foreign c print_int(tmp#5##0:wybe.int, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @int:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        stmt_while.#cont#1<0>(~tmp#5##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @stmt_while:nn:nn



#cont#2 > {inline} (1 calls)
0: stmt_while.#cont#2<0>
#cont#2(n##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm sub(~n##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.int) @int:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
    foreign c print_int(tmp#0##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    stmt_while.#cont#1<0>(~tmp#0##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @stmt_while:nn:nn

  LLVM code       :

; ModuleID = 'stmt_while'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"stmt_while.<0>"() alwaysinline   {
entry:
  tail call fastcc  void  @"stmt_while.#cont#1<0>"(i64  10)  
  ret void 
}


define external fastcc  void @"stmt_while.#cont#1<0>"(i64  %"n##0")    {
entry:
  %0 = icmp sgt i64 %"n##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = sub   i64 %"n##0", 1 
  tail call ccc  void  @print_int(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_while.#cont#1<0>"(i64  %1)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_while.#cont#2<0>"(i64  %"n##0") alwaysinline   {
entry:
  %0 = sub   i64 %"n##0", 1 
  tail call ccc  void  @print_int(i64  %0)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"stmt_while.#cont#1<0>"(i64  %0)  
  ret void 
}

======================================================================
AFTER EVERYTHING:
 Module stmt_while
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : stmt_while.<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public {inline} (0 calls)
0: (io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    stmt_while.gen$1<0>(~io#0:wybe.phantom, 10:wybe.int, ?io#1:wybe.phantom) #0 @stmt_while:nn:nn


gen$1 > (2 calls)
0: gen$1(io#0:wybe.phantom, n#0:wybe.int, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_sgt(n#0:wybe.int, 0:wybe.int, ?tmp$1#0:wybe.bool) @int:nn:nn
    case ~tmp$1#0:wybe.bool of
    0:
        foreign llvm move(~io#0:wybe.phantom, ?io#1:wybe.phantom)

    1:
        foreign llvm sub(~n#0:wybe.int, 1:wybe.int, ?tmp$6#0:wybe.int) @int:nn:nn
        foreign c print_int(tmp$6#0:wybe.int, ~io#0:wybe.phantom, ?tmp$7#0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp$7#0:wybe.phantom, ?tmp$8#0:wybe.phantom) @io:nn:nn
        stmt_while.gen$1<0>(~tmp$8#0:wybe.phantom, ~tmp$6#0:wybe.int, ?io#1:wybe.phantom) #2 @stmt_while:nn:nn



gen$2 > {inline} (1 calls)
0: gen$2(io#0:wybe.phantom, n#0:wybe.int, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm sub(~n#0:wybe.int, 1:wybe.int, ?tmp$0#0:wybe.int) @int:nn:nn
    foreign c print_int(tmp$0#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$5#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$5#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn
    stmt_while.gen$1<0>(~io#1:wybe.phantom, ~tmp$0#0:wybe.int, ?io#2:wybe.phantom) #2 @stmt_while:nn:nn

  LLVM code       :

; ModuleID = 'stmt_while'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"stmt_while.<0>"()    {
entry:
  tail call fastcc  void  @"stmt_while.gen$1<0>"(i64  10)  
  ret void 
}


define external fastcc  void @"stmt_while.gen$1<0>"(i64  %"n#0")    {
entry:
  %"1$tmp$1#0" = icmp sgt i64 %"n#0", 0 
  br i1 %"1$tmp$1#0", label %if.then, label %if.else 
if.then:
  %"2$tmp$6#0" = sub   i64 %"n#0", 1 
  tail call ccc  void  @print_int(i64  %"2$tmp$6#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_while.gen$1<0>"(i64  %"2$tmp$6#0")  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"stmt_while.gen$2<0>"(i64  %"n#0")    {
entry:
  %"1$tmp$0#0" = sub   i64 %"n#0", 1 
  tail call ccc  void  @print_int(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"stmt_while.gen$1<0>"(i64  %"1$tmp$0#0")  
  ret void 
}

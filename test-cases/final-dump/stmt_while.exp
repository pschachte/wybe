======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module stmt_while
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : stmt_while.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: stmt_while.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    stmt_while.#cont#1<0>(10:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @stmt_while:nn:nn


proc #cont#1 > {semipure} (2 calls)
0: stmt_while.#cont#1<0>
#cont#1(n##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sgt(n##0:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.bool) @stmt_while:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:

    1:
        foreign llvm sub(~n##0:wybe.int, 1:wybe.int, ?tmp#5##0:wybe.int) @stmt_while:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @stmt_while:nn:nn
        foreign c print_int(tmp#5##0:wybe.int, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @stmt_while:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @stmt_while:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_while:nn:nn
        stmt_while.#cont#1<0>(~tmp#5##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_while:nn:nn



proc #cont#2 > {inline,semipure} (1 calls)
0: stmt_while.#cont#2<0>
#cont#2(n##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm sub(~n##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.int) @stmt_while:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @stmt_while:nn:nn
    foreign c print_int(tmp#0##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @stmt_while:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @stmt_while:nn:nn
    foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @stmt_while:nn:nn
    stmt_while.#cont#1<0>(~tmp#0##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @stmt_while:nn:nn

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'stmt_while'

source_filename = "!ROOT!/final-dump/stmt_while.wybe"
target triple    ????


declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"stmt_while.<0>"() {
  tail call fastcc void @"stmt_while.#cont#1<0>"(i64 10)
  ret void
}

define external fastcc void @"stmt_while.#cont#1<0>"(i64 %"n##0") {
  %"tmp#1##0" = icmp sgt i64 %"n##0", 0
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#5##0" = sub i64 %"n##0", 1
  call ccc void @print_int(i64 %"tmp#5##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_while.#cont#1<0>"(i64 %"tmp#5##0")
  ret void
if.else.0:
  ret void
}

define external fastcc void @"stmt_while.#cont#2<0>"(i64 %"n##0") {
  %"tmp#0##0" = sub i64 %"n##0", 1
  call ccc void @print_int(i64 %"tmp#0##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"stmt_while.#cont#1<0>"(i64 %"tmp#0##0")
  ret void
}

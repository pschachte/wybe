======================================================================
AFTER EVERYTHING:
 Module anon_field
  representation  : address
  public submods  : 
  public resources: 
  public procs    : anon_field.<0>
                    anon_field.=<0>
                    anon_field.bar<0>
                    anon_field.bar<1>
                    anon_field.baz<0>
                    anon_field.baz<1>
                    anon_field.foo<0>
                    anon_field.foo<1>
                    anon_field.~=<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public {impure} (0 calls)
0: anon_field.<0>
(io##0:wybe.phantom, ?io##2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#21##0:anon_field)
    foreign lpvm mutate(~tmp#21##0:anon_field, ?tmp#22##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool)
    foreign lpvm mutate(~tmp#22##0:anon_field, ?tmp#23##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp#23##0:anon_field, ?tmp#0##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm alloc(8:wybe.int, ?tmp#25##0:anon_field)
    foreign lpvm mutate(~tmp#25##0:anon_field, ?tmp#26##0:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign llvm or(~tmp#26##0:anon_field, 1:wybe.int, ?tmp#2##0:anon_field)
    anon_field.=<0>(~tmp#0##0:anon_field, ~tmp#2##0:anon_field, ?tmp#17##0:wybe.bool) #3 @anon_field:nn:nn
    case ~tmp#17##0:wybe.bool of
    0:
        anon_field.gen#1<0>(~io##0:wybe.phantom, ?io##2:wybe.phantom) #6

    1:
        wybe.string.print_string<0>("uh oh":wybe.string, ~#io##0:wybe.phantom, ?tmp#29##0:wybe.phantom) #7 @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#29##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
        anon_field.gen#1<0>(~io##1:wybe.phantom, ?io##2:wybe.phantom) #5



= > public (7 calls)
0: anon_field.=<0>
=(#left##0:anon_field, #right##0:anon_field, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 3:wybe.int, ?tmp#13##0:wybe.int)
    foreign llvm icmp_eq(tmp#13##0:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.bool)
    case ~tmp#14##0:wybe.bool of
    0:
        foreign llvm icmp_eq(tmp#13##0:wybe.int, 1:wybe.int, ?tmp#17##0:wybe.bool)
        case ~tmp#17##0:wybe.bool of
        0:
            foreign llvm icmp_eq(~tmp#13##0:wybe.int, 2:wybe.int, ?tmp#20##0:wybe.bool)
            case ~tmp#20##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#left##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#left#field##0:wybe.int)
                foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#22##0:wybe.int)
                foreign llvm icmp_eq(~tmp#22##0:wybe.int, 2:wybe.int, ?tmp#23##0:wybe.bool)
                case ~tmp#23##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#right#field##0:wybe.int)
                    foreign llvm icmp_eq(~#left#field##0:wybe.int, ~#right#field##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        1:
            foreign lpvm access(~#left##0:anon_field, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#bar#1##0:wybe.int)
            foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#19##0:wybe.int)
            foreign llvm icmp_eq(~tmp#19##0:wybe.int, 1:wybe.int, ?tmp#20##0:wybe.bool)
            case ~tmp#20##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#right##0:anon_field, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#bar#1##0:wybe.int)
                foreign llvm icmp_eq(~#left#bar#1##0:wybe.int, ~#right#bar#1##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



    1:
        foreign lpvm access(#left##0:anon_field, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#foo#2##0:wybe.bool)
        foreign lpvm access(#left##0:anon_field, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#foo#1##0:wybe.int)
        foreign lpvm access(~#left##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#i##0:wybe.int)
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#16##0:wybe.int)
        foreign llvm icmp_eq(~tmp#16##0:wybe.int, 0:wybe.int, ?tmp#17##0:wybe.bool)
        case ~tmp#17##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:anon_field, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#foo#2##0:wybe.bool)
            foreign lpvm access(#right##0:anon_field, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#foo#1##0:wybe.int)
            foreign lpvm access(~#right##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#i##0:wybe.int)
            foreign llvm icmp_eq(~#left#foo#1##0:wybe.int, ~#right#foo#1##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
            case ~tmp#2##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#foo#2##0:wybe.bool, ~#right#foo#2##0:wybe.bool, ?tmp#3##0:wybe.bool) @bool:nn:nn
                case ~tmp#3##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~#left#i##0:wybe.int, ~#right#i##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn






bar > public {inline} (3 calls)
0: anon_field.bar<0>
bar(bar#1##0:wybe.int, ?#result##0:anon_field):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:anon_field)
    foreign lpvm mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~bar#1##0:wybe.int)
    foreign llvm or(~#rec##1:anon_field, 1:wybe.int, ?#result##0:anon_field)
bar > public {inline} (7 calls)
1: anon_field.bar<1>
bar(?bar#1##0:wybe.int, #result##0:anon_field, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?bar#1##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:anon_field, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?bar#1##0:wybe.int)
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



baz > public {inline} (5 calls)
0: anon_field.baz<0>
baz(field##0:wybe.int, ?#result##0:anon_field):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:anon_field)
    foreign lpvm mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~field##0:wybe.int)
    foreign llvm or(~#rec##1:anon_field, 2:wybe.int, ?#result##0:anon_field)
baz > public {inline} (5 calls)
1: anon_field.baz<1>
baz(?field##0:wybe.int, #result##0:anon_field, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?field##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?field##0:wybe.int)
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



field > {inline} (5 calls)
0: anon_field.field<0>
field(#rec##0:anon_field, ?#result##0:wybe.int, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#result##0:wybe.int)
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

field > {inline} (0 calls)
1: anon_field.field<1>
field(#rec##0:anon_field, ?#rec##1:anon_field, #field##0:wybe.int, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:anon_field, ?#rec##1:anon_field)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:anon_field, ?#rec##1:anon_field, -2:wybe.int, 0:wybe.int, 8:wybe.int, 2:wybe.int, ~#field##0:wybe.int)
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



foo > public {inline} (14 calls)
0: anon_field.foo<0>
foo(foo#1##0:wybe.int, foo#2##0:wybe.bool, i##0:wybe.int, ?#result##0:anon_field):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:anon_field)
    foreign lpvm mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~foo#2##0:wybe.bool)
    foreign lpvm mutate(~#rec##1:anon_field, ?#rec##2:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~foo#1##0:wybe.int)
    foreign lpvm mutate(~#rec##2:anon_field, ?#result##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~i##0:wybe.int)
foo > public {inline} (20 calls)
1: anon_field.foo<1>
foo(?foo#1##0:wybe.int, ?foo#2##0:wybe.bool, ?i##0:wybe.int, #result##0:anon_field, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?foo#1##0:wybe.int)
        foreign llvm move(undef:wybe.bool, ?foo#2##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?i##0:wybe.int)

    1:
        foreign lpvm access(#result##0:anon_field, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?foo#2##0:wybe.bool)
        foreign lpvm access(#result##0:anon_field, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?foo#1##0:wybe.int)
        foreign lpvm access(~#result##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?i##0:wybe.int)
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



gen#1 > (2 calls)
0: anon_field.gen#1<0>
gen#1(io##0:wybe.phantom, ?io##2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#20##0:anon_field)
    foreign lpvm mutate(~tmp#20##0:anon_field, ?tmp#21##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool)
    foreign lpvm mutate(~tmp#21##0:anon_field, ?tmp#22##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp#22##0:anon_field, ?tmp#4##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign llvm and(~tmp#4##0:wybe.int, 3:wybe.int, ?tmp#24##0:wybe.int)
    foreign llvm icmp_eq(~tmp#24##0:wybe.int, 0:wybe.int, ?tmp#25##0:wybe.bool)
    case ~tmp#25##0:wybe.bool of
    0:
        anon_field.gen#2<0>(~io##0:wybe.phantom, ?io##2:wybe.phantom) #7

    1:
        wybe.string.print_string<0>("good":wybe.string, ~#io##0:wybe.phantom, ?tmp#30##0:wybe.phantom) #8 @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#30##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
        anon_field.gen#2<0>(~io##1:wybe.phantom, ?io##2:wybe.phantom) #5



gen#2 > (3 calls)
0: anon_field.gen#2<0>
gen#2(io##0:wybe.phantom, ?io##2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#18##0:anon_field)
    foreign lpvm mutate(~tmp#18##0:anon_field, ?tmp#19##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool)
    foreign lpvm mutate(~tmp#19##0:anon_field, ?tmp#20##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm mutate(~tmp#20##0:anon_field, ?tmp#6##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign lpvm alloc(24:wybe.int, ?tmp#24##0:anon_field)
    foreign lpvm mutate(~tmp#24##0:anon_field, ?tmp#25##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool)
    foreign lpvm mutate(~tmp#25##0:anon_field, ?tmp#26##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 2:wybe.int)
    foreign lpvm mutate(~tmp#26##0:anon_field, ?tmp#8##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int)
    anon_field.=<0>(~tmp#6##0:anon_field, ~tmp#8##0:anon_field, ?tmp#14##0:wybe.bool) #4 @anon_field:nn:nn
    case ~tmp#14##0:wybe.bool of
    0:
        anon_field.gen#3<0>(~io##0:wybe.phantom, ?io##2:wybe.phantom) #7

    1:
        wybe.string.print_string<0>("bad":wybe.string, ~#io##0:wybe.phantom, ?tmp#29##0:wybe.phantom) #8 @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#29##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn
        anon_field.gen#3<0>(~io##1:wybe.phantom, ?io##2:wybe.phantom) #6



gen#3 > (2 calls)
0: anon_field.gen#3<0>
gen#3(io##0:wybe.phantom, ?io##1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?tmp#15##0:anon_field)
    foreign lpvm mutate(~tmp#15##0:anon_field, ?tmp#16##0:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 1:wybe.int)
    foreign llvm or(~tmp#16##0:anon_field, 2:wybe.int, ?tmp#11##0:anon_field)
    foreign llvm and(tmp#11##0:wybe.int, 3:wybe.int, ?tmp#18##0:wybe.int)
    foreign llvm icmp_eq(~tmp#18##0:wybe.int, 2:wybe.int, ?tmp#19##0:wybe.bool)
    case ~tmp#19##0:wybe.bool of
    0:
        foreign llvm move(~io##0:wybe.phantom, ?io##1:wybe.phantom)

    1:
        foreign lpvm access(~tmp#11##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?tmp#10##0:wybe.int)
        foreign llvm icmp_ne(~tmp#10##0:wybe.int, 2:wybe.int, ?tmp#13##0:wybe.bool) @int:nn:nn
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm move(~io##0:wybe.phantom, ?io##1:wybe.phantom)

        1:
            wybe.string.print_string<0>("maybe":wybe.string, ~#io##0:wybe.phantom, ?tmp#24##0:wybe.phantom) #4 @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?#io##1:wybe.phantom) @io:nn:nn




i > {inline} (5 calls)
0: anon_field.i<0>
i(#rec##0:anon_field, ?#result##0:wybe.int, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int)
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

i > {inline} (0 calls)
1: anon_field.i<1>
i(#rec##0:anon_field, ?#rec##1:anon_field, #field##0:wybe.int, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:anon_field, ?#rec##1:anon_field)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int)
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: anon_field.~=<0>
~=(#left##0:anon_field, #right##0:anon_field, ?#success##0:wybe.bool):
 AliasPairs: []
 InterestingCallProperties: []
    anon_field.=<0>(~#left##0:anon_field, ~#right##0:anon_field, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'anon_field'


 


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


@anon_field.18 =    constant {i64, i64} { i64 5, i64 ptrtoint ([?? x i8]* @anon_field.17 to i64) }


@anon_field.17 =    constant [?? x i8] c"uh oh\00"


@anon_field.149 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @anon_field.148 to i64) }


@anon_field.148 =    constant [?? x i8] c"good\00"


@anon_field.174 =    constant {i64, i64} { i64 3, i64 ptrtoint ([?? x i8]* @anon_field.173 to i64) }


@anon_field.173 =    constant [?? x i8] c"bad\00"


@anon_field.186 =    constant {i64, i64} { i64 5, i64 ptrtoint ([?? x i8]* @anon_field.185 to i64) }


@anon_field.185 =    constant [?? x i8] c"maybe\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"anon_field.<0>"()    {
entry:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i1* 
  %5 = getelementptr  i1, i1* %4, i64 0 
  store  i1 0, i1* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 1, i64* %8 
  %9 = add   i64 %3, 16 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  store  i64 1, i64* %11 
  %12 = trunc i64 8 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 1, i64* %16 
  %"1#tmp#2##0" = or i64 %14, 1 
  %"1#tmp#17##0" = tail call fastcc  i1  @"anon_field.=<0>"(i64  %3, i64  %"1#tmp#2##0")  
  br i1 %"1#tmp#17##0", label %if.then, label %if.else 
if.then:
  %19 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field.18, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %19)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"anon_field.gen#1<0>"()  
  ret void 
if.else:
  tail call fastcc  void  @"anon_field.gen#1<0>"()  
  ret void 
}


define external fastcc  i1 @"anon_field.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %"1#tmp#13##0" = and i64 %"#left##0", 3 
  %"1#tmp#14##0" = icmp eq i64 %"1#tmp#13##0", 0 
  br i1 %"1#tmp#14##0", label %if.then, label %if.else 
if.then:
  %20 = inttoptr i64 %"#left##0" to i1* 
  %21 = getelementptr  i1, i1* %20, i64 0 
  %22 = load  i1, i1* %21 
  %23 = add   i64 %"#left##0", 8 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  %27 = add   i64 %"#left##0", 16 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %"2#tmp#16##0" = and i64 %"#right##0", 3 
  %"2#tmp#17##0" = icmp eq i64 %"2#tmp#16##0", 0 
  br i1 %"2#tmp#17##0", label %if.then1, label %if.else1 
if.else:
  %"3#tmp#17##0" = icmp eq i64 %"1#tmp#13##0", 1 
  br i1 %"3#tmp#17##0", label %if.then4, label %if.else4 
if.then1:
  %31 = inttoptr i64 %"#right##0" to i1* 
  %32 = getelementptr  i1, i1* %31, i64 0 
  %33 = load  i1, i1* %32 
  %34 = add   i64 %"#right##0", 8 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  %37 = load  i64, i64* %36 
  %38 = add   i64 %"#right##0", 16 
  %39 = inttoptr i64 %38 to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  %41 = load  i64, i64* %40 
  %"4#tmp#2##0" = icmp eq i64 %26, %37 
  br i1 %"4#tmp#2##0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6#tmp#3##0" = icmp eq i1 %22, %33 
  br i1 %"6#tmp#3##0", label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %"8##success##0" = icmp eq i64 %30, %41 
  ret i1 %"8##success##0" 
if.else3:
  ret i1 0 
if.then4:
  %42 = add   i64 %"#left##0", -1 
  %43 = inttoptr i64 %42 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  %45 = load  i64, i64* %44 
  %"10#tmp#19##0" = and i64 %"#right##0", 3 
  %"10#tmp#20##0" = icmp eq i64 %"10#tmp#19##0", 1 
  br i1 %"10#tmp#20##0", label %if.then5, label %if.else5 
if.else4:
  %"11#tmp#20##0" = icmp eq i64 %"1#tmp#13##0", 2 
  br i1 %"11#tmp#20##0", label %if.then6, label %if.else6 
if.then5:
  %46 = add   i64 %"#right##0", -1 
  %47 = inttoptr i64 %46 to i64* 
  %48 = getelementptr  i64, i64* %47, i64 0 
  %49 = load  i64, i64* %48 
  %"12##success##0" = icmp eq i64 %45, %49 
  ret i1 %"12##success##0" 
if.else5:
  ret i1 0 
if.then6:
  %50 = add   i64 %"#left##0", -2 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  %53 = load  i64, i64* %52 
  %"14#tmp#22##0" = and i64 %"#right##0", 3 
  %"14#tmp#23##0" = icmp eq i64 %"14#tmp#22##0", 2 
  br i1 %"14#tmp#23##0", label %if.then7, label %if.else7 
if.else6:
  ret i1 0 
if.then7:
  %54 = add   i64 %"#right##0", -2 
  %55 = inttoptr i64 %54 to i64* 
  %56 = getelementptr  i64, i64* %55, i64 0 
  %57 = load  i64, i64* %56 
  %"16##success##0" = icmp eq i64 %53, %57 
  ret i1 %"16##success##0" 
if.else7:
  ret i1 0 
}


define external fastcc  i64 @"anon_field.bar<0>"(i64  %"bar#1##0")    {
entry:
  %58 = trunc i64 8 to i32  
  %59 = tail call ccc  i8*  @wybe_malloc(i32  %58)  
  %60 = ptrtoint i8* %59 to i64 
  %61 = inttoptr i64 %60 to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  store  i64 %"bar#1##0", i64* %62 
  %"1##result##0" = or i64 %60, 1 
  ret i64 %"1##result##0" 
}


define external fastcc  {i64, i1} @"anon_field.bar<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 1 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %63 = add   i64 %"#result##0", -1 
  %64 = inttoptr i64 %63 to i64* 
  %65 = getelementptr  i64, i64* %64, i64 0 
  %66 = load  i64, i64* %65 
  %67 = insertvalue {i64, i1} undef, i64 %66, 0 
  %68 = insertvalue {i64, i1} %67, i1 1, 1 
  ret {i64, i1} %68 
if.else:
  %69 = insertvalue {i64, i1} undef, i64 undef, 0 
  %70 = insertvalue {i64, i1} %69, i1 0, 1 
  ret {i64, i1} %70 
}


define external fastcc  i64 @"anon_field.baz<0>"(i64  %"field##0")    {
entry:
  %71 = trunc i64 8 to i32  
  %72 = tail call ccc  i8*  @wybe_malloc(i32  %71)  
  %73 = ptrtoint i8* %72 to i64 
  %74 = inttoptr i64 %73 to i64* 
  %75 = getelementptr  i64, i64* %74, i64 0 
  store  i64 %"field##0", i64* %75 
  %"1##result##0" = or i64 %73, 2 
  ret i64 %"1##result##0" 
}


define external fastcc  {i64, i1} @"anon_field.baz<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 2 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %76 = add   i64 %"#result##0", -2 
  %77 = inttoptr i64 %76 to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  %79 = load  i64, i64* %78 
  %80 = insertvalue {i64, i1} undef, i64 %79, 0 
  %81 = insertvalue {i64, i1} %80, i1 1, 1 
  ret {i64, i1} %81 
if.else:
  %82 = insertvalue {i64, i1} undef, i64 undef, 0 
  %83 = insertvalue {i64, i1} %82, i1 0, 1 
  ret {i64, i1} %83 
}


define external fastcc  {i64, i1} @"anon_field.field<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 2 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %84 = add   i64 %"#rec##0", -2 
  %85 = inttoptr i64 %84 to i64* 
  %86 = getelementptr  i64, i64* %85, i64 0 
  %87 = load  i64, i64* %86 
  %88 = insertvalue {i64, i1} undef, i64 %87, 0 
  %89 = insertvalue {i64, i1} %88, i1 1, 1 
  ret {i64, i1} %89 
if.else:
  %90 = insertvalue {i64, i1} undef, i64 undef, 0 
  %91 = insertvalue {i64, i1} %90, i1 0, 1 
  ret {i64, i1} %91 
}


define external fastcc  {i64, i1} @"anon_field.field<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 2 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %92 = trunc i64 8 to i32  
  %93 = tail call ccc  i8*  @wybe_malloc(i32  %92)  
  %94 = ptrtoint i8* %93 to i64 
  %95 = add   i64 %94, 2 
  %96 = sub   i64 %"#rec##0", 2 
  %97 = inttoptr i64 %94 to i8* 
  %98 = inttoptr i64 %96 to i8* 
  %99 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %97, i8*  %98, i32  %99, i32  8, i1  0)  
  %100 = add   i64 %95, -2 
  %101 = inttoptr i64 %100 to i64* 
  %102 = getelementptr  i64, i64* %101, i64 0 
  store  i64 %"#field##0", i64* %102 
  %103 = insertvalue {i64, i1} undef, i64 %95, 0 
  %104 = insertvalue {i64, i1} %103, i1 1, 1 
  ret {i64, i1} %104 
if.else:
  %105 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %106 = insertvalue {i64, i1} %105, i1 0, 1 
  ret {i64, i1} %106 
}


define external fastcc  i64 @"anon_field.foo<0>"(i64  %"foo#1##0", i1  %"foo#2##0", i64  %"i##0")    {
entry:
  %107 = trunc i64 24 to i32  
  %108 = tail call ccc  i8*  @wybe_malloc(i32  %107)  
  %109 = ptrtoint i8* %108 to i64 
  %110 = inttoptr i64 %109 to i1* 
  %111 = getelementptr  i1, i1* %110, i64 0 
  store  i1 %"foo#2##0", i1* %111 
  %112 = add   i64 %109, 8 
  %113 = inttoptr i64 %112 to i64* 
  %114 = getelementptr  i64, i64* %113, i64 0 
  store  i64 %"foo#1##0", i64* %114 
  %115 = add   i64 %109, 16 
  %116 = inttoptr i64 %115 to i64* 
  %117 = getelementptr  i64, i64* %116, i64 0 
  store  i64 %"i##0", i64* %117 
  ret i64 %109 
}


define external fastcc  {i64, i1, i64, i1} @"anon_field.foo<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %118 = inttoptr i64 %"#result##0" to i1* 
  %119 = getelementptr  i1, i1* %118, i64 0 
  %120 = load  i1, i1* %119 
  %121 = add   i64 %"#result##0", 8 
  %122 = inttoptr i64 %121 to i64* 
  %123 = getelementptr  i64, i64* %122, i64 0 
  %124 = load  i64, i64* %123 
  %125 = add   i64 %"#result##0", 16 
  %126 = inttoptr i64 %125 to i64* 
  %127 = getelementptr  i64, i64* %126, i64 0 
  %128 = load  i64, i64* %127 
  %129 = insertvalue {i64, i1, i64, i1} undef, i64 %124, 0 
  %130 = insertvalue {i64, i1, i64, i1} %129, i1 %120, 1 
  %131 = insertvalue {i64, i1, i64, i1} %130, i64 %128, 2 
  %132 = insertvalue {i64, i1, i64, i1} %131, i1 1, 3 
  ret {i64, i1, i64, i1} %132 
if.else:
  %133 = insertvalue {i64, i1, i64, i1} undef, i64 undef, 0 
  %134 = insertvalue {i64, i1, i64, i1} %133, i1 undef, 1 
  %135 = insertvalue {i64, i1, i64, i1} %134, i64 undef, 2 
  %136 = insertvalue {i64, i1, i64, i1} %135, i1 0, 3 
  ret {i64, i1, i64, i1} %136 
}


define external fastcc  void @"anon_field.gen#1<0>"()    {
entry:
  %137 = trunc i64 24 to i32  
  %138 = tail call ccc  i8*  @wybe_malloc(i32  %137)  
  %139 = ptrtoint i8* %138 to i64 
  %140 = inttoptr i64 %139 to i1* 
  %141 = getelementptr  i1, i1* %140, i64 0 
  store  i1 0, i1* %141 
  %142 = add   i64 %139, 8 
  %143 = inttoptr i64 %142 to i64* 
  %144 = getelementptr  i64, i64* %143, i64 0 
  store  i64 1, i64* %144 
  %145 = add   i64 %139, 16 
  %146 = inttoptr i64 %145 to i64* 
  %147 = getelementptr  i64, i64* %146, i64 0 
  store  i64 1, i64* %147 
  %"1#tmp#24##0" = and i64 %139, 3 
  %"1#tmp#25##0" = icmp eq i64 %"1#tmp#24##0", 0 
  br i1 %"1#tmp#25##0", label %if.then, label %if.else 
if.then:
  %150 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field.149, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %150)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"anon_field.gen#2<0>"()  
  ret void 
if.else:
  tail call fastcc  void  @"anon_field.gen#2<0>"()  
  ret void 
}


define external fastcc  void @"anon_field.gen#2<0>"()    {
entry:
  %151 = trunc i64 24 to i32  
  %152 = tail call ccc  i8*  @wybe_malloc(i32  %151)  
  %153 = ptrtoint i8* %152 to i64 
  %154 = inttoptr i64 %153 to i1* 
  %155 = getelementptr  i1, i1* %154, i64 0 
  store  i1 0, i1* %155 
  %156 = add   i64 %153, 8 
  %157 = inttoptr i64 %156 to i64* 
  %158 = getelementptr  i64, i64* %157, i64 0 
  store  i64 1, i64* %158 
  %159 = add   i64 %153, 16 
  %160 = inttoptr i64 %159 to i64* 
  %161 = getelementptr  i64, i64* %160, i64 0 
  store  i64 1, i64* %161 
  %162 = trunc i64 24 to i32  
  %163 = tail call ccc  i8*  @wybe_malloc(i32  %162)  
  %164 = ptrtoint i8* %163 to i64 
  %165 = inttoptr i64 %164 to i1* 
  %166 = getelementptr  i1, i1* %165, i64 0 
  store  i1 0, i1* %166 
  %167 = add   i64 %164, 8 
  %168 = inttoptr i64 %167 to i64* 
  %169 = getelementptr  i64, i64* %168, i64 0 
  store  i64 2, i64* %169 
  %170 = add   i64 %164, 16 
  %171 = inttoptr i64 %170 to i64* 
  %172 = getelementptr  i64, i64* %171, i64 0 
  store  i64 1, i64* %172 
  %"1#tmp#14##0" = tail call fastcc  i1  @"anon_field.=<0>"(i64  %153, i64  %164)  
  br i1 %"1#tmp#14##0", label %if.then, label %if.else 
if.then:
  %175 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field.174, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %175)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"anon_field.gen#3<0>"()  
  ret void 
if.else:
  tail call fastcc  void  @"anon_field.gen#3<0>"()  
  ret void 
}


define external fastcc  void @"anon_field.gen#3<0>"()    {
entry:
  %176 = trunc i64 8 to i32  
  %177 = tail call ccc  i8*  @wybe_malloc(i32  %176)  
  %178 = ptrtoint i8* %177 to i64 
  %179 = inttoptr i64 %178 to i64* 
  %180 = getelementptr  i64, i64* %179, i64 0 
  store  i64 1, i64* %180 
  %"1#tmp#11##0" = or i64 %178, 2 
  %"1#tmp#18##0" = and i64 %"1#tmp#11##0", 3 
  %"1#tmp#19##0" = icmp eq i64 %"1#tmp#18##0", 2 
  br i1 %"1#tmp#19##0", label %if.then, label %if.else 
if.then:
  %181 = add   i64 %"1#tmp#11##0", -2 
  %182 = inttoptr i64 %181 to i64* 
  %183 = getelementptr  i64, i64* %182, i64 0 
  %184 = load  i64, i64* %183 
  %"2#tmp#13##0" = icmp ne i64 %184, 2 
  br i1 %"2#tmp#13##0", label %if.then1, label %if.else1 
if.else:
  ret void 
if.then1:
  %187 = ptrtoint i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field.186, i32 0, i32 0) to i64 
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  %187)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else1:
  ret void 
}


define external fastcc  {i64, i1} @"anon_field.i<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %188 = add   i64 %"#rec##0", 16 
  %189 = inttoptr i64 %188 to i64* 
  %190 = getelementptr  i64, i64* %189, i64 0 
  %191 = load  i64, i64* %190 
  %192 = insertvalue {i64, i1} undef, i64 %191, 0 
  %193 = insertvalue {i64, i1} %192, i1 1, 1 
  ret {i64, i1} %193 
if.else:
  %194 = insertvalue {i64, i1} undef, i64 undef, 0 
  %195 = insertvalue {i64, i1} %194, i1 0, 1 
  ret {i64, i1} %195 
}


define external fastcc  {i64, i1} @"anon_field.i<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %196 = trunc i64 24 to i32  
  %197 = tail call ccc  i8*  @wybe_malloc(i32  %196)  
  %198 = ptrtoint i8* %197 to i64 
  %199 = inttoptr i64 %198 to i8* 
  %200 = inttoptr i64 %"#rec##0" to i8* 
  %201 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %199, i8*  %200, i32  %201, i32  8, i1  0)  
  %202 = add   i64 %198, 16 
  %203 = inttoptr i64 %202 to i64* 
  %204 = getelementptr  i64, i64* %203, i64 0 
  store  i64 %"#field##0", i64* %204 
  %205 = insertvalue {i64, i1} undef, i64 %198, 0 
  %206 = insertvalue {i64, i1} %205, i1 1, 1 
  ret {i64, i1} %206 
if.else:
  %207 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %208 = insertvalue {i64, i1} %207, i1 0, 1 
  ret {i64, i1} %208 
}


define external fastcc  i1 @"anon_field.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %"1#tmp#0##0" = tail call fastcc  i1  @"anon_field.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %"1##success##0" = xor i1 %"1#tmp#0##0", 1 
  ret i1 %"1##success##0" 
}

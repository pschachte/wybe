======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module anon_field
  representation  : pointer
  public submods  : quux -> anon_field.quux
  public resources: 
  public procs    : anon_field.<0>
                    anon_field.=<0>
                    anon_field.~=<0>
                    anon_field.quux.=<0>
                    anon_field.quux.j<0>
                    anon_field.quux.j<1>
                    anon_field.quux.quuz<0>
                    anon_field.quux.quuz<1>
                    anon_field.quux.~=<0>
  imports         : public use anon_field.quux
                    use wybe
  resources       : 
  submodules      : anon_field.quux
  procs           : 

module top-level code > public {semipure} (0 calls)
0: anon_field.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#21##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#21##0:anon_field, ?tmp#22##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#22##0:anon_field, ?tmp#23##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#23##0:anon_field, ?tmp#0##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm alloc(8:wybe.int, ?tmp#25##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#25##0:anon_field, ?tmp#26##0:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign llvm or(~tmp#26##0:anon_field, 1:wybe.int, ?tmp#2##0:anon_field) @anon_field:nn:nn
    anon_field.=<0>(~tmp#0##0:anon_field, ~tmp#2##0:anon_field, ?tmp#17##0:wybe.bool) #3 @anon_field:nn:nn
    case ~tmp#17##0:wybe.bool of
    0:
        anon_field.#cont#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6

    1:
        wybe.string.print<0>("uh oh":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7 @anon_field:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#28##0:wybe.phantom) @anon_field:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#28##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @anon_field:nn:nn
        foreign lpvm store(~%tmp#29##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @anon_field:nn:nn
        anon_field.#cont#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5



proc #cont#1 > {semipure} (2 calls)
0: anon_field.#cont#1<0>
#cont#1()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#20##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#20##0:anon_field, ?tmp#21##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#21##0:anon_field, ?tmp#22##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#22##0:anon_field, ?tmp#4##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign llvm and(~tmp#4##0:wybe.int, 3:wybe.int, ?tmp#24##0:wybe.int) @anon_field:nn:nn
    foreign llvm icmp_eq(~tmp#24##0:wybe.int, 0:wybe.int, ?tmp#25##0:wybe.bool) @anon_field:nn:nn
    case ~tmp#25##0:wybe.bool of
    0:
        anon_field.#cont#2<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7

    1:
        wybe.string.print<0>("good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @anon_field:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#29##0:wybe.phantom) @anon_field:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#29##0:wybe.phantom, ?tmp#30##0:wybe.phantom) @anon_field:nn:nn
        foreign lpvm store(~%tmp#30##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @anon_field:nn:nn
        anon_field.#cont#2<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #5



proc #cont#2 > {semipure} (3 calls)
0: anon_field.#cont#2<0>
#cont#2()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#18##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#18##0:anon_field, ?tmp#19##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#19##0:anon_field, ?tmp#20##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#20##0:anon_field, ?tmp#6##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm alloc(24:wybe.int, ?tmp#24##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#24##0:anon_field, ?tmp#25##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#25##0:anon_field, ?tmp#26##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 2:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#26##0:anon_field, ?tmp#8##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    anon_field.=<0>(~tmp#6##0:anon_field, ~tmp#8##0:anon_field, ?tmp#14##0:wybe.bool) #4 @anon_field:nn:nn
    case ~tmp#14##0:wybe.bool of
    0:
        anon_field.#cont#3<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7

    1:
        wybe.string.print<0>("bad":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8 @anon_field:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#28##0:wybe.phantom) @anon_field:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#28##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @anon_field:nn:nn
        foreign lpvm store(~%tmp#29##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @anon_field:nn:nn
        anon_field.#cont#3<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #6



proc #cont#3 > {semipure} (2 calls)
0: anon_field.#cont#3<0>
#cont#3()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?tmp#15##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#15##0:anon_field, ?tmp#16##0:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign llvm or(~tmp#16##0:anon_field, 2:wybe.int, ?tmp#11##0:anon_field) @anon_field:nn:nn
    foreign llvm and(tmp#11##0:wybe.int, 3:wybe.int, ?tmp#18##0:wybe.int) @anon_field:nn:nn
    foreign llvm icmp_eq(~tmp#18##0:wybe.int, 2:wybe.int, ?tmp#19##0:wybe.bool) @anon_field:nn:nn
    case ~tmp#19##0:wybe.bool of
    0:

    1:
        foreign lpvm access(~tmp#11##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?tmp#10##0:wybe.int) @anon_field:nn:nn
        foreign llvm icmp_ne(~tmp#10##0:wybe.int, 2:wybe.int, ?tmp#13##0:wybe.bool) @anon_field:nn:nn
        case ~tmp#13##0:wybe.bool of
        0:

        1:
            wybe.string.print<0>("maybe":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @anon_field:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#23##0:wybe.phantom) @anon_field:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @anon_field:nn:nn
            foreign lpvm store(~%tmp#24##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @anon_field:nn:nn




proc = > public (7 calls)
0: anon_field.=<0>
=(#left##0:anon_field, #right##0:anon_field, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 3:wybe.int, ?tmp#13##0:wybe.int)
    case ~tmp#13##0:wybe.int of
    0:
        foreign lpvm access(#left##0:anon_field, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#foo#2##0:wybe.bool) @anon_field:nn:nn
        foreign lpvm access(#left##0:anon_field, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#foo#1##0:wybe.int) @anon_field:nn:nn
        foreign lpvm access(~#left##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#i##0:wybe.int) @anon_field:nn:nn
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#32##0:wybe.int)
        foreign llvm icmp_eq(~tmp#32##0:wybe.int, 0:wybe.int, ?tmp#33##0:wybe.bool)
        case ~tmp#33##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:anon_field, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#foo#2##0:wybe.bool) @anon_field:nn:nn
            foreign lpvm access(#right##0:anon_field, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#foo#1##0:wybe.int) @anon_field:nn:nn
            foreign lpvm access(~#right##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#i##0:wybe.int) @anon_field:nn:nn
            foreign llvm icmp_eq(~#left#foo#1##0:wybe.int, ~#right#foo#1##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
            case ~tmp#2##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#foo#2##0:wybe.bool, ~#right#foo#2##0:wybe.bool, ?tmp#3##0:wybe.bool) @bool:nn:nn
                case ~tmp#3##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~#left#i##0:wybe.int, ~#right#i##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




    1:
        foreign lpvm access(~#left##0:anon_field, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#bar#1##0:wybe.int) @anon_field:nn:nn
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#27##0:wybe.int)
        foreign llvm icmp_eq(~tmp#27##0:wybe.int, 1:wybe.int, ?tmp#28##0:wybe.bool)
        case ~tmp#28##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:anon_field, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#bar#1##0:wybe.int) @anon_field:nn:nn
            foreign llvm icmp_eq(~#left#bar#1##0:wybe.int, ~#right#bar#1##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn


    2:
        foreign lpvm access(~#left##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#left#field##0:wybe.int) @anon_field:nn:nn
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#22##0:wybe.int)
        foreign llvm icmp_eq(~tmp#22##0:wybe.int, 2:wybe.int, ?tmp#23##0:wybe.bool)
        case ~tmp#23##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#right#field##0:wybe.int) @anon_field:nn:nn
            foreign llvm icmp_eq(~#left#field##0:wybe.int, ~#right#field##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




proc bar > {inline} (3 calls)
0: anon_field.bar<0>
bar(bar#1##0:wybe.int, ?#result##0:anon_field)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~bar#1##0:wybe.int) @anon_field:nn:nn
    foreign llvm or(~#rec##1:anon_field, 1:wybe.int, ?#result##0:anon_field) @anon_field:nn:nn
proc bar > {inline} (7 calls)
1: anon_field.bar<1>
bar(?bar#1##0:wybe.int, #result##0:anon_field, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?bar#1##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:anon_field, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?bar#1##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc baz > {inline} (5 calls)
0: anon_field.baz<0>
baz(field##0:wybe.int, ?#result##0:anon_field)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~field##0:wybe.int) @anon_field:nn:nn
    foreign llvm or(~#rec##1:anon_field, 2:wybe.int, ?#result##0:anon_field) @anon_field:nn:nn
proc baz > {inline} (5 calls)
1: anon_field.baz<1>
baz(?field##0:wybe.int, #result##0:anon_field, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?field##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?field##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc field > {inline} (5 calls)
0: anon_field.field<0>
field(#rec##0:anon_field, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#result##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc field > {inline} (0 calls)
1: anon_field.field<1>
field(#rec##0:anon_field, ?#rec##1:anon_field, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:anon_field, ?#rec##1:anon_field)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:anon_field, ?#rec##1:anon_field, -2:wybe.int, 0:wybe.int, 8:wybe.int, 2:wybe.int, ~#field##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc foo > {inline} (14 calls)
0: anon_field.foo<0>
foo(foo#1##0:wybe.int, foo#2##0:wybe.bool, i##0:wybe.int, ?#result##0:anon_field)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~foo#2##0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##1:anon_field, ?#rec##2:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~foo#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##2:anon_field, ?#result##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~i##0:wybe.int) @anon_field:nn:nn
proc foo > {inline} (20 calls)
1: anon_field.foo<1>
foo(?foo#1##0:wybe.int, ?foo#2##0:wybe.bool, ?i##0:wybe.int, #result##0:anon_field, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?foo#1##0:wybe.int)
        foreign llvm move(undef:wybe.bool, ?foo#2##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?i##0:wybe.int)

    1:
        foreign lpvm access(#result##0:anon_field, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?foo#2##0:wybe.bool) @anon_field:nn:nn
        foreign lpvm access(#result##0:anon_field, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?foo#1##0:wybe.int) @anon_field:nn:nn
        foreign lpvm access(~#result##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?i##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc i > {inline} (5 calls)
0: anon_field.i<0>
i(#rec##0:anon_field, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

proc i > {inline} (0 calls)
1: anon_field.i<1>
i(#rec##0:anon_field, ?#rec##1:anon_field, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:anon_field, ?#rec##1:anon_field)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



proc ~= > public {inline} (0 calls)
0: anon_field.~=<0>
~=(#left##0:anon_field, #right##0:anon_field, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    anon_field.=<0>(~#left##0:anon_field, ~#right##0:anon_field, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'anon_field'

source_filename = "!ROOT!/final-dump/anon_field.wybe"
target triple    ????

@"cstring#0" = private unnamed_addr constant [ ?? x i8 ] c"bad\00", align 8
@"cstring#1" = private unnamed_addr constant [ ?? x i8 ] c"good\00", align 8
@"cstring#2" = private unnamed_addr constant [ ?? x i8 ] c"maybe\00", align 8
@"cstring#3" = private unnamed_addr constant [ ?? x i8 ] c"uh oh\00", align 8
@"string#4" = private unnamed_addr constant {i64, i64} { i64 3, i64 ptrtoint( ptr @"cstring#0" to i64 ) }, align 8
@"string#5" = private unnamed_addr constant {i64, i64} { i64 4, i64 ptrtoint( ptr @"cstring#1" to i64 ) }, align 8
@"string#6" = private unnamed_addr constant {i64, i64} { i64 5, i64 ptrtoint( ptr @"cstring#2" to i64 ) }, align 8
@"string#7" = private unnamed_addr constant {i64, i64} { i64 5, i64 ptrtoint( ptr @"cstring#3" to i64 ) }, align 8

declare external fastcc void @"wybe.string.print<0>"(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"anon_field.<0>"() {
  %"tmp#30##0" = call ccc ptr @wybe_malloc(i32 24)
  %"tmp#21##0" = ptrtoint ptr %"tmp#30##0" to i64
  %"tmp#31##0" = inttoptr i64 %"tmp#21##0" to ptr
  store i1 0, ptr %"tmp#31##0"
  %"tmp#32##0" = add i64 %"tmp#21##0", 8
  %"tmp#33##0" = inttoptr i64 %"tmp#32##0" to ptr
  store i64 1, ptr %"tmp#33##0"
  %"tmp#34##0" = add i64 %"tmp#21##0", 16
  %"tmp#35##0" = inttoptr i64 %"tmp#34##0" to ptr
  store i64 1, ptr %"tmp#35##0"
  %"tmp#36##0" = call ccc ptr @wybe_malloc(i32 8)
  %"tmp#25##0" = ptrtoint ptr %"tmp#36##0" to i64
  %"tmp#37##0" = inttoptr i64 %"tmp#25##0" to ptr
  store i64 1, ptr %"tmp#37##0"
  %"tmp#2##0" = or i64 %"tmp#25##0", 1
  %"tmp#17##0" = tail call fastcc i1 @"anon_field.=<0>"(i64 %"tmp#21##0", i64 %"tmp#2##0")
  br i1 %"tmp#17##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#7" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"anon_field.#cont#1<0>"()
  ret void
if.else.0:
  tail call fastcc void @"anon_field.#cont#1<0>"()
  ret void
}

define external fastcc void @"anon_field.#cont#1<0>"() {
  %"tmp#31##0" = call ccc ptr @wybe_malloc(i32 24)
  %"tmp#20##0" = ptrtoint ptr %"tmp#31##0" to i64
  %"tmp#32##0" = inttoptr i64 %"tmp#20##0" to ptr
  store i1 0, ptr %"tmp#32##0"
  %"tmp#33##0" = add i64 %"tmp#20##0", 8
  %"tmp#34##0" = inttoptr i64 %"tmp#33##0" to ptr
  store i64 1, ptr %"tmp#34##0"
  %"tmp#35##0" = add i64 %"tmp#20##0", 16
  %"tmp#36##0" = inttoptr i64 %"tmp#35##0" to ptr
  store i64 1, ptr %"tmp#36##0"
  %"tmp#24##0" = and i64 %"tmp#20##0", 3
  %"tmp#25##0" = icmp eq i64 %"tmp#24##0", 0
  br i1 %"tmp#25##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#5" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"anon_field.#cont#2<0>"()
  ret void
if.else.0:
  tail call fastcc void @"anon_field.#cont#2<0>"()
  ret void
}

define external fastcc void @"anon_field.#cont#2<0>"() {
  %"tmp#30##0" = call ccc ptr @wybe_malloc(i32 24)
  %"tmp#18##0" = ptrtoint ptr %"tmp#30##0" to i64
  %"tmp#31##0" = inttoptr i64 %"tmp#18##0" to ptr
  store i1 0, ptr %"tmp#31##0"
  %"tmp#32##0" = add i64 %"tmp#18##0", 8
  %"tmp#33##0" = inttoptr i64 %"tmp#32##0" to ptr
  store i64 1, ptr %"tmp#33##0"
  %"tmp#34##0" = add i64 %"tmp#18##0", 16
  %"tmp#35##0" = inttoptr i64 %"tmp#34##0" to ptr
  store i64 1, ptr %"tmp#35##0"
  %"tmp#36##0" = call ccc ptr @wybe_malloc(i32 24)
  %"tmp#24##0" = ptrtoint ptr %"tmp#36##0" to i64
  %"tmp#37##0" = inttoptr i64 %"tmp#24##0" to ptr
  store i1 0, ptr %"tmp#37##0"
  %"tmp#38##0" = add i64 %"tmp#24##0", 8
  %"tmp#39##0" = inttoptr i64 %"tmp#38##0" to ptr
  store i64 2, ptr %"tmp#39##0"
  %"tmp#40##0" = add i64 %"tmp#24##0", 16
  %"tmp#41##0" = inttoptr i64 %"tmp#40##0" to ptr
  store i64 1, ptr %"tmp#41##0"
  %"tmp#14##0" = tail call fastcc i1 @"anon_field.=<0>"(i64 %"tmp#18##0", i64 %"tmp#24##0")
  br i1 %"tmp#14##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#4" to i64 ))
  call ccc void @putchar(i8 10)
  tail call fastcc void @"anon_field.#cont#3<0>"()
  ret void
if.else.0:
  tail call fastcc void @"anon_field.#cont#3<0>"()
  ret void
}

define external fastcc void @"anon_field.#cont#3<0>"() {
  %"tmp#25##0" = call ccc ptr @wybe_malloc(i32 8)
  %"tmp#15##0" = ptrtoint ptr %"tmp#25##0" to i64
  %"tmp#26##0" = inttoptr i64 %"tmp#15##0" to ptr
  store i64 1, ptr %"tmp#26##0"
  %"tmp#11##0" = or i64 %"tmp#15##0", 2
  %"tmp#18##0" = and i64 %"tmp#11##0", 3
  %"tmp#19##0" = icmp eq i64 %"tmp#18##0", 2
  br i1 %"tmp#19##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#27##0" = add i64 %"tmp#11##0", -2
  %"tmp#28##0" = inttoptr i64 %"tmp#27##0" to ptr
  %"tmp#10##0" = load i64, ptr %"tmp#28##0"
  %"tmp#13##0" = icmp ne i64 %"tmp#10##0", 2
  br i1 %"tmp#13##0", label %if.then.1, label %if.else.1
if.then.1:
  tail call fastcc void @"wybe.string.print<0>"(i64 ptrtoint( ptr @"string#6" to i64 ))
  call ccc void @putchar(i8 10)
  ret void
if.else.1:
  ret void
if.else.0:
  ret void
}

define external fastcc i1 @"anon_field.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#13##0" = and i64 %"#left##0", 3
  switch i64 %"tmp#13##0", label %case.2.switch.0 [
    i64 0, label %case.0.switch.0
    i64 1, label %case.1.switch.0
    i64 2, label %case.2.switch.0 ]
case.0.switch.0:
  %"tmp#40##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#foo#2##0" = load i1, ptr %"tmp#40##0"
  %"tmp#41##0" = add i64 %"#left##0", 8
  %"tmp#42##0" = inttoptr i64 %"tmp#41##0" to ptr
  %"#left#foo#1##0" = load i64, ptr %"tmp#42##0"
  %"tmp#43##0" = add i64 %"#left##0", 16
  %"tmp#44##0" = inttoptr i64 %"tmp#43##0" to ptr
  %"#left#i##0" = load i64, ptr %"tmp#44##0"
  %"tmp#32##0" = and i64 %"#right##0", 3
  %"tmp#33##0" = icmp eq i64 %"tmp#32##0", 0
  br i1 %"tmp#33##0", label %if.then.1, label %if.else.1
if.then.1:
  %"tmp#45##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#foo#2##0" = load i1, ptr %"tmp#45##0"
  %"tmp#46##0" = add i64 %"#right##0", 8
  %"tmp#47##0" = inttoptr i64 %"tmp#46##0" to ptr
  %"#right#foo#1##0" = load i64, ptr %"tmp#47##0"
  %"tmp#48##0" = add i64 %"#right##0", 16
  %"tmp#49##0" = inttoptr i64 %"tmp#48##0" to ptr
  %"#right#i##0" = load i64, ptr %"tmp#49##0"
  %"tmp#2##0" = icmp eq i64 %"#left#foo#1##0", %"#right#foo#1##0"
  br i1 %"tmp#2##0", label %if.then.2, label %if.else.2
if.then.2:
  %"tmp#3##0" = icmp eq i1 %"#left#foo#2##0", %"#right#foo#2##0"
  br i1 %"tmp#3##0", label %if.then.3, label %if.else.3
if.then.3:
  %"tmp#50##0" = icmp eq i64 %"#left#i##0", %"#right#i##0"
  ret i1 %"tmp#50##0"
if.else.3:
  ret i1 0
if.else.2:
  ret i1 0
if.else.1:
  ret i1 0
case.1.switch.0:
  %"tmp#51##0" = add i64 %"#left##0", -1
  %"tmp#52##0" = inttoptr i64 %"tmp#51##0" to ptr
  %"#left#bar#1##0" = load i64, ptr %"tmp#52##0"
  %"tmp#27##0" = and i64 %"#right##0", 3
  %"tmp#28##0" = icmp eq i64 %"tmp#27##0", 1
  br i1 %"tmp#28##0", label %if.then.4, label %if.else.4
if.then.4:
  %"tmp#53##0" = add i64 %"#right##0", -1
  %"tmp#54##0" = inttoptr i64 %"tmp#53##0" to ptr
  %"#right#bar#1##0" = load i64, ptr %"tmp#54##0"
  %"tmp#55##0" = icmp eq i64 %"#left#bar#1##0", %"#right#bar#1##0"
  ret i1 %"tmp#55##0"
if.else.4:
  ret i1 0
case.2.switch.0:
  %"tmp#56##0" = add i64 %"#left##0", -2
  %"tmp#57##0" = inttoptr i64 %"tmp#56##0" to ptr
  %"#left#field##0" = load i64, ptr %"tmp#57##0"
  %"tmp#22##0" = and i64 %"#right##0", 3
  %"tmp#23##0" = icmp eq i64 %"tmp#22##0", 2
  br i1 %"tmp#23##0", label %if.then.5, label %if.else.5
if.then.5:
  %"tmp#58##0" = add i64 %"#right##0", -2
  %"tmp#59##0" = inttoptr i64 %"tmp#58##0" to ptr
  %"#right#field##0" = load i64, ptr %"tmp#59##0"
  %"tmp#60##0" = icmp eq i64 %"#left#field##0", %"#right#field##0"
  ret i1 %"tmp#60##0"
if.else.5:
  ret i1 0
}

define external fastcc i64 @"anon_field.bar<0>"(i64 %"bar#1##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"bar#1##0", ptr %"tmp#1##0"
  %"tmp#2##0" = or i64 %"#rec##0", 1
  ret i64 %"tmp#2##0"
}

define external fastcc {i64, i1} @"anon_field.bar<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 1
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#result##0", -1
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc i64 @"anon_field.baz<0>"(i64 %"field##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 8)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"field##0", ptr %"tmp#1##0"
  %"tmp#2##0" = or i64 %"#rec##0", 2
  ret i64 %"tmp#2##0"
}

define external fastcc {i64, i1} @"anon_field.baz<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 2
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#result##0", -2
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc {i64, i1} @"anon_field.field<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 2
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#rec##0", -2
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc {i64, i1} @"anon_field.field<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 2
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = sub i64 %"#rec##0", 2
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = call ccc ptr @wybe_malloc(i32 8)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#4##0", ptr %"tmp#3##0", i64 8, i1 0)
  %"tmp#5##0" = ptrtoint ptr %"tmp#4##0" to i64
  %"tmp#6##0" = add i64 %"tmp#5##0", 2
  %"tmp#7##0" = add i64 %"tmp#6##0", -2
  %"tmp#8##0" = inttoptr i64 %"tmp#7##0" to ptr
  store i64 %"#field##0", ptr %"tmp#8##0"
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"tmp#6##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 1, 1
  ret {i64, i1} %"tmp#10##0"
if.else.0:
  %"tmp#11##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#12##0" = insertvalue {i64, i1} %"tmp#11##0", i1 0, 1
  ret {i64, i1} %"tmp#12##0"
}

define external fastcc i64 @"anon_field.foo<0>"(i64 %"foo#1##0", i1 %"foo#2##0", i64 %"i##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 24)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i1 %"foo#2##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"foo#1##0", ptr %"tmp#3##0"
  %"tmp#4##0" = add i64 %"#rec##0", 16
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  store i64 %"i##0", ptr %"tmp#5##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i1, i64, i1} @"anon_field.foo<1>"(i64 %"#result##0") {
  %"tmp#1##0" = and i64 %"#result##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#3##0" = load i1, ptr %"tmp#2##0"
  %"tmp#4##0" = add i64 %"#result##0", 8
  %"tmp#5##0" = inttoptr i64 %"tmp#4##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#5##0"
  %"tmp#7##0" = add i64 %"#result##0", 16
  %"tmp#8##0" = inttoptr i64 %"tmp#7##0" to ptr
  %"tmp#9##0" = load i64, ptr %"tmp#8##0"
  %"tmp#10##0" = insertvalue {i64, i1, i64, i1} undef, i64 %"tmp#6##0", 0
  %"tmp#11##0" = insertvalue {i64, i1, i64, i1} %"tmp#10##0", i1 %"tmp#3##0", 1
  %"tmp#12##0" = insertvalue {i64, i1, i64, i1} %"tmp#11##0", i64 %"tmp#9##0", 2
  %"tmp#13##0" = insertvalue {i64, i1, i64, i1} %"tmp#12##0", i1 1, 3
  ret {i64, i1, i64, i1} %"tmp#13##0"
if.else.0:
  %"tmp#14##0" = insertvalue {i64, i1, i64, i1} undef, i64 undef, 0
  %"tmp#15##0" = insertvalue {i64, i1, i64, i1} %"tmp#14##0", i1 undef, 1
  %"tmp#16##0" = insertvalue {i64, i1, i64, i1} %"tmp#15##0", i64 undef, 2
  %"tmp#17##0" = insertvalue {i64, i1, i64, i1} %"tmp#16##0", i1 0, 3
  ret {i64, i1, i64, i1} %"tmp#17##0"
}

define external fastcc {i64, i1} @"anon_field.i<0>"(i64 %"#rec##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = add i64 %"#rec##0", 16
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#6##0" = insertvalue {i64, i1} %"tmp#5##0", i1 1, 1
  ret {i64, i1} %"tmp#6##0"
if.else.0:
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 0, 1
  ret {i64, i1} %"tmp#8##0"
}

define external fastcc {i64, i1} @"anon_field.i<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#1##0" = and i64 %"#rec##0", 3
  %"tmp#0##0" = icmp eq i64 %"tmp#1##0", 0
  br i1 %"tmp#0##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#2##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#3##0" = call ccc ptr @wybe_malloc(i32 24)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#3##0", ptr %"tmp#2##0", i64 24, i1 0)
  %"tmp#4##0" = ptrtoint ptr %"tmp#3##0" to i64
  %"tmp#5##0" = add i64 %"tmp#4##0", 16
  %"tmp#6##0" = inttoptr i64 %"tmp#5##0" to ptr
  store i64 %"#field##0", ptr %"tmp#6##0"
  %"tmp#7##0" = insertvalue {i64, i1} undef, i64 %"tmp#4##0", 0
  %"tmp#8##0" = insertvalue {i64, i1} %"tmp#7##0", i1 1, 1
  ret {i64, i1} %"tmp#8##0"
if.else.0:
  %"tmp#9##0" = insertvalue {i64, i1} undef, i64 %"#rec##0", 0
  %"tmp#10##0" = insertvalue {i64, i1} %"tmp#9##0", i1 0, 1
  ret {i64, i1} %"tmp#10##0"
}

define external fastcc i1 @"anon_field.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#0##0" = tail call fastcc i1 @"anon_field.=<0>"(i64 %"#left##0", i64 %"#right##0")
  %"tmp#1##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#1##0"
}

--------------------------------------------------
 Module anon_field.quux
  representation  : pointer
  public submods  : 
  public resources: 
  public procs    : anon_field.quux.=<0>
                    anon_field.quux.j<0>
                    anon_field.quux.j<1>
                    anon_field.quux.quuz<0>
                    anon_field.quux.quuz<1>
                    anon_field.quux.~=<0>
  imports         : use anon_field
                    use wybe
  resources       : 
  procs           : 

proc = > public {inline} (1 calls)
0: anon_field.quux.=<0>
=(#left##0:anon_field.quux, #right##0:anon_field.quux, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#quuz#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#left##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#j##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(#right##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#quuz#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#right##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#j##0:wybe.int) @anon_field:nn:nn
    foreign llvm icmp_eq(~#left#quuz#1##0:wybe.int, ~#right#quuz#1##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#j##0:wybe.int, ~#right#j##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



proc j > public {inline} (0 calls)
0: anon_field.quux.j<0>
j(#rec##0:anon_field.quux, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @anon_field:nn:nn
proc j > public {inline} (0 calls)
1: anon_field.quux.j<1>
j(#rec##0:anon_field.quux, ?#rec##1:anon_field.quux, #field##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:anon_field.quux, ?#rec##1:anon_field.quux, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @anon_field:nn:nn


proc quuz > public {inline} (0 calls)
0: anon_field.quux.quuz<0>
quuz(quuz#1##0:wybe.int, j##0:wybe.int, ?#result##0:anon_field.quux)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:anon_field.quux) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field.quux, ?#rec##1:anon_field.quux, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~quuz#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##1:anon_field.quux, ?#result##0:anon_field.quux, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~j##0:wybe.int) @anon_field:nn:nn
proc quuz > public {inline} (6 calls)
1: anon_field.quux.quuz<1>
quuz(?quuz#1##0:wybe.int, ?j##0:wybe.int, #result##0:anon_field.quux)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?quuz#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#result##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?j##0:wybe.int) @anon_field:nn:nn


proc ~= > public {inline} (0 calls)
0: anon_field.quux.~=<0>
~=(#left##0:anon_field.quux, #right##0:anon_field.quux, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#left##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(#right##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#right##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @anon_field:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'anon_field.quux'

source_filename = "!ROOT!/final-dump/anon_field.wybe"
target triple    ????


declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc i1 @"anon_field.quux.=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#9##0" = inttoptr i64 %"#left##0" to ptr
  %"#left#quuz#1##0" = load i64, ptr %"tmp#9##0"
  %"tmp#10##0" = add i64 %"#left##0", 8
  %"tmp#11##0" = inttoptr i64 %"tmp#10##0" to ptr
  %"#left#j##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = inttoptr i64 %"#right##0" to ptr
  %"#right#quuz#1##0" = load i64, ptr %"tmp#12##0"
  %"tmp#13##0" = add i64 %"#right##0", 8
  %"tmp#14##0" = inttoptr i64 %"tmp#13##0" to ptr
  %"#right#j##0" = load i64, ptr %"tmp#14##0"
  %"tmp#1##0" = icmp eq i64 %"#left#quuz#1##0", %"#right#quuz#1##0"
  br i1 %"tmp#1##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#15##0" = icmp eq i64 %"#left#j##0", %"#right#j##0"
  ret i1 %"tmp#15##0"
if.else.0:
  ret i1 0
}

define external fastcc i64 @"anon_field.quux.j<0>"(i64 %"#rec##0") {
  %"tmp#0##0" = add i64 %"#rec##0", 8
  %"tmp#1##0" = inttoptr i64 %"tmp#0##0" to ptr
  %"tmp#2##0" = load i64, ptr %"tmp#1##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"anon_field.quux.j<1>"(i64 %"#rec##0", i64 %"#field##0") {
  %"tmp#0##0" = inttoptr i64 %"#rec##0" to ptr
  %"tmp#1##0" = call ccc ptr @wybe_malloc(i32 16)
  call ccc void @llvm.memcpy.p0.p0.i64(ptr %"tmp#1##0", ptr %"tmp#0##0", i64 16, i1 0)
  %"tmp#2##0" = ptrtoint ptr %"tmp#1##0" to i64
  %"tmp#3##0" = add i64 %"tmp#2##0", 8
  %"tmp#4##0" = inttoptr i64 %"tmp#3##0" to ptr
  store i64 %"#field##0", ptr %"tmp#4##0"
  ret i64 %"tmp#2##0"
}

define external fastcc i64 @"anon_field.quux.quuz<0>"(i64 %"quuz#1##0", i64 %"j##0") {
  %"tmp#0##0" = call ccc ptr @wybe_malloc(i32 16)
  %"#rec##0" = ptrtoint ptr %"tmp#0##0" to i64
  %"tmp#1##0" = inttoptr i64 %"#rec##0" to ptr
  store i64 %"quuz#1##0", ptr %"tmp#1##0"
  %"tmp#2##0" = add i64 %"#rec##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  store i64 %"j##0", ptr %"tmp#3##0"
  ret i64 %"#rec##0"
}

define external fastcc {i64, i64} @"anon_field.quux.quuz<1>"(i64 %"#result##0") {
  %"tmp#0##0" = inttoptr i64 %"#result##0" to ptr
  %"tmp#1##0" = load i64, ptr %"tmp#0##0"
  %"tmp#2##0" = add i64 %"#result##0", 8
  %"tmp#3##0" = inttoptr i64 %"tmp#2##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#3##0"
  %"tmp#5##0" = insertvalue {i64, i64} undef, i64 %"tmp#1##0", 0
  %"tmp#6##0" = insertvalue {i64, i64} %"tmp#5##0", i64 %"tmp#4##0", 1
  ret {i64, i64} %"tmp#6##0"
}

define external fastcc i1 @"anon_field.quux.~=<0>"(i64 %"#left##0", i64 %"#right##0") {
  %"tmp#8##0" = inttoptr i64 %"#left##0" to ptr
  %"tmp#3##0" = load i64, ptr %"tmp#8##0"
  %"tmp#9##0" = add i64 %"#left##0", 8
  %"tmp#10##0" = inttoptr i64 %"tmp#9##0" to ptr
  %"tmp#4##0" = load i64, ptr %"tmp#10##0"
  %"tmp#11##0" = inttoptr i64 %"#right##0" to ptr
  %"tmp#5##0" = load i64, ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"#right##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  %"tmp#6##0" = load i64, ptr %"tmp#13##0"
  %"tmp#7##0" = icmp eq i64 %"tmp#3##0", %"tmp#5##0"
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#0##0" = icmp eq i64 %"tmp#4##0", %"tmp#6##0"
  %"tmp#14##0" = xor i1 %"tmp#0##0", 1
  ret i1 %"tmp#14##0"
if.else.0:
  %"tmp#15##0" = xor i1 0, 1
  ret i1 %"tmp#15##0"
}

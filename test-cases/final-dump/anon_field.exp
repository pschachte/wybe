======================================================================
AFTER EVERYTHING:
 Module anon_field
  representation  : address
  public submods  : quux -> anon_field.quux
  public resources: 
  public procs    : anon_field.<0>
                    anon_field.=<0>
                    anon_field.bar<0>
                    anon_field.bar<1>
                    anon_field.baz<0>
                    anon_field.baz<1>
                    anon_field.foo<0>
                    anon_field.foo<1>
                    anon_field.~=<0>
                    anon_field.quux.=<0>
                    anon_field.quux.j<0>
                    anon_field.quux.j<1>
                    anon_field.quux.quuz<0>
                    anon_field.quux.quuz<1>
                    anon_field.quux.~=<0>
  imports         : public use anon_field.quux
                    use wybe
  resources       : 
  submodules      : anon_field.quux
  procs           : 

module top-level code > public {impure} (0 calls)
0: anon_field.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#21##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#21##0:anon_field, ?tmp#22##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#22##0:anon_field, ?tmp#23##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#23##0:anon_field, ?tmp#0##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm alloc(8:wybe.int, ?tmp#25##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#25##0:anon_field, ?tmp#26##0:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign llvm or(~tmp#26##0:anon_field, 1:wybe.int, ?tmp#2##0:anon_field) @anon_field:nn:nn
    anon_field.=<0>(~tmp#0##0:anon_field, ~tmp#2##0:anon_field, ?tmp#17##0:wybe.bool) #3 @anon_field:nn:nn
    case ~tmp#17##0:wybe.bool of
    0:
        anon_field.gen#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6

    1:
        wybe.string.print<0>("uh oh":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#28##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#28##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#29##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        anon_field.gen#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5



= > public (7 calls)
0: anon_field.=<0>
=(#left##0:anon_field, #right##0:anon_field, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 3:wybe.int, ?tmp#13##0:wybe.int)
    foreign llvm icmp_eq(tmp#13##0:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.bool)
    case ~tmp#14##0:wybe.bool of
    0:
        foreign llvm icmp_eq(tmp#13##0:wybe.int, 1:wybe.int, ?tmp#17##0:wybe.bool)
        case ~tmp#17##0:wybe.bool of
        0:
            foreign llvm icmp_eq(~tmp#13##0:wybe.int, 2:wybe.int, ?tmp#20##0:wybe.bool)
            case ~tmp#20##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#left##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#left#field##0:wybe.int) @anon_field:nn:nn
                foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#22##0:wybe.int)
                foreign llvm icmp_eq(~tmp#22##0:wybe.int, 2:wybe.int, ?tmp#23##0:wybe.bool)
                case ~tmp#23##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#right#field##0:wybe.int) @anon_field:nn:nn
                    foreign llvm icmp_eq(~#left#field##0:wybe.int, ~#right#field##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        1:
            foreign lpvm access(~#left##0:anon_field, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#bar#1##0:wybe.int) @anon_field:nn:nn
            foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#19##0:wybe.int)
            foreign llvm icmp_eq(~tmp#19##0:wybe.int, 1:wybe.int, ?tmp#20##0:wybe.bool)
            case ~tmp#20##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#right##0:anon_field, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#bar#1##0:wybe.int) @anon_field:nn:nn
                foreign llvm icmp_eq(~#left#bar#1##0:wybe.int, ~#right#bar#1##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



    1:
        foreign lpvm access(#left##0:anon_field, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#foo#2##0:wybe.bool) @anon_field:nn:nn
        foreign lpvm access(#left##0:anon_field, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#foo#1##0:wybe.int) @anon_field:nn:nn
        foreign lpvm access(~#left##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#i##0:wybe.int) @anon_field:nn:nn
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#16##0:wybe.int)
        foreign llvm icmp_eq(~tmp#16##0:wybe.int, 0:wybe.int, ?tmp#17##0:wybe.bool)
        case ~tmp#17##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:anon_field, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#foo#2##0:wybe.bool) @anon_field:nn:nn
            foreign lpvm access(#right##0:anon_field, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#foo#1##0:wybe.int) @anon_field:nn:nn
            foreign lpvm access(~#right##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#i##0:wybe.int) @anon_field:nn:nn
            foreign llvm icmp_eq(~#left#foo#1##0:wybe.int, ~#right#foo#1##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
            case ~tmp#2##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#foo#2##0:wybe.bool, ~#right#foo#2##0:wybe.bool, ?tmp#3##0:wybe.bool) @bool:nn:nn
                case ~tmp#3##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~#left#i##0:wybe.int, ~#right#i##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn






bar > public {inline} (3 calls)
0: anon_field.bar<0>
bar(bar#1##0:wybe.int, ?#result##0:anon_field)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~bar#1##0:wybe.int) @anon_field:nn:nn
    foreign llvm or(~#rec##1:anon_field, 1:wybe.int, ?#result##0:anon_field) @anon_field:nn:nn
bar > public {inline} (7 calls)
1: anon_field.bar<1>
bar(?bar#1##0:wybe.int, #result##0:anon_field, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?bar#1##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:anon_field, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?bar#1##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



baz > public {inline} (5 calls)
0: anon_field.baz<0>
baz(field##0:wybe.int, ?#result##0:anon_field)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~field##0:wybe.int) @anon_field:nn:nn
    foreign llvm or(~#rec##1:anon_field, 2:wybe.int, ?#result##0:anon_field) @anon_field:nn:nn
baz > public {inline} (5 calls)
1: anon_field.baz<1>
baz(?field##0:wybe.int, #result##0:anon_field, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?field##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?field##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



field > {inline} (5 calls)
0: anon_field.field<0>
field(#rec##0:anon_field, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#result##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

field > {inline} (0 calls)
1: anon_field.field<1>
field(#rec##0:anon_field, ?#rec##1:anon_field, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:anon_field, ?#rec##1:anon_field)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:anon_field, ?#rec##1:anon_field, -2:wybe.int, 0:wybe.int, 8:wybe.int, 2:wybe.int, ~#field##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



foo > public {inline} (14 calls)
0: anon_field.foo<0>
foo(foo#1##0:wybe.int, foo#2##0:wybe.bool, i##0:wybe.int, ?#result##0:anon_field)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~foo#2##0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##1:anon_field, ?#rec##2:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~foo#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##2:anon_field, ?#result##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~i##0:wybe.int) @anon_field:nn:nn
foo > public {inline} (20 calls)
1: anon_field.foo<1>
foo(?foo#1##0:wybe.int, ?foo#2##0:wybe.bool, ?i##0:wybe.int, #result##0:anon_field, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?foo#1##0:wybe.int)
        foreign llvm move(undef:wybe.bool, ?foo#2##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?i##0:wybe.int)

    1:
        foreign lpvm access(#result##0:anon_field, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?foo#2##0:wybe.bool) @anon_field:nn:nn
        foreign lpvm access(#result##0:anon_field, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?foo#1##0:wybe.int) @anon_field:nn:nn
        foreign lpvm access(~#result##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?i##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



gen#1 > (2 calls)
0: anon_field.gen#1<0>
gen#1()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#20##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#20##0:anon_field, ?tmp#21##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#21##0:anon_field, ?tmp#22##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#22##0:anon_field, ?tmp#4##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign llvm and(~tmp#4##0:wybe.int, 3:wybe.int, ?tmp#24##0:wybe.int)
    foreign llvm icmp_eq(~tmp#24##0:wybe.int, 0:wybe.int, ?tmp#25##0:wybe.bool)
    case ~tmp#25##0:wybe.bool of
    0:
        anon_field.gen#2<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7

    1:
        wybe.string.print<0>("good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#29##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#29##0:wybe.phantom, ?tmp#30##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#30##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        anon_field.gen#2<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5



gen#2 > (3 calls)
0: anon_field.gen#2<0>
gen#2()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#18##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#18##0:anon_field, ?tmp#19##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#19##0:anon_field, ?tmp#20##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#20##0:anon_field, ?tmp#6##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm alloc(24:wybe.int, ?tmp#24##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#24##0:anon_field, ?tmp#25##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#25##0:anon_field, ?tmp#26##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 2:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#26##0:anon_field, ?tmp#8##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    anon_field.=<0>(~tmp#6##0:anon_field, ~tmp#8##0:anon_field, ?tmp#14##0:wybe.bool) #4 @anon_field:nn:nn
    case ~tmp#14##0:wybe.bool of
    0:
        anon_field.gen#3<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7

    1:
        wybe.string.print<0>("bad":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @string:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#28##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#28##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#29##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        anon_field.gen#3<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6



gen#3 > (2 calls)
0: anon_field.gen#3<0>
gen#3()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?tmp#15##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#15##0:anon_field, ?tmp#16##0:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign llvm or(~tmp#16##0:anon_field, 2:wybe.int, ?tmp#11##0:anon_field) @anon_field:nn:nn
    foreign llvm and(tmp#11##0:wybe.int, 3:wybe.int, ?tmp#18##0:wybe.int)
    foreign llvm icmp_eq(~tmp#18##0:wybe.int, 2:wybe.int, ?tmp#19##0:wybe.bool)
    case ~tmp#19##0:wybe.bool of
    0:

    1:
        foreign lpvm access(~tmp#11##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?tmp#10##0:wybe.int) @anon_field:nn:nn
        foreign llvm icmp_ne(~tmp#10##0:wybe.int, 2:wybe.int, ?tmp#13##0:wybe.bool) @int:nn:nn
        case ~tmp#13##0:wybe.bool of
        0:

        1:
            wybe.string.print<0>("maybe":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @string:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#23##0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#24##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn




i > {inline} (5 calls)
0: anon_field.i<0>
i(#rec##0:anon_field, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

i > {inline} (0 calls)
1: anon_field.i<1>
i(#rec##0:anon_field, ?#rec##1:anon_field, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:anon_field, ?#rec##1:anon_field)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: anon_field.~=<0>
~=(#left##0:anon_field, #right##0:anon_field, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    anon_field.=<0>(~#left##0:anon_field, ~#right##0:anon_field, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'anon_field'


 


@anon_field.5 =    constant {i64, i64} { i64 3, i64 ptrtoint ([?? x i8]* @anon_field.4 to i64) }


@anon_field.3 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @anon_field.2 to i64) }


@anon_field.1 =    constant {i64, i64} { i64 5, i64 ptrtoint ([?? x i8]* @anon_field.0 to i64) }


@anon_field.7 =    constant {i64, i64} { i64 5, i64 ptrtoint ([?? x i8]* @anon_field.6 to i64) }


@anon_field.4 =    constant [?? x i8] c"bad\00"


@anon_field.2 =    constant [?? x i8] c"good\00"


@anon_field.6 =    constant [?? x i8] c"maybe\00"


@anon_field.0 =    constant [?? x i8] c"uh oh\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"anon_field.<0>"()    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i1* 
  %4 = getelementptr  i1, i1* %3, i64 0 
  store  i1 0, i1* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 1, i64* %7 
  %8 = add   i64 %2, 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 1, i64* %10 
  %11 = trunc i64 8 to i32  
  %12 = tail call ccc  i8*  @wybe_malloc(i32  %11)  
  %13 = ptrtoint i8* %12 to i64 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 1, i64* %15 
  %16 = or i64 %13, 1 
  %17 = tail call fastcc  i1  @"anon_field.=<0>"(i64  %2, i64  %16)  
  br i1 %17, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"anon_field.gen#1<0>"()  
  ret void 
if.else:
  musttail call fastcc  void  @"anon_field.gen#1<0>"()  
  ret void 
}


define external fastcc  i1 @"anon_field.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = and i64 %"#left##0", 3 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#left##0" to i1* 
  %3 = getelementptr  i1, i1* %2, i64 0 
  %4 = load  i1, i1* %3 
  %5 = add   i64 %"#left##0", 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  %8 = load  i64, i64* %7 
  %9 = add   i64 %"#left##0", 16 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  %12 = load  i64, i64* %11 
  %13 = and i64 %"#right##0", 3 
  %14 = icmp eq i64 %13, 0 
  br i1 %14, label %if.then1, label %if.else1 
if.else:
  %29 = icmp eq i64 %0, 1 
  br i1 %29, label %if.then4, label %if.else4 
if.then1:
  %15 = inttoptr i64 %"#right##0" to i1* 
  %16 = getelementptr  i1, i1* %15, i64 0 
  %17 = load  i1, i1* %16 
  %18 = add   i64 %"#right##0", 8 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %22 = add   i64 %"#right##0", 16 
  %23 = inttoptr i64 %22 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = icmp eq i64 %8, %21 
  br i1 %26, label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %27 = icmp eq i1 %4, %17 
  br i1 %27, label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %28 = icmp eq i64 %12, %25 
  ret i1 %28 
if.else3:
  ret i1 0 
if.then4:
  %30 = add   i64 %"#left##0", -1 
  %31 = inttoptr i64 %30 to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  %33 = load  i64, i64* %32 
  %34 = and i64 %"#right##0", 3 
  %35 = icmp eq i64 %34, 1 
  br i1 %35, label %if.then5, label %if.else5 
if.else4:
  %41 = icmp eq i64 %0, 2 
  br i1 %41, label %if.then6, label %if.else6 
if.then5:
  %36 = add   i64 %"#right##0", -1 
  %37 = inttoptr i64 %36 to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  %39 = load  i64, i64* %38 
  %40 = icmp eq i64 %33, %39 
  ret i1 %40 
if.else5:
  ret i1 0 
if.then6:
  %42 = add   i64 %"#left##0", -2 
  %43 = inttoptr i64 %42 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  %45 = load  i64, i64* %44 
  %46 = and i64 %"#right##0", 3 
  %47 = icmp eq i64 %46, 2 
  br i1 %47, label %if.then7, label %if.else7 
if.else6:
  ret i1 0 
if.then7:
  %48 = add   i64 %"#right##0", -2 
  %49 = inttoptr i64 %48 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  %51 = load  i64, i64* %50 
  %52 = icmp eq i64 %45, %51 
  ret i1 %52 
if.else7:
  ret i1 0 
}


define external fastcc  i64 @"anon_field.bar<0>"(i64  %"bar#1##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"bar#1##0", i64* %4 
  %5 = or i64 %2, 1 
  ret i64 %5 
}


define external fastcc  {i64, i1} @"anon_field.bar<1>"(i64  %"#result##0")    {
entry:
  %0 = and i64 %"#result##0", 3 
  %1 = icmp eq i64 %0, 1 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#result##0", -1 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  i64 @"anon_field.baz<0>"(i64  %"field##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"field##0", i64* %4 
  %5 = or i64 %2, 2 
  ret i64 %5 
}


define external fastcc  {i64, i1} @"anon_field.baz<1>"(i64  %"#result##0")    {
entry:
  %0 = and i64 %"#result##0", 3 
  %1 = icmp eq i64 %0, 2 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#result##0", -2 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"anon_field.field<0>"(i64  %"#rec##0")    {
entry:
  %0 = and i64 %"#rec##0", 3 
  %1 = icmp eq i64 %0, 2 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#rec##0", -2 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"anon_field.field<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = and i64 %"#rec##0", 3 
  %1 = icmp eq i64 %0, 2 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 8 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = add   i64 %4, 2 
  %6 = sub   i64 %"#rec##0", 2 
  %7 = inttoptr i64 %4 to i8* 
  %8 = inttoptr i64 %6 to i8* 
  %9 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %7, i8*  %8, i32  %9, i1  0)  
  %10 = add   i64 %5, -2 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 %"#field##0", i64* %12 
  %13 = insertvalue {i64, i1} undef, i64 %5, 0 
  %14 = insertvalue {i64, i1} %13, i1 1, 1 
  ret {i64, i1} %14 
if.else:
  %15 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %16 = insertvalue {i64, i1} %15, i1 0, 1 
  ret {i64, i1} %16 
}


define external fastcc  i64 @"anon_field.foo<0>"(i64  %"foo#1##0", i1  %"foo#2##0", i64  %"i##0")    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i1* 
  %4 = getelementptr  i1, i1* %3, i64 0 
  store  i1 %"foo#2##0", i1* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"foo#1##0", i64* %7 
  %8 = add   i64 %2, 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"i##0", i64* %10 
  ret i64 %2 
}


define external fastcc  {i64, i1, i64, i1} @"anon_field.foo<1>"(i64  %"#result##0")    {
entry:
  %0 = and i64 %"#result##0", 3 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = inttoptr i64 %"#result##0" to i1* 
  %3 = getelementptr  i1, i1* %2, i64 0 
  %4 = load  i1, i1* %3 
  %5 = add   i64 %"#result##0", 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  %8 = load  i64, i64* %7 
  %9 = add   i64 %"#result##0", 16 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  %12 = load  i64, i64* %11 
  %13 = insertvalue {i64, i1, i64, i1} undef, i64 %8, 0 
  %14 = insertvalue {i64, i1, i64, i1} %13, i1 %4, 1 
  %15 = insertvalue {i64, i1, i64, i1} %14, i64 %12, 2 
  %16 = insertvalue {i64, i1, i64, i1} %15, i1 1, 3 
  ret {i64, i1, i64, i1} %16 
if.else:
  %17 = insertvalue {i64, i1, i64, i1} undef, i64 undef, 0 
  %18 = insertvalue {i64, i1, i64, i1} %17, i1 undef, 1 
  %19 = insertvalue {i64, i1, i64, i1} %18, i64 undef, 2 
  %20 = insertvalue {i64, i1, i64, i1} %19, i1 0, 3 
  ret {i64, i1, i64, i1} %20 
}


define external fastcc  void @"anon_field.gen#1<0>"()    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i1* 
  %4 = getelementptr  i1, i1* %3, i64 0 
  store  i1 0, i1* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 1, i64* %7 
  %8 = add   i64 %2, 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 1, i64* %10 
  %11 = and i64 %2, 3 
  %12 = icmp eq i64 %11, 0 
  br i1 %12, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"anon_field.gen#2<0>"()  
  ret void 
if.else:
  musttail call fastcc  void  @"anon_field.gen#2<0>"()  
  ret void 
}


define external fastcc  void @"anon_field.gen#2<0>"()    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i1* 
  %4 = getelementptr  i1, i1* %3, i64 0 
  store  i1 0, i1* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 1, i64* %7 
  %8 = add   i64 %2, 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 1, i64* %10 
  %11 = trunc i64 24 to i32  
  %12 = tail call ccc  i8*  @wybe_malloc(i32  %11)  
  %13 = ptrtoint i8* %12 to i64 
  %14 = inttoptr i64 %13 to i1* 
  %15 = getelementptr  i1, i1* %14, i64 0 
  store  i1 0, i1* %15 
  %16 = add   i64 %13, 8 
  %17 = inttoptr i64 %16 to i64* 
  %18 = getelementptr  i64, i64* %17, i64 0 
  store  i64 2, i64* %18 
  %19 = add   i64 %13, 16 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  store  i64 1, i64* %21 
  %22 = tail call fastcc  i1  @"anon_field.=<0>"(i64  %2, i64  %13)  
  br i1 %22, label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field.5, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"anon_field.gen#3<0>"()  
  ret void 
if.else:
  musttail call fastcc  void  @"anon_field.gen#3<0>"()  
  ret void 
}


define external fastcc  void @"anon_field.gen#3<0>"()    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 1, i64* %4 
  %5 = or i64 %2, 2 
  %6 = and i64 %5, 3 
  %7 = icmp eq i64 %6, 2 
  br i1 %7, label %if.then, label %if.else 
if.then:
  %8 = add   i64 %5, -2 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = icmp ne i64 %11, 2 
  br i1 %12, label %if.then1, label %if.else1 
if.else:
  ret void 
if.then1:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field.7, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else1:
  ret void 
}


define external fastcc  {i64, i1} @"anon_field.i<0>"(i64  %"#rec##0")    {
entry:
  %0 = and i64 %"#rec##0", 3 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = add   i64 %"#rec##0", 16 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = insertvalue {i64, i1} undef, i64 %5, 0 
  %7 = insertvalue {i64, i1} %6, i1 1, 1 
  ret {i64, i1} %7 
if.else:
  %8 = insertvalue {i64, i1} undef, i64 undef, 0 
  %9 = insertvalue {i64, i1} %8, i1 0, 1 
  ret {i64, i1} %9 
}


define external fastcc  {i64, i1} @"anon_field.i<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = and i64 %"#rec##0", 3 
  %1 = icmp eq i64 %0, 0 
  br i1 %1, label %if.then, label %if.else 
if.then:
  %2 = trunc i64 24 to i32  
  %3 = tail call ccc  i8*  @wybe_malloc(i32  %2)  
  %4 = ptrtoint i8* %3 to i64 
  %5 = inttoptr i64 %4 to i8* 
  %6 = inttoptr i64 %"#rec##0" to i8* 
  %7 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = add   i64 %4, 16 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"#field##0", i64* %10 
  %11 = insertvalue {i64, i1} undef, i64 %4, 0 
  %12 = insertvalue {i64, i1} %11, i1 1, 1 
  ret {i64, i1} %12 
if.else:
  %13 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
}


define external fastcc  i1 @"anon_field.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = tail call fastcc  i1  @"anon_field.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %1 = xor i1 %0, 1 
  ret i1 %1 
}
--------------------------------------------------
 Module anon_field.quux
  representation  : address
  public submods  : 
  public resources: 
  public procs    : anon_field.quux.=<0>
                    anon_field.quux.j<0>
                    anon_field.quux.j<1>
                    anon_field.quux.quuz<0>
                    anon_field.quux.quuz<1>
                    anon_field.quux.~=<0>
  imports         : use anon_field
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: anon_field.quux.=<0>
=(#left##0:anon_field.quux, #right##0:anon_field.quux, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#quuz#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#left##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#j##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(#right##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#quuz#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#right##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#j##0:wybe.int) @anon_field:nn:nn
    foreign llvm icmp_eq(~#left#quuz#1##0:wybe.int, ~#right#quuz#1##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#j##0:wybe.int, ~#right#j##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



j > public {inline} (0 calls)
0: anon_field.quux.j<0>
j(#rec##0:anon_field.quux, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @anon_field:nn:nn
j > public {inline} (0 calls)
1: anon_field.quux.j<1>
j(#rec##0:anon_field.quux, ?#rec##1:anon_field.quux, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:anon_field.quux, ?#rec##1:anon_field.quux, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @anon_field:nn:nn


quuz > public {inline} (0 calls)
0: anon_field.quux.quuz<0>
quuz(quuz#1##0:wybe.int, j##0:wybe.int, ?#result##0:anon_field.quux)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:anon_field.quux) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field.quux, ?#rec##1:anon_field.quux, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~quuz#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##1:anon_field.quux, ?#result##0:anon_field.quux, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~j##0:wybe.int) @anon_field:nn:nn
quuz > public {inline} (6 calls)
1: anon_field.quux.quuz<1>
quuz(?quuz#1##0:wybe.int, ?j##0:wybe.int, #result##0:anon_field.quux)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?quuz#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#result##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?j##0:wybe.int) @anon_field:nn:nn


~= > public {inline} (0 calls)
0: anon_field.quux.~=<0>
~=(#left##0:anon_field.quux, #right##0:anon_field.quux, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#left##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(#right##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#right##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @anon_field:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'anon_field.quux'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"anon_field.quux.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = icmp eq i64 %2, %9 
  br i1 %14, label %if.then, label %if.else 
if.then:
  %15 = icmp eq i64 %6, %13 
  ret i1 %15 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"anon_field.quux.j<0>"(i64  %"#rec##0")    {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  ret i64 %3 
}


define external fastcc  i64 @"anon_field.quux.j<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"#field##0", i64* %8 
  ret i64 %2 
}


define external fastcc  i64 @"anon_field.quux.quuz<0>"(i64  %"quuz#1##0", i64  %"j##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"quuz#1##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"j##0", i64* %7 
  ret i64 %2 
}


define external fastcc  {i64, i64} @"anon_field.quux.quuz<1>"(i64  %"#result##0")    {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i64} undef, i64 %2, 0 
  %8 = insertvalue {i64, i64} %7, i64 %6, 1 
  ret {i64, i64} %8 
}


define external fastcc  i1 @"anon_field.quux.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = icmp eq i64 %2, %9 
  br i1 %14, label %if.then, label %if.else 
if.then:
  %15 = icmp eq i64 %6, %13 
  %16 = xor i1 %15, 1 
  ret i1 %16 
if.else:
  %17 = xor i1 0, 1 
  ret i1 %17 
}

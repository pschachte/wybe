======================================================================
AFTER EVERYTHING:
 Module anon_field
  representation  : address
  public submods  : quux -> anon_field.quux
  public resources: 
  public procs    : anon_field.<0>
                    anon_field.=<0>
                    anon_field.bar<0>
                    anon_field.bar<1>
                    anon_field.baz<0>
                    anon_field.baz<1>
                    anon_field.foo<0>
                    anon_field.foo<1>
                    anon_field.~=<0>
                    anon_field.quux.=<0>
                    anon_field.quux.j<0>
                    anon_field.quux.j<1>
                    anon_field.quux.quuz<0>
                    anon_field.quux.quuz<1>
                    anon_field.quux.~=<0>
  imports         : public use anon_field.quux
                    use wybe
  resources       : 
  submodules      : anon_field.quux
  procs           : 

module top-level code > public {impure} (0 calls)
0: anon_field.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#21##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#21##0:anon_field, ?tmp#22##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#22##0:anon_field, ?tmp#23##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#23##0:anon_field, ?tmp#0##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm alloc(8:wybe.int, ?tmp#25##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#25##0:anon_field, ?tmp#26##0:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign llvm or(~tmp#26##0:anon_field, 1:wybe.int, ?tmp#2##0:anon_field) @anon_field:nn:nn
    anon_field.=<0>(~tmp#0##0:anon_field, ~tmp#2##0:anon_field, ?tmp#17##0:wybe.bool) #3 @anon_field:nn:nn
    case ~tmp#17##0:wybe.bool of
    0:
        anon_field.gen#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6

    1:
        wybe.string.print_string<0>("uh oh":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @io:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#28##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#28##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#29##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        anon_field.gen#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5



= > public (7 calls)
0: anon_field.=<0>
=(#left##0:anon_field, #right##0:anon_field, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 3:wybe.int, ?tmp#13##0:wybe.int)
    foreign llvm icmp_eq(tmp#13##0:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.bool)
    case ~tmp#14##0:wybe.bool of
    0:
        foreign llvm icmp_eq(tmp#13##0:wybe.int, 1:wybe.int, ?tmp#17##0:wybe.bool)
        case ~tmp#17##0:wybe.bool of
        0:
            foreign llvm icmp_eq(~tmp#13##0:wybe.int, 2:wybe.int, ?tmp#20##0:wybe.bool)
            case ~tmp#20##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#left##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#left#field##0:wybe.int) @anon_field:nn:nn
                foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#22##0:wybe.int)
                foreign llvm icmp_eq(~tmp#22##0:wybe.int, 2:wybe.int, ?tmp#23##0:wybe.bool)
                case ~tmp#23##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#right#field##0:wybe.int) @anon_field:nn:nn
                    foreign llvm icmp_eq(~#left#field##0:wybe.int, ~#right#field##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        1:
            foreign lpvm access(~#left##0:anon_field, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#bar#1##0:wybe.int) @anon_field:nn:nn
            foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#19##0:wybe.int)
            foreign llvm icmp_eq(~tmp#19##0:wybe.int, 1:wybe.int, ?tmp#20##0:wybe.bool)
            case ~tmp#20##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#right##0:anon_field, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#bar#1##0:wybe.int) @anon_field:nn:nn
                foreign llvm icmp_eq(~#left#bar#1##0:wybe.int, ~#right#bar#1##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



    1:
        foreign lpvm access(#left##0:anon_field, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#foo#2##0:wybe.bool) @anon_field:nn:nn
        foreign lpvm access(#left##0:anon_field, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#foo#1##0:wybe.int) @anon_field:nn:nn
        foreign lpvm access(~#left##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#left#i##0:wybe.int) @anon_field:nn:nn
        foreign llvm and(#right##0:wybe.int, 3:wybe.int, ?tmp#16##0:wybe.int)
        foreign llvm icmp_eq(~tmp#16##0:wybe.int, 0:wybe.int, ?tmp#17##0:wybe.bool)
        case ~tmp#17##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:anon_field, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#foo#2##0:wybe.bool) @anon_field:nn:nn
            foreign lpvm access(#right##0:anon_field, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#foo#1##0:wybe.int) @anon_field:nn:nn
            foreign lpvm access(~#right##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#right#i##0:wybe.int) @anon_field:nn:nn
            foreign llvm icmp_eq(~#left#foo#1##0:wybe.int, ~#right#foo#1##0:wybe.int, ?tmp#2##0:wybe.bool) @int:nn:nn
            case ~tmp#2##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~#left#foo#2##0:wybe.bool, ~#right#foo#2##0:wybe.bool, ?tmp#3##0:wybe.bool) @bool:nn:nn
                case ~tmp#3##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign llvm icmp_eq(~#left#i##0:wybe.int, ~#right#i##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn






bar > public {inline} (3 calls)
0: anon_field.bar<0>
bar(bar#1##0:wybe.int, ?#result##0:anon_field)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~bar#1##0:wybe.int) @anon_field:nn:nn
    foreign llvm or(~#rec##1:anon_field, 1:wybe.int, ?#result##0:anon_field) @anon_field:nn:nn
bar > public {inline} (7 calls)
1: anon_field.bar<1>
bar(?bar#1##0:wybe.int, #result##0:anon_field, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?bar#1##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:anon_field, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?bar#1##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



baz > public {inline} (5 calls)
0: anon_field.baz<0>
baz(field##0:wybe.int, ?#result##0:anon_field)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~field##0:wybe.int) @anon_field:nn:nn
    foreign llvm or(~#rec##1:anon_field, 2:wybe.int, ?#result##0:anon_field) @anon_field:nn:nn
baz > public {inline} (5 calls)
1: anon_field.baz<1>
baz(?field##0:wybe.int, #result##0:anon_field, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?field##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?field##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



field > {inline} (5 calls)
0: anon_field.field<0>
field(#rec##0:anon_field, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#result##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

field > {inline} (0 calls)
1: anon_field.field<1>
field(#rec##0:anon_field, ?#rec##1:anon_field, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:anon_field, ?#rec##1:anon_field)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:anon_field, ?#rec##1:anon_field, -2:wybe.int, 0:wybe.int, 8:wybe.int, 2:wybe.int, ~#field##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



foo > public {inline} (14 calls)
0: anon_field.foo<0>
foo(foo#1##0:wybe.int, foo#2##0:wybe.bool, i##0:wybe.int, ?#result##0:anon_field)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~foo#2##0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##1:anon_field, ?#rec##2:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~foo#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##2:anon_field, ?#result##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~i##0:wybe.int) @anon_field:nn:nn
foo > public {inline} (20 calls)
1: anon_field.foo<1>
foo(?foo#1##0:wybe.int, ?foo#2##0:wybe.bool, ?i##0:wybe.int, #result##0:anon_field, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?foo#1##0:wybe.int)
        foreign llvm move(undef:wybe.bool, ?foo#2##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?i##0:wybe.int)

    1:
        foreign lpvm access(#result##0:anon_field, 0:wybe.int, 24:wybe.int, 0:wybe.int, ?foo#2##0:wybe.bool) @anon_field:nn:nn
        foreign lpvm access(#result##0:anon_field, 8:wybe.int, 24:wybe.int, 0:wybe.int, ?foo#1##0:wybe.int) @anon_field:nn:nn
        foreign lpvm access(~#result##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?i##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



gen#1 > (2 calls)
0: anon_field.gen#1<0>
gen#1()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#20##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#20##0:anon_field, ?tmp#21##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#21##0:anon_field, ?tmp#22##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#22##0:anon_field, ?tmp#4##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign llvm and(~tmp#4##0:wybe.int, 3:wybe.int, ?tmp#24##0:wybe.int)
    foreign llvm icmp_eq(~tmp#24##0:wybe.int, 0:wybe.int, ?tmp#25##0:wybe.bool)
    case ~tmp#25##0:wybe.bool of
    0:
        anon_field.gen#2<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7

    1:
        wybe.string.print_string<0>("good":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @io:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#29##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#29##0:wybe.phantom, ?tmp#30##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#30##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        anon_field.gen#2<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5



gen#2 > (3 calls)
0: anon_field.gen#2<0>
gen#2()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?tmp#18##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#18##0:anon_field, ?tmp#19##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#19##0:anon_field, ?tmp#20##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#20##0:anon_field, ?tmp#6##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign lpvm alloc(24:wybe.int, ?tmp#24##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#24##0:anon_field, ?tmp#25##0:anon_field, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 0:wybe.bool) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#25##0:anon_field, ?tmp#26##0:anon_field, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 2:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#26##0:anon_field, ?tmp#8##0:anon_field, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    anon_field.=<0>(~tmp#6##0:anon_field, ~tmp#8##0:anon_field, ?tmp#14##0:wybe.bool) #4 @anon_field:nn:nn
    case ~tmp#14##0:wybe.bool of
    0:
        anon_field.gen#3<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7

    1:
        wybe.string.print_string<0>("bad":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @io:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#28##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#28##0:wybe.phantom, ?tmp#29##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#29##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        anon_field.gen#3<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6



gen#3 > (2 calls)
0: anon_field.gen#3<0>
gen#3()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?tmp#15##0:anon_field) @anon_field:nn:nn
    foreign lpvm mutate(~tmp#15##0:anon_field, ?tmp#16##0:anon_field, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, 1:wybe.int) @anon_field:nn:nn
    foreign llvm or(~tmp#16##0:anon_field, 2:wybe.int, ?tmp#11##0:anon_field) @anon_field:nn:nn
    foreign llvm and(tmp#11##0:wybe.int, 3:wybe.int, ?tmp#18##0:wybe.int)
    foreign llvm icmp_eq(~tmp#18##0:wybe.int, 2:wybe.int, ?tmp#19##0:wybe.bool)
    case ~tmp#19##0:wybe.bool of
    0:

    1:
        foreign lpvm access(~tmp#11##0:anon_field, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?tmp#10##0:wybe.int) @anon_field:nn:nn
        foreign llvm icmp_ne(~tmp#10##0:wybe.int, 2:wybe.int, ?tmp#13##0:wybe.bool) @int:nn:nn
        case ~tmp#13##0:wybe.bool of
        0:

        1:
            wybe.string.print_string<0>("maybe":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @io:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#23##0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#24##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn




i > {inline} (5 calls)
0: anon_field.i<0>
i(#rec##0:anon_field, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:anon_field, 16:wybe.int, 24:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

i > {inline} (0 calls)
1: anon_field.i<1>
i(#rec##0:anon_field, ?#rec##1:anon_field, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 3:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:anon_field, ?#rec##1:anon_field)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:anon_field, ?#rec##1:anon_field, 16:wybe.int, 0:wybe.int, 24:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @anon_field:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: anon_field.~=<0>
~=(#left##0:anon_field, #right##0:anon_field, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    anon_field.=<0>(~#left##0:anon_field, ~#right##0:anon_field, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'anon_field'


 


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


@anon_field.18 =    constant {i64, i64} { i64 5, i64 ptrtoint ([?? x i8]* @anon_field.17 to i64) }


@anon_field.17 =    constant [?? x i8] c"uh oh\00"


@anon_field.148 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @anon_field.147 to i64) }


@anon_field.147 =    constant [?? x i8] c"good\00"


@anon_field.172 =    constant {i64, i64} { i64 3, i64 ptrtoint ([?? x i8]* @anon_field.171 to i64) }


@anon_field.171 =    constant [?? x i8] c"bad\00"


@anon_field.183 =    constant {i64, i64} { i64 5, i64 ptrtoint ([?? x i8]* @anon_field.182 to i64) }


@anon_field.182 =    constant [?? x i8] c"maybe\00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"anon_field.<0>"()    {
entry:
  %1 = trunc i64 24 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i1* 
  %5 = getelementptr  i1, i1* %4, i64 0 
  store  i1 0, i1* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 1, i64* %8 
  %9 = add   i64 %3, 16 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  store  i64 1, i64* %11 
  %12 = trunc i64 8 to i32  
  %13 = tail call ccc  i8*  @wybe_malloc(i32  %12)  
  %14 = ptrtoint i8* %13 to i64 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 1, i64* %16 
  %"1#tmp#2##0" = or i64 %14, 1 
  %"1#tmp#17##0" = tail call fastcc  i1  @"anon_field.=<0>"(i64  %3, i64  %"1#tmp#2##0")  
  br i1 %"1#tmp#17##0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field.18, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"anon_field.gen#1<0>"()  
  ret void 
if.else:
  tail call fastcc  void  @"anon_field.gen#1<0>"()  
  ret void 
}


define external fastcc  i1 @"anon_field.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %"1#tmp#13##0" = and i64 %"#left##0", 3 
  %"1#tmp#14##0" = icmp eq i64 %"1#tmp#13##0", 0 
  br i1 %"1#tmp#14##0", label %if.then, label %if.else 
if.then:
  %19 = inttoptr i64 %"#left##0" to i1* 
  %20 = getelementptr  i1, i1* %19, i64 0 
  %21 = load  i1, i1* %20 
  %22 = add   i64 %"#left##0", 8 
  %23 = inttoptr i64 %22 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %26 = add   i64 %"#left##0", 16 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %"2#tmp#16##0" = and i64 %"#right##0", 3 
  %"2#tmp#17##0" = icmp eq i64 %"2#tmp#16##0", 0 
  br i1 %"2#tmp#17##0", label %if.then1, label %if.else1 
if.else:
  %"3#tmp#17##0" = icmp eq i64 %"1#tmp#13##0", 1 
  br i1 %"3#tmp#17##0", label %if.then4, label %if.else4 
if.then1:
  %30 = inttoptr i64 %"#right##0" to i1* 
  %31 = getelementptr  i1, i1* %30, i64 0 
  %32 = load  i1, i1* %31 
  %33 = add   i64 %"#right##0", 8 
  %34 = inttoptr i64 %33 to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  %36 = load  i64, i64* %35 
  %37 = add   i64 %"#right##0", 16 
  %38 = inttoptr i64 %37 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  %40 = load  i64, i64* %39 
  %"4#tmp#2##0" = icmp eq i64 %25, %36 
  br i1 %"4#tmp#2##0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6#tmp#3##0" = icmp eq i1 %21, %32 
  br i1 %"6#tmp#3##0", label %if.then3, label %if.else3 
if.else2:
  ret i1 0 
if.then3:
  %"8##success##0" = icmp eq i64 %29, %40 
  ret i1 %"8##success##0" 
if.else3:
  ret i1 0 
if.then4:
  %41 = add   i64 %"#left##0", -1 
  %42 = inttoptr i64 %41 to i64* 
  %43 = getelementptr  i64, i64* %42, i64 0 
  %44 = load  i64, i64* %43 
  %"10#tmp#19##0" = and i64 %"#right##0", 3 
  %"10#tmp#20##0" = icmp eq i64 %"10#tmp#19##0", 1 
  br i1 %"10#tmp#20##0", label %if.then5, label %if.else5 
if.else4:
  %"11#tmp#20##0" = icmp eq i64 %"1#tmp#13##0", 2 
  br i1 %"11#tmp#20##0", label %if.then6, label %if.else6 
if.then5:
  %45 = add   i64 %"#right##0", -1 
  %46 = inttoptr i64 %45 to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  %48 = load  i64, i64* %47 
  %"12##success##0" = icmp eq i64 %44, %48 
  ret i1 %"12##success##0" 
if.else5:
  ret i1 0 
if.then6:
  %49 = add   i64 %"#left##0", -2 
  %50 = inttoptr i64 %49 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  %52 = load  i64, i64* %51 
  %"14#tmp#22##0" = and i64 %"#right##0", 3 
  %"14#tmp#23##0" = icmp eq i64 %"14#tmp#22##0", 2 
  br i1 %"14#tmp#23##0", label %if.then7, label %if.else7 
if.else6:
  ret i1 0 
if.then7:
  %53 = add   i64 %"#right##0", -2 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  %56 = load  i64, i64* %55 
  %"16##success##0" = icmp eq i64 %52, %56 
  ret i1 %"16##success##0" 
if.else7:
  ret i1 0 
}


define external fastcc  i64 @"anon_field.bar<0>"(i64  %"bar#1##0")    {
entry:
  %57 = trunc i64 8 to i32  
  %58 = tail call ccc  i8*  @wybe_malloc(i32  %57)  
  %59 = ptrtoint i8* %58 to i64 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  store  i64 %"bar#1##0", i64* %61 
  %"1##result##0" = or i64 %59, 1 
  ret i64 %"1##result##0" 
}


define external fastcc  {i64, i1} @"anon_field.bar<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 1 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %62 = add   i64 %"#result##0", -1 
  %63 = inttoptr i64 %62 to i64* 
  %64 = getelementptr  i64, i64* %63, i64 0 
  %65 = load  i64, i64* %64 
  %66 = insertvalue {i64, i1} undef, i64 %65, 0 
  %67 = insertvalue {i64, i1} %66, i1 1, 1 
  ret {i64, i1} %67 
if.else:
  %68 = insertvalue {i64, i1} undef, i64 undef, 0 
  %69 = insertvalue {i64, i1} %68, i1 0, 1 
  ret {i64, i1} %69 
}


define external fastcc  i64 @"anon_field.baz<0>"(i64  %"field##0")    {
entry:
  %70 = trunc i64 8 to i32  
  %71 = tail call ccc  i8*  @wybe_malloc(i32  %70)  
  %72 = ptrtoint i8* %71 to i64 
  %73 = inttoptr i64 %72 to i64* 
  %74 = getelementptr  i64, i64* %73, i64 0 
  store  i64 %"field##0", i64* %74 
  %"1##result##0" = or i64 %72, 2 
  ret i64 %"1##result##0" 
}


define external fastcc  {i64, i1} @"anon_field.baz<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 2 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %75 = add   i64 %"#result##0", -2 
  %76 = inttoptr i64 %75 to i64* 
  %77 = getelementptr  i64, i64* %76, i64 0 
  %78 = load  i64, i64* %77 
  %79 = insertvalue {i64, i1} undef, i64 %78, 0 
  %80 = insertvalue {i64, i1} %79, i1 1, 1 
  ret {i64, i1} %80 
if.else:
  %81 = insertvalue {i64, i1} undef, i64 undef, 0 
  %82 = insertvalue {i64, i1} %81, i1 0, 1 
  ret {i64, i1} %82 
}


define external fastcc  {i64, i1} @"anon_field.field<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 2 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %83 = add   i64 %"#rec##0", -2 
  %84 = inttoptr i64 %83 to i64* 
  %85 = getelementptr  i64, i64* %84, i64 0 
  %86 = load  i64, i64* %85 
  %87 = insertvalue {i64, i1} undef, i64 %86, 0 
  %88 = insertvalue {i64, i1} %87, i1 1, 1 
  ret {i64, i1} %88 
if.else:
  %89 = insertvalue {i64, i1} undef, i64 undef, 0 
  %90 = insertvalue {i64, i1} %89, i1 0, 1 
  ret {i64, i1} %90 
}


define external fastcc  {i64, i1} @"anon_field.field<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 2 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %91 = trunc i64 8 to i32  
  %92 = tail call ccc  i8*  @wybe_malloc(i32  %91)  
  %93 = ptrtoint i8* %92 to i64 
  %94 = add   i64 %93, 2 
  %95 = sub   i64 %"#rec##0", 2 
  %96 = inttoptr i64 %93 to i8* 
  %97 = inttoptr i64 %95 to i8* 
  %98 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %96, i8*  %97, i32  %98, i1  0)  
  %99 = add   i64 %94, -2 
  %100 = inttoptr i64 %99 to i64* 
  %101 = getelementptr  i64, i64* %100, i64 0 
  store  i64 %"#field##0", i64* %101 
  %102 = insertvalue {i64, i1} undef, i64 %94, 0 
  %103 = insertvalue {i64, i1} %102, i1 1, 1 
  ret {i64, i1} %103 
if.else:
  %104 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %105 = insertvalue {i64, i1} %104, i1 0, 1 
  ret {i64, i1} %105 
}


define external fastcc  i64 @"anon_field.foo<0>"(i64  %"foo#1##0", i1  %"foo#2##0", i64  %"i##0")    {
entry:
  %106 = trunc i64 24 to i32  
  %107 = tail call ccc  i8*  @wybe_malloc(i32  %106)  
  %108 = ptrtoint i8* %107 to i64 
  %109 = inttoptr i64 %108 to i1* 
  %110 = getelementptr  i1, i1* %109, i64 0 
  store  i1 %"foo#2##0", i1* %110 
  %111 = add   i64 %108, 8 
  %112 = inttoptr i64 %111 to i64* 
  %113 = getelementptr  i64, i64* %112, i64 0 
  store  i64 %"foo#1##0", i64* %113 
  %114 = add   i64 %108, 16 
  %115 = inttoptr i64 %114 to i64* 
  %116 = getelementptr  i64, i64* %115, i64 0 
  store  i64 %"i##0", i64* %116 
  ret i64 %108 
}


define external fastcc  {i64, i1, i64, i1} @"anon_field.foo<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %117 = inttoptr i64 %"#result##0" to i1* 
  %118 = getelementptr  i1, i1* %117, i64 0 
  %119 = load  i1, i1* %118 
  %120 = add   i64 %"#result##0", 8 
  %121 = inttoptr i64 %120 to i64* 
  %122 = getelementptr  i64, i64* %121, i64 0 
  %123 = load  i64, i64* %122 
  %124 = add   i64 %"#result##0", 16 
  %125 = inttoptr i64 %124 to i64* 
  %126 = getelementptr  i64, i64* %125, i64 0 
  %127 = load  i64, i64* %126 
  %128 = insertvalue {i64, i1, i64, i1} undef, i64 %123, 0 
  %129 = insertvalue {i64, i1, i64, i1} %128, i1 %119, 1 
  %130 = insertvalue {i64, i1, i64, i1} %129, i64 %127, 2 
  %131 = insertvalue {i64, i1, i64, i1} %130, i1 1, 3 
  ret {i64, i1, i64, i1} %131 
if.else:
  %132 = insertvalue {i64, i1, i64, i1} undef, i64 undef, 0 
  %133 = insertvalue {i64, i1, i64, i1} %132, i1 undef, 1 
  %134 = insertvalue {i64, i1, i64, i1} %133, i64 undef, 2 
  %135 = insertvalue {i64, i1, i64, i1} %134, i1 0, 3 
  ret {i64, i1, i64, i1} %135 
}


define external fastcc  void @"anon_field.gen#1<0>"()    {
entry:
  %136 = trunc i64 24 to i32  
  %137 = tail call ccc  i8*  @wybe_malloc(i32  %136)  
  %138 = ptrtoint i8* %137 to i64 
  %139 = inttoptr i64 %138 to i1* 
  %140 = getelementptr  i1, i1* %139, i64 0 
  store  i1 0, i1* %140 
  %141 = add   i64 %138, 8 
  %142 = inttoptr i64 %141 to i64* 
  %143 = getelementptr  i64, i64* %142, i64 0 
  store  i64 1, i64* %143 
  %144 = add   i64 %138, 16 
  %145 = inttoptr i64 %144 to i64* 
  %146 = getelementptr  i64, i64* %145, i64 0 
  store  i64 1, i64* %146 
  %"1#tmp#24##0" = and i64 %138, 3 
  %"1#tmp#25##0" = icmp eq i64 %"1#tmp#24##0", 0 
  br i1 %"1#tmp#25##0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field.148, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"anon_field.gen#2<0>"()  
  ret void 
if.else:
  tail call fastcc  void  @"anon_field.gen#2<0>"()  
  ret void 
}


define external fastcc  void @"anon_field.gen#2<0>"()    {
entry:
  %149 = trunc i64 24 to i32  
  %150 = tail call ccc  i8*  @wybe_malloc(i32  %149)  
  %151 = ptrtoint i8* %150 to i64 
  %152 = inttoptr i64 %151 to i1* 
  %153 = getelementptr  i1, i1* %152, i64 0 
  store  i1 0, i1* %153 
  %154 = add   i64 %151, 8 
  %155 = inttoptr i64 %154 to i64* 
  %156 = getelementptr  i64, i64* %155, i64 0 
  store  i64 1, i64* %156 
  %157 = add   i64 %151, 16 
  %158 = inttoptr i64 %157 to i64* 
  %159 = getelementptr  i64, i64* %158, i64 0 
  store  i64 1, i64* %159 
  %160 = trunc i64 24 to i32  
  %161 = tail call ccc  i8*  @wybe_malloc(i32  %160)  
  %162 = ptrtoint i8* %161 to i64 
  %163 = inttoptr i64 %162 to i1* 
  %164 = getelementptr  i1, i1* %163, i64 0 
  store  i1 0, i1* %164 
  %165 = add   i64 %162, 8 
  %166 = inttoptr i64 %165 to i64* 
  %167 = getelementptr  i64, i64* %166, i64 0 
  store  i64 2, i64* %167 
  %168 = add   i64 %162, 16 
  %169 = inttoptr i64 %168 to i64* 
  %170 = getelementptr  i64, i64* %169, i64 0 
  store  i64 1, i64* %170 
  %"1#tmp#14##0" = tail call fastcc  i1  @"anon_field.=<0>"(i64  %151, i64  %162)  
  br i1 %"1#tmp#14##0", label %if.then, label %if.else 
if.then:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field.172, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"anon_field.gen#3<0>"()  
  ret void 
if.else:
  tail call fastcc  void  @"anon_field.gen#3<0>"()  
  ret void 
}


define external fastcc  void @"anon_field.gen#3<0>"()    {
entry:
  %173 = trunc i64 8 to i32  
  %174 = tail call ccc  i8*  @wybe_malloc(i32  %173)  
  %175 = ptrtoint i8* %174 to i64 
  %176 = inttoptr i64 %175 to i64* 
  %177 = getelementptr  i64, i64* %176, i64 0 
  store  i64 1, i64* %177 
  %"1#tmp#11##0" = or i64 %175, 2 
  %"1#tmp#18##0" = and i64 %"1#tmp#11##0", 3 
  %"1#tmp#19##0" = icmp eq i64 %"1#tmp#18##0", 2 
  br i1 %"1#tmp#19##0", label %if.then, label %if.else 
if.then:
  %178 = add   i64 %"1#tmp#11##0", -2 
  %179 = inttoptr i64 %178 to i64* 
  %180 = getelementptr  i64, i64* %179, i64 0 
  %181 = load  i64, i64* %180 
  %"2#tmp#13##0" = icmp ne i64 %181, 2 
  br i1 %"2#tmp#13##0", label %if.then1, label %if.else1 
if.else:
  ret void 
if.then1:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @anon_field.183, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else1:
  ret void 
}


define external fastcc  {i64, i1} @"anon_field.i<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %184 = add   i64 %"#rec##0", 16 
  %185 = inttoptr i64 %184 to i64* 
  %186 = getelementptr  i64, i64* %185, i64 0 
  %187 = load  i64, i64* %186 
  %188 = insertvalue {i64, i1} undef, i64 %187, 0 
  %189 = insertvalue {i64, i1} %188, i1 1, 1 
  ret {i64, i1} %189 
if.else:
  %190 = insertvalue {i64, i1} undef, i64 undef, 0 
  %191 = insertvalue {i64, i1} %190, i1 0, 1 
  ret {i64, i1} %191 
}


define external fastcc  {i64, i1} @"anon_field.i<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 3 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %192 = trunc i64 24 to i32  
  %193 = tail call ccc  i8*  @wybe_malloc(i32  %192)  
  %194 = ptrtoint i8* %193 to i64 
  %195 = inttoptr i64 %194 to i8* 
  %196 = inttoptr i64 %"#rec##0" to i8* 
  %197 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %195, i8*  %196, i32  %197, i1  0)  
  %198 = add   i64 %194, 16 
  %199 = inttoptr i64 %198 to i64* 
  %200 = getelementptr  i64, i64* %199, i64 0 
  store  i64 %"#field##0", i64* %200 
  %201 = insertvalue {i64, i1} undef, i64 %194, 0 
  %202 = insertvalue {i64, i1} %201, i1 1, 1 
  ret {i64, i1} %202 
if.else:
  %203 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %204 = insertvalue {i64, i1} %203, i1 0, 1 
  ret {i64, i1} %204 
}


define external fastcc  i1 @"anon_field.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %"1#tmp#0##0" = tail call fastcc  i1  @"anon_field.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %"1##success##0" = xor i1 %"1#tmp#0##0", 1 
  ret i1 %"1##success##0" 
}
--------------------------------------------------
 Module anon_field.quux
  representation  : address
  public submods  : 
  public resources: 
  public procs    : anon_field.quux.=<0>
                    anon_field.quux.j<0>
                    anon_field.quux.j<1>
                    anon_field.quux.quuz<0>
                    anon_field.quux.quuz<1>
                    anon_field.quux.~=<0>
  imports         : use anon_field
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: anon_field.quux.=<0>
=(#left##0:anon_field.quux, #right##0:anon_field.quux, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#quuz#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#left##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#j##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(#right##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#quuz#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#right##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#j##0:wybe.int) @anon_field:nn:nn
    foreign llvm icmp_eq(~#left#quuz#1##0:wybe.int, ~#right#quuz#1##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#j##0:wybe.int, ~#right#j##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



j > public {inline} (0 calls)
0: anon_field.quux.j<0>
j(#rec##0:anon_field.quux, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @anon_field:nn:nn
j > public {inline} (0 calls)
1: anon_field.quux.j<1>
j(#rec##0:anon_field.quux, ?#rec##1:anon_field.quux, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:anon_field.quux, ?#rec##1:anon_field.quux, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @anon_field:nn:nn


quuz > public {inline} (0 calls)
0: anon_field.quux.quuz<0>
quuz(quuz#1##0:wybe.int, j##0:wybe.int, ?#result##0:anon_field.quux)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:anon_field.quux) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##0:anon_field.quux, ?#rec##1:anon_field.quux, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~quuz#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm mutate(~#rec##1:anon_field.quux, ?#result##0:anon_field.quux, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~j##0:wybe.int) @anon_field:nn:nn
quuz > public {inline} (6 calls)
1: anon_field.quux.quuz<1>
quuz(?quuz#1##0:wybe.int, ?j##0:wybe.int, #result##0:anon_field.quux)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?quuz#1##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#result##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?j##0:wybe.int) @anon_field:nn:nn


~= > public {inline} (0 calls)
0: anon_field.quux.~=<0>
~=(#left##0:anon_field.quux, #right##0:anon_field.quux, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#left##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(#right##0:anon_field.quux, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @anon_field:nn:nn
    foreign lpvm access(~#right##0:anon_field.quux, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @anon_field:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'anon_field.quux'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"anon_field.quux.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %1 = inttoptr i64 %"#left##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#left##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"#right##0" to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  %11 = add   i64 %"#right##0", 8 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  %"1#tmp#1##0" = icmp eq i64 %3, %10 
  br i1 %"1#tmp#1##0", label %if.then, label %if.else 
if.then:
  %"2##success##0" = icmp eq i64 %7, %14 
  ret i1 %"2##success##0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"anon_field.quux.j<0>"(i64  %"#rec##0")    {
entry:
  %15 = add   i64 %"#rec##0", 8 
  %16 = inttoptr i64 %15 to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  ret i64 %18 
}


define external fastcc  i64 @"anon_field.quux.j<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %19 = trunc i64 16 to i32  
  %20 = tail call ccc  i8*  @wybe_malloc(i32  %19)  
  %21 = ptrtoint i8* %20 to i64 
  %22 = inttoptr i64 %21 to i8* 
  %23 = inttoptr i64 %"#rec##0" to i8* 
  %24 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %22, i8*  %23, i32  %24, i1  0)  
  %25 = add   i64 %21, 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  store  i64 %"#field##0", i64* %27 
  ret i64 %21 
}


define external fastcc  i64 @"anon_field.quux.quuz<0>"(i64  %"quuz#1##0", i64  %"j##0")    {
entry:
  %28 = trunc i64 16 to i32  
  %29 = tail call ccc  i8*  @wybe_malloc(i32  %28)  
  %30 = ptrtoint i8* %29 to i64 
  %31 = inttoptr i64 %30 to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  store  i64 %"quuz#1##0", i64* %32 
  %33 = add   i64 %30, 8 
  %34 = inttoptr i64 %33 to i64* 
  %35 = getelementptr  i64, i64* %34, i64 0 
  store  i64 %"j##0", i64* %35 
  ret i64 %30 
}


define external fastcc  {i64, i64} @"anon_field.quux.quuz<1>"(i64  %"#result##0")    {
entry:
  %36 = inttoptr i64 %"#result##0" to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  %38 = load  i64, i64* %37 
  %39 = add   i64 %"#result##0", 8 
  %40 = inttoptr i64 %39 to i64* 
  %41 = getelementptr  i64, i64* %40, i64 0 
  %42 = load  i64, i64* %41 
  %43 = insertvalue {i64, i64} undef, i64 %38, 0 
  %44 = insertvalue {i64, i64} %43, i64 %42, 1 
  ret {i64, i64} %44 
}


define external fastcc  i1 @"anon_field.quux.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %45 = inttoptr i64 %"#left##0" to i64* 
  %46 = getelementptr  i64, i64* %45, i64 0 
  %47 = load  i64, i64* %46 
  %48 = add   i64 %"#left##0", 8 
  %49 = inttoptr i64 %48 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  %51 = load  i64, i64* %50 
  %52 = inttoptr i64 %"#right##0" to i64* 
  %53 = getelementptr  i64, i64* %52, i64 0 
  %54 = load  i64, i64* %53 
  %55 = add   i64 %"#right##0", 8 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  %58 = load  i64, i64* %57 
  %"1#tmp#7##0" = icmp eq i64 %47, %54 
  br i1 %"1#tmp#7##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#0##0" = icmp eq i64 %51, %58 
  %"2##success##0" = xor i1 %"2#tmp#0##0", 1 
  ret i1 %"2##success##0" 
if.else:
  %"3##success##0" = xor i1 0, 1 
  ret i1 %"3##success##0" 
}

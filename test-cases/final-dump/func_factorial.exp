======================================================================
AFTER EVERYTHING:
 Module func_factorial
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : func_factorial.<0>
                    func_factorial.factorial<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    func_factorial.factorial<0>(5:wybe.int, ?tmp$0#0:wybe.int) #0 @func_factorial:nn:nn
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$3#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$3#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn


factorial > public (2 calls)
0: factorial(n#0:wybe.int, ?$#0:wybe.int):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm icmp_sle(n#0:wybe.int, 0:wybe.int, ?tmp$4#0:wybe.bool) @int:nn:nn
    case ~tmp$4#0:wybe.bool of
    0:
        foreign llvm sub(n#0:wybe.int, 1:wybe.int, ?tmp$3#0:wybe.int) @int:nn:nn
        func_factorial.factorial<0>(~tmp$3#0:wybe.int, ?tmp$2#0:wybe.int) #2 @func_factorial:nn:nn
        foreign llvm mul(~n#0:wybe.int, ~tmp$2#0:wybe.int, ?$#0:wybe.int) @int:nn:nn

    1:
        foreign llvm move(1:wybe.int, ?$#0:wybe.int) @func_factorial:nn:nn


  LLVM code       :

; ModuleID = 'func_factorial'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"func_factorial.<0>"()    {
entry:
  %"1$tmp$0#0" = tail call fastcc  i64  @"func_factorial.factorial<0>"(i64  5)  
  tail call ccc  void  @print_int(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"func_factorial.factorial<0>"(i64  %"n#0")    {
entry:
  %"1$tmp$4#0" = icmp sle i64 %"n#0", 0 
  br i1 %"1$tmp$4#0", label %if.then, label %if.else 
if.then:
  ret i64 1 
if.else:
  %"3$tmp$3#0" = sub   i64 %"n#0", 1 
  %"3$tmp$2#0" = tail call fastcc  i64  @"func_factorial.factorial<0>"(i64  %"3$tmp$3#0")  
  %"3$$#0" = mul   i64 %"n#0", %"3$tmp$2#0" 
  ret i64 %"3$$#0" 
}

======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module func_factorial
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : func_factorial.<0>
                    func_factorial.factorial<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: func_factorial.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    func_factorial.factorial<0>(5:wybe.int, ?tmp#0##0:wybe.int) #0 @func_factorial:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom) @func_factorial:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @func_factorial:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#3##0:wybe.phantom, ?tmp#4##0:wybe.phantom) @func_factorial:nn:nn
    foreign lpvm store(~%tmp#4##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @func_factorial:nn:nn


proc factorial > public (2 calls)
0: func_factorial.factorial<0>
factorial(n##0:wybe.int, ?#result##0:wybe.int)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sle(n##0:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.bool) @func_factorial:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        foreign llvm sub(n##0:wybe.int, 1:wybe.int, ?tmp#3##0:wybe.int) @func_factorial:nn:nn
        func_factorial.factorial<0>(~tmp#3##0:wybe.int, ?tmp#2##0:wybe.int) #2 @func_factorial:nn:nn
        foreign llvm mul(~n##0:wybe.int, ~tmp#2##0:wybe.int, ?#result##0:wybe.int) @func_factorial:nn:nn

    1:
        foreign llvm move(1:wybe.int, ?#result##0:wybe.int) @func_factorial:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'func_factorial'

source_filename = "!ROOT!/final-dump/func_factorial.wybe"
target triple    ????


declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"func_factorial.<0>"() {
  %"tmp#0##0" = tail call fastcc i64 @"func_factorial.factorial<0>"(i64 5)
  call ccc void @print_int(i64 %"tmp#0##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc i64 @"func_factorial.factorial<0>"(i64 %"n##0") {
  %"tmp#4##0" = icmp sle i64 %"n##0", 0
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  ret i64 1
if.else.0:
  %"tmp#3##0" = sub i64 %"n##0", 1
  %"tmp#2##0" = tail call fastcc i64 @"func_factorial.factorial<0>"(i64 %"tmp#3##0")
  %"tmp#11##0" = mul i64 %"n##0", %"tmp#2##0"
  ret i64 %"tmp#11##0"
}

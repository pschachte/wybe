======================================================================
AFTER EVERYTHING:
 Module type_generics
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : type_generics.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: type_generics.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    type_generics.foo<0>(1:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @type_generics:nn:nn
    type_generics.foo<0>(1:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @type_generics:nn:nn
    type_generics.foo<0>(1.0:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @type_generics:nn:nn
    type_generics.foo<0>(1.0:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @type_generics:nn:nn
    type_generics.foo2<0>(1:wybe.int, ?y##0:wybe.int, ?tmp#7##0:wybe.bool) #5 @type_generics:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        type_generics.gen#1<0>(_:wybe.bool, _:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~y##0:wybe.int, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @int:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        type_generics.gen#1<0>(_:wybe.bool, _:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7



foo > (12 calls)
0: type_generics.foo<0>
foo(x##0:T)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#5##0:wybe.list(T), ?tmp#6##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:T) @list:nn:nn
    foreign lpvm mutate(~tmp#6##0:wybe.list(T), ?tmp#0##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    wybe.list.length1<0>(~tmp#0##0:wybe.list(T), 0:wybe.int, ?tmp#2##0:wybe.int) #4 @list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#2##0:wybe.int, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


foo2 > (18 calls)
0: type_generics.foo2<0>
foo2(x##0:T0, ?y##0:T0, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#6##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#6##0:wybe.list(T), ?tmp#7##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:T) @list:nn:nn
    foreign lpvm mutate(~tmp#7##0:wybe.list(T), ?tmp#0##0:wybe.list(T0), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign llvm icmp_ne(tmp#0##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:T, ?y##0:T0)

    1:
        foreign lpvm access(~tmp#0##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:T0) @list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



gen#1 > (2 calls)
0: type_generics.gen#1<0>
gen#1([tmp#0##0:wybe.bool], [x##0:wybe.float])<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    type_generics.foo2<0>(1:wybe.int, ?y##0:wybe.int, ?tmp#6##0:wybe.bool) #0 @type_generics:nn:nn
    case ~tmp#6##0:wybe.bool of
    0:
        type_generics.gen#2<0>(_:wybe.int, _:wybe.bool, _:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~y##0:wybe.int, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @int:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        type_generics.gen#2<0>(_:wybe.int, _:wybe.bool, _:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2



gen#2 > (2 calls)
0: type_generics.gen#2<0>
gen#2([i##0:wybe.int], [tmp#0##0:wybe.bool], [x##0:wybe.float])<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    type_generics.foo2<0>(1.0:wybe.float, ?fx##0:wybe.float, ?tmp#5##0:wybe.bool) #0 @type_generics:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        type_generics.gen#3<0>(_:wybe.float, _:wybe.int, _:wybe.bool, _:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#7##0:wybe.phantom) @float:nn:nn
        foreign c print_float(~fx##0:wybe.float, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @float:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        type_generics.gen#3<0>(_:wybe.float, _:wybe.int, _:wybe.bool, _:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2



gen#3 > (2 calls)
0: type_generics.gen#3<0>
gen#3([f##0:wybe.float], [i##0:wybe.int], [tmp#0##0:wybe.bool], [x##0:wybe.float])<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    type_generics.foo2<0>(1.0:wybe.float, ?x##1:wybe.float, ?tmp#4##0:wybe.bool) #0 @type_generics:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        type_generics.gen#4<0>(_:wybe.float, _:wybe.int, _:wybe.bool, _:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @float:nn:nn
        foreign c print_float(~x##1:wybe.float, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @float:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        type_generics.gen#4<0>(_:wybe.float, _:wybe.int, _:wybe.bool, _:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2



gen#4 > (2 calls)
0: type_generics.gen#4<0>
gen#4([f##0:wybe.float], [i##0:wybe.int], [tmp#0##0:wybe.bool], [x##0:wybe.float])<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    type_generics.foo2<0>('a':wybe.char, ?z##0:wybe.char, ?tmp#3##0:wybe.bool) #0 @type_generics:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:
        type_generics.gen#5<0>(_:wybe.float, _:wybe.int, _:wybe.bool, _:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @char:nn:nn
        foreign c putchar(~z##0:wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @char:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#7##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
        type_generics.gen#5<0>(_:wybe.float, _:wybe.int, _:wybe.bool, _:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2



gen#5 > (2 calls)
0: type_generics.gen#5<0>
gen#5([f##0:wybe.float], [i##0:wybe.int], [tmp#0##0:wybe.bool], [x##0:wybe.float])<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    type_generics.foo2<0>(0:wybe.bool, ?b##0:wybe.bool, ?tmp#2##0:wybe.bool) #1 @type_generics:nn:nn
    case ~tmp#2##0:wybe.bool of
    0:

    1:
        wybe.bool.print<0>(~b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @bool:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


  LLVM code       :

; ModuleID = 'type_generics'


 


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.bool.print<0>"(i1)    


declare external ccc  void @print_float(double)    


declare external ccc  void @print_int(i64)    


declare external fastcc  i64 @"wybe.list.length1<0>"(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"type_generics.<0>"()    {
entry:
  tail call fastcc  void  @"type_generics.foo<0>"(i64  1)  
  tail call fastcc  void  @"type_generics.foo<0>"(i64  1)  
  tail call fastcc  void  @"type_generics.foo<0>"(i64  bitcast (double 1.000000e0 to i64))  
  tail call fastcc  void  @"type_generics.foo<0>"(i64  bitcast (double 1.000000e0 to i64))  
  %0 = tail call fastcc  {i64, i1}  @"type_generics.foo2<0>"(i64  1)  
  %1 = extractvalue {i64, i1} %0, 0 
  %2 = extractvalue {i64, i1} %0, 1 
  br i1 %2, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"type_generics.gen#1<0>"()  
  ret void 
if.else:
  musttail call fastcc  void  @"type_generics.gen#1<0>"()  
  ret void 
}


define external fastcc  void @"type_generics.foo<0>"(i64  %"x##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"x##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 0, i64* %7 
  %8 = tail call fastcc  i64  @"wybe.list.length1<0>"(i64  %2, i64  0)  
  tail call ccc  void  @print_int(i64  %8)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  {i64, i1} @"type_generics.foo2<0>"(i64  %"x##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"x##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 0, i64* %7 
  %8 = icmp ne i64 %2, 0 
  br i1 %8, label %if.then, label %if.else 
if.then:
  %9 = inttoptr i64 %2 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = insertvalue {i64, i1} undef, i64 %11, 0 
  %13 = insertvalue {i64, i1} %12, i1 1, 1 
  ret {i64, i1} %13 
if.else:
  %14 = insertvalue {i64, i1} undef, i64 undef, 0 
  %15 = insertvalue {i64, i1} %14, i1 0, 1 
  ret {i64, i1} %15 
}


define external fastcc  void @"type_generics.gen#1<0>"()    {
entry:
  %0 = tail call fastcc  {i64, i1}  @"type_generics.foo2<0>"(i64  1)  
  %1 = extractvalue {i64, i1} %0, 0 
  %2 = extractvalue {i64, i1} %0, 1 
  br i1 %2, label %if.then, label %if.else 
if.then:
  tail call ccc  void  @print_int(i64  %1)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"type_generics.gen#2<0>"()  
  ret void 
if.else:
  musttail call fastcc  void  @"type_generics.gen#2<0>"()  
  ret void 
}


define external fastcc  void @"type_generics.gen#2<0>"()    {
entry:
  %0 = tail call fastcc  {i64, i1}  @"type_generics.foo2<0>"(i64  bitcast (double 1.000000e0 to i64))  
  %1 = extractvalue {i64, i1} %0, 0 
  %2 = extractvalue {i64, i1} %0, 1 
  br i1 %2, label %if.then, label %if.else 
if.then:
  %3 = bitcast i64 %1 to double 
  tail call ccc  void  @print_float(double  %3)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"type_generics.gen#3<0>"()  
  ret void 
if.else:
  musttail call fastcc  void  @"type_generics.gen#3<0>"()  
  ret void 
}


define external fastcc  void @"type_generics.gen#3<0>"()    {
entry:
  %0 = tail call fastcc  {i64, i1}  @"type_generics.foo2<0>"(i64  bitcast (double 1.000000e0 to i64))  
  %1 = extractvalue {i64, i1} %0, 0 
  %2 = extractvalue {i64, i1} %0, 1 
  br i1 %2, label %if.then, label %if.else 
if.then:
  %3 = bitcast i64 %1 to double 
  tail call ccc  void  @print_float(double  %3)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"type_generics.gen#4<0>"()  
  ret void 
if.else:
  musttail call fastcc  void  @"type_generics.gen#4<0>"()  
  ret void 
}


define external fastcc  void @"type_generics.gen#4<0>"()    {
entry:
  %0 = tail call fastcc  {i64, i1}  @"type_generics.foo2<0>"(i64  97)  
  %1 = extractvalue {i64, i1} %0, 0 
  %2 = extractvalue {i64, i1} %0, 1 
  br i1 %2, label %if.then, label %if.else 
if.then:
  %3 = trunc i64 %1 to i8  
  tail call ccc  void  @putchar(i8  %3)  
  tail call ccc  void  @putchar(i8  10)  
  musttail call fastcc  void  @"type_generics.gen#5<0>"()  
  ret void 
if.else:
  musttail call fastcc  void  @"type_generics.gen#5<0>"()  
  ret void 
}


define external fastcc  void @"type_generics.gen#5<0>"()    {
entry:
  %0 = tail call fastcc  {i64, i1}  @"type_generics.foo2<0>"(i64  0)  
  %1 = extractvalue {i64, i1} %0, 0 
  %2 = extractvalue {i64, i1} %0, 1 
  br i1 %2, label %if.then, label %if.else 
if.then:
  %3 = trunc i64 %1 to i1  
  tail call fastcc  void  @"wybe.bool.print<0>"(i1  %3)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  ret void 
}

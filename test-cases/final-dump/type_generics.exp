======================================================================
AFTER EVERYTHING:


--------------------------------------------------
 Module type_generics
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : type_generics.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: type_generics.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    type_generics.foo<0>(1:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #0 @type_generics:nn:nn
    type_generics.foo<0>(1:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2 @type_generics:nn:nn
    type_generics.foo<0>(1.0:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @type_generics:nn:nn
    type_generics.foo<0>(1.0:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #4 @type_generics:nn:nn
    type_generics.foo2<0>(1:wybe.int, ?y##0:wybe.int, ?tmp#8##0:wybe.bool) #5 @type_generics:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        type_generics.#cont#1<0>(_:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #8

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#10##0:wybe.phantom) @type_generics:nn:nn
        foreign c print_int(~y##0:wybe.int, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @type_generics:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @type_generics:nn:nn
        foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @type_generics:nn:nn
        type_generics.#cont#1<0>(_:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #7



proc #cont#1 > {semipure} (2 calls)
0: type_generics.#cont#1<0>
#cont#1([x##0:wybe.float])<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    type_generics.foo2<0>(1:wybe.int, ?y##0:wybe.int, ?tmp#7##0:wybe.bool) #0 @type_generics:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        type_generics.#cont#2<0>(_:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @type_generics:nn:nn
        foreign c print_int(~y##0:wybe.int, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @type_generics:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @type_generics:nn:nn
        foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @type_generics:nn:nn
        type_generics.#cont#2<0>(_:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2



proc #cont#2 > {semipure} (2 calls)
0: type_generics.#cont#2<0>
#cont#2([x##0:wybe.float])<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    type_generics.foo2<0>(1.0:wybe.float, ?fx##0:wybe.float, ?tmp#6##0:wybe.bool) #0 @type_generics:nn:nn
    case ~tmp#6##0:wybe.bool of
    0:
        type_generics.#cont#3<0>(_:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @type_generics:nn:nn
        foreign c print_float(~fx##0:wybe.float, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @type_generics:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @type_generics:nn:nn
        foreign lpvm store(~%tmp#10##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @type_generics:nn:nn
        type_generics.#cont#3<0>(_:wybe.float)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2



proc #cont#3 > {semipure} (2 calls)
0: type_generics.#cont#3<0>
#cont#3([x##0:wybe.float])<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    type_generics.foo2<0>(1.0:wybe.float, ?x##1:wybe.float, ?tmp#5##0:wybe.bool) #0 @type_generics:nn:nn
    case ~tmp#5##0:wybe.bool of
    0:
        type_generics.#cont#4<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#7##0:wybe.phantom) @type_generics:nn:nn
        foreign c print_float(~x##1:wybe.float, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @type_generics:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @type_generics:nn:nn
        foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @type_generics:nn:nn
        type_generics.#cont#4<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2



proc #cont#4 > {semipure} (2 calls)
0: type_generics.#cont#4<0>
#cont#4()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    type_generics.foo2<0>('a':wybe.char, ?z##0:wybe.char, ?tmp#4##0:wybe.bool) #0 @type_generics:nn:nn
    case ~tmp#4##0:wybe.bool of
    0:
        type_generics.#cont#5<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3

    1:
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @type_generics:nn:nn
        foreign c putchar(~z##0:wybe.char, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @type_generics:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @type_generics:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @type_generics:nn:nn
        type_generics.#cont#5<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #2



proc #cont#5 > {semipure} (2 calls)
0: type_generics.#cont#5<0>
#cont#5()<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    type_generics.foo2<0>(0:wybe.bool, ?b##0:wybe.bool, ?tmp#3##0:wybe.bool) #1 @type_generics:nn:nn
    case ~tmp#3##0:wybe.bool of
    0:

    1:
        wybe.bool.print<0>(~b##0:wybe.bool)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}> #3 @type_generics:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#5##0:wybe.phantom) @type_generics:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @type_generics:nn:nn
        foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @type_generics:nn:nn



proc foo > (12 calls)
0: type_generics.foo<0>
foo(x##0:T <{}; {}; {0}>)<{<<wybe.io.io>>}; {<<wybe.io.io>>}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#5##0:wybe.list(T)) @type_generics:nn:nn
    foreign lpvm mutate(~tmp#5##0:wybe.list(T), ?tmp#6##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:T) @type_generics:nn:nn
    foreign lpvm mutate(~tmp#6##0:wybe.list(T), ?tmp#0##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @type_generics:nn:nn
    wybe.list.length1<0>(~tmp#0##0:wybe.list(T), 0:wybe.int, ?tmp#2##0:wybe.int) #4 @type_generics:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#9##0:wybe.phantom) @type_generics:nn:nn
    foreign c print_int(~tmp#2##0:wybe.int, ~tmp#9##0:wybe.phantom, ?tmp#10##0:wybe.phantom) @type_generics:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#10##0:wybe.phantom, ?tmp#11##0:wybe.phantom) @type_generics:nn:nn
    foreign lpvm store(~%tmp#11##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @type_generics:nn:nn


proc foo2 > (18 calls)
0: type_generics.foo2<0>
foo2(x##0:T0 <{}; {}; {0}>, ?y##0:T0 <{}; {}; {0}>, ?#success##0:wybe.bool)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#6##0:wybe.list(T)) @type_generics:nn:nn
    foreign lpvm mutate(~tmp#6##0:wybe.list(T), ?tmp#7##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:T) @type_generics:nn:nn
    foreign lpvm mutate(~tmp#7##0:wybe.list(T), ?tmp#0##0:wybe.list(T0), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @type_generics:nn:nn
    foreign llvm icmp_ne(tmp#0##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool) @type_generics:nn:nn
    case ~tmp#9##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool) @type_generics:nn:nn
        foreign llvm move(undef:T, ?y##0:T0) @type_generics:nn:nn

    1:
        foreign lpvm access(~tmp#0##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:T0) @type_generics:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool) @type_generics:nn:nn


  LLVM code       :

;; FILE GENERATED BY wybemk 0.2 -- see https://github.com/pschachte/wybe
; ModuleID = 'type_generics'

source_filename = "!ROOT!/final-dump/type_generics.wybe"
target triple    ????


declare external fastcc void @"wybe.bool.print<0>"(i1)
declare external fastcc i64 @"wybe.list.length1<0>"(i64, i64)
declare external ccc void @print_float(double)
declare external ccc void @print_int(i64)
declare external ccc void @putchar(i8)
declare external ccc ptr @wybe_malloc(i32)
declare external ccc void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

define external fastcc void @"type_generics.<0>"() {
  tail call fastcc void @"type_generics.foo<0>"(i64 1)
  tail call fastcc void @"type_generics.foo<0>"(i64 1)
  tail call fastcc void @"type_generics.foo<0>"(i64 bitcast( double 1.0 to i64 ))
  tail call fastcc void @"type_generics.foo<0>"(i64 bitcast( double 1.0 to i64 ))
  %"tmp#13##0" = tail call fastcc {i64, i1} @"type_generics.foo2<0>"(i64 1)
  %"y##0" = extractvalue {i64, i1}%"tmp#13##0", 0
  %"tmp#8##0" = extractvalue {i64, i1}%"tmp#13##0", 1
  br i1 %"tmp#8##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @print_int(i64 %"y##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"type_generics.#cont#1<0>"()
  ret void
if.else.0:
  tail call fastcc void @"type_generics.#cont#1<0>"()
  ret void
}

define external fastcc void @"type_generics.#cont#1<0>"() {
  %"tmp#12##0" = tail call fastcc {i64, i1} @"type_generics.foo2<0>"(i64 1)
  %"y##0" = extractvalue {i64, i1}%"tmp#12##0", 0
  %"tmp#7##0" = extractvalue {i64, i1}%"tmp#12##0", 1
  br i1 %"tmp#7##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @print_int(i64 %"y##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"type_generics.#cont#2<0>"()
  ret void
if.else.0:
  tail call fastcc void @"type_generics.#cont#2<0>"()
  ret void
}

define external fastcc void @"type_generics.#cont#2<0>"() {
  %"tmp#11##0" = tail call fastcc {i64, i1} @"type_generics.foo2<0>"(i64 bitcast( double 1.0 to i64 ))
  %"tmp#12##0" = extractvalue {i64, i1}%"tmp#11##0", 0
  %"fx##0" = bitcast i64 %"tmp#12##0" to double
  %"tmp#6##0" = extractvalue {i64, i1}%"tmp#11##0", 1
  br i1 %"tmp#6##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @print_float(double %"fx##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"type_generics.#cont#3<0>"()
  ret void
if.else.0:
  tail call fastcc void @"type_generics.#cont#3<0>"()
  ret void
}

define external fastcc void @"type_generics.#cont#3<0>"() {
  %"tmp#10##0" = tail call fastcc {i64, i1} @"type_generics.foo2<0>"(i64 bitcast( double 1.0 to i64 ))
  %"tmp#11##0" = extractvalue {i64, i1}%"tmp#10##0", 0
  %"x##1" = bitcast i64 %"tmp#11##0" to double
  %"tmp#5##0" = extractvalue {i64, i1}%"tmp#10##0", 1
  br i1 %"tmp#5##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @print_float(double %"x##1")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"type_generics.#cont#4<0>"()
  ret void
if.else.0:
  tail call fastcc void @"type_generics.#cont#4<0>"()
  ret void
}

define external fastcc void @"type_generics.#cont#4<0>"() {
  %"tmp#9##0" = tail call fastcc {i64, i1} @"type_generics.foo2<0>"(i64 97)
  %"tmp#10##0" = extractvalue {i64, i1}%"tmp#9##0", 0
  %"z##0" = trunc i64 %"tmp#10##0" to i8
  %"tmp#4##0" = extractvalue {i64, i1}%"tmp#9##0", 1
  br i1 %"tmp#4##0", label %if.then.0, label %if.else.0
if.then.0:
  call ccc void @putchar(i8 %"z##0")
  call ccc void @putchar(i8 10)
  tail call fastcc void @"type_generics.#cont#5<0>"()
  ret void
if.else.0:
  tail call fastcc void @"type_generics.#cont#5<0>"()
  ret void
}

define external fastcc void @"type_generics.#cont#5<0>"() {
  %"tmp#7##0" = tail call fastcc {i64, i1} @"type_generics.foo2<0>"(i64 0)
  %"tmp#8##0" = extractvalue {i64, i1}%"tmp#7##0", 0
  %"b##0" = trunc i64 %"tmp#8##0" to i1
  %"tmp#3##0" = extractvalue {i64, i1}%"tmp#7##0", 1
  br i1 %"tmp#3##0", label %if.then.0, label %if.else.0
if.then.0:
  tail call fastcc void @"wybe.bool.print<0>"(i1 %"b##0")
  call ccc void @putchar(i8 10)
  ret void
if.else.0:
  ret void
}

define external fastcc void @"type_generics.foo<0>"(i64 %"x##0") {
  %"tmp#12##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#5##0" = ptrtoint ptr %"tmp#12##0" to i64
  %"tmp#13##0" = inttoptr i64 %"tmp#5##0" to ptr
  store i64 %"x##0", ptr %"tmp#13##0"
  %"tmp#14##0" = add i64 %"tmp#5##0", 8
  %"tmp#15##0" = inttoptr i64 %"tmp#14##0" to ptr
  store i64 0, ptr %"tmp#15##0"
  %"tmp#2##0" = tail call fastcc i64 @"wybe.list.length1<0>"(i64 %"tmp#5##0", i64 0)
  call ccc void @print_int(i64 %"tmp#2##0")
  call ccc void @putchar(i8 10)
  ret void
}

define external fastcc {i64, i1} @"type_generics.foo2<0>"(i64 %"x##0") {
  %"tmp#10##0" = call ccc ptr @wybe_malloc(i32 16)
  %"tmp#6##0" = ptrtoint ptr %"tmp#10##0" to i64
  %"tmp#11##0" = inttoptr i64 %"tmp#6##0" to ptr
  store i64 %"x##0", ptr %"tmp#11##0"
  %"tmp#12##0" = add i64 %"tmp#6##0", 8
  %"tmp#13##0" = inttoptr i64 %"tmp#12##0" to ptr
  store i64 0, ptr %"tmp#13##0"
  %"tmp#9##0" = icmp ne i64 %"tmp#6##0", 0
  br i1 %"tmp#9##0", label %if.then.0, label %if.else.0
if.then.0:
  %"tmp#14##0" = inttoptr i64 %"tmp#6##0" to ptr
  %"tmp#15##0" = load i64, ptr %"tmp#14##0"
  %"tmp#16##0" = insertvalue {i64, i1} undef, i64 %"tmp#15##0", 0
  %"tmp#17##0" = insertvalue {i64, i1} %"tmp#16##0", i1 1, 1
  ret {i64, i1} %"tmp#17##0"
if.else.0:
  %"tmp#18##0" = insertvalue {i64, i1} undef, i64 undef, 0
  %"tmp#19##0" = insertvalue {i64, i1} %"tmp#18##0", i1 0, 1
  ret {i64, i1} %"tmp#19##0"
}

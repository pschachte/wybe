======================================================================
AFTER EVERYTHING:
 Module type_generics
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : type_generics.<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public {inline} (0 calls)
0: type_generics.<0>
(io#0:wybe.phantom, ?io#2:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    type_generics.foo<0>(1:?T, ~#io#0:wybe.phantom, ?#io#1:wybe.phantom) #0 @type_generics:nn:nn
    type_generics.foo<0>('a':?T, ~#io#1:wybe.phantom, ?#io#2:wybe.phantom) #1 @type_generics:nn:nn


foo > (2 calls)
0: type_generics.foo<0>
foo(x#0:?T, io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp$5#0:wybe.list(?T))
    foreign lpvm mutate(~tmp$5#0:wybe.list(?T), ?tmp$6#0:wybe.list(?T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x#0:?T)
    foreign lpvm mutate(~tmp$6#0:wybe.list(?T), ?tmp$0#0:wybe.list(?T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(?T))
    wybe.list.length1<0>(~tmp$0#0:wybe.list(?T), 0:wybe.int, ?tmp$2#0:wybe.int) #4 @list:nn:nn
    foreign c print_int(~tmp$2#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$10#0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#io#1:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'type_generics'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  i64 @"wybe.list.length1<0>"(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"type_generics.<0>"()    {
entry:
  tail call fastcc  void  @"type_generics.foo<0>"(i64  1)  
  tail call fastcc  void  @"type_generics.foo<0>"(i64  97)  
  ret void 
}


define external fastcc  void @"type_generics.foo<0>"(i64  %"x#0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 %"x#0", i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 0, i64* %8 
  %"1$tmp$2#0" = tail call fastcc  i64  @"wybe.list.length1<0>"(i64  %3, i64  0)  
  tail call ccc  void  @print_int(i64  %"1$tmp$2#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

======================================================================
AFTER EVERYTHING:
 Module commonsubexpr
  public submods  : 
  public types    : 
  public resources: 
  public procs    : commonsubexpr.<0>
  imports         : use wybe
  types           : 
  resources       : 
  procs           : 

*main* > public (0 calls)
0: (argc#0:wybe.int, [?argc#0:wybe.int], argv#0:wybe.int, [?argv#0:wybe.int], exit_code#0:wybe.int, [?exit_code#0:wybe.int], io#0:wybe.phantom, ?io#1:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign c print_int(198:wybe.int, ~#io#0:wybe.phantom, ?tmp$6#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$6#0:wybe.phantom, ?tmp$7#0:wybe.phantom) @wybe:nn:nn
    foreign c print_int(198:wybe.int, ~tmp$7#0:wybe.phantom, ?tmp$8#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$8#0:wybe.phantom, ?tmp$9#0:wybe.phantom) @wybe:nn:nn
    foreign c print_int(11:wybe.int, ~tmp$9#0:wybe.phantom, ?tmp$10#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$10#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn


common_subexpr > inline (1 calls)
0: common_subexpr(x#0:wybe.int, io#0:wybe.phantom, ?io#3:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm add(x#0:wybe.int, 1:wybe.int, ?tmp$2#0:wybe.int) @wybe:nn:nn
    foreign llvm sub(~x#0:wybe.int, 1:wybe.int, ?tmp$51#0:wybe.int) @wybe:nn:nn
    foreign llvm mul(tmp$2#0:wybe.int, ~tmp$51#0:wybe.int, ?tmp$41#0:wybe.int) @wybe:nn:nn
    foreign llvm add(~tmp$41#0:wybe.int, ~tmp$41#0:wybe.int, ?tmp$0#0:wybe.int) @wybe:nn:nn
    foreign c print_int(tmp$0#0:wybe.int, ~#io#0:wybe.phantom, ?tmp$31#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$31#0:wybe.phantom, ?#io#1:wybe.phantom) @wybe:nn:nn
    foreign c print_int(~tmp$0#0:wybe.int, ~#io#1:wybe.phantom, ?tmp$44#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$44#0:wybe.phantom, ?#io#2:wybe.phantom) @wybe:nn:nn
    foreign c print_int(~tmp$2#0:wybe.int, ~#io#2:wybe.phantom, ?tmp$54#0:wybe.phantom) @wybe:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp$54#0:wybe.phantom, ?#io#3:wybe.phantom) @wybe:nn:nn

  LLVM code       :

; ModuleID = 'commonsubexpr'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"commonsubexpr.<0>"(i64  %"argc#0", i64  %"argv#0", i64  %"exit_code#0")    {
entry:
  tail call ccc  void  @print_int(i64  198)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  198)  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  11)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"commonsubexpr.common_subexpr<0>"(i64  %"x#0")    {
entry:
  %"1$tmp$2#0" = add   i64 %"x#0", 1 
  %"1$tmp$51#0" = sub   i64 %"x#0", 1 
  %"1$tmp$41#0" = mul   i64 %"1$tmp$2#0", %"1$tmp$51#0" 
  %"1$tmp$0#0" = add   i64 %"1$tmp$41#0", %"1$tmp$41#0" 
  tail call ccc  void  @print_int(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  %"1$tmp$0#0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call ccc  void  @print_int(i64  %"1$tmp$2#0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}

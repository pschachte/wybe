======================================================================
AFTER EVERYTHING:
 Module alias_des2
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : alias_des2.<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {semipure} (0 calls)
0: alias_des2.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#3##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#3##0:position.position, ?tmp#4##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#4##0:position.position, ?tmp#0##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 100:wybe.int) @position:nn:nn
    foreign lpvm {noalias} mutate(~tmp#0##0:position.position, ?pos##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 200:wybe.int) @position:nn:nn
    wybe.string.print<0>("expect pos(200,100):":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #2 @alias_des2:nn:nn
    position.printPosition<0>(~pos##1:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @alias_des2:nn:nn

  LLVM code       :

; ModuleID = 'alias_des2'


 


@alias_des2.1 =    constant {i64, i64} { i64 20, i64 ptrtoint ([?? x i8]* @alias_des2.0 to i64) }


@alias_des2.0 =    constant [?? x i8] c"expect pos(200,100):\00"


declare external fastcc  void @"position.printPosition<0>"(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"alias_des2.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 100, i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 100, i64* %5 
  %6 = inttoptr i64 %2 to i64* 
  store  i64 200, i64* %6 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @alias_des2.1, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"position.printPosition<0>"(i64  %2)  
  ret void 
}
--------------------------------------------------
 Module position
  representation  : (not a type)
  public submods  : position -> position.position
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : public use position.position
                    use wybe
  resources       : 
  submodules      : position.position
  procs           : 

printPosition > public (0 calls)
0: position.printPosition<0>
printPosition(pos##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>(" (":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @position:nn:nn
    foreign lpvm access(pos##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(",":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @position:nn:nn
    foreign lpvm access(~pos##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#1##0:wybe.int, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'position'


 


@position.3 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.2 to i64) }


@position.5 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.4 to i64) }


@position.1 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @position.0 to i64) }


@position.0 =    constant [?? x i8] c" (\00"


@position.4 =    constant [?? x i8] c")\00"


@position.2 =    constant [?? x i8] c",\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"position.printPosition<0>"(i64  %"pos##0")    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.1, i32 0, i32 0) to i64))  
  %0 = inttoptr i64 %"pos##0" to i64* 
  %1 = load  i64, i64* %0 
  tail call ccc  void  @print_int(i64  %1)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.3, i32 0, i32 0) to i64))  
  %2 = add   i64 %"pos##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  tail call ccc  void  @print_int(i64  %4)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.5, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module position.position
  representation  : address
  public submods  : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: position.position.=<0>
=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



position > public {inline} (0 calls)
0: position.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:position.position) @position:nn:nn
    foreign lpvm mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~#rec##1:position.position, ?#result##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int) @position:nn:nn
position > public {inline} (6 calls)
1: position.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#result##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @position:nn:nn


x > public {inline} (0 calls)
0: position.position.x<0>
x(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
x > public {inline} (0 calls)
1: position.position.x<1>
x(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


y > public {inline} (0 calls)
0: position.position.y<0>
y(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
y > public {inline} (0 calls)
1: position.position.y<1>
y(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


~= > public {inline} (0 calls)
0: position.position.~=<0>
~=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'position.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"position.position.=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = inttoptr i64 %"#right##0" to i64* 
  %6 = load  i64, i64* %5 
  %7 = add   i64 %"#right##0", 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = icmp eq i64 %1, %6 
  br i1 %10, label %if.then, label %if.else 
if.then:
  %11 = icmp eq i64 %4, %9 
  ret i1 %11 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"position.position.position<0>"(i64  %"x##0", i64  %"y##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  store  i64 %"x##0", i64* %3 
  %4 = add   i64 %2, 8 
  %5 = inttoptr i64 %4 to i64* 
  store  i64 %"y##0", i64* %5 
  ret i64 %2 
}


define external fastcc  {i64, i64} @"position.position.position<1>"(i64  %"#result##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#result##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = insertvalue {i64, i64} undef, i64 %1, 0 
  %6 = insertvalue {i64, i64} %5, i64 %4, 1 
  ret {i64, i64} %6 
}


define external fastcc  i64 @"position.position.x<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = load  i64, i64* %0 
  ret i64 %1 
}


define external fastcc  i64 @"position.position.x<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  store  i64 %"#field##0", i64* %6 
  ret i64 %2 
}


define external fastcc  i64 @"position.position.y<0>"(i64  %"#rec##0") alwaysinline   {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"position.position.y<1>"(i64  %"#rec##0", i64  %"#field##0") alwaysinline   {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i1 @"position.position.~=<0>"(i64  %"#left##0", i64  %"#right##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = add   i64 %"#left##0", 8 
  %3 = inttoptr i64 %2 to i64* 
  %4 = load  i64, i64* %3 
  %5 = inttoptr i64 %"#right##0" to i64* 
  %6 = load  i64, i64* %5 
  %7 = add   i64 %"#right##0", 8 
  %8 = inttoptr i64 %7 to i64* 
  %9 = load  i64, i64* %8 
  %10 = icmp eq i64 %1, %6 
  br i1 %10, label %if.then, label %if.else 
if.then:
  %11 = icmp eq i64 %4, %9 
  %12 = xor i1 %11, 1 
  ret i1 %12 
if.else:
  %13 = xor i1 0, 1 
  ret i1 %13 
}

resource res:int = 1

def {noinline} inout(b:bool) use !res {
    if { b :: !only_out(b) }
}

def {noinline} only_out(b:bool) use !res {
    if { b :: ?res = 2 | else :: ?res = 3 }
}

def {noinline} only_in(?x:int) use !res {
    ?x = res
}

def {noinline} still_only_in(b:bool, ?x:int) use !res {
    if { b :: ?x = 0 | else :: ?x = res }
}

def {noinline} rec_out_only1 use !res {
    ?res = 1
    !rec_out_only2
}

def {noinline} rec_out_only2 use !res {
    ?res = 1
    !rec_out_only1
}

def {noinline} rec_out_only_notail1 use !res {
    !rec_out_only_notail2
    ?res = 1
}

def {noinline} rec_out_only_notail2 use !res {
    !rec_out_only_notail1
    ?res = 1
}

def {noinline} higher_order_inout(f:{resource}(int)) use !res {
    f(res)
    ?res = 1
}

def {noinline} higher_order_in(f:{resource}(int)) use !res {
    f(res)
}

def {noinline} higher_order_out(f:{resource}(?int)) use !res {
    f(?res)
}

def {noinline} higher_order_only_out(f:{resource}(int)) use !res {
    ?res = 1
    f(res)
}

def {noinline} higher_order_branch(b:bool, f:{resource}()) {
    if { b :: !f }
}

def {noinline} higher_order_branch_use(b:bool, f:{resource}()) use !res {
    if { b :: !f | else :: ?res = 1 }
}

def {noinline} higher_order_branch_no_use(b:bool, f:{resource}()) use !res {
    if { b :: !f }
}

======================================================================
AFTER EVERYTHING:
 Module higher_order_phantom
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : 
  imports         : use wybe
  resources       : 
  procs           : 

proc a > {inline} (0 calls)
0: higher_order_phantom.a<0>
a(f##0:(wybe.phantom, ?wybe.phantom), x##0:wybe.phantom, ?#result##0:wybe.phantom)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~f##0:(wybe.phantom, ?wybe.phantom)(~x##0:wybe.phantom, ?#result##0:wybe.phantom) #0 @higher_order_phantom:nn:nn


proc b > {inline,semipure} (0 calls)
0: higher_order_phantom.b<0>
b(f##0:{impure}(wybe.phantom, ?wybe.phantom), x##0:wybe.phantom, [y##0:wybe.phantom])<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~f##0:{impure}(wybe.phantom, ?wybe.phantom)(~x##0:wybe.phantom, ?y##1:wybe.phantom) #0 @higher_order_phantom:nn:nn


proc c > {inline} (0 calls)
0: higher_order_phantom.c<0>
c(f##0:(wybe.phantom, ?X) <{}; {}; {0}>, x##0:wybe.phantom, ?#result##0:X <{}; {}; {0}>)<{}; {}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    ~f##0:(wybe.phantom, ?X)(~x##0:wybe.phantom, ?#result##0:X) #0 @higher_order_phantom:nn:nn

  LLVM code       :

; ModuleID = 'higher_order_phantom'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"higher_order_phantom.a<0>"(i64  %"f##0") alwaysinline   {
entry:
  ret void 
}


define external fastcc  void @"higher_order_phantom.b<0>"(i64  %"f##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"f##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to i64 (i64, i64)* 
  %3 = tail call fastcc  i64  %2(i64  %"f##0", i64  undef)  
  ret void 
}


define external fastcc  i64 @"higher_order_phantom.c<0>"(i64  %"f##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"f##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to i64 (i64, i64)* 
  %3 = tail call fastcc  i64  %2(i64  %"f##0", i64  undef)  
  ret i64 %3 
}

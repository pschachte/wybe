# aliasing part (the part is primitive values) of a data structures
# p1's int value copied to p2, so p1 and p2 not aliased

use position

pub def replicate1(p1:position, ?p2:position) use !io {
  ?pp = position(0,0)
  !println("random replicate1")
  !println(pp^x)
  ?p2 = position(p1^x, 200)
}

pub def bar use !io {
  ?p1 = position(100,100)
  !replicate1(p1, ?p2)

  !println("--- After calling replicate1: ")
  !print("expect p1(100,100):")
  !printPosition(p1)
  !print("expect p2(100,200):")
  !printPosition(p2)

  x(!p1, 555)

  !println("--- After calling x(!p1, 555): ")
  !print("expect p1(555,100):")
  !printPosition(p1)
  !print("expect p2(100,200):")
  !printPosition(p2)
}

!bar

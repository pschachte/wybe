# transitive aliasing data structures in recursive def calls {

use position

# Expected Alias Pairs: [(p1#0,p2#0)]
pub def foo(p1:position, ?p2:position, ?p3:position) use !io {
    if {p1^x > 1 :: ?p2 = p1 # p1 and p2 aliased, p1 = p2 = (2,2)
                    ?p3 = position(3,3)
                    !print("--- Inside foo: expect p3(3,3):")
                    !printPosition(p3)
       | else      :: ?tmp = p1^x
              x(!p1, tmp + 1) # p1 (2, 1)
              !bar(p1, ?p3) # p1 and p3 aliased
              ?p2 = position(2,2)
    }
}

# Expected Alias Pairs: [(p1#0,p3#0)]
pub def bar(p1:position, ?p3:position) use !io {
    if { p1^y > 1 :: ?p3 = p1
       | else      :: ?tmp = p1^y
                 y(!p1, tmp + 1) # p1 (2, 2)
                 ?p3 = p1
                 !foo(p1, ?p2, ?p3) # p1 = p3 = (2,2)
    }
}

?p1 = position(1, 1)
!foo(p1, ?p2, ?p3)

!println("--- After calling foo: ")
!print("expect p1(2,2):")
!printPosition(p1)
!print("expect p2(2,2):")
!printPosition(p2)
!print("expect p3(3,3):")
!printPosition(p3)

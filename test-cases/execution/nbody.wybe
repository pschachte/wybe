# Wybe implementation of https://benchmarksgame-team.pages.debian.net/benchmarksgame/description/nbody.html#nbody

pub type bodylist { pub empty | body(x:float, y:float, z:float, vx:float, vy:float, vz:float, m:float, tail:bodylist) }

pub def get_bodies(?bodies:bodylist) {
    ?PI = 3.14159265358979323
    ?DAYS_PER_YEAR = 365.24
    ?SOLAR_MASS = 4.0 * PI * PI
    ?bodies = empty()

    # neptune
    ?x = 15.3796971148509165
    ?y = (0.0 - 25.9193146099879641)
    ?z = 0.179258772950371181
    ?vx = 0.00268067772490389322 * DAYS_PER_YEAR
    ?vy = 0.00162824170038242295  * DAYS_PER_YEAR
    ?vz = (0.0 - 0.0000951592254519715870) * DAYS_PER_YEAR
    ?m = 0.0000515138902046611451 * SOLAR_MASS
    ?bodies = body(x, y, z, vx, vy, vz, m, bodies)

    # uranus
    ?x = 12.8943695621391310
    ?y = (0.0 - 15.1111514016986312)
    ?z = 0.0 - 0.223307578892655734
    ?vx = 0.00296460137564761618 * DAYS_PER_YEAR
    ?vy = 0.00237847173959480950  * DAYS_PER_YEAR
    ?vz = (0.0 - 0.0000296589568540237556) * DAYS_PER_YEAR
    ?m = 0.0000436624404335156298 * SOLAR_MASS
    ?bodies = body(x, y, z, vx, vy, vz, m, bodies)

    # saturn
    ?x = 8.34336671824457987
    ?y = 4.12479856412430479
    ?z = 0.0 - 0.403523417114321381
    ?vx = 0.0 - 0.00276742510726862411 * DAYS_PER_YEAR
    ?vy = 0.00499852801234917238 * DAYS_PER_YEAR
    ?vz = 0.0000230417297573763929 * DAYS_PER_YEAR
    ?m = 0.000285885980666130812 * SOLAR_MASS
    ?bodies = body(x, y, z, vx, vy, vz, m, bodies)

    # jupiter
    ?x = 4.84143144246472090
    ?y = 0.0 - 1.16032004402742839
    ?z = 0.0 - 0.103622044471123109
    ?vx = 0.00166007664274403694 * DAYS_PER_YEAR
    ?vy = 0.00769901118419740425 * DAYS_PER_YEAR
    ?vz = 0.0 - 0.0000690460016972063023 * DAYS_PER_YEAR
    ?m = 0.000954791938424326609 * SOLAR_MASS
    ?bodies = body(x, y, z, vx, vy, vz, m, bodies)

    # sun
    ?x = 0.0
    ?y = 0.0
    ?z = 0.0
    ?vx = 0.0
    ?vy = 0.0
    ?vz = 0.0
    ?m = SOLAR_MASS
    ?bodies = body(x, y, z, vx, vy, vz, m, bodies)
}

pub def print_bodylist(bodies:bodylist) use !io {
    if {bodies = body(?x, ?y, ?z, ?vx, ?vy, ?vz, ?m, ?remain_bodies) :: 
        !print("x: ")
        !print(x)
        !print(" y: ")
        !print(y)
        !print(" z: ")
        !print(z)
        !print(" vx: ")
        !print(vx)
        !print(" vy: ")
        !print(vy)
        !print(" vz: ")
        !print(vz)
        !print(" m: ")
        !print(m)
        !nl
        !print_bodylist(remain_bodies)
    }
}

# -----------------------------
# offset_momentum
pub def offset_momentum(!bodies:bodylist) {
    ?px = 0.0
    ?py = 0.0
    ?pz = 0.0
    offset_momentum_loop(bodies, !px, !py, !pz)
    if {bodies = body(?x, ?y, ?z, ?vx, ?vy, ?vz, ?m, ?remain_bodies) :: 
        ?vx = px / m
        ?vy = py / m
        ?vz = pz / m
        ?bodies = body(x, y, z, vx, vy, vz, m, remain_bodies)
    }
}

pub def offset_momentum_loop(bodies:bodylist, !px:float, !py:float, !pz:float) {
    if {bodies = body(?x, ?y, ?z, ?vx, ?vy, ?vz, ?m, ?remain_bodies) :: 
        ?px = px - vx * m
        ?py = py - vy * m
        ?pz = pz - vz * m
        offset_momentum_loop(remain_bodies, !px, !py, !pz)
    }
}
# -----------------------------

# -----------------------------
# report_energy
pub def report_energy(bodies:bodylist) use !io {
    ?e = 0.0
    energy_outer_loop(bodies, !e)
    !print("energy: ")
    !println(e)
}

pub def energy_outer_loop(bodies:bodylist, !e:float) {
    if {bodies = body(?x, ?y, ?z, ?vx, ?vy, ?vz, ?m, ?remain_bodies) :: 
        ?e = e + m * (vx * vx + vy * vy + vz * vz) / 2.0
        energy_inner_loop(remain_bodies, x, y, z, m, !e)

        energy_outer_loop(remain_bodies, !e)
    }
}

pub def energy_inner_loop(bodies:bodylist, x1:float, y1:float, z1:float, m1:float, !e:float) {
    if {bodies = body(?x2, ?y2, ?z2, ?vx2, ?vy2, ?vz2, ?m2, ?remain_bodies) :: 
        ?dx = x1 - x2
        ?dy = y1 - y2
        ?dz = z1 - z2
        ?dis = sqrt(dx * dx + dy * dy + dz * dz)
        ?e = e - (m1 * m2) / dis
        energy_inner_loop(remain_bodies, x1, y1, z1, m1, !e)
    }
}
# -----------------------------

# -----------------------------
# advance
pub def advance(dt:float, n:int, !bodies:bodylist) {
    if { n > 0 ::
        ?n = n - 1

        update_bodies_v(dt, bodies, !bodies)
        update_bodies_pos(dt, !bodies)

        advance(dt, n, !bodies)
    }
}

pub def update_bodies_v(dt:float, allbodies:bodylist, !bodies:bodylist) {
    if {bodies = body(?x1, ?y1, ?z1, ?vx1, ?vy1, ?vz1, ?m1, ?remain_bodies) :: 

        update_body_v_inner(dt, x1, y1, z1, !vx1, !vy1, !vz1, allbodies)

        update_bodies_v(dt, allbodies, !remain_bodies)
        ?bodies = body(x1, y1, z1, vx1, vy1, vz1, m1, remain_bodies)
    }
}

pub def update_body_v_inner(dt:float, x1:float, y1:float, z1:float, !vx1:float, !vy1:float, !vz1:float, bodies:bodylist) {
    if {bodies = body(?x2, ?y2, ?z2, ?vx2, ?vy2, ?vz2, ?m2, ?remain_bodies) :: 
            ?dx = x1 - x2
            ?dy = y1 - y2
            ?dz = z1 - z2
            ?d2 = dx * dx + dy * dy + dz * dz
            if { d2 = 0.0 ::
               | otherwise :: 
                    ?mag = dt * power(d2, 0.0 - 1.5)
                    ?b2m = m2 * mag
                    ?vx1 = vx1 - dx * b2m
                    ?vy1 = vy1 - dy * b2m
                    ?vz1 = vz1 - dz * b2m
            }
            update_body_v_inner(dt, x1, y1, z1, !vx1, !vy1, !vz1, remain_bodies)
    }
}

pub def update_bodies_pos(dt:float, !bodies:bodylist) {
    if {bodies = body(?x, ?y, ?z, ?vx, ?vy, ?vz, ?m, ?remain_bodies) :: 

        ?x = x + dt * vx
        ?y = y + dt * vy
        ?z = z + dt * vz

        update_bodies_pos(dt, !remain_bodies)
        ?bodies = body(x, y, z, vx, vy, vz, m, remain_bodies)
    }
}

# -----------------------------
!print("n: ")
!read(?n:int)

get_bodies(?bodies)
offset_momentum(!bodies)
!report_energy(bodies)
# !print_bodylist(bodies)
advance(0.01, n, !bodies)
# !print_bodylist(bodies)
!report_energy(bodies)
!nl
!malloc_count(?mc)
!println("malloc count: (should be 5005 with multi-specz and 10006 without it)")
!println(mc)
